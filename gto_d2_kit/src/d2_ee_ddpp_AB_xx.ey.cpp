/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47932 = 0 * ae;
    const double C47931 = ae * be;
    const double C47930 = 0 * be;
    const double C47929 = 0 * be;
    const double C47928 = ae + be;
    const double C47927 = 0 * be;
    const double C47926 = xA - xB;
    const double C48027 = 0 * be;
    const double C48140 = p + q;
    const double C48139 = p * q;
    const double C48145 = xP - xQ;
    const double C48144 = bs[2];
    const double C48150 = bs[3];
    const double C48161 = bs[4];
    const double C48182 = bs[5];
    const double C48218 = bs[6];
    const double C48274 = bs[7];
    const double C48339 = yP - yQ;
    const double C48371 = zP - zQ;
    const double C123 = bs[0];
    const double C48870 = ce + de;
    const double C48869 = ce * de;
    const double C48868 = xC - xD;
    const double C48883 = yC - yD;
    const double C48892 = zC - zD;
    const double C48939 = yA - yB;
    const double C48951 = zA - zB;
    const double C47991 = 2 * C47931;
    const double C47988 = -2 * C47930;
    const double C47987 = -2 * C47929;
    const double C47939 = C47932 / C47928;
    const double C47936 = C47930 / C47928;
    const double C47934 = 2 * C47928;
    const double C47933 = std::pow(C47928, 2);
    const double C47938 = C47931 * C47926;
    const double C47937 = C47926 * C47930;
    const double C47935 = C47926 * C47929;
    const double C48834 = C47926 * be;
    const double C48833 = C47926 * ae;
    const double C48832 = std::pow(C47926, 2);
    const double C48028 = C48027 / C47928;
    const double C48141 = 2 * C48139;
    const double C48153 = C48145 * ae;
    const double C48152 = C48145 * be;
    const double C48149 = std::pow(C48145, 2);
    const double C48404 = std::pow(C48339, 2);
    const double C48437 = std::pow(C48371, 2);
    const double C48880 = 2 * C48870;
    const double C49159 = std::pow(C48870, 2);
    const double C48871 = std::pow(C48868, 2);
    const double C49158 = C48868 * de;
    const double C49157 = C48868 * ce;
    const double C48905 = std::pow(C48883, 2);
    const double C49163 = C48883 * de;
    const double C49161 = C48883 * ce;
    const double C48922 = std::pow(C48892, 2);
    const double C49164 = C48892 * de;
    const double C49162 = C48892 * ce;
    const double C48940 = std::pow(C48939, 2);
    const double C48995 = C48939 * be;
    const double C48993 = C48939 * ae;
    const double C48952 = std::pow(C48951, 2);
    const double C49035 = C48951 * be;
    const double C49033 = C48951 * ae;
    const double C47995 = ae * C47988;
    const double C47994 = ae * C47987;
    const double C48846 = std::pow(C47934, -1);
    const double C49153 = std::pow(C47934, -2);
    const double C47940 = 2 * C47933;
    const double C47986 = C47933 * C47934;
    const double C48032 = 4 * C47933;
    const double C47942 = C47937 / C47928;
    const double C47941 = C47935 / C47928;
    const double C49146 = std::pow(C48833, 2);
    const double C48835 = C48832 * C47931;
    const double C48143 = C48141 / C48140;
    const double C144 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C48141 / C48140, 2) -
          (bs[1] * C48141) / C48140) *
         C47931) /
        C47933;
    const double C124 = -(C48145 * bs[1] * C48141) / C48140;
    const double C241 = -(C48339 * bs[1] * C48141) / C48140;
    const double C349 = -(C48371 * bs[1] * C48141) / C48140;
    const double C48156 = C48150 * C48153;
    const double C48167 = C48161 * C48153;
    const double C48190 = C48182 * C48153;
    const double C48230 = C48218 * C48153;
    const double C48290 = C48274 * C48153;
    const double C131 = (-(bs[1] * C48153 * C48141) / C48140) / C47928;
    const double C48155 = C48150 * C48152;
    const double C48164 = C48161 * C48152;
    const double C48186 = C48182 * C48152;
    const double C48226 = C48218 * C48152;
    const double C48286 = C48274 * C48152;
    const double C130 = (-(bs[1] * C48152 * C48141) / C48140) / C47928;
    const double C48163 = C48149 * C48161;
    const double C48185 = C48149 * C48182;
    const double C48225 = C48149 * C48218;
    const double C48285 = C48149 * C48274;
    const double C49160 = std::pow(C48880, -1);
    const double C49195 = 2 * C49159;
    const double C48872 = C48871 * C48869;
    const double C48906 = C48905 * C48869;
    const double C48923 = C48922 * C48869;
    const double C48941 = C48940 * C47931;
    const double C49165 = std::pow(C48993, 2);
    const double C48953 = C48952 * C47931;
    const double C49167 = std::pow(C49033, 2);
    const double C47999 = C47926 * C47995;
    const double C47949 = C47930 / C47940;
    const double C47946 = C47929 / C47940;
    const double C47945 = C47927 / C47940;
    const double C48000 = C47995 / C47986;
    const double C47998 = C47994 / C47986;
    const double C49156 = 4 * C47986;
    const double C48034 = C47928 * C48032;
    const double C47947 = 0 - C47942;
    const double C47944 = 0 - C47941;
    const double C48836 = C48835 / C47928;
    const double C48146 = std::pow(C48143, 2);
    const double C48151 = -C48143;
    const double C48162 = std::pow(C48143, 4);
    const double C48219 = std::pow(C48143, 6);
    const double C48873 = C48872 / C48870;
    const double C48907 = C48906 / C48870;
    const double C48924 = C48923 / C48870;
    const double C48942 = C48941 / C47928;
    const double C48954 = C48953 / C47928;
    const double C48003 = C47999 / C47933;
    const double C47952 = C47947 * ae;
    const double C47951 = C47944 * ae;
    const double C48837 = -C48836;
    const double C48148 = C48144 * C48146;
    const double C145 = (ae * C48146 * C48144 * C48145 * be +
                         be * C48146 * C48144 * C48145 * ae +
                         C48145 *
                             (C48144 * C48146 + std::pow(C48145, 2) * bs[3] *
                                                    std::pow(-C48143, 3)) *
                             C47931) /
                        C47933;
    const double C132 = (C48145 * C48146 * C48144 * C48152) / C47928 -
                        (be * bs[1] * C48141) / (C48140 * C47928);
    const double C133 = (C48145 * C48146 * C48144 * C48153) / C47928 -
                        (ae * bs[1] * C48141) / (C48140 * C47928);
    const double C251 = (C48339 * C48146 * C48144 * C48152) / C47928;
    const double C252 = (C48339 * C48146 * C48144 * C48153) / C47928;
    const double C359 = (C48371 * C48146 * C48144 * C48152) / C47928;
    const double C360 = (C48371 * C48146 * C48144 * C48153) / C47928;
    const double C48154 = std::pow(C48151, 3);
    const double C48183 = std::pow(C48151, 5);
    const double C48275 = std::pow(C48151, 7);
    const double C48171 = C48162 * C48167;
    const double C48170 = C48162 * C48164;
    const double C48169 = C48163 * C48162;
    const double C48181 = C48161 * C48162;
    const double C48237 = C48219 * C48230;
    const double C48234 = C48219 * C48226;
    const double C48233 = C48225 * C48219;
    const double C48273 = C48218 * C48219;
    const double C48874 = -C48873;
    const double C48908 = -C48907;
    const double C48925 = -C48924;
    const double C48943 = -C48942;
    const double C48955 = -C48954;
    const double C47956 = C47952 / C47928;
    const double C47955 = C47951 / C47928;
    const double C48838 = std::exp(C48837);
    const double C125 = C48148 * C48149 - (bs[1] * C48141) / C48140;
    const double C240 = C48339 * C48145 * C48148;
    const double C348 = C48371 * C48145 * C48148;
    const double C521 = C48148 * C48404 - (bs[1] * C48141) / C48140;
    const double C623 = C48371 * C48339 * C48148;
    const double C874 = C48148 * C48437 - (bs[1] * C48141) / C48140;
    const double C48158 = C48154 * C48156;
    const double C48157 = C48154 * C48155;
    const double C48160 = C48150 * C48154;
    const double C259 =
        (C48339 * (C48148 + C48149 * C48150 * C48154) * C47931) / C47933;
    const double C367 =
        (C48371 * (C48148 + C48149 * C48150 * C48154) * C47931) / C47933;
    const double C48196 = C48183 * C48190;
    const double C48193 = C48183 * C48186;
    const double C48192 = C48185 * C48183;
    const double C48217 = C48182 * C48183;
    const double C48298 = C48275 * C48290;
    const double C48295 = C48275 * C48286;
    const double C48294 = C48285 * C48275;
    const double C48174 = C48145 * C48171;
    const double C48180 = be * C48171;
    const double C48634 = C48339 * C48171;
    const double C48173 = C48145 * C48170;
    const double C48179 = ae * C48170;
    const double C48632 = C48339 * C48170;
    const double C48191 = C48181 * ae;
    const double C48189 = C48181 * C48149;
    const double C48188 = C48145 * C48181;
    const double C48187 = C48181 * be;
    const double C48788 = C48181 * C48404;
    const double C48796 = C48339 * C48181;
    const double C48814 = C48181 * C48437;
    const double C48824 = C48371 * C48181;
    const double C48243 = C48145 * C48237;
    const double C48272 = be * C48237;
    const double C48357 = C48339 * C48237;
    const double C48389 = C48371 * C48237;
    const double C48411 = C48237 * C48404;
    const double C48444 = C48237 * C48437;
    const double C48240 = C48145 * C48234;
    const double C48271 = ae * C48234;
    const double C48356 = C48339 * C48234;
    const double C48388 = C48371 * C48234;
    const double C48410 = C48234 * C48404;
    const double C48443 = C48234 * C48437;
    const double C48291 = C48273 * ae;
    const double C48289 = C48273 * C48149;
    const double C48288 = C48145 * C48273;
    const double C48287 = C48273 * be;
    const double C48875 = std::exp(C48874);
    const double C48909 = std::exp(C48908);
    const double C48926 = std::exp(C48925);
    const double C48944 = std::exp(C48943);
    const double C48956 = std::exp(C48955);
    const double C47960 = C47956 - C47946;
    const double C47959 = C47955 - C47945;
    const double C47943 = C47938 * C48838;
    const double C48840 = C48838 * C48833;
    const double C48839 = C48838 / C47934;
    const double C48848 = C48846 * C48838;
    const double C49149 = C48838 * C48834;
    const double C49192 = C49153 * C48838;
    const double C49186 = C48838 * C49146;
    const double C135 =
        (C48146 * C48144 * C48153 + C48145 * (C48145 * C48158 + C48148 * ae) +
         C48145 * C48148 * ae) /
        C47928;
    const double C250 = (C48339 * (C48145 * C48158 + C48148 * ae)) / C47928;
    const double C358 = (C48371 * (C48145 * C48158 + C48148 * ae)) / C47928;
    const double C527 = (C48146 * C48144 * C48153 + C48158 * C48404) / C47928;
    const double C629 = (C48371 * C48339 * C48158) / C47928;
    const double C880 = (C48146 * C48144 * C48153 + C48158 * C48437) / C47928;
    const double C1171 =
        (2 * C48339 * C48158 + C48339 * (C48158 + C48171 * C48404)) / C47928;
    const double C1417 = (C48371 * (C48158 + C48171 * C48404)) / C47928;
    const double C2325 = (C48339 * C48158 + C48339 * C48171 * C48437) / C47928;
    const double C2760 =
        (2 * C48371 * C48158 + C48371 * (C48158 + C48171 * C48437)) / C47928;
    const double C146 =
        ((C48148 + C48149 * C48150 * C48154) * C47931 +
         ae * (C48145 * C48157 + C48148 * be) +
         be * (C48145 * C48158 + C48148 * ae) +
         C48145 *
             (ae * C48157 + be * C48158 +
              C48145 *
                  (C48150 * C48154 + C48149 * bs[4] * std::pow(C48143, 4)) *
                  C47931)) /
        C47933;
    const double C134 =
        (C48146 * C48144 * C48152 + C48145 * (C48145 * C48157 + C48148 * be) +
         C48145 * C48148 * be) /
        C47928;
    const double C249 = (C48339 * (C48145 * C48157 + C48148 * be)) / C47928;
    const double C357 = (C48371 * (C48145 * C48157 + C48148 * be)) / C47928;
    const double C526 = (C48146 * C48144 * C48152 + C48157 * C48404) / C47928;
    const double C628 = (C48371 * C48339 * C48157) / C47928;
    const double C879 = (C48146 * C48144 * C48152 + C48157 * C48437) / C47928;
    const double C1170 =
        (2 * C48339 * C48157 + C48339 * (C48157 + C48170 * C48404)) / C47928;
    const double C1416 = (C48371 * (C48157 + C48170 * C48404)) / C47928;
    const double C2324 = (C48339 * C48157 + C48339 * C48170 * C48437) / C47928;
    const double C2759 =
        (2 * C48371 * C48157 + C48371 * (C48157 + C48170 * C48437)) / C47928;
    const double C48168 = C48160 * ae;
    const double C48166 = C48145 * C48160;
    const double C48165 = C48160 * be;
    const double C48172 = C48160 + C48169;
    const double C48779 = C48339 * C48160;
    const double C126 =
        2 * C48145 * C48148 + C48145 * (C48148 + C48160 * C48149);
    const double C239 = C48339 * (C48148 + C48160 * C48149);
    const double C347 = C48371 * (C48148 + C48160 * C48149);
    const double C1164 =
        2 * C48339 * C48148 + C48339 * (C48148 + C48160 * C48404);
    const double C1410 = C48371 * (C48148 + C48160 * C48404);
    const double C1680 =
        3 * (C48148 + C48160 * C48404) +
        C48339 * (2 * C48339 * C48160 + C48339 * (C48160 + C48181 * C48404));
    const double C1862 =
        C48371 * (2 * C48339 * C48160 + C48339 * (C48160 + C48181 * C48404));
    const double C2318 = C48339 * C48148 + C48339 * C48160 * C48437;
    const double C2321 =
        C48148 + C48160 * C48404 + (C48160 + C48181 * C48404) * C48437;
    const double C2753 =
        2 * C48371 * C48148 + C48371 * (C48148 + C48160 * C48437);
    const double C3688 =
        3 * (C48148 + C48160 * C48437) +
        C48371 * (2 * C48371 * C48160 + C48371 * (C48160 + C48181 * C48437));
    const double C9242 = C48838 * C259;
    const double C10372 = C48838 * C367;
    const double C48200 = C48145 * C48196;
    const double C48216 = be * C48196;
    const double C48341 = C48339 * C48196;
    const double C48373 = C48371 * C48196;
    const double C48653 = C48196 * C48404;
    const double C48697 = C48196 * C48437;
    const double C1684 =
        (3 * (C48158 + C48171 * C48404) +
         C48339 * (2 * C48339 * C48171 + C48339 * (C48171 + C48196 * C48404))) /
        C47928;
    const double C1866 =
        (C48371 * (2 * C48339 * C48171 + C48339 * (C48171 + C48196 * C48404))) /
        C47928;
    const double C2331 =
        (C48158 + C48171 * C48404 + (C48171 + C48196 * C48404) * C48437) /
        C47928;
    const double C3692 =
        (3 * (C48158 + C48171 * C48437) +
         C48371 * (2 * C48371 * C48171 + C48371 * (C48171 + C48196 * C48437))) /
        C47928;
    const double C48199 = C48145 * C48193;
    const double C48215 = ae * C48193;
    const double C48340 = C48339 * C48193;
    const double C48372 = C48371 * C48193;
    const double C48650 = C48193 * C48404;
    const double C48694 = C48193 * C48437;
    const double C1683 =
        (3 * (C48157 + C48170 * C48404) +
         C48339 * (2 * C48339 * C48170 + C48339 * (C48170 + C48193 * C48404))) /
        C47928;
    const double C1865 =
        (C48371 * (2 * C48339 * C48170 + C48339 * (C48170 + C48193 * C48404))) /
        C47928;
    const double C2330 =
        (C48157 + C48170 * C48404 + (C48170 + C48193 * C48404) * C48437) /
        C47928;
    const double C3691 =
        (3 * (C48157 + C48170 * C48437) +
         C48371 * (2 * C48371 * C48170 + C48371 * (C48170 + C48193 * C48437))) /
        C47928;
    const double C48198 = C48181 + C48192;
    const double C48231 = C48217 * ae;
    const double C48229 = C48217 * C48149;
    const double C48228 = C48145 * C48217;
    const double C48227 = C48217 * be;
    const double C48239 = C48217 + C48233;
    const double C48797 = C48217 * C48404;
    const double C48820 = C48339 * C48217;
    const double C48825 = C48217 * C48437;
    const double C48304 = C48145 * C48298;
    const double C48301 = C48145 * C48295;
    const double C48300 = C48273 + C48294;
    const double C48184 = C48179 + C48180;
    const double C48195 = C48160 + C48189;
    const double C48197 = C48188 * ae;
    const double C48194 = C48188 * be;
    const double C48221 = 2 * C48188;
    const double C48781 = C48339 * C48188;
    const double C48789 = C48160 + C48788;
    const double C48798 = 2 * C48796;
    const double C48815 = C48160 + C48814;
    const double C48826 = 2 * C48824;
    const double C48362 = be * C48357;
    const double C48428 = C48371 * C48357;
    const double C48709 = C48357 * C48437;
    const double C48394 = be * C48389;
    const double C48414 = C48196 + C48411;
    const double C48447 = C48196 + C48444;
    const double C48284 = C48271 + C48272;
    const double C48361 = ae * C48356;
    const double C48427 = C48371 * C48356;
    const double C48706 = C48356 * C48437;
    const double C48393 = ae * C48388;
    const double C48413 = C48193 + C48410;
    const double C48446 = C48193 + C48443;
    const double C48297 = C48217 + C48289;
    const double C48299 = C48288 * ae;
    const double C48296 = C48288 * be;
    const double C49196 = C49160 * C48875;
    const double C49194 = C48875 * C49157;
    const double C235 = -(C48875 * C49158) / C48870;
    const double C49198 = C49160 * C48909;
    const double C49197 = C48909 * C49161;
    const double C451 = -(C48909 * C49163) / C48870;
    const double C49200 = C49160 * C48926;
    const double C49199 = C48926 * C49162;
    const double C725 = -(C48926 * C49164) / C48870;
    const double C48994 = C48944 / C47934;
    const double C48996 = C48944 * C48993;
    const double C49003 = C48846 * C48944;
    const double C49172 = C48944 * C48995;
    const double C49203 = C49153 * C48944;
    const double C49201 = C48944 * C49165;
    const double C49034 = C48956 / C47934;
    const double C49036 = C48956 * C49033;
    const double C49043 = C48846 * C48956;
    const double C49179 = C48956 * C49035;
    const double C49206 = C49153 * C48956;
    const double C49204 = C48956 * C49167;
    const double C47965 = C47960 / C47934;
    const double C47964 = C47926 * C47960;
    const double C47989 = 2 * C47960;
    const double C47963 = C47959 + C47936;
    const double C47950 = C47943 / C47933;
    const double C47948 = 2 * C47943;
    const double C47990 = -4 * C47943;
    const double C48841 = C48840 * C48834;
    const double C48847 = C48840 / C47940;
    const double C49150 = C48846 * C48840;
    const double C49148 = C48840 / C47928;
    const double C1004 = (C48838 * std::pow(C48834, 2)) / C47933 + C48839;
    const double C48849 = C48848 * C48834;
    const double C49169 = C48848 / C48032;
    const double C49154 = C48833 * C48848;
    const double C49152 = 2 * C48848;
    const double C105 = C48848 / C49156;
    const double C26745 = C48848 / C47934;
    const double C49188 = C49149 / C47928;
    const double C1005 = (-2 * C48846 * C49149) / C47928;
    const double C49217 = C49186 / C47933;
    const double C48177 = C48174 + C48168;
    const double C522 = C48145 * C48148 + C48166 * C48404;
    const double C624 = C48371 * C48339 * C48166;
    const double C875 = C48145 * C48148 + C48166 * C48437;
    const double C1163 =
        2 * C48339 * C48166 + C48339 * (C48166 + C48188 * C48404);
    const double C1409 = C48371 * (C48166 + C48188 * C48404);
    const double C2319 = C48339 * C48166 + C48339 * C48188 * C48437;
    const double C2752 =
        2 * C48371 * C48166 + C48371 * (C48166 + C48188 * C48437);
    const double C48176 = C48173 + C48165;
    const double C48175 = C48172 * C47931;
    const double C3253 =
        2 * C48371 * C48779 + C48371 * (C48779 + C48339 * C48181 * C48437);
    const double C11236 =
        3 * (C48779 + C48796 * C48437) +
        C48371 * (2 * C48371 * C48796 +
                  C48371 * (C48796 + C48339 * C48217 * C48437));
    const double C48203 = C48200 + C48191;
    const double C48344 = be * C48341;
    const double C48670 = 2 * C48341;
    const double C3257 =
        (2 * C48371 * C48634 + C48371 * (C48634 + C48341 * C48437)) / C47928;
    const double C11239 =
        (3 * (C48634 + C48341 * C48437) +
         C48371 * (2 * C48371 * C48341 + C48371 * (C48341 + C48357 * C48437))) /
        C47928;
    const double C48376 = be * C48373;
    const double C48716 = 2 * C48373;
    const double C48654 = C48171 + C48653;
    const double C48698 = C48171 + C48697;
    const double C48202 = C48199 + C48187;
    const double C48224 = C48215 + C48216;
    const double C48343 = ae * C48340;
    const double C48666 = 2 * C48340;
    const double C3256 =
        (2 * C48371 * C48632 + C48371 * (C48632 + C48340 * C48437)) / C47928;
    const double C11238 =
        (3 * (C48632 + C48340 * C48437) +
         C48371 * (2 * C48371 * C48340 + C48371 * (C48340 + C48356 * C48437))) /
        C47928;
    const double C48375 = ae * C48372;
    const double C48712 = 2 * C48372;
    const double C48651 = C48170 + C48650;
    const double C48695 = C48170 + C48694;
    const double C48201 = C48198 * C47931;
    const double C48248 = C48243 + C48231;
    const double C48236 = C48181 + C48229;
    const double C48238 = C48228 * ae;
    const double C48235 = C48228 * be;
    const double C48278 = 2 * C48228;
    const double C48791 = C48228 * C48404;
    const double C48812 = C48339 * C48228;
    const double C48817 = C48228 * C48437;
    const double C1681 =
        3 * (C48166 + C48188 * C48404) +
        C48339 * (2 * C48339 * C48188 + C48339 * (C48188 + C48228 * C48404));
    const double C1863 =
        C48371 * (2 * C48339 * C48188 + C48339 * (C48188 + C48228 * C48404));
    const double C2322 =
        C48166 + C48188 * C48404 + (C48188 + C48228 * C48404) * C48437;
    const double C3689 =
        3 * (C48166 + C48188 * C48437) +
        C48371 * (2 * C48371 * C48188 + C48371 * (C48188 + C48228 * C48437));
    const double C48246 = C48240 + C48227;
    const double C48245 = C48239 * C47931;
    const double C48799 = C48181 + C48797;
    const double C48821 = C48820 * C48437;
    const double C48827 = C48181 + C48825;
    const double C48309 = C48304 + C48291;
    const double C48307 = C48301 + C48287;
    const double C48306 = C48300 * C47931;
    const double C127 = 3 * (C48148 + C48160 * C48149) +
                        C48145 * (2 * C48166 + C48145 * C48195);
    const double C238 = C48339 * (2 * C48166 + C48145 * C48195);
    const double C346 = C48371 * (2 * C48166 + C48145 * C48195);
    const double C523 = C48148 + C48160 * C48149 + C48195 * C48404;
    const double C625 = C48371 * C48339 * C48195;
    const double C876 = C48148 + C48160 * C48149 + C48195 * C48437;
    const double C3254 =
        2 * C48371 * C48781 + C48371 * (C48781 + C48339 * C48228 * C48437);
    const double C9230 =
        4 * (2 * C48779 + C48339 * C48789) +
        C48339 * (3 * C48789 + C48339 * (2 * C48339 * C48181 +
                                         C48339 * (C48181 + C48217 * C48404)));
    const double C9384 =
        C48371 * (3 * C48789 + C48339 * (2 * C48339 * C48181 +
                                         C48339 * (C48181 + C48217 * C48404)));
    const double C18090 =
        4 * (2 * C48371 * C48160 + C48371 * C48815) +
        C48371 * (3 * C48815 + C48371 * (2 * C48371 * C48181 +
                                         C48371 * (C48181 + C48217 * C48437)));
    const double C48431 = be * C48428;
    const double C48710 = C48341 + C48709;
    const double C48417 = be * C48414;
    const double C48671 = C48339 * C48414;
    const double C48450 = be * C48447;
    const double C48717 = C48371 * C48447;
    const double C48365 = C48361 + C48362;
    const double C48430 = ae * C48427;
    const double C48707 = C48340 + C48706;
    const double C48397 = C48393 + C48394;
    const double C48416 = ae * C48413;
    const double C48667 = C48339 * C48413;
    const double C48449 = ae * C48446;
    const double C48713 = C48371 * C48446;
    const double C48305 = C48297 * ae;
    const double C48303 = C48145 * C48297;
    const double C48302 = C48297 * be;
    const double C112 = C49196 / C48880;
    const double C110 = C48875 / C48880 - (C49194 * C49158) / C49159;
    const double C111 = C49194 / C49195 - (C49196 * C49158) / C48870;
    const double C453 = C49194 / C48870;
    const double C519 = C49198 / C48880;
    const double C233 = C49197 / C48870;
    const double C517 = C48909 / C48880 - (C49197 * C49163) / C49159;
    const double C518 = C49197 / C49195 - (C49198 * C49163) / C48870;
    const double C873 = C49200 / C48880;
    const double C343 = C49199 / C48870;
    const double C871 = C48926 / C48880 - (C49199 * C49164) / C49159;
    const double C872 = C49199 / C49195 - (C49200 * C49164) / C48870;
    const double C7823 = (C48944 * std::pow(C48995, 2)) / C47933 + C48994;
    const double C48997 = C48996 * C48995;
    const double C49002 = C48996 / C47940;
    const double C49170 = C48996 / C47928;
    const double C49166 = C48846 * C48996;
    const double C49004 = C49003 * C48995;
    const double C49178 = C49003 / C48032;
    const double C49176 = C48993 * C49003;
    const double C49175 = 2 * C49003;
    const double C9145 = C49003 / C49156;
    const double C26748 = C49003 / C47934;
    const double C49208 = C49172 / C47928;
    const double C7824 = (-2 * C48846 * C49172) / C47928;
    const double C49222 = C49201 / C47933;
    const double C15399 = (C48956 * std::pow(C49035, 2)) / C47933 + C49034;
    const double C49037 = C49036 * C49035;
    const double C49042 = C49036 / C47940;
    const double C49171 = C49036 / C47928;
    const double C49168 = C48846 * C49036;
    const double C49044 = C49043 * C49035;
    const double C49185 = C49043 / C48032;
    const double C49183 = C49033 * C49043;
    const double C49182 = 2 * C49043;
    const double C17921 = C49043 / C49156;
    const double C36919 = C49043 / C47934;
    const double C49213 = C49179 / C47928;
    const double C15400 = (-2 * C48846 * C49179) / C47928;
    const double C49224 = C49204 / C47933;
    const double C47969 = C47964 + 0;
    const double C48006 = C48003 + C47989;
    const double C47968 = C47963 / C47934;
    const double C47954 = C47939 - C47950;
    const double C47953 = C47926 * C47948;
    const double C1014 =
        ((-C47948 / C47928) / C47934 - (0 * be) / C47928) / C47934 -
        (0 * be) / C47928;
    const double C9146 = -C47948 / C47928;
    const double C23764 = (-C47948 / C47928) / C47934 - (0 * be) / C47928;
    const double C47996 = C47990 / C47928;
    const double C48842 = C48841 / C47933;
    const double C49189 = 2 * C49150;
    const double C11493 = C49148 * C259;
    const double C13045 = C49148 * C367;
    const double C1182 = C1004 * C259;
    const double C2771 = C1004 * C367;
    const double C48850 = C48849 / C47928;
    const double C49193 = C49154 / C47940;
    const double C49218 = C49148 - C49188;
    const double C23756 = -C49188;
    const double C49232 = C49217 + C48839;
    const double C137 = (2 * (C48145 * C48158 + C48148 * ae) +
                         C48145 * (C48158 + C48145 * C48177 + C48166 * ae) +
                         (C48148 + C48160 * C48149) * ae) /
                        C47928;
    const double C248 =
        (C48339 * (C48158 + C48145 * C48177 + C48166 * ae)) / C47928;
    const double C356 =
        (C48371 * (C48158 + C48145 * C48177 + C48166 * ae)) / C47928;
    const double C529 =
        (C48145 * C48158 + C48148 * ae + C48177 * C48404) / C47928;
    const double C631 = (C48371 * C48339 * C48177) / C47928;
    const double C882 =
        (C48145 * C48158 + C48148 * ae + C48177 * C48437) / C47928;
    const double C136 = (2 * (C48145 * C48157 + C48148 * be) +
                         C48145 * (C48157 + C48145 * C48176 + C48166 * be) +
                         (C48148 + C48160 * C48149) * be) /
                        C47928;
    const double C247 =
        (C48339 * (C48157 + C48145 * C48176 + C48166 * be)) / C47928;
    const double C355 =
        (C48371 * (C48157 + C48145 * C48176 + C48166 * be)) / C47928;
    const double C528 =
        (C48145 * C48157 + C48148 * be + C48176 * C48404) / C47928;
    const double C630 = (C48371 * C48339 * C48176) / C47928;
    const double C881 =
        (C48145 * C48157 + C48148 * be + C48176 * C48437) / C47928;
    const double C147 =
        (2 * (ae * C48157 + be * C48158 + C48145 * C48175) +
         ae * (C48157 + C48145 * C48176 + C48166 * be) +
         be * (C48158 + C48145 * C48177 + C48166 * ae) +
         C48145 * (C48175 + ae * C48176 + be * C48177 +
                   C48145 * (ae * C48170 + be * C48171 +
                             C48145 *
                                 (C48161 * C48162 +
                                  C48149 * bs[5] * std::pow(C48151, 5)) *
                                 C47931))) /
        C47933;
    const double C258 = (ae * C48339 * C48157 + be * C48339 * C48158 +
                         C48145 * C48339 * C48175) /
                        C47933;
    const double C366 = (ae * C48371 * C48157 + be * C48371 * C48158 +
                         C48145 * C48371 * C48175) /
                        C47933;
    const double C536 = ((C48148 + C48149 * C48150 * C48154) * C47931 +
                         C48175 * std::pow(C48339, 2)) /
                        C47933;
    const double C638 = (C48371 * C48339 * C48175) / C47933;
    const double C889 = ((C48148 + C48149 * C48150 * C48154) * C47931 +
                         C48175 * std::pow(C48371, 2)) /
                        C47933;
    const double C48206 = C48145 * C48203;
    const double C48222 = 2 * C48203;
    const double C48214 = be * C48203;
    const double C48638 = C48339 * C48203;
    const double C1169 =
        (2 * C48339 * C48177 + C48339 * (C48177 + C48203 * C48404)) / C47928;
    const double C1415 = (C48371 * (C48177 + C48203 * C48404)) / C47928;
    const double C2327 = (C48339 * C48177 + C48339 * C48203 * C48437) / C47928;
    const double C2758 =
        (2 * C48371 * C48177 + C48371 * (C48177 + C48203 * C48437)) / C47928;
    const double C9233 =
        (4 * (2 * C48634 + C48339 * C48654) +
         C48339 * (3 * C48654 + C48339 * (2 * C48341 + C48339 * C48414))) /
        C47928;
    const double C9387 =
        (C48371 * (3 * C48654 + C48339 * (2 * C48341 + C48339 * C48414))) /
        C47928;
    const double C10363 =
        (2 * C48371 * C48654 + C48371 * (C48654 + C48414 * C48437)) / C47928;
    const double C11241 =
        (3 * (C48654 + C48414 * C48437) +
         C48371 * (2 * C48371 * C48414 +
                   C48371 * (C48414 + (C48237 + C48298 * C48404) * C48437))) /
        C47928;
    const double C18093 =
        (4 * (2 * C48371 * C48171 + C48371 * C48698) +
         C48371 * (3 * C48698 + C48371 * (2 * C48373 + C48371 * C48447))) /
        C47928;
    const double C48205 = C48145 * C48202;
    const double C48220 = 2 * C48202;
    const double C48213 = ae * C48202;
    const double C48636 = C48339 * C48202;
    const double C1168 =
        (2 * C48339 * C48176 + C48339 * (C48176 + C48202 * C48404)) / C47928;
    const double C1414 = (C48371 * (C48176 + C48202 * C48404)) / C47928;
    const double C2326 = (C48339 * C48176 + C48339 * C48202 * C48437) / C47928;
    const double C2757 =
        (2 * C48371 * C48176 + C48371 * (C48176 + C48202 * C48437)) / C47928;
    const double C48346 = C48343 + C48344;
    const double C48378 = C48375 + C48376;
    const double C9232 =
        (4 * (2 * C48632 + C48339 * C48651) +
         C48339 * (3 * C48651 + C48339 * (2 * C48340 + C48339 * C48413))) /
        C47928;
    const double C9386 =
        (C48371 * (3 * C48651 + C48339 * (2 * C48340 + C48339 * C48413))) /
        C47928;
    const double C10362 =
        (2 * C48371 * C48651 + C48371 * (C48651 + C48413 * C48437)) / C47928;
    const double C11240 =
        (3 * (C48651 + C48413 * C48437) +
         C48371 * (2 * C48371 * C48413 +
                   C48371 * (C48413 + (C48234 + C48295 * C48404) * C48437))) /
        C47928;
    const double C18092 =
        (4 * (2 * C48371 * C48170 + C48371 * C48695) +
         C48371 * (3 * C48695 + C48371 * (2 * C48372 + C48371 * C48446))) /
        C47928;
    const double C48204 = C48145 * C48201;
    const double C48349 = C48339 * C48201;
    const double C48381 = C48371 * C48201;
    const double C537 =
        (ae * (C48157 + C48170 * C48404) + be * (C48158 + C48171 * C48404) +
         C48145 * (C48175 + C48201 * C48404)) /
        C47933;
    const double C890 =
        (ae * (C48157 + C48170 * C48437) + be * (C48158 + C48171 * C48437) +
         C48145 * (C48175 + C48201 * C48437)) /
        C47933;
    const double C1176 =
        (2 * C48339 * C48175 + C48339 * (C48175 + C48201 * C48404)) / C47933;
    const double C1422 = (C48371 * (C48175 + C48201 * C48404)) / C47933;
    const double C2765 =
        (2 * C48371 * C48175 + C48371 * (C48175 + C48201 * C48437)) / C47933;
    const double C48251 = C48145 * C48248;
    const double C48281 = 2 * C48248;
    const double C48270 = be * C48248;
    const double C48355 = C48339 * C48248;
    const double C48387 = C48371 * C48248;
    const double C48659 = C48248 * C48404;
    const double C48703 = C48248 * C48437;
    const double C1686 =
        (3 * (C48177 + C48203 * C48404) +
         C48339 * (2 * C48339 * C48203 + C48339 * (C48203 + C48248 * C48404))) /
        C47928;
    const double C1868 =
        (C48371 * (2 * C48339 * C48203 + C48339 * (C48203 + C48248 * C48404))) /
        C47928;
    const double C2333 =
        (C48177 + C48203 * C48404 + (C48203 + C48248 * C48404) * C48437) /
        C47928;
    const double C3694 =
        (3 * (C48177 + C48203 * C48437) +
         C48371 * (2 * C48371 * C48203 + C48371 * (C48203 + C48248 * C48437))) /
        C47928;
    const double C48244 = C48236 * ae;
    const double C48242 = C48145 * C48236;
    const double C48241 = C48236 * be;
    const double C48279 = 3 * C48236;
    const double C48783 = C48339 * C48236;
    const double C1162 =
        2 * C48339 * C48195 + C48339 * (C48195 + C48236 * C48404);
    const double C1408 = C48371 * (C48195 + C48236 * C48404);
    const double C1682 =
        3 * (C48195 + C48236 * C48404) +
        C48339 * (2 * C48339 * C48236 + C48339 * (C48236 + C48297 * C48404));
    const double C1864 =
        C48371 * (2 * C48339 * C48236 + C48339 * (C48236 + C48297 * C48404));
    const double C2320 = C48339 * C48195 + C48339 * C48236 * C48437;
    const double C2323 =
        C48195 + C48236 * C48404 + (C48236 + C48297 * C48404) * C48437;
    const double C2751 =
        2 * C48371 * C48195 + C48371 * (C48195 + C48236 * C48437);
    const double C3690 =
        3 * (C48195 + C48236 * C48437) +
        C48371 * (2 * C48371 * C48236 + C48371 * (C48236 + C48297 * C48437));
    const double C48792 = C48188 + C48791;
    const double C18004 =
        3 * (C48781 + C48812 * C48437) +
        C48371 * (2 * C48371 * C48812 +
                  C48371 * (C48812 + C48339 * C48288 * C48437));
    const double C48818 = C48188 + C48817;
    const double C48250 = C48145 * C48246;
    const double C48277 = 2 * C48246;
    const double C48269 = ae * C48246;
    const double C48354 = C48339 * C48246;
    const double C48386 = C48371 * C48246;
    const double C48656 = C48246 * C48404;
    const double C48700 = C48246 * C48437;
    const double C1685 =
        (3 * (C48176 + C48202 * C48404) +
         C48339 * (2 * C48339 * C48202 + C48339 * (C48202 + C48246 * C48404))) /
        C47928;
    const double C1867 =
        (C48371 * (2 * C48339 * C48202 + C48339 * (C48202 + C48246 * C48404))) /
        C47928;
    const double C2332 =
        (C48176 + C48202 * C48404 + (C48202 + C48246 * C48404) * C48437) /
        C47928;
    const double C3693 =
        (3 * (C48176 + C48202 * C48437) +
         C48371 * (2 * C48371 * C48202 + C48371 * (C48202 + C48246 * C48437))) /
        C47928;
    const double C48249 = C48145 * C48245;
    const double C48342 = C48339 * C48245;
    const double C48374 = C48371 * C48245;
    const double C48407 = C48245 * C48404;
    const double C48440 = C48245 * C48437;
    const double C538 =
        (C48175 + C48201 * C48404 + ae * (C48176 + C48202 * C48404) +
         be * (C48177 + C48203 * C48404) +
         C48145 * (ae * (C48170 + C48193 * C48404) +
                   be * (C48171 + C48196 * C48404) +
                   C48145 * (C48201 + C48245 * C48404))) /
        C47933;
    const double C891 =
        (C48175 + C48201 * C48437 + ae * (C48176 + C48202 * C48437) +
         be * (C48177 + C48203 * C48437) +
         C48145 * (ae * (C48170 + C48193 * C48437) +
                   be * (C48171 + C48196 * C48437) +
                   C48145 * (C48201 + C48245 * C48437))) /
        C47933;
    const double C48800 = C48339 * C48799;
    const double C10360 =
        2 * C48371 * C48789 + C48371 * (C48789 + C48799 * C48437);
    const double C11237 =
        3 * (C48789 + C48799 * C48437) +
        C48371 * (2 * C48371 * C48799 +
                  C48371 * (C48799 + (C48217 + C48273 * C48404) * C48437));
    const double C48822 = C48796 + C48821;
    const double C48828 = C48371 * C48827;
    const double C48314 = C48145 * C48309;
    const double C48311 = C48145 * C48307;
    const double C48310 = C48145 * C48306;
    const double C48358 = C48339 * C48306;
    const double C48390 = C48371 * C48306;
    const double C48412 = C48306 * C48404;
    const double C48445 = C48306 * C48437;
    const double C18347 =
        (4 * (2 * C48371 * C48341 + C48371 * C48710) +
         C48371 * (3 * C48710 +
                   C48371 * (2 * C48428 +
                             C48371 * (C48357 + C48339 * C48298 * C48437)))) /
        C47928;
    const double C48672 = C48670 + C48671;
    const double C48718 = C48716 + C48717;
    const double C48433 = C48430 + C48431;
    const double C18346 =
        (4 * (2 * C48371 * C48340 + C48371 * C48707) +
         C48371 * (3 * C48707 +
                   C48371 * (2 * C48427 +
                             C48371 * (C48356 + C48339 * C48295 * C48437)))) /
        C47928;
    const double C48419 = C48416 + C48417;
    const double C48668 = C48666 + C48667;
    const double C48452 = C48449 + C48450;
    const double C48714 = C48712 + C48713;
    const double C48308 = C48278 + C48303;
    const double C48998 = C48997 / C47933;
    const double C49202 = 2 * C49166;
    const double C49005 = C49004 / C47928;
    const double C49211 = C49176 / C47940;
    const double C49226 = C49170 - C49208;
    const double C22560 = -C49208;
    const double C49235 = C49222 + C48994;
    const double C49038 = C49037 / C47933;
    const double C49205 = 2 * C49168;
    const double C49045 = C49044 / C47928;
    const double C49216 = C49183 / C47940;
    const double C49229 = C49171 - C49213;
    const double C31431 = -C49213;
    const double C49236 = C49224 + C49034;
    const double C47972 = C47969 * be;
    const double C48009 = C48006 * be;
    const double C11496 = C47954 * C250;
    const double C11494 = C47954 * C249;
    const double C13048 = C47954 * C358;
    const double C13046 = C47954 * C357;
    const double C47958 = C47926 * C47954;
    const double C47993 = 2 * C47954;
    const double C48026 = C47954 / C47934;
    const double C47957 = C47953 / C47928;
    const double C9257 = C9146 * C250;
    const double C9255 = C9146 * C249;
    const double C9253 = C9146 * C1684;
    const double C9251 = C9146 * C1683;
    const double C9249 = C9146 * C1171;
    const double C9247 = C9146 * C1170;
    const double C9245 = C9146 * C527;
    const double C9243 = C9146 * C526;
    const double C9241 = C9146 * C252;
    const double C9239 = C9146 * C251;
    const double C9649 = C9146 * C629;
    const double C9647 = C9146 * C628;
    const double C9645 = C9146 * C1417;
    const double C9643 = C9146 * C1416;
    const double C9641 = C9146 * C1866;
    const double C9639 = C9146 * C1865;
    const double C10171 = C9146 * C2331;
    const double C10169 = C9146 * C2330;
    const double C10165 = C9146 * C2325;
    const double C10163 = C9146 * C2324;
    const double C10379 = C9146 * C358;
    const double C10377 = C9146 * C357;
    const double C10375 = C9146 * C880;
    const double C10373 = C9146 * C879;
    const double C10371 = C9146 * C360;
    const double C10369 = C9146 * C359;
    const double C10823 = C9146 * C3257;
    const double C10821 = C9146 * C3256;
    const double C11247 = C9146 * C2760;
    const double C11245 = C9146 * C2759;
    const double C18101 = C9146 * C3692;
    const double C18099 = C9146 * C3691;
    const double C18352 = C9146 * C11239;
    const double C18350 = C9146 * C11238;
    const double C23903 = C23764 * C250;
    const double C23901 = C23764 * C249;
    const double C25469 = C23764 * C358;
    const double C25467 = C23764 * C357;
    const double C48843 = C48839 - C48842;
    const double C49219 = C49189 / C47928;
    const double C48851 = C48847 - C48850;
    const double C49233 = C49218 / C47934;
    const double C23900 = C23756 * C259;
    const double C25466 = C23756 * C367;
    const double C7982 = C49232 * C259;
    const double C15698 = C49232 * C367;
    const double C1189 = C1014 * C248;
    const double C11520 = C47954 * C248;
    const double C23927 = C23764 * C248;
    const double C2778 = C1014 * C356;
    const double C13056 = C47954 * C356;
    const double C25485 = C23764 * C356;
    const double C9261 = C9146 * C529;
    const double C11504 = C47954 * C529;
    const double C23911 = C23764 * C529;
    const double C10176 = C9146 * C631;
    const double C12098 = C47954 * C631;
    const double C24505 = C23764 * C631;
    const double C10383 = C9146 * C882;
    const double C14175 = C47954 * C882;
    const double C25477 = C23764 * C882;
    const double C1187 = C1014 * C247;
    const double C11518 = C47954 * C247;
    const double C23925 = C23764 * C247;
    const double C2776 = C1014 * C355;
    const double C13054 = C47954 * C355;
    const double C25483 = C23764 * C355;
    const double C9259 = C9146 * C528;
    const double C11502 = C47954 * C528;
    const double C23909 = C23764 * C528;
    const double C10174 = C9146 * C630;
    const double C12096 = C47954 * C630;
    const double C24503 = C23764 * C630;
    const double C10381 = C9146 * C881;
    const double C14173 = C47954 * C881;
    const double C25475 = C23764 * C881;
    const double C1206 = C1004 * C258;
    const double C1186 = C1005 * C258;
    const double C8006 = C49232 * C258;
    const double C9258 = C48838 * C258;
    const double C11517 = C49148 * C258;
    const double C11497 = C48848 * C258;
    const double C23924 = C23756 * C258;
    const double C23904 = C48848 * C258;
    const double C2795 = C1004 * C366;
    const double C2775 = C1005 * C366;
    const double C10380 = C48838 * C366;
    const double C13053 = C49148 * C366;
    const double C13049 = C48848 * C366;
    const double C15722 = C49232 * C366;
    const double C25482 = C23756 * C366;
    const double C25470 = C48848 * C366;
    const double C1194 = C1004 * C536;
    const double C7994 = C49232 * C536;
    const double C9246 = C48838 * C536;
    const double C11501 = C49148 * C536;
    const double C23908 = C23756 * C536;
    const double C1898 = C1004 * C638;
    const double C8658 = C49232 * C638;
    const double C9650 = C48838 * C638;
    const double C12103 = C49148 * C638;
    const double C24510 = C23756 * C638;
    const double C2783 = C1004 * C889;
    const double C10376 = C48838 * C889;
    const double C14180 = C49148 * C889;
    const double C15710 = C49232 * C889;
    const double C25474 = C23756 * C889;
    const double C48209 = C48171 + C48206;
    const double C9265 = C9146 * C1169;
    const double C11512 = C47954 * C1169;
    const double C23919 = C23764 * C1169;
    const double C10185 = C9146 * C1415;
    const double C12090 = C47954 * C1415;
    const double C24497 = C23764 * C1415;
    const double C10180 = C9146 * C2327;
    const double C13620 = C47954 * C2327;
    const double C25233 = C23764 * C2327;
    const double C18105 = C9146 * C2758;
    const double C20243 = C47954 * C2758;
    const double C26622 = C23764 * C2758;
    const double C9543 = C9146 * C9233;
    const double C9637 = C9146 * C9387;
    const double C10817 = C9146 * C10363;
    const double C18589 = C9146 * C18093;
    const double C48208 = C48170 + C48205;
    const double C48223 = C48201 + C48213;
    const double C9263 = C9146 * C1168;
    const double C11510 = C47954 * C1168;
    const double C23917 = C23764 * C1168;
    const double C10183 = C9146 * C1414;
    const double C12088 = C47954 * C1414;
    const double C24495 = C23764 * C1414;
    const double C10178 = C9146 * C2326;
    const double C13618 = C47954 * C2326;
    const double C25231 = C23764 * C2326;
    const double C18103 = C9146 * C2757;
    const double C20241 = C47954 * C2757;
    const double C26620 = C23764 * C2757;
    const double C9541 = C9146 * C9232;
    const double C9635 = C9146 * C9386;
    const double C10815 = C9146 * C10362;
    const double C18587 = C9146 * C18092;
    const double C48207 = C48184 + C48204;
    const double C257 =
        (C48339 * C48175 + ae * C48339 * C48176 + be * C48339 * C48177 +
         C48145 *
             (ae * C48339 * C48170 + be * C48339 * C48171 + C48145 * C48349)) /
        C47933;
    const double C639 =
        (ae * C48371 * C48339 * C48170 + be * C48371 * C48339 * C48171 +
         C48145 * C48371 * C48349) /
        C47933;
    const double C2336 = (C48339 * C48175 + C48349 * C48437) / C47933;
    const double C365 =
        (C48371 * C48175 + ae * C48371 * C48176 + be * C48371 * C48177 +
         C48145 *
             (ae * C48371 * C48170 + be * C48371 * C48171 + C48145 * C48381)) /
        C47933;
    const double C1218 = C1004 * C537;
    const double C1198 = C1005 * C537;
    const double C8018 = C49232 * C537;
    const double C9262 = C48838 * C537;
    const double C11525 = C49148 * C537;
    const double C11505 = C48848 * C537;
    const double C23932 = C23756 * C537;
    const double C23912 = C48848 * C537;
    const double C2807 = C1004 * C890;
    const double C2787 = C1005 * C890;
    const double C10384 = C48838 * C890;
    const double C14176 = C48848 * C890;
    const double C15734 = C49232 * C890;
    const double C19145 = C49148 * C890;
    const double C25490 = C23756 * C890;
    const double C25478 = C48848 * C890;
    const double C1705 = C1004 * C1176;
    const double C8477 = C49232 * C1176;
    const double C9250 = C48838 * C1176;
    const double C11509 = C49148 * C1176;
    const double C23916 = C23756 * C1176;
    const double C1886 = C1004 * C1422;
    const double C8646 = C49232 * C1422;
    const double C9646 = C48838 * C1422;
    const double C12095 = C49148 * C1422;
    const double C24502 = C23756 * C1422;
    const double C3713 = C1004 * C2765;
    const double C11248 = C48838 * C2765;
    const double C16616 = C49232 * C2765;
    const double C20248 = C49148 * C2765;
    const double C26627 = C23756 * C2765;
    const double C48254 = C48196 + C48251;
    const double C48360 = be * C48355;
    const double C3259 =
        (2 * C48371 * C48638 + C48371 * (C48638 + C48355 * C48437)) / C47928;
    const double C18006 =
        (3 * (C48638 + C48355 * C48437) +
         C48371 * (2 * C48371 * C48355 +
                   C48371 * (C48355 + C48339 * C48309 * C48437))) /
        C47928;
    const double C48392 = be * C48387;
    const double C48660 = C48203 + C48659;
    const double C48704 = C48203 + C48703;
    const double C9269 = C9146 * C1686;
    const double C11936 = C47954 * C1686;
    const double C24343 = C23764 * C1686;
    const double C12082 = C47954 * C1868;
    const double C14428 = C9146 * C1868;
    const double C24489 = C23764 * C1868;
    const double C10189 = C9146 * C2333;
    const double C13611 = C47954 * C2333;
    const double C25861 = C23764 * C2333;
    const double C18109 = C9146 * C3694;
    const double C21350 = C47954 * C3694;
    const double C35194 = C23764 * C3694;
    const double C48247 = C48221 + C48242;
    const double C3255 =
        2 * C48371 * C48783 + C48371 * (C48783 + C48339 * C48297 * C48437);
    const double C9231 =
        4 * (2 * C48781 + C48339 * C48792) +
        C48339 * (3 * C48792 + C48339 * (2 * C48339 * C48228 +
                                         C48339 * (C48228 + C48288 * C48404)));
    const double C9385 =
        C48371 * (3 * C48792 + C48339 * (2 * C48339 * C48228 +
                                         C48339 * (C48228 + C48288 * C48404)));
    const double C10156 =
        2 * C48781 + C48339 * C48792 +
        (2 * C48339 * C48228 + C48339 * (C48228 + C48288 * C48404)) * C48437;
    const double C10361 =
        2 * C48371 * C48792 +
        C48371 * (C48792 + (C48228 + C48288 * C48404) * C48437);
    const double C18091 =
        4 * (2 * C48371 * C48188 + C48371 * C48818) +
        C48371 * (3 * C48818 + C48371 * (2 * C48371 * C48228 +
                                         C48371 * (C48228 + C48288 * C48437)));
    const double C48253 = C48193 + C48250;
    const double C48283 = C48245 + C48269;
    const double C48359 = ae * C48354;
    const double C3258 =
        (2 * C48371 * C48636 + C48371 * (C48636 + C48354 * C48437)) / C47928;
    const double C18005 =
        (3 * (C48636 + C48354 * C48437) +
         C48371 * (2 * C48371 * C48354 +
                   C48371 * (C48354 + C48339 * C48307 * C48437))) /
        C47928;
    const double C48391 = ae * C48386;
    const double C48657 = C48202 + C48656;
    const double C48701 = C48202 + C48700;
    const double C9267 = C9146 * C1685;
    const double C11934 = C47954 * C1685;
    const double C24341 = C23764 * C1685;
    const double C12080 = C47954 * C1867;
    const double C14426 = C9146 * C1867;
    const double C24487 = C23764 * C1867;
    const double C10187 = C9146 * C2332;
    const double C13609 = C47954 * C2332;
    const double C25859 = C23764 * C2332;
    const double C18107 = C9146 * C3693;
    const double C21348 = C47954 * C3693;
    const double C35192 = C23764 * C3693;
    const double C48252 = C48224 + C48249;
    const double C48345 = C48145 * C48342;
    const double C48425 = C48371 * C48342;
    const double C48458 = 2 * C48342;
    const double C640 = (C48371 * C48349 + ae * C48371 * C48339 * C48202 +
                         be * C48371 * C48339 * C48203 +
                         C48145 * (ae * C48371 * C48340 + be * C48371 * C48341 +
                                   C48145 * C48371 * C48342)) /
                        C47933;
    const double C2337 = (ae * (C48339 * C48170 + C48340 * C48437) +
                          be * (C48339 * C48171 + C48341 * C48437) +
                          C48145 * (C48349 + C48342 * C48437)) /
                         C47933;
    const double C3262 =
        (2 * C48371 * C48349 + C48371 * (C48349 + C48342 * C48437)) / C47933;
    const double C48377 = C48145 * C48374;
    const double C48485 = 2 * C48374;
    const double C48408 = C48201 + C48407;
    const double C48441 = C48201 + C48440;
    const double C1222 = C1005 * C538;
    const double C1202 = C49192 * C538;
    const double C8002 = C49192 * C538;
    const double C11529 = C48848 * C538;
    const double C23936 = C48848 * C538;
    const double C26925 = C26745 * C538;
    const double C2811 = C1005 * C891;
    const double C2791 = C49192 * C891;
    const double C15718 = C49192 * C891;
    const double C19149 = C48848 * C891;
    const double C25494 = C48848 * C891;
    const double C29695 = C26745 * C891;
    const double C48801 = C48798 + C48800;
    const double C18345 =
        4 * (2 * C48371 * C48796 + C48371 * C48822) +
        C48371 * (3 * C48822 +
                  C48371 * (2 * C48371 * C48820 +
                            C48371 * (C48820 + C48339 * C48273 * C48437)));
    const double C48829 = C48826 + C48828;
    const double C48319 = C48237 + C48314;
    const double C48317 = C48234 + C48311;
    const double C48316 = C48284 + C48310;
    const double C48363 = C48145 * C48358;
    const double C48429 = C48371 * C48358;
    const double C48479 = C48358 * C48437;
    const double C2338 =
        (C48349 + C48342 * C48437 + ae * (C48339 * C48202 + C48354 * C48437) +
         be * (C48339 * C48203 + C48355 * C48437) +
         C48145 * (ae * (C48340 + C48356 * C48437) +
                   be * (C48341 + C48357 * C48437) +
                   C48145 * (C48342 + C48358 * C48437))) /
        C47933;
    const double C48395 = C48145 * C48390;
    const double C48415 = C48245 + C48412;
    const double C48448 = C48245 + C48445;
    const double C9538 =
        (5 * (3 * C48654 + C48339 * C48672) +
         C48339 * (4 * C48672 +
                   C48339 * (3 * C48414 +
                             C48339 * (2 * C48357 +
                                       C48339 * (C48237 + C48298 * C48404))))) /
        C47928;
    const double C9632 =
        (C48371 * (4 * C48672 +
                   C48339 * (3 * C48414 +
                             C48339 * (2 * C48357 +
                                       C48339 * (C48237 + C48298 * C48404))))) /
        C47928;
    const double C9895 =
        (2 * C48634 + C48339 * C48654 + C48672 * C48437) / C47928;
    const double C9897 =
        (3 * C48654 + C48339 * C48672 +
         (3 * C48414 +
          C48339 * (2 * C48357 + C48339 * (C48237 + C48298 * C48404))) *
             C48437) /
        C47928;
    const double C10812 =
        (2 * C48371 * C48672 +
         C48371 * (C48672 + (2 * C48357 + C48339 * (C48237 + C48298 * C48404)) *
                                C48437)) /
        C47928;
    const double C18584 =
        (5 * (3 * C48698 + C48371 * C48718) +
         C48371 * (4 * C48718 +
                   C48371 * (3 * C48447 +
                             C48371 * (2 * C48389 +
                                       C48371 * (C48237 + C48298 * C48437))))) /
        C47928;
    const double C9537 =
        (5 * (3 * C48651 + C48339 * C48668) +
         C48339 * (4 * C48668 +
                   C48339 * (3 * C48413 +
                             C48339 * (2 * C48356 +
                                       C48339 * (C48234 + C48295 * C48404))))) /
        C47928;
    const double C9631 =
        (C48371 * (4 * C48668 +
                   C48339 * (3 * C48413 +
                             C48339 * (2 * C48356 +
                                       C48339 * (C48234 + C48295 * C48404))))) /
        C47928;
    const double C9894 =
        (2 * C48632 + C48339 * C48651 + C48668 * C48437) / C47928;
    const double C9896 =
        (3 * C48651 + C48339 * C48668 +
         (3 * C48413 +
          C48339 * (2 * C48356 + C48339 * (C48234 + C48295 * C48404))) *
             C48437) /
        C47928;
    const double C10811 =
        (2 * C48371 * C48668 +
         C48371 * (C48668 + (2 * C48356 + C48339 * (C48234 + C48295 * C48404)) *
                                C48437)) /
        C47928;
    const double C18583 =
        (5 * (3 * C48695 + C48371 * C48714) +
         C48371 * (4 * C48714 +
                   C48371 * (3 * C48446 +
                             C48371 * (2 * C48388 +
                                       C48371 * (C48234 + C48295 * C48437))))) /
        C47928;
    const double C48315 = C48308 * ae;
    const double C48313 = C48145 * C48308;
    const double C48312 = C48308 * be;
    const double C48999 = C48994 - C48998;
    const double C49223 = C49202 / C47928;
    const double C49006 = C49002 - C49005;
    const double C49237 = C49226 / C47934;
    const double C49039 = C49034 - C49038;
    const double C49225 = C49205 / C47928;
    const double C49046 = C49042 - C49045;
    const double C49239 = C49229 / C47934;
    const double C47974 = C47972 / C47928;
    const double C48012 = C48009 / C47928;
    const double C47962 = C47958 + C48848;
    const double C48029 = C48026 - C48028;
    const double C7830 = C48026 + (0 * ae) / C47928;
    const double C47961 = C48838 - C47957;
    const double C26941 = C48843 * C537;
    const double C26929 = C48843 * C258;
    const double C26917 = C48843 * C536;
    const double C26905 = C48843 * C259;
    const double C27400 = C48843 * C1176;
    const double C27581 = C48843 * C638;
    const double C27569 = C48843 * C1422;
    const double C28572 = C48843 * C366;
    const double C28560 = C48843 * C367;
    const double C29703 = C48843 * C889;
    const double C37216 = C48843 * C890;
    const double C38050 = C48843 * C2765;
    const double C49147 = C48843 * C48833;
    const double C49191 = C49152 + C48843;
    const double C8022 = C49219 * C538;
    const double C7998 = C49219 * C537;
    const double C7986 = C49219 * C258;
    const double C15738 = C49219 * C891;
    const double C15714 = C49219 * C890;
    const double C15702 = C49219 * C366;
    const double C26945 = C48851 * C538;
    const double C26921 = C48851 * C537;
    const double C26909 = C48851 * C258;
    const double C28564 = C48851 * C366;
    const double C29699 = C48851 * C890;
    const double C37220 = C48851 * C891;
    const double C49155 = C48851 / C47934;
    const double C49151 = C48851 * C48833;
    const double C3821 = C49233 - (C48843 * C48834) / C47928;
    const double C48211 = C48209 + C48197;
    const double C48210 = C48208 + C48194;
    const double C48232 = C48223 + C48214;
    const double C1210 = C1005 * C257;
    const double C1190 = C49192 * C257;
    const double C8010 = C49219 * C257;
    const double C7990 = C49192 * C257;
    const double C11521 = C48848 * C257;
    const double C23928 = C48848 * C257;
    const double C26933 = C48851 * C257;
    const double C26913 = C26745 * C257;
    const double C1894 = C1005 * C639;
    const double C6427 = C1004 * C639;
    const double C8654 = C49219 * C639;
    const double C10177 = C48838 * C639;
    const double C12099 = C48848 * C639;
    const double C12823 = C49148 * C639;
    const double C24506 = C48848 * C639;
    const double C25238 = C23756 * C639;
    const double C27577 = C48851 * C639;
    const double C28345 = C48843 * C639;
    const double C40006 = C49232 * C639;
    const double C3269 = C1004 * C2336;
    const double C10166 = C48838 * C2336;
    const double C13625 = C49148 * C2336;
    const double C16184 = C49232 * C2336;
    const double C25230 = C23756 * C2336;
    const double C29145 = C48843 * C2336;
    const double C2799 = C1005 * C365;
    const double C2779 = C49192 * C365;
    const double C13057 = C48848 * C365;
    const double C15726 = C49219 * C365;
    const double C15706 = C49192 * C365;
    const double C25486 = C48848 * C365;
    const double C28576 = C48851 * C365;
    const double C28568 = C26745 * C365;
    const double C48257 = C48254 + C48238;
    const double C19693 = C47954 * C3259;
    const double C21599 = C9146 * C3259;
    const double C26071 = C23764 * C3259;
    const double C9235 =
        (4 * (2 * C48638 + C48339 * C48660) +
         C48339 *
             (3 * C48660 +
              C48339 * (2 * C48355 + C48339 * (C48248 + C48309 * C48404)))) /
        C47928;
    const double C9389 =
        (C48371 *
         (3 * C48660 +
          C48339 * (2 * C48355 + C48339 * (C48248 + C48309 * C48404)))) /
        C47928;
    const double C10158 =
        (2 * C48638 + C48339 * C48660 +
         (2 * C48355 + C48339 * (C48248 + C48309 * C48404)) * C48437) /
        C47928;
    const double C10365 =
        (2 * C48371 * C48660 +
         C48371 * (C48660 + (C48248 + C48309 * C48404) * C48437)) /
        C47928;
    const double C18095 =
        (4 * (2 * C48371 * C48203 + C48371 * C48704) +
         C48371 *
             (3 * C48704 +
              C48371 * (2 * C48387 + C48371 * (C48248 + C48309 * C48437)))) /
        C47928;
    const double C128 = 4 * (2 * C48166 + C48145 * C48195) +
                        C48145 * (3 * C48195 + C48145 * C48247);
    const double C237 = C48339 * (3 * C48195 + C48145 * C48247);
    const double C345 = C48371 * (3 * C48195 + C48145 * C48247);
    const double C524 = 2 * C48166 + C48145 * C48195 + C48247 * C48404;
    const double C626 = C48371 * C48339 * C48247;
    const double C877 = 2 * C48166 + C48145 * C48195 + C48247 * C48437;
    const double C1165 =
        2 * C48339 * C48247 + C48339 * (C48247 + C48308 * C48404);
    const double C1411 = C48371 * (C48247 + C48308 * C48404);
    const double C2601 = C48339 * C48247 + C48339 * C48308 * C48437;
    const double C2754 =
        2 * C48371 * C48247 + C48371 * (C48247 + C48308 * C48437);
    const double C48256 = C48253 + C48235;
    const double C48293 = C48283 + C48270;
    const double C48364 = C48342 + C48359;
    const double C19691 = C47954 * C3258;
    const double C21597 = C9146 * C3258;
    const double C26069 = C23764 * C3258;
    const double C48396 = C48374 + C48391;
    const double C9234 =
        (4 * (2 * C48636 + C48339 * C48657) +
         C48339 *
             (3 * C48657 +
              C48339 * (2 * C48354 + C48339 * (C48246 + C48307 * C48404)))) /
        C47928;
    const double C9388 =
        (C48371 *
         (3 * C48657 +
          C48339 * (2 * C48354 + C48339 * (C48246 + C48307 * C48404)))) /
        C47928;
    const double C10157 =
        (2 * C48636 + C48339 * C48657 +
         (2 * C48354 + C48339 * (C48246 + C48307 * C48404)) * C48437) /
        C47928;
    const double C10364 =
        (2 * C48371 * C48657 +
         C48371 * (C48657 + (C48246 + C48307 * C48404) * C48437)) /
        C47928;
    const double C18094 =
        (4 * (2 * C48371 * C48202 + C48371 * C48701) +
         C48371 *
             (3 * C48701 +
              C48371 * (2 * C48386 + C48371 * (C48246 + C48307 * C48437)))) /
        C47928;
    const double C48255 = C48145 * C48252;
    const double C48266 = 2 * C48252;
    const double C48347 = C48346 + C48345;
    const double C1890 = C49192 * C640;
    const double C6431 = C1005 * C640;
    const double C8650 = C49192 * C640;
    const double C12827 = C48848 * C640;
    const double C25242 = C48848 * C640;
    const double C27573 = C26745 * C640;
    const double C28349 = C48851 * C640;
    const double C40010 = C49219 * C640;
    const double C3273 = C1005 * C2337;
    const double C10181 = C48838 * C2337;
    const double C13621 = C48848 * C2337;
    const double C16188 = C49219 * C2337;
    const double C18937 = C49148 * C2337;
    const double C25246 = C23756 * C2337;
    const double C25234 = C48848 * C2337;
    const double C29141 = C48851 * C2337;
    const double C10824 = C48838 * C3262;
    const double C19698 = C49148 * C3262;
    const double C26076 = C23756 * C3262;
    const double C48379 = C48378 + C48377;
    const double C1175 =
        (ae * (2 * C48339 * C48170 + C48339 * (C48170 + C48193 * C48404)) +
         be * (2 * C48339 * C48171 + C48339 * (C48171 + C48196 * C48404)) +
         C48145 * (2 * C48349 + C48339 * C48408)) /
        C47933;
    const double C1421 =
        (ae * C48371 * (C48170 + C48193 * C48404) +
         be * C48371 * (C48171 + C48196 * C48404) + C48145 * C48371 * C48408) /
        C47933;
    const double C1689 = (3 * (C48175 + C48201 * C48404) +
                          C48339 * (2 * C48349 + C48339 * C48408)) /
                         C47933;
    const double C1871 = (C48371 * (2 * C48349 + C48339 * C48408)) / C47933;
    const double C2339 = (C48175 + C48201 * C48404 + C48408 * C48437) / C47933;
    const double C2764 =
        (ae * (2 * C48371 * C48170 + C48371 * (C48170 + C48193 * C48437)) +
         be * (2 * C48371 * C48171 + C48371 * (C48171 + C48196 * C48437)) +
         C48145 * (2 * C48381 + C48371 * C48441)) /
        C47933;
    const double C3697 = (3 * (C48175 + C48201 * C48437) +
                          C48371 * (2 * C48381 + C48371 * C48441)) /
                         C47933;
    const double C9536 =
        5 * (3 * C48789 + C48339 * C48801) +
        C48339 * (4 * C48801 +
                  C48339 * (3 * C48799 +
                            C48339 * (2 * C48339 * C48217 +
                                      C48339 * (C48217 + C48273 * C48404))));
    const double C9630 =
        C48371 * (4 * C48801 +
                  C48339 * (3 * C48799 +
                            C48339 * (2 * C48339 * C48217 +
                                      C48339 * (C48217 + C48273 * C48404))));
    const double C9892 = 2 * C48779 + C48339 * C48789 + C48801 * C48437;
    const double C9893 =
        3 * C48789 + C48339 * C48801 +
        (3 * C48799 +
         C48339 * (2 * C48339 * C48217 + C48339 * (C48217 + C48273 * C48404))) *
            C48437;
    const double C10810 =
        2 * C48371 * C48801 +
        C48371 * (C48801 +
                  (2 * C48339 * C48217 + C48339 * (C48217 + C48273 * C48404)) *
                      C48437);
    const double C18582 =
        5 * (3 * C48815 + C48371 * C48829) +
        C48371 * (4 * C48829 +
                  C48371 * (3 * C48827 +
                            C48371 * (2 * C48371 * C48217 +
                                      C48371 * (C48217 + C48273 * C48437))));
    const double C48322 = C48319 + C48299;
    const double C48321 = C48317 + C48296;
    const double C48320 = C48145 * C48316;
    const double C48367 = C48365 + C48363;
    const double C48432 = C48145 * C48429;
    const double C48480 = C48342 + C48479;
    const double C3277 = C49192 * C2338;
    const double C16192 = C49192 * C2338;
    const double C18941 = C48848 * C2338;
    const double C25250 = C48848 * C2338;
    const double C29137 = C26745 * C2338;
    const double C48399 = C48397 + C48395;
    const double C48418 = C48145 * C48415;
    const double C48459 = C48339 * C48415;
    const double C48465 = C48371 * C48415;
    const double C1174 =
        (2 * C48349 + C48339 * C48408 +
         ae * (2 * C48339 * C48202 + C48339 * (C48202 + C48246 * C48404)) +
         be * (2 * C48339 * C48203 + C48339 * (C48203 + C48248 * C48404)) +
         C48145 * (ae * (2 * C48340 + C48339 * C48413) +
                   be * (2 * C48341 + C48339 * C48414) +
                   C48145 * (2 * C48342 + C48339 * C48415))) /
        C47933;
    const double C1420 =
        (C48371 * C48408 + ae * C48371 * (C48202 + C48246 * C48404) +
         be * C48371 * (C48203 + C48248 * C48404) +
         C48145 * (ae * C48371 * C48413 + be * C48371 * C48414 +
                   C48145 * C48371 * C48415)) /
        C47933;
    const double C2340 = (ae * (C48170 + C48193 * C48404 + C48413 * C48437) +
                          be * (C48171 + C48196 * C48404 + C48414 * C48437) +
                          C48145 * (C48408 + C48415 * C48437)) /
                         C47933;
    const double C2341 =
        (C48408 + C48415 * C48437 +
         ae * (C48202 + C48246 * C48404 + (C48246 + C48307 * C48404) * C48437) +
         be * (C48203 + C48248 * C48404 + (C48248 + C48309 * C48404) * C48437) +
         C48145 * (ae * (C48413 + (C48234 + C48295 * C48404) * C48437) +
                   be * (C48414 + (C48237 + C48298 * C48404) * C48437) +
                   C48145 * (C48415 +
                             (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404) *
                                 C48437))) /
        C47933;
    const double C9391 =
        (ae * C48371 *
             (3 * C48413 +
              C48339 * (2 * C48356 + C48339 * (C48234 + C48295 * C48404))) +
         be * C48371 *
             (3 * C48414 +
              C48339 * (2 * C48357 + C48339 * (C48237 + C48298 * C48404))) +
         C48145 * C48371 *
             (3 * C48415 +
              C48339 *
                  (2 * C48358 +
                   C48339 * (C48306 + (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                          C47931 * C48404)))) /
        C47933;
    const double C10366 =
        (2 * C48371 * C48408 + C48371 * (C48408 + C48415 * C48437)) / C47933;
    const double C48451 = C48145 * C48448;
    const double C48486 = C48371 * C48448;
    const double C2763 =
        (2 * C48381 + C48371 * C48441 +
         ae * (2 * C48371 * C48202 + C48371 * (C48202 + C48246 * C48437)) +
         be * (2 * C48371 * C48203 + C48371 * (C48203 + C48248 * C48437)) +
         C48145 * (ae * (2 * C48372 + C48371 * C48446) +
                   be * (2 * C48373 + C48371 * C48447) +
                   C48145 * (2 * C48374 + C48371 * C48448))) /
        C47933;
    const double C10656 = C9146 * C9895;
    const double C10654 = C9146 * C9894;
    const double C48318 = C48279 + C48313;
    const double C49173 = C48999 * C48993;
    const double C49210 = C49175 + C48999;
    const double C49177 = C49006 / C47934;
    const double C49174 = C49006 * C48993;
    const double C11351 = C49237 - (C48999 * C48995) / C47928;
    const double C49180 = C49039 * C49033;
    const double C49215 = C49182 + C49039;
    const double C49184 = C49046 / C47934;
    const double C49181 = C49046 * C49033;
    const double C20352 = C49239 - (C49039 * C49035) / C47928;
    const double C47977 = C47968 - C47974;
    const double C48016 = C47998 - C48012;
    const double C47967 = C47962 * be;
    const double C26912 = C48029 * C248;
    const double C26910 = C48029 * C247;
    const double C28567 = C48029 * C356;
    const double C28565 = C48029 * C355;
    const double C48033 = 2 * C48029;
    const double C121 =
        (C48029 / C47934 + (0 * ae) / C47928) / C47934 - (0 * be) / C47928;
    const double C3833 = C48029 / C47934 - (0 * be) / C47928;
    const double C22568 = C48029 / C47934 + (0 * ae) / C47928;
    const double C7989 = C7830 * C248;
    const double C7987 = C7830 * C247;
    const double C15705 = C7830 * C356;
    const double C15703 = C7830 * C355;
    const double C47966 = C47961 * ae;
    const double C47997 = C47961 * C47991;
    const double C1010 =
        ((-C47929 / C47928) / C47934 - (C47947 * be) / C47928) / C47934 -
        ((C47926 * ((-C47936) / C47934 - (C47961 * be) / C47928) + C23756) *
         be) /
            C47928 +
        (-C47948 / C47928) / C47934 - (0 * be) / C47928;
    const double C1012 =
        ((-C47936) / C47934 - (C47961 * be) / C47928) / C47934 -
        ((C47926 * ((-C47948 / C47928) / C47934 - (0 * be) / C47928) + C48848) *
         be) /
            C47928;
    const double C23762 = (-C47936) / C47934 - (C47961 * be) / C47928;
    const double C49187 = C49147 / C47928;
    const double C49220 = C49191 / C47934;
    const double C49221 = C49193 + C49155;
    const double C3823 = C49155 - C48849 / C47940;
    const double C49190 = C49151 / C47928;
    const double C3985 = C3821 * C258;
    const double C3969 = C3821 * C259;
    const double C4395 = C3821 * C536;
    const double C4553 = C3821 * C638;
    const double C5303 = C3821 * C366;
    const double C5287 = C3821 * C367;
    const double C6071 = C3821 * C889;
    const double C139 = (3 * (C48158 + C48145 * C48177 + C48166 * ae) +
                         C48145 * (2 * C48177 + C48145 * C48211 + C48195 * ae) +
                         (2 * C48166 + C48145 * C48195) * ae) /
                        C47928;
    const double C246 =
        (C48339 * (2 * C48177 + C48145 * C48211 + C48195 * ae)) / C47928;
    const double C354 =
        (C48371 * (2 * C48177 + C48145 * C48211 + C48195 * ae)) / C47928;
    const double C531 =
        (C48158 + C48145 * C48177 + C48166 * ae + C48211 * C48404) / C47928;
    const double C633 = (C48371 * C48339 * C48211) / C47928;
    const double C884 =
        (C48158 + C48145 * C48177 + C48166 * ae + C48211 * C48437) / C47928;
    const double C148 =
        (3 * (C48175 + ae * C48176 + be * C48177 + C48145 * C48207) +
         ae * (2 * C48176 + C48145 * C48210 + C48195 * be) +
         be * (2 * C48177 + C48145 * C48211 + C48195 * ae) +
         C48145 *
             (2 * C48207 + ae * C48210 + be * C48211 +
              C48145 * (C48201 + ae * C48202 + be * C48203 +
                        C48145 * (ae * C48193 + be * C48196 +
                                  C48145 *
                                      (C48182 * C48183 +
                                       C48149 * bs[6] * std::pow(C48143, 6)) *
                                      C47931)))) /
        C47933;
    const double C138 = (3 * (C48157 + C48145 * C48176 + C48166 * be) +
                         C48145 * (2 * C48176 + C48145 * C48210 + C48195 * be) +
                         (2 * C48166 + C48145 * C48195) * be) /
                        C47928;
    const double C245 =
        (C48339 * (2 * C48176 + C48145 * C48210 + C48195 * be)) / C47928;
    const double C353 =
        (C48371 * (2 * C48176 + C48145 * C48210 + C48195 * be)) / C47928;
    const double C530 =
        (C48157 + C48145 * C48176 + C48166 * be + C48210 * C48404) / C47928;
    const double C632 = (C48371 * C48339 * C48210) / C47928;
    const double C883 =
        (C48157 + C48145 * C48176 + C48166 * be + C48210 * C48437) / C47928;
    const double C48260 = C48145 * C48257;
    const double C48280 = 3 * C48257;
    const double C48268 = be * C48257;
    const double C48642 = C48339 * C48257;
    const double C1167 =
        (2 * C48339 * C48211 + C48339 * (C48211 + C48257 * C48404)) / C47928;
    const double C1413 = (C48371 * (C48211 + C48257 * C48404)) / C47928;
    const double C2329 = (C48339 * C48211 + C48339 * C48257 * C48437) / C47928;
    const double C2756 =
        (2 * C48371 * C48211 + C48371 * (C48211 + C48257 * C48437)) / C47928;
    const double C48259 = C48145 * C48256;
    const double C48276 = 3 * C48256;
    const double C48267 = ae * C48256;
    const double C539 =
        (2 * (ae * (C48170 + C48193 * C48404) +
              be * (C48171 + C48196 * C48404) + C48145 * C48408) +
         ae * (C48210 + C48256 * C48404) + be * (C48211 + C48257 * C48404) +
         C48145 * (C48408 + ae * (C48202 + C48246 * C48404) +
                   be * (C48203 + C48248 * C48404) +
                   C48145 * (ae * (C48193 + C48234 * C48404) +
                             be * (C48196 + C48237 * C48404) +
                             C48145 * (C48245 + C48306 * C48404)))) /
        C47933;
    const double C641 =
        (2 * (ae * C48371 * C48340 + be * C48371 * C48341 + C48145 * C48425) +
         ae * C48371 * C48339 * C48256 + be * C48371 * C48339 * C48257 +
         C48145 * (C48425 + ae * C48371 * C48354 + be * C48371 * C48355 +
                   C48145 * (ae * C48371 * C48356 + be * C48371 * C48357 +
                             C48145 * C48371 * C48358))) /
        C47933;
    const double C892 =
        (2 * (ae * (C48170 + C48193 * C48437) +
              be * (C48171 + C48196 * C48437) + C48145 * C48441) +
         ae * (C48210 + C48256 * C48437) + be * (C48211 + C48257 * C48437) +
         C48145 * (C48441 + ae * (C48202 + C48246 * C48437) +
                   be * (C48203 + C48248 * C48437) +
                   C48145 * (ae * (C48193 + C48234 * C48437) +
                             be * (C48196 + C48237 * C48437) +
                             C48145 * (C48245 + C48306 * C48437)))) /
        C47933;
    const double C48640 = C48339 * C48256;
    const double C1166 =
        (2 * C48339 * C48210 + C48339 * (C48210 + C48256 * C48404)) / C47928;
    const double C1412 = (C48371 * (C48210 + C48256 * C48404)) / C47928;
    const double C2328 = (C48339 * C48210 + C48339 * C48256 * C48437) / C47928;
    const double C2755 =
        (2 * C48371 * C48210 + C48371 * (C48210 + C48256 * C48437)) / C47928;
    const double C48366 = C48364 + C48360;
    const double C48398 = C48396 + C48392;
    const double C48258 = C48232 + C48255;
    const double C256 =
        (2 * (ae * C48339 * C48170 + be * C48339 * C48171 + C48145 * C48349) +
         ae * C48339 * C48210 + be * C48339 * C48211 +
         C48145 * (C48349 + ae * C48339 * C48202 + be * C48339 * C48203 +
                   C48145 * C48347)) /
        C47933;
    const double C364 =
        (2 * (ae * C48371 * C48170 + be * C48371 * C48171 + C48145 * C48381) +
         ae * C48371 * C48210 + be * C48371 * C48211 +
         C48145 * (C48381 + ae * C48371 * C48202 + be * C48371 * C48203 +
                   C48145 * C48379)) /
        C47933;
    const double C1701 = C1005 * C1175;
    const double C8473 = C49219 * C1175;
    const double C9266 = C48838 * C1175;
    const double C11533 = C49148 * C1175;
    const double C11513 = C48848 * C1175;
    const double C23940 = C23756 * C1175;
    const double C23920 = C48848 * C1175;
    const double C27396 = C48851 * C1175;
    const double C1882 = C1005 * C1421;
    const double C8642 = C49219 * C1421;
    const double C10186 = C48838 * C1421;
    const double C12091 = C48848 * C1421;
    const double C12831 = C49148 * C1421;
    const double C24498 = C48848 * C1421;
    const double C27565 = C48851 * C1421;
    const double C30056 = C23756 * C1421;
    const double C9254 = C48838 * C1689;
    const double C11941 = C49148 * C1689;
    const double C24348 = C23756 * C1689;
    const double C9642 = C48838 * C1871;
    const double C12087 = C49148 * C1871;
    const double C24494 = C23756 * C1871;
    const double C10172 = C48838 * C2339;
    const double C13616 = C49148 * C2339;
    const double C25866 = C23756 * C2339;
    const double C3709 = C1005 * C2764;
    const double C16612 = C49219 * C2764;
    const double C18106 = C48838 * C2764;
    const double C20244 = C48848 * C2764;
    const double C20620 = C49148 * C2764;
    const double C26623 = C48848 * C2764;
    const double C34464 = C23756 * C2764;
    const double C38046 = C48851 * C2764;
    const double C18102 = C48838 * C3697;
    const double C21355 = C49148 * C3697;
    const double C35199 = C23756 * C3697;
    const double C48325 = C48145 * C48322;
    const double C1688 =
        (3 * (C48211 + C48257 * C48404) +
         C48339 * (2 * C48339 * C48257 + C48339 * (C48257 + C48322 * C48404))) /
        C47928;
    const double C1870 =
        (C48371 * (2 * C48339 * C48257 + C48339 * (C48257 + C48322 * C48404))) /
        C47928;
    const double C2335 =
        (C48211 + C48257 * C48404 + (C48257 + C48322 * C48404) * C48437) /
        C47928;
    const double C3696 =
        (3 * (C48211 + C48257 * C48437) +
         C48371 * (2 * C48371 * C48257 + C48371 * (C48257 + C48322 * C48437))) /
        C47928;
    const double C48324 = C48145 * C48321;
    const double C1687 =
        (3 * (C48210 + C48256 * C48404) +
         C48339 * (2 * C48339 * C48256 + C48339 * (C48256 + C48321 * C48404))) /
        C47928;
    const double C1869 =
        (C48371 * (2 * C48339 * C48256 + C48339 * (C48256 + C48321 * C48404))) /
        C47928;
    const double C2334 =
        (C48210 + C48256 * C48404 + (C48256 + C48321 * C48404) * C48437) /
        C47928;
    const double C3695 =
        (3 * (C48210 + C48256 * C48437) +
         C48371 * (2 * C48371 * C48256 + C48371 * (C48256 + C48321 * C48437))) /
        C47928;
    const double C48323 = C48293 + C48320;
    const double C48368 = C48145 * C48367;
    const double C48434 = C48433 + C48432;
    const double C2604 =
        (2 * (ae * (C48340 + C48356 * C48437) +
              be * (C48341 + C48357 * C48437) + C48145 * C48480) +
         ae * (C48339 * C48256 + C48339 * C48321 * C48437) +
         be * (C48339 * C48257 + C48339 * C48322 * C48437) +
         C48145 * (C48480 + ae * (C48354 + C48339 * C48307 * C48437) +
                   be * (C48355 + C48339 * C48309 * C48437) +
                   C48145 * (ae * (C48356 + C48339 * C48295 * C48437) +
                             be * (C48357 + C48339 * C48298 * C48437) +
                             C48145 * (C48358 + C48339 *
                                                    (C48274 * C48275 +
                                                     C48149 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47931 * C48437)))) /
        C47933;
    const double C3263 =
        (ae * (2 * C48371 * C48340 + C48371 * (C48340 + C48356 * C48437)) +
         be * (2 * C48371 * C48341 + C48371 * (C48341 + C48357 * C48437)) +
         C48145 * (2 * C48425 + C48371 * C48480)) /
        C47933;
    const double C3264 =
        (2 * C48425 + C48371 * C48480 +
         ae * (2 * C48371 * C48354 +
               C48371 * (C48354 + C48339 * C48307 * C48437)) +
         be * (2 * C48371 * C48355 +
               C48371 * (C48355 + C48339 * C48309 * C48437)) +
         C48145 *
             (ae * (2 * C48427 + C48371 * (C48356 + C48339 * C48295 * C48437)) +
              be * (2 * C48428 + C48371 * (C48357 + C48339 * C48298 * C48437)) +
              C48145 * (2 * C48429 +
                        C48371 * (C48358 +
                                  C48339 *
                                      (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                      C47931 * C48437)))) /
        C47933;
    const double C11242 = (3 * (C48349 + C48342 * C48437) +
                           C48371 * (2 * C48425 + C48371 * C48480)) /
                          C47933;
    const double C18007 =
        (ae * (3 * (C48340 + C48356 * C48437) +
               C48371 * (2 * C48427 +
                         C48371 * (C48356 + C48339 * C48295 * C48437))) +
         be * (3 * (C48341 + C48357 * C48437) +
               C48371 * (2 * C48428 +
                         C48371 * (C48357 + C48339 * C48298 * C48437))) +
         C48145 * (3 * C48480 +
                   C48371 * (2 * C48429 +
                             C48371 * (C48358 + C48339 *
                                                    (C48274 * C48275 +
                                                     C48149 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47931 * C48437)))) /
        C47933;
    const double C18348 =
        (4 * (2 * C48425 + C48371 * C48480) +
         C48371 * (3 * C48480 +
                   C48371 * (2 * C48429 +
                             C48371 * (C48358 + C48339 *
                                                    (C48274 * C48275 +
                                                     C48149 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47931 * C48437)))) /
        C47933;
    const double C48400 = C48145 * C48399;
    const double C48420 = C48419 + C48418;
    const double C48460 = C48458 + C48459;
    const double C1423 =
        (2 * (ae * C48371 * C48413 + be * C48371 * C48414 + C48145 * C48465) +
         ae * C48371 * (C48256 + C48321 * C48404) +
         be * C48371 * (C48257 + C48322 * C48404) +
         C48145 *
             (C48465 + ae * C48371 * (C48246 + C48307 * C48404) +
              be * C48371 * (C48248 + C48309 * C48404) +
              C48145 * (ae * C48371 * (C48234 + C48295 * C48404) +
                        be * C48371 * (C48237 + C48298 * C48404) +
                        C48145 * C48371 *
                            (C48306 + (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                          C47931 * C48404)))) /
        C47933;
    const double C10367 =
        (ae * (2 * C48371 * C48413 +
               C48371 * (C48413 + (C48234 + C48295 * C48404) * C48437)) +
         be * (2 * C48371 * C48414 +
               C48371 * (C48414 + (C48237 + C48298 * C48404) * C48437)) +
         C48145 * (2 * C48465 +
                   C48371 * (C48415 +
                             (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404) *
                                 C48437))) /
        C47933;
    const double C11243 =
        (3 * (C48408 + C48415 * C48437) +
         C48371 * (2 * C48465 +
                   C48371 * (C48415 +
                             (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404) *
                                 C48437))) /
        C47933;
    const double C1697 = C49192 * C1174;
    const double C8469 = C49192 * C1174;
    const double C11537 = C48848 * C1174;
    const double C23944 = C48848 * C1174;
    const double C27392 = C26745 * C1174;
    const double C1878 = C49192 * C1420;
    const double C8638 = C49192 * C1420;
    const double C12835 = C48848 * C1420;
    const double C27561 = C26745 * C1420;
    const double C30060 = C48848 * C1420;
    const double C10190 = C48838 * C2340;
    const double C13612 = C48848 * C2340;
    const double C25862 = C48848 * C2340;
    const double C10818 = C48838 * C10366;
    const double C48453 = C48452 + C48451;
    const double C48487 = C48485 + C48486;
    const double C3705 = C49192 * C2763;
    const double C16608 = C49192 * C2763;
    const double C20624 = C48848 * C2763;
    const double C34468 = C48848 * C2763;
    const double C38042 = C26745 * C2763;
    const double C129 = 5 * (3 * C48195 + C48145 * C48247) +
                        C48145 * (4 * C48247 + C48145 * C48318);
    const double C242 = C48339 * (4 * C48247 + C48145 * C48318);
    const double C350 = C48371 * (4 * C48247 + C48145 * C48318);
    const double C525 = 3 * C48195 + C48145 * C48247 + C48318 * C48404;
    const double C627 = C48371 * C48339 * C48318;
    const double C878 = 3 * C48195 + C48145 * C48247 + C48318 * C48437;
    const double C49207 = C49173 / C47928;
    const double C49227 = C49210 / C47934;
    const double C49228 = C49211 + C49177;
    const double C11353 = C49177 - C49004 / C47940;
    const double C49209 = C49174 / C47928;
    const double C49212 = C49180 / C47928;
    const double C49230 = C49215 / C47934;
    const double C49231 = C49216 + C49184;
    const double C20354 = C49184 - C49044 / C47940;
    const double C49214 = C49181 / C47928;
    const double C47971 = C47967 / C47928;
    const double C47970 = C47966 / C47928;
    const double C48002 = C47997 / C47940;
    const double C48001 = C47926 * C47997;
    const double C122 = (-C47997 / C47928) / (4 * C47933 * std::pow(C47934, 2));
    const double C1015 = (-C47997 / C47928) / C48032;
    const double C3834 = (-C47997 / C47928) / (4 * C47986);
    const double C7831 = (-C47997 / C47928) / C48032;
    const double C9147 = -C47997 / C47928;
    const double C11358 = (-C47997 / C47928) / C47934;
    const double C22569 = (-C47997 / C47928) / (4 * C47986);
    const double C23765 = (-C47997 / C47928) / C47934;
    const double C26754 = (-C47997 / C47928) / C48032;
    const double C1217 = C1010 * C529;
    const double C1215 = C1010 * C528;
    const double C1205 = C1010 * C250;
    const double C1203 = C1010 * C249;
    const double C1193 = C1010 * C527;
    const double C1191 = C1010 * C526;
    const double C1181 = C1010 * C252;
    const double C1179 = C1010 * C251;
    const double C1704 = C1010 * C1171;
    const double C1702 = C1010 * C1170;
    const double C1897 = C1010 * C629;
    const double C1895 = C1010 * C628;
    const double C1885 = C1010 * C1417;
    const double C1883 = C1010 * C1416;
    const double C2806 = C1010 * C882;
    const double C2804 = C1010 * C881;
    const double C2794 = C1010 * C358;
    const double C2792 = C1010 * C357;
    const double C2782 = C1010 * C880;
    const double C2780 = C1010 * C879;
    const double C2770 = C1010 * C360;
    const double C2768 = C1010 * C359;
    const double C3268 = C1010 * C2325;
    const double C3266 = C1010 * C2324;
    const double C3712 = C1010 * C2760;
    const double C3710 = C1010 * C2759;
    const double C6426 = C1010 * C631;
    const double C6424 = C1010 * C630;
    const double C1209 = C1012 * C248;
    const double C1207 = C1012 * C247;
    const double C1197 = C1012 * C529;
    const double C1195 = C1012 * C528;
    const double C1185 = C1012 * C250;
    const double C1183 = C1012 * C249;
    const double C1700 = C1012 * C1169;
    const double C1698 = C1012 * C1168;
    const double C1893 = C1012 * C631;
    const double C1891 = C1012 * C630;
    const double C1881 = C1012 * C1415;
    const double C1879 = C1012 * C1414;
    const double C2798 = C1012 * C356;
    const double C2796 = C1012 * C355;
    const double C2786 = C1012 * C882;
    const double C2784 = C1012 * C881;
    const double C2774 = C1012 * C358;
    const double C2772 = C1012 * C357;
    const double C3272 = C1012 * C2327;
    const double C3270 = C1012 * C2326;
    const double C3708 = C1012 * C2758;
    const double C3706 = C1012 * C2757;
    const double C23939 = C23762 * C1169;
    const double C23937 = C23762 * C1168;
    const double C23931 = C23762 * C529;
    const double C23929 = C23762 * C528;
    const double C23923 = C23762 * C250;
    const double C23921 = C23762 * C249;
    const double C23915 = C23762 * C1171;
    const double C23913 = C23762 * C1170;
    const double C23907 = C23762 * C527;
    const double C23905 = C23762 * C526;
    const double C23899 = C23762 * C252;
    const double C23897 = C23762 * C251;
    const double C24347 = C23762 * C1684;
    const double C24345 = C23762 * C1683;
    const double C24509 = C23762 * C629;
    const double C24507 = C23762 * C628;
    const double C24501 = C23762 * C1417;
    const double C24499 = C23762 * C1416;
    const double C24493 = C23762 * C1866;
    const double C24491 = C23762 * C1865;
    const double C25245 = C23762 * C2327;
    const double C25243 = C23762 * C2326;
    const double C25237 = C23762 * C631;
    const double C25235 = C23762 * C630;
    const double C25229 = C23762 * C2325;
    const double C25227 = C23762 * C2324;
    const double C25489 = C23762 * C882;
    const double C25487 = C23762 * C881;
    const double C25481 = C23762 * C358;
    const double C25479 = C23762 * C357;
    const double C25473 = C23762 * C880;
    const double C25471 = C23762 * C879;
    const double C25465 = C23762 * C360;
    const double C25463 = C23762 * C359;
    const double C25865 = C23762 * C2331;
    const double C25863 = C23762 * C2330;
    const double C26075 = C23762 * C3257;
    const double C26073 = C23762 * C3256;
    const double C26626 = C23762 * C2760;
    const double C26624 = C23762 * C2759;
    const double C30055 = C23762 * C1415;
    const double C30053 = C23762 * C1414;
    const double C34463 = C23762 * C2758;
    const double C34461 = C23762 * C2757;
    const double C35198 = C23762 * C3692;
    const double C35196 = C23762 * C3691;
    const double C49241 = C49187 + C49233;
    const double C3822 = C49220 - (C48851 * C48834) / C47928;
    const double C22712 = C49221 * C257;
    const double C23122 = C49221 * C538;
    const double C23280 = C49221 * C640;
    const double C31705 = C49221 * C365;
    const double C32473 = C49221 * C891;
    const double C104 = C49221 / C47934 - C48849 / C48034;
    const double C3977 = C3823 * C257;
    const double C4387 = C3823 * C538;
    const double C4545 = C3823 * C640;
    const double C5295 = C3823 * C365;
    const double C6063 = C3823 * C891;
    const double C49234 = C49190 + C49220;
    const double C1213 = C1014 * C246;
    const double C3980 = C3833 * C246;
    const double C8013 = C7830 * C246;
    const double C22715 = C22568 * C246;
    const double C26936 = C48029 * C246;
    const double C2802 = C1014 * C354;
    const double C5298 = C3833 * C354;
    const double C15729 = C7830 * C354;
    const double C28579 = C48029 * C354;
    const double C31708 = C22568 * C354;
    const double C1221 = C1012 * C531;
    const double C1201 = C1014 * C531;
    const double C8001 = C7830 * C531;
    const double C11528 = C47954 * C531;
    const double C23935 = C23764 * C531;
    const double C26924 = C48029 * C531;
    const double C1889 = C1014 * C633;
    const double C6430 = C1012 * C633;
    const double C8649 = C7830 * C633;
    const double C12826 = C47954 * C633;
    const double C25241 = C23764 * C633;
    const double C27572 = C48029 * C633;
    const double C2810 = C1012 * C884;
    const double C2790 = C1014 * C884;
    const double C15717 = C7830 * C884;
    const double C19148 = C47954 * C884;
    const double C25493 = C23764 * C884;
    const double C29694 = C48029 * C884;
    const double C1211 = C1014 * C245;
    const double C3978 = C3833 * C245;
    const double C8011 = C7830 * C245;
    const double C22713 = C22568 * C245;
    const double C26934 = C48029 * C245;
    const double C2800 = C1014 * C353;
    const double C5296 = C3833 * C353;
    const double C15727 = C7830 * C353;
    const double C28577 = C48029 * C353;
    const double C31706 = C22568 * C353;
    const double C1219 = C1012 * C530;
    const double C1199 = C1014 * C530;
    const double C7999 = C7830 * C530;
    const double C11526 = C47954 * C530;
    const double C23933 = C23764 * C530;
    const double C26922 = C48029 * C530;
    const double C1887 = C1014 * C632;
    const double C6428 = C1012 * C632;
    const double C8647 = C7830 * C632;
    const double C12824 = C47954 * C632;
    const double C25239 = C23764 * C632;
    const double C27570 = C48029 * C632;
    const double C2808 = C1012 * C883;
    const double C2788 = C1014 * C883;
    const double C15715 = C7830 * C883;
    const double C19146 = C47954 * C883;
    const double C25491 = C23764 * C883;
    const double C29692 = C48029 * C883;
    const double C48262 = C48222 + C48260;
    const double C3261 =
        (2 * C48371 * C48642 + C48371 * (C48642 + C48339 * C48322 * C48437)) /
        C47928;
    const double C1696 = C1014 * C1167;
    const double C8468 = C7830 * C1167;
    const double C11536 = C47954 * C1167;
    const double C23943 = C23764 * C1167;
    const double C27391 = C48029 * C1167;
    const double C1877 = C1014 * C1413;
    const double C8637 = C7830 * C1413;
    const double C12834 = C47954 * C1413;
    const double C27560 = C48029 * C1413;
    const double C30059 = C23764 * C1413;
    const double C3276 = C1014 * C2329;
    const double C16191 = C7830 * C2329;
    const double C18940 = C47954 * C2329;
    const double C25249 = C23764 * C2329;
    const double C29136 = C48029 * C2329;
    const double C3704 = C1014 * C2756;
    const double C16607 = C7830 * C2756;
    const double C20623 = C47954 * C2756;
    const double C34467 = C23764 * C2756;
    const double C38041 = C48029 * C2756;
    const double C48261 = C48220 + C48259;
    const double C48282 = C48266 + C48267;
    const double C1226 = C49192 * C539;
    const double C4383 = C49169 * C539;
    const double C8026 = C49192 * C539;
    const double C23118 = C49169 * C539;
    const double C26949 = C26745 * C539;
    const double C4541 = C49169 * C641;
    const double C6435 = C49192 * C641;
    const double C23276 = C49169 * C641;
    const double C28353 = C26745 * C641;
    const double C40014 = C49192 * C641;
    const double C2815 = C49192 * C892;
    const double C6059 = C49169 * C892;
    const double C15742 = C49192 * C892;
    const double C32469 = C49169 * C892;
    const double C37224 = C26745 * C892;
    const double C3260 =
        (2 * C48371 * C48640 + C48371 * (C48640 + C48339 * C48321 * C48437)) /
        C47928;
    const double C1694 = C1014 * C1166;
    const double C8466 = C7830 * C1166;
    const double C11534 = C47954 * C1166;
    const double C23941 = C23764 * C1166;
    const double C27389 = C48029 * C1166;
    const double C1875 = C1014 * C1412;
    const double C8635 = C7830 * C1412;
    const double C12832 = C47954 * C1412;
    const double C27558 = C48029 * C1412;
    const double C30057 = C23764 * C1412;
    const double C3274 = C1014 * C2328;
    const double C16189 = C7830 * C2328;
    const double C18938 = C47954 * C2328;
    const double C25247 = C23764 * C2328;
    const double C29134 = C48029 * C2328;
    const double C3702 = C1014 * C2755;
    const double C16605 = C7830 * C2755;
    const double C20621 = C47954 * C2755;
    const double C34465 = C23764 * C2755;
    const double C38039 = C48029 * C2755;
    const double C1214 = C49192 * C256;
    const double C3993 = C3823 * C256;
    const double C3981 = C49169 * C256;
    const double C8014 = C49192 * C256;
    const double C22728 = C49221 * C256;
    const double C22716 = C49169 * C256;
    const double C26937 = C26745 * C256;
    const double C2803 = C49192 * C364;
    const double C5311 = C3823 * C364;
    const double C5299 = C49169 * C364;
    const double C15730 = C49192 * C364;
    const double C28580 = C26745 * C364;
    const double C31721 = C49221 * C364;
    const double C31709 = C49169 * C364;
    const double C48328 = C48281 + C48325;
    const double C48327 = C48277 + C48324;
    const double C48326 = C48145 * C48323;
    const double C48369 = C48366 + C48368;
    const double C19694 = C48848 * C3263;
    const double C21600 = C48838 * C3263;
    const double C26072 = C48848 * C3263;
    const double C18353 = C48838 * C11242;
    const double C48401 = C48398 + C48400;
    const double C1177 =
        (2 * (ae * (2 * C48340 + C48339 * C48413) +
              be * (2 * C48341 + C48339 * C48414) + C48145 * C48460) +
         ae * (2 * C48339 * C48256 + C48339 * (C48256 + C48321 * C48404)) +
         be * (2 * C48339 * C48257 + C48339 * (C48257 + C48322 * C48404)) +
         C48145 *
             (C48460 + ae * (2 * C48354 + C48339 * (C48246 + C48307 * C48404)) +
              be * (2 * C48355 + C48339 * (C48248 + C48309 * C48404)) +
              C48145 *
                  (ae * (2 * C48356 + C48339 * (C48234 + C48295 * C48404)) +
                   be * (2 * C48357 + C48339 * (C48237 + C48298 * C48404)) +
                   C48145 * (2 * C48358 +
                             C48339 * (C48306 +
                                       (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404))))) /
        C47933;
    const double C1690 = (ae * (3 * (C48170 + C48193 * C48404) +
                                C48339 * (2 * C48340 + C48339 * C48413)) +
                          be * (3 * (C48171 + C48196 * C48404) +
                                C48339 * (2 * C48341 + C48339 * C48414)) +
                          C48145 * (3 * C48408 + C48339 * C48460)) /
                         C47933;
    const double C1691 =
        (3 * C48408 + C48339 * C48460 +
         ae * (3 * (C48202 + C48246 * C48404) +
               C48339 * (2 * C48354 + C48339 * (C48246 + C48307 * C48404))) +
         be * (3 * (C48203 + C48248 * C48404) +
               C48339 * (2 * C48355 + C48339 * (C48248 + C48309 * C48404))) +
         C48145 *
             (ae * (3 * C48413 +
                    C48339 *
                        (2 * C48356 + C48339 * (C48234 + C48295 * C48404))) +
              be * (3 * C48414 +
                    C48339 *
                        (2 * C48357 + C48339 * (C48237 + C48298 * C48404))) +
              C48145 * (3 * C48415 +
                        C48339 * (2 * C48358 +
                                  C48339 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48404))))) /
        C47933;
    const double C1872 = (ae * C48371 * (2 * C48340 + C48339 * C48413) +
                          be * C48371 * (2 * C48341 + C48339 * C48414) +
                          C48145 * C48371 * C48460) /
                         C47933;
    const double C1873 =
        (C48371 * C48460 +
         ae * C48371 * (2 * C48354 + C48339 * (C48246 + C48307 * C48404)) +
         be * C48371 * (2 * C48355 + C48339 * (C48248 + C48309 * C48404)) +
         C48145 *
             (ae * C48371 * (2 * C48356 + C48339 * (C48234 + C48295 * C48404)) +
              be * C48371 * (2 * C48357 + C48339 * (C48237 + C48298 * C48404)) +
              C48145 * C48371 *
                  (2 * C48358 +
                   C48339 * (C48306 + (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                          C47931 * C48404)))) /
        C47933;
    const double C9236 = (4 * (2 * C48349 + C48339 * C48408) +
                          C48339 * (3 * C48408 + C48339 * C48460)) /
                         C47933;
    const double C9237 =
        (ae * (4 * (2 * C48340 + C48339 * C48413) +
               C48339 * (3 * C48413 +
                         C48339 * (2 * C48356 +
                                   C48339 * (C48234 + C48295 * C48404)))) +
         be * (4 * (2 * C48341 + C48339 * C48414) +
               C48339 * (3 * C48414 +
                         C48339 * (2 * C48357 +
                                   C48339 * (C48237 + C48298 * C48404)))) +
         C48145 *
             (4 * C48460 +
              C48339 * (3 * C48415 +
                        C48339 * (2 * C48358 +
                                  C48339 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48404))))) /
        C47933;
    const double C9390 = (C48371 * (3 * C48408 + C48339 * C48460)) / C47933;
    const double C9539 =
        (5 * (3 * C48408 + C48339 * C48460) +
         C48339 *
             (4 * C48460 +
              C48339 * (3 * C48415 +
                        C48339 * (2 * C48358 +
                                  C48339 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48404))))) /
        C47933;
    const double C9633 =
        (C48371 *
         (4 * C48460 +
          C48339 * (3 * C48415 +
                    C48339 * (2 * C48358 +
                              C48339 * (C48306 +
                                        (C48274 * C48275 +
                                         C48149 * bs[8] * std::pow(C48143, 8)) *
                                            C47931 * C48404))))) /
        C47933;
    const double C9898 =
        (2 * C48349 + C48339 * C48408 + C48460 * C48437) / C47933;
    const double C9899 =
        (3 * C48408 + C48339 * C48460 +
         (3 * C48415 +
          C48339 * (2 * C48358 +
                    C48339 * (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404))) *
             C48437) /
        C47933;
    const double C10159 =
        (ae * (2 * C48340 + C48339 * C48413 +
               (2 * C48356 + C48339 * (C48234 + C48295 * C48404)) * C48437) +
         be * (2 * C48341 + C48339 * C48414 +
               (2 * C48357 + C48339 * (C48237 + C48298 * C48404)) * C48437) +
         C48145 * (C48460 +
                   (2 * C48358 +
                    C48339 * (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404)) *
                       C48437)) /
        C47933;
    const double C10813 =
        (2 * C48371 * C48460 +
         C48371 * (C48460 +
                   (2 * C48358 +
                    C48339 * (C48306 + (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48404)) *
                       C48437)) /
        C47933;
    const double C2766 =
        (2 * (ae * (2 * C48372 + C48371 * C48446) +
              be * (2 * C48373 + C48371 * C48447) + C48145 * C48487) +
         ae * (2 * C48371 * C48256 + C48371 * (C48256 + C48321 * C48437)) +
         be * (2 * C48371 * C48257 + C48371 * (C48257 + C48322 * C48437)) +
         C48145 *
             (C48487 + ae * (2 * C48386 + C48371 * (C48246 + C48307 * C48437)) +
              be * (2 * C48387 + C48371 * (C48248 + C48309 * C48437)) +
              C48145 *
                  (ae * (2 * C48388 + C48371 * (C48234 + C48295 * C48437)) +
                   be * (2 * C48389 + C48371 * (C48237 + C48298 * C48437)) +
                   C48145 * (2 * C48390 +
                             C48371 * (C48306 +
                                       (C48274 * C48275 +
                                        C48149 * bs[8] * std::pow(C48143, 8)) *
                                           C47931 * C48437))))) /
        C47933;
    const double C3698 = (ae * (3 * (C48170 + C48193 * C48437) +
                                C48371 * (2 * C48372 + C48371 * C48446)) +
                          be * (3 * (C48171 + C48196 * C48437) +
                                C48371 * (2 * C48373 + C48371 * C48447)) +
                          C48145 * (3 * C48441 + C48371 * C48487)) /
                         C47933;
    const double C3699 =
        (3 * C48441 + C48371 * C48487 +
         ae * (3 * (C48202 + C48246 * C48437) +
               C48371 * (2 * C48386 + C48371 * (C48246 + C48307 * C48437))) +
         be * (3 * (C48203 + C48248 * C48437) +
               C48371 * (2 * C48387 + C48371 * (C48248 + C48309 * C48437))) +
         C48145 *
             (ae * (3 * C48446 +
                    C48371 *
                        (2 * C48388 + C48371 * (C48234 + C48295 * C48437))) +
              be * (3 * C48447 +
                    C48371 *
                        (2 * C48389 + C48371 * (C48237 + C48298 * C48437))) +
              C48145 * (3 * C48448 +
                        C48371 * (2 * C48390 +
                                  C48371 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48437))))) /
        C47933;
    const double C18096 = (4 * (2 * C48381 + C48371 * C48441) +
                           C48371 * (3 * C48441 + C48371 * C48487)) /
                          C47933;
    const double C18097 =
        (ae * (4 * (2 * C48372 + C48371 * C48446) +
               C48371 * (3 * C48446 +
                         C48371 * (2 * C48388 +
                                   C48371 * (C48234 + C48295 * C48437)))) +
         be * (4 * (2 * C48373 + C48371 * C48447) +
               C48371 * (3 * C48447 +
                         C48371 * (2 * C48389 +
                                   C48371 * (C48237 + C48298 * C48437)))) +
         C48145 *
             (4 * C48487 +
              C48371 * (3 * C48448 +
                        C48371 * (2 * C48390 +
                                  C48371 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48437))))) /
        C47933;
    const double C18585 =
        (5 * (3 * C48441 + C48371 * C48487) +
         C48371 *
             (4 * C48487 +
              C48371 * (3 * C48448 +
                        C48371 * (2 * C48390 +
                                  C48371 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48437))))) /
        C47933;
    const double C49242 = C49207 + C49237;
    const double C11352 = C49227 - (C49006 * C48995) / C47928;
    const double C9144 = C49228 / C47934 - C49004 / C48034;
    const double C49238 = C49209 + C49227;
    const double C49243 = C49212 + C49239;
    const double C20353 = C49230 - (C49046 * C49035) / C47928;
    const double C17920 = C49231 / C47934 - C49044 / C48034;
    const double C49240 = C49214 + C49230;
    const double C47973 = C47970 - C47949;
    const double C48005 = C48001 / C47940;
    const double C48004 = C48001 / C47928;
    const double C1224 = C1015 * C524;
    const double C1212 = C1015 * C238;
    const double C1200 = C1015 * C523;
    const double C1188 = C1015 * C239;
    const double C1695 = C1015 * C1162;
    const double C1888 = C1015 * C625;
    const double C1876 = C1015 * C1408;
    const double C2813 = C1015 * C877;
    const double C2801 = C1015 * C346;
    const double C2789 = C1015 * C876;
    const double C2777 = C1015 * C347;
    const double C3275 = C1015 * C2320;
    const double C3703 = C1015 * C2751;
    const double C6433 = C1015 * C626;
    const double C3995 = C3834 * C237;
    const double C3979 = C3834 * C238;
    const double C4381 = C3834 * C524;
    const double C4539 = C3834 * C626;
    const double C5313 = C3834 * C345;
    const double C5297 = C3834 * C346;
    const double C6057 = C3834 * C877;
    const double C8024 = C7831 * C524;
    const double C8012 = C7831 * C238;
    const double C8000 = C7831 * C523;
    const double C7988 = C7831 * C239;
    const double C8467 = C7831 * C1162;
    const double C8648 = C7831 * C625;
    const double C8636 = C7831 * C1408;
    const double C15740 = C7831 * C877;
    const double C15728 = C7831 * C346;
    const double C15716 = C7831 * C876;
    const double C15704 = C7831 * C347;
    const double C16190 = C7831 * C2320;
    const double C16606 = C7831 * C2751;
    const double C40012 = C7831 * C626;
    const double C9268 = C9147 * C1681;
    const double C9264 = C9147 * C1163;
    const double C9260 = C9147 * C522;
    const double C9256 = C9147 * C240;
    const double C9252 = C9147 * C1680;
    const double C9248 = C9147 * C1164;
    const double C9244 = C9147 * C521;
    const double C9240 = C9147 * C241;
    const double C9542 = C9147 * C9230;
    const double C9648 = C9147 * C623;
    const double C9644 = C9147 * C1410;
    const double C9640 = C9147 * C1862;
    const double C9636 = C9147 * C9384;
    const double C10188 = C9147 * C2322;
    const double C10184 = C9147 * C1409;
    const double C10179 = C9147 * C2319;
    const double C10175 = C9147 * C624;
    const double C10170 = C9147 * C2321;
    const double C10164 = C9147 * C2318;
    const double C10382 = C9147 * C875;
    const double C10378 = C9147 * C348;
    const double C10374 = C9147 * C874;
    const double C10370 = C9147 * C349;
    const double C10655 = C9147 * C9892;
    const double C10822 = C9147 * C3253;
    const double C10816 = C9147 * C10360;
    const double C11246 = C9147 * C2753;
    const double C14427 = C9147 * C1863;
    const double C18108 = C9147 * C3689;
    const double C18104 = C9147 * C2752;
    const double C18100 = C9147 * C3688;
    const double C18351 = C9147 * C11236;
    const double C18588 = C9147 * C18090;
    const double C21598 = C9147 * C3254;
    const double C11535 = C11358 * C1162;
    const double C11527 = C11358 * C523;
    const double C11519 = C11358 * C239;
    const double C11511 = C11358 * C1163;
    const double C11503 = C11358 * C522;
    const double C11495 = C11358 * C240;
    const double C11935 = C11358 * C1681;
    const double C12097 = C11358 * C624;
    const double C12089 = C11358 * C1409;
    const double C12081 = C11358 * C1863;
    const double C12833 = C11358 * C1408;
    const double C12825 = C11358 * C625;
    const double C13055 = C11358 * C347;
    const double C13047 = C11358 * C348;
    const double C13619 = C11358 * C2319;
    const double C13610 = C11358 * C2322;
    const double C14174 = C11358 * C875;
    const double C18939 = C11358 * C2320;
    const double C19147 = C11358 * C876;
    const double C19692 = C11358 * C3254;
    const double C20242 = C11358 * C2752;
    const double C20622 = C11358 * C2751;
    const double C21349 = C11358 * C3689;
    const double C22730 = C22569 * C237;
    const double C22714 = C22569 * C238;
    const double C23116 = C22569 * C524;
    const double C23274 = C22569 * C626;
    const double C31723 = C22569 * C345;
    const double C31707 = C22569 * C346;
    const double C32467 = C22569 * C877;
    const double C23942 = C23765 * C1162;
    const double C23934 = C23765 * C523;
    const double C23926 = C23765 * C239;
    const double C23918 = C23765 * C1163;
    const double C23910 = C23765 * C522;
    const double C23902 = C23765 * C240;
    const double C24342 = C23765 * C1681;
    const double C24504 = C23765 * C624;
    const double C24496 = C23765 * C1409;
    const double C24488 = C23765 * C1863;
    const double C25248 = C23765 * C2320;
    const double C25240 = C23765 * C625;
    const double C25232 = C23765 * C2319;
    const double C25492 = C23765 * C876;
    const double C25484 = C23765 * C347;
    const double C25476 = C23765 * C875;
    const double C25468 = C23765 * C348;
    const double C25860 = C23765 * C2322;
    const double C26070 = C23765 * C3254;
    const double C26621 = C23765 * C2752;
    const double C30058 = C23765 * C1408;
    const double C34466 = C23765 * C2751;
    const double C35193 = C23765 * C3689;
    const double C26947 = C26754 * C524;
    const double C26935 = C26754 * C238;
    const double C26923 = C26754 * C523;
    const double C26911 = C26754 * C239;
    const double C27390 = C26754 * C1162;
    const double C27571 = C26754 * C625;
    const double C27559 = C26754 * C1408;
    const double C28351 = C26754 * C626;
    const double C28578 = C26754 * C346;
    const double C28566 = C26754 * C347;
    const double C29135 = C26754 * C2320;
    const double C29693 = C26754 * C876;
    const double C37222 = C26754 * C877;
    const double C38040 = C26754 * C2751;
    const double C22720 = C49241 * C258;
    const double C22704 = C49241 * C259;
    const double C23130 = C49241 * C536;
    const double C23288 = C49241 * C638;
    const double C31713 = C49241 * C366;
    const double C31697 = C49241 * C367;
    const double C32481 = C49241 * C889;
    const double C101 =
        (C49232 + 2 * C48843) / C47934 - (C49241 * C48834) / C47928;
    const double C3989 = C3822 * C257;
    const double C3973 = C3822 * C258;
    const double C4391 = C3822 * C537;
    const double C4549 = C3822 * C639;
    const double C5307 = C3822 * C365;
    const double C5291 = C3822 * C366;
    const double C6067 = C3822 * C890;
    const double C22724 = C49234 * C257;
    const double C22708 = C49234 * C258;
    const double C23126 = C49234 * C537;
    const double C23284 = C49234 * C639;
    const double C31717 = C49234 * C365;
    const double C31701 = C49234 * C366;
    const double C32477 = C49234 * C890;
    const double C102 =
        (C49219 + 2 * C48851 + C49241) / C47934 - (C49234 * C48834) / C47928;
    const double C103 = (C49192 + C48848 / C47928 + C49234) / C47934 -
                        (C49221 * C48834) / C47928;
    const double C48264 = C48262 + C48244;
    const double C48263 = C48261 + C48241;
    const double C48292 = C48282 + C48268;
    const double C48331 = C48328 + C48305;
    const double C48330 = C48327 + C48302;
    const double C9270 = C48838 * C1690;
    const double C11937 = C48848 * C1690;
    const double C24344 = C48848 * C1690;
    const double C12083 = C48848 * C1872;
    const double C14429 = C48838 * C1872;
    const double C24490 = C48848 * C1872;
    const double C9544 = C48838 * C9236;
    const double C9638 = C48838 * C9390;
    const double C10657 = C48838 * C9898;
    const double C18110 = C48838 * C3698;
    const double C21351 = C48848 * C3698;
    const double C35195 = C48848 * C3698;
    const double C18590 = C48838 * C18096;
    const double C9141 =
        (C49235 + 2 * C48999) / C47934 - (C49242 * C48995) / C47928;
    const double C9142 =
        (C49223 + 2 * C49006 + C49242) / C47934 - (C49238 * C48995) / C47928;
    const double C9143 = (C49203 + C49003 / C47928 + C49238) / C47934 -
                         (C49228 * C48995) / C47928;
    const double C17917 =
        (C49236 + 2 * C49039) / C47934 - (C49243 * C49035) / C47928;
    const double C17918 =
        (C49225 + 2 * C49046 + C49243) / C47934 - (C49240 * C49035) / C47928;
    const double C17919 = (C49206 + C49043 / C47928 + C49240) / C47934 -
                          (C49231 * C49035) / C47928;
    const double C11532 = C47973 * C1169;
    const double C11530 = C47973 * C1168;
    const double C11524 = C47973 * C529;
    const double C11522 = C47973 * C528;
    const double C11516 = C47973 * C250;
    const double C11514 = C47973 * C249;
    const double C11508 = C47973 * C1171;
    const double C11506 = C47973 * C1170;
    const double C11500 = C47973 * C527;
    const double C11498 = C47973 * C526;
    const double C11492 = C47973 * C252;
    const double C11490 = C47973 * C251;
    const double C11940 = C47973 * C1684;
    const double C11938 = C47973 * C1683;
    const double C12102 = C47973 * C629;
    const double C12100 = C47973 * C628;
    const double C12094 = C47973 * C1417;
    const double C12092 = C47973 * C1416;
    const double C12086 = C47973 * C1866;
    const double C12084 = C47973 * C1865;
    const double C12830 = C47973 * C1415;
    const double C12828 = C47973 * C1414;
    const double C12822 = C47973 * C631;
    const double C12820 = C47973 * C630;
    const double C13052 = C47973 * C358;
    const double C13050 = C47973 * C357;
    const double C13044 = C47973 * C360;
    const double C13042 = C47973 * C359;
    const double C13624 = C47973 * C2325;
    const double C13622 = C47973 * C2324;
    const double C13615 = C47973 * C2331;
    const double C13613 = C47973 * C2330;
    const double C14179 = C47973 * C880;
    const double C14177 = C47973 * C879;
    const double C18936 = C47973 * C2327;
    const double C18934 = C47973 * C2326;
    const double C19144 = C47973 * C882;
    const double C19142 = C47973 * C881;
    const double C19697 = C47973 * C3257;
    const double C19695 = C47973 * C3256;
    const double C20247 = C47973 * C2760;
    const double C20245 = C47973 * C2759;
    const double C20619 = C47973 * C2758;
    const double C20617 = C47973 * C2757;
    const double C21354 = C47973 * C3692;
    const double C21352 = C47973 * C3691;
    const double C47976 = C47973 / C47934;
    const double C47975 = C47926 * C47973;
    const double C47992 = 2 * C47973;
    const double C48008 = C47993 - C48005;
    const double C48007 = C47996 - C48004;
    const double C1235 = C1211 - C1212;
    const double C1232 = C1199 - C1200;
    const double C1229 = C1187 - C1188;
    const double C1707 = C1694 - C1695;
    const double C1902 = C1887 - C1888;
    const double C1899 = C1875 - C1876;
    const double C2824 = C2800 - C2801;
    const double C2821 = C2788 - C2789;
    const double C2818 = C2776 - C2777;
    const double C3280 = C3274 - C3275;
    const double C3715 = C3702 - C3703;
    const double C4001 = C3978 - C3979;
    const double C5319 = C5296 - C5297;
    const double C8035 = C8011 - C8012;
    const double C8032 = C7999 - C8000;
    const double C8029 = C7987 - C7988;
    const double C8479 = C8466 - C8467;
    const double C8662 = C8647 - C8648;
    const double C8659 = C8635 - C8636;
    const double C15751 = C15727 - C15728;
    const double C15748 = C15715 - C15716;
    const double C15745 = C15703 - C15704;
    const double C16195 = C16189 - C16190;
    const double C16618 = C16605 - C16606;
    const double C9278 = C9267 - C9268;
    const double C9277 = C9263 - C9264;
    const double C9276 = C9259 - C9260;
    const double C9275 = C9255 - C9256;
    const double C9274 = C9251 - C9252;
    const double C9273 = C9247 - C9248;
    const double C9272 = C9243 - C9244;
    const double C9271 = C9239 - C9240;
    const double C9545 = C9541 - C9542;
    const double C9654 = C9647 - C9648;
    const double C9653 = C9643 - C9644;
    const double C9652 = C9639 - C9640;
    const double C9651 = C9635 - C9636;
    const double C10196 = C10187 - C10188;
    const double C10195 = C10183 - C10184;
    const double C10194 = C10178 - C10179;
    const double C10193 = C10174 - C10175;
    const double C10192 = C10169 - C10170;
    const double C10191 = C10163 - C10164;
    const double C10388 = C10381 - C10382;
    const double C10387 = C10377 - C10378;
    const double C10386 = C10373 - C10374;
    const double C10385 = C10369 - C10370;
    const double C10661 = C10654 - C10655;
    const double C10828 = C10821 - C10822;
    const double C10827 = C10815 - C10816;
    const double C11249 = C11245 - C11246;
    const double C14430 = C14426 - C14427;
    const double C18113 = C18107 - C18108;
    const double C18112 = C18103 - C18104;
    const double C18111 = C18099 - C18100;
    const double C18354 = C18350 - C18351;
    const double C18591 = C18587 - C18588;
    const double C21601 = C21597 - C21598;
    const double C11549 = C11534 - C11535;
    const double C11547 = C11526 - C11527;
    const double C11545 = C11518 - C11519;
    const double C11543 = C11510 - C11511;
    const double C11541 = C11502 - C11503;
    const double C11539 = C11494 - C11495;
    const double C11944 = C11934 - C11935;
    const double C12108 = C12096 - C12097;
    const double C12106 = C12088 - C12089;
    const double C12104 = C12080 - C12081;
    const double C12839 = C12832 - C12833;
    const double C12837 = C12824 - C12825;
    const double C13061 = C13054 - C13055;
    const double C13059 = C13046 - C13047;
    const double C13629 = C13618 - C13619;
    const double C13627 = C13609 - C13610;
    const double C14181 = C14173 - C14174;
    const double C18943 = C18938 - C18939;
    const double C19151 = C19146 - C19147;
    const double C19700 = C19691 - C19692;
    const double C20249 = C20241 - C20242;
    const double C20626 = C20621 - C20622;
    const double C21356 = C21348 - C21349;
    const double C22736 = C22713 - C22714;
    const double C31729 = C31706 - C31707;
    const double C23956 = C23941 - C23942;
    const double C23954 = C23933 - C23934;
    const double C23952 = C23925 - C23926;
    const double C23950 = C23917 - C23918;
    const double C23948 = C23909 - C23910;
    const double C23946 = C23901 - C23902;
    const double C24351 = C24341 - C24342;
    const double C24515 = C24503 - C24504;
    const double C24513 = C24495 - C24496;
    const double C24511 = C24487 - C24488;
    const double C25256 = C25247 - C25248;
    const double C25254 = C25239 - C25240;
    const double C25252 = C25231 - C25232;
    const double C25502 = C25491 - C25492;
    const double C25500 = C25483 - C25484;
    const double C25498 = C25475 - C25476;
    const double C25496 = C25467 - C25468;
    const double C25867 = C25859 - C25860;
    const double C26079 = C26069 - C26070;
    const double C26628 = C26620 - C26621;
    const double C30062 = C30057 - C30058;
    const double C34470 = C34465 - C34466;
    const double C35200 = C35192 - C35193;
    const double C26958 = C26934 - C26935;
    const double C26955 = C26922 - C26923;
    const double C26952 = C26910 - C26911;
    const double C27402 = C27389 - C27390;
    const double C27585 = C27570 - C27571;
    const double C27582 = C27558 - C27559;
    const double C28586 = C28577 - C28578;
    const double C28583 = C28565 - C28566;
    const double C29148 = C29134 - C29135;
    const double C29704 = C29692 - C29693;
    const double C38052 = C38039 - C38040;
    const double C141 = (4 * (2 * C48177 + C48145 * C48211 + C48195 * ae) +
                         C48145 * (3 * C48211 + C48145 * C48264 + C48247 * ae) +
                         (3 * C48195 + C48145 * C48247) * ae) /
                        C47928;
    const double C244 =
        (C48339 * (3 * C48211 + C48145 * C48264 + C48247 * ae)) / C47928;
    const double C352 =
        (C48371 * (3 * C48211 + C48145 * C48264 + C48247 * ae)) / C47928;
    const double C533 =
        (2 * C48177 + C48145 * C48211 + C48195 * ae + C48264 * C48404) / C47928;
    const double C635 = (C48371 * C48339 * C48264) / C47928;
    const double C886 =
        (2 * C48177 + C48145 * C48211 + C48195 * ae + C48264 * C48437) / C47928;
    const double C149 =
        (4 * (2 * C48207 + ae * C48210 + be * C48211 + C48145 * C48258) +
         ae * (3 * C48210 + C48145 * C48263 + C48247 * be) +
         be * (3 * C48211 + C48145 * C48264 + C48247 * ae) +
         C48145 * (3 * C48258 + ae * C48263 + be * C48264 +
                   C48145 * (2 * C48252 + ae * C48256 + be * C48257 +
                             C48145 * (C48245 + ae * C48246 + be * C48248 +
                                       C48145 * (ae * C48234 + be * C48237 +
                                                 C48145 *
                                                     (C48218 * C48219 +
                                                      C48149 * bs[7] *
                                                          std::pow(C48151, 7)) *
                                                     C47931))))) /
        C47933;
    const double C255 =
        (3 * (C48339 * C48201 + ae * C48339 * C48202 + be * C48339 * C48203 +
              C48145 * C48347) +
         ae * C48339 * C48263 + be * C48339 * C48264 +
         C48145 *
             (2 * C48347 + ae * C48339 * C48256 + be * C48339 * C48257 +
              C48145 * (C48342 + ae * C48339 * C48246 + be * C48339 * C48248 +
                        C48145 * (ae * C48339 * C48234 + be * C48339 * C48237 +
                                  C48145 * C48339 * C48306)))) /
        C47933;
    const double C363 =
        (3 * (C48371 * C48201 + ae * C48371 * C48202 + be * C48371 * C48203 +
              C48145 * C48379) +
         ae * C48371 * C48263 + be * C48371 * C48264 +
         C48145 *
             (2 * C48379 + ae * C48371 * C48256 + be * C48371 * C48257 +
              C48145 * (C48374 + ae * C48371 * C48246 + be * C48371 * C48248 +
                        C48145 * (ae * C48371 * C48234 + be * C48371 * C48237 +
                                  C48145 * C48371 * C48306)))) /
        C47933;
    const double C140 = (4 * (2 * C48176 + C48145 * C48210 + C48195 * be) +
                         C48145 * (3 * C48210 + C48145 * C48263 + C48247 * be) +
                         (3 * C48195 + C48145 * C48247) * be) /
                        C47928;
    const double C243 =
        (C48339 * (3 * C48210 + C48145 * C48263 + C48247 * be)) / C47928;
    const double C351 =
        (C48371 * (3 * C48210 + C48145 * C48263 + C48247 * be)) / C47928;
    const double C532 =
        (2 * C48176 + C48145 * C48210 + C48195 * be + C48263 * C48404) / C47928;
    const double C634 = (C48371 * C48339 * C48263) / C47928;
    const double C885 =
        (2 * C48176 + C48145 * C48210 + C48195 * be + C48263 * C48437) / C47928;
    const double C48329 = C48292 + C48326;
    const double C48333 = C48145 * C48331;
    const double C1173 =
        (2 * C48339 * C48264 + C48339 * (C48264 + C48331 * C48404)) / C47928;
    const double C1419 = (C48371 * (C48264 + C48331 * C48404)) / C47928;
    const double C2603 = (C48339 * C48264 + C48339 * C48331 * C48437) / C47928;
    const double C2762 =
        (2 * C48371 * C48264 + C48371 * (C48264 + C48331 * C48437)) / C47928;
    const double C48332 = C48145 * C48330;
    const double C540 =
        (3 * (C48408 + ae * (C48202 + C48246 * C48404) +
              be * (C48203 + C48248 * C48404) + C48145 * C48420) +
         ae * (C48263 + C48330 * C48404) + be * (C48264 + C48331 * C48404) +
         C48145 *
             (2 * C48420 + ae * (C48256 + C48321 * C48404) +
              be * (C48257 + C48322 * C48404) +
              C48145 * (C48415 + ae * (C48246 + C48307 * C48404) +
                        be * (C48248 + C48309 * C48404) +
                        C48145 * (ae * (C48234 + C48295 * C48404) +
                                  be * (C48237 + C48298 * C48404) +
                                  C48145 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48404))))) /
        C47933;
    const double C642 =
        (3 * (C48425 + ae * C48371 * C48354 + be * C48371 * C48355 +
              C48145 * C48434) +
         ae * C48371 * C48339 * C48330 + be * C48371 * C48339 * C48331 +
         C48145 *
             (2 * C48434 + ae * C48371 * C48339 * C48321 +
              be * C48371 * C48339 * C48322 +
              C48145 * (C48429 + ae * C48371 * C48339 * C48307 +
                        be * C48371 * C48339 * C48309 +
                        C48145 * (ae * C48371 * C48339 * C48295 +
                                  be * C48371 * C48339 * C48298 +
                                  C48145 * C48371 * C48339 *
                                      (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                      C47931)))) /
        C47933;
    const double C893 =
        (3 * (C48441 + ae * (C48202 + C48246 * C48437) +
              be * (C48203 + C48248 * C48437) + C48145 * C48453) +
         ae * (C48263 + C48330 * C48437) + be * (C48264 + C48331 * C48437) +
         C48145 *
             (2 * C48453 + ae * (C48256 + C48321 * C48437) +
              be * (C48257 + C48322 * C48437) +
              C48145 * (C48448 + ae * (C48246 + C48307 * C48437) +
                        be * (C48248 + C48309 * C48437) +
                        C48145 * (ae * (C48234 + C48295 * C48437) +
                                  be * (C48237 + C48298 * C48437) +
                                  C48145 * (C48306 + (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47931 * C48437))))) /
        C47933;
    const double C1172 =
        (2 * C48339 * C48263 + C48339 * (C48263 + C48330 * C48404)) / C47928;
    const double C1418 = (C48371 * (C48263 + C48330 * C48404)) / C47928;
    const double C2602 = (C48339 * C48263 + C48339 * C48330 * C48437) / C47928;
    const double C2761 =
        (2 * C48371 * C48263 + C48371 * (C48263 + C48330 * C48437)) / C47928;
    const double C47979 = C47976 - C47971;
    const double C7828 = C47976 + (C47962 * ae) / C47928;
    const double C47978 = C47975 + C49148;
    const double C48011 = C48008 * be;
    const double C48010 = C48007 * ae;
    const double C1011 = (-(be * C47988) / C47933) / C47934 -
                         ((2 * ((-C47936) / C47934 - (C47961 * be) / C47928) -
                           (C47926 * C48007 * be) / C47928) *
                          be) /
                             C47928 -
                         C48002;
    const double C1013 =
        (-(C48007 * be) / C47928) / C47934 -
        ((2 * ((-C47948 / C47928) / C47934 - (0 * be) / C47928) - C48005) *
         be) /
            C47928;
    const double C23763 = -(C48007 * be) / C47928;
    const double C1247 = C1235 - C1213;
    const double C1244 = C1232 - C1201;
    const double C1241 = C1229 - C1189;
    const double C1711 = C1707 - C1696;
    const double C1908 = C1902 - C1889;
    const double C1905 = C1899 - C1877;
    const double C2836 = C2824 - C2802;
    const double C2833 = C2821 - C2790;
    const double C2830 = C2818 - C2778;
    const double C3283 = C3280 - C3276;
    const double C3718 = C3715 - C3704;
    const double C4009 = C4001 - C3980;
    const double C5327 = C5319 - C5298;
    const double C8047 = C8035 - C8013;
    const double C8044 = C8032 - C8001;
    const double C8041 = C8029 - C7989;
    const double C8483 = C8479 - C8468;
    const double C8668 = C8662 - C8649;
    const double C8665 = C8659 - C8637;
    const double C15763 = C15751 - C15729;
    const double C15760 = C15748 - C15717;
    const double C15757 = C15745 - C15705;
    const double C16198 = C16195 - C16191;
    const double C16621 = C16618 - C16607;
    const double C9286 = C9278 - C9269;
    const double C9285 = C9277 - C9265;
    const double C9284 = C9276 - C9261;
    const double C9283 = C9275 - C9257;
    const double C9282 = C9274 - C9253;
    const double C9281 = C9273 - C9249;
    const double C9280 = C9272 - C9245;
    const double C9279 = C9271 - C9241;
    const double C9546 = C9545 - C9543;
    const double C9658 = C9654 - C9649;
    const double C9657 = C9653 - C9645;
    const double C9656 = C9652 - C9641;
    const double C9655 = C9651 - C9637;
    const double C10202 = C10196 - C10189;
    const double C10201 = C10195 - C10185;
    const double C10200 = C10194 - C10180;
    const double C10199 = C10193 - C10176;
    const double C10198 = C10192 - C10171;
    const double C10197 = C10191 - C10165;
    const double C10392 = C10388 - C10383;
    const double C10391 = C10387 - C10379;
    const double C10390 = C10386 - C10375;
    const double C10389 = C10385 - C10371;
    const double C10662 = C10661 - C10656;
    const double C10830 = C10828 - C10823;
    const double C10829 = C10827 - C10817;
    const double C11250 = C11249 - C11247;
    const double C14431 = C14430 - C14428;
    const double C18116 = C18113 - C18109;
    const double C18115 = C18112 - C18105;
    const double C18114 = C18111 - C18101;
    const double C18355 = C18354 - C18352;
    const double C18592 = C18591 - C18589;
    const double C21602 = C21601 - C21599;
    const double C11561 = C11549 - C11536;
    const double C11559 = C11547 - C11528;
    const double C11557 = C11545 - C11520;
    const double C11555 = C11543 - C11512;
    const double C11553 = C11541 - C11504;
    const double C11551 = C11539 - C11496;
    const double C11946 = C11944 - C11936;
    const double C12114 = C12108 - C12098;
    const double C12112 = C12106 - C12090;
    const double C12110 = C12104 - C12082;
    const double C12843 = C12839 - C12834;
    const double C12841 = C12837 - C12826;
    const double C13065 = C13061 - C13056;
    const double C13063 = C13059 - C13048;
    const double C13633 = C13629 - C13620;
    const double C13631 = C13627 - C13611;
    const double C14183 = C14181 - C14175;
    const double C18945 = C18943 - C18940;
    const double C19153 = C19151 - C19148;
    const double C19702 = C19700 - C19693;
    const double C20251 = C20249 - C20243;
    const double C20628 = C20626 - C20623;
    const double C21358 = C21356 - C21350;
    const double C22744 = C22736 - C22715;
    const double C31737 = C31729 - C31708;
    const double C23968 = C23956 - C23943;
    const double C23966 = C23954 - C23935;
    const double C23964 = C23952 - C23927;
    const double C23962 = C23950 - C23919;
    const double C23960 = C23948 - C23911;
    const double C23958 = C23946 - C23903;
    const double C24353 = C24351 - C24343;
    const double C24521 = C24515 - C24505;
    const double C24519 = C24513 - C24497;
    const double C24517 = C24511 - C24489;
    const double C25262 = C25256 - C25249;
    const double C25260 = C25254 - C25241;
    const double C25258 = C25252 - C25233;
    const double C25510 = C25502 - C25493;
    const double C25508 = C25500 - C25485;
    const double C25506 = C25498 - C25477;
    const double C25504 = C25496 - C25469;
    const double C25869 = C25867 - C25861;
    const double C26081 = C26079 - C26071;
    const double C26630 = C26628 - C26622;
    const double C30064 = C30062 - C30059;
    const double C34472 = C34470 - C34467;
    const double C35202 = C35200 - C35194;
    const double C26970 = C26958 - C26936;
    const double C26967 = C26955 - C26924;
    const double C26964 = C26952 - C26912;
    const double C27406 = C27402 - C27391;
    const double C27591 = C27585 - C27572;
    const double C27588 = C27582 - C27560;
    const double C28592 = C28586 - C28579;
    const double C28589 = C28583 - C28567;
    const double C29152 = C29148 - C29136;
    const double C29707 = C29704 - C29694;
    const double C38055 = C38052 - C38041;
    const double C3996 = C3833 * C244;
    const double C22731 = C22568 * C244;
    const double C5314 = C3833 * C352;
    const double C31724 = C22568 * C352;
    const double C1225 = C1014 * C533;
    const double C4382 = C3833 * C533;
    const double C8025 = C7830 * C533;
    const double C23117 = C22568 * C533;
    const double C26948 = C48029 * C533;
    const double C4540 = C3833 * C635;
    const double C6434 = C1014 * C635;
    const double C23275 = C22568 * C635;
    const double C28352 = C48029 * C635;
    const double C40013 = C7830 * C635;
    const double C2814 = C1014 * C886;
    const double C6058 = C3833 * C886;
    const double C15741 = C7830 * C886;
    const double C32468 = C22568 * C886;
    const double C37223 = C48029 * C886;
    const double C3997 = C49169 * C255;
    const double C22732 = C49169 * C255;
    const double C5315 = C49169 * C363;
    const double C31725 = C49169 * C363;
    const double C3994 = C3833 * C243;
    const double C22729 = C22568 * C243;
    const double C5312 = C3833 * C351;
    const double C31722 = C22568 * C351;
    const double C1223 = C1014 * C532;
    const double C4380 = C3833 * C532;
    const double C8023 = C7830 * C532;
    const double C23115 = C22568 * C532;
    const double C26946 = C48029 * C532;
    const double C4538 = C3833 * C634;
    const double C6432 = C1014 * C634;
    const double C23273 = C22568 * C634;
    const double C28350 = C48029 * C634;
    const double C40011 = C7830 * C634;
    const double C2812 = C1014 * C885;
    const double C6056 = C3833 * C885;
    const double C15739 = C7830 * C885;
    const double C32466 = C22568 * C885;
    const double C37221 = C48029 * C885;
    const double C48335 = C48280 + C48333;
    const double C48334 = C48276 + C48332;
    const double C26944 = C47979 * C531;
    const double C26942 = C47979 * C530;
    const double C26932 = C47979 * C248;
    const double C26930 = C47979 * C247;
    const double C26920 = C47979 * C529;
    const double C26918 = C47979 * C528;
    const double C26908 = C47979 * C250;
    const double C26906 = C47979 * C249;
    const double C27395 = C47979 * C1169;
    const double C27393 = C47979 * C1168;
    const double C27576 = C47979 * C631;
    const double C27574 = C47979 * C630;
    const double C27564 = C47979 * C1415;
    const double C27562 = C47979 * C1414;
    const double C28348 = C47979 * C633;
    const double C28346 = C47979 * C632;
    const double C28575 = C47979 * C356;
    const double C28573 = C47979 * C355;
    const double C28563 = C47979 * C358;
    const double C28561 = C47979 * C357;
    const double C29140 = C47979 * C2327;
    const double C29138 = C47979 * C2326;
    const double C29698 = C47979 * C882;
    const double C29696 = C47979 * C881;
    const double C37219 = C47979 * C884;
    const double C37217 = C47979 * C883;
    const double C38045 = C47979 * C2758;
    const double C38043 = C47979 * C2757;
    const double C119 =
        (C47979 / C47934 + ((C47926 * C48029 + C26745) * ae) / C47928) /
            C47934 -
        ((C47926 * (C48029 / C47934 + (0 * ae) / C47928) + C49169) * be) /
            C47928;
    const double C3831 =
        C47979 / C47934 - ((C47926 * C48029 + C26745) * be) / C47928;
    const double C22566 =
        C47979 / C47934 + ((C47926 * C48029 + C26745) * ae) / C47928;
    const double C8021 = C7828 * C531;
    const double C8019 = C7828 * C530;
    const double C8009 = C7828 * C248;
    const double C8007 = C7828 * C247;
    const double C7997 = C7828 * C529;
    const double C7995 = C7828 * C528;
    const double C7985 = C7828 * C250;
    const double C7983 = C7828 * C249;
    const double C8472 = C7828 * C1169;
    const double C8470 = C7828 * C1168;
    const double C8653 = C7828 * C631;
    const double C8651 = C7828 * C630;
    const double C8641 = C7828 * C1415;
    const double C8639 = C7828 * C1414;
    const double C15737 = C7828 * C884;
    const double C15735 = C7828 * C883;
    const double C15725 = C7828 * C356;
    const double C15723 = C7828 * C355;
    const double C15713 = C7828 * C882;
    const double C15711 = C7828 * C881;
    const double C15701 = C7828 * C358;
    const double C15699 = C7828 * C357;
    const double C16187 = C7828 * C2327;
    const double C16185 = C7828 * C2326;
    const double C16611 = C7828 * C2758;
    const double C16609 = C7828 * C2757;
    const double C40009 = C7828 * C633;
    const double C40007 = C7828 * C632;
    const double C47980 = C47978 * be;
    const double C7826 = C47965 + (C47978 * ae) / C47928 + C47954;
    const double C48015 = C48011 / C47928;
    const double C48014 = C48010 / C47940;
    const double C48013 = C47926 * C48010;
    const double C11356 = C48010 / C47928;
    const double C1216 = C1011 * C522;
    const double C1204 = C1011 * C240;
    const double C1192 = C1011 * C521;
    const double C1180 = C1011 * C241;
    const double C1703 = C1011 * C1164;
    const double C1896 = C1011 * C623;
    const double C1884 = C1011 * C1410;
    const double C2805 = C1011 * C875;
    const double C2793 = C1011 * C348;
    const double C2781 = C1011 * C874;
    const double C2769 = C1011 * C349;
    const double C3267 = C1011 * C2318;
    const double C3711 = C1011 * C2753;
    const double C6425 = C1011 * C624;
    const double C1220 = C1013 * C523;
    const double C1208 = C1013 * C239;
    const double C1196 = C1013 * C522;
    const double C1184 = C1013 * C240;
    const double C1699 = C1013 * C1163;
    const double C1892 = C1013 * C624;
    const double C1880 = C1013 * C1409;
    const double C2809 = C1013 * C876;
    const double C2797 = C1013 * C347;
    const double C2785 = C1013 * C875;
    const double C2773 = C1013 * C348;
    const double C3271 = C1013 * C2319;
    const double C3707 = C1013 * C2752;
    const double C6429 = C1013 * C625;
    const double C23938 = C23763 * C1163;
    const double C23930 = C23763 * C522;
    const double C23922 = C23763 * C240;
    const double C23914 = C23763 * C1164;
    const double C23906 = C23763 * C521;
    const double C23898 = C23763 * C241;
    const double C24346 = C23763 * C1680;
    const double C24508 = C23763 * C623;
    const double C24500 = C23763 * C1410;
    const double C24492 = C23763 * C1862;
    const double C25244 = C23763 * C2319;
    const double C25236 = C23763 * C624;
    const double C25228 = C23763 * C2318;
    const double C25488 = C23763 * C875;
    const double C25480 = C23763 * C348;
    const double C25472 = C23763 * C874;
    const double C25464 = C23763 * C349;
    const double C25864 = C23763 * C2321;
    const double C26074 = C23763 * C3253;
    const double C26625 = C23763 * C2753;
    const double C30054 = C23763 * C1409;
    const double C34462 = C23763 * C2752;
    const double C35197 = C23763 * C3688;
    const double C1259 = C1247 + C1214;
    const double C1256 = C1244 + C1202;
    const double C1253 = C1241 + C1190;
    const double C1714 = C1711 + C1697;
    const double C1914 = C1908 + C1890;
    const double C1911 = C1905 + C1878;
    const double C2848 = C2836 + C2803;
    const double C2845 = C2833 + C2791;
    const double C2842 = C2830 + C2779;
    const double C3286 = C3283 + C3277;
    const double C3721 = C3718 + C3705;
    const double C4017 = C4009 + C3981;
    const double C5335 = C5327 + C5299;
    const double C8059 = C8047 + C8014;
    const double C8056 = C8044 + C8002;
    const double C8053 = C8041 + C7990;
    const double C8486 = C8483 + C8469;
    const double C8674 = C8668 + C8650;
    const double C8671 = C8665 + C8638;
    const double C15775 = C15763 + C15730;
    const double C15772 = C15760 + C15718;
    const double C15769 = C15757 + C15706;
    const double C16201 = C16198 + C16192;
    const double C16624 = C16621 + C16608;
    const double C9294 = C9286 + C9270;
    const double C9293 = C9285 + C9266;
    const double C9292 = C9284 + C9262;
    const double C9291 = C9283 + C9258;
    const double C9290 = C9282 + C9254;
    const double C9289 = C9281 + C9250;
    const double C9288 = C9280 + C9246;
    const double C9287 = C9279 + C9242;
    const double C9547 = C9546 + C9544;
    const double C9662 = C9658 + C9650;
    const double C9661 = C9657 + C9646;
    const double C9660 = C9656 + C9642;
    const double C9659 = C9655 + C9638;
    const double C10208 = C10202 + C10190;
    const double C10207 = C10201 + C10186;
    const double C10206 = C10200 + C10181;
    const double C10205 = C10199 + C10177;
    const double C10204 = C10198 + C10172;
    const double C10203 = C10197 + C10166;
    const double C10396 = C10392 + C10384;
    const double C10395 = C10391 + C10380;
    const double C10394 = C10390 + C10376;
    const double C10393 = C10389 + C10372;
    const double C10663 = C10662 + C10657;
    const double C10832 = C10830 + C10824;
    const double C10831 = C10829 + C10818;
    const double C11251 = C11250 + C11248;
    const double C14432 = C14431 + C14429;
    const double C18119 = C18116 + C18110;
    const double C18118 = C18115 + C18106;
    const double C18117 = C18114 + C18102;
    const double C18356 = C18355 + C18353;
    const double C18593 = C18592 + C18590;
    const double C21603 = C21602 + C21600;
    const double C11573 = C11561 + C11537;
    const double C11571 = C11559 + C11529;
    const double C11569 = C11557 + C11521;
    const double C11567 = C11555 + C11513;
    const double C11565 = C11553 + C11505;
    const double C11563 = C11551 + C11497;
    const double C11948 = C11946 + C11937;
    const double C12120 = C12114 + C12099;
    const double C12118 = C12112 + C12091;
    const double C12116 = C12110 + C12083;
    const double C12847 = C12843 + C12835;
    const double C12845 = C12841 + C12827;
    const double C13069 = C13065 + C13057;
    const double C13067 = C13063 + C13049;
    const double C13637 = C13633 + C13621;
    const double C13635 = C13631 + C13612;
    const double C14185 = C14183 + C14176;
    const double C18947 = C18945 + C18941;
    const double C19155 = C19153 + C19149;
    const double C19704 = C19702 + C19694;
    const double C20253 = C20251 + C20244;
    const double C20630 = C20628 + C20624;
    const double C21360 = C21358 + C21351;
    const double C22752 = C22744 + C22716;
    const double C31745 = C31737 + C31709;
    const double C23980 = C23968 + C23944;
    const double C23978 = C23966 + C23936;
    const double C23976 = C23964 + C23928;
    const double C23974 = C23962 + C23920;
    const double C23972 = C23960 + C23912;
    const double C23970 = C23958 + C23904;
    const double C24355 = C24353 + C24344;
    const double C24527 = C24521 + C24506;
    const double C24525 = C24519 + C24498;
    const double C24523 = C24517 + C24490;
    const double C25268 = C25262 + C25250;
    const double C25266 = C25260 + C25242;
    const double C25264 = C25258 + C25234;
    const double C25518 = C25510 + C25494;
    const double C25516 = C25508 + C25486;
    const double C25514 = C25506 + C25478;
    const double C25512 = C25504 + C25470;
    const double C25871 = C25869 + C25862;
    const double C26083 = C26081 + C26072;
    const double C26632 = C26630 + C26623;
    const double C30066 = C30064 + C30060;
    const double C34474 = C34472 + C34468;
    const double C35204 = C35202 + C35195;
    const double C26982 = C26970 + C26937;
    const double C26979 = C26967 + C26925;
    const double C26976 = C26964 + C26913;
    const double C27409 = C27406 + C27392;
    const double C27597 = C27591 + C27573;
    const double C27594 = C27588 + C27561;
    const double C28598 = C28592 + C28580;
    const double C28595 = C28589 + C28568;
    const double C29155 = C29152 + C29137;
    const double C29710 = C29707 + C29695;
    const double C38058 = C38055 + C38042;
    const double C4005 = C3994 - C3995;
    const double C22740 = C22729 - C22730;
    const double C5323 = C5312 - C5313;
    const double C31733 = C31722 - C31723;
    const double C1238 = C1223 - C1224;
    const double C4396 = C4380 - C4381;
    const double C8038 = C8023 - C8024;
    const double C23131 = C23115 - C23116;
    const double C26961 = C26946 - C26947;
    const double C4554 = C4538 - C4539;
    const double C6438 = C6432 - C6433;
    const double C23289 = C23273 - C23274;
    const double C28356 = C28350 - C28351;
    const double C40017 = C40011 - C40012;
    const double C2827 = C2812 - C2813;
    const double C6072 = C6056 - C6057;
    const double C15754 = C15739 - C15740;
    const double C32482 = C32466 - C32467;
    const double C37227 = C37221 - C37222;
    const double C48337 = C48335 + C48315;
    const double C48336 = C48334 + C48312;
    const double C3992 = C3831 * C246;
    const double C3990 = C3831 * C245;
    const double C3976 = C3831 * C248;
    const double C3974 = C3831 * C247;
    const double C4386 = C3831 * C531;
    const double C4384 = C3831 * C530;
    const double C4544 = C3831 * C633;
    const double C4542 = C3831 * C632;
    const double C5310 = C3831 * C354;
    const double C5308 = C3831 * C353;
    const double C5294 = C3831 * C356;
    const double C5292 = C3831 * C355;
    const double C6062 = C3831 * C884;
    const double C6060 = C3831 * C883;
    const double C22727 = C22566 * C246;
    const double C22725 = C22566 * C245;
    const double C22711 = C22566 * C248;
    const double C22709 = C22566 * C247;
    const double C23121 = C22566 * C531;
    const double C23119 = C22566 * C530;
    const double C23279 = C22566 * C633;
    const double C23277 = C22566 * C632;
    const double C31720 = C22566 * C354;
    const double C31718 = C22566 * C353;
    const double C31704 = C22566 * C356;
    const double C31702 = C22566 * C355;
    const double C32472 = C22566 * C884;
    const double C32470 = C22566 * C883;
    const double C47981 = C47980 / C47928;
    const double C8017 = C7826 * C529;
    const double C8015 = C7826 * C528;
    const double C8005 = C7826 * C250;
    const double C8003 = C7826 * C249;
    const double C7993 = C7826 * C527;
    const double C7991 = C7826 * C526;
    const double C7981 = C7826 * C252;
    const double C7979 = C7826 * C251;
    const double C8476 = C7826 * C1171;
    const double C8474 = C7826 * C1170;
    const double C8657 = C7826 * C629;
    const double C8655 = C7826 * C628;
    const double C8645 = C7826 * C1417;
    const double C8643 = C7826 * C1416;
    const double C15733 = C7826 * C882;
    const double C15731 = C7826 * C881;
    const double C15721 = C7826 * C358;
    const double C15719 = C7826 * C357;
    const double C15709 = C7826 * C880;
    const double C15707 = C7826 * C879;
    const double C15697 = C7826 * C360;
    const double C15695 = C7826 * C359;
    const double C16183 = C7826 * C2325;
    const double C16181 = C7826 * C2324;
    const double C16615 = C7826 * C2760;
    const double C16613 = C7826 * C2759;
    const double C40005 = C7826 * C631;
    const double C40003 = C7826 * C630;
    const double C48018 = C48014 - C48015;
    const double C7829 = C48014 + (C48008 * ae) / C47928;
    const double C48017 = C48013 / C47928;
    const double C11531 = C11356 * C1163;
    const double C11523 = C11356 * C522;
    const double C11515 = C11356 * C240;
    const double C11507 = C11356 * C1164;
    const double C11499 = C11356 * C521;
    const double C11491 = C11356 * C241;
    const double C11939 = C11356 * C1680;
    const double C12101 = C11356 * C623;
    const double C12093 = C11356 * C1410;
    const double C12085 = C11356 * C1862;
    const double C12829 = C11356 * C1409;
    const double C12821 = C11356 * C624;
    const double C13051 = C11356 * C348;
    const double C13043 = C11356 * C349;
    const double C13623 = C11356 * C2318;
    const double C13614 = C11356 * C2321;
    const double C14178 = C11356 * C874;
    const double C18935 = C11356 * C2319;
    const double C19143 = C11356 * C875;
    const double C19696 = C11356 * C3253;
    const double C20246 = C11356 * C2753;
    const double C20618 = C11356 * C2752;
    const double C21353 = C11356 * C3688;
    const double C1236 = C1215 - C1216;
    const double C1233 = C1203 - C1204;
    const double C1230 = C1191 - C1192;
    const double C1227 = C1179 - C1180;
    const double C1709 = C1702 - C1703;
    const double C1904 = C1895 - C1896;
    const double C1901 = C1883 - C1884;
    const double C2825 = C2804 - C2805;
    const double C2822 = C2792 - C2793;
    const double C2819 = C2780 - C2781;
    const double C2816 = C2768 - C2769;
    const double C3278 = C3266 - C3267;
    const double C3717 = C3710 - C3711;
    const double C6436 = C6424 - C6425;
    const double C1237 = C1219 - C1220;
    const double C1234 = C1207 - C1208;
    const double C1231 = C1195 - C1196;
    const double C1228 = C1183 - C1184;
    const double C1708 = C1698 - C1699;
    const double C1903 = C1891 - C1892;
    const double C1900 = C1879 - C1880;
    const double C2826 = C2808 - C2809;
    const double C2823 = C2796 - C2797;
    const double C2820 = C2784 - C2785;
    const double C2817 = C2772 - C2773;
    const double C3279 = C3270 - C3271;
    const double C3716 = C3706 - C3707;
    const double C6437 = C6428 - C6429;
    const double C23955 = C23937 - C23938;
    const double C23953 = C23929 - C23930;
    const double C23951 = C23921 - C23922;
    const double C23949 = C23913 - C23914;
    const double C23947 = C23905 - C23906;
    const double C23945 = C23897 - C23898;
    const double C24352 = C24345 - C24346;
    const double C24516 = C24507 - C24508;
    const double C24514 = C24499 - C24500;
    const double C24512 = C24491 - C24492;
    const double C25255 = C25243 - C25244;
    const double C25253 = C25235 - C25236;
    const double C25251 = C25227 - C25228;
    const double C25501 = C25487 - C25488;
    const double C25499 = C25479 - C25480;
    const double C25497 = C25471 - C25472;
    const double C25495 = C25463 - C25464;
    const double C25868 = C25863 - C25864;
    const double C26080 = C26073 - C26074;
    const double C26629 = C26624 - C26625;
    const double C30061 = C30053 - C30054;
    const double C34469 = C34461 - C34462;
    const double C35201 = C35196 - C35197;
    const double C9302 = C9294 * C48956;
    const double C9301 = C9293 * C48956;
    const double C14425 = C9293 * C49171;
    const double C41528 = C9293 * C31431;
    const double C9300 = C9292 * C48956;
    const double C10182 = C9292 * C49236;
    const double C14423 = C9292 * C49171;
    const double C16892 = C9292 * C15399;
    const double C41526 = C9292 * C31431;
    const double C46948 = C9292 * C49039;
    const double C9299 = C9291 * C48956;
    const double C10173 = C9291 * C49236;
    const double C14421 = C9291 * C49171;
    const double C16889 = C9291 * C15399;
    const double C21594 = C9291 * C20352;
    const double C41524 = C9291 * C31431;
    const double C42618 = C9291 * C49243;
    const double C46945 = C9291 * C49039;
    const double C9298 = C9290 * C48956;
    const double C14795 = C9290 * C49171;
    const double C41891 = C9290 * C31431;
    const double C9297 = C9289 * C48956;
    const double C10659 = C9289 * C49236;
    const double C14419 = C9289 * C49171;
    const double C17300 = C9289 * C15399;
    const double C41522 = C9289 * C31431;
    const double C47356 = C9289 * C49039;
    const double C9296 = C9288 * C48956;
    const double C10167 = C9288 * C49236;
    const double C14417 = C9288 * C49171;
    const double C16886 = C9288 * C15399;
    const double C21966 = C9288 * C20352;
    const double C41520 = C9288 * C31431;
    const double C42983 = C9288 * C49243;
    const double C46942 = C9288 * C49039;
    const double C9295 = C9287 * C48956;
    const double C10161 = C9287 * C49236;
    const double C14415 = C9287 * C49171;
    const double C16883 = C9287 * C15399;
    const double C21590 = C9287 * C20352;
    const double C41518 = C9287 * C31431;
    const double C42614 = C9287 * C49243;
    const double C46939 = C9287 * C49039;
    const double C9548 = C9547 * C48956;
    const double C9666 = C9662 * C48956;
    const double C10162 = C9662 * C49225;
    const double C10826 = C9662 * C49236;
    const double C14416 = C9662 * C49043;
    const double C14931 = C9662 * C49171;
    const double C16884 = C9662 * C15400;
    const double C17453 = C9662 * C15399;
    const double C21591 = C9662 * C20353;
    const double C22100 = C9662 * C20352;
    const double C41519 = C9662 * C49043;
    const double C42027 = C9662 * C31431;
    const double C42615 = C9662 * C49240;
    const double C43117 = C9662 * C49243;
    const double C46940 = C9662 * C49046;
    const double C47509 = C9662 * C49039;
    const double C9665 = C9661 * C48956;
    const double C10168 = C9661 * C49225;
    const double C10820 = C9661 * C49236;
    const double C14418 = C9661 * C49043;
    const double C14929 = C9661 * C49171;
    const double C16887 = C9661 * C15400;
    const double C17450 = C9661 * C15399;
    const double C21965 = C9661 * C20353;
    const double C41521 = C9661 * C49043;
    const double C42025 = C9661 * C31431;
    const double C42982 = C9661 * C49240;
    const double C46943 = C9661 * C49046;
    const double C47506 = C9661 * C49039;
    const double C9664 = C9660 * C48956;
    const double C10658 = C9660 * C49225;
    const double C14420 = C9660 * C49043;
    const double C14927 = C9660 * C49171;
    const double C17299 = C9660 * C15400;
    const double C41523 = C9660 * C49043;
    const double C42023 = C9660 * C31431;
    const double C47355 = C9660 * C49046;
    const double C9663 = C9659 * C48956;
    const double C14794 = C9659 * C49043;
    const double C41890 = C9659 * C49043;
    const double C10214 = C10208 * C49206;
    const double C16894 = C10208 * C49206;
    const double C46950 = C10208 * C36919;
    const double C10213 = C10207 * C49225;
    const double C14424 = C10207 * C49043;
    const double C16893 = C10207 * C15400;
    const double C41527 = C10207 * C49043;
    const double C46949 = C10207 * C49046;
    const double C10212 = C10206 * C49206;
    const double C16891 = C10206 * C49206;
    const double C21596 = C10206 * C20354;
    const double C42620 = C10206 * C49231;
    const double C46947 = C10206 * C36919;
    const double C10211 = C10205 * C49225;
    const double C14422 = C10205 * C49043;
    const double C16890 = C10205 * C15400;
    const double C21595 = C10205 * C20353;
    const double C41525 = C10205 * C49043;
    const double C42619 = C10205 * C49240;
    const double C46946 = C10205 * C49046;
    const double C10210 = C10204 * C49206;
    const double C10819 = C10204 * C49225;
    const double C14928 = C10204 * C49043;
    const double C16888 = C10204 * C49206;
    const double C17449 = C10204 * C15400;
    const double C21964 = C10204 * C20354;
    const double C42024 = C10204 * C49043;
    const double C42981 = C10204 * C49231;
    const double C46944 = C10204 * C36919;
    const double C47505 = C10204 * C49046;
    const double C10209 = C10203 * C49206;
    const double C10825 = C10203 * C49225;
    const double C14930 = C10203 * C49043;
    const double C16885 = C10203 * C49206;
    const double C17452 = C10203 * C15400;
    const double C21592 = C10203 * C20354;
    const double C22099 = C10203 * C20353;
    const double C42026 = C10203 * C49043;
    const double C42616 = C10203 * C49231;
    const double C43116 = C10203 * C49240;
    const double C46941 = C10203 * C36919;
    const double C47508 = C10203 * C49046;
    const double C10664 = C10663 * C49206;
    const double C14926 = C10663 * C49043;
    const double C17298 = C10663 * C49206;
    const double C42022 = C10663 * C49043;
    const double C47354 = C10663 * C36919;
    const double C10834 = C10832 * C49206;
    const double C17451 = C10832 * C49206;
    const double C21593 = C10832 * C49185;
    const double C22098 = C10832 * C20354;
    const double C42617 = C10832 * C49185;
    const double C43115 = C10832 * C49231;
    const double C47507 = C10832 * C36919;
    const double C10833 = C10831 * C49206;
    const double C17448 = C10831 * C49206;
    const double C21963 = C10831 * C49185;
    const double C42980 = C10831 * C49185;
    const double C47504 = C10831 * C36919;
    const double C14433 = C14432 * C49043;
    const double C41529 = C14432 * C49043;
    const double C22097 = C18356 * C49185;
    const double C43114 = C18356 * C49185;
    const double C21604 = C21603 * C49185;
    const double C42621 = C21603 * C49185;
    const double C4013 = C4005 - C3996;
    const double C22748 = C22740 - C22731;
    const double C5331 = C5323 - C5314;
    const double C31741 = C31733 - C31724;
    const double C1250 = C1238 - C1225;
    const double C4400 = C4396 - C4382;
    const double C8050 = C8038 - C8025;
    const double C23135 = C23131 - C23117;
    const double C26973 = C26961 - C26948;
    const double C4558 = C4554 - C4540;
    const double C6441 = C6438 - C6434;
    const double C23293 = C23289 - C23275;
    const double C28359 = C28356 - C28352;
    const double C40020 = C40017 - C40013;
    const double C2839 = C2827 - C2814;
    const double C6076 = C6072 - C6058;
    const double C15766 = C15754 - C15741;
    const double C32486 = C32482 - C32468;
    const double C37230 = C37227 - C37223;
    const double C143 = (5 * (3 * C48211 + C48145 * C48264 + C48247 * ae) +
                         C48145 * (4 * C48264 + C48145 * C48337 + C48318 * ae) +
                         (4 * C48247 + C48145 * C48318) * ae) /
                        C47928;
    const double C254 =
        (C48339 * (4 * C48264 + C48145 * C48337 + C48318 * ae)) / C47928;
    const double C362 =
        (C48371 * (4 * C48264 + C48145 * C48337 + C48318 * ae)) / C47928;
    const double C535 =
        (3 * C48211 + C48145 * C48264 + C48247 * ae + C48337 * C48404) / C47928;
    const double C637 = (C48371 * C48339 * C48337) / C47928;
    const double C888 =
        (3 * C48211 + C48145 * C48264 + C48247 * ae + C48337 * C48437) / C47928;
    const double C150 =
        (5 * (3 * C48258 + ae * C48263 + be * C48264 + C48145 * C48329) +
         ae * (4 * C48263 + C48145 * C48336 + C48318 * be) +
         be * (4 * C48264 + C48145 * C48337 + C48318 * ae) +
         C48145 *
             (4 * C48329 + ae * C48336 + be * C48337 +
              C48145 *
                  (3 * C48323 + ae * C48330 + be * C48331 +
                   C48145 * (2 * C48316 + ae * C48321 + be * C48322 +
                             C48145 * (C48306 + ae * C48307 + be * C48309 +
                                       C48145 * (ae * C48295 + be * C48298 +
                                                 C48145 *
                                                     (C48274 * C48275 +
                                                      C48149 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47931)))))) /
        C47933;
    const double C260 =
        (4 * (2 * C48347 + ae * C48339 * C48256 + be * C48339 * C48257 +
              C48145 * C48369) +
         ae * C48339 * C48336 + be * C48339 * C48337 +
         C48145 *
             (3 * C48369 + ae * C48339 * C48330 + be * C48339 * C48331 +
              C48145 *
                  (2 * C48367 + ae * C48339 * C48321 + be * C48339 * C48322 +
                   C48145 *
                       (C48358 + ae * C48339 * C48307 + be * C48339 * C48309 +
                        C48145 * (ae * C48339 * C48295 + be * C48339 * C48298 +
                                  C48145 * C48339 *
                                      (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                      C47931))))) /
        C47933;
    const double C368 =
        (4 * (2 * C48379 + ae * C48371 * C48256 + be * C48371 * C48257 +
              C48145 * C48401) +
         ae * C48371 * C48336 + be * C48371 * C48337 +
         C48145 *
             (3 * C48401 + ae * C48371 * C48330 + be * C48371 * C48331 +
              C48145 *
                  (2 * C48399 + ae * C48371 * C48321 + be * C48371 * C48322 +
                   C48145 *
                       (C48390 + ae * C48371 * C48307 + be * C48371 * C48309 +
                        C48145 * (ae * C48371 * C48295 + be * C48371 * C48298 +
                                  C48145 * C48371 *
                                      (C48274 * C48275 +
                                       C48149 * bs[8] * std::pow(C48143, 8)) *
                                      C47931))))) /
        C47933;
    const double C142 = (5 * (3 * C48210 + C48145 * C48263 + C48247 * be) +
                         C48145 * (4 * C48263 + C48145 * C48336 + C48318 * be) +
                         (4 * C48247 + C48145 * C48318) * be) /
                        C47928;
    const double C253 =
        (C48339 * (4 * C48263 + C48145 * C48336 + C48318 * be)) / C47928;
    const double C361 =
        (C48371 * (4 * C48263 + C48145 * C48336 + C48318 * be)) / C47928;
    const double C534 =
        (3 * C48210 + C48145 * C48263 + C48247 * be + C48336 * C48404) / C47928;
    const double C636 = (C48371 * C48339 * C48336) / C47928;
    const double C887 =
        (3 * C48210 + C48145 * C48263 + C48247 * be + C48336 * C48437) / C47928;
    const double C47982 = C47965 - C47981;
    const double C26943 = C48018 * C523;
    const double C26931 = C48018 * C239;
    const double C26919 = C48018 * C522;
    const double C26907 = C48018 * C240;
    const double C27394 = C48018 * C1163;
    const double C27575 = C48018 * C624;
    const double C27563 = C48018 * C1409;
    const double C28347 = C48018 * C625;
    const double C28574 = C48018 * C347;
    const double C28562 = C48018 * C348;
    const double C29139 = C48018 * C2319;
    const double C29697 = C48018 * C875;
    const double C37218 = C48018 * C876;
    const double C38044 = C48018 * C2752;
    const double C120 =
        (C48018 / C47934 + ((C48033 - C48001 / C48034) * ae) / C47928) /
            C47934 -
        ((2 * (C48029 / C47934 + (0 * ae) / C47928) -
          C48001 / (C47928 * 4 * C47986)) *
         be) /
            C47928;
    const double C3832 =
        C48018 / C47934 - ((C48033 - C48001 / C48034) * be) / C47928;
    const double C22567 =
        C48018 / C47934 + ((C48033 - C48001 / C48034) * ae) / C47928;
    const double C8020 = C7829 * C523;
    const double C8008 = C7829 * C239;
    const double C7996 = C7829 * C522;
    const double C7984 = C7829 * C240;
    const double C8471 = C7829 * C1163;
    const double C8652 = C7829 * C624;
    const double C8640 = C7829 * C1409;
    const double C15736 = C7829 * C876;
    const double C15724 = C7829 * C347;
    const double C15712 = C7829 * C875;
    const double C15700 = C7829 * C348;
    const double C16186 = C7829 * C2319;
    const double C16610 = C7829 * C2752;
    const double C40008 = C7829 * C625;
    const double C48019 = C48017 + C47992;
    const double C11548 = C11530 - C11531;
    const double C11546 = C11522 - C11523;
    const double C11544 = C11514 - C11515;
    const double C11542 = C11506 - C11507;
    const double C11540 = C11498 - C11499;
    const double C11538 = C11490 - C11491;
    const double C11945 = C11938 - C11939;
    const double C12109 = C12100 - C12101;
    const double C12107 = C12092 - C12093;
    const double C12105 = C12084 - C12085;
    const double C12838 = C12828 - C12829;
    const double C12836 = C12820 - C12821;
    const double C13060 = C13050 - C13051;
    const double C13058 = C13042 - C13043;
    const double C13630 = C13622 - C13623;
    const double C13628 = C13613 - C13614;
    const double C14182 = C14177 - C14178;
    const double C18942 = C18934 - C18935;
    const double C19150 = C19142 - C19143;
    const double C19701 = C19695 - C19696;
    const double C20250 = C20245 - C20246;
    const double C20625 = C20617 - C20618;
    const double C21357 = C21352 - C21353;
    const double C1248 = C1236 - C1217;
    const double C1245 = C1233 - C1205;
    const double C1242 = C1230 - C1193;
    const double C1239 = C1227 - C1181;
    const double C1713 = C1709 - C1704;
    const double C1910 = C1904 - C1897;
    const double C1907 = C1901 - C1885;
    const double C2837 = C2825 - C2806;
    const double C2834 = C2822 - C2794;
    const double C2831 = C2819 - C2782;
    const double C2828 = C2816 - C2770;
    const double C3281 = C3278 - C3268;
    const double C3720 = C3717 - C3712;
    const double C6439 = C6436 - C6426;
    const double C1249 = C1237 - C1221;
    const double C1246 = C1234 - C1209;
    const double C1243 = C1231 - C1197;
    const double C1240 = C1228 - C1185;
    const double C1712 = C1708 - C1700;
    const double C1909 = C1903 - C1893;
    const double C1906 = C1900 - C1881;
    const double C2838 = C2826 - C2810;
    const double C2835 = C2823 - C2798;
    const double C2832 = C2820 - C2786;
    const double C2829 = C2817 - C2774;
    const double C3282 = C3279 - C3272;
    const double C3719 = C3716 - C3708;
    const double C6440 = C6437 - C6430;
    const double C23967 = C23955 - C23939;
    const double C23965 = C23953 - C23931;
    const double C23963 = C23951 - C23923;
    const double C23961 = C23949 - C23915;
    const double C23959 = C23947 - C23907;
    const double C23957 = C23945 - C23899;
    const double C24354 = C24352 - C24347;
    const double C24522 = C24516 - C24509;
    const double C24520 = C24514 - C24501;
    const double C24518 = C24512 - C24493;
    const double C25261 = C25255 - C25245;
    const double C25259 = C25253 - C25237;
    const double C25257 = C25251 - C25229;
    const double C25509 = C25501 - C25489;
    const double C25507 = C25499 - C25481;
    const double C25505 = C25497 - C25473;
    const double C25503 = C25495 - C25465;
    const double C25870 = C25868 - C25865;
    const double C26082 = C26080 - C26075;
    const double C26631 = C26629 - C26626;
    const double C30063 = C30061 - C30055;
    const double C34471 = C34469 - C34463;
    const double C35203 = C35201 - C35198;
    const double C10653 = C10167 + C10168;
    const double C14792 = C14417 + C14418;
    const double C17297 = C16886 + C16887;
    const double C41888 = C41520 + C41521;
    const double C47353 = C46942 + C46943;
    const double C14793 = C14419 + C14420;
    const double C41889 = C41522 + C41523;
    const double C4021 = C4013 + C3997;
    const double C22756 = C22748 + C22732;
    const double C5339 = C5331 + C5315;
    const double C31749 = C31741 + C31725;
    const double C1262 = C1250 + C1226;
    const double C4404 = C4400 + C4383;
    const double C8062 = C8050 + C8026;
    const double C23139 = C23135 + C23118;
    const double C26985 = C26973 + C26949;
    const double C4562 = C4558 + C4541;
    const double C6444 = C6441 + C6435;
    const double C23297 = C23293 + C23276;
    const double C28362 = C28359 + C28353;
    const double C40023 = C40020 + C40014;
    const double C2851 = C2839 + C2815;
    const double C6080 = C6076 + C6059;
    const double C15778 = C15766 + C15742;
    const double C32490 = C32486 + C32469;
    const double C37233 = C37230 + C37224;
    const double C47983 = C47982 + C47954;
    const double C26960 = C26942 - C26943;
    const double C26957 = C26930 - C26931;
    const double C26954 = C26918 - C26919;
    const double C26951 = C26906 - C26907;
    const double C27403 = C27393 - C27394;
    const double C27586 = C27574 - C27575;
    const double C27583 = C27562 - C27563;
    const double C28355 = C28346 - C28347;
    const double C28585 = C28573 - C28574;
    const double C28582 = C28561 - C28562;
    const double C29149 = C29138 - C29139;
    const double C29705 = C29696 - C29697;
    const double C37226 = C37217 - C37218;
    const double C38053 = C38043 - C38044;
    const double C3991 = C3832 * C238;
    const double C3975 = C3832 * C239;
    const double C4385 = C3832 * C523;
    const double C4543 = C3832 * C625;
    const double C5309 = C3832 * C346;
    const double C5293 = C3832 * C347;
    const double C6061 = C3832 * C876;
    const double C22726 = C22567 * C238;
    const double C22710 = C22567 * C239;
    const double C23120 = C22567 * C523;
    const double C23278 = C22567 * C625;
    const double C31719 = C22567 * C346;
    const double C31703 = C22567 * C347;
    const double C32471 = C22567 * C876;
    const double C8037 = C8019 - C8020;
    const double C8034 = C8007 - C8008;
    const double C8031 = C7995 - C7996;
    const double C8028 = C7983 - C7984;
    const double C8480 = C8470 - C8471;
    const double C8663 = C8651 - C8652;
    const double C8660 = C8639 - C8640;
    const double C15753 = C15735 - C15736;
    const double C15750 = C15723 - C15724;
    const double C15747 = C15711 - C15712;
    const double C15744 = C15699 - C15700;
    const double C16194 = C16185 - C16186;
    const double C16619 = C16609 - C16610;
    const double C40016 = C40007 - C40008;
    const double C48020 = C48019 * be;
    const double C7827 = C48000 + (C48019 * ae) / C47928 - C48002;
    const double C11560 = C11548 - C11532;
    const double C11558 = C11546 - C11524;
    const double C11556 = C11544 - C11516;
    const double C11554 = C11542 - C11508;
    const double C11552 = C11540 - C11500;
    const double C11550 = C11538 - C11492;
    const double C11947 = C11945 - C11940;
    const double C12115 = C12109 - C12102;
    const double C12113 = C12107 - C12094;
    const double C12111 = C12105 - C12086;
    const double C12842 = C12838 - C12830;
    const double C12840 = C12836 - C12822;
    const double C13064 = C13060 - C13052;
    const double C13062 = C13058 - C13044;
    const double C13634 = C13630 - C13624;
    const double C13632 = C13628 - C13615;
    const double C14184 = C14182 - C14179;
    const double C18944 = C18942 - C18936;
    const double C19152 = C19150 - C19144;
    const double C19703 = C19701 - C19697;
    const double C20252 = C20250 - C20247;
    const double C20627 = C20625 - C20619;
    const double C21359 = C21357 - C21354;
    const double C1260 = C1248 + C1218;
    const double C1257 = C1245 + C1206;
    const double C1254 = C1242 + C1194;
    const double C1251 = C1239 + C1182;
    const double C1716 = C1713 + C1705;
    const double C1916 = C1910 + C1898;
    const double C1913 = C1907 + C1886;
    const double C2849 = C2837 + C2807;
    const double C2846 = C2834 + C2795;
    const double C2843 = C2831 + C2783;
    const double C2840 = C2828 + C2771;
    const double C3284 = C3281 + C3269;
    const double C3723 = C3720 + C3713;
    const double C6442 = C6439 + C6427;
    const double C1261 = C1249 + C1222;
    const double C1258 = C1246 + C1210;
    const double C1255 = C1243 + C1198;
    const double C1252 = C1240 + C1186;
    const double C1715 = C1712 + C1701;
    const double C1915 = C1909 + C1894;
    const double C1912 = C1906 + C1882;
    const double C2850 = C2838 + C2811;
    const double C2847 = C2835 + C2799;
    const double C2844 = C2832 + C2787;
    const double C2841 = C2829 + C2775;
    const double C3285 = C3282 + C3273;
    const double C3722 = C3719 + C3709;
    const double C6443 = C6440 + C6431;
    const double C23979 = C23967 + C23940;
    const double C23977 = C23965 + C23932;
    const double C23975 = C23963 + C23924;
    const double C23973 = C23961 + C23916;
    const double C23971 = C23959 + C23908;
    const double C23969 = C23957 + C23900;
    const double C24356 = C24354 + C24348;
    const double C24528 = C24522 + C24510;
    const double C24526 = C24520 + C24502;
    const double C24524 = C24518 + C24494;
    const double C25267 = C25261 + C25246;
    const double C25265 = C25259 + C25238;
    const double C25263 = C25257 + C25230;
    const double C25517 = C25509 + C25490;
    const double C25515 = C25507 + C25482;
    const double C25513 = C25505 + C25474;
    const double C25511 = C25503 + C25466;
    const double C25872 = C25870 + C25866;
    const double C26084 = C26082 + C26076;
    const double C26633 = C26631 + C26627;
    const double C30065 = C30063 + C30056;
    const double C34473 = C34471 + C34464;
    const double C35205 = C35203 + C35199;
    const double C10660 = C10653 + C10210;
    const double C17301 = C17297 + C16888;
    const double C47357 = C47353 + C46944;
    const double C26940 = C47983 * C529;
    const double C26938 = C47983 * C528;
    const double C26928 = C47983 * C250;
    const double C26926 = C47983 * C249;
    const double C26916 = C47983 * C527;
    const double C26914 = C47983 * C526;
    const double C26904 = C47983 * C252;
    const double C26902 = C47983 * C251;
    const double C27399 = C47983 * C1171;
    const double C27397 = C47983 * C1170;
    const double C27580 = C47983 * C629;
    const double C27578 = C47983 * C628;
    const double C27568 = C47983 * C1417;
    const double C27566 = C47983 * C1416;
    const double C28344 = C47983 * C631;
    const double C28342 = C47983 * C630;
    const double C28571 = C47983 * C358;
    const double C28569 = C47983 * C357;
    const double C28559 = C47983 * C360;
    const double C28557 = C47983 * C359;
    const double C29144 = C47983 * C2325;
    const double C29142 = C47983 * C2324;
    const double C29702 = C47983 * C880;
    const double C29700 = C47983 * C879;
    const double C37215 = C47983 * C882;
    const double C37213 = C47983 * C881;
    const double C38049 = C47983 * C2760;
    const double C38047 = C47983 * C2759;
    const double C113 =
        (((((0 - (C47926 * C47927) / C47928) * ae) / C47928 -
           (0 * be) / C47940 + (2 * C47929) / C47928) /
              C47934 -
          ((C47926 * C47963 + 0) * be) / C47928 + C47946 - C47956) /
             C47934 +
         ((C47926 * C47977 + 0) * ae) / C47928) /
            C47934 -
        ((C47926 * (C47977 / C47934 +
                    ((C47926 * C47983 + C48843) * ae) / C47928 + C47979) +
          C49241) *
         be) /
            C47928 +
        C47983 / C47934 + ((C47926 * C47979 + C48851) * ae) / C47928 +
        2 * (C47954 / C47934 - (0 * be) / C47928);
    const double C115 =
        (C47977 / C47934 + ((C47926 * C47983 + C48843) * ae) / C47928 +
         C47979) /
            C47934 -
        ((C47926 * (C47983 / C47934 +
                    ((C47926 * C47979 + C48851) * ae) / C47928 + 2 * C48029) +
          C49234) *
         be) /
            C47928 +
        2 * (C47979 / C47934 + ((C47926 * C48029 + C26745) * ae) / C47928);
    const double C117 =
        (C47983 / C47934 + ((C47926 * C47979 + C48851) * ae) / C47928 +
         C48033) /
            C47934 -
        ((C47926 *
              (C47979 / C47934 + ((C47926 * C48029 + C26745) * ae) / C47928) +
          C49221) *
         be) /
            C47928 +
        3 * (C48029 / C47934 + (0 * ae) / C47928);
    const double C3827 =
        C47977 / C47934 - ((C47926 * C47983 + C48843) * be) / C47928 + C47979;
    const double C3829 =
        C47983 / C47934 - ((C47926 * C47979 + C48851) * be) / C47928 + C48033;
    const double C22562 =
        C47977 / C47934 + ((C47926 * C47983 + C48843) * ae) / C47928 + C47979;
    const double C22564 =
        C47983 / C47934 + ((C47926 * C47979 + C48851) * ae) / C47928 + C48033;
    const double C26972 = C26960 - C26944;
    const double C26969 = C26957 - C26932;
    const double C26966 = C26954 - C26920;
    const double C26963 = C26951 - C26908;
    const double C27407 = C27403 - C27395;
    const double C27592 = C27586 - C27576;
    const double C27589 = C27583 - C27564;
    const double C28358 = C28355 - C28348;
    const double C28591 = C28585 - C28575;
    const double C28588 = C28582 - C28563;
    const double C29153 = C29149 - C29140;
    const double C29708 = C29705 - C29698;
    const double C37229 = C37226 - C37219;
    const double C38056 = C38053 - C38045;
    const double C4004 = C3990 - C3991;
    const double C4000 = C3974 - C3975;
    const double C4397 = C4384 - C4385;
    const double C4555 = C4542 - C4543;
    const double C5322 = C5308 - C5309;
    const double C5318 = C5292 - C5293;
    const double C6073 = C6060 - C6061;
    const double C22739 = C22725 - C22726;
    const double C22735 = C22709 - C22710;
    const double C23132 = C23119 - C23120;
    const double C23290 = C23277 - C23278;
    const double C31732 = C31718 - C31719;
    const double C31728 = C31702 - C31703;
    const double C32483 = C32470 - C32471;
    const double C8049 = C8037 - C8021;
    const double C8046 = C8034 - C8009;
    const double C8043 = C8031 - C7997;
    const double C8040 = C8028 - C7985;
    const double C8484 = C8480 - C8472;
    const double C8669 = C8663 - C8653;
    const double C8666 = C8660 - C8641;
    const double C15765 = C15753 - C15737;
    const double C15762 = C15750 - C15725;
    const double C15759 = C15747 - C15713;
    const double C15756 = C15744 - C15701;
    const double C16197 = C16194 - C16187;
    const double C16622 = C16619 - C16611;
    const double C40019 = C40016 - C40009;
    const double C48021 = C48020 / C47928;
    const double C8016 = C7827 * C522;
    const double C8004 = C7827 * C240;
    const double C7992 = C7827 * C521;
    const double C7980 = C7827 * C241;
    const double C8475 = C7827 * C1164;
    const double C8656 = C7827 * C623;
    const double C8644 = C7827 * C1410;
    const double C15732 = C7827 * C875;
    const double C15720 = C7827 * C348;
    const double C15708 = C7827 * C874;
    const double C15696 = C7827 * C349;
    const double C16182 = C7827 * C2318;
    const double C16614 = C7827 * C2753;
    const double C40004 = C7827 * C624;
    const double C11572 = C11560 + C11533;
    const double C11570 = C11558 + C11525;
    const double C11568 = C11556 + C11517;
    const double C11566 = C11554 + C11509;
    const double C11564 = C11552 + C11501;
    const double C11562 = C11550 + C11493;
    const double C11949 = C11947 + C11941;
    const double C12121 = C12115 + C12103;
    const double C12119 = C12113 + C12095;
    const double C12117 = C12111 + C12087;
    const double C12846 = C12842 + C12831;
    const double C12844 = C12840 + C12823;
    const double C13068 = C13064 + C13053;
    const double C13066 = C13062 + C13045;
    const double C13638 = C13634 + C13625;
    const double C13636 = C13632 + C13616;
    const double C14186 = C14184 + C14180;
    const double C18946 = C18944 + C18937;
    const double C19154 = C19152 + C19145;
    const double C19705 = C19703 + C19698;
    const double C20254 = C20252 + C20248;
    const double C20629 = C20627 + C20620;
    const double C21361 = C21359 + C21355;
    const double C1693 = C1254 + C1255;
    const double C7174 = C1915 + C1916;
    const double C7173 = C1916 + C1915;
    const double C3701 = C2843 + C2844;
    const double C24340 = C23973 + C23974;
    const double C24339 = C23971 + C23972;
    const double C26078 = C24527 + C24528;
    const double C26067 = C24528 + C24527;
    const double C30602 = C24526 + C24525;
    const double C30799 = C24525 + C24526;
    const double C26077 = C25264 + C25263;
    const double C26068 = C25263 + C25264;
    const double C26619 = C25513 + C25514;
    const double C35191 = C26633 + C26632;
    const double C3984 = C3827 * C250;
    const double C3982 = C3827 * C249;
    const double C3968 = C3827 * C252;
    const double C3966 = C3827 * C251;
    const double C4394 = C3827 * C527;
    const double C4392 = C3827 * C526;
    const double C4552 = C3827 * C629;
    const double C4550 = C3827 * C628;
    const double C5302 = C3827 * C358;
    const double C5300 = C3827 * C357;
    const double C5286 = C3827 * C360;
    const double C5284 = C3827 * C359;
    const double C6070 = C3827 * C880;
    const double C6068 = C3827 * C879;
    const double C3988 = C3829 * C248;
    const double C3986 = C3829 * C247;
    const double C3972 = C3829 * C250;
    const double C3970 = C3829 * C249;
    const double C4390 = C3829 * C529;
    const double C4388 = C3829 * C528;
    const double C4548 = C3829 * C631;
    const double C4546 = C3829 * C630;
    const double C5306 = C3829 * C356;
    const double C5304 = C3829 * C355;
    const double C5290 = C3829 * C358;
    const double C5288 = C3829 * C357;
    const double C6066 = C3829 * C882;
    const double C6064 = C3829 * C881;
    const double C22719 = C22562 * C250;
    const double C22717 = C22562 * C249;
    const double C22703 = C22562 * C252;
    const double C22701 = C22562 * C251;
    const double C23129 = C22562 * C527;
    const double C23127 = C22562 * C526;
    const double C23287 = C22562 * C629;
    const double C23285 = C22562 * C628;
    const double C31712 = C22562 * C358;
    const double C31710 = C22562 * C357;
    const double C31696 = C22562 * C360;
    const double C31694 = C22562 * C359;
    const double C32480 = C22562 * C880;
    const double C32478 = C22562 * C879;
    const double C22723 = C22564 * C248;
    const double C22721 = C22564 * C247;
    const double C22707 = C22564 * C250;
    const double C22705 = C22564 * C249;
    const double C23125 = C22564 * C529;
    const double C23123 = C22564 * C528;
    const double C23283 = C22564 * C631;
    const double C23281 = C22564 * C630;
    const double C31716 = C22564 * C356;
    const double C31714 = C22564 * C355;
    const double C31700 = C22564 * C358;
    const double C31698 = C22564 * C357;
    const double C32476 = C22564 * C882;
    const double C32474 = C22564 * C881;
    const double C26984 = C26972 + C26945;
    const double C26981 = C26969 + C26933;
    const double C26978 = C26966 + C26921;
    const double C26975 = C26963 + C26909;
    const double C27410 = C27407 + C27396;
    const double C27598 = C27592 + C27577;
    const double C27595 = C27589 + C27565;
    const double C28361 = C28358 + C28349;
    const double C28597 = C28591 + C28576;
    const double C28594 = C28588 + C28564;
    const double C29156 = C29153 + C29141;
    const double C29711 = C29708 + C29699;
    const double C37232 = C37229 + C37220;
    const double C38059 = C38056 + C38046;
    const double C4012 = C4004 - C3992;
    const double C4008 = C4000 - C3976;
    const double C4401 = C4397 - C4386;
    const double C4559 = C4555 - C4544;
    const double C5330 = C5322 - C5310;
    const double C5326 = C5318 - C5294;
    const double C6077 = C6073 - C6062;
    const double C22747 = C22739 - C22727;
    const double C22743 = C22735 - C22711;
    const double C23136 = C23132 - C23121;
    const double C23294 = C23290 - C23279;
    const double C31740 = C31732 - C31720;
    const double C31736 = C31728 - C31704;
    const double C32487 = C32483 - C32472;
    const double C8061 = C8049 + C8022;
    const double C8058 = C8046 + C8010;
    const double C8055 = C8043 + C7998;
    const double C8052 = C8040 + C7986;
    const double C8487 = C8484 + C8473;
    const double C8675 = C8669 + C8654;
    const double C8672 = C8666 + C8642;
    const double C15777 = C15765 + C15738;
    const double C15774 = C15762 + C15726;
    const double C15771 = C15759 + C15714;
    const double C15768 = C15756 + C15702;
    const double C16200 = C16197 + C16188;
    const double C16625 = C16622 + C16612;
    const double C40022 = C40019 + C40010;
    const double C48022 = C48000 - C48021;
    const double C8036 = C8015 - C8016;
    const double C8033 = C8003 - C8004;
    const double C8030 = C7991 - C7992;
    const double C8027 = C7979 - C7980;
    const double C8481 = C8474 - C8475;
    const double C8664 = C8655 - C8656;
    const double C8661 = C8643 - C8644;
    const double C15752 = C15731 - C15732;
    const double C15749 = C15719 - C15720;
    const double C15746 = C15707 - C15708;
    const double C15743 = C15695 - C15696;
    const double C16193 = C16181 - C16182;
    const double C16620 = C16613 - C16614;
    const double C40015 = C40003 - C40004;
    const double C11933 = C11566 + C11567;
    const double C11932 = C11564 + C11565;
    const double C13626 = C12120 + C12121;
    const double C13608 = C12121 + C12120;
    const double C13411 = C12119 + C12118;
    const double C13617 = C12118 + C12119;
    const double C19699 = C13637 + C13638;
    const double C19690 = C13638 + C13637;
    const double C20240 = C14186 + C14185;
    const double C21347 = C20254 + C20253;
    const double C1706 = C1693 + C1256;
    const double C7176 = C1914 + C7174;
    const double C7175 = C7173 + C1914;
    const double C3714 = C3701 + C2845;
    const double C24350 = C24340 * C48956;
    const double C24349 = C24339 * C48956;
    const double C30601 = C24339 * C49171;
    const double C33368 = C24339 * C31431;
    const double C30603 = C30602 * C49043;
    const double C33369 = C30602 * C49043;
    const double C4020 = C4012 + C3993;
    const double C4016 = C4008 + C3977;
    const double C4405 = C4401 + C4387;
    const double C4563 = C4559 + C4545;
    const double C5338 = C5330 + C5311;
    const double C5334 = C5326 + C5295;
    const double C6081 = C6077 + C6063;
    const double C22755 = C22747 + C22728;
    const double C22751 = C22743 + C22712;
    const double C23140 = C23136 + C23122;
    const double C23298 = C23294 + C23280;
    const double C31748 = C31740 + C31721;
    const double C31744 = C31736 + C31705;
    const double C32491 = C32487 + C32473;
    const double C48023 = C48022 - C48002;
    const double C8048 = C8036 - C8017;
    const double C8045 = C8033 - C8005;
    const double C8042 = C8030 - C7993;
    const double C8039 = C8027 - C7981;
    const double C8485 = C8481 - C8476;
    const double C8670 = C8664 - C8657;
    const double C8667 = C8661 - C8645;
    const double C15764 = C15752 - C15733;
    const double C15761 = C15749 - C15721;
    const double C15758 = C15746 - C15709;
    const double C15755 = C15743 - C15697;
    const double C16196 = C16193 - C16183;
    const double C16623 = C16620 - C16615;
    const double C40018 = C40015 - C40005;
    const double C11943 = C11933 * C48956;
    const double C11942 = C11932 * C48956;
    const double C13410 = C11932 * C49171;
    const double C44350 = C11932 * C31431;
    const double C13412 = C13411 * C49043;
    const double C44351 = C13411 * C49043;
    const double C1710 = C1706 * C48956;
    const double C30604 = C30601 + C30603;
    const double C33370 = C33368 + C33369;
    const double C26939 = C48023 * C522;
    const double C26927 = C48023 * C240;
    const double C26915 = C48023 * C521;
    const double C26903 = C48023 * C241;
    const double C27398 = C48023 * C1164;
    const double C27579 = C48023 * C623;
    const double C27567 = C48023 * C1410;
    const double C28343 = C48023 * C624;
    const double C28570 = C48023 * C348;
    const double C28558 = C48023 * C349;
    const double C29143 = C48023 * C2318;
    const double C29701 = C48023 * C874;
    const double C37214 = C48023 * C875;
    const double C38048 = C48023 * C2753;
    const double C114 =
        (((ae * -2 * C47927) / C47986 -
          (((C47926 * C47994) / C47933 + 2 * C47963) * be) / C47928 -
          C47995 / C47933) /
             C47934 +
         ((C47926 * C48016 + 2 * C47977) * ae) / C47928) /
            C47934 -
        ((C47926 * (C48016 / C47934 +
                    ((C47926 * C48023 + 2 * C47983) * ae) / C47928 + C48018) +
          2 * (C47977 / C47934 + ((C47926 * C47983 + C48843) * ae) / C47928 +
               C47979)) *
         be) /
            C47928 +
        C48023 / C47934 + ((C47926 * C48018 + 2 * C47979) * ae) / C47928 +
        (-2 * C47997) / (C47928 * 4 * C47933);
    const double C116 =
        (C48016 / C47934 + ((C47926 * C48023 + 2 * C47983) * ae) / C47928 +
         C48018) /
            C47934 -
        ((C47926 * (C48023 / C47934 +
                    ((C47926 * C48018 + 2 * C47979) * ae) / C47928 +
                    (-2 * C47997) / C48034) +
          2 * (C47983 / C47934 + ((C47926 * C47979 + C48851) * ae) / C47928 +
               C48033)) *
         be) /
            C47928 +
        2 * (C48018 / C47934 + ((C48033 - C48001 / C48034) * ae) / C47928);
    const double C118 =
        (C48023 / C47934 + ((C47926 * C48018 + 2 * C47979) * ae) / C47928 +
         (-2 * C47997) / C48034) /
            C47934 -
        ((C47926 *
              (C48018 / C47934 + ((C48033 - C48001 / C48034) * ae) / C47928) +
          2 * (C47979 / C47934 + ((C47926 * C48029 + C26745) * ae) / C47928)) *
         be) /
            C47928 +
        (-3 * C47997) / (C47928 * 4 * C47986);
    const double C3828 = C48016 / C47934 -
                         ((C47926 * C48023 + 2 * C47983) * be) / C47928 +
                         C48018;
    const double C3830 = C48023 / C47934 -
                         ((C47926 * C48018 + 2 * C47979) * be) / C47928 +
                         (-2 * C47997) / C48034;
    const double C22563 = C48016 / C47934 +
                          ((C47926 * C48023 + 2 * C47983) * ae) / C47928 +
                          C48018;
    const double C22565 = C48023 / C47934 +
                          ((C47926 * C48018 + 2 * C47979) * ae) / C47928 +
                          (-2 * C47997) / C48034;
    const double C8060 = C8048 + C8018;
    const double C8057 = C8045 + C8006;
    const double C8054 = C8042 + C7994;
    const double C8051 = C8039 + C7982;
    const double C8488 = C8485 + C8477;
    const double C8676 = C8670 + C8658;
    const double C8673 = C8667 + C8646;
    const double C15776 = C15764 + C15734;
    const double C15773 = C15761 + C15722;
    const double C15770 = C15758 + C15710;
    const double C15767 = C15755 + C15698;
    const double C16199 = C16196 + C16184;
    const double C16626 = C16623 + C16616;
    const double C40021 = C40018 + C40006;
    const double C13413 = C13410 + C13412;
    const double C44352 = C44350 + C44351;
    const double C26959 = C26938 - C26939;
    const double C26956 = C26926 - C26927;
    const double C26953 = C26914 - C26915;
    const double C26950 = C26902 - C26903;
    const double C27404 = C27397 - C27398;
    const double C27587 = C27578 - C27579;
    const double C27584 = C27566 - C27567;
    const double C28354 = C28342 - C28343;
    const double C28584 = C28569 - C28570;
    const double C28581 = C28557 - C28558;
    const double C29150 = C29142 - C29143;
    const double C29706 = C29700 - C29701;
    const double C37225 = C37213 - C37214;
    const double C38054 = C38047 - C38048;
    const double C3983 = C3828 * C240;
    const double C3967 = C3828 * C241;
    const double C4393 = C3828 * C521;
    const double C4551 = C3828 * C623;
    const double C5301 = C3828 * C348;
    const double C5285 = C3828 * C349;
    const double C6069 = C3828 * C874;
    const double C3987 = C3830 * C239;
    const double C3971 = C3830 * C240;
    const double C4389 = C3830 * C522;
    const double C4547 = C3830 * C624;
    const double C5305 = C3830 * C347;
    const double C5289 = C3830 * C348;
    const double C6065 = C3830 * C875;
    const double C22718 = C22563 * C240;
    const double C22702 = C22563 * C241;
    const double C23128 = C22563 * C521;
    const double C23286 = C22563 * C623;
    const double C31711 = C22563 * C348;
    const double C31695 = C22563 * C349;
    const double C32479 = C22563 * C874;
    const double C22722 = C22565 * C239;
    const double C22706 = C22565 * C240;
    const double C23124 = C22565 * C522;
    const double C23282 = C22565 * C624;
    const double C31715 = C22565 * C347;
    const double C31699 = C22565 * C348;
    const double C32475 = C22565 * C875;
    const double C8465 = C8054 + C8055;
    const double C40753 = C8675 + C8676;
    const double C40752 = C8676 + C8675;
    const double C16604 = C15770 + C15771;
    const double C26971 = C26959 - C26940;
    const double C26968 = C26956 - C26928;
    const double C26965 = C26953 - C26916;
    const double C26962 = C26950 - C26904;
    const double C27408 = C27404 - C27399;
    const double C27593 = C27587 - C27580;
    const double C27590 = C27584 - C27568;
    const double C28357 = C28354 - C28344;
    const double C28590 = C28584 - C28571;
    const double C28587 = C28581 - C28559;
    const double C29154 = C29150 - C29144;
    const double C29709 = C29706 - C29702;
    const double C37228 = C37225 - C37215;
    const double C38057 = C38054 - C38049;
    const double C4002 = C3982 - C3983;
    const double C3998 = C3966 - C3967;
    const double C4399 = C4392 - C4393;
    const double C4557 = C4550 - C4551;
    const double C5320 = C5300 - C5301;
    const double C5316 = C5284 - C5285;
    const double C6075 = C6068 - C6069;
    const double C4003 = C3986 - C3987;
    const double C3999 = C3970 - C3971;
    const double C4398 = C4388 - C4389;
    const double C4556 = C4546 - C4547;
    const double C5321 = C5304 - C5305;
    const double C5317 = C5288 - C5289;
    const double C6074 = C6064 - C6065;
    const double C22737 = C22717 - C22718;
    const double C22733 = C22701 - C22702;
    const double C23134 = C23127 - C23128;
    const double C23292 = C23285 - C23286;
    const double C31730 = C31710 - C31711;
    const double C31726 = C31694 - C31695;
    const double C32485 = C32478 - C32479;
    const double C22738 = C22721 - C22722;
    const double C22734 = C22705 - C22706;
    const double C23133 = C23123 - C23124;
    const double C23291 = C23281 - C23282;
    const double C31731 = C31714 - C31715;
    const double C31727 = C31698 - C31699;
    const double C32484 = C32474 - C32475;
    const double C8478 = C8465 + C8056;
    const double C40755 = C8674 + C40753;
    const double C40754 = C40752 + C8674;
    const double C16617 = C16604 + C15772;
    const double C26983 = C26971 + C26941;
    const double C26980 = C26968 + C26929;
    const double C26977 = C26965 + C26917;
    const double C26974 = C26962 + C26905;
    const double C27411 = C27408 + C27400;
    const double C27599 = C27593 + C27581;
    const double C27596 = C27590 + C27569;
    const double C28360 = C28357 + C28345;
    const double C28596 = C28590 + C28572;
    const double C28593 = C28587 + C28560;
    const double C29157 = C29154 + C29145;
    const double C29712 = C29709 + C29703;
    const double C37231 = C37228 + C37216;
    const double C38060 = C38057 + C38050;
    const double C4010 = C4002 - C3984;
    const double C4006 = C3998 - C3968;
    const double C4403 = C4399 - C4394;
    const double C4561 = C4557 - C4552;
    const double C5328 = C5320 - C5302;
    const double C5324 = C5316 - C5286;
    const double C6079 = C6075 - C6070;
    const double C4011 = C4003 - C3988;
    const double C4007 = C3999 - C3972;
    const double C4402 = C4398 - C4390;
    const double C4560 = C4556 - C4548;
    const double C5329 = C5321 - C5306;
    const double C5325 = C5317 - C5290;
    const double C6078 = C6074 - C6066;
    const double C22745 = C22737 - C22719;
    const double C22741 = C22733 - C22703;
    const double C23138 = C23134 - C23129;
    const double C23296 = C23292 - C23287;
    const double C31738 = C31730 - C31712;
    const double C31734 = C31726 - C31696;
    const double C32489 = C32485 - C32480;
    const double C22746 = C22738 - C22723;
    const double C22742 = C22734 - C22707;
    const double C23137 = C23133 - C23125;
    const double C23295 = C23291 - C23283;
    const double C31739 = C31731 - C31716;
    const double C31735 = C31727 - C31700;
    const double C32488 = C32484 - C32476;
    const double C8482 = C8478 * C48956;
    const double C27388 = C26977 + C26978;
    const double C29146 = C27598 + C27599;
    const double C29133 = C27599 + C27598;
    const double C38038 = C29712 + C29711;
    const double C4018 = C4010 + C3985;
    const double C4014 = C4006 + C3969;
    const double C4407 = C4403 + C4395;
    const double C4565 = C4561 + C4553;
    const double C5336 = C5328 + C5303;
    const double C5332 = C5324 + C5287;
    const double C6083 = C6079 + C6071;
    const double C4019 = C4011 + C3989;
    const double C4015 = C4007 + C3973;
    const double C4406 = C4402 + C4391;
    const double C4564 = C4560 + C4549;
    const double C5337 = C5329 + C5307;
    const double C5333 = C5325 + C5291;
    const double C6082 = C6078 + C6067;
    const double C22753 = C22745 + C22720;
    const double C22749 = C22741 + C22704;
    const double C23142 = C23138 + C23130;
    const double C23300 = C23296 + C23288;
    const double C31746 = C31738 + C31713;
    const double C31742 = C31734 + C31697;
    const double C32493 = C32489 + C32481;
    const double C22754 = C22746 + C22724;
    const double C22750 = C22742 + C22708;
    const double C23141 = C23137 + C23126;
    const double C23299 = C23295 + C23284;
    const double C31747 = C31739 + C31717;
    const double C31743 = C31735 + C31701;
    const double C32492 = C32488 + C32477;
    const double C27401 = C27388 + C26979;
    const double C29151 = C27597 + C29146;
    const double C29147 = C29133 + C27597;
    const double C38051 = C38038 + C29710;
    const double C27405 = C27401 * C48956;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C48956 * C48999 +
           (C47983 * C251 - C48023 * C241 - C47983 * C252 + C48843 * C259 +
            C47979 * C249 - C48018 * C240 - C47979 * C250 + C48851 * C258 +
            C48029 * C247 - C26754 * C239 - C48029 * C248 + C26745 * C257) *
               C48956 * C49006 +
           (C47983 * C526 - C48023 * C521 - C47983 * C527 + C48843 * C536 +
            C47979 * C528 - C48018 * C522 - C47979 * C529 + C48851 * C537 +
            C48029 * C530 - C26754 * C523 - C48029 * C531 + C26745 * C538) *
               C48956 * C26748) *
              C48926 * C48909 * C110 -
          ((C48029 * C532 - C26754 * C524 - C48029 * C533 + C26745 * C539 +
            C47979 * C530 - C48018 * C523 - C47979 * C531 + C48851 * C538 +
            C47983 * C528 - C48023 * C522 - C47983 * C529 + C48843 * C537) *
               C48956 * C26748 +
           (C48029 * C245 - C26754 * C238 - C48029 * C246 + C26745 * C256 +
            C47979 * C247 - C48018 * C239 - C47979 * C248 + C48851 * C257 +
            C47983 * C249 - C48023 * C240 - C47983 * C250 + C48843 * C258) *
               C48956 * C49006 +
           (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
            C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
            C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
               C48956 * C48999) *
              C48926 * C48909 * C111 +
          ((C47983 * C134 - C48023 * C125 - C47983 * C135 + C48843 * C146 +
            C47979 * C136 - C48018 * C126 - C47979 * C137 + C48851 * C147 +
            C48029 * C138 - C26754 * C127 - C48029 * C139 + C26745 * C148) *
               C48956 * C48999 +
           (C47983 * C247 - C48023 * C239 - C47983 * C248 + C48843 * C257 +
            C47979 * C245 - C48018 * C238 - C47979 * C246 + C48851 * C256 +
            C48029 * C243 - C26754 * C237 - C48029 * C244 + C26745 * C255) *
               C48956 * C49006 +
           (C47983 * C530 - C48023 * C523 - C47983 * C531 + C48843 * C538 +
            C47979 * C532 - C48018 * C524 - C47979 * C533 + C48851 * C539 +
            C48029 * C534 - C26754 * C525 - C48029 * C535 + C26745 * C540) *
               C48956 * C26748) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 +
            (C26977 + C26978 + C26979) * C48956 * C26748) *
               C48926 * C233 -
           ((C48029 * C1166 - C26754 * C1162 - C48029 * C1167 + C26745 * C1174 +
             C47979 * C1168 - C48018 * C1163 - C47979 * C1169 + C48851 * C1175 +
             C47983 * C1170 - C48023 * C1164 - C47983 * C1171 +
             C48843 * C1176) *
                C48956 * C26748 +
            (C26979 + C26978 + C26977) * C48956 * C49006 +
            (C26976 + C26975 + C26974) * C48956 * C48999) *
               C48926 * C49198) *
              C235 +
          (((C26980 + C26981 + C26982) * C48956 * C48999 +
            (C26983 + C26984 + C26985) * C48956 * C49006 +
            (C47983 * C1168 - C48023 * C1163 - C47983 * C1169 + C48843 * C1175 +
             C47979 * C1166 - C48018 * C1162 - C47979 * C1167 + C48851 * C1174 +
             C48029 * C1172 - C26754 * C1165 - C48029 * C1173 +
             C26745 * C1177) *
                C48956 * C26748) *
               C48926 * C49198 -
           ((C26985 + C26984 + C26983) * C48956 * C26748 +
            (C26982 + C26981 + C26980) * C48956 * C49006 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C48956 * C48999) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 +
            (C26977 + C26978 + C26979) * C48956 * C26748) *
               C343 -
           ((C48029 * C1412 - C26754 * C1408 - C48029 * C1413 + C26745 * C1420 +
             C47979 * C1414 - C48018 * C1409 - C47979 * C1415 + C48851 * C1421 +
             C47983 * C1416 - C48023 * C1410 - C47983 * C1417 +
             C48843 * C1422) *
                C48956 * C26748 +
            (C48029 * C632 - C26754 * C625 - C48029 * C633 + C26745 * C640 +
             C47979 * C630 - C48018 * C624 - C47979 * C631 + C48851 * C639 +
             C47983 * C628 - C48023 * C623 - C47983 * C629 + C48843 * C638) *
                C48956 * C49006 +
            (C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365 +
             C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
             C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367) *
                C48956 * C48999) *
               C49200) *
              C48909 * C235 +
          (((C47983 * C357 - C48023 * C348 - C47983 * C358 + C48843 * C366 +
             C47979 * C355 - C48018 * C347 - C47979 * C356 + C48851 * C365 +
             C48029 * C353 - C26754 * C346 - C48029 * C354 + C26745 * C364) *
                C48956 * C48999 +
            (C47983 * C630 - C48023 * C624 - C47983 * C631 + C48843 * C639 +
             C47979 * C632 - C48018 * C625 - C47979 * C633 + C48851 * C640 +
             C48029 * C634 - C26754 * C626 - C48029 * C635 + C26745 * C641) *
                C48956 * C49006 +
            (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 + C48843 * C1421 +
             C47979 * C1412 - C48018 * C1408 - C47979 * C1413 + C48851 * C1420 +
             C48029 * C1418 - C26754 * C1411 - C48029 * C1419 +
             C26745 * C1423) *
                C48956 * C26748) *
               C49200 -
           ((C26985 + C26984 + C26983) * C48956 * C26748 +
            (C26982 + C26981 + C26980) * C48956 * C49006 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C48956 * C48999) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 +
            (C26977 + C26978 + C26979) * C48956 * C26748) *
               C48926 * C451 -
           ((C48029 * C1166 - C26754 * C1162 - C48029 * C1167 + C26745 * C1174 +
             C47979 * C1168 - C48018 * C1163 - C47979 * C1169 + C48851 * C1175 +
             C47983 * C1170 - C48023 * C1164 - C47983 * C1171 +
             C48843 * C1176) *
                C48956 * C26748 +
            (C26979 + C26978 + C26977) * C48956 * C49006 +
            (C26976 + C26975 + C26974) * C48956 * C48999) *
               C48926 * C49198) *
              C453 +
          (((C26980 + C26981 + C26982) * C48956 * C48999 +
            (C26983 + C26984 + C26985) * C48956 * C49006 +
            (C47983 * C1168 - C48023 * C1163 - C47983 * C1169 + C48843 * C1175 +
             C47979 * C1166 - C48018 * C1162 - C47979 * C1167 + C48851 * C1174 +
             C48029 * C1172 - C26754 * C1165 - C48029 * C1173 +
             C26745 * C1177) *
                C48956 * C26748) *
               C48926 * C49198 -
           ((C26985 + C26984 + C26983) * C48956 * C26748 +
            (C26982 + C26981 + C26980) * C48956 * C49006 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C48956 * C48999) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C48956 * C48999 +
           (C26974 + C26975 + C26976) * C48956 * C49006 + C27405 * C26748) *
              C48926 * C517 -
          ((C27409 + C27410 + C27411) * C48956 * C26748 +
           (C26979 + C26978 + C26977) * C48956 * C49006 +
           (C26976 + C26975 + C26974) * C48956 * C48999) *
              C48926 * C518 +
          (C27405 * C48999 + (C27411 + C27410 + C27409) * C48956 * C49006 +
           (C47983 * C1683 - C48023 * C1680 - C47983 * C1684 + C48843 * C1689 +
            C47979 * C1685 - C48018 * C1681 - C47979 * C1686 + C48851 * C1690 +
            C48029 * C1687 - C26754 * C1682 - C48029 * C1688 + C26745 * C1691) *
               C48956 * C26748) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 + C27405 * C26748) *
               C343 -
           ((C27594 + C27595 + C27596) * C48956 * C26748 +
            (C27597 + C27598 + C27599) * C48956 * C49006 +
            (C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365 +
             C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
             C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367) *
                C48956 * C48999) *
               C49200) *
              C451 +
          (((C27599 + C27598 + C27597) * C48956 * C48999 +
            (C27596 + C27595 + C27594) * C48956 * C49006 +
            (C47983 * C1865 - C48023 * C1862 - C47983 * C1866 + C48843 * C1871 +
             C47979 * C1867 - C48018 * C1863 - C47979 * C1868 + C48851 * C1872 +
             C48029 * C1869 - C26754 * C1864 - C48029 * C1870 +
             C26745 * C1873) *
                C48956 * C26748) *
               C49200 -
           ((C27409 + C27410 + C27411) * C48956 * C26748 +
            (C26979 + C26978 + C26977) * C48956 * C49006 +
            (C26976 + C26975 + C26974) * C48956 * C48999) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 + C27405 * C26748) *
               C725 -
           ((C27594 + C27595 + C27596) * C48956 * C26748 +
            (C27597 + C27598 + C27599) * C48956 * C49006 +
            (C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365 +
             C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
             C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367) *
                C48956 * C48999) *
               C49200) *
              C48909 * C453 +
          (((C47983 * C357 - C48023 * C348 - C47983 * C358 + C48843 * C366 +
             C47979 * C355 - C48018 * C347 - C47979 * C356 + C48851 * C365 +
             C48029 * C353 - C26754 * C346 - C48029 * C354 + C26745 * C364) *
                C48956 * C48999 +
            (C47983 * C630 - C48023 * C624 - C47983 * C631 + C48843 * C639 +
             C47979 * C632 - C48018 * C625 - C47979 * C633 + C48851 * C640 +
             C48029 * C634 - C26754 * C626 - C48029 * C635 + C26745 * C641) *
                C48956 * C49006 +
            (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 + C48843 * C1421 +
             C47979 * C1412 - C48018 * C1408 - C47979 * C1413 + C48851 * C1420 +
             C48029 * C1418 - C26754 * C1411 - C48029 * C1419 +
             C26745 * C1423) *
                C48956 * C26748) *
               C49200 -
           ((C26985 + C26984 + C26983) * C48956 * C26748 +
            (C26982 + C26981 + C26980) * C48956 * C49006 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C48956 * C48999) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C48956 * C48999 +
            (C26974 + C26975 + C26976) * C48956 * C49006 + C27405 * C26748) *
               C725 -
           ((C27594 + C27595 + C27596) * C48956 * C26748 +
            (C27597 + C27598 + C27599) * C48956 * C49006 +
            (C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365 +
             C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
             C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367) *
                C48956 * C48999) *
               C49200) *
              C233 +
          (((C27599 + C27598 + C27597) * C48956 * C48999 +
            (C27596 + C27595 + C27594) * C48956 * C49006 +
            (C47983 * C1865 - C48023 * C1862 - C47983 * C1866 + C48843 * C1871 +
             C47979 * C1867 - C48018 * C1863 - C47979 * C1868 + C48851 * C1872 +
             C48029 * C1869 - C26754 * C1864 - C48029 * C1870 +
             C26745 * C1873) *
                C48956 * C26748) *
               C49200 -
           ((C27409 + C27410 + C27411) * C48956 * C26748 +
            (C26979 + C26978 + C26977) * C48956 * C49006 +
            (C26976 + C26975 + C26974) * C48956 * C48999) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C48956 * C48999 +
           (C26974 + C26975 + C26976) * C48956 * C49006 + C27405 * C26748) *
              C871 -
          ((C27594 + C27595 + C27596) * C48956 * C26748 +
           (C27597 + C27598 + C27599) * C48956 * C49006 +
           (C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365 +
            C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
            C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367) *
               C48956 * C48999) *
              C872 +
          ((C47983 * C879 - C48023 * C874 - C47983 * C880 + C48843 * C889 +
            C47979 * C881 - C48018 * C875 - C47979 * C882 + C48851 * C890 +
            C48029 * C883 - C26754 * C876 - C48029 * C884 + C26745 * C891) *
               C48956 * C48999 +
           (C47983 * C2324 - C48023 * C2318 - C47983 * C2325 + C48843 * C2336 +
            C47979 * C2326 - C48018 * C2319 - C47979 * C2327 + C48851 * C2337 +
            C48029 * C2328 - C26754 * C2320 - C48029 * C2329 + C26745 * C2338) *
               C48956 * C49006 +
           (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 + C48843 * C2339 +
            C47979 * C2332 - C48018 * C2322 - C47979 * C2333 + C48851 * C2340 +
            C48029 * C2334 - C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
               C48956 * C26748) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49171 +
            (C25511 + C25512) * C49043) *
               C48999 +
           ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
           (C24339 * C49171 + (C24526 + C24525) * C49043) * C26748) *
              C48926 * C48909 * C110 -
          (((C23764 * C1412 - C23765 * C1408 - C23764 * C1413 + C48848 * C1420 +
             C23762 * C1414 - C23763 * C1409 - C23762 * C1415 +
             C23756 * C1421) *
                C49043 +
            (C23978 + C23977) * C49171) *
               C26748 +
           ((C25266 + C25265) * C49043 + (C23976 + C23975) * C49171) * C49006 +
           ((C25516 + C25515) * C49043 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49171) *
               C48999) *
              C48926 * C48909 * C111 +
          (((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
             C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
                C49171 +
            (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
             C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
                C49043) *
               C48999 +
           ((C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
             C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
                C49171 +
            (C23762 * C632 - C23763 * C625 - C23762 * C633 + C23756 * C640 +
             C23764 * C634 - C23765 * C626 - C23764 * C635 + C48848 * C641) *
                C49043) *
               C49006 +
           ((C23762 * C530 - C23763 * C523 - C23762 * C531 + C23756 * C538 +
             C23764 * C532 - C23765 * C524 - C23764 * C533 + C48848 * C539) *
                C49171 +
            (C23762 * C1412 - C23763 * C1408 - C23762 * C1413 + C23756 * C1420 +
             C23764 * C1418 - C23765 * C1411 - C23764 * C1419 +
             C48848 * C1423) *
                C49043) *
               C26748) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            (C24339 * C49171 + (C24526 + C24525) * C49043) * C26748) *
               C48926 * C233 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C49171) * C26748 +
            ((C24525 + C24526) * C49043 + (C23972 + C23971) * C49171) * C49006 +
            (C26078 * C49043 + (C23970 + C23969) * C49171) * C48999) *
               C48926 * C49198) *
              C235 +
          ((((C23975 + C23976) * C49171 + (C25265 + C25266) * C49043) * C48999 +
            ((C23977 + C23978) * C49171 + (C30065 + C30066) * C49043) * C49006 +
            ((C23979 + C23980) * C49171 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C26748) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C49171) * C26748 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C49171) * C49006 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49171) *
                C48999) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            (C24339 * C49171 + (C24526 + C24525) * C49043) * C26748) *
               C343 -
           (((C25871 + C25872) * C49043 + (C24525 + C24526) * C49171) * C26748 +
            (C26077 * C49043 + C26078 * C49171) * C49006 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C49171) *
                C48999) *
               C49200) *
              C48909 * C235 +
          ((((C25515 + C25516) * C49171 + (C25517 + C25518) * C49043) * C48999 +
            ((C25265 + C25266) * C49171 + (C25267 + C25268) * C49043) * C49006 +
            ((C30065 + C30066) * C49171 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C26748) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C49171) * C26748 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C49171) * C49006 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49171) *
                C48999) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            (C24339 * C49171 + (C24526 + C24525) * C49043) * C26748) *
               C48926 * C451 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C49171) * C26748 +
            ((C24525 + C24526) * C49043 + (C23972 + C23971) * C49171) * C49006 +
            (C26078 * C49043 + (C23970 + C23969) * C49171) * C48999) *
               C48926 * C49198) *
              C453 +
          ((((C23975 + C23976) * C49171 + (C25265 + C25266) * C49043) * C48999 +
            ((C23977 + C23978) * C49171 + (C30065 + C30066) * C49043) * C49006 +
            ((C23979 + C23980) * C49171 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C26748) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C49171) * C26748 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C49171) * C49006 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49171) *
                C48999) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49171 +
            (C25511 + C25512) * C49043) *
               C48999 +
           ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
           C30604 * C26748) *
              C48926 * C517 -
          (((C24523 + C24524) * C49043 + (C23974 + C23973) * C49171) * C26748 +
           ((C24525 + C24526) * C49043 + (C23972 + C23971) * C49171) * C49006 +
           (C26078 * C49043 + (C23970 + C23969) * C49171) * C48999) *
              C48926 * C518 +
          (C30604 * C48999 +
           (C24340 * C49171 + (C24524 + C24523) * C49043) * C49006 +
           ((C24356 + C24355) * C49171 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C49043) *
               C26748) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            C30604 * C26748) *
               C343 -
           (((C25871 + C25872) * C49043 + C30799 * C49171) * C26748 +
            (C26077 * C49043 + C26078 * C49171) * C49006 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C49171) *
                C48999) *
               C49200) *
              C451 +
          (((C26067 * C49171 + C26068 * C49043) * C48999 +
            (C30602 * C49171 + (C25872 + C25871) * C49043) * C49006 +
            ((C24524 + C24523) * C49171 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C26748) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C49171) * C26748 +
            (C30799 * C49043 + (C23972 + C23971) * C49171) * C49006 +
            (C26078 * C49043 + (C23970 + C23969) * C49171) * C48999) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            C30604 * C26748) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C49171) * C26748 +
            (C26077 * C49043 + C26078 * C49171) * C49006 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C49171) *
                C48999) *
               C49200) *
              C48909 * C453 +
          ((((C25515 + C25516) * C49171 + (C25517 + C25518) * C49043) * C48999 +
            ((C25265 + C25266) * C49171 + (C25267 + C25268) * C49043) * C49006 +
            ((C30065 + C30066) * C49171 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C26748) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C49171) * C26748 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C49171) * C49006 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49171) *
                C48999) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49171 +
             (C25511 + C25512) * C49043) *
                C48999 +
            ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
            C30604 * C26748) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C49171) * C26748 +
            (C26077 * C49043 + C26078 * C49171) * C49006 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C49171) *
                C48999) *
               C49200) *
              C233 +
          (((C26067 * C49171 + C26068 * C49043) * C48999 +
            (C30602 * C49171 + (C25872 + C25871) * C49043) * C49006 +
            ((C24524 + C24523) * C49171 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C26748) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C49171) * C26748 +
            (C30799 * C49043 + (C23972 + C23971) * C49171) * C49006 +
            (C26078 * C49043 + (C23970 + C23969) * C49171) * C48999) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49171 +
            (C25511 + C25512) * C49043) *
               C48999 +
           ((C23969 + C23970) * C49171 + C26067 * C49043) * C49006 +
           C30604 * C26748) *
              C871 -
          (((C25871 + C25872) * C49043 + C30799 * C49171) * C26748 +
           (C26077 * C49043 + C26078 * C49171) * C49006 +
           ((C25514 + C25513) * C49043 + (C25512 + C25511) * C49171) * C48999) *
              C872 +
          ((C26619 * C49171 + (C26633 + C26632) * C49043) * C48999 +
           (C26068 * C49171 + (C26084 + C26083) * C49043) * C49006 +
           ((C25872 + C25871) * C49171 +
            (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
             C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
             C23764 * C10365 + C48848 * C10367) *
                C49043) *
               C26748) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23762 * C251 - C23763 * C241 - C23762 * C252 + C23756 * C259 +
            C23764 * C249 - C23765 * C240 - C23764 * C250 + C48848 * C258) *
               C48956 * C49238 +
           (C23762 * C526 - C23763 * C521 - C23762 * C527 + C23756 * C536 +
            C23764 * C528 - C23765 * C522 - C23764 * C529 + C48848 * C537) *
               C48956 * C49228 +
           (C23762 * C1170 - C23763 * C1164 - C23762 * C1171 + C23756 * C1176 +
            C23764 * C1168 - C23765 * C1163 - C23764 * C1169 + C48848 * C1175) *
               C48956 * C49178) *
              C48926 * C48909 * C110 -
          ((C23764 * C1166 - C23765 * C1162 - C23764 * C1167 + C48848 * C1174 +
            C23762 * C1168 - C23763 * C1163 - C23762 * C1169 + C23756 * C1175) *
               C48956 * C49178 +
           (C23764 * C530 - C23765 * C523 - C23764 * C531 + C48848 * C538 +
            C23762 * C528 - C23763 * C522 - C23762 * C529 + C23756 * C537) *
               C48956 * C49228 +
           (C23764 * C247 - C23765 * C239 - C23764 * C248 + C48848 * C257 +
            C23762 * C249 - C23763 * C240 - C23762 * C250 + C23756 * C258) *
               C48956 * C49238 +
           (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
            C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
               C48956 * C49242) *
              C48926 * C48909 * C111 +
          ((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
            C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
               C48956 * C49242 +
           (C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
            C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
               C48956 * C49238 +
           (C23762 * C530 - C23763 * C523 - C23762 * C531 + C23756 * C538 +
            C23764 * C532 - C23765 * C524 - C23764 * C533 + C48848 * C539) *
               C48956 * C49228 +
           (C23762 * C1166 - C23763 * C1162 - C23762 * C1167 + C23756 * C1174 +
            C23764 * C1172 - C23765 * C1165 - C23764 * C1173 + C48848 * C1177) *
               C48956 * C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22562 * C251 - C22563 * C241 - C22562 * C252 + C49241 * C259 +
            C22564 * C249 - C22565 * C240 - C22564 * C250 + C49234 * C258 +
            C22566 * C247 - C22567 * C239 - C22566 * C248 + C49221 * C257 +
            C22568 * C245 - C22569 * C238 - C22568 * C246 + C49169 * C256) *
               C48956 * C49003) *
              C48926 * C48909 * C110 -
          ((C22568 * C243 - C22569 * C237 - C22568 * C244 + C49169 * C255 +
            C22566 * C245 - C22567 * C238 - C22566 * C246 + C49221 * C256 +
            C22564 * C247 - C22565 * C239 - C22564 * C248 + C49234 * C257 +
            C22562 * C249 - C22563 * C240 - C22562 * C250 + C49241 * C258) *
               C48956 * C49003 +
           (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
            C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
            C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
            C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
               C48956 * C22560) *
              C48926 * C48909 * C111 +
          ((C22562 * C134 - C22563 * C125 - C22562 * C135 + C49241 * C146 +
            C22564 * C136 - C22565 * C126 - C22564 * C137 + C49234 * C147 +
            C22566 * C138 - C22567 * C127 - C22566 * C139 + C49221 * C148 +
            C22568 * C140 - C22569 * C128 - C22568 * C141 + C49169 * C149) *
               C48956 * C22560 +
           (C22562 * C247 - C22563 * C239 - C22562 * C248 + C49241 * C257 +
            C22564 * C245 - C22565 * C238 - C22564 * C246 + C49234 * C256 +
            C22566 * C243 - C22567 * C237 - C22566 * C244 + C49221 * C255 +
            C22568 * C253 - C22569 * C242 - C22568 * C254 + C49169 * C260) *
               C48956 * C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49236 +
            (C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367 +
             C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366) *
                C49225 +
            (C23762 * C879 - C23763 * C874 - C23762 * C880 + C23756 * C889 +
             C23764 * C881 - C23765 * C875 - C23764 * C882 + C48848 * C890) *
                C49206) *
               C22560 +
           ((C23969 + C23970) * C49236 + (C24528 + C24527) * C49225 +
            (C23762 * C2324 - C23763 * C2318 - C23762 * C2325 + C23756 * C2336 +
             C23764 * C2326 - C23765 * C2319 - C23764 * C2327 +
             C48848 * C2337) *
                C49206) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C23764 * C2328 - C23765 * C2320 - C23764 * C2329 + C48848 * C2338 +
             C23762 * C2326 - C23763 * C2319 - C23762 * C2327 +
             C23756 * C2337) *
                C49206 +
            (C23764 * C632 - C23765 * C625 - C23764 * C633 + C48848 * C640 +
             C23762 * C630 - C23763 * C624 - C23762 * C631 + C23756 * C639) *
                C49225 +
            (C23976 + C23975) * C49236) *
               C49003 +
           ((C23764 * C883 - C23765 * C876 - C23764 * C884 + C48848 * C891 +
             C23762 * C881 - C23763 * C875 - C23762 * C882 + C23756 * C890) *
                C49206 +
            (C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365 +
             C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366) *
                C49225 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49236) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
             C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
                C49236 +
            (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
             C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
                C49225 +
            (C23762 * C883 - C23763 * C876 - C23762 * C884 + C23756 * C891 +
             C23764 * C885 - C23765 * C877 - C23764 * C886 + C48848 * C892) *
                C49206) *
               C22560 +
           ((C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
             C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
                C49236 +
            (C23762 * C632 - C23763 * C625 - C23762 * C633 + C23756 * C640 +
             C23764 * C634 - C23765 * C626 - C23764 * C635 + C48848 * C641) *
                C49225 +
            (C23762 * C2328 - C23763 * C2320 - C23762 * C2329 + C23756 * C2338 +
             C23764 * C2602 - C23765 * C2601 - C23764 * C2603 +
             C48848 * C2604) *
                C49206) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C48926 * C233 -
           ((C23764 * C1685 - C23765 * C1681 - C23764 * C1686 + C48848 * C1690 +
             C23762 * C1683 - C23763 * C1680 - C23762 * C1684 +
             C23756 * C1689) *
                C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C48926 * C49198) *
              C235 +
          (((C23975 + C23976) * C48956 * C49242 +
            (C23977 + C23978) * C48956 * C49238 +
            (C23979 + C23980) * C48956 * C49228 +
            (C23762 * C1685 - C23763 * C1681 - C23762 * C1686 + C23756 * C1690 +
             C23764 * C1687 - C23765 * C1682 - C23764 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C48926 * C233 -
           ((C22568 * C532 - C22569 * C524 - C22568 * C533 + C49169 * C539 +
             C22566 * C530 - C22567 * C523 - C22566 * C531 + C49221 * C538 +
             C22564 * C528 - C22565 * C522 - C22564 * C529 + C49234 * C537 +
             C22562 * C526 - C22563 * C521 - C22562 * C527 + C49241 * C536) *
                C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C48926 * C49198) *
              C235 +
          (((C22753 + C22754 + C22755 + C22756) * C48956 * C22560 +
            (C22562 * C528 - C22563 * C522 - C22562 * C529 + C49241 * C537 +
             C22564 * C530 - C22565 * C523 - C22564 * C531 + C49234 * C538 +
             C22566 * C532 - C22567 * C524 - C22566 * C533 + C49221 * C539 +
             C22568 * C534 - C22569 * C525 - C22568 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367 +
              C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366) *
                 C49225 +
             (C23762 * C879 - C23763 * C874 - C23762 * C880 + C23756 * C889 +
              C23764 * C881 - C23765 * C875 - C23764 * C882 + C48848 * C890) *
                 C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + (C24528 + C24527) * C49225 +
             (C25263 + C25264) * C49206) *
                C49003) *
               C48926 * C233 -
           (((C23764 * C2332 - C23765 * C2322 - C23764 * C2333 +
              C48848 * C2340 + C23762 * C2330 - C23763 * C2321 -
              C23762 * C2331 + C23756 * C2339) *
                 C49206 +
             (C24525 + C24526) * C49225 + (C23972 + C23971) * C49236) *
                C49003 +
            ((C25264 + C25263) * C49206 + (C24527 + C24528) * C49225 +
             (C23970 + C23969) * C49236) *
                C22560) *
               C48926 * C49198) *
              C235 +
          ((((C23975 + C23976) * C49236 + (C25265 + C25266) * C49225 +
             (C25267 + C25268) * C49206) *
                C22560 +
            ((C23977 + C23978) * C49236 +
             (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 +
              C23756 * C1421 + C23764 * C1412 - C23765 * C1408 -
              C23764 * C1413 + C48848 * C1420) *
                 C49225 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49206) *
                C49003) *
               C48926 * C49198 -
           (((C25268 + C25267) * C49206 + (C25266 + C25265) * C49225 +
             (C23976 + C23975) * C49236) *
                C49003 +
            ((C23764 * C883 - C23765 * C876 - C23764 * C884 + C48848 * C891 +
              C23762 * C881 - C23763 * C875 - C23762 * C882 + C23756 * C890) *
                 C49206 +
             (C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365 +
              C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366) *
                 C49225 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49236) *
                C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C343 -
           ((C23764 * C1867 - C23765 * C1863 - C23764 * C1868 + C48848 * C1872 +
             C23762 * C1865 - C23763 * C1862 - C23762 * C1866 +
             C23756 * C1871) *
                C48956 * C49178 +
            (C23764 * C1414 - C23765 * C1409 - C23764 * C1415 + C48848 * C1421 +
             C23762 * C1416 - C23763 * C1410 - C23762 * C1417 +
             C23756 * C1422) *
                C48956 * C49228 +
            (C23764 * C630 - C23765 * C624 - C23764 * C631 + C48848 * C639 +
             C23762 * C628 - C23763 * C623 - C23762 * C629 + C23756 * C638) *
                C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C48909 * C235 +
          (((C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366 +
             C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365) *
                C48956 * C49242 +
            (C23762 * C630 - C23763 * C624 - C23762 * C631 + C23756 * C639 +
             C23764 * C632 - C23765 * C625 - C23764 * C633 + C48848 * C640) *
                C48956 * C49238 +
            (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 + C23756 * C1421 +
             C23764 * C1412 - C23765 * C1408 - C23764 * C1413 +
             C48848 * C1420) *
                C48956 * C49228 +
            (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 + C23756 * C1872 +
             C23764 * C1869 - C23765 * C1864 - C23764 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C343 -
           ((C22568 * C634 - C22569 * C626 - C22568 * C635 + C49169 * C641 +
             C22566 * C632 - C22567 * C625 - C22566 * C633 + C49221 * C640 +
             C22564 * C630 - C22565 * C624 - C22564 * C631 + C49234 * C639 +
             C22562 * C628 - C22563 * C623 - C22562 * C629 + C49241 * C638) *
                C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C48909 * C235 +
          (((C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363) *
                C48956 * C22560 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + (C24528 + C24527) * C49225 +
             (C25263 + C25264) * C49206) *
                C49003) *
               C343 -
           (((C23764 * C3258 - C23765 * C3254 - C23764 * C3259 +
              C48848 * C3263 + C23762 * C3256 - C23763 * C3253 -
              C23762 * C3257 + C23756 * C3262) *
                 C49206 +
             (C25264 + C25263) * C49225 + (C24527 + C24528) * C49236) *
                C49003 +
            ((C23764 * C2757 - C23765 * C2752 - C23764 * C2758 +
              C48848 * C2764 + C23762 * C2759 - C23763 * C2753 -
              C23762 * C2760 + C23756 * C2765) *
                 C49206 +
             (C25514 + C25513) * C49225 + (C25512 + C25511) * C49236) *
                C22560) *
               C49200) *
              C48909 * C235 +
          ((((C25515 + C25516) * C49236 + (C25517 + C25518) * C49225 +
             (C23762 * C2757 - C23763 * C2752 - C23762 * C2758 +
              C23756 * C2764 + C23764 * C2755 - C23765 * C2751 -
              C23764 * C2756 + C48848 * C2763) *
                 C49206) *
                C22560 +
            ((C25265 + C25266) * C49236 + (C25267 + C25268) * C49225 +
             (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 +
              C23756 * C3263 + C23764 * C3260 - C23765 * C3255 -
              C23764 * C3261 + C48848 * C3264) *
                 C49206) *
                C49003) *
               C49200 -
           (((C25268 + C25267) * C49206 + (C25266 + C25265) * C49225 +
             (C23976 + C23975) * C49236) *
                C49003 +
            ((C25518 + C25517) * C49206 + (C25516 + C25515) * C49225 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49236) *
                C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C48926 * C451 -
           ((C23764 * C1685 - C23765 * C1681 - C23764 * C1686 + C48848 * C1690 +
             C23762 * C1683 - C23763 * C1680 - C23762 * C1684 +
             C23756 * C1689) *
                C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C48926 * C49198) *
              C453 +
          (((C23975 + C23976) * C48956 * C49242 +
            (C23977 + C23978) * C48956 * C49238 +
            (C23979 + C23980) * C48956 * C49228 +
            (C23762 * C1685 - C23763 * C1681 - C23762 * C1686 + C23756 * C1690 +
             C23764 * C1687 - C23765 * C1682 - C23764 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C48926 * C451 -
           ((C22568 * C532 - C22569 * C524 - C22568 * C533 + C49169 * C539 +
             C22566 * C530 - C22567 * C523 - C22566 * C531 + C49221 * C538 +
             C22564 * C528 - C22565 * C522 - C22564 * C529 + C49234 * C537 +
             C22562 * C526 - C22563 * C521 - C22562 * C527 + C49241 * C536) *
                C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C48926 * C49198) *
              C453 +
          (((C22753 + C22754 + C22755 + C22756) * C48956 * C22560 +
            (C22562 * C528 - C22563 * C522 - C22562 * C529 + C49241 * C537 +
             C22564 * C530 - C22565 * C523 - C22564 * C531 + C49234 * C538 +
             C22566 * C532 - C22567 * C524 - C22566 * C533 + C49221 * C539 +
             C22568 * C534 - C22569 * C525 - C22568 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + (C24528 + C24527) * C49225 +
             (C25263 + C25264) * C49206) *
                C49003) *
               C48926 * C451 -
           (((C23764 * C2332 - C23765 * C2322 - C23764 * C2333 +
              C48848 * C2340 + C23762 * C2330 - C23763 * C2321 -
              C23762 * C2331 + C23756 * C2339) *
                 C49206 +
             (C24525 + C24526) * C49225 + (C23972 + C23971) * C49236) *
                C49003 +
            ((C25264 + C25263) * C49206 + (C24527 + C24528) * C49225 +
             (C23970 + C23969) * C49236) *
                C22560) *
               C48926 * C49198) *
              C453 +
          ((((C23975 + C23976) * C49236 + (C25265 + C25266) * C49225 +
             (C25267 + C25268) * C49206) *
                C22560 +
            ((C23977 + C23978) * C49236 +
             (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 +
              C23756 * C1421 + C23764 * C1412 - C23765 * C1408 -
              C23764 * C1413 + C48848 * C1420) *
                 C49225 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49206) *
                C49003) *
               C48926 * C49198 -
           (((C25268 + C25267) * C49206 + (C25266 + C25265) * C49225 +
             (C23976 + C23975) * C49236) *
                C49003 +
            ((C25518 + C25517) * C49206 + (C25516 + C25515) * C49225 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49236) *
                C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
           C24350 * C49178) *
              C48926 * C517 -
          ((C24355 + C24356) * C48956 * C49178 +
           (C23974 + C23973) * C48956 * C49228 +
           (C23972 + C23971) * C48956 * C49238 +
           (C23970 + C23969) * C48956 * C49242) *
              C48926 * C518 +
          (C24349 * C49242 + C24350 * C49238 +
           (C24356 + C24355) * C48956 * C49228 +
           (C23762 * C9232 - C23763 * C9230 - C23762 * C9233 + C23756 * C9236 +
            C23764 * C9234 - C23765 * C9231 - C23764 * C9235 + C48848 * C9237) *
               C48956 * C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
              C48926 * C517 -
          ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
           (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
              C48926 * C518 +
          ((C23142 + C23141 + C23140 + C23139) * C48956 * C22560 +
           (C22562 * C1170 - C22563 * C1164 - C22562 * C1171 + C49241 * C1176 +
            C22564 * C1168 - C22565 * C1163 - C22564 * C1169 + C49234 * C1175 +
            C22566 * C1166 - C22567 * C1162 - C22566 * C1167 + C49221 * C1174 +
            C22568 * C1172 - C22569 * C1165 - C22568 * C1173 + C49169 * C1177) *
               C48956 * C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49236 +
            (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
               C22560 +
           ((C23969 + C23970) * C49236 + (C24528 + C24527) * C49225 +
            (C25263 + C25264) * C49206) *
               C49003) *
              C48926 * C517 -
          (((C25871 + C25872) * C49206 + (C24525 + C24526) * C49225 +
            (C23972 + C23971) * C49236) *
               C49003 +
           ((C25264 + C25263) * C49206 + (C24527 + C24528) * C49225 +
            (C23970 + C23969) * C49236) *
               C22560) *
              C48926 * C518 +
          ((C24339 * C49236 + (C24526 + C24525) * C49225 +
            (C25872 + C25871) * C49206) *
               C22560 +
           (C24340 * C49236 + (C24524 + C24523) * C49225 +
            (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 + C23756 * C9898 +
             C23764 * C10157 - C23765 * C10156 - C23764 * C10158 +
             C48848 * C10159) *
                C49206) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C343 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C451 +
          (((C24528 + C24527) * C48956 * C49242 +
            (C24526 + C24525) * C48956 * C49238 +
            (C24524 + C24523) * C48956 * C49228 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C24355 + C24356) * C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C343 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C451 +
          (((C23300 + C23299 + C23298 + C23297) * C48956 * C22560 +
            (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
             C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
             C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
             C22568 * C1418 - C22569 * C1411 - C22568 * C1419 +
             C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + C26067 * C49225 + C26068 * C49206) *
                C49003) *
               C343 -
           (((C26083 + C26084) * C49206 + C26077 * C49225 + C26078 * C49236) *
                C49003 +
            ((C23764 * C2757 - C23765 * C2752 - C23764 * C2758 +
              C48848 * C2764 + C23762 * C2759 - C23763 * C2753 -
              C23762 * C2760 + C23756 * C2765) *
                 C49206 +
             (C25514 + C25513) * C49225 + (C25512 + C25511) * C49236) *
                C22560) *
               C49200) *
              C451 +
          (((C26067 * C49236 + C26068 * C49225 + (C26084 + C26083) * C49206) *
                C22560 +
            ((C24526 + C24525) * C49236 + (C25872 + C25871) * C49225 +
             (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
              C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
              C23764 * C10365 + C48848 * C10367) *
                 C49206) *
                C49003) *
               C49200 -
           (((C25871 + C25872) * C49206 + (C24525 + C24526) * C49225 +
             (C23972 + C23971) * C49236) *
                C49003 +
            (C26077 * C49206 + C26078 * C49225 + (C23970 + C23969) * C49236) *
                C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C725 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C48909 * C453 +
          (((C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366 +
             C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365) *
                C48956 * C49242 +
            (C23762 * C630 - C23763 * C624 - C23762 * C631 + C23756 * C639 +
             C23764 * C632 - C23765 * C625 - C23764 * C633 + C48848 * C640) *
                C48956 * C49238 +
            (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 + C23756 * C1421 +
             C23764 * C1412 - C23765 * C1408 - C23764 * C1413 +
             C48848 * C1420) *
                C48956 * C49228 +
            (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 + C23756 * C1872 +
             C23764 * C1869 - C23765 * C1864 - C23764 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C725 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C48909 * C453 +
          (((C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363) *
                C48956 * C22560 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + C26067 * C49225 + C26068 * C49206) *
                C49003) *
               C725 -
           (((C26083 + C26084) * C49206 + C26077 * C49225 + C26078 * C49236) *
                C49003 +
            ((C23764 * C2757 - C23765 * C2752 - C23764 * C2758 +
              C48848 * C2764 + C23762 * C2759 - C23763 * C2753 -
              C23762 * C2760 + C23756 * C2765) *
                 C49206 +
             (C25514 + C25513) * C49225 + (C25512 + C25511) * C49236) *
                C22560) *
               C49200) *
              C48909 * C453 +
          ((((C25515 + C25516) * C49236 + (C25517 + C25518) * C49225 +
             (C23762 * C2757 - C23763 * C2752 - C23762 * C2758 +
              C23756 * C2764 + C23764 * C2755 - C23765 * C2751 -
              C23764 * C2756 + C48848 * C2763) *
                 C49206) *
                C22560 +
            ((C25265 + C25266) * C49236 + (C25267 + C25268) * C49225 +
             (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 +
              C23756 * C3263 + C23764 * C3260 - C23765 * C3255 -
              C23764 * C3261 + C48848 * C3264) *
                 C49206) *
                C49003) *
               C49200 -
           (((C25268 + C25267) * C49206 + (C25266 + C25265) * C49225 +
             (C23976 + C23975) * C49236) *
                C49003 +
            ((C25518 + C25517) * C49206 + (C25516 + C25515) * C49225 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49236) *
                C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C725 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C233 +
          (((C24528 + C24527) * C48956 * C49242 +
            (C24526 + C24525) * C48956 * C49238 +
            (C24524 + C24523) * C48956 * C49228 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C24355 + C24356) * C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C725 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C233 +
          (((C23300 + C23299 + C23298 + C23297) * C48956 * C22560 +
            (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
             C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
             C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
             C22568 * C1418 - C22569 * C1411 - C22568 * C1419 +
             C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49236 +
             (C25511 + C25512) * C49225 + (C25513 + C25514) * C49206) *
                C22560 +
            ((C23969 + C23970) * C49236 + C26067 * C49225 + C26068 * C49206) *
                C49003) *
               C725 -
           (((C26083 + C26084) * C49206 + C26077 * C49225 + C26078 * C49236) *
                C49003 +
            ((C23764 * C2757 - C23765 * C2752 - C23764 * C2758 +
              C48848 * C2764 + C23762 * C2759 - C23763 * C2753 -
              C23762 * C2760 + C23756 * C2765) *
                 C49206 +
             (C25514 + C25513) * C49225 + (C25512 + C25511) * C49236) *
                C22560) *
               C49200) *
              C233 +
          (((C26067 * C49236 + C26068 * C49225 + (C26084 + C26083) * C49206) *
                C22560 +
            ((C24526 + C24525) * C49236 + (C25872 + C25871) * C49225 +
             (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
              C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
              C23764 * C10365 + C48848 * C10367) *
                 C49206) *
                C49003) *
               C49200 -
           (((C25871 + C25872) * C49206 + (C24525 + C24526) * C49225 +
             (C23972 + C23971) * C49236) *
                C49003 +
            (C26077 * C49206 + C26078 * C49225 + (C23970 + C23969) * C49236) *
                C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
           C24350 * C49178) *
              C871 -
          ((C24523 + C24524) * C48956 * C49178 +
           (C24525 + C24526) * C48956 * C49228 +
           (C24527 + C24528) * C48956 * C49238 +
           (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
            C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
               C48956 * C49242) *
              C872 +
          ((C23762 * C879 - C23763 * C874 - C23762 * C880 + C23756 * C889 +
            C23764 * C881 - C23765 * C875 - C23764 * C882 + C48848 * C890) *
               C48956 * C49242 +
           (C23762 * C2324 - C23763 * C2318 - C23762 * C2325 + C23756 * C2336 +
            C23764 * C2326 - C23765 * C2319 - C23764 * C2327 + C48848 * C2337) *
               C48956 * C49238 +
           (C23762 * C2330 - C23763 * C2321 - C23762 * C2331 + C23756 * C2339 +
            C23764 * C2332 - C23765 * C2322 - C23764 * C2333 + C48848 * C2340) *
               C48956 * C49228 +
           (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 + C23756 * C9898 +
            C23764 * C10157 - C23765 * C10156 - C23764 * C10158 +
            C48848 * C10159) *
               C48956 * C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
              C871 -
          ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
           (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
            C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
            C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
            C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
               C48956 * C22560) *
              C872 +
          ((C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889 +
            C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
            C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
            C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892) *
               C48956 * C22560 +
           (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
            C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
            C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
            C22568 * C2602 - C22569 * C2601 - C22568 * C2603 + C49169 * C2604) *
               C48956 * C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49236 +
            (C25511 + C25512) * C49225 + C26619 * C49206) *
               C22560 +
           ((C23969 + C23970) * C49236 + C26067 * C49225 + C26068 * C49206) *
               C49003) *
              C871 -
          (((C26083 + C26084) * C49206 + C26077 * C49225 + C26078 * C49236) *
               C49003 +
           ((C26632 + C26633) * C49206 + (C25514 + C25513) * C49225 +
            (C25512 + C25511) * C49236) *
               C22560) *
              C872 +
          ((C26619 * C49236 + (C26633 + C26632) * C49225 +
            (C23762 * C3691 - C23763 * C3688 - C23762 * C3692 + C23756 * C3697 +
             C23764 * C3693 - C23765 * C3689 - C23764 * C3694 +
             C48848 * C3698) *
                C49206) *
               C22560 +
           (C26068 * C49236 + (C26084 + C26083) * C49225 +
            (C23762 * C11238 - C23763 * C11236 - C23762 * C11239 +
             C23756 * C11242 + C23764 * C18005 - C23765 * C18004 -
             C23764 * C18006 + C48848 * C18007) *
                C49206) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49171 +
            (C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367 +
             C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
             C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365) *
                C49043) *
               C22560 +
           ((C26974 + C26975 + C26976) * C49171 +
            (C27599 + C27598 + C27597) * C49043) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C48029 * C634 - C26754 * C626 - C48029 * C635 + C26745 * C641 +
             C47979 * C632 - C48018 * C625 - C47979 * C633 + C48851 * C640 +
             C47983 * C630 - C48023 * C624 - C47983 * C631 + C48843 * C639) *
                C49043 +
            (C26982 + C26981 + C26980) * C49171) *
               C49003 +
           ((C48029 * C353 - C26754 * C346 - C48029 * C354 + C26745 * C364 +
             C47979 * C355 - C48018 * C347 - C47979 * C356 + C48851 * C365 +
             C47983 * C357 - C48023 * C348 - C47983 * C358 + C48843 * C366) *
                C49043 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C49171) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C47983 * C134 - C48023 * C125 - C47983 * C135 + C48843 * C146 +
             C47979 * C136 - C48018 * C126 - C47979 * C137 + C48851 * C147 +
             C48029 * C138 - C26754 * C127 - C48029 * C139 + C26745 * C148) *
                C49171 +
            (C47983 * C355 - C48023 * C347 - C47983 * C356 + C48843 * C365 +
             C47979 * C353 - C48018 * C346 - C47979 * C354 + C48851 * C364 +
             C48029 * C351 - C26754 * C345 - C48029 * C352 + C26745 * C363) *
                C49043) *
               C22560 +
           ((C47983 * C247 - C48023 * C239 - C47983 * C248 + C48843 * C257 +
             C47979 * C245 - C48018 * C238 - C47979 * C246 + C48851 * C256 +
             C48029 * C243 - C26754 * C237 - C48029 * C244 + C26745 * C255) *
                C49171 +
            (C47983 * C632 - C48023 * C625 - C47983 * C633 + C48843 * C640 +
             C47979 * C634 - C48018 * C626 - C47979 * C635 + C48851 * C641 +
             C48029 * C636 - C26754 * C627 - C48029 * C637 + C26745 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C47983 * C359 - C48023 * C349 - C47983 * C360 + C48843 * C367 +
              C47979 * C357 - C48018 * C348 - C47979 * C358 + C48851 * C366 +
              C48029 * C355 - C26754 * C347 - C48029 * C356 + C26745 * C365) *
                 C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 +
             (C27599 + C27598 + C27597) * C49043) *
                C49003) *
               C48926 * C233 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C49171) *
                C49003 +
            ((C27597 + C27598 + C27599) * C49043 +
             (C26976 + C26975 + C26974) * C49171) *
                C22560) *
               C48926 * C49198) *
              C235 +
          ((((C26980 + C26981 + C26982) * C49171 +
             (C28360 + C28361 + C28362) * C49043) *
                C22560 +
            ((C26983 + C26984 + C26985) * C49171 +
             (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 +
              C48843 * C1421 + C47979 * C1412 - C48018 * C1408 -
              C47979 * C1413 + C48851 * C1420 + C48029 * C1418 -
              C26754 * C1411 - C48029 * C1419 + C26745 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C49171) *
                C49003 +
            ((C48029 * C353 - C26754 * C346 - C48029 * C354 + C26745 * C364 +
              C47979 * C355 - C48018 * C347 - C47979 * C356 + C48851 * C365 +
              C47983 * C357 - C48023 * C348 - C47983 * C358 + C48843 * C366) *
                 C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C49171) *
                C22560) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C28593 + C28594 + C28595) * C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 +
             (C27599 + C27598 + C27597) * C49043) *
                C49003) *
               C343 -
           (((C48029 * C2328 - C26754 * C2320 - C48029 * C2329 +
              C26745 * C2338 + C47979 * C2326 - C48018 * C2319 -
              C47979 * C2327 + C48851 * C2337 + C47983 * C2324 -
              C48023 * C2318 - C47983 * C2325 + C48843 * C2336) *
                 C49043 +
             (C27597 + C27598 + C27599) * C49171) *
                C49003 +
            ((C48029 * C883 - C26754 * C876 - C48029 * C884 + C26745 * C891 +
              C47979 * C881 - C48018 * C875 - C47979 * C882 + C48851 * C890 +
              C47983 * C879 - C48023 * C874 - C47983 * C880 + C48843 * C889) *
                 C49043 +
             (C28595 + C28594 + C28593) * C49171) *
                C22560) *
               C49200) *
              C48909 * C235 +
          ((((C28596 + C28597 + C28598) * C49171 +
             (C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890 +
              C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
              C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892) *
                 C49043) *
                C22560 +
            ((C28360 + C28361 + C28362) * C49171 +
             (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 +
              C48843 * C2337 + C47979 * C2328 - C48018 * C2320 -
              C47979 * C2329 + C48851 * C2338 + C48029 * C2602 -
              C26754 * C2601 - C48029 * C2603 + C26745 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C49171) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C49171) *
                C22560) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C28593 + C28594 + C28595) * C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 +
             (C27599 + C27598 + C27597) * C49043) *
                C49003) *
               C48926 * C451 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C49171) *
                C49003 +
            ((C27597 + C27598 + C27599) * C49043 +
             (C26976 + C26975 + C26974) * C49171) *
                C22560) *
               C48926 * C49198) *
              C453 +
          ((((C26980 + C26981 + C26982) * C49171 +
             (C28360 + C28361 + C28362) * C49043) *
                C22560 +
            ((C26983 + C26984 + C26985) * C49171 +
             (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 +
              C48843 * C1421 + C47979 * C1412 - C48018 * C1408 -
              C47979 * C1413 + C48851 * C1420 + C48029 * C1418 -
              C26754 * C1411 - C48029 * C1419 + C26745 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C49171) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C49171) *
                C22560) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49171 +
            (C28593 + C28594 + C28595) * C49043) *
               C22560 +
           ((C26974 + C26975 + C26976) * C49171 +
            (C27599 + C27598 + C27597) * C49043) *
               C49003) *
              C48926 * C517 -
          (((C27594 + C27595 + C27596) * C49043 +
            (C26979 + C26978 + C26977) * C49171) *
               C49003 +
           ((C27597 + C27598 + C27599) * C49043 +
            (C26976 + C26975 + C26974) * C49171) *
               C22560) *
              C48926 * C518 +
          ((C27401 * C49171 + (C27596 + C27595 + C27594) * C49043) * C22560 +
           ((C27411 + C27410 + C27409) * C49171 +
            (C47983 * C1865 - C48023 * C1862 - C47983 * C1866 + C48843 * C1871 +
             C47979 * C1867 - C48018 * C1863 - C47979 * C1868 + C48851 * C1872 +
             C48029 * C1869 - C26754 * C1864 - C48029 * C1870 +
             C26745 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C28593 + C28594 + C28595) * C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 + C29147 * C49043) * C49003) *
               C343 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C49171) * C49003 +
            ((C48029 * C883 - C26754 * C876 - C48029 * C884 + C26745 * C891 +
              C47979 * C881 - C48018 * C875 - C47979 * C882 + C48851 * C890 +
              C47983 * C879 - C48023 * C874 - C47983 * C880 + C48843 * C889) *
                 C49043 +
             (C28595 + C28594 + C28593) * C49171) *
                C22560) *
               C49200) *
              C451 +
          (((C29147 * C49171 + (C29157 + C29156 + C29155) * C49043) * C22560 +
            ((C27596 + C27595 + C27594) * C49171 +
             (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 +
              C48843 * C2339 + C47979 * C2332 - C48018 * C2322 -
              C47979 * C2333 + C48851 * C2340 + C48029 * C2334 -
              C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C49171) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C49171) * C22560) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C28593 + C28594 + C28595) * C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 + C29147 * C49043) * C49003) *
               C725 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C49171) * C49003 +
            ((C48029 * C883 - C26754 * C876 - C48029 * C884 + C26745 * C891 +
              C47979 * C881 - C48018 * C875 - C47979 * C882 + C48851 * C890 +
              C47983 * C879 - C48023 * C874 - C47983 * C880 + C48843 * C889) *
                 C49043 +
             (C28595 + C28594 + C28593) * C49171) *
                C22560) *
               C49200) *
              C48909 * C453 +
          ((((C28596 + C28597 + C28598) * C49171 +
             (C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890 +
              C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
              C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892) *
                 C49043) *
                C22560 +
            ((C28360 + C28361 + C28362) * C49171 +
             (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 +
              C48843 * C2337 + C47979 * C2328 - C48018 * C2320 -
              C47979 * C2329 + C48851 * C2338 + C48029 * C2602 -
              C26754 * C2601 - C48029 * C2603 + C26745 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C49171) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C49171) *
                C22560) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C49171 +
             (C28593 + C28594 + C28595) * C49043) *
                C22560 +
            ((C26974 + C26975 + C26976) * C49171 + C29147 * C49043) * C49003) *
               C725 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C49171) * C49003 +
            ((C48029 * C883 - C26754 * C876 - C48029 * C884 + C26745 * C891 +
              C47979 * C881 - C48018 * C875 - C47979 * C882 + C48851 * C890 +
              C47983 * C879 - C48023 * C874 - C47983 * C880 + C48843 * C889) *
                 C49043 +
             (C28595 + C28594 + C28593) * C49171) *
                C22560) *
               C49200) *
              C233 +
          (((C29147 * C49171 + (C29157 + C29156 + C29155) * C49043) * C22560 +
            ((C27596 + C27595 + C27594) * C49171 +
             (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 +
              C48843 * C2339 + C47979 * C2332 - C48018 * C2322 -
              C47979 * C2333 + C48851 * C2340 + C48029 * C2334 -
              C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C49171) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C49171) * C22560) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49171 +
            (C28593 + C28594 + C28595) * C49043) *
               C22560 +
           ((C26974 + C26975 + C26976) * C49171 + C29147 * C49043) * C49003) *
              C871 -
          (((C29155 + C29156 + C29157) * C49043 + C29151 * C49171) * C49003 +
           ((C29710 + C29711 + C29712) * C49043 +
            (C28595 + C28594 + C28593) * C49171) *
               C22560) *
              C872 +
          (((C29712 + C29711 + C29710) * C49171 +
            (C47983 * C2759 - C48023 * C2753 - C47983 * C2760 + C48843 * C2765 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C48029 * C2755 - C26754 * C2751 - C48029 * C2756 +
             C26745 * C2763) *
                C49043) *
               C22560 +
           ((C29157 + C29156 + C29155) * C49171 +
            (C47983 * C3256 - C48023 * C3253 - C47983 * C3257 + C48843 * C3262 +
             C47979 * C3258 - C48018 * C3254 - C47979 * C3259 + C48851 * C3263 +
             C48029 * C3260 - C26754 * C3255 - C48029 * C3261 +
             C26745 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22562 * C251 - C22563 * C241 - C22562 * C252 + C49241 * C259 +
            C22564 * C249 - C22565 * C240 - C22564 * C250 + C49234 * C258 +
            C22566 * C247 - C22567 * C239 - C22566 * C248 + C49221 * C257 +
            C22568 * C245 - C22569 * C238 - C22568 * C246 + C49169 * C256) *
               C48956 * C49003) *
              C48926 * C48909 * C110 -
          ((C22568 * C243 - C22569 * C237 - C22568 * C244 + C49169 * C255 +
            C22566 * C245 - C22567 * C238 - C22566 * C246 + C49221 * C256 +
            C22564 * C247 - C22565 * C239 - C22564 * C248 + C49234 * C257 +
            C22562 * C249 - C22563 * C240 - C22562 * C250 + C49241 * C258) *
               C48956 * C49003 +
           (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
            C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
            C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
            C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
               C48956 * C22560) *
              C48926 * C48909 * C111 +
          ((C22562 * C134 - C22563 * C125 - C22562 * C135 + C49241 * C146 +
            C22564 * C136 - C22565 * C126 - C22564 * C137 + C49234 * C147 +
            C22566 * C138 - C22567 * C127 - C22566 * C139 + C49221 * C148 +
            C22568 * C140 - C22569 * C128 - C22568 * C141 + C49169 * C149) *
               C48956 * C22560 +
           (C22562 * C247 - C22563 * C239 - C22562 * C248 + C49241 * C257 +
            C22564 * C245 - C22565 * C238 - C22564 * C246 + C49234 * C256 +
            C22566 * C243 - C22567 * C237 - C22566 * C244 + C49221 * C255 +
            C22568 * C253 - C22569 * C242 - C22568 * C254 + C49169 * C260) *
               C48956 * C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23762 * C251 - C23763 * C241 - C23762 * C252 + C23756 * C259 +
            C23764 * C249 - C23765 * C240 - C23764 * C250 + C48848 * C258) *
               C48956 * C49238 +
           (C23762 * C526 - C23763 * C521 - C23762 * C527 + C23756 * C536 +
            C23764 * C528 - C23765 * C522 - C23764 * C529 + C48848 * C537) *
               C48956 * C49228 +
           (C23762 * C1170 - C23763 * C1164 - C23762 * C1171 + C23756 * C1176 +
            C23764 * C1168 - C23765 * C1163 - C23764 * C1169 + C48848 * C1175) *
               C48956 * C49178) *
              C48926 * C48909 * C110 -
          ((C23764 * C1166 - C23765 * C1162 - C23764 * C1167 + C48848 * C1174 +
            C23762 * C1168 - C23763 * C1163 - C23762 * C1169 + C23756 * C1175) *
               C48956 * C49178 +
           (C23764 * C530 - C23765 * C523 - C23764 * C531 + C48848 * C538 +
            C23762 * C528 - C23763 * C522 - C23762 * C529 + C23756 * C537) *
               C48956 * C49228 +
           (C23764 * C247 - C23765 * C239 - C23764 * C248 + C48848 * C257 +
            C23762 * C249 - C23763 * C240 - C23762 * C250 + C23756 * C258) *
               C48956 * C49238 +
           (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
            C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
               C48956 * C49242) *
              C48926 * C48909 * C111 +
          ((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
            C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
               C48956 * C49242 +
           (C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
            C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
               C48956 * C49238 +
           (C23762 * C530 - C23763 * C523 - C23762 * C531 + C23756 * C538 +
            C23764 * C532 - C23765 * C524 - C23764 * C533 + C48848 * C539) *
               C48956 * C49228 +
           (C23762 * C1166 - C23763 * C1162 - C23762 * C1167 + C23756 * C1174 +
            C23764 * C1172 - C23765 * C1165 - C23764 * C1173 + C48848 * C1177) *
               C48956 * C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C48926 * C233 -
           ((C22568 * C532 - C22569 * C524 - C22568 * C533 + C49169 * C539 +
             C22566 * C530 - C22567 * C523 - C22566 * C531 + C49221 * C538 +
             C22564 * C528 - C22565 * C522 - C22564 * C529 + C49234 * C537 +
             C22562 * C526 - C22563 * C521 - C22562 * C527 + C49241 * C536) *
                C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C48926 * C49198) *
              C235 +
          (((C22753 + C22754 + C22755 + C22756) * C48956 * C22560 +
            (C22562 * C528 - C22563 * C522 - C22562 * C529 + C49241 * C537 +
             C22564 * C530 - C22565 * C523 - C22564 * C531 + C49234 * C538 +
             C22566 * C532 - C22567 * C524 - C22566 * C533 + C49221 * C539 +
             C22568 * C534 - C22569 * C525 - C22568 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C48926 * C233 -
           ((C23764 * C1685 - C23765 * C1681 - C23764 * C1686 + C48848 * C1690 +
             C23762 * C1683 - C23763 * C1680 - C23762 * C1684 +
             C23756 * C1689) *
                C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C48926 * C49198) *
              C235 +
          (((C23975 + C23976) * C48956 * C49242 +
            (C23977 + C23978) * C48956 * C49238 +
            (C23979 + C23980) * C48956 * C49228 +
            (C23762 * C1685 - C23763 * C1681 - C23762 * C1686 + C23756 * C1690 +
             C23764 * C1687 - C23765 * C1682 - C23764 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C343 -
           ((C22568 * C634 - C22569 * C626 - C22568 * C635 + C49169 * C641 +
             C22566 * C632 - C22567 * C625 - C22566 * C633 + C49221 * C640 +
             C22564 * C630 - C22565 * C624 - C22564 * C631 + C49234 * C639 +
             C22562 * C628 - C22563 * C623 - C22562 * C629 + C49241 * C638) *
                C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C48909 * C235 +
          (((C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363) *
                C48956 * C22560 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C343 -
           ((C23764 * C1867 - C23765 * C1863 - C23764 * C1868 + C48848 * C1872 +
             C23762 * C1865 - C23763 * C1862 - C23762 * C1866 +
             C23756 * C1871) *
                C48956 * C49178 +
            (C23764 * C1414 - C23765 * C1409 - C23764 * C1415 + C48848 * C1421 +
             C23762 * C1416 - C23763 * C1410 - C23762 * C1417 +
             C23756 * C1422) *
                C48956 * C49228 +
            (C23764 * C630 - C23765 * C624 - C23764 * C631 + C48848 * C639 +
             C23762 * C628 - C23763 * C623 - C23762 * C629 + C23756 * C638) *
                C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C48909 * C235 +
          (((C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366 +
             C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365) *
                C48956 * C49242 +
            (C23762 * C630 - C23763 * C624 - C23762 * C631 + C23756 * C639 +
             C23764 * C632 - C23765 * C625 - C23764 * C633 + C48848 * C640) *
                C48956 * C49238 +
            (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 + C23756 * C1421 +
             C23764 * C1412 - C23765 * C1408 - C23764 * C1413 +
             C48848 * C1420) *
                C48956 * C49228 +
            (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 + C23756 * C1872 +
             C23764 * C1869 - C23765 * C1864 - C23764 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C48926 * C451 -
           ((C22568 * C532 - C22569 * C524 - C22568 * C533 + C49169 * C539 +
             C22566 * C530 - C22567 * C523 - C22566 * C531 + C49221 * C538 +
             C22564 * C528 - C22565 * C522 - C22564 * C529 + C49234 * C537 +
             C22562 * C526 - C22563 * C521 - C22562 * C527 + C49241 * C536) *
                C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C48926 * C49198) *
              C453 +
          (((C22753 + C22754 + C22755 + C22756) * C48956 * C22560 +
            (C22562 * C528 - C22563 * C522 - C22562 * C529 + C49241 * C537 +
             C22564 * C530 - C22565 * C523 - C22564 * C531 + C49234 * C538 +
             C22566 * C532 - C22567 * C524 - C22566 * C533 + C49221 * C539 +
             C22568 * C534 - C22569 * C525 - C22568 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 +
            (C23971 + C23972) * C48956 * C49228 +
            (C23973 + C23974) * C48956 * C49178) *
               C48926 * C451 -
           ((C23764 * C1685 - C23765 * C1681 - C23764 * C1686 + C48848 * C1690 +
             C23762 * C1683 - C23763 * C1680 - C23762 * C1684 +
             C23756 * C1689) *
                C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C48926 * C49198) *
              C453 +
          (((C23975 + C23976) * C48956 * C49242 +
            (C23977 + C23978) * C48956 * C49238 +
            (C23979 + C23980) * C48956 * C49228 +
            (C23762 * C1685 - C23763 * C1681 - C23762 * C1686 + C23756 * C1690 +
             C23764 * C1687 - C23765 * C1682 - C23764 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
              C48926 * C517 -
          ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
           (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
              C48926 * C518 +
          ((C23142 + C23141 + C23140 + C23139) * C48956 * C22560 +
           (C22562 * C1170 - C22563 * C1164 - C22562 * C1171 + C49241 * C1176 +
            C22564 * C1168 - C22565 * C1163 - C22564 * C1169 + C49234 * C1175 +
            C22566 * C1166 - C22567 * C1162 - C22566 * C1167 + C49221 * C1174 +
            C22568 * C1172 - C22569 * C1165 - C22568 * C1173 + C49169 * C1177) *
               C48956 * C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
           C24350 * C49178) *
              C48926 * C517 -
          ((C24355 + C24356) * C48956 * C49178 +
           (C23974 + C23973) * C48956 * C49228 +
           (C23972 + C23971) * C48956 * C49238 +
           (C23970 + C23969) * C48956 * C49242) *
              C48926 * C518 +
          (C24349 * C49242 + C24350 * C49238 +
           (C24356 + C24355) * C48956 * C49228 +
           (C23762 * C9232 - C23763 * C9230 - C23762 * C9233 + C23756 * C9236 +
            C23764 * C9234 - C23765 * C9231 - C23764 * C9235 + C48848 * C9237) *
               C48956 * C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C343 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C451 +
          (((C23300 + C23299 + C23298 + C23297) * C48956 * C22560 +
            (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
             C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
             C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
             C22568 * C1418 - C22569 * C1411 - C22568 * C1419 +
             C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C343 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C451 +
          (((C24528 + C24527) * C48956 * C49242 +
            (C24526 + C24525) * C48956 * C49238 +
            (C24524 + C24523) * C48956 * C49228 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C24355 + C24356) * C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C725 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C48909 * C453 +
          (((C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363) *
                C48956 * C22560 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C22756 + C22755 + C22754 + C22753) * C48956 * C49003 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C48956 * C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C725 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C48909 * C453 +
          (((C23762 * C357 - C23763 * C348 - C23762 * C358 + C23756 * C366 +
             C23764 * C355 - C23765 * C347 - C23764 * C356 + C48848 * C365) *
                C48956 * C49242 +
            (C23762 * C630 - C23763 * C624 - C23762 * C631 + C23756 * C639 +
             C23764 * C632 - C23765 * C625 - C23764 * C633 + C48848 * C640) *
                C48956 * C49238 +
            (C23762 * C1414 - C23763 * C1409 - C23762 * C1415 + C23756 * C1421 +
             C23764 * C1412 - C23765 * C1408 - C23764 * C1413 +
             C48848 * C1420) *
                C48956 * C49228 +
            (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 + C23756 * C1872 +
             C23764 * C1869 - C23765 * C1864 - C23764 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C23980 + C23979) * C48956 * C49178 +
            (C23978 + C23977) * C48956 * C49228 +
            (C23976 + C23975) * C48956 * C49238 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C48956 * C49242) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C48956 * C22560 +
            (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
               C725 -
           ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
            (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
                C48956 * C22560) *
               C49200) *
              C233 +
          (((C23300 + C23299 + C23298 + C23297) * C48956 * C22560 +
            (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
             C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
             C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
             C22568 * C1418 - C22569 * C1411 - C22568 * C1419 +
             C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C23139 + C23140 + C23141 + C23142) * C48956 * C49003 +
            (C22752 + C22751 + C22750 + C22749) * C48956 * C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C48956 * C49242 +
            (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
            C24350 * C49178) *
               C725 -
           ((C24523 + C24524) * C48956 * C49178 +
            (C24525 + C24526) * C48956 * C49228 +
            (C24527 + C24528) * C48956 * C49238 +
            (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
             C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
                C48956 * C49242) *
               C49200) *
              C233 +
          (((C24528 + C24527) * C48956 * C49242 +
            (C24526 + C24525) * C48956 * C49238 +
            (C24524 + C24523) * C48956 * C49228 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C24355 + C24356) * C48956 * C49178 +
            (C23974 + C23973) * C48956 * C49228 +
            (C23972 + C23971) * C48956 * C49238 +
            (C23970 + C23969) * C48956 * C49242) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C48956 * C22560 +
           (C22749 + C22750 + C22751 + C22752) * C48956 * C49003) *
              C871 -
          ((C23297 + C23298 + C23299 + C23300) * C48956 * C49003 +
           (C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364 +
            C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
            C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
            C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367) *
               C48956 * C22560) *
              C872 +
          ((C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889 +
            C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
            C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
            C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892) *
               C48956 * C22560 +
           (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
            C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
            C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
            C22568 * C2602 - C22569 * C2601 - C22568 * C2603 + C49169 * C2604) *
               C48956 * C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C48956 * C49242 +
           (C23969 + C23970) * C48956 * C49238 + C24349 * C49228 +
           C24350 * C49178) *
              C871 -
          ((C24523 + C24524) * C48956 * C49178 +
           (C24525 + C24526) * C48956 * C49228 +
           (C24527 + C24528) * C48956 * C49238 +
           (C23764 * C357 - C23765 * C348 - C23764 * C358 + C48848 * C366 +
            C23762 * C359 - C23763 * C349 - C23762 * C360 + C23756 * C367) *
               C48956 * C49242) *
              C872 +
          ((C23762 * C879 - C23763 * C874 - C23762 * C880 + C23756 * C889 +
            C23764 * C881 - C23765 * C875 - C23764 * C882 + C48848 * C890) *
               C48956 * C49242 +
           (C23762 * C2324 - C23763 * C2318 - C23762 * C2325 + C23756 * C2336 +
            C23764 * C2326 - C23765 * C2319 - C23764 * C2327 + C48848 * C2337) *
               C48956 * C49238 +
           (C23762 * C2330 - C23763 * C2321 - C23762 * C2331 + C23756 * C2339 +
            C23764 * C2332 - C23765 * C2322 - C23764 * C2333 + C48848 * C2340) *
               C48956 * C49228 +
           (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 + C23756 * C9898 +
            C23764 * C10157 - C23765 * C10156 - C23764 * C10158 +
            C48848 * C10159) *
               C48956 * C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C31431 +
            (C13066 + C13067) * C49043) *
               C48999 +
           ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
           (C11932 * C31431 + C13411 * C49043) * C26748) *
              C48926 * C48909 * C110 -
          (((C12847 + C12846) * C49043 + (C11571 + C11570) * C31431) * C26748 +
           ((C12845 + C12844) * C49043 + (C11569 + C11568) * C31431) * C49006 +
           ((C13069 + C13068) * C49043 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C31431) *
               C48999) *
              C48926 * C48909 * C111 +
          (((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
             C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
                C31431 +
            (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
             C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
                C49043) *
               C48999 +
           ((C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
             C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
                C31431 +
            (C47973 * C632 - C11356 * C625 - C47973 * C633 + C49148 * C640 +
             C47954 * C634 - C11358 * C626 - C47954 * C635 + C48848 * C641) *
                C49043) *
               C49006 +
           ((C47973 * C530 - C11356 * C523 - C47973 * C531 + C49148 * C538 +
             C47954 * C532 - C11358 * C524 - C47954 * C533 + C48848 * C539) *
                C31431 +
            (C47973 * C1412 - C11356 * C1408 - C47973 * C1413 + C49148 * C1420 +
             C47954 * C1418 - C11358 * C1411 - C47954 * C1419 +
             C48848 * C1423) *
                C49043) *
               C26748) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            (C11932 * C31431 + C13411 * C49043) * C26748) *
               C48926 * C233 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C31431) * C26748 +
            (C13617 * C49043 + (C11565 + C11564) * C31431) * C49006 +
            (C13626 * C49043 + (C11563 + C11562) * C31431) * C48999) *
               C48926 * C49198) *
              C235 +
          ((((C11568 + C11569) * C31431 + (C12844 + C12845) * C49043) * C48999 +
            ((C11570 + C11571) * C31431 + (C12846 + C12847) * C49043) * C49006 +
            ((C11572 + C11573) * C31431 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C26748) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C31431) * C26748 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C31431) * C49006 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C31431) *
                C48999) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            (C11932 * C31431 + C13411 * C49043) * C26748) *
               C343 -
           (((C13635 + C13636) * C49043 + C13617 * C31431) * C26748 +
            (C19699 * C49043 + C13626 * C31431) * C49006 +
            ((C14185 + C14186) * C49043 + (C13067 + C13066) * C31431) *
                C48999) *
               C49200) *
              C48909 * C235 +
          ((((C13068 + C13069) * C31431 + (C19154 + C19155) * C49043) * C48999 +
            ((C12844 + C12845) * C31431 + (C18946 + C18947) * C49043) * C49006 +
            ((C12846 + C12847) * C31431 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C26748) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C31431) * C26748 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C31431) * C49006 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C31431) *
                C48999) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            (C11932 * C31431 + C13411 * C49043) * C26748) *
               C48926 * C451 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C31431) * C26748 +
            (C13617 * C49043 + (C11565 + C11564) * C31431) * C49006 +
            (C13626 * C49043 + (C11563 + C11562) * C31431) * C48999) *
               C48926 * C49198) *
              C453 +
          ((((C11568 + C11569) * C31431 + (C12844 + C12845) * C49043) * C48999 +
            ((C11570 + C11571) * C31431 + (C12846 + C12847) * C49043) * C49006 +
            ((C11572 + C11573) * C31431 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C26748) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C31431) * C26748 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C31431) * C49006 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C31431) *
                C48999) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C31431 +
            (C13066 + C13067) * C49043) *
               C48999 +
           ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
           C44352 * C26748) *
              C48926 * C517 -
          (((C12116 + C12117) * C49043 + (C11567 + C11566) * C31431) * C26748 +
           (C13617 * C49043 + (C11565 + C11564) * C31431) * C49006 +
           (C13626 * C49043 + (C11563 + C11562) * C31431) * C48999) *
              C48926 * C518 +
          (C44352 * C48999 +
           (C11933 * C31431 + (C12117 + C12116) * C49043) * C49006 +
           ((C11949 + C11948) * C31431 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C49043) *
               C26748) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            C44352 * C26748) *
               C343 -
           (((C13635 + C13636) * C49043 + C13617 * C31431) * C26748 +
            (C19699 * C49043 + C13626 * C31431) * C49006 +
            ((C14185 + C14186) * C49043 + (C13067 + C13066) * C31431) *
                C48999) *
               C49200) *
              C451 +
          (((C13608 * C31431 + C19690 * C49043) * C48999 +
            (C13411 * C31431 + (C13636 + C13635) * C49043) * C49006 +
            ((C12117 + C12116) * C31431 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C26748) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C31431) * C26748 +
            (C13617 * C49043 + (C11565 + C11564) * C31431) * C49006 +
            (C13626 * C49043 + (C11563 + C11562) * C31431) * C48999) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            C44352 * C26748) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C31431) * C26748 +
            (C19699 * C49043 + C13626 * C31431) * C49006 +
            ((C14185 + C14186) * C49043 + (C13067 + C13066) * C31431) *
                C48999) *
               C49200) *
              C48909 * C453 +
          ((((C13068 + C13069) * C31431 + (C19154 + C19155) * C49043) * C48999 +
            ((C12844 + C12845) * C31431 + (C18946 + C18947) * C49043) * C49006 +
            ((C12846 + C12847) * C31431 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C26748) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C31431) * C26748 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C31431) * C49006 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C31431) *
                C48999) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C31431 +
             (C13066 + C13067) * C49043) *
                C48999 +
            ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
            C44352 * C26748) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C31431) * C26748 +
            (C19699 * C49043 + C13626 * C31431) * C49006 +
            ((C14185 + C14186) * C49043 + (C13067 + C13066) * C31431) *
                C48999) *
               C49200) *
              C233 +
          (((C13608 * C31431 + C19690 * C49043) * C48999 +
            (C13411 * C31431 + (C13636 + C13635) * C49043) * C49006 +
            ((C12117 + C12116) * C31431 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C26748) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C31431) * C26748 +
            (C13617 * C49043 + (C11565 + C11564) * C31431) * C49006 +
            (C13626 * C49043 + (C11563 + C11562) * C31431) * C48999) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C31431 +
            (C13066 + C13067) * C49043) *
               C48999 +
           ((C11562 + C11563) * C31431 + C13608 * C49043) * C49006 +
           C44352 * C26748) *
              C871 -
          (((C13635 + C13636) * C49043 + C13617 * C31431) * C26748 +
           (C19699 * C49043 + C13626 * C31431) * C49006 +
           ((C14185 + C14186) * C49043 + (C13067 + C13066) * C31431) * C48999) *
              C872 +
          ((C20240 * C31431 + C21347 * C49043) * C48999 +
           (C19690 * C31431 + (C19705 + C19704) * C49043) * C49006 +
           ((C13636 + C13635) * C31431 +
            (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
             C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
             C47954 * C10365 + C48848 * C10367) *
                C49043) *
               C26748) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49039 +
            C10393 * C49046 + C10394 * C36919) *
               C48999 +
           (C9287 * C49039 + C9662 * C49046 + C10203 * C36919) * C49006 +
           (C9288 * C49039 + C9661 * C49046 + C10204 * C36919) * C26748) *
              C48926 * C48909 * C110 -
          ((C10208 * C36919 + C10207 * C49046 + C9292 * C49039) * C26748 +
           (C10206 * C36919 + C10205 * C49046 + C9291 * C49039) * C49006 +
           (C10396 * C36919 + C10395 * C49046 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49039) *
               C48999) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49039 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49046 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C36919) *
               C48999 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49039 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49046 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C36919) *
               C49006 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C49039 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49046 +
            (C9146 * C2334 - C9147 * C2323 - C9146 * C2335 + C48838 * C2341) *
                C36919) *
               C26748) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 +
            (C46942 + C46943 + C46944) * C26748) *
               C48926 * C233 -
           ((C10663 * C36919 + C9660 * C49046 + C9289 * C49039) * C26748 +
            (C46944 + C46943 + C46942) * C49006 +
            (C46941 + C46940 + C46939) * C48999) *
               C48926 * C49198) *
              C235 +
          (((C46945 + C46946 + C46947) * C48999 +
            (C46948 + C46949 + C46950) * C49006 +
            (C9293 * C49039 + C14432 * C49046 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C36919) *
                C26748) *
               C48926 * C49198 -
           ((C46950 + C46949 + C46948) * C26748 +
            (C46947 + C46946 + C46945) * C49006 +
            (C10396 * C36919 + C10395 * C49046 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49039) *
                C48999) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 +
            (C46942 + C46943 + C46944) * C26748) *
               C343 -
           ((C10831 * C36919 + C10204 * C49046 + C9661 * C49039) * C26748 +
            (C10832 * C36919 + C10203 * C49046 + C9662 * C49039) * C49006 +
            (C11251 * C36919 + C10394 * C49046 + C10393 * C49039) * C48999) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49039 + C10396 * C49046 + C18118 * C36919) * C48999 +
            (C10205 * C49039 + C10206 * C49046 + C21603 * C36919) * C49006 +
            (C10207 * C49039 + C10208 * C49046 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C36919) *
                C26748) *
               C49200 -
           ((C46950 + C46949 + C46948) * C26748 +
            (C46947 + C46946 + C46945) * C49006 +
            (C10396 * C36919 + C10395 * C49046 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49039) *
                C48999) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 +
            (C46942 + C46943 + C46944) * C26748) *
               C48926 * C451 -
           ((C10663 * C36919 + C9660 * C49046 + C9289 * C49039) * C26748 +
            (C46944 + C46943 + C46942) * C49006 +
            (C46941 + C46940 + C46939) * C48999) *
               C48926 * C49198) *
              C453 +
          (((C46945 + C46946 + C46947) * C48999 +
            (C46948 + C46949 + C46950) * C49006 +
            (C9293 * C49039 + C14432 * C49046 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C36919) *
                C26748) *
               C48926 * C49198 -
           ((C46950 + C46949 + C46948) * C26748 +
            (C46947 + C46946 + C46945) * C49006 +
            (C10396 * C36919 + C10395 * C49046 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49039) *
                C48999) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49039 +
            C10393 * C49046 + C10394 * C36919) *
               C48999 +
           (C46939 + C46940 + C46941) * C49006 + C47357 * C26748) *
              C48926 * C517 -
          ((C47354 + C47355 + C47356) * C26748 +
           (C46944 + C46943 + C46942) * C49006 +
           (C46941 + C46940 + C46939) * C48999) *
              C48926 * C518 +
          (C47357 * C48999 + (C47356 + C47355 + C47354) * C49006 +
           (C9290 * C49039 + C9659 * C49046 +
            (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                C36919) *
               C26748) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 + C47357 * C26748) *
               C343 -
           ((C47504 + C47505 + C47506) * C26748 +
            (C47507 + C47508 + C47509) * C49006 +
            (C11251 * C36919 + C10394 * C49046 + C10393 * C49039) * C48999) *
               C49200) *
              C451 +
          (((C47509 + C47508 + C47507) * C48999 +
            (C47506 + C47505 + C47504) * C49006 +
            (C9660 * C49039 + C10663 * C49046 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C36919) *
                C26748) *
               C49200 -
           ((C47354 + C47355 + C47356) * C26748 +
            (C46944 + C46943 + C46942) * C49006 +
            (C46941 + C46940 + C46939) * C48999) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 + C47357 * C26748) *
               C725 -
           ((C47504 + C47505 + C47506) * C26748 +
            (C47507 + C47508 + C47509) * C49006 +
            (C11251 * C36919 + C10394 * C49046 + C10393 * C49039) * C48999) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49039 + C10396 * C49046 + C18118 * C36919) * C48999 +
            (C10205 * C49039 + C10206 * C49046 + C21603 * C36919) * C49006 +
            (C10207 * C49039 + C10208 * C49046 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C36919) *
                C26748) *
               C49200 -
           ((C46950 + C46949 + C46948) * C26748 +
            (C46947 + C46946 + C46945) * C49006 +
            (C10396 * C36919 + C10395 * C49046 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49039) *
                C48999) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49039 +
             C10393 * C49046 + C10394 * C36919) *
                C48999 +
            (C46939 + C46940 + C46941) * C49006 + C47357 * C26748) *
               C725 -
           ((C47504 + C47505 + C47506) * C26748 +
            (C47507 + C47508 + C47509) * C49006 +
            (C11251 * C36919 + C10394 * C49046 + C10393 * C49039) * C48999) *
               C49200) *
              C233 +
          (((C47509 + C47508 + C47507) * C48999 +
            (C47506 + C47505 + C47504) * C49006 +
            (C9660 * C49039 + C10663 * C49046 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C36919) *
                C26748) *
               C49200 -
           ((C47354 + C47355 + C47356) * C26748 +
            (C46944 + C46943 + C46942) * C49006 +
            (C46941 + C46940 + C46939) * C48999) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49039 +
            C10393 * C49046 + C10394 * C36919) *
               C48999 +
           (C46939 + C46940 + C46941) * C49006 + C47357 * C26748) *
              C871 -
          ((C47504 + C47505 + C47506) * C26748 +
           (C47507 + C47508 + C47509) * C49006 +
           (C11251 * C36919 + C10394 * C49046 + C10393 * C49039) * C48999) *
              C872 +
          ((C10394 * C49039 + C11251 * C49046 + C18117 * C36919) * C48999 +
           (C10203 * C49039 + C10832 * C49046 + C18356 * C36919) * C49006 +
           (C10204 * C49039 + C10831 * C49046 +
            (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
             C48838 * C11243) *
                C36919) *
               C26748) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C9287 * C31431 + C9662 * C49043) * C49238 +
           (C9288 * C31431 + C9661 * C49043) * C49228 +
           (C9289 * C31431 + C9660 * C49043) * C49178) *
              C48926 * C48909 * C110 -
          ((C14432 * C49043 + C9293 * C31431) * C49178 +
           (C10207 * C49043 + C9292 * C31431) * C49228 +
           (C10205 * C49043 + C9291 * C31431) * C49238 +
           (C10395 * C49043 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C31431) *
               C49242) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C31431 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49043) *
               C49242 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C31431 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49043) *
               C49238 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C31431 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49043) *
               C49228 +
           ((C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
                C31431 +
            (C9146 * C1869 - C9147 * C1864 - C9146 * C1870 + C48838 * C1873) *
                C49043) *
               C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 +
            (C8676 + C8675 + C8674) * C49043) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639) *
                C49043 +
            (C8059 + C8058 + C8057) * C31431) *
               C49003 +
           ((C15775 + C15774 + C15773) * C49043 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C31431) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
             C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
             C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
                C31431 +
            (C7826 * C355 - C7827 * C347 - C7826 * C356 + C49232 * C365 +
             C7828 * C353 - C7829 * C346 - C7828 * C354 + C49219 * C364 +
             C7830 * C351 - C7831 * C345 - C7830 * C352 + C49192 * C363) *
                C49043) *
               C22560 +
           ((C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
             C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
             C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
                C31431 +
            (C7826 * C632 - C7827 * C625 - C7826 * C633 + C49232 * C640 +
             C7828 * C634 - C7829 * C626 - C7828 * C635 + C49219 * C641 +
             C7830 * C636 - C7831 * C627 - C7830 * C637 + C49192 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49243 +
            C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
               C22560 +
           (C9287 * C49243 + C9662 * C49240 + C10203 * C49231 +
            C10832 * C49185) *
               C49003) *
              C48926 * C48909 * C110 -
          ((C21603 * C49185 + C10206 * C49231 + C10205 * C49240 +
            C9291 * C49243) *
               C49003 +
           (C18118 * C49185 + C10396 * C49231 + C10395 * C49240 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49243) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49243 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49240 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C49231 +
            (C9146 * C2755 - C9147 * C2751 - C9146 * C2756 + C48838 * C2763) *
                C49185) *
               C22560 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49243 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49240 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C49231 +
            (C9146 * C3260 - C9147 * C3255 - C9146 * C3261 + C48838 * C3264) *
                C49185) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C48926 * C233 -
           ((C9659 * C49043 + C9290 * C31431) * C49178 +
            (C41523 + C41522) * C49228 + (C41521 + C41520) * C49238 +
            (C41519 + C41518) * C49242) *
               C48926 * C49198) *
              C235 +
          (((C41524 + C41525) * C49242 + (C41526 + C41527) * C49238 +
            (C41528 + C41529) * C49228 +
            (C9294 * C31431 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C48926 * C233 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            ((C8674 + C8675 + C8676) * C49043 +
             (C8053 + C8052 + C8051) * C31431) *
                C22560) *
               C48926 * C49198) *
              C235 +
          ((((C8057 + C8058 + C8059) * C31431 +
             (C40021 + C40022 + C40023) * C49043) *
                C22560 +
            ((C8060 + C8061 + C8062) * C31431 +
             (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
              C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
              C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C48926 * C233 -
           ((C10831 * C49185 + C10204 * C49231 + C9661 * C49240 +
             C9288 * C49243) *
                C49003 +
            (C42617 + C42616 + C42615 + C42614) * C22560) *
               C48926 * C49198) *
              C235 +
          (((C42618 + C42619 + C42620 + C42621) * C22560 +
            (C9292 * C49243 + C10207 * C49240 + C10208 * C49231 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49185) *
                C49003) *
               C48926 * C49198 -
           ((C42621 + C42620 + C42619 + C42618) * C49003 +
            (C18118 * C49185 + C10396 * C49231 + C10395 * C49240 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49243) *
                C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C343 -
           ((C10663 * C49043 + C9660 * C31431) * C49178 +
            (C10204 * C49043 + C9661 * C31431) * C49228 +
            (C10203 * C49043 + C9662 * C31431) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C31431 + C10396 * C49043) * C49242 +
            (C10205 * C31431 + C10206 * C49043) * C49238 +
            (C10207 * C31431 + C10208 * C49043) * C49228 +
            (C14432 * C31431 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C343 -
           (((C16201 + C16200 + C16199) * C49043 +
             (C8674 + C8675 + C8676) * C31431) *
                C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C48909 * C235 +
          ((((C15773 + C15774 + C15775) * C31431 +
             (C15776 + C15777 + C15778) * C49043) *
                C22560 +
            ((C40021 + C40022 + C40023) * C31431 +
             (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
              C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
              C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C343 -
           ((C18356 * C49185 + C10832 * C49231 + C10203 * C49240 +
             C9662 * C49243) *
                C49003 +
            (C18117 * C49185 + C11251 * C49231 + C10394 * C49240 +
             C10393 * C49243) *
                C22560) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49243 + C10396 * C49240 + C18118 * C49231 +
             C18119 * C49185) *
                C22560 +
            (C10205 * C49243 + C10206 * C49240 + C21603 * C49231 +
             (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
              C48838 * C18007) *
                 C49185) *
                C49003) *
               C49200 -
           ((C42621 + C42620 + C42619 + C42618) * C49003 +
            (C18118 * C49185 + C10396 * C49231 + C10395 * C49240 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49243) *
                C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C48926 * C451 -
           ((C9659 * C49043 + C9290 * C31431) * C49178 +
            (C41523 + C41522) * C49228 + (C41521 + C41520) * C49238 +
            (C41519 + C41518) * C49242) *
               C48926 * C49198) *
              C453 +
          (((C41524 + C41525) * C49242 + (C41526 + C41527) * C49238 +
            (C41528 + C41529) * C49228 +
            (C9294 * C31431 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C48926 * C451 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            ((C8674 + C8675 + C8676) * C49043 +
             (C8053 + C8052 + C8051) * C31431) *
                C22560) *
               C48926 * C49198) *
              C453 +
          ((((C8057 + C8058 + C8059) * C31431 +
             (C40021 + C40022 + C40023) * C49043) *
                C22560 +
            ((C8060 + C8061 + C8062) * C31431 +
             (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
              C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
              C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C48926 * C451 -
           ((C10831 * C49185 + C10204 * C49231 + C9661 * C49240 +
             C9288 * C49243) *
                C49003 +
            (C42617 + C42616 + C42615 + C42614) * C22560) *
               C48926 * C49198) *
              C453 +
          (((C42618 + C42619 + C42620 + C42621) * C22560 +
            (C9292 * C49243 + C10207 * C49240 + C10208 * C49231 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49185) *
                C49003) *
               C48926 * C49198 -
           ((C42621 + C42620 + C42619 + C42618) * C49003 +
            (C18118 * C49185 + C10396 * C49231 + C10395 * C49240 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49243) *
                C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
              C48926 * C517 -
          ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
           (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
              C48926 * C518 +
          (C41888 * C49242 + C41889 * C49238 + (C41891 + C41890) * C49228 +
           (C9547 * C31431 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C49043) *
               C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 +
            (C8676 + C8675 + C8674) * C49043) *
               C49003) *
              C48926 * C517 -
          (((C8671 + C8672 + C8673) * C49043 +
            (C8056 + C8055 + C8054) * C31431) *
               C49003 +
           ((C8674 + C8675 + C8676) * C49043 +
            (C8053 + C8052 + C8051) * C31431) *
               C22560) *
              C48926 * C518 +
          ((C8478 * C31431 + (C8673 + C8672 + C8671) * C49043) * C22560 +
           ((C8488 + C8487 + C8486) * C31431 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49243 +
            C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
               C22560 +
           (C42614 + C42615 + C42616 + C42617) * C49003) *
              C48926 * C517 -
          ((C42980 + C42981 + C42982 + C42983) * C49003 +
           (C42617 + C42616 + C42615 + C42614) * C22560) *
              C48926 * C518 +
          ((C42983 + C42982 + C42981 + C42980) * C22560 +
           (C9289 * C49243 + C9660 * C49240 + C10663 * C49231 +
            (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
             C48838 * C10813) *
                C49185) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C343 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C451 +
          (((C42027 + C42026) * C49242 + (C42025 + C42024) * C49238 +
            (C42023 + C42022) * C49228 +
            (C9659 * C31431 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
            (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C343 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C451 +
          (((C40754 * C31431 + (C16199 + C16200 + C16201) * C49043) * C22560 +
            ((C8673 + C8672 + C8671) * C31431 +
             (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
              C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
              C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            (C40755 * C49043 + (C8053 + C8052 + C8051) * C31431) * C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C343 -
           ((C43114 + C43115 + C43116 + C43117) * C49003 +
            (C18117 * C49185 + C11251 * C49231 + C10394 * C49240 +
             C10393 * C49243) *
                C22560) *
               C49200) *
              C451 +
          (((C43117 + C43116 + C43115 + C43114) * C22560 +
            (C9661 * C49243 + C10204 * C49240 + C10831 * C49231 +
             (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
              C48838 * C11243) *
                 C49185) *
                C49003) *
               C49200 -
           ((C42980 + C42981 + C42982 + C42983) * C49003 +
            (C42617 + C42616 + C42615 + C42614) * C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C725 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C31431 + C10396 * C49043) * C49242 +
            (C10205 * C31431 + C10206 * C49043) * C49238 +
            (C10207 * C31431 + C10208 * C49043) * C49228 +
            (C14432 * C31431 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C725 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C48909 * C453 +
          ((((C15773 + C15774 + C15775) * C31431 +
             (C15776 + C15777 + C15778) * C49043) *
                C22560 +
            ((C40021 + C40022 + C40023) * C31431 +
             (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
              C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
              C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C725 -
           ((C43114 + C43115 + C43116 + C43117) * C49003 +
            (C18117 * C49185 + C11251 * C49231 + C10394 * C49240 +
             C10393 * C49243) *
                C22560) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49243 + C10396 * C49240 + C18118 * C49231 +
             C18119 * C49185) *
                C22560 +
            (C10205 * C49243 + C10206 * C49240 + C21603 * C49231 +
             (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
              C48838 * C18007) *
                 C49185) *
                C49003) *
               C49200 -
           ((C42621 + C42620 + C42619 + C42618) * C49003 +
            (C18118 * C49185 + C10396 * C49231 + C10395 * C49240 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49243) *
                C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C725 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C233 +
          (((C42027 + C42026) * C49242 + (C42025 + C42024) * C49238 +
            (C42023 + C42022) * C49228 +
            (C9659 * C31431 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
            (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C725 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C233 +
          (((C40754 * C31431 + (C16199 + C16200 + C16201) * C49043) * C22560 +
            ((C8673 + C8672 + C8671) * C31431 +
             (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
              C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
              C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            (C40755 * C49043 + (C8053 + C8052 + C8051) * C31431) * C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49243 +
             C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
                C22560 +
            (C42614 + C42615 + C42616 + C42617) * C49003) *
               C725 -
           ((C43114 + C43115 + C43116 + C43117) * C49003 +
            (C18117 * C49185 + C11251 * C49231 + C10394 * C49240 +
             C10393 * C49243) *
                C22560) *
               C49200) *
              C233 +
          (((C43117 + C43116 + C43115 + C43114) * C22560 +
            (C9661 * C49243 + C10204 * C49240 + C10831 * C49231 +
             (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
              C48838 * C11243) *
                 C49185) *
                C49003) *
               C49200 -
           ((C42980 + C42981 + C42982 + C42983) * C49003 +
            (C42617 + C42616 + C42615 + C42614) * C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
              C871 -
          ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
           (C42026 + C42027) * C49238 +
           (C10394 * C49043 + C10393 * C31431) * C49242) *
              C872 +
          ((C10394 * C31431 + C11251 * C49043) * C49242 +
           (C10203 * C31431 + C10832 * C49043) * C49238 +
           (C10204 * C31431 + C10831 * C49043) * C49228 +
           (C10663 * C31431 + (C9146 * C10811 - C9147 * C10810 -
                               C9146 * C10812 + C48838 * C10813) *
                                  C49043) *
               C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
              C871 -
          (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
           ((C15772 + C15771 + C15770) * C49043 +
            (C15769 + C15768 + C15767) * C31431) *
               C22560) *
              C872 +
          ((C16617 * C31431 + (C16626 + C16625 + C16624) * C49043) * C22560 +
           ((C16199 + C16200 + C16201) * C31431 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49243 +
            C10393 * C49240 + C10394 * C49231 + C11251 * C49185) *
               C22560 +
           (C42614 + C42615 + C42616 + C42617) * C49003) *
              C871 -
          ((C43114 + C43115 + C43116 + C43117) * C49003 +
           (C18117 * C49185 + C11251 * C49231 + C10394 * C49240 +
            C10393 * C49243) *
               C22560) *
              C872 +
          ((C10394 * C49243 + C11251 * C49240 + C18117 * C49231 +
            C18593 * C49185) *
               C22560 +
           (C10203 * C49243 + C10832 * C49240 + C18356 * C49231 +
            (C9146 * C18346 - C9147 * C18345 - C9146 * C18347 +
             C48838 * C18348) *
                C49185) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49039 +
            (C13066 + C13067) * C49046 + C20240 * C36919) *
               C22560 +
           ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C18947 + C18946) * C36919 + (C12845 + C12844) * C49046 +
            (C11569 + C11568) * C49039) *
               C49003 +
           ((C19155 + C19154) * C36919 + (C13069 + C13068) * C49046 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C49039) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
             C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
                C49039 +
            (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
             C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
                C49046 +
            (C47973 * C883 - C11356 * C876 - C47973 * C884 + C49148 * C891 +
             C47954 * C885 - C11358 * C877 - C47954 * C886 + C48848 * C892) *
                C36919) *
               C22560 +
           ((C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
             C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
                C49039 +
            (C47973 * C632 - C11356 * C625 - C47973 * C633 + C49148 * C640 +
             C47954 * C634 - C11358 * C626 - C47954 * C635 + C48848 * C641) *
                C49046 +
            (C47973 * C2328 - C11356 * C2320 - C47973 * C2329 + C49148 * C2338 +
             C47954 * C2602 - C11358 * C2601 - C47954 * C2603 +
             C48848 * C2604) *
                C36919) *
               C49003) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C48926 * C233 -
           (((C13635 + C13636) * C36919 + C13617 * C49046 +
             (C11565 + C11564) * C49039) *
                C49003 +
            (C19699 * C36919 + C13626 * C49046 + (C11563 + C11562) * C49039) *
                C22560) *
               C48926 * C49198) *
              C235 +
          ((((C11568 + C11569) * C49039 + (C12844 + C12845) * C49046 +
             (C18946 + C18947) * C36919) *
                C22560 +
            ((C11570 + C11571) * C49039 + (C12846 + C12847) * C49046 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C36919) *
                C49003) *
               C48926 * C49198 -
           (((C18947 + C18946) * C36919 + (C12845 + C12844) * C49046 +
             (C11569 + C11568) * C49039) *
                C49003 +
            ((C19155 + C19154) * C36919 + (C13069 + C13068) * C49046 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49039) *
                C22560) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C343 -
           (((C19704 + C19705) * C36919 + C19699 * C49046 + C13626 * C49039) *
                C49003 +
            ((C20253 + C20254) * C36919 + (C14185 + C14186) * C49046 +
             (C13067 + C13066) * C49039) *
                C22560) *
               C49200) *
              C48909 * C235 +
          ((((C13068 + C13069) * C49039 + (C19154 + C19155) * C49046 +
             (C20629 + C20630) * C36919) *
                C22560 +
            ((C12844 + C12845) * C49039 + (C18946 + C18947) * C49046 +
             (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 +
              C49148 * C3263 + C47954 * C3260 - C11358 * C3255 -
              C47954 * C3261 + C48848 * C3264) *
                 C36919) *
                C49003) *
               C49200 -
           (((C18947 + C18946) * C36919 + (C12845 + C12844) * C49046 +
             (C11569 + C11568) * C49039) *
                C49003 +
            ((C19155 + C19154) * C36919 + (C13069 + C13068) * C49046 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49039) *
                C22560) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C48926 * C451 -
           (((C13635 + C13636) * C36919 + C13617 * C49046 +
             (C11565 + C11564) * C49039) *
                C49003 +
            (C19699 * C36919 + C13626 * C49046 + (C11563 + C11562) * C49039) *
                C22560) *
               C48926 * C49198) *
              C453 +
          ((((C11568 + C11569) * C49039 + (C12844 + C12845) * C49046 +
             (C18946 + C18947) * C36919) *
                C22560 +
            ((C11570 + C11571) * C49039 + (C12846 + C12847) * C49046 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C36919) *
                C49003) *
               C48926 * C49198 -
           (((C18947 + C18946) * C36919 + (C12845 + C12844) * C49046 +
             (C11569 + C11568) * C49039) *
                C49003 +
            ((C19155 + C19154) * C36919 + (C13069 + C13068) * C49046 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49039) *
                C22560) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49039 +
            (C13066 + C13067) * C49046 + C20240 * C36919) *
               C22560 +
           ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
               C49003) *
              C48926 * C517 -
          (((C13635 + C13636) * C36919 + C13617 * C49046 +
            (C11565 + C11564) * C49039) *
               C49003 +
           (C19699 * C36919 + C13626 * C49046 + (C11563 + C11562) * C49039) *
               C22560) *
              C48926 * C518 +
          ((C11932 * C49039 + C13411 * C49046 + (C13636 + C13635) * C36919) *
               C22560 +
           (C11933 * C49039 + (C12117 + C12116) * C49046 +
            (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 + C49148 * C9898 +
             C47954 * C10157 - C11358 * C10156 - C47954 * C10158 +
             C48848 * C10159) *
                C36919) *
               C49003) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C343 -
           (((C19704 + C19705) * C36919 + C19699 * C49046 + C13626 * C49039) *
                C49003 +
            ((C20253 + C20254) * C36919 + (C14185 + C14186) * C49046 +
             (C13067 + C13066) * C49039) *
                C22560) *
               C49200) *
              C451 +
          (((C13608 * C49039 + C19690 * C49046 + (C19705 + C19704) * C36919) *
                C22560 +
            (C13411 * C49039 + (C13636 + C13635) * C49046 +
             (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
              C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
              C47954 * C10365 + C48848 * C10367) *
                 C36919) *
                C49003) *
               C49200 -
           (((C13635 + C13636) * C36919 + C13617 * C49046 +
             (C11565 + C11564) * C49039) *
                C49003 +
            (C19699 * C36919 + C13626 * C49046 + (C11563 + C11562) * C49039) *
                C22560) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C725 -
           (((C19704 + C19705) * C36919 + C19699 * C49046 + C13626 * C49039) *
                C49003 +
            ((C20253 + C20254) * C36919 + (C14185 + C14186) * C49046 +
             (C13067 + C13066) * C49039) *
                C22560) *
               C49200) *
              C48909 * C453 +
          ((((C13068 + C13069) * C49039 + (C19154 + C19155) * C49046 +
             (C20629 + C20630) * C36919) *
                C22560 +
            ((C12844 + C12845) * C49039 + (C18946 + C18947) * C49046 +
             (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 +
              C49148 * C3263 + C47954 * C3260 - C11358 * C3255 -
              C47954 * C3261 + C48848 * C3264) *
                 C36919) *
                C49003) *
               C49200 -
           (((C18947 + C18946) * C36919 + (C12845 + C12844) * C49046 +
             (C11569 + C11568) * C49039) *
                C49003 +
            ((C19155 + C19154) * C36919 + (C13069 + C13068) * C49046 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49039) *
                C22560) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49039 +
             (C13066 + C13067) * C49046 + C20240 * C36919) *
                C22560 +
            ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
                C49003) *
               C725 -
           (((C19704 + C19705) * C36919 + C19699 * C49046 + C13626 * C49039) *
                C49003 +
            ((C20253 + C20254) * C36919 + (C14185 + C14186) * C49046 +
             (C13067 + C13066) * C49039) *
                C22560) *
               C49200) *
              C233 +
          (((C13608 * C49039 + C19690 * C49046 + (C19705 + C19704) * C36919) *
                C22560 +
            (C13411 * C49039 + (C13636 + C13635) * C49046 +
             (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
              C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
              C47954 * C10365 + C48848 * C10367) *
                 C36919) *
                C49003) *
               C49200 -
           (((C13635 + C13636) * C36919 + C13617 * C49046 +
             (C11565 + C11564) * C49039) *
                C49003 +
            (C19699 * C36919 + C13626 * C49046 + (C11563 + C11562) * C49039) *
                C22560) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49039 +
            (C13066 + C13067) * C49046 + C20240 * C36919) *
               C22560 +
           ((C11562 + C11563) * C49039 + C13608 * C49046 + C19690 * C36919) *
               C49003) *
              C871 -
          (((C19704 + C19705) * C36919 + C19699 * C49046 + C13626 * C49039) *
               C49003 +
           ((C20253 + C20254) * C36919 + (C14185 + C14186) * C49046 +
            (C13067 + C13066) * C49039) *
               C22560) *
              C872 +
          ((C20240 * C49039 + C21347 * C49046 + (C21361 + C21360) * C36919) *
               C22560 +
           (C19690 * C49039 + (C19705 + C19704) * C49046 +
            (C47973 * C11238 - C11356 * C11236 - C47973 * C11239 +
             C49148 * C11242 + C47954 * C18005 - C11358 * C18004 -
             C47954 * C18006 + C48848 * C18007) *
                C36919) *
               C49003) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 +
            (C8676 + C8675 + C8674) * C49043) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639) *
                C49043 +
            (C8059 + C8058 + C8057) * C31431) *
               C49003 +
           ((C15775 + C15774 + C15773) * C49043 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C31431) *
               C22560) *
              C48926 * C48909 * C111 +
          (((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
             C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
             C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
                C31431 +
            (C7826 * C355 - C7827 * C347 - C7826 * C356 + C49232 * C365 +
             C7828 * C353 - C7829 * C346 - C7828 * C354 + C49219 * C364 +
             C7830 * C351 - C7831 * C345 - C7830 * C352 + C49192 * C363) *
                C49043) *
               C22560 +
           ((C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
             C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
             C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
                C31431 +
            (C7826 * C632 - C7827 * C625 - C7826 * C633 + C49232 * C640 +
             C7828 * C634 - C7829 * C626 - C7828 * C635 + C49219 * C641 +
             C7830 * C636 - C7831 * C627 - C7830 * C637 + C49192 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C9287 * C31431 + C9662 * C49043) * C49238 +
           (C9288 * C31431 + C9661 * C49043) * C49228 +
           (C9289 * C31431 + C9660 * C49043) * C49178) *
              C48926 * C48909 * C110 -
          ((C14432 * C49043 + C9293 * C31431) * C49178 +
           (C10207 * C49043 + C9292 * C31431) * C49228 +
           (C10205 * C49043 + C9291 * C31431) * C49238 +
           (C10395 * C49043 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C31431) *
               C49242) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C31431 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49043) *
               C49242 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C31431 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49043) *
               C49238 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C31431 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49043) *
               C49228 +
           ((C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
                C31431 +
            (C9146 * C1869 - C9147 * C1864 - C9146 * C1870 + C48838 * C1873) *
                C49043) *
               C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C48926 * C233 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            ((C8674 + C8675 + C8676) * C49043 +
             (C8053 + C8052 + C8051) * C31431) *
                C22560) *
               C48926 * C49198) *
              C235 +
          ((((C8057 + C8058 + C8059) * C31431 +
             (C40021 + C40022 + C40023) * C49043) *
                C22560 +
            ((C8060 + C8061 + C8062) * C31431 +
             (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
              C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
              C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C48926 * C233 -
           ((C9659 * C49043 + C9290 * C31431) * C49178 +
            (C41523 + C41522) * C49228 + (C41521 + C41520) * C49238 +
            (C41519 + C41518) * C49242) *
               C48926 * C49198) *
              C235 +
          (((C41524 + C41525) * C49242 + (C41526 + C41527) * C49238 +
            (C41528 + C41529) * C49228 +
            (C9294 * C31431 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C343 -
           (((C16201 + C16200 + C16199) * C49043 +
             (C8674 + C8675 + C8676) * C31431) *
                C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C48909 * C235 +
          ((((C15773 + C15774 + C15775) * C31431 +
             (C15776 + C15777 + C15778) * C49043) *
                C22560 +
            ((C40021 + C40022 + C40023) * C31431 +
             (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
              C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
              C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C343 -
           ((C10663 * C49043 + C9660 * C31431) * C49178 +
            (C10204 * C49043 + C9661 * C31431) * C49228 +
            (C10203 * C49043 + C9662 * C31431) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C31431 + C10396 * C49043) * C49242 +
            (C10205 * C31431 + C10206 * C49043) * C49238 +
            (C10207 * C31431 + C10208 * C49043) * C49228 +
            (C14432 * C31431 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 +
             (C8676 + C8675 + C8674) * C49043) *
                C49003) *
               C48926 * C451 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            ((C8674 + C8675 + C8676) * C49043 +
             (C8053 + C8052 + C8051) * C31431) *
                C22560) *
               C48926 * C49198) *
              C453 +
          ((((C8057 + C8058 + C8059) * C31431 +
             (C40021 + C40022 + C40023) * C49043) *
                C22560 +
            ((C8060 + C8061 + C8062) * C31431 +
             (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
              C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
              C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + (C41520 + C41521) * C49228 +
            (C41522 + C41523) * C49178) *
               C48926 * C451 -
           ((C9659 * C49043 + C9290 * C31431) * C49178 +
            (C41523 + C41522) * C49228 + (C41521 + C41520) * C49238 +
            (C41519 + C41518) * C49242) *
               C48926 * C49198) *
              C453 +
          (((C41524 + C41525) * C49242 + (C41526 + C41527) * C49238 +
            (C41528 + C41529) * C49228 +
            (C9294 * C31431 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 +
            (C8676 + C8675 + C8674) * C49043) *
               C49003) *
              C48926 * C517 -
          (((C8671 + C8672 + C8673) * C49043 +
            (C8056 + C8055 + C8054) * C31431) *
               C49003 +
           ((C8674 + C8675 + C8676) * C49043 +
            (C8053 + C8052 + C8051) * C31431) *
               C22560) *
              C48926 * C518 +
          ((C8478 * C31431 + (C8673 + C8672 + C8671) * C49043) * C22560 +
           ((C8488 + C8487 + C8486) * C31431 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
              C48926 * C517 -
          ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
           (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
              C48926 * C518 +
          (C41888 * C49242 + C41889 * C49238 + (C41891 + C41890) * C49228 +
           (C9547 * C31431 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C49043) *
               C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C343 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C451 +
          (((C40754 * C31431 + (C16199 + C16200 + C16201) * C49043) * C22560 +
            ((C8673 + C8672 + C8671) * C31431 +
             (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
              C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
              C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            (C40755 * C49043 + (C8053 + C8052 + C8051) * C31431) * C22560) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C343 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C451 +
          (((C42027 + C42026) * C49242 + (C42025 + C42024) * C49238 +
            (C42023 + C42022) * C49228 +
            (C9659 * C31431 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
            (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C725 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C48909 * C453 +
          ((((C15773 + C15774 + C15775) * C31431 +
             (C15776 + C15777 + C15778) * C49043) *
                C22560 +
            ((C40021 + C40022 + C40023) * C31431 +
             (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
              C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
              C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C40023 + C40022 + C40021) * C49043 +
             (C8059 + C8058 + C8057) * C31431) *
                C49003 +
            ((C15775 + C15774 + C15773) * C49043 +
             (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
              C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
              C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                 C31431) *
                C22560) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C725 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C31431 + C10396 * C49043) * C49242 +
            (C10205 * C31431 + C10206 * C49043) * C49238 +
            (C10207 * C31431 + C10208 * C49043) * C49228 +
            (C14432 * C31431 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C41529 + C41528) * C49178 + (C41527 + C41526) * C49228 +
            (C41525 + C41524) * C49238 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C31431) *
                C49242) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
              C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
              C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                 C31431 +
             (C15767 + C15768 + C15769) * C49043) *
                C22560 +
            ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
               C725 -
           (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
            ((C15772 + C15771 + C15770) * C49043 +
             (C15769 + C15768 + C15767) * C31431) *
                C22560) *
               C49200) *
              C233 +
          (((C40754 * C31431 + (C16199 + C16200 + C16201) * C49043) * C22560 +
            ((C8673 + C8672 + C8671) * C31431 +
             (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
              C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
              C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C8671 + C8672 + C8673) * C49043 +
             (C8056 + C8055 + C8054) * C31431) *
                C49003 +
            (C40755 * C49043 + (C8053 + C8052 + C8051) * C31431) * C22560) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C31431 +
             C10393 * C49043) *
                C49242 +
            (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
               C725 -
           ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
            (C42026 + C42027) * C49238 +
            (C10394 * C49043 + C10393 * C31431) * C49242) *
               C49200) *
              C233 +
          (((C42027 + C42026) * C49242 + (C42025 + C42024) * C49238 +
            (C42023 + C42022) * C49228 +
            (C9659 * C31431 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C41890 + C41891) * C49178 + (C41523 + C41522) * C49228 +
            (C41521 + C41520) * C49238 + (C41519 + C41518) * C49242) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C31431 +
            (C15767 + C15768 + C15769) * C49043) *
               C22560 +
           ((C8051 + C8052 + C8053) * C31431 + C40754 * C49043) * C49003) *
              C871 -
          (((C16201 + C16200 + C16199) * C49043 + C40755 * C31431) * C49003 +
           ((C15772 + C15771 + C15770) * C49043 +
            (C15769 + C15768 + C15767) * C31431) *
               C22560) *
              C872 +
          ((C16617 * C31431 + (C16626 + C16625 + C16624) * C49043) * C22560 +
           ((C16199 + C16200 + C16201) * C31431 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C31431 +
            C10393 * C49043) *
               C49242 +
           (C41518 + C41519) * C49238 + C41888 * C49228 + C41889 * C49178) *
              C871 -
          ((C42022 + C42023) * C49178 + (C42024 + C42025) * C49228 +
           (C42026 + C42027) * C49238 +
           (C10394 * C49043 + C10393 * C31431) * C49242) *
              C872 +
          ((C10394 * C31431 + C11251 * C49043) * C49242 +
           (C10203 * C31431 + C10832 * C49043) * C49238 +
           (C10204 * C31431 + C10831 * C49043) * C49228 +
           (C10663 * C31431 + (C9146 * C10811 - C9147 * C10810 -
                               C9146 * C10812 + C48838 * C10813) *
                                  C49043) *
               C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C47973 * C251 - C11356 * C241 - C47973 * C252 + C49148 * C259 +
            C47954 * C249 - C11358 * C240 - C47954 * C250 + C48848 * C258) *
               C48956 * C11352 +
           (C47973 * C526 - C11356 * C521 - C47973 * C527 + C49148 * C536 +
            C47954 * C528 - C11358 * C522 - C47954 * C529 + C48848 * C537) *
               C48956 * C11353 +
           (C47973 * C1170 - C11356 * C1164 - C47973 * C1171 + C49148 * C1176 +
            C47954 * C1168 - C11358 * C1163 - C47954 * C1169 + C48848 * C1175) *
               C48956 * C49178) *
              C48926 * C48909 * C110 -
          ((C47954 * C1166 - C11358 * C1162 - C47954 * C1167 + C48848 * C1174 +
            C47973 * C1168 - C11356 * C1163 - C47973 * C1169 + C49148 * C1175) *
               C48956 * C49178 +
           (C47954 * C530 - C11358 * C523 - C47954 * C531 + C48848 * C538 +
            C47973 * C528 - C11356 * C522 - C47973 * C529 + C49148 * C537) *
               C48956 * C11353 +
           (C47954 * C247 - C11358 * C239 - C47954 * C248 + C48848 * C257 +
            C47973 * C249 - C11356 * C240 - C47973 * C250 + C49148 * C258) *
               C48956 * C11352 +
           (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
            C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
               C48956 * C11351) *
              C48926 * C48909 * C111 +
          ((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
            C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
               C48956 * C11351 +
           (C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
            C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
               C48956 * C11352 +
           (C47973 * C530 - C11356 * C523 - C47973 * C531 + C49148 * C538 +
            C47954 * C532 - C11358 * C524 - C47954 * C533 + C48848 * C539) *
               C48956 * C11353 +
           (C47973 * C1166 - C11356 * C1162 - C47973 * C1167 + C49148 * C1174 +
            C47954 * C1172 - C11358 * C1165 - C47954 * C1173 + C48848 * C1177) *
               C48956 * C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C3827 * C251 - C3828 * C241 - C3827 * C252 + C3821 * C259 +
            C3829 * C249 - C3830 * C240 - C3829 * C250 + C3822 * C258 +
            C3831 * C247 - C3832 * C239 - C3831 * C248 + C3823 * C257 +
            C3833 * C245 - C3834 * C238 - C3833 * C246 + C49169 * C256) *
               C48956 * C49003) *
              C48926 * C48909 * C110 -
          ((C3833 * C243 - C3834 * C237 - C3833 * C244 + C49169 * C255 +
            C3831 * C245 - C3832 * C238 - C3831 * C246 + C3823 * C256 +
            C3829 * C247 - C3830 * C239 - C3829 * C248 + C3822 * C257 +
            C3827 * C249 - C3828 * C240 - C3827 * C250 + C3821 * C258) *
               C48956 * C49003 +
           (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
            C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
            C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
            C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
               C48956 * C49170) *
              C48926 * C48909 * C111 +
          ((C3827 * C134 - C3828 * C125 - C3827 * C135 + C3821 * C146 +
            C3829 * C136 - C3830 * C126 - C3829 * C137 + C3822 * C147 +
            C3831 * C138 - C3832 * C127 - C3831 * C139 + C3823 * C148 +
            C3833 * C140 - C3834 * C128 - C3833 * C141 + C49169 * C149) *
               C48956 * C49170 +
           (C3827 * C247 - C3828 * C239 - C3827 * C248 + C3821 * C257 +
            C3829 * C245 - C3830 * C238 - C3829 * C246 + C3822 * C256 +
            C3831 * C243 - C3832 * C237 - C3831 * C244 + C3823 * C255 +
            C3833 * C253 - C3834 * C242 - C3833 * C254 + C49169 * C260) *
               C48956 * C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C15399 +
            (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
               C49170 +
           ((C11562 + C11563) * C15399 + C13608 * C15400 +
            (C13638 + C13637) * C49206) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C47954 * C2328 - C11358 * C2320 - C47954 * C2329 + C48848 * C2338 +
             C47973 * C2326 - C11356 * C2319 - C47973 * C2327 +
             C49148 * C2337) *
                C49206 +
            (C12845 + C12844) * C15400 + (C11569 + C11568) * C15399) *
               C49003 +
           ((C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891 +
             C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890) *
                C49206 +
            (C13069 + C13068) * C15400 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C15399) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
             C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
                C15399 +
            (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
             C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
                C15400 +
            (C47973 * C883 - C11356 * C876 - C47973 * C884 + C49148 * C891 +
             C47954 * C885 - C11358 * C877 - C47954 * C886 + C48848 * C892) *
                C49206) *
               C49170 +
           ((C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
             C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
                C15399 +
            (C47973 * C632 - C11356 * C625 - C47973 * C633 + C49148 * C640 +
             C47954 * C634 - C11358 * C626 - C47954 * C635 + C48848 * C641) *
                C15400 +
            (C47973 * C2328 - C11356 * C2320 - C47973 * C2329 + C49148 * C2338 +
             C47954 * C2602 - C11358 * C2601 - C47954 * C2603 +
             C48848 * C2604) *
                C49206) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C48926 * C233 -
           ((C47954 * C1685 - C11358 * C1681 - C47954 * C1686 + C48848 * C1690 +
             C47973 * C1683 - C11356 * C1680 - C47973 * C1684 +
             C49148 * C1689) *
                C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C48926 * C49198) *
              C235 +
          (((C11568 + C11569) * C48956 * C11351 +
            (C11570 + C11571) * C48956 * C11352 +
            (C11572 + C11573) * C48956 * C11353 +
            (C47973 * C1685 - C11356 * C1681 - C47973 * C1686 + C49148 * C1690 +
             C47954 * C1687 - C11358 * C1682 - C47954 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C48926 * C233 -
           ((C3833 * C532 - C3834 * C524 - C3833 * C533 + C49169 * C539 +
             C3831 * C530 - C3832 * C523 - C3831 * C531 + C3823 * C538 +
             C3829 * C528 - C3830 * C522 - C3829 * C529 + C3822 * C537 +
             C3827 * C526 - C3828 * C521 - C3827 * C527 + C3821 * C536) *
                C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C48926 * C49198) *
              C235 +
          (((C4018 + C4019 + C4020 + C4021) * C48956 * C49170 +
            (C3827 * C528 - C3828 * C522 - C3827 * C529 + C3821 * C537 +
             C3829 * C530 - C3830 * C523 - C3829 * C531 + C3822 * C538 +
             C3831 * C532 - C3832 * C524 - C3831 * C533 + C3823 * C539 +
             C3833 * C534 - C3834 * C525 - C3833 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 +
             (C13638 + C13637) * C49206) *
                C49003) *
               C48926 * C233 -
           (((C13635 + C13636) * C49206 + C13617 * C15400 +
             (C11565 + C11564) * C15399) *
                C49003 +
            ((C13637 + C13638) * C49206 + C13626 * C15400 +
             (C11563 + C11562) * C15399) *
                C49170) *
               C48926 * C49198) *
              C235 +
          ((((C11568 + C11569) * C15399 + (C12844 + C12845) * C15400 +
             (C18946 + C18947) * C49206) *
                C49170 +
            ((C11570 + C11571) * C15399 + (C12846 + C12847) * C15400 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49206) *
                C49003) *
               C48926 * C49198 -
           (((C18947 + C18946) * C49206 + (C12845 + C12844) * C15400 +
             (C11569 + C11568) * C15399) *
                C49003 +
            ((C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891 +
              C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890) *
                 C49206 +
             (C13069 + C13068) * C15400 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C15399) *
                C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C343 -
           ((C47954 * C1867 - C11358 * C1863 - C47954 * C1868 + C48848 * C1872 +
             C47973 * C1865 - C11356 * C1862 - C47973 * C1866 +
             C49148 * C1871) *
                C48956 * C49178 +
            (C47954 * C1414 - C11358 * C1409 - C47954 * C1415 + C48848 * C1421 +
             C47973 * C1416 - C11356 * C1410 - C47973 * C1417 +
             C49148 * C1422) *
                C48956 * C11353 +
            (C47954 * C630 - C11358 * C624 - C47954 * C631 + C48848 * C639 +
             C47973 * C628 - C11356 * C623 - C47973 * C629 + C49148 * C638) *
                C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C48909 * C235 +
          (((C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366 +
             C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365) *
                C48956 * C11351 +
            (C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639 +
             C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640) *
                C48956 * C11352 +
            (C47973 * C1414 - C11356 * C1409 - C47973 * C1415 + C49148 * C1421 +
             C47954 * C1412 - C11358 * C1408 - C47954 * C1413 +
             C48848 * C1420) *
                C48956 * C11353 +
            (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 + C49148 * C1872 +
             C47954 * C1869 - C11358 * C1864 - C47954 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C343 -
           ((C3833 * C634 - C3834 * C626 - C3833 * C635 + C49169 * C641 +
             C3831 * C632 - C3832 * C625 - C3831 * C633 + C3823 * C640 +
             C3829 * C630 - C3830 * C624 - C3829 * C631 + C3822 * C639 +
             C3827 * C628 - C3828 * C623 - C3827 * C629 + C3821 * C638) *
                C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C48909 * C235 +
          (((C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363) *
                C48956 * C49170 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 +
             (C13638 + C13637) * C49206) *
                C49003) *
               C343 -
           (((C47954 * C3258 - C11358 * C3254 - C47954 * C3259 +
              C48848 * C3263 + C47973 * C3256 - C11356 * C3253 -
              C47973 * C3257 + C49148 * C3262) *
                 C49206 +
             (C13637 + C13638) * C15400 + C13626 * C15399) *
                C49003 +
            ((C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
              C48848 * C2764 + C47973 * C2759 - C11356 * C2753 -
              C47973 * C2760 + C49148 * C2765) *
                 C49206 +
             (C14185 + C14186) * C15400 + (C13067 + C13066) * C15399) *
                C49170) *
               C49200) *
              C48909 * C235 +
          ((((C13068 + C13069) * C15399 + (C19154 + C19155) * C15400 +
             (C47973 * C2757 - C11356 * C2752 - C47973 * C2758 +
              C49148 * C2764 + C47954 * C2755 - C11358 * C2751 -
              C47954 * C2756 + C48848 * C2763) *
                 C49206) *
                C49170 +
            ((C12844 + C12845) * C15399 + (C18946 + C18947) * C15400 +
             (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 +
              C49148 * C3263 + C47954 * C3260 - C11358 * C3255 -
              C47954 * C3261 + C48848 * C3264) *
                 C49206) *
                C49003) *
               C49200 -
           (((C18947 + C18946) * C49206 + (C12845 + C12844) * C15400 +
             (C11569 + C11568) * C15399) *
                C49003 +
            ((C19155 + C19154) * C49206 + (C13069 + C13068) * C15400 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C15399) *
                C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C48926 * C451 -
           ((C47954 * C1685 - C11358 * C1681 - C47954 * C1686 + C48848 * C1690 +
             C47973 * C1683 - C11356 * C1680 - C47973 * C1684 +
             C49148 * C1689) *
                C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C48926 * C49198) *
              C453 +
          (((C11568 + C11569) * C48956 * C11351 +
            (C11570 + C11571) * C48956 * C11352 +
            (C11572 + C11573) * C48956 * C11353 +
            (C47973 * C1685 - C11356 * C1681 - C47973 * C1686 + C49148 * C1690 +
             C47954 * C1687 - C11358 * C1682 - C47954 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C48926 * C451 -
           ((C3833 * C532 - C3834 * C524 - C3833 * C533 + C49169 * C539 +
             C3831 * C530 - C3832 * C523 - C3831 * C531 + C3823 * C538 +
             C3829 * C528 - C3830 * C522 - C3829 * C529 + C3822 * C537 +
             C3827 * C526 - C3828 * C521 - C3827 * C527 + C3821 * C536) *
                C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C48926 * C49198) *
              C453 +
          (((C4018 + C4019 + C4020 + C4021) * C48956 * C49170 +
            (C3827 * C528 - C3828 * C522 - C3827 * C529 + C3821 * C537 +
             C3829 * C530 - C3830 * C523 - C3829 * C531 + C3822 * C538 +
             C3831 * C532 - C3832 * C524 - C3831 * C533 + C3823 * C539 +
             C3833 * C534 - C3834 * C525 - C3833 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 +
             (C13638 + C13637) * C49206) *
                C49003) *
               C48926 * C451 -
           (((C13635 + C13636) * C49206 + C13617 * C15400 +
             (C11565 + C11564) * C15399) *
                C49003 +
            ((C13637 + C13638) * C49206 + C13626 * C15400 +
             (C11563 + C11562) * C15399) *
                C49170) *
               C48926 * C49198) *
              C453 +
          ((((C11568 + C11569) * C15399 + (C12844 + C12845) * C15400 +
             (C18946 + C18947) * C49206) *
                C49170 +
            ((C11570 + C11571) * C15399 + (C12846 + C12847) * C15400 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49206) *
                C49003) *
               C48926 * C49198 -
           (((C18947 + C18946) * C49206 + (C12845 + C12844) * C15400 +
             (C11569 + C11568) * C15399) *
                C49003 +
            ((C19155 + C19154) * C49206 + (C13069 + C13068) * C15400 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C15399) *
                C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
           C11943 * C49178) *
              C48926 * C517 -
          ((C11948 + C11949) * C48956 * C49178 +
           (C11567 + C11566) * C48956 * C11353 +
           (C11565 + C11564) * C48956 * C11352 +
           (C11563 + C11562) * C48956 * C11351) *
              C48926 * C518 +
          (C11942 * C11351 + C11943 * C11352 +
           (C11949 + C11948) * C48956 * C11353 +
           (C47973 * C9232 - C11356 * C9230 - C47973 * C9233 + C49148 * C9236 +
            C47954 * C9234 - C11358 * C9231 - C47954 * C9235 + C48848 * C9237) *
               C48956 * C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
              C48926 * C517 -
          ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
           (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
              C48926 * C518 +
          ((C4407 + C4406 + C4405 + C4404) * C48956 * C49170 +
           (C3827 * C1170 - C3828 * C1164 - C3827 * C1171 + C3821 * C1176 +
            C3829 * C1168 - C3830 * C1163 - C3829 * C1169 + C3822 * C1175 +
            C3831 * C1166 - C3832 * C1162 - C3831 * C1167 + C3823 * C1174 +
            C3833 * C1172 - C3834 * C1165 - C3833 * C1173 + C49169 * C1177) *
               C48956 * C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C15399 +
            (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
               C49170 +
           ((C11562 + C11563) * C15399 + C13608 * C15400 +
            (C13638 + C13637) * C49206) *
               C49003) *
              C48926 * C517 -
          (((C13635 + C13636) * C49206 + C13617 * C15400 +
            (C11565 + C11564) * C15399) *
               C49003 +
           ((C13637 + C13638) * C49206 + C13626 * C15400 +
            (C11563 + C11562) * C15399) *
               C49170) *
              C48926 * C518 +
          ((C11932 * C15399 + C13411 * C15400 + (C13636 + C13635) * C49206) *
               C49170 +
           (C11933 * C15399 + (C12117 + C12116) * C15400 +
            (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 + C49148 * C9898 +
             C47954 * C10157 - C11358 * C10156 - C47954 * C10158 +
             C48848 * C10159) *
                C49206) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C343 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C451 +
          (((C12121 + C12120) * C48956 * C11351 +
            (C12119 + C12118) * C48956 * C11352 +
            (C12117 + C12116) * C48956 * C11353 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C11948 + C11949) * C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C343 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C451 +
          (((C4565 + C4564 + C4563 + C4562) * C48956 * C49170 +
            (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
             C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
             C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
             C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 + C19690 * C49206) *
                C49003) *
               C343 -
           (((C19704 + C19705) * C49206 + C19699 * C15400 + C13626 * C15399) *
                C49003 +
            ((C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
              C48848 * C2764 + C47973 * C2759 - C11356 * C2753 -
              C47973 * C2760 + C49148 * C2765) *
                 C49206 +
             (C14185 + C14186) * C15400 + (C13067 + C13066) * C15399) *
                C49170) *
               C49200) *
              C451 +
          (((C13608 * C15399 + C19690 * C15400 + (C19705 + C19704) * C49206) *
                C49170 +
            (C13411 * C15399 + (C13636 + C13635) * C15400 +
             (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
              C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
              C47954 * C10365 + C48848 * C10367) *
                 C49206) *
                C49003) *
               C49200 -
           (((C13635 + C13636) * C49206 + C13617 * C15400 +
             (C11565 + C11564) * C15399) *
                C49003 +
            (C19699 * C49206 + C13626 * C15400 + (C11563 + C11562) * C15399) *
                C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C725 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C48909 * C453 +
          (((C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366 +
             C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365) *
                C48956 * C11351 +
            (C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639 +
             C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640) *
                C48956 * C11352 +
            (C47973 * C1414 - C11356 * C1409 - C47973 * C1415 + C49148 * C1421 +
             C47954 * C1412 - C11358 * C1408 - C47954 * C1413 +
             C48848 * C1420) *
                C48956 * C11353 +
            (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 + C49148 * C1872 +
             C47954 * C1869 - C11358 * C1864 - C47954 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C725 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C48909 * C453 +
          (((C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363) *
                C48956 * C49170 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 + C19690 * C49206) *
                C49003) *
               C725 -
           (((C19704 + C19705) * C49206 + C19699 * C15400 + C13626 * C15399) *
                C49003 +
            ((C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
              C48848 * C2764 + C47973 * C2759 - C11356 * C2753 -
              C47973 * C2760 + C49148 * C2765) *
                 C49206 +
             (C14185 + C14186) * C15400 + (C13067 + C13066) * C15399) *
                C49170) *
               C49200) *
              C48909 * C453 +
          ((((C13068 + C13069) * C15399 + (C19154 + C19155) * C15400 +
             (C47973 * C2757 - C11356 * C2752 - C47973 * C2758 +
              C49148 * C2764 + C47954 * C2755 - C11358 * C2751 -
              C47954 * C2756 + C48848 * C2763) *
                 C49206) *
                C49170 +
            ((C12844 + C12845) * C15399 + (C18946 + C18947) * C15400 +
             (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 +
              C49148 * C3263 + C47954 * C3260 - C11358 * C3255 -
              C47954 * C3261 + C48848 * C3264) *
                 C49206) *
                C49003) *
               C49200 -
           (((C18947 + C18946) * C49206 + (C12845 + C12844) * C15400 +
             (C11569 + C11568) * C15399) *
                C49003 +
            ((C19155 + C19154) * C49206 + (C13069 + C13068) * C15400 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C15399) *
                C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C725 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C233 +
          (((C12121 + C12120) * C48956 * C11351 +
            (C12119 + C12118) * C48956 * C11352 +
            (C12117 + C12116) * C48956 * C11353 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C11948 + C11949) * C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C725 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C233 +
          (((C4565 + C4564 + C4563 + C4562) * C48956 * C49170 +
            (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
             C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
             C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
             C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C15399 +
             (C13066 + C13067) * C15400 + (C14186 + C14185) * C49206) *
                C49170 +
            ((C11562 + C11563) * C15399 + C13608 * C15400 + C19690 * C49206) *
                C49003) *
               C725 -
           (((C19704 + C19705) * C49206 + C19699 * C15400 + C13626 * C15399) *
                C49003 +
            ((C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
              C48848 * C2764 + C47973 * C2759 - C11356 * C2753 -
              C47973 * C2760 + C49148 * C2765) *
                 C49206 +
             (C14185 + C14186) * C15400 + (C13067 + C13066) * C15399) *
                C49170) *
               C49200) *
              C233 +
          (((C13608 * C15399 + C19690 * C15400 + (C19705 + C19704) * C49206) *
                C49170 +
            (C13411 * C15399 + (C13636 + C13635) * C15400 +
             (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
              C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
              C47954 * C10365 + C48848 * C10367) *
                 C49206) *
                C49003) *
               C49200 -
           (((C13635 + C13636) * C49206 + C13617 * C15400 +
             (C11565 + C11564) * C15399) *
                C49003 +
            (C19699 * C49206 + C13626 * C15400 + (C11563 + C11562) * C15399) *
                C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
           C11943 * C49178) *
              C871 -
          ((C12116 + C12117) * C48956 * C49178 +
           (C12118 + C12119) * C48956 * C11353 +
           (C12120 + C12121) * C48956 * C11352 +
           (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
            C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
               C48956 * C11351) *
              C872 +
          ((C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889 +
            C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890) *
               C48956 * C11351 +
           (C47973 * C2324 - C11356 * C2318 - C47973 * C2325 + C49148 * C2336 +
            C47954 * C2326 - C11358 * C2319 - C47954 * C2327 + C48848 * C2337) *
               C48956 * C11352 +
           (C47973 * C2330 - C11356 * C2321 - C47973 * C2331 + C49148 * C2339 +
            C47954 * C2332 - C11358 * C2322 - C47954 * C2333 + C48848 * C2340) *
               C48956 * C11353 +
           (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 + C49148 * C9898 +
            C47954 * C10157 - C11358 * C10156 - C47954 * C10158 +
            C48848 * C10159) *
               C48956 * C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
              C871 -
          ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
           (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
            C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
            C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
            C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
               C48956 * C49170) *
              C872 +
          ((C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889 +
            C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
            C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
            C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892) *
               C48956 * C49170 +
           (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
            C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
            C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
            C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
               C48956 * C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C15399 +
            (C13066 + C13067) * C15400 + C20240 * C49206) *
               C49170 +
           ((C11562 + C11563) * C15399 + C13608 * C15400 + C19690 * C49206) *
               C49003) *
              C871 -
          (((C19704 + C19705) * C49206 + C19699 * C15400 + C13626 * C15399) *
               C49003 +
           ((C20253 + C20254) * C49206 + (C14185 + C14186) * C15400 +
            (C13067 + C13066) * C15399) *
               C49170) *
              C872 +
          ((C20240 * C15399 + (C20254 + C20253) * C15400 +
            (C47973 * C3691 - C11356 * C3688 - C47973 * C3692 + C49148 * C3697 +
             C47954 * C3693 - C11358 * C3689 - C47954 * C3694 +
             C48848 * C3698) *
                C49206) *
               C49170 +
           (C19690 * C15399 + (C19705 + C19704) * C15400 +
            (C47973 * C11238 - C11356 * C11236 - C47973 * C11239 +
             C49148 * C11242 + C47954 * C18005 - C11358 * C18004 -
             C47954 * C18006 + C48848 * C18007) *
                C49206) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C9287 * C49171 + C9662 * C49043) * C11352 +
           (C9288 * C49171 + C9661 * C49043) * C11353 +
           (C9289 * C49171 + C9660 * C49043) * C49178) *
              C48926 * C48909 * C110 -
          (((C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C49043 +
            C9293 * C49171) *
               C49178 +
           (C10207 * C49043 + C9292 * C49171) * C11353 +
           (C10205 * C49043 + C9291 * C49171) * C11352 +
           (C10395 * C49043 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49171) *
               C11351) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49171 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49043) *
               C11351 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49171 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49043) *
               C11352 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C49171 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49043) *
               C11353 +
           ((C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
                C49171 +
            (C9146 * C1869 - C9147 * C1864 - C9146 * C1870 + C48838 * C1873) *
                C49043) *
               C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 +
            (C1916 + C1915 + C1914) * C49043) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639) *
                C49043 +
            (C1259 + C1258 + C1257) * C49171) *
               C49003 +
           ((C2848 + C2847 + C2846) * C49043 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49171) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
             C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
             C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
                C49171 +
            (C1010 * C355 - C1011 * C347 - C1010 * C356 + C1004 * C365 +
             C1012 * C353 - C1013 * C346 - C1012 * C354 + C1005 * C364 +
             C1014 * C351 - C1015 * C345 - C1014 * C352 + C49192 * C363) *
                C49043) *
               C49170 +
           ((C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
             C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
             C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
                C49171 +
            (C1010 * C632 - C1011 * C625 - C1010 * C633 + C1004 * C640 +
             C1012 * C634 - C1013 * C626 - C1012 * C635 + C1005 * C641 +
             C1014 * C636 - C1015 * C627 - C1014 * C637 + C49192 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C20352 +
            C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
               C49170 +
           (C9287 * C20352 + C9662 * C20353 + C10203 * C20354 +
            C10832 * C49185) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                C49185 +
            C10206 * C20354 + C10205 * C20353 + C9291 * C20352) *
               C49003 +
           (C18118 * C49185 + C10396 * C20354 + C10395 * C20353 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C20352) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C20352 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C20353 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C20354 +
            (C9146 * C2755 - C9147 * C2751 - C9146 * C2756 + C48838 * C2763) *
                C49185) *
               C49170 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C20352 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C20353 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C20354 +
            (C9146 * C3260 - C9147 * C3255 - C9146 * C3261 + C48838 * C3264) *
                C49185) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C48926 * C233 -
           ((C9659 * C49043 + C9290 * C49171) * C49178 +
            (C14420 + C14419) * C11353 + (C14418 + C14417) * C11352 +
            (C14416 + C14415) * C11351) *
               C48926 * C49198) *
              C235 +
          (((C14421 + C14422) * C11351 + (C14423 + C14424) * C11352 +
            (C14425 + C14433) * C11353 +
            (C9294 * C49171 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C48926 * C233 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            ((C1914 + C1915 + C1916) * C49043 +
             (C1253 + C1252 + C1251) * C49171) *
                C49170) *
               C48926 * C49198) *
              C235 +
          ((((C1257 + C1258 + C1259) * C49171 +
             (C6442 + C6443 + C6444) * C49043) *
                C49170 +
            ((C1260 + C1261 + C1262) * C49171 +
             (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
              C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
              C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C48926 * C233 -
           ((C10831 * C49185 + C10204 * C20354 + C9661 * C20353 +
             C9288 * C20352) *
                C49003 +
            (C21593 + C21592 + C21591 + C21590) * C49170) *
               C48926 * C49198) *
              C235 +
          (((C21594 + C21595 + C21596 + C21604) * C49170 +
            (C9292 * C20352 + C10207 * C20353 + C10208 * C20354 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49185) *
                C49003) *
               C48926 * C49198 -
           ((C21604 + C21596 + C21595 + C21594) * C49003 +
            (C18118 * C49185 + C10396 * C20354 + C10395 * C20353 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C20352) *
                C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C343 -
           ((C10663 * C49043 + C9660 * C49171) * C49178 +
            (C10204 * C49043 + C9661 * C49171) * C11353 +
            (C10203 * C49043 + C9662 * C49171) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49171 + C10396 * C49043) * C11351 +
            (C10205 * C49171 + C10206 * C49043) * C11352 +
            (C10207 * C49171 + C10208 * C49043) * C11353 +
            (C14432 * C49171 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C343 -
           (((C3286 + C3285 + C3284) * C49043 +
             (C1914 + C1915 + C1916) * C49171) *
                C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C48909 * C235 +
          ((((C2846 + C2847 + C2848) * C49171 +
             (C2849 + C2850 + C2851) * C49043) *
                C49170 +
            ((C6442 + C6443 + C6444) * C49171 +
             (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
              C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
              C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C343 -
           ((C18356 * C49185 + C10832 * C20354 + C10203 * C20353 +
             C9662 * C20352) *
                C49003 +
            (C18117 * C49185 + C11251 * C20354 + C10394 * C20353 +
             C10393 * C20352) *
                C49170) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C20352 + C10396 * C20353 + C18118 * C20354 +
             C18119 * C49185) *
                C49170 +
            (C10205 * C20352 + C10206 * C20353 + C21603 * C20354 +
             (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
              C48838 * C18007) *
                 C49185) *
                C49003) *
               C49200 -
           ((C21604 + C21596 + C21595 + C21594) * C49003 +
            (C18118 * C49185 + C10396 * C20354 + C10395 * C20353 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C20352) *
                C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C48926 * C451 -
           ((C9659 * C49043 + C9290 * C49171) * C49178 +
            (C14420 + C14419) * C11353 + (C14418 + C14417) * C11352 +
            (C14416 + C14415) * C11351) *
               C48926 * C49198) *
              C453 +
          (((C14421 + C14422) * C11351 + (C14423 + C14424) * C11352 +
            (C14425 + C14433) * C11353 +
            (C9294 * C49171 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C48926 * C451 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            ((C1914 + C1915 + C1916) * C49043 +
             (C1253 + C1252 + C1251) * C49171) *
                C49170) *
               C48926 * C49198) *
              C453 +
          ((((C1257 + C1258 + C1259) * C49171 +
             (C6442 + C6443 + C6444) * C49043) *
                C49170 +
            ((C1260 + C1261 + C1262) * C49171 +
             (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
              C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
              C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C48926 * C451 -
           ((C10831 * C49185 + C10204 * C20354 + C9661 * C20353 +
             C9288 * C20352) *
                C49003 +
            (C21593 + C21592 + C21591 + C21590) * C49170) *
               C48926 * C49198) *
              C453 +
          (((C21594 + C21595 + C21596 + C21604) * C49170 +
            (C9292 * C20352 + C10207 * C20353 + C10208 * C20354 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49185) *
                C49003) *
               C48926 * C49198 -
           ((C21604 + C21596 + C21595 + C21594) * C49003 +
            (C18118 * C49185 + C10396 * C20354 + C10395 * C20353 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C20352) *
                C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
              C48926 * C517 -
          ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
           (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
              C48926 * C518 +
          (C14792 * C11351 + C14793 * C11352 + (C14795 + C14794) * C11353 +
           (C9547 * C49171 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C49043) *
               C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 +
            (C1916 + C1915 + C1914) * C49043) *
               C49003) *
              C48926 * C517 -
          (((C1911 + C1912 + C1913) * C49043 +
            (C1256 + C1255 + C1254) * C49171) *
               C49003 +
           ((C1914 + C1915 + C1916) * C49043 +
            (C1253 + C1252 + C1251) * C49171) *
               C49170) *
              C48926 * C518 +
          ((C1706 * C49171 + (C1913 + C1912 + C1911) * C49043) * C49170 +
           ((C1716 + C1715 + C1714) * C49171 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C20352 +
            C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
               C49170 +
           (C21590 + C21591 + C21592 + C21593) * C49003) *
              C48926 * C517 -
          ((C21963 + C21964 + C21965 + C21966) * C49003 +
           (C21593 + C21592 + C21591 + C21590) * C49170) *
              C48926 * C518 +
          ((C21966 + C21965 + C21964 + C21963) * C49170 +
           (C9289 * C20352 + C9660 * C20353 + C10663 * C20354 +
            (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
             C48838 * C10813) *
                C49185) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C343 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C451 +
          (((C14931 + C14930) * C11351 + (C14929 + C14928) * C11352 +
            (C14927 + C14926) * C11353 +
            (C9659 * C49171 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
            (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C343 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C451 +
          (((C7175 * C49171 + (C3284 + C3285 + C3286) * C49043) * C49170 +
            ((C1913 + C1912 + C1911) * C49171 +
             (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
              C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
              C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            (C7176 * C49043 + (C1253 + C1252 + C1251) * C49171) * C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C343 -
           ((C22097 + C22098 + C22099 + C22100) * C49003 +
            (C18117 * C49185 + C11251 * C20354 + C10394 * C20353 +
             C10393 * C20352) *
                C49170) *
               C49200) *
              C451 +
          (((C22100 + C22099 + C22098 + C22097) * C49170 +
            (C9661 * C20352 + C10204 * C20353 + C10831 * C20354 +
             (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
              C48838 * C11243) *
                 C49185) *
                C49003) *
               C49200 -
           ((C21963 + C21964 + C21965 + C21966) * C49003 +
            (C21593 + C21592 + C21591 + C21590) * C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C725 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49171 + C10396 * C49043) * C11351 +
            (C10205 * C49171 + C10206 * C49043) * C11352 +
            (C10207 * C49171 + C10208 * C49043) * C11353 +
            (C14432 * C49171 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C725 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C48909 * C453 +
          ((((C2846 + C2847 + C2848) * C49171 +
             (C2849 + C2850 + C2851) * C49043) *
                C49170 +
            ((C6442 + C6443 + C6444) * C49171 +
             (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
              C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
              C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C725 -
           ((C22097 + C22098 + C22099 + C22100) * C49003 +
            (C18117 * C49185 + C11251 * C20354 + C10394 * C20353 +
             C10393 * C20352) *
                C49170) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C20352 + C10396 * C20353 + C18118 * C20354 +
             C18119 * C49185) *
                C49170 +
            (C10205 * C20352 + C10206 * C20353 + C21603 * C20354 +
             (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
              C48838 * C18007) *
                 C49185) *
                C49003) *
               C49200 -
           ((C21604 + C21596 + C21595 + C21594) * C49003 +
            (C18118 * C49185 + C10396 * C20354 + C10395 * C20353 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C20352) *
                C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C725 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C233 +
          (((C14931 + C14930) * C11351 + (C14929 + C14928) * C11352 +
            (C14927 + C14926) * C11353 +
            (C9659 * C49171 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
            (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C725 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C233 +
          (((C7175 * C49171 + (C3284 + C3285 + C3286) * C49043) * C49170 +
            ((C1913 + C1912 + C1911) * C49171 +
             (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
              C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
              C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            (C7176 * C49043 + (C1253 + C1252 + C1251) * C49171) * C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C20352 +
             C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
                C49170 +
            (C21590 + C21591 + C21592 + C21593) * C49003) *
               C725 -
           ((C22097 + C22098 + C22099 + C22100) * C49003 +
            (C18117 * C49185 + C11251 * C20354 + C10394 * C20353 +
             C10393 * C20352) *
                C49170) *
               C49200) *
              C233 +
          (((C22100 + C22099 + C22098 + C22097) * C49170 +
            (C9661 * C20352 + C10204 * C20353 + C10831 * C20354 +
             (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
              C48838 * C11243) *
                 C49185) *
                C49003) *
               C49200 -
           ((C21963 + C21964 + C21965 + C21966) * C49003 +
            (C21593 + C21592 + C21591 + C21590) * C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
              C871 -
          ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
           (C14930 + C14931) * C11352 +
           (C10394 * C49043 + C10393 * C49171) * C11351) *
              C872 +
          ((C10394 * C49171 + C11251 * C49043) * C11351 +
           (C10203 * C49171 + C10832 * C49043) * C11352 +
           (C10204 * C49171 + C10831 * C49043) * C11353 +
           (C10663 * C49171 + (C9146 * C10811 - C9147 * C10810 -
                               C9146 * C10812 + C48838 * C10813) *
                                  C49043) *
               C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
              C871 -
          (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
           ((C2845 + C2844 + C2843) * C49043 +
            (C2842 + C2841 + C2840) * C49171) *
               C49170) *
              C872 +
          ((C3714 * C49171 + (C3723 + C3722 + C3721) * C49043) * C49170 +
           ((C3284 + C3285 + C3286) * C49171 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C20352 +
            C10393 * C20353 + C10394 * C20354 + C11251 * C49185) *
               C49170 +
           (C21590 + C21591 + C21592 + C21593) * C49003) *
              C871 -
          ((C22097 + C22098 + C22099 + C22100) * C49003 +
           (C18117 * C49185 + C11251 * C20354 + C10394 * C20353 +
            C10393 * C20352) *
               C49170) *
              C872 +
          ((C10394 * C20352 + C11251 * C20353 + C18117 * C20354 +
            C18593 * C49185) *
               C49170 +
           (C10203 * C20352 + C10832 * C20353 + C18356 * C20354 +
            (C9146 * C18346 - C9147 * C18345 - C9146 * C18347 +
             C48838 * C18348) *
                C49185) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C48956 * C48944 * C48926 * C48909 * C110 -
              (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
               C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
               C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
               C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
               C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                  C48956 * C48944 * C48926 * C48909 * C111 +
              (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 +
               C115 * C136 - C116 * C126 - C115 * C137 + C102 * C147 +
               C117 * C138 - C118 * C127 - C117 * C139 + C103 * C148 +
               C119 * C140 - C120 * C128 - C119 * C141 + C104 * C149 +
               C121 * C142 - C122 * C129 - C121 * C143 + C105 * C150) *
                  C48956 * C48944 * C48926 * C48909 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                   C48956 * C49235 +
               (C1010 * C251 - C1011 * C241 - C1010 * C252 + C1004 * C259 +
                C1012 * C249 - C1013 * C240 - C1012 * C250 + C1005 * C258 +
                C1014 * C247 - C1015 * C239 - C1014 * C248 + C49192 * C257) *
                   C48956 * C49223 +
               (C1010 * C526 - C1011 * C521 - C1010 * C527 + C1004 * C536 +
                C1012 * C528 - C1013 * C522 - C1012 * C529 + C1005 * C537 +
                C1014 * C530 - C1015 * C523 - C1014 * C531 + C49192 * C538) *
                   C48956 * C49203) *
                  C48926 * C48909 * C110 -
              ((C1014 * C532 - C1015 * C524 - C1014 * C533 + C49192 * C539 +
                C1012 * C530 - C1013 * C523 - C1012 * C531 + C1005 * C538 +
                C1010 * C528 - C1011 * C522 - C1010 * C529 + C1004 * C537) *
                   C48956 * C49203 +
               (C1014 * C245 - C1015 * C238 - C1014 * C246 + C49192 * C256 +
                C1012 * C247 - C1013 * C239 - C1012 * C248 + C1005 * C257 +
                C1010 * C249 - C1011 * C240 - C1010 * C250 + C1004 * C258) *
                   C48956 * C49223 +
               (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
                C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
                C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                   C48956 * C49235) *
                  C48926 * C48909 * C111 +
              ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
                C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
                C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
                   C48956 * C49235 +
               (C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
                C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
                C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
                   C48956 * C49223 +
               (C1010 * C530 - C1011 * C523 - C1010 * C531 + C1004 * C538 +
                C1012 * C532 - C1013 * C524 - C1012 * C533 + C1005 * C539 +
                C1014 * C534 - C1015 * C525 - C1014 * C535 + C49192 * C540) *
                   C48956 * C49203) *
                  C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367 +
            C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
            C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365) *
               C49225 +
           (C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
            C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
            C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
               C49206) *
              C48944 * C48926 * C48909 * C110 -
          ((C1014 * C885 - C1015 * C877 - C1014 * C886 + C49192 * C892 +
            C1012 * C883 - C1013 * C876 - C1012 * C884 + C1005 * C891 +
            C1010 * C881 - C1011 * C875 - C1010 * C882 + C1004 * C890) *
               C49206 +
           (C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364 +
            C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
            C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366) *
               C49225 +
           (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
            C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
            C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
               C49236) *
              C48944 * C48926 * C48909 * C111 +
          ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
            C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
            C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
               C49236 +
           (C1010 * C355 - C1011 * C347 - C1010 * C356 + C1004 * C365 +
            C1012 * C353 - C1013 * C346 - C1012 * C354 + C1005 * C364 +
            C1014 * C351 - C1015 * C345 - C1014 * C352 + C49192 * C363) *
               C49225 +
           (C1010 * C883 - C1011 * C876 - C1010 * C884 + C1004 * C891 +
            C1012 * C885 - C1013 * C877 - C1012 * C886 + C1005 * C892 +
            C1014 * C887 - C1015 * C878 - C1014 * C888 + C49192 * C893) *
               C49206) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C7826 * C251 - C7827 * C241 - C7826 * C252 + C49232 * C259 +
            C7828 * C249 - C7829 * C240 - C7828 * C250 + C49219 * C258 +
            C7830 * C247 - C7831 * C239 - C7830 * C248 + C49192 * C257) *
               C48956 * C7824 +
           (C7826 * C526 - C7827 * C521 - C7826 * C527 + C49232 * C536 +
            C7828 * C528 - C7829 * C522 - C7828 * C529 + C49219 * C537 +
            C7830 * C530 - C7831 * C523 - C7830 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C7830 * C532 - C7831 * C524 - C7830 * C533 + C49192 * C539 +
            C7828 * C530 - C7829 * C523 - C7828 * C531 + C49219 * C538 +
            C7826 * C528 - C7827 * C522 - C7826 * C529 + C49232 * C537) *
               C48956 * C49203 +
           (C7830 * C245 - C7831 * C238 - C7830 * C246 + C49192 * C256 +
            C7828 * C247 - C7829 * C239 - C7828 * C248 + C49219 * C257 +
            C7826 * C249 - C7827 * C240 - C7826 * C250 + C49232 * C258) *
               C48956 * C7824 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C48956 * C7823) *
              C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C48956 * C7823 +
           (C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
            C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
            C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
               C48956 * C7824 +
           (C7826 * C530 - C7827 * C523 - C7826 * C531 + C49232 * C538 +
            C7828 * C532 - C7829 * C524 - C7828 * C533 + C49219 * C539 +
            C7830 * C534 - C7831 * C525 - C7830 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           (C9146 * C251 - C9147 * C241 - C9146 * C252 + C48838 * C259) *
               C48956 * C9142 +
           (C9146 * C526 - C9147 * C521 - C9146 * C527 + C48838 * C536) *
               C48956 * C9143 +
           (C9146 * C1170 - C9147 * C1164 - C9146 * C1171 + C48838 * C1176) *
               C48956 * C9144 +
           (C9146 * C1683 - C9147 * C1680 - C9146 * C1684 + C48838 * C1689) *
               C48956 * C9145) *
              C48926 * C48909 * C110 -
          ((C9146 * C1685 - C9147 * C1681 - C9146 * C1686 + C48838 * C1690) *
               C48956 * C9145 +
           (C9146 * C1168 - C9147 * C1163 - C9146 * C1169 + C48838 * C1175) *
               C48956 * C9144 +
           (C9146 * C528 - C9147 * C522 - C9146 * C529 + C48838 * C537) *
               C48956 * C9143 +
           (C9146 * C249 - C9147 * C240 - C9146 * C250 + C48838 * C258) *
               C48956 * C9142 +
           (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
               C48956 * C9141) *
              C48926 * C48909 * C111 +
          ((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
               C48956 * C9141 +
           (C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
               C48956 * C9142 +
           (C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
               C48956 * C9143 +
           (C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
               C48956 * C9144 +
           (C9146 * C1687 - C9147 * C1682 - C9146 * C1688 + C48838 * C1691) *
               C48956 * C9145) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C49225 +
            (C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
                C49206) *
               C7823 +
           (C9287 * C49236 + C9662 * C49225 +
            (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
                C49206) *
               C7824 +
           (C9288 * C49236 + C9661 * C49225 +
            (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
                C49206) *
               C49203) *
              C48926 * C48909 * C110 -
          (((C9146 * C2332 - C9147 * C2322 - C9146 * C2333 + C48838 * C2340) *
                C49206 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C49225 +
            C9292 * C49236) *
               C49203 +
           ((C9146 * C2326 - C9147 * C2319 - C9146 * C2327 + C48838 * C2337) *
                C49206 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C49225 +
            C9291 * C49236) *
               C7824 +
           ((C9146 * C881 - C9147 * C875 - C9146 * C882 + C48838 * C890) *
                C49206 +
            (C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C49225 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49236) *
               C7823) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49236 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49225 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C49206) *
               C7823 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49236 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49225 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C49206) *
               C7824 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C49236 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49225 +
            (C9146 * C2334 - C9147 * C2323 - C9146 * C2335 + C48838 * C2341) *
                C49206) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365) *
               C15400 +
           (C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C49206) *
              C48944 * C48926 * C48909 * C110 -
          ((C7830 * C885 - C7831 * C877 - C7830 * C886 + C49192 * C892 +
            C7828 * C883 - C7829 * C876 - C7828 * C884 + C49219 * C891 +
            C7826 * C881 - C7827 * C875 - C7826 * C882 + C49232 * C890) *
               C49206 +
           (C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364 +
            C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
            C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366) *
               C15400 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C15399) *
              C48944 * C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C15399 +
           (C7826 * C355 - C7827 * C347 - C7826 * C356 + C49232 * C365 +
            C7828 * C353 - C7829 * C346 - C7828 * C354 + C49219 * C364 +
            C7830 * C351 - C7831 * C345 - C7830 * C352 + C49192 * C363) *
               C15400 +
           (C7826 * C883 - C7827 * C876 - C7826 * C884 + C49232 * C891 +
            C7828 * C885 - C7829 * C877 - C7828 * C886 + C49219 * C892 +
            C7830 * C887 - C7831 * C878 - C7830 * C888 + C49192 * C893) *
               C49206) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C9287 * C15399 + C9662 * C15400 + C10203 * C49206) * C49223 +
           (C9288 * C15399 + C9661 * C15400 + C10204 * C49206) * C49203) *
              C48926 * C48909 * C110 -
          ((C10208 * C49206 + C10207 * C15400 + C9292 * C15399) * C49203 +
           (C10206 * C49206 + C10205 * C15400 + C9291 * C15399) * C49223 +
           (C10396 * C49206 + C10395 * C15400 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C15399) *
               C49235) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C15399 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C15400 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C49206) *
               C49235 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C15399 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C15400 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C49206) *
               C49223 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C15399 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C15400 +
            (C9146 * C2334 - C9147 * C2323 - C9146 * C2335 + C48838 * C2341) *
                C49206) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C17917 +
           C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
           (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
               C17921) *
              C48944 * C48926 * C48909 * C110 -
          ((C9146 * C3693 - C9147 * C3689 - C9146 * C3694 + C48838 * C3698) *
               C17921 +
           (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
               C17920 +
           C10396 * C17919 + C10395 * C17918 +
           (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
               C17917) *
              C48944 * C48926 * C48909 * C111 +
          ((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
               C17917 +
           (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
               C17918 +
           (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
               C17919 +
           (C9146 * C2755 - C9147 * C2751 - C9146 * C2756 + C48838 * C2763) *
               C17920 +
           (C9146 * C3695 - C9147 * C3690 - C9146 * C3696 + C48838 * C3699) *
               C17921) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C48926 * C233 -
               (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
                C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
                C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
                C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
                C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
                   C48956 * C48944 * C48926 * C49198) *
                  C235 +
              ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
                C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
                C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
                C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
                C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
                   C48956 * C48944 * C48926 * C49198 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C48956 * C48944 * C48926 * C233) *
                  C49196) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 +
                (C1254 + C1255 + C1256) * C48956 * C49203) *
                   C48926 * C233 -
               ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 +
                 C49192 * C1174 + C1012 * C1168 - C1013 * C1163 -
                 C1012 * C1169 + C1005 * C1175 + C1010 * C1170 - C1011 * C1164 -
                 C1010 * C1171 + C1004 * C1176) *
                    C48956 * C49203 +
                (C1256 + C1255 + C1254) * C48956 * C49223 +
                (C1253 + C1252 + C1251) * C48956 * C49235) *
                   C48926 * C49198) *
                  C235 +
              (((C1257 + C1258 + C1259) * C48956 * C49235 +
                (C1260 + C1261 + C1262) * C48956 * C49223 +
                (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
                 C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
                 C1014 * C1172 - C1015 * C1165 - C1014 * C1173 +
                 C49192 * C1177) *
                    C48956 * C49203) *
                   C48926 * C49198 -
               ((C1262 + C1261 + C1260) * C48956 * C49203 +
                (C1259 + C1258 + C1257) * C48956 * C49223 +
                (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
                 C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
                 C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                    C48956 * C49235) *
                   C48926 * C233) *
                  C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365) *
                C49225 +
            (C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
             C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
             C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
                C49206) *
               C48944 * C48926 * C233 -
           ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
             C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
             C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
                C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C1257 + C1258 + C1259) * C49236 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C49225 +
            (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
             C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
             C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C1014 * C885 - C1015 * C877 - C1014 * C886 + C49192 * C892 +
             C1012 * C883 - C1013 * C876 - C1012 * C884 + C1005 * C891 +
             C1010 * C881 - C1011 * C875 - C1010 * C882 + C1004 * C890) *
                C49206 +
            (C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366) *
                C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C233 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C233 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C235 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                 C49225 +
             (C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
                 C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C48926 * C233 -
           (((C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
                 C49206 +
             C9660 * C49225 + C9289 * C49236) *
                C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C48926 * C49198) *
              C235 +
          (((C10173 + C10211 + C10212) * C7823 +
            (C10182 + C10213 + C10214) * C7824 +
            (C9293 * C49236 +
             (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                 C49225 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            ((C9146 * C881 - C9147 * C875 - C9146 * C882 + C48838 * C890) *
                 C49206 +
             (C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                 C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365) *
                C15400 +
            (C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
             C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
             C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
                C49206) *
               C48944 * C48926 * C233 -
           ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
             C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
             C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
                C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C15399 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C15400 +
            (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
             C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
             C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C7830 * C885 - C7831 * C877 - C7830 * C886 + C49192 * C892 +
             C7828 * C883 - C7829 * C876 - C7828 * C884 + C49219 * C891 +
             C7826 * C881 - C7827 * C875 - C7826 * C882 + C49232 * C890) *
                C49206 +
            (C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366) *
                C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C48926 * C233 -
           ((C10663 * C49206 + C9660 * C15400 + C9289 * C15399) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C48926 * C49198) *
              C235 +
          (((C16889 + C16890 + C16891) * C49235 +
            (C16892 + C16893 + C16894) * C49223 +
            (C9293 * C15399 + C14432 * C15400 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
                C17921) *
               C48944 * C48926 * C233 -
           ((C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C17921 +
            C10832 * C17920 + C10203 * C17919 + C9662 * C17918 +
            C9287 * C17917) *
               C48944 * C48926 * C49198) *
              C235 +
          ((C9291 * C17917 + C10205 * C17918 + C10206 * C17919 +
            (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                C17920 +
            (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
             C48838 * C18007) *
                C17921) *
               C48944 * C48926 * C49198 -
           ((C9146 * C3693 - C9147 * C3689 - C9146 * C3694 + C48838 * C3698) *
                C17921 +
            (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                C17920 +
            C10396 * C17919 + C10395 * C17918 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C17917) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C343 -
               (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
                C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
                C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
                C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
                C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
                   C48956 * C48944 * C49200) *
                  C48909 * C235 +
              ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
                C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
                C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
                C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
                C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
                   C48956 * C48944 * C49200 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C48956 * C48944 * C343) *
                  C48909 * C49196) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 +
                (C1254 + C1255 + C1256) * C48956 * C49203) *
                   C343 -
               ((C1014 * C1412 - C1015 * C1408 - C1014 * C1413 +
                 C49192 * C1420 + C1012 * C1414 - C1013 * C1409 -
                 C1012 * C1415 + C1005 * C1421 + C1010 * C1416 - C1011 * C1410 -
                 C1010 * C1417 + C1004 * C1422) *
                    C48956 * C49203 +
                (C1014 * C632 - C1015 * C625 - C1014 * C633 + C49192 * C640 +
                 C1012 * C630 - C1013 * C624 - C1012 * C631 + C1005 * C639 +
                 C1010 * C628 - C1011 * C623 - C1010 * C629 + C1004 * C638) *
                    C48956 * C49223 +
                (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
                 C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
                 C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                    C48956 * C49235) *
                   C49200) *
                  C48909 * C235 +
              (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
                 C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
                 C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                    C48956 * C49235 +
                (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
                 C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
                 C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                    C48956 * C49223 +
                (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
                 C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
                 C1014 * C1418 - C1015 * C1411 - C1014 * C1419 +
                 C49192 * C1423) *
                    C48956 * C49203) *
                   C49200 -
               ((C1262 + C1261 + C1260) * C48956 * C49203 +
                (C1259 + C1258 + C1257) * C48956 * C49223 +
                (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
                 C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
                 C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                    C48956 * C49235) *
                   C343) *
                  C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C343 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C2846 + C2847 + C2848) * C49236 +
            (C2849 + C2850 + C2851) * C49225 +
            (C1010 * C2757 - C1011 * C2752 - C1010 * C2758 + C1004 * C2764 +
             C1012 * C2755 - C1013 * C2751 - C1012 * C2756 + C1005 * C2763 +
             C1014 * C2761 - C1015 * C2754 - C1014 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C343 -
           ((C7830 * C1412 - C7831 * C1408 - C7830 * C1413 + C49192 * C1420 +
             C7828 * C1414 - C7829 * C1409 - C7828 * C1415 + C49219 * C1421 +
             C7826 * C1416 - C7827 * C1410 - C7826 * C1417 + C49232 * C1422) *
                C48956 * C49203 +
            (C7830 * C632 - C7831 * C625 - C7830 * C633 + C49192 * C640 +
             C7828 * C630 - C7829 * C624 - C7828 * C631 + C49219 * C639 +
             C7826 * C628 - C7827 * C623 - C7826 * C629 + C49232 * C638) *
                C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C235 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           ((C9146 * C9386 - C9147 * C9384 - C9146 * C9387 + C48838 * C9390) *
                C48956 * C9145 +
            (C9146 * C1865 - C9147 * C1862 - C9146 * C1866 + C48838 * C1871) *
                C48956 * C9144 +
            (C9146 * C1416 - C9147 * C1410 - C9146 * C1417 + C48838 * C1422) *
                C48956 * C9143 +
            (C9146 * C628 - C9147 * C623 - C9146 * C629 + C48838 * C638) *
                C48956 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C235 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C343 -
           (((C9146 * C10362 - C9147 * C10360 - C9146 * C10363 +
              C48838 * C10366) *
                 C49206 +
             C10204 * C49225 + C9661 * C49236) *
                C49203 +
            ((C9146 * C3256 - C9147 * C3253 - C9146 * C3257 + C48838 * C3262) *
                 C49206 +
             C10203 * C49225 + C9662 * C49236) *
                C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49236 + C10396 * C49225 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C7823 +
            (C10205 * C49236 + C10206 * C49225 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C7824 +
            (C10207 * C49236 + C10208 * C49225 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C343 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C15773 + C15774 + C15775) * C15399 +
            (C15776 + C15777 + C15778) * C15400 +
            (C7826 * C2757 - C7827 * C2752 - C7826 * C2758 + C49232 * C2764 +
             C7828 * C2755 - C7829 * C2751 - C7828 * C2756 + C49219 * C2763 +
             C7830 * C2761 - C7831 * C2754 - C7830 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C343 -
           ((C10831 * C49206 + C10204 * C15400 + C9661 * C15399) * C49203 +
            (C10832 * C49206 + C10203 * C15400 + C9662 * C15399) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C15399 + C10396 * C15400 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C49235 +
            (C10205 * C15399 + C10206 * C15400 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C49223 +
            (C10207 * C15399 + C10208 * C15400 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            C18117 * C17921) *
               C48944 * C343 -
           ((C9146 * C18092 - C9147 * C18090 - C9146 * C18093 +
             C48838 * C18096) *
                C17921 +
            C18117 * C17920 + C11251 * C17919 + C10394 * C17918 +
            C10393 * C17917) *
               C48944 * C49200) *
              C48909 * C235 +
          ((C10395 * C17917 + C10396 * C17918 + C18118 * C17919 +
            C18119 * C17920 +
            (C9146 * C18094 - C9147 * C18091 - C9146 * C18095 +
             C48838 * C18097) *
                C17921) *
               C48944 * C49200 -
           (C18119 * C17921 + C18118 * C17920 + C10396 * C17919 +
            C10395 * C17918 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C17917) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C48926 * C451 -
               (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
                C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
                C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
                C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
                C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
                   C48956 * C48944 * C48926 * C49198) *
                  C453 +
              ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
                C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
                C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
                C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
                C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
                   C48956 * C48944 * C48926 * C49198 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C48956 * C48944 * C48926 * C451) *
                  C49196) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 +
                (C1254 + C1255 + C1256) * C48956 * C49203) *
                   C48926 * C451 -
               ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 +
                 C49192 * C1174 + C1012 * C1168 - C1013 * C1163 -
                 C1012 * C1169 + C1005 * C1175 + C1010 * C1170 - C1011 * C1164 -
                 C1010 * C1171 + C1004 * C1176) *
                    C48956 * C49203 +
                (C1256 + C1255 + C1254) * C48956 * C49223 +
                (C1253 + C1252 + C1251) * C48956 * C49235) *
                   C48926 * C49198) *
                  C453 +
              (((C1257 + C1258 + C1259) * C48956 * C49235 +
                (C1260 + C1261 + C1262) * C48956 * C49223 +
                (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
                 C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
                 C1014 * C1172 - C1015 * C1165 - C1014 * C1173 +
                 C49192 * C1177) *
                    C48956 * C49203) *
                   C48926 * C49198 -
               ((C1262 + C1261 + C1260) * C48956 * C49203 +
                (C1259 + C1258 + C1257) * C48956 * C49223 +
                (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
                 C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
                 C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                    C48956 * C49235) *
                   C48926 * C451) *
                  C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C48926 * C451 -
           ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
             C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
             C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
                C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C1257 + C1258 + C1259) * C49236 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C49225 +
            (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
             C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
             C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C451 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C451 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C453 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C48926 * C451 -
           (((C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
                 C49206 +
             C9660 * C49225 + C9289 * C49236) *
                C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C48926 * C49198) *
              C453 +
          (((C10173 + C10211 + C10212) * C7823 +
            (C10182 + C10213 + C10214) * C7824 +
            (C9293 * C49236 +
             (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                 C49225 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C48926 * C451 -
           ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
             C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
             C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
                C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C15399 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C15400 +
            (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
             C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
             C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C48926 * C451 -
           ((C10663 * C49206 + C9660 * C15400 + C9289 * C15399) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C48926 * C49198) *
              C453 +
          (((C16889 + C16890 + C16891) * C49235 +
            (C16892 + C16893 + C16894) * C49223 +
            (C9293 * C15399 + C14432 * C15400 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            C18117 * C17921) *
               C48944 * C48926 * C451 -
           ((C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C17921 +
            C10832 * C17920 + C10203 * C17919 + C9662 * C17918 +
            C9287 * C17917) *
               C48944 * C48926 * C49198) *
              C453 +
          ((C9291 * C17917 + C10205 * C17918 + C10206 * C17919 +
            (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                C17920 +
            (C9146 * C18005 - C9147 * C18004 - C9146 * C18006 +
             C48838 * C18007) *
                C17921) *
               C48944 * C48926 * C49198 -
           (C18119 * C17921 + C18118 * C17920 + C10396 * C17919 +
            C10395 * C17918 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C17917) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C48956 * C48944 * C48926 * C517 -
              (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
               C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
               C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
               C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
               C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
                  C48956 * C48944 * C48926 * C518 +
              (C113 * C526 - C114 * C521 - C113 * C527 + C101 * C536 +
               C115 * C528 - C116 * C522 - C115 * C529 + C102 * C537 +
               C117 * C530 - C118 * C523 - C117 * C531 + C103 * C538 +
               C119 * C532 - C120 * C524 - C119 * C533 + C104 * C539 +
               C121 * C534 - C122 * C525 - C121 * C535 + C105 * C540) *
                  C48956 * C48944 * C48926 * C519) *
             C48875 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                   C48956 * C49235 +
               (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
                  C48926 * C517 -
              ((C1714 + C1715 + C1716) * C48956 * C49203 +
               (C1256 + C1255 + C1254) * C48956 * C49223 +
               (C1253 + C1252 + C1251) * C48956 * C49235) *
                  C48926 * C518 +
              (C1710 * C49235 + (C1716 + C1715 + C1714) * C48956 * C49223 +
               (C1010 * C1683 - C1011 * C1680 - C1010 * C1684 + C1004 * C1689 +
                C1012 * C1685 - C1013 * C1681 - C1012 * C1686 + C1005 * C1690 +
                C1014 * C1687 - C1015 * C1682 - C1014 * C1688 +
                C49192 * C1691) *
                   C48956 * C49203) *
                  C48926 * C519) *
             C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C2840 + C2841 + C2842) * C49225 +
           (C2843 + C2844 + C2845) * C49206) *
              C48944 * C48926 * C517 -
          ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
            C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
            C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
               C49206 +
           (C1914 + C1915 + C1916) * C49225 +
           (C1253 + C1252 + C1251) * C49236) *
              C48944 * C48926 * C518 +
          (C1706 * C49236 + (C1913 + C1912 + C1911) * C49225 +
           (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
            C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
            C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
               C49206) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C48926 * C517 -
          ((C8486 + C8487 + C8488) * C48956 * C49203 +
           (C8056 + C8055 + C8054) * C48956 * C7824 +
           (C8053 + C8052 + C8051) * C48956 * C7823) *
              C48926 * C518 +
          (C8482 * C7823 + (C8488 + C8487 + C8486) * C48956 * C7824 +
           (C7826 * C1683 - C7827 * C1680 - C7826 * C1684 + C49232 * C1689 +
            C7828 * C1685 - C7829 * C1681 - C7828 * C1686 + C49219 * C1690 +
            C7830 * C1687 - C7831 * C1682 - C7830 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C48926 * C517 -
          (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
           C9295 * C9141) *
              C48926 * C518 +
          (C9296 * C9141 + C9297 * C9142 + C9298 * C9143 + C9548 * C9144 +
           (C9146 * C9537 - C9147 * C9536 - C9146 * C9538 + C48838 * C9539) *
               C48956 * C9145) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            C10393 * C49225 + C10394 * C49206) *
               C7823 +
           (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
              C48926 * C517 -
          ((C10664 + C10658 + C10659) * C49203 +
           (C10210 + C10168 + C10167) * C7824 +
           (C10209 + C10162 + C10161) * C7823) *
              C48926 * C518 +
          (C10660 * C7823 + (C10659 + C10658 + C10664) * C7824 +
           (C9290 * C49236 + C9659 * C49225 +
            (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                C49206) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C15767 + C15768 + C15769) * C15400 +
           (C15770 + C15771 + C15772) * C49206) *
              C48944 * C48926 * C517 -
          ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
               C49206 +
           (C8674 + C8675 + C8676) * C15400 +
           (C8053 + C8052 + C8051) * C15399) *
              C48944 * C48926 * C518 +
          (C8478 * C15399 + (C8673 + C8672 + C8671) * C15400 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C49206) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
              C48926 * C517 -
          ((C17298 + C17299 + C17300) * C49203 +
           (C16888 + C16887 + C16886) * C49223 +
           (C16885 + C16884 + C16883) * C49235) *
              C48926 * C518 +
          (C17301 * C49235 + (C17300 + C17299 + C17298) * C49223 +
           (C9290 * C15399 + C9659 * C15400 +
            (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                C49206) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C17917 +
           C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
           C18117 * C17921) *
              C48944 * C48926 * C517 -
          ((C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
            C48838 * C11242) *
               C17921 +
           C10832 * C17920 + C10203 * C17919 + C9662 * C17918 +
           C9287 * C17917) *
              C48944 * C48926 * C518 +
          (C9288 * C17917 + C9661 * C17918 + C10204 * C17919 + C10831 * C17920 +
           (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
            C48838 * C11243) *
               C17921) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C343 -
               (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
                C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
                C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
                C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
                C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
                   C48956 * C48944 * C49200) *
                  C451 +
              ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
                C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
                C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
                C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
                C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
                   C48956 * C48944 * C49200 -
               (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
                C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
                C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
                C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
                C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
                   C48956 * C48944 * C343) *
                  C49198) *
             C48875 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
                   C343 -
               ((C1911 + C1912 + C1913) * C48956 * C49203 +
                (C1914 + C1915 + C1916) * C48956 * C49223 +
                (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
                 C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
                 C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                    C48956 * C49235) *
                   C49200) *
                  C451 +
              (((C1916 + C1915 + C1914) * C48956 * C49235 +
                (C1913 + C1912 + C1911) * C48956 * C49223 +
                (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
                 C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
                 C1014 * C1869 - C1015 * C1864 - C1014 * C1870 +
                 C49192 * C1873) *
                    C48956 * C49203) *
                   C49200 -
               ((C1714 + C1715 + C1716) * C48956 * C49203 +
                (C1256 + C1255 + C1254) * C48956 * C49223 +
                (C1253 + C1252 + C1251) * C48956 * C49235) *
                   C343) *
                  C49198) *
             C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C343 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C451 +
          (((C1916 + C1915 + C1914) * C49236 +
            (C3284 + C3285 + C3286) * C49225 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C3286 + C3285 + C3284) * C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C343 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C451 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C343 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C451 +
          (((C10826 + C10825 + C10834) * C7823 +
            (C10820 + C10819 + C10833) * C7824 +
            (C9660 * C49236 + C10663 * C49225 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10664 + C10658 + C10659) * C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C343 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C15399 +
            (C16199 + C16200 + C16201) * C15400 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C16201 + C16200 + C16199) * C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C343 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C451 +
          (((C17453 + C17452 + C17451) * C49235 +
            (C17450 + C17449 + C17448) * C49223 +
            (C9660 * C15399 + C10663 * C15400 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C17298 + C17299 + C17300) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            C18117 * C17921) *
               C48944 * C343 -
           ((C9146 * C18092 - C9147 * C18090 - C9146 * C18093 +
             C48838 * C18096) *
                C17921 +
            C18117 * C17920 + C11251 * C17919 + C10394 * C17918 +
            C10393 * C17917) *
               C48944 * C49200) *
              C451 +
          ((C9662 * C17917 + C10203 * C17918 + C10832 * C17919 +
            C18356 * C17920 +
            (C9146 * C18346 - C9147 * C18345 - C9146 * C18347 +
             C48838 * C18348) *
                C17921) *
               C48944 * C49200 -
           (C18356 * C17921 + C10832 * C17920 + C10203 * C17919 +
            C9662 * C17918 + C9287 * C17917) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C725 -
               (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
                C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
                C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
                C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
                C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
                   C48956 * C48944 * C49200) *
                  C48909 * C453 +
              ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
                C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
                C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
                C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
                C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
                   C48956 * C48944 * C49200 -
               (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
                C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
                C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
                C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
                C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
                   C48956 * C48944 * C725) *
                  C48909 * C49196) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
                   C725 -
               ((C1911 + C1912 + C1913) * C48956 * C49203 +
                (C1914 + C1915 + C1916) * C48956 * C49223 +
                (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
                 C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
                 C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                    C48956 * C49235) *
                   C49200) *
                  C48909 * C453 +
              (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
                 C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
                 C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                    C48956 * C49235 +
                (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
                 C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
                 C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                    C48956 * C49223 +
                (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
                 C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
                 C1014 * C1418 - C1015 * C1411 - C1014 * C1419 +
                 C49192 * C1423) *
                    C48956 * C49203) *
                   C49200 -
               ((C1262 + C1261 + C1260) * C48956 * C49203 +
                (C1259 + C1258 + C1257) * C48956 * C49223 +
                (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
                 C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
                 C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                    C48956 * C49235) *
                   C725) *
                  C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C725 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C2846 + C2847 + C2848) * C49236 +
            (C2849 + C2850 + C2851) * C49225 +
            (C1010 * C2757 - C1011 * C2752 - C1010 * C2758 + C1004 * C2764 +
             C1012 * C2755 - C1013 * C2751 - C1012 * C2756 + C1005 * C2763 +
             C1014 * C2761 - C1015 * C2754 - C1014 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C453 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C453 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C725 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49236 + C10396 * C49225 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C7823 +
            (C10205 * C49236 + C10206 * C49225 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C7824 +
            (C10207 * C49236 + C10208 * C49225 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C725 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C15773 + C15774 + C15775) * C15399 +
            (C15776 + C15777 + C15778) * C15400 +
            (C7826 * C2757 - C7827 * C2752 - C7826 * C2758 + C49232 * C2764 +
             C7828 * C2755 - C7829 * C2751 - C7828 * C2756 + C49219 * C2763 +
             C7830 * C2761 - C7831 * C2754 - C7830 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C725 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C15399 + C10396 * C15400 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C49235 +
            (C10205 * C15399 + C10206 * C15400 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C49223 +
            (C10207 * C15399 + C10208 * C15400 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            C18117 * C17921) *
               C48944 * C725 -
           ((C9146 * C18092 - C9147 * C18090 - C9146 * C18093 +
             C48838 * C18096) *
                C17921 +
            C18117 * C17920 + C11251 * C17919 + C10394 * C17918 +
            C10393 * C17917) *
               C48944 * C49200) *
              C48909 * C453 +
          ((C10395 * C17917 + C10396 * C17918 + C18118 * C17919 +
            C18119 * C17920 +
            (C9146 * C18094 - C9147 * C18091 - C9146 * C18095 +
             C48838 * C18097) *
                C17921) *
               C48944 * C49200 -
           (C18119 * C17921 + C18118 * C17920 + C10396 * C17919 +
            C10395 * C17918 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C17917) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
                C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
                C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
                C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
                C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                   C48956 * C48944 * C725 -
               (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
                C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
                C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
                C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
                C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
                   C48956 * C48944 * C49200) *
                  C233 +
              ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
                C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
                C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
                C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
                C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
                   C48956 * C48944 * C49200 -
               (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
                C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
                C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
                C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
                C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
                   C48956 * C48944 * C725) *
                  C49198) *
             C48875 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                 C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                 C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                    C48956 * C49235 +
                (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
                   C725 -
               ((C1911 + C1912 + C1913) * C48956 * C49203 +
                (C1914 + C1915 + C1916) * C48956 * C49223 +
                (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
                 C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
                 C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                    C48956 * C49235) *
                   C49200) *
                  C233 +
              (((C1916 + C1915 + C1914) * C48956 * C49235 +
                (C1913 + C1912 + C1911) * C48956 * C49223 +
                (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
                 C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
                 C1014 * C1869 - C1015 * C1864 - C1014 * C1870 +
                 C49192 * C1873) *
                    C48956 * C49203) *
                   C49200 -
               ((C1714 + C1715 + C1716) * C48956 * C49203 +
                (C1256 + C1255 + C1254) * C48956 * C49223 +
                (C1253 + C1252 + C1251) * C48956 * C49235) *
                   C725) *
                  C49198) *
             C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C725 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C233 +
          (((C1916 + C1915 + C1914) * C49236 +
            (C3284 + C3285 + C3286) * C49225 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C3286 + C3285 + C3284) * C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C233 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C725 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C233 +
          (((C10826 + C10825 + C10834) * C7823 +
            (C10820 + C10819 + C10833) * C7824 +
            (C9660 * C49236 + C10663 * C49225 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10664 + C10658 + C10659) * C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C725 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C15399 +
            (C16199 + C16200 + C16201) * C15400 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C16201 + C16200 + C16199) * C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C725 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C233 +
          (((C17453 + C17452 + C17451) * C49235 +
            (C17450 + C17449 + C17448) * C49223 +
            (C9660 * C15399 + C10663 * C15400 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C17298 + C17299 + C17300) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C17917 +
            C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
            C18117 * C17921) *
               C48944 * C725 -
           ((C9146 * C18092 - C9147 * C18090 - C9146 * C18093 +
             C48838 * C18096) *
                C17921 +
            C18117 * C17920 + C11251 * C17919 + C10394 * C17918 +
            C10393 * C17917) *
               C48944 * C49200) *
              C233 +
          ((C9662 * C17917 + C10203 * C17918 + C10832 * C17919 +
            C18356 * C17920 +
            (C9146 * C18346 - C9147 * C18345 - C9146 * C18347 +
             C48838 * C18348) *
                C17921) *
               C48944 * C49200 -
           (C18356 * C17921 + C10832 * C17920 + C10203 * C17919 +
            C9662 * C17918 + C9287 * C17917) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
               C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
               C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
               C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
               C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
                  C48956 * C48944 * C871 -
              (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
               C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
               C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
               C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
               C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
                  C48956 * C48944 * C872 +
              (C113 * C879 - C114 * C874 - C113 * C880 + C101 * C889 +
               C115 * C881 - C116 * C875 - C115 * C882 + C102 * C890 +
               C117 * C883 - C118 * C876 - C117 * C884 + C103 * C891 +
               C119 * C885 - C120 * C877 - C119 * C886 + C104 * C892 +
               C121 * C887 - C122 * C878 - C121 * C888 + C105 * C893) *
                  C48956 * C48944 * C873) *
             C48909 * C48875 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
                C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
                C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                   C48956 * C49235 +
               (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
                  C871 -
              ((C1911 + C1912 + C1913) * C48956 * C49203 +
               (C1914 + C1915 + C1916) * C48956 * C49223 +
               (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
                C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
                C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                   C48956 * C49235) *
                  C872 +
              ((C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
                C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
                C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
                   C48956 * C49235 +
               (C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336 +
                C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
                C1014 * C2328 - C1015 * C2320 - C1014 * C2329 +
                C49192 * C2338) *
                   C48956 * C49223 +
               (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
                C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
                C1014 * C2334 - C1015 * C2323 - C1014 * C2335 +
                C49192 * C2341) *
                   C48956 * C49203) *
                  C873) *
             C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C2840 + C2841 + C2842) * C49225 + C3714 * C49206) *
              C48944 * C871 -
          ((C3721 + C3722 + C3723) * C49206 + (C2845 + C2844 + C2843) * C49225 +
           (C2842 + C2841 + C2840) * C49236) *
              C48944 * C872 +
          (C3714 * C49236 + (C3723 + C3722 + C3721) * C49225 +
           (C1010 * C3691 - C1011 * C3688 - C1010 * C3692 + C1004 * C3697 +
            C1012 * C3693 - C1013 * C3689 - C1012 * C3694 + C1005 * C3698 +
            C1014 * C3695 - C1015 * C3690 - C1014 * C3696 + C49192 * C3699) *
               C49206) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C871 -
          ((C8671 + C8672 + C8673) * C48956 * C49203 +
           (C8674 + C8675 + C8676) * C48956 * C7824 +
           (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
               C48956 * C7823) *
              C872 +
          ((C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C48956 * C7823 +
           (C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338) *
               C48956 * C7824 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C871 -
          (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
           (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
               C48956 * C9141) *
              C872 +
          ((C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
               C48956 * C9141 +
           (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
               C48956 * C9142 +
           (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
               C48956 * C9143 +
           (C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
               C48956 * C9144 +
           (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
               C48956 * C9145) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            C10393 * C49225 + C10394 * C49206) *
               C7823 +
           (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
              C871 -
          ((C10833 + C10819 + C10820) * C49203 +
           (C10834 + C10825 + C10826) * C7824 +
           (C11251 * C49206 + C10394 * C49225 + C10393 * C49236) * C7823) *
              C872 +
          ((C10394 * C49236 + C11251 * C49225 +
            (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
                C49206) *
               C7823 +
           (C10203 * C49236 + C10832 * C49225 +
            (C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C49206) *
               C7824 +
           (C10204 * C49236 + C10831 * C49225 +
            (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
             C48838 * C11243) *
                C49206) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C15767 + C15768 + C15769) * C15400 + C16617 * C49206) *
              C48944 * C871 -
          ((C16624 + C16625 + C16626) * C49206 +
           (C15772 + C15771 + C15770) * C15400 +
           (C15769 + C15768 + C15767) * C15399) *
              C48944 * C872 +
          (C16617 * C15399 + (C16626 + C16625 + C16624) * C15400 +
           (C7826 * C3691 - C7827 * C3688 - C7826 * C3692 + C49232 * C3697 +
            C7828 * C3693 - C7829 * C3689 - C7828 * C3694 + C49219 * C3698 +
            C7830 * C3695 - C7831 * C3690 - C7830 * C3696 + C49192 * C3699) *
               C49206) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
              C871 -
          ((C17448 + C17449 + C17450) * C49203 +
           (C17451 + C17452 + C17453) * C49223 +
           (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
              C872 +
          ((C10394 * C15399 + C11251 * C15400 +
            (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
                C49206) *
               C49235 +
           (C10203 * C15399 + C10832 * C15400 +
            (C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C49206) *
               C49223 +
           (C10204 * C15399 + C10831 * C15400 +
            (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
             C48838 * C11243) *
                C49206) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C17917 +
           C10393 * C17918 + C10394 * C17919 + C11251 * C17920 +
           C18117 * C17921) *
              C48944 * C871 -
          (C18593 * C17921 + C18117 * C17920 + C11251 * C17919 +
           C10394 * C17918 + C10393 * C17917) *
              C48944 * C872 +
          (C10394 * C17917 + C11251 * C17918 + C18117 * C17919 +
           C18593 * C17920 +
           (C9146 * C18583 - C9147 * C18582 - C9146 * C18584 +
            C48838 * C18585) *
               C17921) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367 +
             C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366) *
                C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
           (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
              C48926 * C48909 * C110 -
          (((C47954 * C1412 - C11358 * C1408 - C47954 * C1413 + C48848 * C1420 +
             C47973 * C1414 - C11356 * C1409 - C47973 * C1415 +
             C49148 * C1421) *
                C49043 +
            (C11571 + C11570) * C49171) *
               C49203 +
           ((C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640 +
             C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639) *
                C49043 +
            (C11569 + C11568) * C49171) *
               C7824 +
           ((C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365 +
             C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366) *
                C49043 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C49171) *
               C7823) *
              C48926 * C48909 * C111 +
          (((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
             C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
                C49171 +
            (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
             C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
                C49043) *
               C7823 +
           ((C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
             C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
                C49171 +
            (C47973 * C632 - C11356 * C625 - C47973 * C633 + C49148 * C640 +
             C47954 * C634 - C11358 * C626 - C47954 * C635 + C48848 * C641) *
                C49043) *
               C7824 +
           ((C47973 * C530 - C11356 * C523 - C47973 * C531 + C49148 * C538 +
             C47954 * C532 - C11358 * C524 - C47954 * C533 + C48848 * C539) *
                C49171 +
            (C47973 * C1412 - C11356 * C1408 - C47973 * C1413 + C49148 * C1420 +
             C47954 * C1418 - C11358 * C1411 - C47954 * C1419 +
             C48848 * C1423) *
                C49043) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367 +
            C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
            C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
            C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364) *
               C49043) *
              C48944 * C48926 * C48909 * C110 -
          ((C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363 +
            C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
            C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
            C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366) *
               C49043 +
           (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
            C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
            C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
            C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
               C49171) *
              C48944 * C48926 * C48909 * C111 +
          ((C3827 * C134 - C3828 * C125 - C3827 * C135 + C3821 * C146 +
            C3829 * C136 - C3830 * C126 - C3829 * C137 + C3822 * C147 +
            C3831 * C138 - C3832 * C127 - C3831 * C139 + C3823 * C148 +
            C3833 * C140 - C3834 * C128 - C3833 * C141 + C49169 * C149) *
               C49171 +
           (C3827 * C355 - C3828 * C347 - C3827 * C356 + C3821 * C365 +
            C3829 * C353 - C3830 * C346 - C3829 * C354 + C3822 * C364 +
            C3831 * C351 - C3832 * C345 - C3831 * C352 + C3823 * C363 +
            C3833 * C361 - C3834 * C350 - C3833 * C362 + C49169 * C368) *
               C49043) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C20352 +
           (C13066 + C13067) * C20353 + C20240 * C20354 +
           (C20254 + C20253) * C49185) *
              C48944 * C48926 * C48909 * C110 -
          ((C47954 * C2755 - C11358 * C2751 - C47954 * C2756 + C48848 * C2763 +
            C47973 * C2757 - C11356 * C2752 - C47973 * C2758 + C49148 * C2764) *
               C49185 +
           (C19155 + C19154) * C20354 + (C13069 + C13068) * C20353 +
           (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
            C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
               C20352) *
              C48944 * C48926 * C48909 * C111 +
          ((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
            C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
               C20352 +
           (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
            C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
               C20353 +
           (C47973 * C883 - C11356 * C876 - C47973 * C884 + C49148 * C891 +
            C47954 * C885 - C11358 * C877 - C47954 * C886 + C48848 * C892) *
               C20354 +
           (C47973 * C2755 - C11356 * C2751 - C47973 * C2756 + C49148 * C2763 +
            C47954 * C2761 - C11358 * C2754 - C47954 * C2762 + C48848 * C2766) *
               C49185) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367 +
              C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366) *
                 C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C48926 * C233 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
            ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C48926 * C49198) *
              C235 +
          ((((C11568 + C11569) * C49171 + (C12844 + C12845) * C49043) * C7823 +
            ((C11570 + C11571) * C49171 + (C12846 + C12847) * C49043) * C7824 +
            ((C11572 + C11573) * C49171 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365 +
              C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366) *
                 C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364) *
                C49043) *
               C48944 * C48926 * C233 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C4018 + C4019 + C4020 + C4021) * C49171 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366) *
                C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C48926 * C233 -
           ((C19704 + C19705) * C49185 + C19699 * C20354 + C13626 * C20353 +
            (C11563 + C11562) * C20352) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C11568 + C11569) * C20352 + (C12844 + C12845) * C20353 +
            (C18946 + C18947) * C20354 +
            (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 + C49148 * C3263 +
             C47954 * C3260 - C11358 * C3255 - C47954 * C3261 +
             C48848 * C3264) *
                C49185) *
               C48944 * C48926 * C49198 -
           ((C47954 * C2755 - C11358 * C2751 - C47954 * C2756 + C48848 * C2763 +
             C47973 * C2757 - C11356 * C2752 - C47973 * C2758 +
             C49148 * C2764) *
                C49185 +
            (C19155 + C19154) * C20354 + (C13069 + C13068) * C20353 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C20352) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C343 -
           (((C47954 * C2332 - C11358 * C2322 - C47954 * C2333 +
              C48848 * C2340 + C47973 * C2330 - C11356 * C2321 -
              C47973 * C2331 + C49148 * C2339) *
                 C49043 +
             (C12118 + C12119) * C49171) *
                C49203 +
            ((C47954 * C2326 - C11358 * C2319 - C47954 * C2327 +
              C48848 * C2337 + C47973 * C2324 - C11356 * C2318 -
              C47973 * C2325 + C49148 * C2336) *
                 C49043 +
             (C12120 + C12121) * C49171) *
                C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C48909 * C235 +
          ((((C13068 + C13069) * C49171 +
             (C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890 +
              C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891) *
                 C49043) *
                C7823 +
            ((C12844 + C12845) * C49171 +
             (C47973 * C2326 - C11356 * C2319 - C47973 * C2327 +
              C49148 * C2337 + C47954 * C2328 - C11358 * C2320 -
              C47954 * C2329 + C48848 * C2338) *
                 C49043) *
                C7824 +
            ((C12846 + C12847) * C49171 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C343 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C5336 + C5337 + C5338 + C5339) * C49171 +
            (C3827 * C881 - C3828 * C875 - C3827 * C882 + C3821 * C890 +
             C3829 * C883 - C3830 * C876 - C3829 * C884 + C3822 * C891 +
             C3831 * C885 - C3832 * C877 - C3831 * C886 + C3823 * C892 +
             C3833 * C887 - C3834 * C878 - C3833 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C343 -
           ((C47954 * C3693 - C11358 * C3689 - C47954 * C3694 + C48848 * C3698 +
             C47973 * C3691 - C11356 * C3688 - C47973 * C3692 +
             C49148 * C3697) *
                C49185 +
            (C20253 + C20254) * C20354 + (C14185 + C14186) * C20353 +
            (C13067 + C13066) * C20352) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C13068 + C13069) * C20352 + (C19154 + C19155) * C20353 +
            (C20629 + C20630) * C20354 +
            (C47973 * C3693 - C11356 * C3689 - C47973 * C3694 + C49148 * C3698 +
             C47954 * C3695 - C11358 * C3690 - C47954 * C3696 +
             C48848 * C3699) *
                C49185) *
               C48944 * C49200 -
           ((C20630 + C20629) * C49185 + (C19155 + C19154) * C20354 +
            (C13069 + C13068) * C20353 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C20352) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C48926 * C451 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
            ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C48926 * C49198) *
              C453 +
          ((((C11568 + C11569) * C49171 + (C12844 + C12845) * C49043) * C7823 +
            ((C11570 + C11571) * C49171 + (C12846 + C12847) * C49043) * C7824 +
            ((C11572 + C11573) * C49171 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C48926 * C451 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C4018 + C4019 + C4020 + C4021) * C49171 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C48926 * C451 -
           ((C19704 + C19705) * C49185 + C19699 * C20354 + C13626 * C20353 +
            (C11563 + C11562) * C20352) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C11568 + C11569) * C20352 + (C12844 + C12845) * C20353 +
            (C18946 + C18947) * C20354 +
            (C47973 * C3258 - C11356 * C3254 - C47973 * C3259 + C49148 * C3263 +
             C47954 * C3260 - C11358 * C3255 - C47954 * C3261 +
             C48848 * C3264) *
                C49185) *
               C48944 * C48926 * C49198 -
           ((C20630 + C20629) * C49185 + (C19155 + C19154) * C20354 +
            (C13069 + C13068) * C20353 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C20352) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C13066 + C13067) * C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
           C13413 * C49203) *
              C48926 * C517 -
          (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
           ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
           ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
              C48926 * C518 +
          (C13413 * C7823 +
           (C11933 * C49171 + (C12117 + C12116) * C49043) * C7824 +
           ((C11949 + C11948) * C49171 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C49043) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C5332 + C5333 + C5334 + C5335) * C49043) *
              C48944 * C48926 * C517 -
          ((C4562 + C4563 + C4564 + C4565) * C49043 +
           (C4017 + C4016 + C4015 + C4014) * C49171) *
              C48944 * C48926 * C518 +
          ((C4407 + C4406 + C4405 + C4404) * C49171 +
           (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
            C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
            C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
            C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
               C49043) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C20352 +
           (C13066 + C13067) * C20353 + C20240 * C20354 +
           (C20254 + C20253) * C49185) *
              C48944 * C48926 * C517 -
          ((C19704 + C19705) * C49185 + C19699 * C20354 + C13626 * C20353 +
           (C11563 + C11562) * C20352) *
              C48944 * C48926 * C518 +
          (C11932 * C20352 + C13411 * C20353 + (C13636 + C13635) * C20354 +
           (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
            C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
            C47954 * C10365 + C48848 * C10367) *
               C49185) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C343 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C451 +
          (((C13608 * C49171 + (C13638 + C13637) * C49043) * C7823 +
            (C13411 * C49171 + (C13636 + C13635) * C49043) * C7824 +
            ((C12117 + C12116) * C49171 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            (C13617 * C49043 + (C11565 + C11564) * C49171) * C7824 +
            (C13626 * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C343 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C451 +
          (((C4565 + C4564 + C4563 + C4562) * C49171 +
            (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
             C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
             C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
             C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C343 -
           ((C47954 * C3693 - C11358 * C3689 - C47954 * C3694 + C48848 * C3698 +
             C47973 * C3691 - C11356 * C3688 - C47973 * C3692 +
             C49148 * C3697) *
                C49185 +
            (C20253 + C20254) * C20354 + (C14185 + C14186) * C20353 +
            (C13067 + C13066) * C20352) *
               C48944 * C49200) *
              C451 +
          ((C13608 * C20352 + C19690 * C20353 + (C19705 + C19704) * C20354 +
            (C47973 * C11238 - C11356 * C11236 - C47973 * C11239 +
             C49148 * C11242 + C47954 * C18005 - C11358 * C18004 -
             C47954 * C18006 + C48848 * C18007) *
                C49185) *
               C48944 * C49200 -
           ((C19704 + C19705) * C49185 + C19699 * C20354 + C13626 * C20353 +
            (C11563 + C11562) * C20352) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C48909 * C453 +
          ((((C13068 + C13069) * C49171 +
             (C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890 +
              C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891) *
                 C49043) *
                C7823 +
            ((C12844 + C12845) * C49171 +
             (C47973 * C2326 - C11356 * C2319 - C47973 * C2327 +
              C49148 * C2337 + C47954 * C2328 - C11358 * C2320 -
              C47954 * C2329 + C48848 * C2338) *
                 C49043) *
                C7824 +
            ((C12846 + C12847) * C49171 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C725 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C5336 + C5337 + C5338 + C5339) * C49171 +
            (C3827 * C881 - C3828 * C875 - C3827 * C882 + C3821 * C890 +
             C3829 * C883 - C3830 * C876 - C3829 * C884 + C3822 * C891 +
             C3831 * C885 - C3832 * C877 - C3831 * C886 + C3823 * C892 +
             C3833 * C887 - C3834 * C878 - C3833 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C725 -
           ((C47954 * C3693 - C11358 * C3689 - C47954 * C3694 + C48848 * C3698 +
             C47973 * C3691 - C11356 * C3688 - C47973 * C3692 +
             C49148 * C3697) *
                C49185 +
            (C20253 + C20254) * C20354 + (C14185 + C14186) * C20353 +
            (C13067 + C13066) * C20352) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C13068 + C13069) * C20352 + (C19154 + C19155) * C20353 +
            (C20629 + C20630) * C20354 +
            (C47973 * C3693 - C11356 * C3689 - C47973 * C3694 + C49148 * C3698 +
             C47954 * C3695 - C11358 * C3690 - C47954 * C3696 +
             C48848 * C3699) *
                C49185) *
               C48944 * C49200 -
           ((C20630 + C20629) * C49185 + (C19155 + C19154) * C20354 +
            (C13069 + C13068) * C20353 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C20352) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C233 +
          (((C13608 * C49171 + (C13638 + C13637) * C49043) * C7823 +
            (C13411 * C49171 + (C13636 + C13635) * C49043) * C7824 +
            ((C12117 + C12116) * C49171 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            (C13617 * C49043 + (C11565 + C11564) * C49171) * C7824 +
            (C13626 * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C725 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C233 +
          (((C4565 + C4564 + C4563 + C4562) * C49171 +
            (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
             C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
             C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
             C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C20352 +
            (C13066 + C13067) * C20353 + C20240 * C20354 +
            (C20254 + C20253) * C49185) *
               C48944 * C725 -
           ((C47954 * C3693 - C11358 * C3689 - C47954 * C3694 + C48848 * C3698 +
             C47973 * C3691 - C11356 * C3688 - C47973 * C3692 +
             C49148 * C3697) *
                C49185 +
            (C20253 + C20254) * C20354 + (C14185 + C14186) * C20353 +
            (C13067 + C13066) * C20352) *
               C48944 * C49200) *
              C233 +
          ((C13608 * C20352 + C19690 * C20353 + (C19705 + C19704) * C20354 +
            (C47973 * C11238 - C11356 * C11236 - C47973 * C11239 +
             C49148 * C11242 + C47954 * C18005 - C11358 * C18004 -
             C47954 * C18006 + C48848 * C18007) *
                C49185) *
               C48944 * C49200 -
           ((C19704 + C19705) * C49185 + C19699 * C20354 + C13626 * C20353 +
            (C11563 + C11562) * C20352) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C13066 + C13067) * C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
           C13413 * C49203) *
              C871 -
          (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
           ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
           ((C14185 + C14186) * C49043 + (C13067 + C13066) * C49171) * C7823) *
              C872 +
          (((C14186 + C14185) * C49171 +
            (C47973 * C2759 - C11356 * C2753 - C47973 * C2760 + C49148 * C2765 +
             C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
             C48848 * C2764) *
                C49043) *
               C7823 +
           ((C13638 + C13637) * C49171 +
            (C47973 * C3256 - C11356 * C3253 - C47973 * C3257 + C49148 * C3262 +
             C47954 * C3258 - C11358 * C3254 - C47954 * C3259 +
             C48848 * C3263) *
                C49043) *
               C7824 +
           ((C13636 + C13635) * C49171 +
            (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
             C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
             C47954 * C10365 + C48848 * C10367) *
                C49043) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C5332 + C5333 + C5334 + C5335) * C49043) *
              C48944 * C871 -
          ((C6080 + C6081 + C6082 + C6083) * C49043 +
           (C5335 + C5334 + C5333 + C5332) * C49171) *
              C48944 * C872 +
          ((C6083 + C6082 + C6081 + C6080) * C49171 +
           (C3827 * C2759 - C3828 * C2753 - C3827 * C2760 + C3821 * C2765 +
            C3829 * C2757 - C3830 * C2752 - C3829 * C2758 + C3822 * C2764 +
            C3831 * C2755 - C3832 * C2751 - C3831 * C2756 + C3823 * C2763 +
            C3833 * C2761 - C3834 * C2754 - C3833 * C2762 + C49169 * C2766) *
               C49043) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C20352 +
           (C13066 + C13067) * C20353 + C20240 * C20354 + C21347 * C49185) *
              C48944 * C871 -
          ((C21360 + C21361) * C49185 + (C20253 + C20254) * C20354 +
           (C14185 + C14186) * C20353 + (C13067 + C13066) * C20352) *
              C48944 * C872 +
          (C20240 * C20352 + C21347 * C20353 + (C21361 + C21360) * C20354 +
           (C47973 * C18092 - C11356 * C18090 - C47973 * C18093 +
            C49148 * C18096 + C47954 * C18094 - C11358 * C18091 -
            C47954 * C18095 + C48848 * C18097) *
               C49185) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1010 * C251 - C1011 * C241 - C1010 * C252 + C1004 * C259 +
            C1012 * C249 - C1013 * C240 - C1012 * C250 + C1005 * C258 +
            C1014 * C247 - C1015 * C239 - C1014 * C248 + C49192 * C257) *
               C48956 * C49223 +
           (C1010 * C526 - C1011 * C521 - C1010 * C527 + C1004 * C536 +
            C1012 * C528 - C1013 * C522 - C1012 * C529 + C1005 * C537 +
            C1014 * C530 - C1015 * C523 - C1014 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C1014 * C532 - C1015 * C524 - C1014 * C533 + C49192 * C539 +
            C1012 * C530 - C1013 * C523 - C1012 * C531 + C1005 * C538 +
            C1010 * C528 - C1011 * C522 - C1010 * C529 + C1004 * C537) *
               C48956 * C49203 +
           (C1014 * C245 - C1015 * C238 - C1014 * C246 + C49192 * C256 +
            C1012 * C247 - C1013 * C239 - C1012 * C248 + C1005 * C257 +
            C1010 * C249 - C1011 * C240 - C1010 * C250 + C1004 * C258) *
               C48956 * C49223 +
           (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
            C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
            C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
               C48956 * C49235) *
              C48926 * C48909 * C111 +
          ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
            C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
            C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
               C48956 * C49235 +
           (C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
            C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
            C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
               C48956 * C49223 +
           (C1010 * C530 - C1011 * C523 - C1010 * C531 + C1004 * C538 +
            C1012 * C532 - C1013 * C524 - C1012 * C533 + C1005 * C539 +
            C1014 * C534 - C1015 * C525 - C1014 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C48909 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C48956 * C48944 * C48926 * C48909 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C48956 * C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C7826 * C251 - C7827 * C241 - C7826 * C252 + C49232 * C259 +
            C7828 * C249 - C7829 * C240 - C7828 * C250 + C49219 * C258 +
            C7830 * C247 - C7831 * C239 - C7830 * C248 + C49192 * C257) *
               C48956 * C7824 +
           (C7826 * C526 - C7827 * C521 - C7826 * C527 + C49232 * C536 +
            C7828 * C528 - C7829 * C522 - C7828 * C529 + C49219 * C537 +
            C7830 * C530 - C7831 * C523 - C7830 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C7830 * C532 - C7831 * C524 - C7830 * C533 + C49192 * C539 +
            C7828 * C530 - C7829 * C523 - C7828 * C531 + C49219 * C538 +
            C7826 * C528 - C7827 * C522 - C7826 * C529 + C49232 * C537) *
               C48956 * C49203 +
           (C7830 * C245 - C7831 * C238 - C7830 * C246 + C49192 * C256 +
            C7828 * C247 - C7829 * C239 - C7828 * C248 + C49219 * C257 +
            C7826 * C249 - C7827 * C240 - C7826 * C250 + C49232 * C258) *
               C48956 * C7824 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C48956 * C7823) *
              C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C48956 * C7823 +
           (C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
            C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
            C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
               C48956 * C7824 +
           (C7826 * C530 - C7827 * C523 - C7826 * C531 + C49232 * C538 +
            C7828 * C532 - C7829 * C524 - C7828 * C533 + C49219 * C539 +
            C7830 * C534 - C7831 * C525 - C7830 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           (C9146 * C251 - C9147 * C241 - C9146 * C252 + C48838 * C259) *
               C48956 * C9142 +
           (C9146 * C526 - C9147 * C521 - C9146 * C527 + C48838 * C536) *
               C48956 * C9143 +
           (C9146 * C1170 - C9147 * C1164 - C9146 * C1171 + C48838 * C1176) *
               C48956 * C9144 +
           (C9146 * C1683 - C9147 * C1680 - C9146 * C1684 + C48838 * C1689) *
               C48956 * C9145) *
              C48926 * C48909 * C110 -
          ((C9146 * C1685 - C9147 * C1681 - C9146 * C1686 + C48838 * C1690) *
               C48956 * C9145 +
           (C9146 * C1168 - C9147 * C1163 - C9146 * C1169 + C48838 * C1175) *
               C48956 * C9144 +
           (C9146 * C528 - C9147 * C522 - C9146 * C529 + C48838 * C537) *
               C48956 * C9143 +
           (C9146 * C249 - C9147 * C240 - C9146 * C250 + C48838 * C258) *
               C48956 * C9142 +
           (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
               C48956 * C9141) *
              C48926 * C48909 * C111 +
          ((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
               C48956 * C9141 +
           (C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
               C48956 * C9142 +
           (C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
               C48956 * C9143 +
           (C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
               C48956 * C9144 +
           (C9146 * C1687 - C9147 * C1682 - C9146 * C1688 + C48838 * C1691) *
               C48956 * C9145) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365) *
               C15400 +
           (C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C49206) *
              C48944 * C48926 * C48909 * C110 -
          ((C7830 * C885 - C7831 * C877 - C7830 * C886 + C49192 * C892 +
            C7828 * C883 - C7829 * C876 - C7828 * C884 + C49219 * C891 +
            C7826 * C881 - C7827 * C875 - C7826 * C882 + C49232 * C890) *
               C49206 +
           (C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364 +
            C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
            C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366) *
               C15400 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C15399) *
              C48944 * C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C15399 +
           (C7826 * C355 - C7827 * C347 - C7826 * C356 + C49232 * C365 +
            C7828 * C353 - C7829 * C346 - C7828 * C354 + C49219 * C364 +
            C7830 * C351 - C7831 * C345 - C7830 * C352 + C49192 * C363) *
               C15400 +
           (C7826 * C883 - C7827 * C876 - C7826 * C884 + C49232 * C891 +
            C7828 * C885 - C7829 * C877 - C7828 * C886 + C49219 * C892 +
            C7830 * C887 - C7831 * C878 - C7830 * C888 + C49192 * C893) *
               C49206) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C9287 * C15399 + C9662 * C15400 + C10203 * C49206) * C49223 +
           (C9288 * C15399 + C9661 * C15400 + C10204 * C49206) * C49203) *
              C48926 * C48909 * C110 -
          ((C10208 * C49206 + C10207 * C15400 + C9292 * C15399) * C49203 +
           (C10206 * C49206 + C10205 * C15400 + C9291 * C15399) * C49223 +
           (C10396 * C49206 + C10395 * C15400 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C15399) *
               C49235) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C15399 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C15400 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C49206) *
               C49235 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C15399 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C15400 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C49206) *
               C49223 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C15399 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C15400 +
            (C9146 * C2334 - C9147 * C2323 - C9146 * C2335 + C48838 * C2341) *
                C49206) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C233 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C235 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C233 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C235 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C233 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C233 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C235 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365) *
                C15400 +
            (C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
             C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
             C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
                C49206) *
               C48944 * C48926 * C233 -
           ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
             C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
             C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
                C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C15399 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C15400 +
            (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
             C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
             C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C7830 * C885 - C7831 * C877 - C7830 * C886 + C49192 * C892 +
             C7828 * C883 - C7829 * C876 - C7828 * C884 + C49219 * C891 +
             C7826 * C881 - C7827 * C875 - C7826 * C882 + C49232 * C890) *
                C49206 +
            (C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366) *
                C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C48926 * C233 -
           ((C10663 * C49206 + C9660 * C15400 + C9289 * C15399) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C48926 * C49198) *
              C235 +
          (((C16889 + C16890 + C16891) * C49235 +
            (C16892 + C16893 + C16894) * C49223 +
            (C9293 * C15399 + C14432 * C15400 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C343 -
           ((C1014 * C1412 - C1015 * C1408 - C1014 * C1413 + C49192 * C1420 +
             C1012 * C1414 - C1013 * C1409 - C1012 * C1415 + C1005 * C1421 +
             C1010 * C1416 - C1011 * C1410 - C1010 * C1417 + C1004 * C1422) *
                C48956 * C49203 +
            (C1014 * C632 - C1015 * C625 - C1014 * C633 + C49192 * C640 +
             C1012 * C630 - C1013 * C624 - C1012 * C631 + C1005 * C639 +
             C1010 * C628 - C1011 * C623 - C1010 * C629 + C1004 * C638) *
                C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C235 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C235 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C343 -
           ((C7830 * C1412 - C7831 * C1408 - C7830 * C1413 + C49192 * C1420 +
             C7828 * C1414 - C7829 * C1409 - C7828 * C1415 + C49219 * C1421 +
             C7826 * C1416 - C7827 * C1410 - C7826 * C1417 + C49232 * C1422) *
                C48956 * C49203 +
            (C7830 * C632 - C7831 * C625 - C7830 * C633 + C49192 * C640 +
             C7828 * C630 - C7829 * C624 - C7828 * C631 + C49219 * C639 +
             C7826 * C628 - C7827 * C623 - C7826 * C629 + C49232 * C638) *
                C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C235 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           ((C9146 * C9386 - C9147 * C9384 - C9146 * C9387 + C48838 * C9390) *
                C48956 * C9145 +
            (C9146 * C1865 - C9147 * C1862 - C9146 * C1866 + C48838 * C1871) *
                C48956 * C9144 +
            (C9146 * C1416 - C9147 * C1410 - C9146 * C1417 + C48838 * C1422) *
                C48956 * C9143 +
            (C9146 * C628 - C9147 * C623 - C9146 * C629 + C48838 * C638) *
                C48956 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C235 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C343 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C15773 + C15774 + C15775) * C15399 +
            (C15776 + C15777 + C15778) * C15400 +
            (C7826 * C2757 - C7827 * C2752 - C7826 * C2758 + C49232 * C2764 +
             C7828 * C2755 - C7829 * C2751 - C7828 * C2756 + C49219 * C2763 +
             C7830 * C2761 - C7831 * C2754 - C7830 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C343 -
           ((C10831 * C49206 + C10204 * C15400 + C9661 * C15399) * C49203 +
            (C10832 * C49206 + C10203 * C15400 + C9662 * C15399) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C15399 + C10396 * C15400 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C49235 +
            (C10205 * C15399 + C10206 * C15400 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C49223 +
            (C10207 * C15399 + C10208 * C15400 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C451 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C453 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C451 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C453 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C451 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C451 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C453 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C48926 * C451 -
           ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
             C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
             C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
                C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C15399 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C15400 +
            (C7826 * C2326 - C7827 * C2319 - C7826 * C2327 + C49232 * C2337 +
             C7828 * C2328 - C7829 * C2320 - C7828 * C2329 + C49219 * C2338 +
             C7830 * C2602 - C7831 * C2601 - C7830 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 +
            (C16886 + C16887 + C16888) * C49203) *
               C48926 * C451 -
           ((C10663 * C49206 + C9660 * C15400 + C9289 * C15399) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C48926 * C49198) *
              C453 +
          (((C16889 + C16890 + C16891) * C49235 +
            (C16892 + C16893 + C16894) * C49223 +
            (C9293 * C15399 + C14432 * C15400 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C48926 * C517 -
          ((C1714 + C1715 + C1716) * C48956 * C49203 +
           (C1256 + C1255 + C1254) * C48956 * C49223 +
           (C1253 + C1252 + C1251) * C48956 * C49235) *
              C48926 * C518 +
          (C1710 * C49235 + (C1716 + C1715 + C1714) * C48956 * C49223 +
           (C1010 * C1683 - C1011 * C1680 - C1010 * C1684 + C1004 * C1689 +
            C1012 * C1685 - C1013 * C1681 - C1012 * C1686 + C1005 * C1690 +
            C1014 * C1687 - C1015 * C1682 - C1014 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C517 -
          (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 + C119 * C245 -
           C120 * C238 - C119 * C246 + C104 * C256 + C117 * C247 - C118 * C239 -
           C117 * C248 + C103 * C257 + C115 * C249 - C116 * C240 - C115 * C250 +
           C102 * C258 + C113 * C251 - C114 * C241 - C113 * C252 +
           C101 * C259) *
              C48956 * C48944 * C48926 * C518 +
          (C113 * C526 - C114 * C521 - C113 * C527 + C101 * C536 + C115 * C528 -
           C116 * C522 - C115 * C529 + C102 * C537 + C117 * C530 - C118 * C523 -
           C117 * C531 + C103 * C538 + C119 * C532 - C120 * C524 - C119 * C533 +
           C104 * C539 + C121 * C534 - C122 * C525 - C121 * C535 +
           C105 * C540) *
              C48956 * C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C48926 * C517 -
          ((C8486 + C8487 + C8488) * C48956 * C49203 +
           (C8056 + C8055 + C8054) * C48956 * C7824 +
           (C8053 + C8052 + C8051) * C48956 * C7823) *
              C48926 * C518 +
          (C8482 * C7823 + (C8488 + C8487 + C8486) * C48956 * C7824 +
           (C7826 * C1683 - C7827 * C1680 - C7826 * C1684 + C49232 * C1689 +
            C7828 * C1685 - C7829 * C1681 - C7828 * C1686 + C49219 * C1690 +
            C7830 * C1687 - C7831 * C1682 - C7830 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C48926 * C517 -
          (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
           C9295 * C9141) *
              C48926 * C518 +
          (C9296 * C9141 + C9297 * C9142 + C9298 * C9143 + C9548 * C9144 +
           (C9146 * C9537 - C9147 * C9536 - C9146 * C9538 + C48838 * C9539) *
               C48956 * C9145) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C15767 + C15768 + C15769) * C15400 +
           (C15770 + C15771 + C15772) * C49206) *
              C48944 * C48926 * C517 -
          ((C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336) *
               C49206 +
           (C8674 + C8675 + C8676) * C15400 +
           (C8053 + C8052 + C8051) * C15399) *
              C48944 * C48926 * C518 +
          (C8478 * C15399 + (C8673 + C8672 + C8671) * C15400 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C49206) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
              C48926 * C517 -
          ((C17298 + C17299 + C17300) * C49203 +
           (C16888 + C16887 + C16886) * C49223 +
           (C16885 + C16884 + C16883) * C49235) *
              C48926 * C518 +
          (C17301 * C49235 + (C17300 + C17299 + C17298) * C49223 +
           (C9290 * C15399 + C9659 * C15400 +
            (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                C49206) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C343 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C451 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C451 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C343 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C451 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C343 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C15399 +
            (C16199 + C16200 + C16201) * C15400 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C16201 + C16200 + C16199) * C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C343 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C451 +
          (((C17453 + C17452 + C17451) * C49235 +
            (C17450 + C17449 + C17448) * C49223 +
            (C9660 * C15399 + C10663 * C15400 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C17298 + C17299 + C17300) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C453 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C453 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C453 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C453 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C725 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C15773 + C15774 + C15775) * C15399 +
            (C15776 + C15777 + C15778) * C15400 +
            (C7826 * C2757 - C7827 * C2752 - C7826 * C2758 + C49232 * C2764 +
             C7828 * C2755 - C7829 * C2751 - C7828 * C2756 + C49219 * C2763 +
             C7830 * C2761 - C7831 * C2754 - C7830 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C15778 + C15777 + C15776) * C49206 +
            (C15775 + C15774 + C15773) * C15400 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C15399) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C725 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C15399 + C10396 * C15400 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C49235 +
            (C10205 * C15399 + C10206 * C15400 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C49223 +
            (C10207 * C15399 + C10208 * C15400 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C16894 + C16893 + C16892) * C49203 +
            (C16891 + C16890 + C16889) * C49223 +
            (C10396 * C49206 + C10395 * C15400 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C15399) *
                C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C233 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C233 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C233 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C15399 +
            (C15767 + C15768 + C15769) * C15400 +
            (C15770 + C15771 + C15772) * C49206) *
               C48944 * C725 -
           ((C7830 * C2755 - C7831 * C2751 - C7830 * C2756 + C49192 * C2763 +
             C7828 * C2757 - C7829 * C2752 - C7828 * C2758 + C49219 * C2764 +
             C7826 * C2759 - C7827 * C2753 - C7826 * C2760 + C49232 * C2765) *
                C49206 +
            (C15772 + C15771 + C15770) * C15400 +
            (C15769 + C15768 + C15767) * C15399) *
               C48944 * C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C15399 +
            (C16199 + C16200 + C16201) * C15400 +
            (C7826 * C3256 - C7827 * C3253 - C7826 * C3257 + C49232 * C3262 +
             C7828 * C3258 - C7829 * C3254 - C7828 * C3259 + C49219 * C3263 +
             C7830 * C3260 - C7831 * C3255 - C7830 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C16201 + C16200 + C16199) * C49206 +
            (C8674 + C8675 + C8676) * C15400 +
            (C8053 + C8052 + C8051) * C15399) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C15399 +
             C10393 * C15400 + C10394 * C49206) *
                C49235 +
            (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
               C725 -
           ((C17448 + C17449 + C17450) * C49203 +
            (C17451 + C17452 + C17453) * C49223 +
            (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
               C49200) *
              C233 +
          (((C17453 + C17452 + C17451) * C49235 +
            (C17450 + C17449 + C17448) * C49223 +
            (C9660 * C15399 + C10663 * C15400 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C17298 + C17299 + C17300) * C49203 +
            (C16888 + C16887 + C16886) * C49223 +
            (C16885 + C16884 + C16883) * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C871 -
          ((C1911 + C1912 + C1913) * C48956 * C49203 +
           (C1914 + C1915 + C1916) * C48956 * C49223 +
           (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
            C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
            C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
               C48956 * C49235) *
              C872 +
          ((C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
            C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
            C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
               C48956 * C49235 +
           (C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336 +
            C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
            C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338) *
               C48956 * C49223 +
           (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
            C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
            C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C871 -
          (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 + C119 * C353 -
           C120 * C346 - C119 * C354 + C104 * C364 + C117 * C355 - C118 * C347 -
           C117 * C356 + C103 * C365 + C115 * C357 - C116 * C348 - C115 * C358 +
           C102 * C366 + C113 * C359 - C114 * C349 - C113 * C360 +
           C101 * C367) *
              C48956 * C48944 * C872 +
          (C113 * C879 - C114 * C874 - C113 * C880 + C101 * C889 + C115 * C881 -
           C116 * C875 - C115 * C882 + C102 * C890 + C117 * C883 - C118 * C876 -
           C117 * C884 + C103 * C891 + C119 * C885 - C120 * C877 - C119 * C886 +
           C104 * C892 + C121 * C887 - C122 * C878 - C121 * C888 +
           C105 * C893) *
              C48956 * C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C871 -
          ((C8671 + C8672 + C8673) * C48956 * C49203 +
           (C8674 + C8675 + C8676) * C48956 * C7824 +
           (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
               C48956 * C7823) *
              C872 +
          ((C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C48956 * C7823 +
           (C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338) *
               C48956 * C7824 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C871 -
          (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
           (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
               C48956 * C9141) *
              C872 +
          ((C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
               C48956 * C9141 +
           (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
               C48956 * C9142 +
           (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
               C48956 * C9143 +
           (C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
               C48956 * C9144 +
           (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
               C48956 * C9145) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C15399 +
           (C15767 + C15768 + C15769) * C15400 + C16617 * C49206) *
              C48944 * C871 -
          ((C16624 + C16625 + C16626) * C49206 +
           (C15772 + C15771 + C15770) * C15400 +
           (C15769 + C15768 + C15767) * C15399) *
              C48944 * C872 +
          (C16617 * C15399 + (C16626 + C16625 + C16624) * C15400 +
           (C7826 * C3691 - C7827 * C3688 - C7826 * C3692 + C49232 * C3697 +
            C7828 * C3693 - C7829 * C3689 - C7828 * C3694 + C49219 * C3698 +
            C7830 * C3695 - C7831 * C3690 - C7830 * C3696 + C49192 * C3699) *
               C49206) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C15399 +
            C10393 * C15400 + C10394 * C49206) *
               C49235 +
           (C16883 + C16884 + C16885) * C49223 + C17301 * C49203) *
              C871 -
          ((C17448 + C17449 + C17450) * C49203 +
           (C17451 + C17452 + C17453) * C49223 +
           (C11251 * C49206 + C10394 * C15400 + C10393 * C15399) * C49235) *
              C872 +
          ((C10394 * C15399 + C11251 * C15400 +
            (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
                C49206) *
               C49235 +
           (C10203 * C15399 + C10832 * C15400 +
            (C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C49206) *
               C49223 +
           (C10204 * C15399 + C10831 * C15400 +
            (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
             C48838 * C11243) *
                C49206) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C31431 +
            (C28593 + C28594 + C28595) * C49043) *
               C49170 +
           ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
              C48926 * C48909 * C110 -
          (((C28362 + C28361 + C28360) * C49043 +
            (C26982 + C26981 + C26980) * C31431) *
               C49003 +
           ((C28598 + C28597 + C28596) * C49043 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C31431) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C47983 * C134 - C48023 * C125 - C47983 * C135 + C48843 * C146 +
             C47979 * C136 - C48018 * C126 - C47979 * C137 + C48851 * C147 +
             C48029 * C138 - C26754 * C127 - C48029 * C139 + C26745 * C148) *
                C31431 +
            (C47983 * C355 - C48023 * C347 - C47983 * C356 + C48843 * C365 +
             C47979 * C353 - C48018 * C346 - C47979 * C354 + C48851 * C364 +
             C48029 * C351 - C26754 * C345 - C48029 * C352 + C26745 * C363) *
                C49043) *
               C49170 +
           ((C47983 * C247 - C48023 * C239 - C47983 * C248 + C48843 * C257 +
             C47979 * C245 - C48018 * C238 - C47979 * C246 + C48851 * C256 +
             C48029 * C243 - C26754 * C237 - C48029 * C244 + C26745 * C255) *
                C31431 +
            (C47983 * C632 - C48023 * C625 - C47983 * C633 + C48843 * C640 +
             C47979 * C634 - C48018 * C626 - C47979 * C635 + C48851 * C641 +
             C48029 * C636 - C26754 * C627 - C48029 * C637 + C26745 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C48926 * C233 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C31431) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C31431) * C49170) *
               C48926 * C49198) *
              C235 +
          ((((C26980 + C26981 + C26982) * C31431 +
             (C28360 + C28361 + C28362) * C49043) *
                C49170 +
            ((C26983 + C26984 + C26985) * C31431 +
             (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 +
              C48843 * C1421 + C47979 * C1412 - C48018 * C1408 -
              C47979 * C1413 + C48851 * C1420 + C48029 * C1418 -
              C26754 * C1411 - C48029 * C1419 + C26745 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C31431) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C31431) *
                C49170) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C343 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C31431) * C49003 +
            ((C29710 + C29711 + C29712) * C49043 +
             (C28595 + C28594 + C28593) * C31431) *
                C49170) *
               C49200) *
              C48909 * C235 +
          ((((C28596 + C28597 + C28598) * C31431 +
             (C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890 +
              C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
              C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892) *
                 C49043) *
                C49170 +
            ((C28360 + C28361 + C28362) * C31431 +
             (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 +
              C48843 * C2337 + C47979 * C2328 - C48018 * C2320 -
              C47979 * C2329 + C48851 * C2338 + C48029 * C2602 -
              C26754 * C2601 - C48029 * C2603 + C26745 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C31431) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C31431) *
                C49170) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C48926 * C451 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C31431) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C31431) * C49170) *
               C48926 * C49198) *
              C453 +
          ((((C26980 + C26981 + C26982) * C31431 +
             (C28360 + C28361 + C28362) * C49043) *
                C49170 +
            ((C26983 + C26984 + C26985) * C31431 +
             (C47983 * C1414 - C48023 * C1409 - C47983 * C1415 +
              C48843 * C1421 + C47979 * C1412 - C48018 * C1408 -
              C47979 * C1413 + C48851 * C1420 + C48029 * C1418 -
              C26754 * C1411 - C48029 * C1419 + C26745 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C31431) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C31431) *
                C49170) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C31431 +
            (C28593 + C28594 + C28595) * C49043) *
               C49170 +
           ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
              C48926 * C517 -
          (((C27594 + C27595 + C27596) * C49043 +
            (C26979 + C26978 + C26977) * C31431) *
               C49003 +
           (C29151 * C49043 + (C26976 + C26975 + C26974) * C31431) * C49170) *
              C48926 * C518 +
          ((C27401 * C31431 + (C27596 + C27595 + C27594) * C49043) * C49170 +
           ((C27411 + C27410 + C27409) * C31431 +
            (C47983 * C1865 - C48023 * C1862 - C47983 * C1866 + C48843 * C1871 +
             C47979 * C1867 - C48018 * C1863 - C47979 * C1868 + C48851 * C1872 +
             C48029 * C1869 - C26754 * C1864 - C48029 * C1870 +
             C26745 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C343 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C31431) * C49003 +
            ((C29710 + C29711 + C29712) * C49043 +
             (C28595 + C28594 + C28593) * C31431) *
                C49170) *
               C49200) *
              C451 +
          (((C29147 * C31431 + (C29157 + C29156 + C29155) * C49043) * C49170 +
            ((C27596 + C27595 + C27594) * C31431 +
             (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 +
              C48843 * C2339 + C47979 * C2332 - C48018 * C2322 -
              C47979 * C2333 + C48851 * C2340 + C48029 * C2334 -
              C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C31431) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C31431) * C49170) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C725 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C31431) * C49003 +
            ((C29710 + C29711 + C29712) * C49043 +
             (C28595 + C28594 + C28593) * C31431) *
                C49170) *
               C49200) *
              C48909 * C453 +
          ((((C28596 + C28597 + C28598) * C31431 +
             (C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890 +
              C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
              C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892) *
                 C49043) *
                C49170 +
            ((C28360 + C28361 + C28362) * C31431 +
             (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 +
              C48843 * C2337 + C47979 * C2328 - C48018 * C2320 -
              C47979 * C2329 + C48851 * C2338 + C48029 * C2602 -
              C26754 * C2601 - C48029 * C2603 + C26745 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C28362 + C28361 + C28360) * C49043 +
             (C26982 + C26981 + C26980) * C31431) *
                C49003 +
            ((C28598 + C28597 + C28596) * C49043 +
             (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
              C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
              C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                 C31431) *
                C49170) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
              C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
              C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                 C31431 +
             (C28593 + C28594 + C28595) * C49043) *
                C49170 +
            ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
               C725 -
           (((C29155 + C29156 + C29157) * C49043 + C29151 * C31431) * C49003 +
            ((C29710 + C29711 + C29712) * C49043 +
             (C28595 + C28594 + C28593) * C31431) *
                C49170) *
               C49200) *
              C233 +
          (((C29147 * C31431 + (C29157 + C29156 + C29155) * C49043) * C49170 +
            ((C27596 + C27595 + C27594) * C31431 +
             (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 +
              C48843 * C2339 + C47979 * C2332 - C48018 * C2322 -
              C47979 * C2333 + C48851 * C2340 + C48029 * C2334 -
              C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C27594 + C27595 + C27596) * C49043 +
             (C26979 + C26978 + C26977) * C31431) *
                C49003 +
            (C29151 * C49043 + (C26976 + C26975 + C26974) * C31431) * C49170) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C31431 +
            (C28593 + C28594 + C28595) * C49043) *
               C49170 +
           ((C26974 + C26975 + C26976) * C31431 + C29147 * C49043) * C49003) *
              C871 -
          (((C29155 + C29156 + C29157) * C49043 + C29151 * C31431) * C49003 +
           ((C29710 + C29711 + C29712) * C49043 +
            (C28595 + C28594 + C28593) * C31431) *
               C49170) *
              C872 +
          (((C29712 + C29711 + C29710) * C31431 +
            (C47983 * C2759 - C48023 * C2753 - C47983 * C2760 + C48843 * C2765 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C48029 * C2755 - C26754 * C2751 - C48029 * C2756 +
             C26745 * C2763) *
                C49043) *
               C49170 +
           ((C29157 + C29156 + C29155) * C31431 +
            (C47983 * C3256 - C48023 * C3253 - C47983 * C3257 + C48843 * C3262 +
             C47979 * C3258 - C48018 * C3254 - C47979 * C3259 + C48851 * C3263 +
             C48029 * C3260 - C26754 * C3255 - C48029 * C3261 +
             C26745 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49039 +
            (C25511 + C25512) * C49046 + C26619 * C36919) *
               C49170 +
           ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C25268 + C25267) * C36919 + (C25266 + C25265) * C49046 +
            (C23976 + C23975) * C49039) *
               C49003 +
           ((C25518 + C25517) * C36919 + (C25516 + C25515) * C49046 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49039) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
             C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
                C49039 +
            (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
             C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
                C49046 +
            (C23762 * C883 - C23763 * C876 - C23762 * C884 + C23756 * C891 +
             C23764 * C885 - C23765 * C877 - C23764 * C886 + C48848 * C892) *
                C36919) *
               C49170 +
           ((C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
             C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
                C49039 +
            (C23762 * C632 - C23763 * C625 - C23762 * C633 + C23756 * C640 +
             C23764 * C634 - C23765 * C626 - C23764 * C635 + C48848 * C641) *
                C49046 +
            (C23762 * C2328 - C23763 * C2320 - C23762 * C2329 + C23756 * C2338 +
             C23764 * C2602 - C23765 * C2601 - C23764 * C2603 +
             C48848 * C2604) *
                C36919) *
               C49003) *
              C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C48926 * C233 -
           (((C25871 + C25872) * C36919 + C30799 * C49046 +
             (C23972 + C23971) * C49039) *
                C49003 +
            (C26077 * C36919 + C26078 * C49046 + (C23970 + C23969) * C49039) *
                C49170) *
               C48926 * C49198) *
              C235 +
          ((((C23975 + C23976) * C49039 + (C25265 + C25266) * C49046 +
             (C25267 + C25268) * C36919) *
                C49170 +
            ((C23977 + C23978) * C49039 + (C30065 + C30066) * C49046 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C36919) *
                C49003) *
               C48926 * C49198 -
           (((C25268 + C25267) * C36919 + (C25266 + C25265) * C49046 +
             (C23976 + C23975) * C49039) *
                C49003 +
            ((C25518 + C25517) * C36919 + (C25516 + C25515) * C49046 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49039) *
                C49170) *
               C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C343 -
           (((C26083 + C26084) * C36919 + C26077 * C49046 + C26078 * C49039) *
                C49003 +
            ((C26632 + C26633) * C36919 + (C25514 + C25513) * C49046 +
             (C25512 + C25511) * C49039) *
                C49170) *
               C49200) *
              C48909 * C235 +
          ((((C25515 + C25516) * C49039 + (C25517 + C25518) * C49046 +
             (C34473 + C34474) * C36919) *
                C49170 +
            ((C25265 + C25266) * C49039 + (C25267 + C25268) * C49046 +
             (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 +
              C23756 * C3263 + C23764 * C3260 - C23765 * C3255 -
              C23764 * C3261 + C48848 * C3264) *
                 C36919) *
                C49003) *
               C49200 -
           (((C25268 + C25267) * C36919 + (C25266 + C25265) * C49046 +
             (C23976 + C23975) * C49039) *
                C49003 +
            ((C25518 + C25517) * C36919 + (C25516 + C25515) * C49046 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49039) *
                C49170) *
               C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C48926 * C451 -
           (((C25871 + C25872) * C36919 + C30799 * C49046 +
             (C23972 + C23971) * C49039) *
                C49003 +
            (C26077 * C36919 + C26078 * C49046 + (C23970 + C23969) * C49039) *
                C49170) *
               C48926 * C49198) *
              C453 +
          ((((C23975 + C23976) * C49039 + (C25265 + C25266) * C49046 +
             (C25267 + C25268) * C36919) *
                C49170 +
            ((C23977 + C23978) * C49039 + (C30065 + C30066) * C49046 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C36919) *
                C49003) *
               C48926 * C49198 -
           (((C25268 + C25267) * C36919 + (C25266 + C25265) * C49046 +
             (C23976 + C23975) * C49039) *
                C49003 +
            ((C25518 + C25517) * C36919 + (C25516 + C25515) * C49046 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49039) *
                C49170) *
               C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49039 +
            (C25511 + C25512) * C49046 + C26619 * C36919) *
               C49170 +
           ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
               C49003) *
              C48926 * C517 -
          (((C25871 + C25872) * C36919 + C30799 * C49046 +
            (C23972 + C23971) * C49039) *
               C49003 +
           (C26077 * C36919 + C26078 * C49046 + (C23970 + C23969) * C49039) *
               C49170) *
              C48926 * C518 +
          ((C24339 * C49039 + C30602 * C49046 + (C25872 + C25871) * C36919) *
               C49170 +
           (C24340 * C49039 + (C24524 + C24523) * C49046 +
            (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 + C23756 * C9898 +
             C23764 * C10157 - C23765 * C10156 - C23764 * C10158 +
             C48848 * C10159) *
                C36919) *
               C49003) *
              C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C343 -
           (((C26083 + C26084) * C36919 + C26077 * C49046 + C26078 * C49039) *
                C49003 +
            ((C26632 + C26633) * C36919 + (C25514 + C25513) * C49046 +
             (C25512 + C25511) * C49039) *
                C49170) *
               C49200) *
              C451 +
          (((C26067 * C49039 + C26068 * C49046 + (C26084 + C26083) * C36919) *
                C49170 +
            (C30602 * C49039 + (C25872 + C25871) * C49046 +
             (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
              C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
              C23764 * C10365 + C48848 * C10367) *
                 C36919) *
                C49003) *
               C49200 -
           (((C25871 + C25872) * C36919 + C30799 * C49046 +
             (C23972 + C23971) * C49039) *
                C49003 +
            (C26077 * C36919 + C26078 * C49046 + (C23970 + C23969) * C49039) *
                C49170) *
               C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C725 -
           (((C26083 + C26084) * C36919 + C26077 * C49046 + C26078 * C49039) *
                C49003 +
            ((C26632 + C26633) * C36919 + (C25514 + C25513) * C49046 +
             (C25512 + C25511) * C49039) *
                C49170) *
               C49200) *
              C48909 * C453 +
          ((((C25515 + C25516) * C49039 + (C25517 + C25518) * C49046 +
             (C34473 + C34474) * C36919) *
                C49170 +
            ((C25265 + C25266) * C49039 + (C25267 + C25268) * C49046 +
             (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 +
              C23756 * C3263 + C23764 * C3260 - C23765 * C3255 -
              C23764 * C3261 + C48848 * C3264) *
                 C36919) *
                C49003) *
               C49200 -
           (((C25268 + C25267) * C36919 + (C25266 + C25265) * C49046 +
             (C23976 + C23975) * C49039) *
                C49003 +
            ((C25518 + C25517) * C36919 + (C25516 + C25515) * C49046 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C49039) *
                C49170) *
               C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C49039 +
             (C25511 + C25512) * C49046 + C26619 * C36919) *
                C49170 +
            ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
                C49003) *
               C725 -
           (((C26083 + C26084) * C36919 + C26077 * C49046 + C26078 * C49039) *
                C49003 +
            ((C26632 + C26633) * C36919 + (C25514 + C25513) * C49046 +
             (C25512 + C25511) * C49039) *
                C49170) *
               C49200) *
              C233 +
          (((C26067 * C49039 + C26068 * C49046 + (C26084 + C26083) * C36919) *
                C49170 +
            (C30602 * C49039 + (C25872 + C25871) * C49046 +
             (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
              C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
              C23764 * C10365 + C48848 * C10367) *
                 C36919) *
                C49003) *
               C49200 -
           (((C25871 + C25872) * C36919 + C30799 * C49046 +
             (C23972 + C23971) * C49039) *
                C49003 +
            (C26077 * C36919 + C26078 * C49046 + (C23970 + C23969) * C49039) *
                C49170) *
               C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49039 +
            (C25511 + C25512) * C49046 + C26619 * C36919) *
               C49170 +
           ((C23969 + C23970) * C49039 + C26067 * C49046 + C26068 * C36919) *
               C49003) *
              C871 -
          (((C26083 + C26084) * C36919 + C26077 * C49046 + C26078 * C49039) *
               C49003 +
           ((C26632 + C26633) * C36919 + (C25514 + C25513) * C49046 +
            (C25512 + C25511) * C49039) *
               C49170) *
              C872 +
          ((C26619 * C49039 + C35191 * C49046 + (C35205 + C35204) * C36919) *
               C49170 +
           (C26068 * C49039 + (C26084 + C26083) * C49046 +
            (C23762 * C11238 - C23763 * C11236 - C23762 * C11239 +
             C23756 * C11242 + C23764 * C18005 - C23765 * C18004 -
             C23764 * C18006 + C48848 * C18007) *
                C36919) *
               C49003) *
              C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           (C24339 * C31431 + C30602 * C49043) * C49203) *
              C48926 * C48909 * C110 -
          (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
           ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
           ((C25516 + C25515) * C49043 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C31431) *
               C49235) *
              C48926 * C48909 * C111 +
          (((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
             C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
                C31431 +
            (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
             C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
                C49043) *
               C49235 +
           ((C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
             C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
                C31431 +
            (C23762 * C632 - C23763 * C625 - C23762 * C633 + C23756 * C640 +
             C23764 * C634 - C23765 * C626 - C23764 * C635 + C48848 * C641) *
                C49043) *
               C49223 +
           ((C23762 * C530 - C23763 * C523 - C23762 * C531 + C23756 * C538 +
             C23764 * C532 - C23765 * C524 - C23764 * C533 + C48848 * C539) *
                C31431 +
            (C23762 * C1412 - C23763 * C1408 - C23762 * C1413 + C23756 * C1420 +
             C23764 * C1418 - C23765 * C1411 - C23764 * C1419 +
             C48848 * C1423) *
                C49043) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367 +
            C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
            C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
            C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364) *
               C49043) *
              C48944 * C48926 * C48909 * C110 -
          ((C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363 +
            C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
            C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
            C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366) *
               C49043 +
           (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
            C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
            C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
            C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
               C31431) *
              C48944 * C48926 * C48909 * C111 +
          ((C22562 * C134 - C22563 * C125 - C22562 * C135 + C49241 * C146 +
            C22564 * C136 - C22565 * C126 - C22564 * C137 + C49234 * C147 +
            C22566 * C138 - C22567 * C127 - C22566 * C139 + C49221 * C148 +
            C22568 * C140 - C22569 * C128 - C22568 * C141 + C49169 * C149) *
               C31431 +
           (C22562 * C355 - C22563 * C347 - C22562 * C356 + C49241 * C365 +
            C22564 * C353 - C22565 * C346 - C22564 * C354 + C49234 * C364 +
            C22566 * C351 - C22567 * C345 - C22566 * C352 + C49221 * C363 +
            C22568 * C361 - C22569 * C350 - C22568 * C362 + C49169 * C368) *
               C49043) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C49243 +
           (C25511 + C25512) * C49240 + C26619 * C49231 +
           (C26633 + C26632) * C49185) *
              C48944 * C48926 * C48909 * C110 -
          ((C23764 * C2755 - C23765 * C2751 - C23764 * C2756 + C48848 * C2763 +
            C23762 * C2757 - C23763 * C2752 - C23762 * C2758 + C23756 * C2764) *
               C49185 +
           (C25518 + C25517) * C49231 + (C25516 + C25515) * C49240 +
           (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
            C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
               C49243) *
              C48944 * C48926 * C48909 * C111 +
          ((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
            C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
               C49243 +
           (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
            C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
               C49240 +
           (C23762 * C883 - C23763 * C876 - C23762 * C884 + C23756 * C891 +
            C23764 * C885 - C23765 * C877 - C23764 * C886 + C48848 * C892) *
               C49231 +
           (C23762 * C2755 - C23763 * C2751 - C23762 * C2756 + C23756 * C2763 +
            C23764 * C2761 - C23765 * C2754 - C23764 * C2762 + C48848 * C2766) *
               C49185) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C48926 * C233 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C48926 * C49198) *
              C235 +
          ((((C23975 + C23976) * C31431 + (C25265 + C25266) * C49043) * C49235 +
            ((C23977 + C23978) * C31431 + (C30065 + C30066) * C49043) * C49223 +
            ((C23979 + C23980) * C31431 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364) *
                C49043) *
               C48944 * C48926 * C233 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C22753 + C22754 + C22755 + C22756) * C31431 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366) *
                C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C48926 * C233 -
           ((C26083 + C26084) * C49185 + C26077 * C49231 + C26078 * C49240 +
            (C23970 + C23969) * C49243) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C23975 + C23976) * C49243 + (C25265 + C25266) * C49240 +
            (C25267 + C25268) * C49231 +
            (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 + C23756 * C3263 +
             C23764 * C3260 - C23765 * C3255 - C23764 * C3261 +
             C48848 * C3264) *
                C49185) *
               C48944 * C48926 * C49198 -
           ((C23764 * C2755 - C23765 * C2751 - C23764 * C2756 + C48848 * C2763 +
             C23762 * C2757 - C23763 * C2752 - C23762 * C2758 +
             C23756 * C2764) *
                C49185 +
            (C25518 + C25517) * C49231 + (C25516 + C25515) * C49240 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49243) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C343 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C48909 * C235 +
          ((((C25515 + C25516) * C31431 + (C25517 + C25518) * C49043) * C49235 +
            ((C25265 + C25266) * C31431 + (C25267 + C25268) * C49043) * C49223 +
            ((C30065 + C30066) * C31431 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C343 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C31746 + C31747 + C31748 + C31749) * C31431 +
            (C22562 * C881 - C22563 * C875 - C22562 * C882 + C49241 * C890 +
             C22564 * C883 - C22565 * C876 - C22564 * C884 + C49234 * C891 +
             C22566 * C885 - C22567 * C877 - C22566 * C886 + C49221 * C892 +
             C22568 * C887 - C22569 * C878 - C22568 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C343 -
           ((C23764 * C3693 - C23765 * C3689 - C23764 * C3694 + C48848 * C3698 +
             C23762 * C3691 - C23763 * C3688 - C23762 * C3692 +
             C23756 * C3697) *
                C49185 +
            (C26632 + C26633) * C49231 + (C25514 + C25513) * C49240 +
            (C25512 + C25511) * C49243) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C25515 + C25516) * C49243 + (C25517 + C25518) * C49240 +
            (C34473 + C34474) * C49231 +
            (C23762 * C3693 - C23763 * C3689 - C23762 * C3694 + C23756 * C3698 +
             C23764 * C3695 - C23765 * C3690 - C23764 * C3696 +
             C48848 * C3699) *
                C49185) *
               C48944 * C49200 -
           ((C34474 + C34473) * C49185 + (C25518 + C25517) * C49231 +
            (C25516 + C25515) * C49240 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49243) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C48926 * C451 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C48926 * C49198) *
              C453 +
          ((((C23975 + C23976) * C31431 + (C25265 + C25266) * C49043) * C49235 +
            ((C23977 + C23978) * C31431 + (C30065 + C30066) * C49043) * C49223 +
            ((C23979 + C23980) * C31431 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C48926 * C451 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C22753 + C22754 + C22755 + C22756) * C31431 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C48926 * C451 -
           ((C26083 + C26084) * C49185 + C26077 * C49231 + C26078 * C49240 +
            (C23970 + C23969) * C49243) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C23975 + C23976) * C49243 + (C25265 + C25266) * C49240 +
            (C25267 + C25268) * C49231 +
            (C23762 * C3258 - C23763 * C3254 - C23762 * C3259 + C23756 * C3263 +
             C23764 * C3260 - C23765 * C3255 - C23764 * C3261 +
             C48848 * C3264) *
                C49185) *
               C48944 * C48926 * C49198 -
           ((C34474 + C34473) * C49185 + (C25518 + C25517) * C49231 +
            (C25516 + C25515) * C49240 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49243) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           C33370 * C49203) *
              C48926 * C517 -
          (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
           (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
           (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
              C48926 * C518 +
          (C33370 * C49235 +
           (C24340 * C31431 + (C24524 + C24523) * C49043) * C49223 +
           ((C24356 + C24355) * C31431 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C49043) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C31742 + C31743 + C31744 + C31745) * C49043) *
              C48944 * C48926 * C517 -
          ((C23297 + C23298 + C23299 + C23300) * C49043 +
           (C22752 + C22751 + C22750 + C22749) * C31431) *
              C48944 * C48926 * C518 +
          ((C23142 + C23141 + C23140 + C23139) * C31431 +
           (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
            C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
            C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
            C22568 * C1418 - C22569 * C1411 - C22568 * C1419 + C49169 * C1423) *
               C49043) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C49243 +
           (C25511 + C25512) * C49240 + C26619 * C49231 +
           (C26633 + C26632) * C49185) *
              C48944 * C48926 * C517 -
          ((C26083 + C26084) * C49185 + C26077 * C49231 + C26078 * C49240 +
           (C23970 + C23969) * C49243) *
              C48944 * C48926 * C518 +
          (C24339 * C49243 + C30602 * C49240 + (C25872 + C25871) * C49231 +
           (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
            C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
            C23764 * C10365 + C48848 * C10367) *
               C49185) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C343 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C451 +
          (((C26067 * C31431 + C26068 * C49043) * C49235 +
            (C30602 * C31431 + (C25872 + C25871) * C49043) * C49223 +
            ((C24524 + C24523) * C31431 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C343 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C451 +
          (((C23300 + C23299 + C23298 + C23297) * C31431 +
            (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
             C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
             C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
             C22568 * C2602 - C22569 * C2601 - C22568 * C2603 +
             C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C343 -
           ((C23764 * C3693 - C23765 * C3689 - C23764 * C3694 + C48848 * C3698 +
             C23762 * C3691 - C23763 * C3688 - C23762 * C3692 +
             C23756 * C3697) *
                C49185 +
            (C26632 + C26633) * C49231 + (C25514 + C25513) * C49240 +
            (C25512 + C25511) * C49243) *
               C48944 * C49200) *
              C451 +
          ((C26067 * C49243 + C26068 * C49240 + (C26084 + C26083) * C49231 +
            (C23762 * C11238 - C23763 * C11236 - C23762 * C11239 +
             C23756 * C11242 + C23764 * C18005 - C23765 * C18004 -
             C23764 * C18006 + C48848 * C18007) *
                C49185) *
               C48944 * C49200 -
           ((C26083 + C26084) * C49185 + C26077 * C49231 + C26078 * C49240 +
            (C23970 + C23969) * C49243) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C48909 * C453 +
          ((((C25515 + C25516) * C31431 + (C25517 + C25518) * C49043) * C49235 +
            ((C25265 + C25266) * C31431 + (C25267 + C25268) * C49043) * C49223 +
            ((C30065 + C30066) * C31431 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C725 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C31746 + C31747 + C31748 + C31749) * C31431 +
            (C22562 * C881 - C22563 * C875 - C22562 * C882 + C49241 * C890 +
             C22564 * C883 - C22565 * C876 - C22564 * C884 + C49234 * C891 +
             C22566 * C885 - C22567 * C877 - C22566 * C886 + C49221 * C892 +
             C22568 * C887 - C22569 * C878 - C22568 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C725 -
           ((C23764 * C3693 - C23765 * C3689 - C23764 * C3694 + C48848 * C3698 +
             C23762 * C3691 - C23763 * C3688 - C23762 * C3692 +
             C23756 * C3697) *
                C49185 +
            (C26632 + C26633) * C49231 + (C25514 + C25513) * C49240 +
            (C25512 + C25511) * C49243) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C25515 + C25516) * C49243 + (C25517 + C25518) * C49240 +
            (C34473 + C34474) * C49231 +
            (C23762 * C3693 - C23763 * C3689 - C23762 * C3694 + C23756 * C3698 +
             C23764 * C3695 - C23765 * C3690 - C23764 * C3696 +
             C48848 * C3699) *
                C49185) *
               C48944 * C49200 -
           ((C34474 + C34473) * C49185 + (C25518 + C25517) * C49231 +
            (C25516 + C25515) * C49240 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C49243) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C233 +
          (((C26067 * C31431 + C26068 * C49043) * C49235 +
            (C30602 * C31431 + (C25872 + C25871) * C49043) * C49223 +
            ((C24524 + C24523) * C31431 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C725 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C233 +
          (((C23300 + C23299 + C23298 + C23297) * C31431 +
            (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
             C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
             C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
             C22568 * C2602 - C22569 * C2601 - C22568 * C2603 +
             C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C49243 +
            (C25511 + C25512) * C49240 + C26619 * C49231 +
            (C26633 + C26632) * C49185) *
               C48944 * C725 -
           ((C23764 * C3693 - C23765 * C3689 - C23764 * C3694 + C48848 * C3698 +
             C23762 * C3691 - C23763 * C3688 - C23762 * C3692 +
             C23756 * C3697) *
                C49185 +
            (C26632 + C26633) * C49231 + (C25514 + C25513) * C49240 +
            (C25512 + C25511) * C49243) *
               C48944 * C49200) *
              C233 +
          ((C26067 * C49243 + C26068 * C49240 + (C26084 + C26083) * C49231 +
            (C23762 * C11238 - C23763 * C11236 - C23762 * C11239 +
             C23756 * C11242 + C23764 * C18005 - C23765 * C18004 -
             C23764 * C18006 + C48848 * C18007) *
                C49185) *
               C48944 * C49200 -
           ((C26083 + C26084) * C49185 + C26077 * C49231 + C26078 * C49240 +
            (C23970 + C23969) * C49243) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           C33370 * C49203) *
              C871 -
          (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
           (C26077 * C49043 + C26078 * C31431) * C49223 +
           ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) * C49235) *
              C872 +
          ((C26619 * C31431 + (C26633 + C26632) * C49043) * C49235 +
           (C26068 * C31431 + (C26084 + C26083) * C49043) * C49223 +
           ((C25872 + C25871) * C31431 +
            (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
             C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
             C23764 * C10365 + C48848 * C10367) *
                C49043) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C31742 + C31743 + C31744 + C31745) * C49043) *
              C48944 * C871 -
          ((C32490 + C32491 + C32492 + C32493) * C49043 +
           (C31745 + C31744 + C31743 + C31742) * C31431) *
              C48944 * C872 +
          ((C32493 + C32492 + C32491 + C32490) * C31431 +
           (C22562 * C2759 - C22563 * C2753 - C22562 * C2760 + C49241 * C2765 +
            C22564 * C2757 - C22565 * C2752 - C22564 * C2758 + C49234 * C2764 +
            C22566 * C2755 - C22567 * C2751 - C22566 * C2756 + C49221 * C2763 +
            C22568 * C2761 - C22569 * C2754 - C22568 * C2762 + C49169 * C2766) *
               C49043) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
            C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
               C49243 +
           (C25511 + C25512) * C49240 + C26619 * C49231 + C35191 * C49185) *
              C48944 * C871 -
          ((C35204 + C35205) * C49185 + (C26632 + C26633) * C49231 +
           (C25514 + C25513) * C49240 + (C25512 + C25511) * C49243) *
              C48944 * C872 +
          (C26619 * C49243 + C35191 * C49240 + (C35205 + C35204) * C49231 +
           (C23762 * C18092 - C23763 * C18090 - C23762 * C18093 +
            C23756 * C18096 + C23764 * C18094 - C23765 * C18091 -
            C23764 * C18095 + C48848 * C18097) *
               C49185) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C49039 +
           (C28593 + C28594 + C28595) * C49046 +
           (C29712 + C29711 + C29710) * C36919) *
              C48944 * C48926 * C48909 * C110 -
          ((C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892 +
            C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
            C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890) *
               C36919 +
           (C28598 + C28597 + C28596) * C49046 +
           (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
            C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
            C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
               C49039) *
              C48944 * C48926 * C48909 * C111 +
          ((C47983 * C134 - C48023 * C125 - C47983 * C135 + C48843 * C146 +
            C47979 * C136 - C48018 * C126 - C47979 * C137 + C48851 * C147 +
            C48029 * C138 - C26754 * C127 - C48029 * C139 + C26745 * C148) *
               C49039 +
           (C47983 * C355 - C48023 * C347 - C47983 * C356 + C48843 * C365 +
            C47979 * C353 - C48018 * C346 - C47979 * C354 + C48851 * C364 +
            C48029 * C351 - C26754 * C345 - C48029 * C352 + C26745 * C363) *
               C49046 +
           (C47983 * C883 - C48023 * C876 - C47983 * C884 + C48843 * C891 +
            C47979 * C885 - C48018 * C877 - C47979 * C886 + C48851 * C892 +
            C48029 * C887 - C26754 * C878 - C48029 * C888 + C26745 * C893) *
               C36919) *
              C48944 * C48926 * C48909 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C48926 * C233 -
           ((C29155 + C29156 + C29157) * C36919 + C29151 * C49046 +
            (C26976 + C26975 + C26974) * C49039) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C26980 + C26981 + C26982) * C49039 +
            (C28360 + C28361 + C28362) * C49046 +
            (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 + C48843 * C2337 +
             C47979 * C2328 - C48018 * C2320 - C47979 * C2329 + C48851 * C2338 +
             C48029 * C2602 - C26754 * C2601 - C48029 * C2603 +
             C26745 * C2604) *
                C36919) *
               C48944 * C48926 * C49198 -
           ((C48029 * C885 - C26754 * C877 - C48029 * C886 + C26745 * C892 +
             C47979 * C883 - C48018 * C876 - C47979 * C884 + C48851 * C891 +
             C47983 * C881 - C48023 * C875 - C47983 * C882 + C48843 * C890) *
                C36919 +
            (C28598 + C28597 + C28596) * C49046 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C49039) *
               C48944 * C48926 * C233) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C343 -
           ((C48029 * C2755 - C26754 * C2751 - C48029 * C2756 + C26745 * C2763 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C47983 * C2759 - C48023 * C2753 - C47983 * C2760 +
             C48843 * C2765) *
                C36919 +
            (C29710 + C29711 + C29712) * C49046 +
            (C28595 + C28594 + C28593) * C49039) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C28596 + C28597 + C28598) * C49039 +
            (C37231 + C37232 + C37233) * C49046 +
            (C47983 * C2757 - C48023 * C2752 - C47983 * C2758 + C48843 * C2764 +
             C47979 * C2755 - C48018 * C2751 - C47979 * C2756 + C48851 * C2763 +
             C48029 * C2761 - C26754 * C2754 - C48029 * C2762 +
             C26745 * C2766) *
                C36919) *
               C48944 * C49200 -
           ((C37233 + C37232 + C37231) * C36919 +
            (C28598 + C28597 + C28596) * C49046 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C49039) *
               C48944 * C343) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C48926 * C451 -
           ((C29155 + C29156 + C29157) * C36919 + C29151 * C49046 +
            (C26976 + C26975 + C26974) * C49039) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C26980 + C26981 + C26982) * C49039 +
            (C28360 + C28361 + C28362) * C49046 +
            (C47983 * C2326 - C48023 * C2319 - C47983 * C2327 + C48843 * C2337 +
             C47979 * C2328 - C48018 * C2320 - C47979 * C2329 + C48851 * C2338 +
             C48029 * C2602 - C26754 * C2601 - C48029 * C2603 +
             C26745 * C2604) *
                C36919) *
               C48944 * C48926 * C49198 -
           ((C37233 + C37232 + C37231) * C36919 +
            (C28598 + C28597 + C28596) * C49046 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C49039) *
               C48944 * C48926 * C451) *
              C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C49039 +
           (C28593 + C28594 + C28595) * C49046 +
           (C29712 + C29711 + C29710) * C36919) *
              C48944 * C48926 * C517 -
          ((C29155 + C29156 + C29157) * C36919 + C29151 * C49046 +
           (C26976 + C26975 + C26974) * C49039) *
              C48944 * C48926 * C518 +
          (C27401 * C49039 + (C27596 + C27595 + C27594) * C49046 +
           (C47983 * C2330 - C48023 * C2321 - C47983 * C2331 + C48843 * C2339 +
            C47979 * C2332 - C48018 * C2322 - C47979 * C2333 + C48851 * C2340 +
            C48029 * C2334 - C26754 * C2323 - C48029 * C2335 + C26745 * C2341) *
               C36919) *
              C48944 * C48926 * C519) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C343 -
           ((C48029 * C2755 - C26754 * C2751 - C48029 * C2756 + C26745 * C2763 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C47983 * C2759 - C48023 * C2753 - C47983 * C2760 +
             C48843 * C2765) *
                C36919 +
            (C29710 + C29711 + C29712) * C49046 +
            (C28595 + C28594 + C28593) * C49039) *
               C48944 * C49200) *
              C451 +
          ((C29147 * C49039 + (C29157 + C29156 + C29155) * C49046 +
            (C47983 * C3256 - C48023 * C3253 - C47983 * C3257 + C48843 * C3262 +
             C47979 * C3258 - C48018 * C3254 - C47979 * C3259 + C48851 * C3263 +
             C48029 * C3260 - C26754 * C3255 - C48029 * C3261 +
             C26745 * C3264) *
                C36919) *
               C48944 * C49200 -
           ((C29155 + C29156 + C29157) * C36919 + C29151 * C49046 +
            (C26976 + C26975 + C26974) * C49039) *
               C48944 * C343) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C725 -
           ((C48029 * C2755 - C26754 * C2751 - C48029 * C2756 + C26745 * C2763 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C47983 * C2759 - C48023 * C2753 - C47983 * C2760 +
             C48843 * C2765) *
                C36919 +
            (C29710 + C29711 + C29712) * C49046 +
            (C28595 + C28594 + C28593) * C49039) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C28596 + C28597 + C28598) * C49039 +
            (C37231 + C37232 + C37233) * C49046 +
            (C47983 * C2757 - C48023 * C2752 - C47983 * C2758 + C48843 * C2764 +
             C47979 * C2755 - C48018 * C2751 - C47979 * C2756 + C48851 * C2763 +
             C48029 * C2761 - C26754 * C2754 - C48029 * C2762 +
             C26745 * C2766) *
                C36919) *
               C48944 * C49200 -
           ((C37233 + C37232 + C37231) * C36919 +
            (C28598 + C28597 + C28596) * C49046 +
            (C48029 * C136 - C26754 * C126 - C48029 * C137 + C26745 * C147 +
             C47979 * C134 - C48018 * C125 - C47979 * C135 + C48851 * C146 +
             C47983 * C132 - C48023 * C124 - C47983 * C133 + C48843 * C145) *
                C49039) *
               C48944 * C725) *
              C48909 * C49196)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
             C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
             C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
                C49039 +
            (C28593 + C28594 + C28595) * C49046 +
            (C29712 + C29711 + C29710) * C36919) *
               C48944 * C725 -
           ((C48029 * C2755 - C26754 * C2751 - C48029 * C2756 + C26745 * C2763 +
             C47979 * C2757 - C48018 * C2752 - C47979 * C2758 + C48851 * C2764 +
             C47983 * C2759 - C48023 * C2753 - C47983 * C2760 +
             C48843 * C2765) *
                C36919 +
            (C29710 + C29711 + C29712) * C49046 +
            (C28595 + C28594 + C28593) * C49039) *
               C48944 * C49200) *
              C233 +
          ((C29147 * C49039 + (C29157 + C29156 + C29155) * C49046 +
            (C47983 * C3256 - C48023 * C3253 - C47983 * C3257 + C48843 * C3262 +
             C47979 * C3258 - C48018 * C3254 - C47979 * C3259 + C48851 * C3263 +
             C48029 * C3260 - C26754 * C3255 - C48029 * C3261 +
             C26745 * C3264) *
                C36919) *
               C48944 * C49200 -
           ((C29155 + C29156 + C29157) * C36919 + C29151 * C49046 +
            (C26976 + C26975 + C26974) * C49039) *
               C48944 * C725) *
              C49198) *
         C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C47983 * C130 - C48023 * C123 - C47983 * C131 + C48843 * C144 +
            C47979 * C132 - C48018 * C124 - C47979 * C133 + C48851 * C145 +
            C48029 * C134 - C26754 * C125 - C48029 * C135 + C26745 * C146) *
               C49039 +
           (C28593 + C28594 + C28595) * C49046 + C38051 * C36919) *
              C48944 * C871 -
          ((C38058 + C38059 + C38060) * C36919 +
           (C29710 + C29711 + C29712) * C49046 +
           (C28595 + C28594 + C28593) * C49039) *
              C48944 * C872 +
          (C38051 * C49039 + (C38060 + C38059 + C38058) * C49046 +
           (C47983 * C3691 - C48023 * C3688 - C47983 * C3692 + C48843 * C3697 +
            C47979 * C3693 - C48018 * C3689 - C47979 * C3694 + C48851 * C3698 +
            C48029 * C3695 - C26754 * C3690 - C48029 * C3696 + C26745 * C3699) *
               C36919) *
              C48944 * C873) *
         C48909 * C48875) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367 +
            C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
            C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
            C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364) *
               C49043) *
              C48944 * C48926 * C48909 * C110 -
          ((C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363 +
            C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
            C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
            C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366) *
               C49043 +
           (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
            C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
            C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
            C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
               C31431) *
              C48944 * C48926 * C48909 * C111 +
          ((C22562 * C134 - C22563 * C125 - C22562 * C135 + C49241 * C146 +
            C22564 * C136 - C22565 * C126 - C22564 * C137 + C49234 * C147 +
            C22566 * C138 - C22567 * C127 - C22566 * C139 + C49221 * C148 +
            C22568 * C140 - C22569 * C128 - C22568 * C141 + C49169 * C149) *
               C31431 +
           (C22562 * C355 - C22563 * C347 - C22562 * C356 + C49241 * C365 +
            C22564 * C353 - C22565 * C346 - C22564 * C354 + C49234 * C364 +
            C22566 * C351 - C22567 * C345 - C22566 * C352 + C49221 * C363 +
            C22568 * C361 - C22569 * C350 - C22568 * C362 + C49169 * C368) *
               C49043) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           (C24339 * C31431 + C30602 * C49043) * C49203) *
              C48926 * C48909 * C110 -
          (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
           ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
           ((C25516 + C25515) * C49043 +
            (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
             C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                C31431) *
               C49235) *
              C48926 * C48909 * C111 +
          (((C23762 * C134 - C23763 * C125 - C23762 * C135 + C23756 * C146 +
             C23764 * C136 - C23765 * C126 - C23764 * C137 + C48848 * C147) *
                C31431 +
            (C23762 * C355 - C23763 * C347 - C23762 * C356 + C23756 * C365 +
             C23764 * C353 - C23765 * C346 - C23764 * C354 + C48848 * C364) *
                C49043) *
               C49235 +
           ((C23762 * C247 - C23763 * C239 - C23762 * C248 + C23756 * C257 +
             C23764 * C245 - C23765 * C238 - C23764 * C246 + C48848 * C256) *
                C31431 +
            (C23762 * C632 - C23763 * C625 - C23762 * C633 + C23756 * C640 +
             C23764 * C634 - C23765 * C626 - C23764 * C635 + C48848 * C641) *
                C49043) *
               C49223 +
           ((C23762 * C530 - C23763 * C523 - C23762 * C531 + C23756 * C538 +
             C23764 * C532 - C23765 * C524 - C23764 * C533 + C48848 * C539) *
                C31431 +
            (C23762 * C1412 - C23763 * C1408 - C23762 * C1413 + C23756 * C1420 +
             C23764 * C1418 - C23765 * C1411 - C23764 * C1419 +
             C48848 * C1423) *
                C49043) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C22562 * C359 - C22563 * C349 - C22562 * C360 + C49241 * C367 +
             C22564 * C357 - C22565 * C348 - C22564 * C358 + C49234 * C366 +
             C22566 * C355 - C22567 * C347 - C22566 * C356 + C49221 * C365 +
             C22568 * C353 - C22569 * C346 - C22568 * C354 + C49169 * C364) *
                C49043) *
               C48944 * C48926 * C233 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C22753 + C22754 + C22755 + C22756) * C31431 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C22568 * C351 - C22569 * C345 - C22568 * C352 + C49169 * C363 +
             C22566 * C353 - C22567 * C346 - C22566 * C354 + C49221 * C364 +
             C22564 * C355 - C22565 * C347 - C22564 * C356 + C49234 * C365 +
             C22562 * C357 - C22563 * C348 - C22562 * C358 + C49241 * C366) *
                C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C48926 * C233 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C48926 * C49198) *
              C235 +
          ((((C23975 + C23976) * C31431 + (C25265 + C25266) * C49043) * C49235 +
            ((C23977 + C23978) * C31431 + (C30065 + C30066) * C49043) * C49223 +
            ((C23979 + C23980) * C31431 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C343 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C31746 + C31747 + C31748 + C31749) * C31431 +
            (C22562 * C881 - C22563 * C875 - C22562 * C882 + C49241 * C890 +
             C22564 * C883 - C22565 * C876 - C22564 * C884 + C49234 * C891 +
             C22566 * C885 - C22567 * C877 - C22566 * C886 + C49221 * C892 +
             C22568 * C887 - C22569 * C878 - C22568 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C343 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C48909 * C235 +
          ((((C25515 + C25516) * C31431 + (C25517 + C25518) * C49043) * C49235 +
            ((C25265 + C25266) * C31431 + (C25267 + C25268) * C49043) * C49223 +
            ((C30065 + C30066) * C31431 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C48926 * C451 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C22753 + C22754 + C22755 + C22756) * C31431 +
            (C22562 * C630 - C22563 * C624 - C22562 * C631 + C49241 * C639 +
             C22564 * C632 - C22565 * C625 - C22564 * C633 + C49234 * C640 +
             C22566 * C634 - C22567 * C626 - C22566 * C635 + C49221 * C641 +
             C22568 * C636 - C22569 * C627 - C22568 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            (C24339 * C31431 + C30602 * C49043) * C49203) *
               C48926 * C451 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C48926 * C49198) *
              C453 +
          ((((C23975 + C23976) * C31431 + (C25265 + C25266) * C49043) * C49235 +
            ((C23977 + C23978) * C31431 + (C30065 + C30066) * C49043) * C49223 +
            ((C23979 + C23980) * C31431 +
             (C23762 * C1867 - C23763 * C1863 - C23762 * C1868 +
              C23756 * C1872 + C23764 * C1869 - C23765 * C1864 -
              C23764 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C31742 + C31743 + C31744 + C31745) * C49043) *
              C48944 * C48926 * C517 -
          ((C23297 + C23298 + C23299 + C23300) * C49043 +
           (C22752 + C22751 + C22750 + C22749) * C31431) *
              C48944 * C48926 * C518 +
          ((C23142 + C23141 + C23140 + C23139) * C31431 +
           (C22562 * C1416 - C22563 * C1410 - C22562 * C1417 + C49241 * C1422 +
            C22564 * C1414 - C22565 * C1409 - C22564 * C1415 + C49234 * C1421 +
            C22566 * C1412 - C22567 * C1408 - C22566 * C1413 + C49221 * C1420 +
            C22568 * C1418 - C22569 * C1411 - C22568 * C1419 + C49169 * C1423) *
               C49043) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           C33370 * C49203) *
              C48926 * C517 -
          (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
           (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
           (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
              C48926 * C518 +
          (C33370 * C49235 +
           (C24340 * C31431 + (C24524 + C24523) * C49043) * C49223 +
           ((C24356 + C24355) * C31431 +
            (C23762 * C9386 - C23763 * C9384 - C23762 * C9387 + C23756 * C9390 +
             C23764 * C9388 - C23765 * C9385 - C23764 * C9389 +
             C48848 * C9391) *
                C49043) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C343 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C451 +
          (((C23300 + C23299 + C23298 + C23297) * C31431 +
            (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
             C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
             C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
             C22568 * C2602 - C22569 * C2601 - C22568 * C2603 +
             C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C343 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C451 +
          (((C26067 * C31431 + C26068 * C49043) * C49235 +
            (C30602 * C31431 + (C25872 + C25871) * C49043) * C49223 +
            ((C24524 + C24523) * C31431 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C725 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C31746 + C31747 + C31748 + C31749) * C31431 +
            (C22562 * C881 - C22563 * C875 - C22562 * C882 + C49241 * C890 +
             C22564 * C883 - C22565 * C876 - C22564 * C884 + C49234 * C891 +
             C22566 * C885 - C22567 * C877 - C22566 * C886 + C49221 * C892 +
             C22568 * C887 - C22569 * C878 - C22568 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C31749 + C31748 + C31747 + C31746) * C49043 +
            (C22568 * C138 - C22569 * C127 - C22568 * C139 + C49169 * C148 +
             C22566 * C136 - C22567 * C126 - C22566 * C137 + C49221 * C147 +
             C22564 * C134 - C22565 * C125 - C22564 * C135 + C49234 * C146 +
             C22562 * C132 - C22563 * C124 - C22562 * C133 + C49241 * C145) *
                C31431) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C48909 * C453 +
          ((((C25515 + C25516) * C31431 + (C25517 + C25518) * C49043) * C49235 +
            ((C25265 + C25266) * C31431 + (C25267 + C25268) * C49043) * C49223 +
            ((C30065 + C30066) * C31431 +
             (C23762 * C2332 - C23763 * C2322 - C23762 * C2333 +
              C23756 * C2340 + C23764 * C2334 - C23765 * C2323 -
              C23764 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C30066 + C30065) * C49043 + (C23978 + C23977) * C31431) * C49203 +
            ((C25266 + C25265) * C49043 + (C23976 + C23975) * C31431) * C49223 +
            ((C25516 + C25515) * C49043 +
             (C23764 * C134 - C23765 * C125 - C23764 * C135 + C48848 * C146 +
              C23762 * C132 - C23763 * C124 - C23762 * C133 + C23756 * C145) *
                 C31431) *
                C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
             C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
             C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
             C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
                C31431 +
            (C31742 + C31743 + C31744 + C31745) * C49043) *
               C48944 * C725 -
           ((C22568 * C885 - C22569 * C877 - C22568 * C886 + C49169 * C892 +
             C22566 * C883 - C22567 * C876 - C22566 * C884 + C49221 * C891 +
             C22564 * C881 - C22565 * C875 - C22564 * C882 + C49234 * C890 +
             C22562 * C879 - C22563 * C874 - C22562 * C880 + C49241 * C889) *
                C49043 +
            (C31745 + C31744 + C31743 + C31742) * C31431) *
               C48944 * C49200) *
              C233 +
          (((C23300 + C23299 + C23298 + C23297) * C31431 +
            (C22562 * C2324 - C22563 * C2318 - C22562 * C2325 + C49241 * C2336 +
             C22564 * C2326 - C22565 * C2319 - C22564 * C2327 + C49234 * C2337 +
             C22566 * C2328 - C22567 * C2320 - C22566 * C2329 + C49221 * C2338 +
             C22568 * C2602 - C22569 * C2601 - C22568 * C2603 +
             C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C23297 + C23298 + C23299 + C23300) * C49043 +
            (C22752 + C22751 + C22750 + C22749) * C31431) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
              C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                 C31431 +
             (C25511 + C25512) * C49043) *
                C49235 +
            ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
            C33370 * C49203) *
               C725 -
           (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
            (C26077 * C49043 + C26078 * C31431) * C49223 +
            ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) *
                C49235) *
               C49200) *
              C233 +
          (((C26067 * C31431 + C26068 * C49043) * C49235 +
            (C30602 * C31431 + (C25872 + C25871) * C49043) * C49223 +
            ((C24524 + C24523) * C31431 +
             (C23762 * C9894 - C23763 * C9892 - C23762 * C9895 +
              C23756 * C9898 + C23764 * C10157 - C23765 * C10156 -
              C23764 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C24523 + C24524) * C49043 + (C23974 + C23973) * C31431) * C49203 +
            (C30799 * C49043 + (C23972 + C23971) * C31431) * C49223 +
            (C26078 * C49043 + (C23970 + C23969) * C31431) * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C130 - C22563 * C123 - C22562 * C131 + C49241 * C144 +
            C22564 * C132 - C22565 * C124 - C22564 * C133 + C49234 * C145 +
            C22566 * C134 - C22567 * C125 - C22566 * C135 + C49221 * C146 +
            C22568 * C136 - C22569 * C126 - C22568 * C137 + C49169 * C147) *
               C31431 +
           (C31742 + C31743 + C31744 + C31745) * C49043) *
              C48944 * C871 -
          ((C32490 + C32491 + C32492 + C32493) * C49043 +
           (C31745 + C31744 + C31743 + C31742) * C31431) *
              C48944 * C872 +
          ((C32493 + C32492 + C32491 + C32490) * C31431 +
           (C22562 * C2759 - C22563 * C2753 - C22562 * C2760 + C49241 * C2765 +
            C22564 * C2757 - C22565 * C2752 - C22564 * C2758 + C49234 * C2764 +
            C22566 * C2755 - C22567 * C2751 - C22566 * C2756 + C49221 * C2763 +
            C22568 * C2761 - C22569 * C2754 - C22568 * C2762 + C49169 * C2766) *
               C49043) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23762 * C130 - C23763 * C123 - C23762 * C131 + C23756 * C144 +
             C23764 * C132 - C23765 * C124 - C23764 * C133 + C48848 * C145) *
                C31431 +
            (C25511 + C25512) * C49043) *
               C49235 +
           ((C23969 + C23970) * C31431 + C26067 * C49043) * C49223 +
           C33370 * C49203) *
              C871 -
          (((C25871 + C25872) * C49043 + C30799 * C31431) * C49203 +
           (C26077 * C49043 + C26078 * C31431) * C49223 +
           ((C25514 + C25513) * C49043 + (C25512 + C25511) * C31431) * C49235) *
              C872 +
          ((C26619 * C31431 + (C26633 + C26632) * C49043) * C49235 +
           (C26068 * C31431 + (C26084 + C26083) * C49043) * C49223 +
           ((C25872 + C25871) * C31431 +
            (C23762 * C10362 - C23763 * C10360 - C23762 * C10363 +
             C23756 * C10366 + C23764 * C10364 - C23765 * C10361 -
             C23764 * C10365 + C48848 * C10367) *
                C49043) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C3827 * C251 - C3828 * C241 - C3827 * C252 + C3821 * C259 +
            C3829 * C249 - C3830 * C240 - C3829 * C250 + C3822 * C258 +
            C3831 * C247 - C3832 * C239 - C3831 * C248 + C3823 * C257 +
            C3833 * C245 - C3834 * C238 - C3833 * C246 + C49169 * C256) *
               C48956 * C49003) *
              C48926 * C48909 * C110 -
          ((C3833 * C243 - C3834 * C237 - C3833 * C244 + C49169 * C255 +
            C3831 * C245 - C3832 * C238 - C3831 * C246 + C3823 * C256 +
            C3829 * C247 - C3830 * C239 - C3829 * C248 + C3822 * C257 +
            C3827 * C249 - C3828 * C240 - C3827 * C250 + C3821 * C258) *
               C48956 * C49003 +
           (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
            C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
            C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
            C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
               C48956 * C49170) *
              C48926 * C48909 * C111 +
          ((C3827 * C134 - C3828 * C125 - C3827 * C135 + C3821 * C146 +
            C3829 * C136 - C3830 * C126 - C3829 * C137 + C3822 * C147 +
            C3831 * C138 - C3832 * C127 - C3831 * C139 + C3823 * C148 +
            C3833 * C140 - C3834 * C128 - C3833 * C141 + C49169 * C149) *
               C48956 * C49170 +
           (C3827 * C247 - C3828 * C239 - C3827 * C248 + C3821 * C257 +
            C3829 * C245 - C3830 * C238 - C3829 * C246 + C3822 * C256 +
            C3831 * C243 - C3832 * C237 - C3831 * C244 + C3823 * C255 +
            C3833 * C253 - C3834 * C242 - C3833 * C254 + C49169 * C260) *
               C48956 * C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C47973 * C251 - C11356 * C241 - C47973 * C252 + C49148 * C259 +
            C47954 * C249 - C11358 * C240 - C47954 * C250 + C48848 * C258) *
               C48956 * C11352 +
           (C47973 * C526 - C11356 * C521 - C47973 * C527 + C49148 * C536 +
            C47954 * C528 - C11358 * C522 - C47954 * C529 + C48848 * C537) *
               C48956 * C11353 +
           (C47973 * C1170 - C11356 * C1164 - C47973 * C1171 + C49148 * C1176 +
            C47954 * C1168 - C11358 * C1163 - C47954 * C1169 + C48848 * C1175) *
               C48956 * C49178) *
              C48926 * C48909 * C110 -
          ((C47954 * C1166 - C11358 * C1162 - C47954 * C1167 + C48848 * C1174 +
            C47973 * C1168 - C11356 * C1163 - C47973 * C1169 + C49148 * C1175) *
               C48956 * C49178 +
           (C47954 * C530 - C11358 * C523 - C47954 * C531 + C48848 * C538 +
            C47973 * C528 - C11356 * C522 - C47973 * C529 + C49148 * C537) *
               C48956 * C11353 +
           (C47954 * C247 - C11358 * C239 - C47954 * C248 + C48848 * C257 +
            C47973 * C249 - C11356 * C240 - C47973 * C250 + C49148 * C258) *
               C48956 * C11352 +
           (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
            C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
               C48956 * C11351) *
              C48926 * C48909 * C111 +
          ((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
            C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
               C48956 * C11351 +
           (C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
            C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
               C48956 * C11352 +
           (C47973 * C530 - C11356 * C523 - C47973 * C531 + C49148 * C538 +
            C47954 * C532 - C11358 * C524 - C47954 * C533 + C48848 * C539) *
               C48956 * C11353 +
           (C47973 * C1166 - C11356 * C1162 - C47973 * C1167 + C49148 * C1174 +
            C47954 * C1172 - C11358 * C1165 - C47954 * C1173 + C48848 * C1177) *
               C48956 * C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C48926 * C233 -
           ((C3833 * C532 - C3834 * C524 - C3833 * C533 + C49169 * C539 +
             C3831 * C530 - C3832 * C523 - C3831 * C531 + C3823 * C538 +
             C3829 * C528 - C3830 * C522 - C3829 * C529 + C3822 * C537 +
             C3827 * C526 - C3828 * C521 - C3827 * C527 + C3821 * C536) *
                C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C48926 * C49198) *
              C235 +
          (((C4018 + C4019 + C4020 + C4021) * C48956 * C49170 +
            (C3827 * C528 - C3828 * C522 - C3827 * C529 + C3821 * C537 +
             C3829 * C530 - C3830 * C523 - C3829 * C531 + C3822 * C538 +
             C3831 * C532 - C3832 * C524 - C3831 * C533 + C3823 * C539 +
             C3833 * C534 - C3834 * C525 - C3833 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C48926 * C233 -
           ((C47954 * C1685 - C11358 * C1681 - C47954 * C1686 + C48848 * C1690 +
             C47973 * C1683 - C11356 * C1680 - C47973 * C1684 +
             C49148 * C1689) *
                C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C48926 * C49198) *
              C235 +
          (((C11568 + C11569) * C48956 * C11351 +
            (C11570 + C11571) * C48956 * C11352 +
            (C11572 + C11573) * C48956 * C11353 +
            (C47973 * C1685 - C11356 * C1681 - C47973 * C1686 + C49148 * C1690 +
             C47954 * C1687 - C11358 * C1682 - C47954 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C343 -
           ((C3833 * C634 - C3834 * C626 - C3833 * C635 + C49169 * C641 +
             C3831 * C632 - C3832 * C625 - C3831 * C633 + C3823 * C640 +
             C3829 * C630 - C3830 * C624 - C3829 * C631 + C3822 * C639 +
             C3827 * C628 - C3828 * C623 - C3827 * C629 + C3821 * C638) *
                C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C48909 * C235 +
          (((C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363) *
                C48956 * C49170 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C343 -
           ((C47954 * C1867 - C11358 * C1863 - C47954 * C1868 + C48848 * C1872 +
             C47973 * C1865 - C11356 * C1862 - C47973 * C1866 +
             C49148 * C1871) *
                C48956 * C49178 +
            (C47954 * C1414 - C11358 * C1409 - C47954 * C1415 + C48848 * C1421 +
             C47973 * C1416 - C11356 * C1410 - C47973 * C1417 +
             C49148 * C1422) *
                C48956 * C11353 +
            (C47954 * C630 - C11358 * C624 - C47954 * C631 + C48848 * C639 +
             C47973 * C628 - C11356 * C623 - C47973 * C629 + C49148 * C638) *
                C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C48909 * C235 +
          (((C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366 +
             C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365) *
                C48956 * C11351 +
            (C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639 +
             C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640) *
                C48956 * C11352 +
            (C47973 * C1414 - C11356 * C1409 - C47973 * C1415 + C49148 * C1421 +
             C47954 * C1412 - C11358 * C1408 - C47954 * C1413 +
             C48848 * C1420) *
                C48956 * C11353 +
            (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 + C49148 * C1872 +
             C47954 * C1869 - C11358 * C1864 - C47954 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C48926 * C451 -
           ((C3833 * C532 - C3834 * C524 - C3833 * C533 + C49169 * C539 +
             C3831 * C530 - C3832 * C523 - C3831 * C531 + C3823 * C538 +
             C3829 * C528 - C3830 * C522 - C3829 * C529 + C3822 * C537 +
             C3827 * C526 - C3828 * C521 - C3827 * C527 + C3821 * C536) *
                C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C48926 * C49198) *
              C453 +
          (((C4018 + C4019 + C4020 + C4021) * C48956 * C49170 +
            (C3827 * C528 - C3828 * C522 - C3827 * C529 + C3821 * C537 +
             C3829 * C530 - C3830 * C523 - C3829 * C531 + C3822 * C538 +
             C3831 * C532 - C3832 * C524 - C3831 * C533 + C3823 * C539 +
             C3833 * C534 - C3834 * C525 - C3833 * C535 + C49169 * C540) *
                C48956 * C49003) *
               C48926 * C49198 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 +
            (C11564 + C11565) * C48956 * C11353 +
            (C11566 + C11567) * C48956 * C49178) *
               C48926 * C451 -
           ((C47954 * C1685 - C11358 * C1681 - C47954 * C1686 + C48848 * C1690 +
             C47973 * C1683 - C11356 * C1680 - C47973 * C1684 +
             C49148 * C1689) *
                C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C48926 * C49198) *
              C453 +
          (((C11568 + C11569) * C48956 * C11351 +
            (C11570 + C11571) * C48956 * C11352 +
            (C11572 + C11573) * C48956 * C11353 +
            (C47973 * C1685 - C11356 * C1681 - C47973 * C1686 + C49148 * C1690 +
             C47954 * C1687 - C11358 * C1682 - C47954 * C1688 +
             C48848 * C1691) *
                C48956 * C49178) *
               C48926 * C49198 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
              C48926 * C517 -
          ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
           (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
              C48926 * C518 +
          ((C4407 + C4406 + C4405 + C4404) * C48956 * C49170 +
           (C3827 * C1170 - C3828 * C1164 - C3827 * C1171 + C3821 * C1176 +
            C3829 * C1168 - C3830 * C1163 - C3829 * C1169 + C3822 * C1175 +
            C3831 * C1166 - C3832 * C1162 - C3831 * C1167 + C3823 * C1174 +
            C3833 * C1172 - C3834 * C1165 - C3833 * C1173 + C49169 * C1177) *
               C48956 * C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
           C11943 * C49178) *
              C48926 * C517 -
          ((C11948 + C11949) * C48956 * C49178 +
           (C11567 + C11566) * C48956 * C11353 +
           (C11565 + C11564) * C48956 * C11352 +
           (C11563 + C11562) * C48956 * C11351) *
              C48926 * C518 +
          (C11942 * C11351 + C11943 * C11352 +
           (C11949 + C11948) * C48956 * C11353 +
           (C47973 * C9232 - C11356 * C9230 - C47973 * C9233 + C49148 * C9236 +
            C47954 * C9234 - C11358 * C9231 - C47954 * C9235 + C48848 * C9237) *
               C48956 * C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C343 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C451 +
          (((C4565 + C4564 + C4563 + C4562) * C48956 * C49170 +
            (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
             C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
             C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
             C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C343 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C451 +
          (((C12121 + C12120) * C48956 * C11351 +
            (C12119 + C12118) * C48956 * C11352 +
            (C12117 + C12116) * C48956 * C11353 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C11948 + C11949) * C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C725 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C48909 * C453 +
          (((C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363) *
                C48956 * C49170 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C48956 * C49003) *
               C49200 -
           ((C4021 + C4020 + C4019 + C4018) * C48956 * C49003 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C48956 * C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C725 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C48909 * C453 +
          (((C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366 +
             C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365) *
                C48956 * C11351 +
            (C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639 +
             C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640) *
                C48956 * C11352 +
            (C47973 * C1414 - C11356 * C1409 - C47973 * C1415 + C49148 * C1421 +
             C47954 * C1412 - C11358 * C1408 - C47954 * C1413 +
             C48848 * C1420) *
                C48956 * C11353 +
            (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 + C49148 * C1872 +
             C47954 * C1869 - C11358 * C1864 - C47954 * C1870 +
             C48848 * C1873) *
                C48956 * C49178) *
               C49200 -
           ((C11573 + C11572) * C48956 * C49178 +
            (C11571 + C11570) * C48956 * C11353 +
            (C11569 + C11568) * C48956 * C11352 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C48956 * C11351) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C48956 * C49170 +
            (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
               C725 -
           ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
            (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
                C48956 * C49170) *
               C49200) *
              C233 +
          (((C4565 + C4564 + C4563 + C4562) * C48956 * C49170 +
            (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
             C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
             C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
             C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
                C48956 * C49003) *
               C49200 -
           ((C4404 + C4405 + C4406 + C4407) * C48956 * C49003 +
            (C4017 + C4016 + C4015 + C4014) * C48956 * C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C48956 * C11351 +
            (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
            C11943 * C49178) *
               C725 -
           ((C12116 + C12117) * C48956 * C49178 +
            (C12118 + C12119) * C48956 * C11353 +
            (C12120 + C12121) * C48956 * C11352 +
            (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
             C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
                C48956 * C11351) *
               C49200) *
              C233 +
          (((C12121 + C12120) * C48956 * C11351 +
            (C12119 + C12118) * C48956 * C11352 +
            (C12117 + C12116) * C48956 * C11353 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C48956 * C49178) *
               C49200 -
           ((C11948 + C11949) * C48956 * C49178 +
            (C11567 + C11566) * C48956 * C11353 +
            (C11565 + C11564) * C48956 * C11352 +
            (C11563 + C11562) * C48956 * C11351) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C48956 * C49170 +
           (C4014 + C4015 + C4016 + C4017) * C48956 * C49003) *
              C871 -
          ((C4562 + C4563 + C4564 + C4565) * C48956 * C49003 +
           (C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364 +
            C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
            C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
            C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367) *
               C48956 * C49170) *
              C872 +
          ((C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889 +
            C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
            C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
            C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892) *
               C48956 * C49170 +
           (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
            C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
            C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
            C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
               C48956 * C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
            C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
               C48956 * C11351 +
           (C11562 + C11563) * C48956 * C11352 + C11942 * C11353 +
           C11943 * C49178) *
              C871 -
          ((C12116 + C12117) * C48956 * C49178 +
           (C12118 + C12119) * C48956 * C11353 +
           (C12120 + C12121) * C48956 * C11352 +
           (C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366 +
            C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367) *
               C48956 * C11351) *
              C872 +
          ((C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889 +
            C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890) *
               C48956 * C11351 +
           (C47973 * C2324 - C11356 * C2318 - C47973 * C2325 + C49148 * C2336 +
            C47954 * C2326 - C11358 * C2319 - C47954 * C2327 + C48848 * C2337) *
               C48956 * C11352 +
           (C47973 * C2330 - C11356 * C2321 - C47973 * C2331 + C49148 * C2339 +
            C47954 * C2332 - C11358 * C2322 - C47954 * C2333 + C48848 * C2340) *
               C48956 * C11353 +
           (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 + C49148 * C9898 +
            C47954 * C10157 - C11358 * C10156 - C47954 * C10158 +
            C48848 * C10159) *
               C48956 * C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 +
            (C1916 + C1915 + C1914) * C49043) *
               C49003) *
              C48926 * C48909 * C110 -
          (((C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639) *
                C49043 +
            (C1259 + C1258 + C1257) * C49171) *
               C49003 +
           ((C2848 + C2847 + C2846) * C49043 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49171) *
               C49170) *
              C48926 * C48909 * C111 +
          (((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
             C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
             C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
                C49171 +
            (C1010 * C355 - C1011 * C347 - C1010 * C356 + C1004 * C365 +
             C1012 * C353 - C1013 * C346 - C1012 * C354 + C1005 * C364 +
             C1014 * C351 - C1015 * C345 - C1014 * C352 + C49192 * C363) *
                C49043) *
               C49170 +
           ((C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
             C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
             C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
                C49171 +
            (C1010 * C632 - C1011 * C625 - C1010 * C633 + C1004 * C640 +
             C1012 * C634 - C1013 * C626 - C1012 * C635 + C1005 * C641 +
             C1014 * C636 - C1015 * C627 - C1014 * C637 + C49192 * C642) *
                C49043) *
               C49003) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C9287 * C49171 + C9662 * C49043) * C11352 +
           (C9288 * C49171 + C9661 * C49043) * C11353 +
           (C9289 * C49171 + C9660 * C49043) * C49178) *
              C48926 * C48909 * C110 -
          (((C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C49043 +
            C9293 * C49171) *
               C49178 +
           (C10207 * C49043 + C9292 * C49171) * C11353 +
           (C10205 * C49043 + C9291 * C49171) * C11352 +
           (C10395 * C49043 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49171) *
               C11351) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49171 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49043) *
               C11351 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49171 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49043) *
               C11352 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C49171 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49043) *
               C11353 +
           ((C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
                C49171 +
            (C9146 * C1869 - C9147 * C1864 - C9146 * C1870 + C48838 * C1873) *
                C49043) *
               C49178) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C48926 * C233 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            ((C1914 + C1915 + C1916) * C49043 +
             (C1253 + C1252 + C1251) * C49171) *
                C49170) *
               C48926 * C49198) *
              C235 +
          ((((C1257 + C1258 + C1259) * C49171 +
             (C6442 + C6443 + C6444) * C49043) *
                C49170 +
            ((C1260 + C1261 + C1262) * C49171 +
             (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
              C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
              C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C48926 * C233 -
           ((C9659 * C49043 + C9290 * C49171) * C49178 +
            (C14420 + C14419) * C11353 + (C14418 + C14417) * C11352 +
            (C14416 + C14415) * C11351) *
               C48926 * C49198) *
              C235 +
          (((C14421 + C14422) * C11351 + (C14423 + C14424) * C11352 +
            (C14425 + C14433) * C11353 +
            (C9294 * C49171 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C343 -
           (((C3286 + C3285 + C3284) * C49043 +
             (C1914 + C1915 + C1916) * C49171) *
                C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C48909 * C235 +
          ((((C2846 + C2847 + C2848) * C49171 +
             (C2849 + C2850 + C2851) * C49043) *
                C49170 +
            ((C6442 + C6443 + C6444) * C49171 +
             (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
              C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
              C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C343 -
           ((C10663 * C49043 + C9660 * C49171) * C49178 +
            (C10204 * C49043 + C9661 * C49171) * C11353 +
            (C10203 * C49043 + C9662 * C49171) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49171 + C10396 * C49043) * C11351 +
            (C10205 * C49171 + C10206 * C49043) * C11352 +
            (C10207 * C49171 + C10208 * C49043) * C11353 +
            (C14432 * C49171 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 +
             (C1916 + C1915 + C1914) * C49043) *
                C49003) *
               C48926 * C451 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            ((C1914 + C1915 + C1916) * C49043 +
             (C1253 + C1252 + C1251) * C49171) *
                C49170) *
               C48926 * C49198) *
              C453 +
          ((((C1257 + C1258 + C1259) * C49171 +
             (C6442 + C6443 + C6444) * C49043) *
                C49170 +
            ((C1260 + C1261 + C1262) * C49171 +
             (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
              C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
              C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                 C49043) *
                C49003) *
               C48926 * C49198 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + (C14417 + C14418) * C11353 +
            (C14419 + C14420) * C49178) *
               C48926 * C451 -
           ((C9659 * C49043 + C9290 * C49171) * C49178 +
            (C14420 + C14419) * C11353 + (C14418 + C14417) * C11352 +
            (C14416 + C14415) * C11351) *
               C48926 * C49198) *
              C453 +
          (((C14421 + C14422) * C11351 + (C14423 + C14424) * C11352 +
            (C14425 + C14433) * C11353 +
            (C9294 * C49171 +
             (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                 C49043) *
                C49178) *
               C48926 * C49198 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 +
            (C1916 + C1915 + C1914) * C49043) *
               C49003) *
              C48926 * C517 -
          (((C1911 + C1912 + C1913) * C49043 +
            (C1256 + C1255 + C1254) * C49171) *
               C49003 +
           ((C1914 + C1915 + C1916) * C49043 +
            (C1253 + C1252 + C1251) * C49171) *
               C49170) *
              C48926 * C518 +
          ((C1706 * C49171 + (C1913 + C1912 + C1911) * C49043) * C49170 +
           ((C1716 + C1715 + C1714) * C49171 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C49043) *
               C49003) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
              C48926 * C517 -
          ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
           (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
              C48926 * C518 +
          (C14792 * C11351 + C14793 * C11352 + (C14795 + C14794) * C11353 +
           (C9547 * C49171 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C49043) *
               C49178) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C343 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C451 +
          (((C7175 * C49171 + (C3284 + C3285 + C3286) * C49043) * C49170 +
            ((C1913 + C1912 + C1911) * C49171 +
             (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
              C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
              C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            (C7176 * C49043 + (C1253 + C1252 + C1251) * C49171) * C49170) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C343 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C451 +
          (((C14931 + C14930) * C11351 + (C14929 + C14928) * C11352 +
            (C14927 + C14926) * C11353 +
            (C9659 * C49171 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
            (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C725 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C48909 * C453 +
          ((((C2846 + C2847 + C2848) * C49171 +
             (C2849 + C2850 + C2851) * C49043) *
                C49170 +
            ((C6442 + C6443 + C6444) * C49171 +
             (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
              C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
              C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                 C49043) *
                C49003) *
               C49200 -
           (((C6444 + C6443 + C6442) * C49043 +
             (C1259 + C1258 + C1257) * C49171) *
                C49003 +
            ((C2848 + C2847 + C2846) * C49043 +
             (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
              C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
              C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                 C49171) *
                C49170) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C725 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49171 + C10396 * C49043) * C11351 +
            (C10205 * C49171 + C10206 * C49043) * C11352 +
            (C10207 * C49171 + C10208 * C49043) * C11353 +
            (C14432 * C49171 + (C9146 * C10157 - C9147 * C10156 -
                                C9146 * C10158 + C48838 * C10159) *
                                   C49043) *
                C49178) *
               C49200 -
           ((C14433 + C14425) * C49178 + (C14424 + C14423) * C11353 +
            (C14422 + C14421) * C11352 +
            (C10395 * C49043 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49171) *
                C11351) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
              C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
              C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                 C49171 +
             (C2840 + C2841 + C2842) * C49043) *
                C49170 +
            ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
               C725 -
           (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
            ((C2845 + C2844 + C2843) * C49043 +
             (C2842 + C2841 + C2840) * C49171) *
                C49170) *
               C49200) *
              C233 +
          (((C7175 * C49171 + (C3284 + C3285 + C3286) * C49043) * C49170 +
            ((C1913 + C1912 + C1911) * C49171 +
             (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
              C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
              C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
                 C49043) *
                C49003) *
               C49200 -
           (((C1911 + C1912 + C1913) * C49043 +
             (C1256 + C1255 + C1254) * C49171) *
                C49003 +
            (C7176 * C49043 + (C1253 + C1252 + C1251) * C49171) * C49170) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49171 +
             C10393 * C49043) *
                C11351 +
            (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
               C725 -
           ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
            (C14930 + C14931) * C11352 +
            (C10394 * C49043 + C10393 * C49171) * C11351) *
               C49200) *
              C233 +
          (((C14931 + C14930) * C11351 + (C14929 + C14928) * C11352 +
            (C14927 + C14926) * C11353 +
            (C9659 * C49171 +
             (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                 C49043) *
                C49178) *
               C49200 -
           ((C14794 + C14795) * C49178 + (C14420 + C14419) * C11353 +
            (C14418 + C14417) * C11352 + (C14416 + C14415) * C11351) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49171 +
            (C2840 + C2841 + C2842) * C49043) *
               C49170 +
           ((C1251 + C1252 + C1253) * C49171 + C7175 * C49043) * C49003) *
              C871 -
          (((C3286 + C3285 + C3284) * C49043 + C7176 * C49171) * C49003 +
           ((C2845 + C2844 + C2843) * C49043 +
            (C2842 + C2841 + C2840) * C49171) *
               C49170) *
              C872 +
          ((C3714 * C49171 + (C3723 + C3722 + C3721) * C49043) * C49170 +
           ((C3284 + C3285 + C3286) * C49171 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49043) *
               C49003) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49171 +
            C10393 * C49043) *
               C11351 +
           (C14415 + C14416) * C11352 + C14792 * C11353 + C14793 * C49178) *
              C871 -
          ((C14926 + C14927) * C49178 + (C14928 + C14929) * C11353 +
           (C14930 + C14931) * C11352 +
           (C10394 * C49043 + C10393 * C49171) * C11351) *
              C872 +
          ((C10394 * C49171 + C11251 * C49043) * C11351 +
           (C10203 * C49171 + C10832 * C49043) * C11352 +
           (C10204 * C49171 + C10831 * C49043) * C11353 +
           (C10663 * C49171 + (C9146 * C10811 - C9147 * C10810 -
                               C9146 * C10812 + C48838 * C10813) *
                                  C49043) *
               C49178) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1010 * C251 - C1011 * C241 - C1010 * C252 + C1004 * C259 +
            C1012 * C249 - C1013 * C240 - C1012 * C250 + C1005 * C258 +
            C1014 * C247 - C1015 * C239 - C1014 * C248 + C49192 * C257) *
               C48956 * C49223 +
           (C1010 * C526 - C1011 * C521 - C1010 * C527 + C1004 * C536 +
            C1012 * C528 - C1013 * C522 - C1012 * C529 + C1005 * C537 +
            C1014 * C530 - C1015 * C523 - C1014 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C1014 * C532 - C1015 * C524 - C1014 * C533 + C49192 * C539 +
            C1012 * C530 - C1013 * C523 - C1012 * C531 + C1005 * C538 +
            C1010 * C528 - C1011 * C522 - C1010 * C529 + C1004 * C537) *
               C48956 * C49203 +
           (C1014 * C245 - C1015 * C238 - C1014 * C246 + C49192 * C256 +
            C1012 * C247 - C1013 * C239 - C1012 * C248 + C1005 * C257 +
            C1010 * C249 - C1011 * C240 - C1010 * C250 + C1004 * C258) *
               C48956 * C49223 +
           (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
            C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
            C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
               C48956 * C49235) *
              C48926 * C48909 * C111 +
          ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
            C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
            C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
               C48956 * C49235 +
           (C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
            C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
            C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
               C48956 * C49223 +
           (C1010 * C530 - C1011 * C523 - C1010 * C531 + C1004 * C538 +
            C1012 * C532 - C1013 * C524 - C1012 * C533 + C1005 * C539 +
            C1014 * C534 - C1015 * C525 - C1014 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C48909 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C48956 * C48944 * C48926 * C48909 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C48956 * C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367 +
            C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
            C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365) *
               C49225 +
           (C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
            C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
            C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
               C49206) *
              C48944 * C48926 * C48909 * C110 -
          ((C1014 * C885 - C1015 * C877 - C1014 * C886 + C49192 * C892 +
            C1012 * C883 - C1013 * C876 - C1012 * C884 + C1005 * C891 +
            C1010 * C881 - C1011 * C875 - C1010 * C882 + C1004 * C890) *
               C49206 +
           (C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364 +
            C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
            C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366) *
               C49225 +
           (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
            C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
            C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
               C49236) *
              C48944 * C48926 * C48909 * C111 +
          ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
            C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
            C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
               C49236 +
           (C1010 * C355 - C1011 * C347 - C1010 * C356 + C1004 * C365 +
            C1012 * C353 - C1013 * C346 - C1012 * C354 + C1005 * C364 +
            C1014 * C351 - C1015 * C345 - C1014 * C352 + C49192 * C363) *
               C49225 +
           (C1010 * C883 - C1011 * C876 - C1010 * C884 + C1004 * C891 +
            C1012 * C885 - C1013 * C877 - C1012 * C886 + C1005 * C892 +
            C1014 * C887 - C1015 * C878 - C1014 * C888 + C49192 * C893) *
               C49206) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C7826 * C251 - C7827 * C241 - C7826 * C252 + C49232 * C259 +
            C7828 * C249 - C7829 * C240 - C7828 * C250 + C49219 * C258 +
            C7830 * C247 - C7831 * C239 - C7830 * C248 + C49192 * C257) *
               C48956 * C7824 +
           (C7826 * C526 - C7827 * C521 - C7826 * C527 + C49232 * C536 +
            C7828 * C528 - C7829 * C522 - C7828 * C529 + C49219 * C537 +
            C7830 * C530 - C7831 * C523 - C7830 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C7830 * C532 - C7831 * C524 - C7830 * C533 + C49192 * C539 +
            C7828 * C530 - C7829 * C523 - C7828 * C531 + C49219 * C538 +
            C7826 * C528 - C7827 * C522 - C7826 * C529 + C49232 * C537) *
               C48956 * C49203 +
           (C7830 * C245 - C7831 * C238 - C7830 * C246 + C49192 * C256 +
            C7828 * C247 - C7829 * C239 - C7828 * C248 + C49219 * C257 +
            C7826 * C249 - C7827 * C240 - C7826 * C250 + C49232 * C258) *
               C48956 * C7824 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C48956 * C7823) *
              C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C48956 * C7823 +
           (C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
            C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
            C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
               C48956 * C7824 +
           (C7826 * C530 - C7827 * C523 - C7826 * C531 + C49232 * C538 +
            C7828 * C532 - C7829 * C524 - C7828 * C533 + C49219 * C539 +
            C7830 * C534 - C7831 * C525 - C7830 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           (C9146 * C251 - C9147 * C241 - C9146 * C252 + C48838 * C259) *
               C48956 * C9142 +
           (C9146 * C526 - C9147 * C521 - C9146 * C527 + C48838 * C536) *
               C48956 * C9143 +
           (C9146 * C1170 - C9147 * C1164 - C9146 * C1171 + C48838 * C1176) *
               C48956 * C9144 +
           (C9146 * C1683 - C9147 * C1680 - C9146 * C1684 + C48838 * C1689) *
               C48956 * C9145) *
              C48926 * C48909 * C110 -
          ((C9146 * C1685 - C9147 * C1681 - C9146 * C1686 + C48838 * C1690) *
               C48956 * C9145 +
           (C9146 * C1168 - C9147 * C1163 - C9146 * C1169 + C48838 * C1175) *
               C48956 * C9144 +
           (C9146 * C528 - C9147 * C522 - C9146 * C529 + C48838 * C537) *
               C48956 * C9143 +
           (C9146 * C249 - C9147 * C240 - C9146 * C250 + C48838 * C258) *
               C48956 * C9142 +
           (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
               C48956 * C9141) *
              C48926 * C48909 * C111 +
          ((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
               C48956 * C9141 +
           (C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
               C48956 * C9142 +
           (C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
               C48956 * C9143 +
           (C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
               C48956 * C9144 +
           (C9146 * C1687 - C9147 * C1682 - C9146 * C1688 + C48838 * C1691) *
               C48956 * C9145) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C49225 +
            (C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
                C49206) *
               C7823 +
           (C9287 * C49236 + C9662 * C49225 +
            (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
                C49206) *
               C7824 +
           (C9288 * C49236 + C9661 * C49225 +
            (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
                C49206) *
               C49203) *
              C48926 * C48909 * C110 -
          (((C9146 * C2332 - C9147 * C2322 - C9146 * C2333 + C48838 * C2340) *
                C49206 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C49225 +
            C9292 * C49236) *
               C49203 +
           ((C9146 * C2326 - C9147 * C2319 - C9146 * C2327 + C48838 * C2337) *
                C49206 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C49225 +
            C9291 * C49236) *
               C7824 +
           ((C9146 * C881 - C9147 * C875 - C9146 * C882 + C48838 * C890) *
                C49206 +
            (C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C49225 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C49236) *
               C7823) *
              C48926 * C48909 * C111 +
          (((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
                C49236 +
            (C9146 * C355 - C9147 * C347 - C9146 * C356 + C48838 * C365) *
                C49225 +
            (C9146 * C883 - C9147 * C876 - C9146 * C884 + C48838 * C891) *
                C49206) *
               C7823 +
           ((C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
                C49236 +
            (C9146 * C632 - C9147 * C625 - C9146 * C633 + C48838 * C640) *
                C49225 +
            (C9146 * C2328 - C9147 * C2320 - C9146 * C2329 + C48838 * C2338) *
                C49206) *
               C7824 +
           ((C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
                C49236 +
            (C9146 * C1412 - C9147 * C1408 - C9146 * C1413 + C48838 * C1420) *
                C49225 +
            (C9146 * C2334 - C9147 * C2323 - C9146 * C2335 + C48838 * C2341) *
                C49206) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C233 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C235 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C233 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C235 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365) *
                C49225 +
            (C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
             C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
             C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
                C49206) *
               C48944 * C48926 * C233 -
           ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
             C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
             C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
                C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C1257 + C1258 + C1259) * C49236 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C49225 +
            (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
             C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
             C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C1014 * C885 - C1015 * C877 - C1014 * C886 + C49192 * C892 +
             C1012 * C883 - C1013 * C876 - C1012 * C884 + C1005 * C891 +
             C1010 * C881 - C1011 * C875 - C1010 * C882 + C1004 * C890) *
                C49206 +
            (C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366) *
                C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C233 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C233 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C235 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                 C49225 +
             (C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
                 C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C48926 * C233 -
           (((C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
                 C49206 +
             C9660 * C49225 + C9289 * C49236) *
                C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C48926 * C49198) *
              C235 +
          (((C10173 + C10211 + C10212) * C7823 +
            (C10182 + C10213 + C10214) * C7824 +
            (C9293 * C49236 +
             (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                 C49225 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            ((C9146 * C881 - C9147 * C875 - C9146 * C882 + C48838 * C890) *
                 C49206 +
             (C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                 C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C343 -
           ((C1014 * C1412 - C1015 * C1408 - C1014 * C1413 + C49192 * C1420 +
             C1012 * C1414 - C1013 * C1409 - C1012 * C1415 + C1005 * C1421 +
             C1010 * C1416 - C1011 * C1410 - C1010 * C1417 + C1004 * C1422) *
                C48956 * C49203 +
            (C1014 * C632 - C1015 * C625 - C1014 * C633 + C49192 * C640 +
             C1012 * C630 - C1013 * C624 - C1012 * C631 + C1005 * C639 +
             C1010 * C628 - C1011 * C623 - C1010 * C629 + C1004 * C638) *
                C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C235 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C235 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C343 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C2846 + C2847 + C2848) * C49236 +
            (C2849 + C2850 + C2851) * C49225 +
            (C1010 * C2757 - C1011 * C2752 - C1010 * C2758 + C1004 * C2764 +
             C1012 * C2755 - C1013 * C2751 - C1012 * C2756 + C1005 * C2763 +
             C1014 * C2761 - C1015 * C2754 - C1014 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C343 -
           ((C7830 * C1412 - C7831 * C1408 - C7830 * C1413 + C49192 * C1420 +
             C7828 * C1414 - C7829 * C1409 - C7828 * C1415 + C49219 * C1421 +
             C7826 * C1416 - C7827 * C1410 - C7826 * C1417 + C49232 * C1422) *
                C48956 * C49203 +
            (C7830 * C632 - C7831 * C625 - C7830 * C633 + C49192 * C640 +
             C7828 * C630 - C7829 * C624 - C7828 * C631 + C49219 * C639 +
             C7826 * C628 - C7827 * C623 - C7826 * C629 + C49232 * C638) *
                C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C235 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           ((C9146 * C9386 - C9147 * C9384 - C9146 * C9387 + C48838 * C9390) *
                C48956 * C9145 +
            (C9146 * C1865 - C9147 * C1862 - C9146 * C1866 + C48838 * C1871) *
                C48956 * C9144 +
            (C9146 * C1416 - C9147 * C1410 - C9146 * C1417 + C48838 * C1422) *
                C48956 * C9143 +
            (C9146 * C628 - C9147 * C623 - C9146 * C629 + C48838 * C638) *
                C48956 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C235 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C343 -
           (((C9146 * C10362 - C9147 * C10360 - C9146 * C10363 +
              C48838 * C10366) *
                 C49206 +
             C10204 * C49225 + C9661 * C49236) *
                C49203 +
            ((C9146 * C3256 - C9147 * C3253 - C9146 * C3257 + C48838 * C3262) *
                 C49206 +
             C10203 * C49225 + C9662 * C49236) *
                C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C48909 * C235 +
          (((C10395 * C49236 + C10396 * C49225 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C7823 +
            (C10205 * C49236 + C10206 * C49225 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C7824 +
            (C10207 * C49236 + C10208 * C49225 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C451 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C453 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C451 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C453 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C48926 * C451 -
           ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
             C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
             C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
                C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C1257 + C1258 + C1259) * C49236 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C49225 +
            (C1010 * C2326 - C1011 * C2319 - C1010 * C2327 + C1004 * C2337 +
             C1012 * C2328 - C1013 * C2320 - C1012 * C2329 + C1005 * C2338 +
             C1014 * C2602 - C1015 * C2601 - C1014 * C2603 + C49192 * C2604) *
                C49206) *
               C48944 * C48926 * C49198 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C451 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C451 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C453 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 +
            (C10167 + C10168 + C10210) * C49203) *
               C48926 * C451 -
           (((C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
                 C49206 +
             C9660 * C49225 + C9289 * C49236) *
                C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C48926 * C49198) *
              C453 +
          (((C10173 + C10211 + C10212) * C7823 +
            (C10182 + C10213 + C10214) * C7824 +
            (C9293 * C49236 +
             (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                 C49225 +
             (C9146 * C10157 - C9147 * C10156 - C9146 * C10158 +
              C48838 * C10159) *
                 C49206) *
                C49203) *
               C48926 * C49198 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C48926 * C517 -
          ((C1714 + C1715 + C1716) * C48956 * C49203 +
           (C1256 + C1255 + C1254) * C48956 * C49223 +
           (C1253 + C1252 + C1251) * C48956 * C49235) *
              C48926 * C518 +
          (C1710 * C49235 + (C1716 + C1715 + C1714) * C48956 * C49223 +
           (C1010 * C1683 - C1011 * C1680 - C1010 * C1684 + C1004 * C1689 +
            C1012 * C1685 - C1013 * C1681 - C1012 * C1686 + C1005 * C1690 +
            C1014 * C1687 - C1015 * C1682 - C1014 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C517 -
          (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 + C119 * C245 -
           C120 * C238 - C119 * C246 + C104 * C256 + C117 * C247 - C118 * C239 -
           C117 * C248 + C103 * C257 + C115 * C249 - C116 * C240 - C115 * C250 +
           C102 * C258 + C113 * C251 - C114 * C241 - C113 * C252 +
           C101 * C259) *
              C48956 * C48944 * C48926 * C518 +
          (C113 * C526 - C114 * C521 - C113 * C527 + C101 * C536 + C115 * C528 -
           C116 * C522 - C115 * C529 + C102 * C537 + C117 * C530 - C118 * C523 -
           C117 * C531 + C103 * C538 + C119 * C532 - C120 * C524 - C119 * C533 +
           C104 * C539 + C121 * C534 - C122 * C525 - C121 * C535 +
           C105 * C540) *
              C48956 * C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C2840 + C2841 + C2842) * C49225 +
           (C2843 + C2844 + C2845) * C49206) *
              C48944 * C48926 * C517 -
          ((C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338 +
            C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
            C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336) *
               C49206 +
           (C1914 + C1915 + C1916) * C49225 +
           (C1253 + C1252 + C1251) * C49236) *
              C48944 * C48926 * C518 +
          (C1706 * C49236 + (C1913 + C1912 + C1911) * C49225 +
           (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
            C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
            C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
               C49206) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C48926 * C517 -
          ((C8486 + C8487 + C8488) * C48956 * C49203 +
           (C8056 + C8055 + C8054) * C48956 * C7824 +
           (C8053 + C8052 + C8051) * C48956 * C7823) *
              C48926 * C518 +
          (C8482 * C7823 + (C8488 + C8487 + C8486) * C48956 * C7824 +
           (C7826 * C1683 - C7827 * C1680 - C7826 * C1684 + C49232 * C1689 +
            C7828 * C1685 - C7829 * C1681 - C7828 * C1686 + C49219 * C1690 +
            C7830 * C1687 - C7831 * C1682 - C7830 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C48926 * C517 -
          (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
           C9295 * C9141) *
              C48926 * C518 +
          (C9296 * C9141 + C9297 * C9142 + C9298 * C9143 + C9548 * C9144 +
           (C9146 * C9537 - C9147 * C9536 - C9146 * C9538 + C48838 * C9539) *
               C48956 * C9145) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            C10393 * C49225 + C10394 * C49206) *
               C7823 +
           (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
              C48926 * C517 -
          ((C10664 + C10658 + C10659) * C49203 +
           (C10210 + C10168 + C10167) * C7824 +
           (C10209 + C10162 + C10161) * C7823) *
              C48926 * C518 +
          (C10660 * C7823 + (C10659 + C10658 + C10664) * C7824 +
           (C9290 * C49236 + C9659 * C49225 +
            (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
                C49206) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C343 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C451 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C451 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C343 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C451 +
          (((C1916 + C1915 + C1914) * C49236 +
            (C3284 + C3285 + C3286) * C49225 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C3286 + C3285 + C3284) * C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C343 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C451 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C343 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C451 +
          (((C10826 + C10825 + C10834) * C7823 +
            (C10820 + C10819 + C10833) * C7824 +
            (C9660 * C49236 + C10663 * C49225 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10664 + C10658 + C10659) * C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C453 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C453 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C725 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C2846 + C2847 + C2848) * C49236 +
            (C2849 + C2850 + C2851) * C49225 +
            (C1010 * C2757 - C1011 * C2752 - C1010 * C2758 + C1004 * C2764 +
             C1012 * C2755 - C1013 * C2751 - C1012 * C2756 + C1005 * C2763 +
             C1014 * C2761 - C1015 * C2754 - C1014 * C2762 + C49192 * C2766) *
                C49206) *
               C48944 * C49200 -
           ((C2851 + C2850 + C2849) * C49206 +
            (C2848 + C2847 + C2846) * C49225 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C49236) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C453 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C453 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C725 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C48909 * C453 +
          (((C10395 * C49236 + C10396 * C49225 +
             (C9146 * C2757 - C9147 * C2752 - C9146 * C2758 + C48838 * C2764) *
                 C49206) *
                C7823 +
            (C10205 * C49236 + C10206 * C49225 +
             (C9146 * C3258 - C9147 * C3254 - C9146 * C3259 + C48838 * C3263) *
                 C49206) *
                C7824 +
            (C10207 * C49236 + C10208 * C49225 +
             (C9146 * C10364 - C9147 * C10361 - C9146 * C10365 +
              C48838 * C10367) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10214 + C10213 + C10182) * C49203 +
            (C10212 + C10211 + C10173) * C7824 +
            (C10396 * C49206 + C10395 * C49225 +
             (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                 C49236) *
                C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C233 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C233 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C49236 +
            (C2840 + C2841 + C2842) * C49225 +
            (C2843 + C2844 + C2845) * C49206) *
               C48944 * C725 -
           ((C1014 * C2755 - C1015 * C2751 - C1014 * C2756 + C49192 * C2763 +
             C1012 * C2757 - C1013 * C2752 - C1012 * C2758 + C1005 * C2764 +
             C1010 * C2759 - C1011 * C2753 - C1010 * C2760 + C1004 * C2765) *
                C49206 +
            (C2845 + C2844 + C2843) * C49225 +
            (C2842 + C2841 + C2840) * C49236) *
               C48944 * C49200) *
              C233 +
          (((C1916 + C1915 + C1914) * C49236 +
            (C3284 + C3285 + C3286) * C49225 +
            (C1010 * C3256 - C1011 * C3253 - C1010 * C3257 + C1004 * C3262 +
             C1012 * C3258 - C1013 * C3254 - C1012 * C3259 + C1005 * C3263 +
             C1014 * C3260 - C1015 * C3255 - C1014 * C3261 + C49192 * C3264) *
                C49206) *
               C48944 * C49200 -
           ((C3286 + C3285 + C3284) * C49206 +
            (C1914 + C1915 + C1916) * C49225 +
            (C1253 + C1252 + C1251) * C49236) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C233 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                 C49236 +
             C10393 * C49225 + C10394 * C49206) *
                C7823 +
            (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
               C725 -
           ((C10833 + C10819 + C10820) * C49203 +
            (C10834 + C10825 + C10826) * C7824 +
            ((C9146 * C2759 - C9147 * C2753 - C9146 * C2760 + C48838 * C2765) *
                 C49206 +
             C10394 * C49225 + C10393 * C49236) *
                C7823) *
               C49200) *
              C233 +
          (((C10826 + C10825 + C10834) * C7823 +
            (C10820 + C10819 + C10833) * C7824 +
            (C9660 * C49236 + C10663 * C49225 +
             (C9146 * C10811 - C9147 * C10810 - C9146 * C10812 +
              C48838 * C10813) *
                 C49206) *
                C49203) *
               C49200 -
           ((C10664 + C10658 + C10659) * C49203 +
            (C10210 + C10168 + C10167) * C7824 +
            (C10209 + C10162 + C10161) * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C871 -
          ((C1911 + C1912 + C1913) * C48956 * C49203 +
           (C1914 + C1915 + C1916) * C48956 * C49223 +
           (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
            C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
            C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
               C48956 * C49235) *
              C872 +
          ((C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
            C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
            C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
               C48956 * C49235 +
           (C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336 +
            C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
            C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338) *
               C48956 * C49223 +
           (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
            C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
            C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C871 -
          (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 + C119 * C353 -
           C120 * C346 - C119 * C354 + C104 * C364 + C117 * C355 - C118 * C347 -
           C117 * C356 + C103 * C365 + C115 * C357 - C116 * C348 - C115 * C358 +
           C102 * C366 + C113 * C359 - C114 * C349 - C113 * C360 +
           C101 * C367) *
              C48956 * C48944 * C872 +
          (C113 * C879 - C114 * C874 - C113 * C880 + C101 * C889 + C115 * C881 -
           C116 * C875 - C115 * C882 + C102 * C890 + C117 * C883 - C118 * C876 -
           C117 * C884 + C103 * C891 + C119 * C885 - C120 * C877 - C119 * C886 +
           C104 * C892 + C121 * C887 - C122 * C878 - C121 * C888 +
           C105 * C893) *
              C48956 * C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C49236 +
           (C2840 + C2841 + C2842) * C49225 + C3714 * C49206) *
              C48944 * C871 -
          ((C3721 + C3722 + C3723) * C49206 + (C2845 + C2844 + C2843) * C49225 +
           (C2842 + C2841 + C2840) * C49236) *
              C48944 * C872 +
          (C3714 * C49236 + (C3723 + C3722 + C3721) * C49225 +
           (C1010 * C3691 - C1011 * C3688 - C1010 * C3692 + C1004 * C3697 +
            C1012 * C3693 - C1013 * C3689 - C1012 * C3694 + C1005 * C3698 +
            C1014 * C3695 - C1015 * C3690 - C1014 * C3696 + C49192 * C3699) *
               C49206) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C871 -
          ((C8671 + C8672 + C8673) * C48956 * C49203 +
           (C8674 + C8675 + C8676) * C48956 * C7824 +
           (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
               C48956 * C7823) *
              C872 +
          ((C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C48956 * C7823 +
           (C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338) *
               C48956 * C7824 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C871 -
          (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
           (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
               C48956 * C9141) *
              C872 +
          ((C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
               C48956 * C9141 +
           (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
               C48956 * C9142 +
           (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
               C48956 * C9143 +
           (C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
               C48956 * C9144 +
           (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
               C48956 * C9145) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C49236 +
            C10393 * C49225 + C10394 * C49206) *
               C7823 +
           (C10161 + C10162 + C10209) * C7824 + C10660 * C49203) *
              C871 -
          ((C10833 + C10819 + C10820) * C49203 +
           (C10834 + C10825 + C10826) * C7824 +
           (C11251 * C49206 + C10394 * C49225 + C10393 * C49236) * C7823) *
              C872 +
          ((C10394 * C49236 + C11251 * C49225 +
            (C9146 * C3691 - C9147 * C3688 - C9146 * C3692 + C48838 * C3697) *
                C49206) *
               C7823 +
           (C10203 * C49236 + C10832 * C49225 +
            (C9146 * C11238 - C9147 * C11236 - C9146 * C11239 +
             C48838 * C11242) *
                C49206) *
               C7824 +
           (C10204 * C49236 + C10831 * C49225 +
            (C9146 * C11240 - C9147 * C11237 - C9146 * C11241 +
             C48838 * C11243) *
                C49206) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367 +
            C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
            C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
            C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364) *
               C49043) *
              C48944 * C48926 * C48909 * C110 -
          ((C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363 +
            C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
            C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
            C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366) *
               C49043 +
           (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
            C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
            C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
            C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
               C49171) *
              C48944 * C48926 * C48909 * C111 +
          ((C3827 * C134 - C3828 * C125 - C3827 * C135 + C3821 * C146 +
            C3829 * C136 - C3830 * C126 - C3829 * C137 + C3822 * C147 +
            C3831 * C138 - C3832 * C127 - C3831 * C139 + C3823 * C148 +
            C3833 * C140 - C3834 * C128 - C3833 * C141 + C49169 * C149) *
               C49171 +
           (C3827 * C355 - C3828 * C347 - C3827 * C356 + C3821 * C365 +
            C3829 * C353 - C3830 * C346 - C3829 * C354 + C3822 * C364 +
            C3831 * C351 - C3832 * C345 - C3831 * C352 + C3823 * C363 +
            C3833 * C361 - C3834 * C350 - C3833 * C362 + C49169 * C368) *
               C49043) *
              C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367 +
             C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366) *
                C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
           (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
              C48926 * C48909 * C110 -
          (((C47954 * C1412 - C11358 * C1408 - C47954 * C1413 + C48848 * C1420 +
             C47973 * C1414 - C11356 * C1409 - C47973 * C1415 +
             C49148 * C1421) *
                C49043 +
            (C11571 + C11570) * C49171) *
               C49203 +
           ((C47954 * C632 - C11358 * C625 - C47954 * C633 + C48848 * C640 +
             C47973 * C630 - C11356 * C624 - C47973 * C631 + C49148 * C639) *
                C49043 +
            (C11569 + C11568) * C49171) *
               C7824 +
           ((C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365 +
             C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366) *
                C49043 +
            (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
             C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                C49171) *
               C7823) *
              C48926 * C48909 * C111 +
          (((C47973 * C134 - C11356 * C125 - C47973 * C135 + C49148 * C146 +
             C47954 * C136 - C11358 * C126 - C47954 * C137 + C48848 * C147) *
                C49171 +
            (C47973 * C355 - C11356 * C347 - C47973 * C356 + C49148 * C365 +
             C47954 * C353 - C11358 * C346 - C47954 * C354 + C48848 * C364) *
                C49043) *
               C7823 +
           ((C47973 * C247 - C11356 * C239 - C47973 * C248 + C49148 * C257 +
             C47954 * C245 - C11358 * C238 - C47954 * C246 + C48848 * C256) *
                C49171 +
            (C47973 * C632 - C11356 * C625 - C47973 * C633 + C49148 * C640 +
             C47954 * C634 - C11358 * C626 - C47954 * C635 + C48848 * C641) *
                C49043) *
               C7824 +
           ((C47973 * C530 - C11356 * C523 - C47973 * C531 + C49148 * C538 +
             C47954 * C532 - C11358 * C524 - C47954 * C533 + C48848 * C539) *
                C49171 +
            (C47973 * C1412 - C11356 * C1408 - C47973 * C1413 + C49148 * C1420 +
             C47954 * C1418 - C11358 * C1411 - C47954 * C1419 +
             C48848 * C1423) *
                C49043) *
               C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C3827 * C359 - C3828 * C349 - C3827 * C360 + C3821 * C367 +
             C3829 * C357 - C3830 * C348 - C3829 * C358 + C3822 * C366 +
             C3831 * C355 - C3832 * C347 - C3831 * C356 + C3823 * C365 +
             C3833 * C353 - C3834 * C346 - C3833 * C354 + C49169 * C364) *
                C49043) *
               C48944 * C48926 * C233 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C48926 * C49198) *
              C235 +
          (((C4018 + C4019 + C4020 + C4021) * C49171 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C3833 * C351 - C3834 * C345 - C3833 * C352 + C49169 * C363 +
             C3831 * C353 - C3832 * C346 - C3831 * C354 + C3823 * C364 +
             C3829 * C355 - C3830 * C347 - C3829 * C356 + C3822 * C365 +
             C3827 * C357 - C3828 * C348 - C3827 * C358 + C3821 * C366) *
                C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C47973 * C359 - C11356 * C349 - C47973 * C360 + C49148 * C367 +
              C47954 * C357 - C11358 * C348 - C47954 * C358 + C48848 * C366) *
                 C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C48926 * C233 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
            ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C48926 * C49198) *
              C235 +
          ((((C11568 + C11569) * C49171 + (C12844 + C12845) * C49043) * C7823 +
            ((C11570 + C11571) * C49171 + (C12846 + C12847) * C49043) * C7824 +
            ((C11572 + C11573) * C49171 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C47954 * C355 - C11358 * C347 - C47954 * C356 + C48848 * C365 +
              C47973 * C357 - C11356 * C348 - C47973 * C358 + C49148 * C366) *
                 C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C343 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C48909 * C235 +
          (((C5336 + C5337 + C5338 + C5339) * C49171 +
            (C3827 * C881 - C3828 * C875 - C3827 * C882 + C3821 * C890 +
             C3829 * C883 - C3830 * C876 - C3829 * C884 + C3822 * C891 +
             C3831 * C885 - C3832 * C877 - C3831 * C886 + C3823 * C892 +
             C3833 * C887 - C3834 * C878 - C3833 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C343 -
           (((C47954 * C2332 - C11358 * C2322 - C47954 * C2333 +
              C48848 * C2340 + C47973 * C2330 - C11356 * C2321 -
              C47973 * C2331 + C49148 * C2339) *
                 C49043 +
             (C12118 + C12119) * C49171) *
                C49203 +
            ((C47954 * C2326 - C11358 * C2319 - C47954 * C2327 +
              C48848 * C2337 + C47973 * C2324 - C11356 * C2318 -
              C47973 * C2325 + C49148 * C2336) *
                 C49043 +
             (C12120 + C12121) * C49171) *
                C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C48909 * C235 +
          ((((C13068 + C13069) * C49171 +
             (C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890 +
              C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891) *
                 C49043) *
                C7823 +
            ((C12844 + C12845) * C49171 +
             (C47973 * C2326 - C11356 * C2319 - C47973 * C2327 +
              C49148 * C2337 + C47954 * C2328 - C11358 * C2320 -
              C47954 * C2329 + C48848 * C2338) *
                 C49043) *
                C7824 +
            ((C12846 + C12847) * C49171 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C48926 * C451 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C48926 * C49198) *
              C453 +
          (((C4018 + C4019 + C4020 + C4021) * C49171 +
            (C3827 * C630 - C3828 * C624 - C3827 * C631 + C3821 * C639 +
             C3829 * C632 - C3830 * C625 - C3829 * C633 + C3822 * C640 +
             C3831 * C634 - C3832 * C626 - C3831 * C635 + C3823 * C641 +
             C3833 * C636 - C3834 * C627 - C3833 * C637 + C49169 * C642) *
                C49043) *
               C48944 * C48926 * C49198 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
            (C11932 * C49171 + (C12119 + C12118) * C49043) * C49203) *
               C48926 * C451 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
            ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C48926 * C49198) *
              C453 +
          ((((C11568 + C11569) * C49171 + (C12844 + C12845) * C49043) * C7823 +
            ((C11570 + C11571) * C49171 + (C12846 + C12847) * C49043) * C7824 +
            ((C11572 + C11573) * C49171 +
             (C47973 * C1867 - C11356 * C1863 - C47973 * C1868 +
              C49148 * C1872 + C47954 * C1869 - C11358 * C1864 -
              C47954 * C1870 + C48848 * C1873) *
                 C49043) *
                C49203) *
               C48926 * C49198 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C5332 + C5333 + C5334 + C5335) * C49043) *
              C48944 * C48926 * C517 -
          ((C4562 + C4563 + C4564 + C4565) * C49043 +
           (C4017 + C4016 + C4015 + C4014) * C49171) *
              C48944 * C48926 * C518 +
          ((C4407 + C4406 + C4405 + C4404) * C49171 +
           (C3827 * C1416 - C3828 * C1410 - C3827 * C1417 + C3821 * C1422 +
            C3829 * C1414 - C3830 * C1409 - C3829 * C1415 + C3822 * C1421 +
            C3831 * C1412 - C3832 * C1408 - C3831 * C1413 + C3823 * C1420 +
            C3833 * C1418 - C3834 * C1411 - C3833 * C1419 + C49169 * C1423) *
               C49043) *
              C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C13066 + C13067) * C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + (C12121 + C12120) * C49043) * C7824 +
           C13413 * C49203) *
              C48926 * C517 -
          (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
           ((C12118 + C12119) * C49043 + (C11565 + C11564) * C49171) * C7824 +
           ((C12120 + C12121) * C49043 + (C11563 + C11562) * C49171) * C7823) *
              C48926 * C518 +
          (C13413 * C7823 +
           (C11933 * C49171 + (C12117 + C12116) * C49043) * C7824 +
           ((C11949 + C11948) * C49171 +
            (C47973 * C9386 - C11356 * C9384 - C47973 * C9387 + C49148 * C9390 +
             C47954 * C9388 - C11358 * C9385 - C47954 * C9389 +
             C48848 * C9391) *
                C49043) *
               C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C343 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C451 +
          (((C4565 + C4564 + C4563 + C4562) * C49171 +
            (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
             C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
             C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
             C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C343 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C451 +
          (((C13608 * C49171 + (C13638 + C13637) * C49043) * C7823 +
            (C13411 * C49171 + (C13636 + C13635) * C49043) * C7824 +
            ((C12117 + C12116) * C49171 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            (C13617 * C49043 + (C11565 + C11564) * C49171) * C7824 +
            (C13626 * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C725 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C48909 * C453 +
          (((C5336 + C5337 + C5338 + C5339) * C49171 +
            (C3827 * C881 - C3828 * C875 - C3827 * C882 + C3821 * C890 +
             C3829 * C883 - C3830 * C876 - C3829 * C884 + C3822 * C891 +
             C3831 * C885 - C3832 * C877 - C3831 * C886 + C3823 * C892 +
             C3833 * C887 - C3834 * C878 - C3833 * C888 + C49169 * C893) *
                C49043) *
               C48944 * C49200 -
           ((C5339 + C5338 + C5337 + C5336) * C49043 +
            (C3833 * C138 - C3834 * C127 - C3833 * C139 + C49169 * C148 +
             C3831 * C136 - C3832 * C126 - C3831 * C137 + C3823 * C147 +
             C3829 * C134 - C3830 * C125 - C3829 * C135 + C3822 * C146 +
             C3827 * C132 - C3828 * C124 - C3827 * C133 + C3821 * C145) *
                C49171) *
               C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C48909 * C453 +
          ((((C13068 + C13069) * C49171 +
             (C47973 * C881 - C11356 * C875 - C47973 * C882 + C49148 * C890 +
              C47954 * C883 - C11358 * C876 - C47954 * C884 + C48848 * C891) *
                 C49043) *
                C7823 +
            ((C12844 + C12845) * C49171 +
             (C47973 * C2326 - C11356 * C2319 - C47973 * C2327 +
              C49148 * C2337 + C47954 * C2328 - C11358 * C2320 -
              C47954 * C2329 + C48848 * C2338) *
                 C49043) *
                C7824 +
            ((C12846 + C12847) * C49171 +
             (C47973 * C2332 - C11356 * C2322 - C47973 * C2333 +
              C49148 * C2340 + C47954 * C2334 - C11358 * C2323 -
              C47954 * C2335 + C48848 * C2341) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12847 + C12846) * C49043 + (C11571 + C11570) * C49171) * C49203 +
            ((C12845 + C12844) * C49043 + (C11569 + C11568) * C49171) * C7824 +
            ((C13069 + C13068) * C49043 +
             (C47954 * C134 - C11358 * C125 - C47954 * C135 + C48848 * C146 +
              C47973 * C132 - C11356 * C124 - C47973 * C133 + C49148 * C145) *
                 C49171) *
                C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
             C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
             C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
             C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
                C49171 +
            (C5332 + C5333 + C5334 + C5335) * C49043) *
               C48944 * C725 -
           ((C3833 * C885 - C3834 * C877 - C3833 * C886 + C49169 * C892 +
             C3831 * C883 - C3832 * C876 - C3831 * C884 + C3823 * C891 +
             C3829 * C881 - C3830 * C875 - C3829 * C882 + C3822 * C890 +
             C3827 * C879 - C3828 * C874 - C3827 * C880 + C3821 * C889) *
                C49043 +
            (C5335 + C5334 + C5333 + C5332) * C49171) *
               C48944 * C49200) *
              C233 +
          (((C4565 + C4564 + C4563 + C4562) * C49171 +
            (C3827 * C2324 - C3828 * C2318 - C3827 * C2325 + C3821 * C2336 +
             C3829 * C2326 - C3830 * C2319 - C3829 * C2327 + C3822 * C2337 +
             C3831 * C2328 - C3832 * C2320 - C3831 * C2329 + C3823 * C2338 +
             C3833 * C2602 - C3834 * C2601 - C3833 * C2603 + C49169 * C2604) *
                C49043) *
               C48944 * C49200 -
           ((C4562 + C4563 + C4564 + C4565) * C49043 +
            (C4017 + C4016 + C4015 + C4014) * C49171) *
               C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
              C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                 C49171 +
             (C13066 + C13067) * C49043) *
                C7823 +
            ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
            C13413 * C49203) *
               C725 -
           (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
            ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
            ((C47954 * C881 - C11358 * C875 - C47954 * C882 + C48848 * C890 +
              C47973 * C879 - C11356 * C874 - C47973 * C880 + C49148 * C889) *
                 C49043 +
             (C13067 + C13066) * C49171) *
                C7823) *
               C49200) *
              C233 +
          (((C13608 * C49171 + (C13638 + C13637) * C49043) * C7823 +
            (C13411 * C49171 + (C13636 + C13635) * C49043) * C7824 +
            ((C12117 + C12116) * C49171 +
             (C47973 * C9894 - C11356 * C9892 - C47973 * C9895 +
              C49148 * C9898 + C47954 * C10157 - C11358 * C10156 -
              C47954 * C10158 + C48848 * C10159) *
                 C49043) *
                C49203) *
               C49200 -
           (((C12116 + C12117) * C49043 + (C11567 + C11566) * C49171) * C49203 +
            (C13617 * C49043 + (C11565 + C11564) * C49171) * C7824 +
            (C13626 * C49043 + (C11563 + C11562) * C49171) * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3827 * C130 - C3828 * C123 - C3827 * C131 + C3821 * C144 +
            C3829 * C132 - C3830 * C124 - C3829 * C133 + C3822 * C145 +
            C3831 * C134 - C3832 * C125 - C3831 * C135 + C3823 * C146 +
            C3833 * C136 - C3834 * C126 - C3833 * C137 + C49169 * C147) *
               C49171 +
           (C5332 + C5333 + C5334 + C5335) * C49043) *
              C48944 * C871 -
          ((C6080 + C6081 + C6082 + C6083) * C49043 +
           (C5335 + C5334 + C5333 + C5332) * C49171) *
              C48944 * C872 +
          ((C6083 + C6082 + C6081 + C6080) * C49171 +
           (C3827 * C2759 - C3828 * C2753 - C3827 * C2760 + C3821 * C2765 +
            C3829 * C2757 - C3830 * C2752 - C3829 * C2758 + C3822 * C2764 +
            C3831 * C2755 - C3832 * C2751 - C3831 * C2756 + C3823 * C2763 +
            C3833 * C2761 - C3834 * C2754 - C3833 * C2762 + C49169 * C2766) *
               C49043) *
              C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C47973 * C130 - C11356 * C123 - C47973 * C131 + C49148 * C144 +
             C47954 * C132 - C11358 * C124 - C47954 * C133 + C48848 * C145) *
                C49171 +
            (C13066 + C13067) * C49043) *
               C7823 +
           ((C11562 + C11563) * C49171 + C13608 * C49043) * C7824 +
           C13413 * C49203) *
              C871 -
          (((C13635 + C13636) * C49043 + C13617 * C49171) * C49203 +
           ((C13637 + C13638) * C49043 + C13626 * C49171) * C7824 +
           ((C14185 + C14186) * C49043 + (C13067 + C13066) * C49171) * C7823) *
              C872 +
          (((C14186 + C14185) * C49171 +
            (C47973 * C2759 - C11356 * C2753 - C47973 * C2760 + C49148 * C2765 +
             C47954 * C2757 - C11358 * C2752 - C47954 * C2758 +
             C48848 * C2764) *
                C49043) *
               C7823 +
           ((C13638 + C13637) * C49171 +
            (C47973 * C3256 - C11356 * C3253 - C47973 * C3257 + C49148 * C3262 +
             C47954 * C3258 - C11358 * C3254 - C47954 * C3259 +
             C48848 * C3263) *
                C49043) *
               C7824 +
           ((C13636 + C13635) * C49171 +
            (C47973 * C10362 - C11356 * C10360 - C47973 * C10363 +
             C49148 * C10366 + C47954 * C10364 - C11358 * C10361 -
             C47954 * C10365 + C48848 * C10367) *
                C49043) *
               C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C48909 * C110 -
          (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 + C119 * C138 -
           C120 * C127 - C119 * C139 + C104 * C148 + C117 * C136 - C118 * C126 -
           C117 * C137 + C103 * C147 + C115 * C134 - C116 * C125 - C115 * C135 +
           C102 * C146 + C113 * C132 - C114 * C124 - C113 * C133 +
           C101 * C145) *
              C48956 * C48944 * C48926 * C48909 * C111 +
          (C113 * C134 - C114 * C125 - C113 * C135 + C101 * C146 + C115 * C136 -
           C116 * C126 - C115 * C137 + C102 * C147 + C117 * C138 - C118 * C127 -
           C117 * C139 + C103 * C148 + C119 * C140 - C120 * C128 - C119 * C141 +
           C104 * C149 + C121 * C142 - C122 * C129 - C121 * C143 +
           C105 * C150) *
              C48956 * C48944 * C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1010 * C251 - C1011 * C241 - C1010 * C252 + C1004 * C259 +
            C1012 * C249 - C1013 * C240 - C1012 * C250 + C1005 * C258 +
            C1014 * C247 - C1015 * C239 - C1014 * C248 + C49192 * C257) *
               C48956 * C49223 +
           (C1010 * C526 - C1011 * C521 - C1010 * C527 + C1004 * C536 +
            C1012 * C528 - C1013 * C522 - C1012 * C529 + C1005 * C537 +
            C1014 * C530 - C1015 * C523 - C1014 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C1014 * C532 - C1015 * C524 - C1014 * C533 + C49192 * C539 +
            C1012 * C530 - C1013 * C523 - C1012 * C531 + C1005 * C538 +
            C1010 * C528 - C1011 * C522 - C1010 * C529 + C1004 * C537) *
               C48956 * C49203 +
           (C1014 * C245 - C1015 * C238 - C1014 * C246 + C49192 * C256 +
            C1012 * C247 - C1013 * C239 - C1012 * C248 + C1005 * C257 +
            C1010 * C249 - C1011 * C240 - C1010 * C250 + C1004 * C258) *
               C48956 * C49223 +
           (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
            C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
            C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
               C48956 * C49235) *
              C48926 * C48909 * C111 +
          ((C1010 * C134 - C1011 * C125 - C1010 * C135 + C1004 * C146 +
            C1012 * C136 - C1013 * C126 - C1012 * C137 + C1005 * C147 +
            C1014 * C138 - C1015 * C127 - C1014 * C139 + C49192 * C148) *
               C48956 * C49235 +
           (C1010 * C247 - C1011 * C239 - C1010 * C248 + C1004 * C257 +
            C1012 * C245 - C1013 * C238 - C1012 * C246 + C1005 * C256 +
            C1014 * C243 - C1015 * C237 - C1014 * C244 + C49192 * C255) *
               C48956 * C49223 +
           (C1010 * C530 - C1011 * C523 - C1010 * C531 + C1004 * C538 +
            C1012 * C532 - C1013 * C524 - C1012 * C533 + C1005 * C539 +
            C1014 * C534 - C1015 * C525 - C1014 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C7826 * C251 - C7827 * C241 - C7826 * C252 + C49232 * C259 +
            C7828 * C249 - C7829 * C240 - C7828 * C250 + C49219 * C258 +
            C7830 * C247 - C7831 * C239 - C7830 * C248 + C49192 * C257) *
               C48956 * C7824 +
           (C7826 * C526 - C7827 * C521 - C7826 * C527 + C49232 * C536 +
            C7828 * C528 - C7829 * C522 - C7828 * C529 + C49219 * C537 +
            C7830 * C530 - C7831 * C523 - C7830 * C531 + C49192 * C538) *
               C48956 * C49203) *
              C48926 * C48909 * C110 -
          ((C7830 * C532 - C7831 * C524 - C7830 * C533 + C49192 * C539 +
            C7828 * C530 - C7829 * C523 - C7828 * C531 + C49219 * C538 +
            C7826 * C528 - C7827 * C522 - C7826 * C529 + C49232 * C537) *
               C48956 * C49203 +
           (C7830 * C245 - C7831 * C238 - C7830 * C246 + C49192 * C256 +
            C7828 * C247 - C7829 * C239 - C7828 * C248 + C49219 * C257 +
            C7826 * C249 - C7827 * C240 - C7826 * C250 + C49232 * C258) *
               C48956 * C7824 +
           (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
            C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
            C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
               C48956 * C7823) *
              C48926 * C48909 * C111 +
          ((C7826 * C134 - C7827 * C125 - C7826 * C135 + C49232 * C146 +
            C7828 * C136 - C7829 * C126 - C7828 * C137 + C49219 * C147 +
            C7830 * C138 - C7831 * C127 - C7830 * C139 + C49192 * C148) *
               C48956 * C7823 +
           (C7826 * C247 - C7827 * C239 - C7826 * C248 + C49232 * C257 +
            C7828 * C245 - C7829 * C238 - C7828 * C246 + C49219 * C256 +
            C7830 * C243 - C7831 * C237 - C7830 * C244 + C49192 * C255) *
               C48956 * C7824 +
           (C7826 * C530 - C7827 * C523 - C7826 * C531 + C49232 * C538 +
            C7828 * C532 - C7829 * C524 - C7828 * C533 + C49219 * C539 +
            C7830 * C534 - C7831 * C525 - C7830 * C535 + C49192 * C540) *
               C48956 * C49203) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           (C9146 * C251 - C9147 * C241 - C9146 * C252 + C48838 * C259) *
               C48956 * C9142 +
           (C9146 * C526 - C9147 * C521 - C9146 * C527 + C48838 * C536) *
               C48956 * C9143 +
           (C9146 * C1170 - C9147 * C1164 - C9146 * C1171 + C48838 * C1176) *
               C48956 * C9144 +
           (C9146 * C1683 - C9147 * C1680 - C9146 * C1684 + C48838 * C1689) *
               C48956 * C9145) *
              C48926 * C48909 * C110 -
          ((C9146 * C1685 - C9147 * C1681 - C9146 * C1686 + C48838 * C1690) *
               C48956 * C9145 +
           (C9146 * C1168 - C9147 * C1163 - C9146 * C1169 + C48838 * C1175) *
               C48956 * C9144 +
           (C9146 * C528 - C9147 * C522 - C9146 * C529 + C48838 * C537) *
               C48956 * C9143 +
           (C9146 * C249 - C9147 * C240 - C9146 * C250 + C48838 * C258) *
               C48956 * C9142 +
           (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
               C48956 * C9141) *
              C48926 * C48909 * C111 +
          ((C9146 * C134 - C9147 * C125 - C9146 * C135 + C48838 * C146) *
               C48956 * C9141 +
           (C9146 * C247 - C9147 * C239 - C9146 * C248 + C48838 * C257) *
               C48956 * C9142 +
           (C9146 * C530 - C9147 * C523 - C9146 * C531 + C48838 * C538) *
               C48956 * C9143 +
           (C9146 * C1166 - C9147 * C1162 - C9146 * C1167 + C48838 * C1174) *
               C48956 * C9144 +
           (C9146 * C1687 - C9147 * C1682 - C9146 * C1688 + C48838 * C1691) *
               C48956 * C9145) *
              C48926 * C48909 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C233 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C235 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C233 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C235 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C233 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C235 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C233 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C235 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C233) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C235 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C343 -
           ((C1014 * C1412 - C1015 * C1408 - C1014 * C1413 + C49192 * C1420 +
             C1012 * C1414 - C1013 * C1409 - C1012 * C1415 + C1005 * C1421 +
             C1010 * C1416 - C1011 * C1410 - C1010 * C1417 + C1004 * C1422) *
                C48956 * C49203 +
            (C1014 * C632 - C1015 * C625 - C1014 * C633 + C49192 * C640 +
             C1012 * C630 - C1013 * C624 - C1012 * C631 + C1005 * C639 +
             C1010 * C628 - C1011 * C623 - C1010 * C629 + C1004 * C638) *
                C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C235 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C343 -
           ((C7830 * C1412 - C7831 * C1408 - C7830 * C1413 + C49192 * C1420 +
             C7828 * C1414 - C7829 * C1409 - C7828 * C1415 + C49219 * C1421 +
             C7826 * C1416 - C7827 * C1410 - C7826 * C1417 + C49232 * C1422) *
                C48956 * C49203 +
            (C7830 * C632 - C7831 * C625 - C7830 * C633 + C49192 * C640 +
             C7828 * C630 - C7829 * C624 - C7828 * C631 + C49219 * C639 +
             C7826 * C628 - C7827 * C623 - C7826 * C629 + C49232 * C638) *
                C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C235 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           ((C9146 * C9386 - C9147 * C9384 - C9146 * C9387 + C48838 * C9390) *
                C48956 * C9145 +
            (C9146 * C1865 - C9147 * C1862 - C9146 * C1866 + C48838 * C1871) *
                C48956 * C9144 +
            (C9146 * C1416 - C9147 * C1410 - C9146 * C1417 + C48838 * C1422) *
                C48956 * C9143 +
            (C9146 * C628 - C9147 * C623 - C9146 * C629 + C48838 * C638) *
                C48956 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C235 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C343) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C48926 * C451 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C48926 * C49198) *
              C453 +
          ((C113 * C249 - C114 * C240 - C113 * C250 + C101 * C258 +
            C115 * C247 - C116 * C239 - C115 * C248 + C102 * C257 +
            C117 * C245 - C118 * C238 - C117 * C246 + C103 * C256 +
            C119 * C243 - C120 * C237 - C119 * C244 + C104 * C255 +
            C121 * C253 - C122 * C242 - C121 * C254 + C105 * C260) *
               C48956 * C48944 * C48926 * C49198 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 +
            (C1254 + C1255 + C1256) * C48956 * C49203) *
               C48926 * C451 -
           ((C1014 * C1166 - C1015 * C1162 - C1014 * C1167 + C49192 * C1174 +
             C1012 * C1168 - C1013 * C1163 - C1012 * C1169 + C1005 * C1175 +
             C1010 * C1170 - C1011 * C1164 - C1010 * C1171 + C1004 * C1176) *
                C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C48926 * C49198) *
              C453 +
          (((C1257 + C1258 + C1259) * C48956 * C49235 +
            (C1260 + C1261 + C1262) * C48956 * C49223 +
            (C1010 * C1168 - C1011 * C1163 - C1010 * C1169 + C1004 * C1175 +
             C1012 * C1166 - C1013 * C1162 - C1012 * C1167 + C1005 * C1174 +
             C1014 * C1172 - C1015 * C1165 - C1014 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 +
            (C8054 + C8055 + C8056) * C48956 * C49203) *
               C48926 * C451 -
           ((C7830 * C1166 - C7831 * C1162 - C7830 * C1167 + C49192 * C1174 +
             C7828 * C1168 - C7829 * C1163 - C7828 * C1169 + C49219 * C1175 +
             C7826 * C1170 - C7827 * C1164 - C7826 * C1171 + C49232 * C1176) *
                C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C48926 * C49198) *
              C453 +
          (((C8057 + C8058 + C8059) * C48956 * C7823 +
            (C8060 + C8061 + C8062) * C48956 * C7824 +
            (C7826 * C1168 - C7827 * C1163 - C7826 * C1169 + C49232 * C1175 +
             C7828 * C1166 - C7829 * C1162 - C7828 * C1167 + C49219 * C1174 +
             C7830 * C1172 - C7831 * C1165 - C7830 * C1173 + C49192 * C1177) *
                C48956 * C49203) *
               C48926 * C49198 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C48926 * C451 -
           ((C9146 * C9232 - C9147 * C9230 - C9146 * C9233 + C48838 * C9236) *
                C48956 * C9145 +
            C9298 * C9144 + C9297 * C9143 + C9296 * C9142 + C9295 * C9141) *
               C48926 * C49198) *
              C453 +
          ((C9299 * C9141 + C9300 * C9142 + C9301 * C9143 + C9302 * C9144 +
            (C9146 * C9234 - C9147 * C9231 - C9146 * C9235 + C48838 * C9237) *
                C48956 * C9145) *
               C48926 * C49198 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C48926 * C451) *
              C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C48926 * C517 -
          (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 + C119 * C245 -
           C120 * C238 - C119 * C246 + C104 * C256 + C117 * C247 - C118 * C239 -
           C117 * C248 + C103 * C257 + C115 * C249 - C116 * C240 - C115 * C250 +
           C102 * C258 + C113 * C251 - C114 * C241 - C113 * C252 +
           C101 * C259) *
              C48956 * C48944 * C48926 * C518 +
          (C113 * C526 - C114 * C521 - C113 * C527 + C101 * C536 + C115 * C528 -
           C116 * C522 - C115 * C529 + C102 * C537 + C117 * C530 - C118 * C523 -
           C117 * C531 + C103 * C538 + C119 * C532 - C120 * C524 - C119 * C533 +
           C104 * C539 + C121 * C534 - C122 * C525 - C121 * C535 +
           C105 * C540) *
              C48956 * C48944 * C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C48926 * C517 -
          ((C1714 + C1715 + C1716) * C48956 * C49203 +
           (C1256 + C1255 + C1254) * C48956 * C49223 +
           (C1253 + C1252 + C1251) * C48956 * C49235) *
              C48926 * C518 +
          (C1710 * C49235 + (C1716 + C1715 + C1714) * C48956 * C49223 +
           (C1010 * C1683 - C1011 * C1680 - C1010 * C1684 + C1004 * C1689 +
            C1012 * C1685 - C1013 * C1681 - C1012 * C1686 + C1005 * C1690 +
            C1014 * C1687 - C1015 * C1682 - C1014 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C48926 * C517 -
          ((C8486 + C8487 + C8488) * C48956 * C49203 +
           (C8056 + C8055 + C8054) * C48956 * C7824 +
           (C8053 + C8052 + C8051) * C48956 * C7823) *
              C48926 * C518 +
          (C8482 * C7823 + (C8488 + C8487 + C8486) * C48956 * C7824 +
           (C7826 * C1683 - C7827 * C1680 - C7826 * C1684 + C49232 * C1689 +
            C7828 * C1685 - C7829 * C1681 - C7828 * C1686 + C49219 * C1690 +
            C7830 * C1687 - C7831 * C1682 - C7830 * C1688 + C49192 * C1691) *
               C48956 * C49203) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C48926 * C517 -
          (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
           C9295 * C9141) *
              C48926 * C518 +
          (C9296 * C9141 + C9297 * C9142 + C9298 * C9143 + C9548 * C9144 +
           (C9146 * C9537 - C9147 * C9536 - C9146 * C9538 + C48838 * C9539) *
               C48956 * C9145) *
              C48926 * C519) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C343 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C451 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C343 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C451 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C343 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C451 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C343 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C451 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C343) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C48909 * C453 +
          ((C113 * C357 - C114 * C348 - C113 * C358 + C101 * C366 +
            C115 * C355 - C116 * C347 - C115 * C356 + C102 * C365 +
            C117 * C353 - C118 * C346 - C117 * C354 + C103 * C364 +
            C119 * C351 - C120 * C345 - C119 * C352 + C104 * C363 +
            C121 * C361 - C122 * C350 - C121 * C362 + C105 * C368) *
               C48956 * C48944 * C49200 -
           (C121 * C140 - C122 * C128 - C121 * C141 + C105 * C149 +
            C119 * C138 - C120 * C127 - C119 * C139 + C104 * C148 +
            C117 * C136 - C118 * C126 - C117 * C137 + C103 * C147 +
            C115 * C134 - C116 * C125 - C115 * C135 + C102 * C146 +
            C113 * C132 - C114 * C124 - C113 * C133 + C101 * C145) *
               C48956 * C48944 * C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C48909 * C453 +
          (((C1010 * C357 - C1011 * C348 - C1010 * C358 + C1004 * C366 +
             C1012 * C355 - C1013 * C347 - C1012 * C356 + C1005 * C365 +
             C1014 * C353 - C1015 * C346 - C1014 * C354 + C49192 * C364) *
                C48956 * C49235 +
            (C1010 * C630 - C1011 * C624 - C1010 * C631 + C1004 * C639 +
             C1012 * C632 - C1013 * C625 - C1012 * C633 + C1005 * C640 +
             C1014 * C634 - C1015 * C626 - C1014 * C635 + C49192 * C641) *
                C48956 * C49223 +
            (C1010 * C1414 - C1011 * C1409 - C1010 * C1415 + C1004 * C1421 +
             C1012 * C1412 - C1013 * C1408 - C1012 * C1413 + C1005 * C1420 +
             C1014 * C1418 - C1015 * C1411 - C1014 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C1262 + C1261 + C1260) * C48956 * C49203 +
            (C1259 + C1258 + C1257) * C48956 * C49223 +
            (C1014 * C136 - C1015 * C126 - C1014 * C137 + C49192 * C147 +
             C1012 * C134 - C1013 * C125 - C1012 * C135 + C1005 * C146 +
             C1010 * C132 - C1011 * C124 - C1010 * C133 + C1004 * C145) *
                C48956 * C49235) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C48909 * C453 +
          (((C7826 * C357 - C7827 * C348 - C7826 * C358 + C49232 * C366 +
             C7828 * C355 - C7829 * C347 - C7828 * C356 + C49219 * C365 +
             C7830 * C353 - C7831 * C346 - C7830 * C354 + C49192 * C364) *
                C48956 * C7823 +
            (C7826 * C630 - C7827 * C624 - C7826 * C631 + C49232 * C639 +
             C7828 * C632 - C7829 * C625 - C7828 * C633 + C49219 * C640 +
             C7830 * C634 - C7831 * C626 - C7830 * C635 + C49192 * C641) *
                C48956 * C7824 +
            (C7826 * C1414 - C7827 * C1409 - C7826 * C1415 + C49232 * C1421 +
             C7828 * C1412 - C7829 * C1408 - C7828 * C1413 + C49219 * C1420 +
             C7830 * C1418 - C7831 * C1411 - C7830 * C1419 + C49192 * C1423) *
                C48956 * C49203) *
               C49200 -
           ((C8062 + C8061 + C8060) * C48956 * C49203 +
            (C8059 + C8058 + C8057) * C48956 * C7824 +
            (C7830 * C136 - C7831 * C126 - C7830 * C137 + C49192 * C147 +
             C7828 * C134 - C7829 * C125 - C7828 * C135 + C49219 * C146 +
             C7826 * C132 - C7827 * C124 - C7826 * C133 + C49232 * C145) *
                C48956 * C7823) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C48909 * C453 +
          (((C9146 * C357 - C9147 * C348 - C9146 * C358 + C48838 * C366) *
                C48956 * C9141 +
            (C9146 * C630 - C9147 * C624 - C9146 * C631 + C48838 * C639) *
                C48956 * C9142 +
            (C9146 * C1414 - C9147 * C1409 - C9146 * C1415 + C48838 * C1421) *
                C48956 * C9143 +
            (C9146 * C1867 - C9147 * C1863 - C9146 * C1868 + C48838 * C1872) *
                C48956 * C9144 +
            (C9146 * C9388 - C9147 * C9385 - C9146 * C9389 + C48838 * C9391) *
                C48956 * C9145) *
               C49200 -
           (C9302 * C9145 + C9301 * C9144 + C9300 * C9143 + C9299 * C9142 +
            (C9146 * C132 - C9147 * C124 - C9146 * C133 + C48838 * C145) *
                C48956 * C9141) *
               C725) *
              C48909 * C49196)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 +
            C115 * C132 - C116 * C124 - C115 * C133 + C102 * C145 +
            C117 * C134 - C118 * C125 - C117 * C135 + C103 * C146 +
            C119 * C136 - C120 * C126 - C119 * C137 + C104 * C147 +
            C121 * C138 - C122 * C127 - C121 * C139 + C105 * C148) *
               C48956 * C48944 * C725 -
           (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 +
            C119 * C353 - C120 * C346 - C119 * C354 + C104 * C364 +
            C117 * C355 - C118 * C347 - C117 * C356 + C103 * C365 +
            C115 * C357 - C116 * C348 - C115 * C358 + C102 * C366 +
            C113 * C359 - C114 * C349 - C113 * C360 + C101 * C367) *
               C48956 * C48944 * C49200) *
              C233 +
          ((C113 * C628 - C114 * C623 - C113 * C629 + C101 * C638 +
            C115 * C630 - C116 * C624 - C115 * C631 + C102 * C639 +
            C117 * C632 - C118 * C625 - C117 * C633 + C103 * C640 +
            C119 * C634 - C120 * C626 - C119 * C635 + C104 * C641 +
            C121 * C636 - C122 * C627 - C121 * C637 + C105 * C642) *
               C48956 * C48944 * C49200 -
           (C121 * C243 - C122 * C237 - C121 * C244 + C105 * C255 +
            C119 * C245 - C120 * C238 - C119 * C246 + C104 * C256 +
            C117 * C247 - C118 * C239 - C117 * C248 + C103 * C257 +
            C115 * C249 - C116 * C240 - C115 * C250 + C102 * C258 +
            C113 * C251 - C114 * C241 - C113 * C252 + C101 * C259) *
               C48956 * C48944 * C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
             C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
             C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
                C48956 * C49235 +
            (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
               C725 -
           ((C1911 + C1912 + C1913) * C48956 * C49203 +
            (C1914 + C1915 + C1916) * C48956 * C49223 +
            (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
             C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
             C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
                C48956 * C49235) *
               C49200) *
              C233 +
          (((C1916 + C1915 + C1914) * C48956 * C49235 +
            (C1913 + C1912 + C1911) * C48956 * C49223 +
            (C1010 * C1865 - C1011 * C1862 - C1010 * C1866 + C1004 * C1871 +
             C1012 * C1867 - C1013 * C1863 - C1012 * C1868 + C1005 * C1872 +
             C1014 * C1869 - C1015 * C1864 - C1014 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C1714 + C1715 + C1716) * C48956 * C49203 +
            (C1256 + C1255 + C1254) * C48956 * C49223 +
            (C1253 + C1252 + C1251) * C48956 * C49235) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
             C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
             C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
                C48956 * C7823 +
            (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
               C725 -
           ((C8671 + C8672 + C8673) * C48956 * C49203 +
            (C8674 + C8675 + C8676) * C48956 * C7824 +
            (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
             C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
             C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
                C48956 * C7823) *
               C49200) *
              C233 +
          (((C8676 + C8675 + C8674) * C48956 * C7823 +
            (C8673 + C8672 + C8671) * C48956 * C7824 +
            (C7826 * C1865 - C7827 * C1862 - C7826 * C1866 + C49232 * C1871 +
             C7828 * C1867 - C7829 * C1863 - C7828 * C1868 + C49219 * C1872 +
             C7830 * C1869 - C7831 * C1864 - C7830 * C1870 + C49192 * C1873) *
                C48956 * C49203) *
               C49200 -
           ((C8486 + C8487 + C8488) * C48956 * C49203 +
            (C8056 + C8055 + C8054) * C48956 * C7824 +
            (C8053 + C8052 + C8051) * C48956 * C7823) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
                C48956 * C9141 +
            C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
               C725 -
           (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
            (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
                C48956 * C9141) *
               C49200) *
              C233 +
          ((C9666 * C9141 + C9665 * C9142 + C9664 * C9143 + C9663 * C9144 +
            (C9146 * C9631 - C9147 * C9630 - C9146 * C9632 + C48838 * C9633) *
                C48956 * C9145) *
               C49200 -
           (C9548 * C9145 + C9298 * C9144 + C9297 * C9143 + C9296 * C9142 +
            C9295 * C9141) *
               C725) *
              C49198) *
         C48875) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C130 - C114 * C123 - C113 * C131 + C101 * C144 + C115 * C132 -
           C116 * C124 - C115 * C133 + C102 * C145 + C117 * C134 - C118 * C125 -
           C117 * C135 + C103 * C146 + C119 * C136 - C120 * C126 - C119 * C137 +
           C104 * C147 + C121 * C138 - C122 * C127 - C121 * C139 +
           C105 * C148) *
              C48956 * C48944 * C871 -
          (C121 * C351 - C122 * C345 - C121 * C352 + C105 * C363 + C119 * C353 -
           C120 * C346 - C119 * C354 + C104 * C364 + C117 * C355 - C118 * C347 -
           C117 * C356 + C103 * C365 + C115 * C357 - C116 * C348 - C115 * C358 +
           C102 * C366 + C113 * C359 - C114 * C349 - C113 * C360 +
           C101 * C367) *
              C48956 * C48944 * C872 +
          (C113 * C879 - C114 * C874 - C113 * C880 + C101 * C889 + C115 * C881 -
           C116 * C875 - C115 * C882 + C102 * C890 + C117 * C883 - C118 * C876 -
           C117 * C884 + C103 * C891 + C119 * C885 - C120 * C877 - C119 * C886 +
           C104 * C892 + C121 * C887 - C122 * C878 - C121 * C888 +
           C105 * C893) *
              C48956 * C48944 * C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1010 * C130 - C1011 * C123 - C1010 * C131 + C1004 * C144 +
            C1012 * C132 - C1013 * C124 - C1012 * C133 + C1005 * C145 +
            C1014 * C134 - C1015 * C125 - C1014 * C135 + C49192 * C146) *
               C48956 * C49235 +
           (C1251 + C1252 + C1253) * C48956 * C49223 + C1710 * C49203) *
              C871 -
          ((C1911 + C1912 + C1913) * C48956 * C49203 +
           (C1914 + C1915 + C1916) * C48956 * C49223 +
           (C1014 * C355 - C1015 * C347 - C1014 * C356 + C49192 * C365 +
            C1012 * C357 - C1013 * C348 - C1012 * C358 + C1005 * C366 +
            C1010 * C359 - C1011 * C349 - C1010 * C360 + C1004 * C367) *
               C48956 * C49235) *
              C872 +
          ((C1010 * C879 - C1011 * C874 - C1010 * C880 + C1004 * C889 +
            C1012 * C881 - C1013 * C875 - C1012 * C882 + C1005 * C890 +
            C1014 * C883 - C1015 * C876 - C1014 * C884 + C49192 * C891) *
               C48956 * C49235 +
           (C1010 * C2324 - C1011 * C2318 - C1010 * C2325 + C1004 * C2336 +
            C1012 * C2326 - C1013 * C2319 - C1012 * C2327 + C1005 * C2337 +
            C1014 * C2328 - C1015 * C2320 - C1014 * C2329 + C49192 * C2338) *
               C48956 * C49223 +
           (C1010 * C2330 - C1011 * C2321 - C1010 * C2331 + C1004 * C2339 +
            C1012 * C2332 - C1013 * C2322 - C1012 * C2333 + C1005 * C2340 +
            C1014 * C2334 - C1015 * C2323 - C1014 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7826 * C130 - C7827 * C123 - C7826 * C131 + C49232 * C144 +
            C7828 * C132 - C7829 * C124 - C7828 * C133 + C49219 * C145 +
            C7830 * C134 - C7831 * C125 - C7830 * C135 + C49192 * C146) *
               C48956 * C7823 +
           (C8051 + C8052 + C8053) * C48956 * C7824 + C8482 * C49203) *
              C871 -
          ((C8671 + C8672 + C8673) * C48956 * C49203 +
           (C8674 + C8675 + C8676) * C48956 * C7824 +
           (C7830 * C355 - C7831 * C347 - C7830 * C356 + C49192 * C365 +
            C7828 * C357 - C7829 * C348 - C7828 * C358 + C49219 * C366 +
            C7826 * C359 - C7827 * C349 - C7826 * C360 + C49232 * C367) *
               C48956 * C7823) *
              C872 +
          ((C7826 * C879 - C7827 * C874 - C7826 * C880 + C49232 * C889 +
            C7828 * C881 - C7829 * C875 - C7828 * C882 + C49219 * C890 +
            C7830 * C883 - C7831 * C876 - C7830 * C884 + C49192 * C891) *
               C48956 * C7823 +
           (C7826 * C2324 - C7827 * C2318 - C7826 * C2325 + C49232 * C2336 +
            C7828 * C2326 - C7829 * C2319 - C7828 * C2327 + C49219 * C2337 +
            C7830 * C2328 - C7831 * C2320 - C7830 * C2329 + C49192 * C2338) *
               C48956 * C7824 +
           (C7826 * C2330 - C7827 * C2321 - C7826 * C2331 + C49232 * C2339 +
            C7828 * C2332 - C7829 * C2322 - C7828 * C2333 + C49219 * C2340 +
            C7830 * C2334 - C7831 * C2323 - C7830 * C2335 + C49192 * C2341) *
               C48956 * C49203) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9146 * C130 - C9147 * C123 - C9146 * C131 + C48838 * C144) *
               C48956 * C9141 +
           C9295 * C9142 + C9296 * C9143 + C9297 * C9144 + C9298 * C9145) *
              C871 -
          (C9663 * C9145 + C9664 * C9144 + C9665 * C9143 + C9666 * C9142 +
           (C9146 * C359 - C9147 * C349 - C9146 * C360 + C48838 * C367) *
               C48956 * C9141) *
              C872 +
          ((C9146 * C879 - C9147 * C874 - C9146 * C880 + C48838 * C889) *
               C48956 * C9141 +
           (C9146 * C2324 - C9147 * C2318 - C9146 * C2325 + C48838 * C2336) *
               C48956 * C9142 +
           (C9146 * C2330 - C9147 * C2321 - C9146 * C2331 + C48838 * C2339) *
               C48956 * C9143 +
           (C9146 * C9894 - C9147 * C9892 - C9146 * C9895 + C48838 * C9898) *
               C48956 * C9144 +
           (C9146 * C9896 - C9147 * C9893 - C9146 * C9897 + C48838 * C9899) *
               C48956 * C9145) *
              C873) *
         C48909 * C48875) /
            (p * q * std::sqrt(p + q));
}
