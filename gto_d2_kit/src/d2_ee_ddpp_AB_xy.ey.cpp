/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47184 = 0 * ae;
    const double C47183 = ae * be;
    const double C47182 = 0 * be;
    const double C47181 = 0 * be;
    const double C47180 = ae + be;
    const double C47179 = 0 * be;
    const double C47178 = xA - xB;
    const double C47239 = 0 * be;
    const double C47257 = 0 * be;
    const double C47256 = yA - yB;
    const double C47313 = 0 * ae;
    const double C47308 = 0 * be;
    const double C47307 = 0 * be;
    const double C47358 = 0 * be;
    const double C47424 = xP - xQ;
    const double C47423 = yP - yQ;
    const double C47422 = p + q;
    const double C47421 = p * q;
    const double C47429 = bs[3];
    const double C47439 = bs[4];
    const double C47448 = bs[5];
    const double C47462 = bs[6];
    const double C47484 = bs[7];
    const double C47638 = zP - zQ;
    const double C47734 = bs[2];
    const double C119 = bs[0];
    const double C48132 = ce + de;
    const double C48131 = ce * de;
    const double C48130 = xC - xD;
    const double C48145 = yC - yD;
    const double C48154 = zC - zD;
    const double C48212 = zA - zB;
    const double C47191 = C47184 / C47180;
    const double C47188 = C47182 / C47180;
    const double C47186 = 2 * C47180;
    const double C47185 = std::pow(C47180, 2);
    const double C47190 = C47183 * C47178;
    const double C47189 = C47178 * C47182;
    const double C47187 = C47178 * C47181;
    const double C48098 = C47178 * be;
    const double C48097 = C47178 * ae;
    const double C48096 = std::pow(C47178, 2);
    const double C47240 = C47239 / C47180;
    const double C47309 = C47257 / C47180;
    const double C47258 = C47183 * C47256;
    const double C47310 = C47256 * C47257;
    const double C48195 = std::pow(C47256, 2);
    const double C48254 = C47256 * be;
    const double C48252 = C47256 * ae;
    const double C47320 = C47313 / C47180;
    const double C47315 = C47256 * C47308;
    const double C47359 = C47358 / C47180;
    const double C47449 = std::pow(C47424, 2);
    const double C47509 = C47424 * ae;
    const double C47431 = C47423 * be;
    const double C47430 = C47424 * C47423;
    const double C47609 = std::pow(C47423, 2);
    const double C47425 = 2 * C47421;
    const double C47646 = std::pow(C47638, 2);
    const double C48142 = 2 * C48132;
    const double C48451 = std::pow(C48132, 2);
    const double C48133 = std::pow(C48130, 2);
    const double C48450 = C48130 * de;
    const double C48449 = C48130 * ce;
    const double C48167 = std::pow(C48145, 2);
    const double C48455 = C48145 * de;
    const double C48453 = C48145 * ce;
    const double C48184 = std::pow(C48154, 2);
    const double C48456 = C48154 * de;
    const double C48454 = C48154 * ce;
    const double C48213 = std::pow(C48212, 2);
    const double C48296 = C48212 * be;
    const double C48294 = C48212 * ae;
    const double C48110 = std::pow(C47186, -1);
    const double C48444 = std::pow(C47186, -2);
    const double C47192 = 2 * C47185;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * ae * be) /
                        C47185;
    const double C48448 = C47185 * C47186;
    const double C48447 = 4 * C47185;
    const double C47194 = C47189 / C47180;
    const double C47193 = C47187 / C47180;
    const double C48437 = std::pow(C48097, 2);
    const double C48099 = C48096 * C47183;
    const double C47318 = C47310 / C47180;
    const double C48196 = C48195 * C47183;
    const double C48457 = std::pow(C48252, 2);
    const double C47321 = C47315 / C47180;
    const double C47512 = C47439 * C47509;
    const double C47516 = C47448 * C47509;
    const double C47526 = C47462 * C47509;
    const double C47549 = C47429 * C47509;
    const double C47569 = C47484 * C47509;
    const double C47434 = C47429 * C47431;
    const double C47441 = C47439 * C47431;
    const double C47451 = C47448 * C47431;
    const double C47466 = C47462 * C47431;
    const double C47490 = C47484 * C47431;
    const double C47433 = C47430 * ae;
    const double C47426 = C47425 / C47422;
    const double C126 = (-(bs[1] * C47431 * C47425) / C47422) / C47180;
    const double C127 = (-(bs[1] * C47509 * C47425) / C47422) / C47180;
    const double C120 = -(C47424 * bs[1] * C47425) / C47422;
    const double C259 = -(C47423 * bs[1] * C47425) / C47422;
    const double C383 = -(C47638 * bs[1] * C47425) / C47422;
    const double C48452 = std::pow(C48142, -1);
    const double C48486 = 2 * C48451;
    const double C48134 = C48133 * C48131;
    const double C48168 = C48167 * C48131;
    const double C48185 = C48184 * C48131;
    const double C48214 = C48213 * C47183;
    const double C48459 = std::pow(C48294, 2);
    const double C47201 = C47182 / C47192;
    const double C47198 = C47181 / C47192;
    const double C47197 = C47179 / C47192;
    const double C47312 = C47257 / C47192;
    const double C47317 = C47308 / C47192;
    const double C47316 = C47307 / C47192;
    const double C48484 = 4 * C48448;
    const double C48483 = C47180 * C48447;
    const double C47199 = 0 - C47194;
    const double C47196 = 0 - C47193;
    const double C48100 = C48099 / C47180;
    const double C47322 = 0 - C47318;
    const double C48197 = C48196 / C47180;
    const double C47325 = 0 - C47321;
    const double C47435 = C47433 * be;
    const double C47428 = -C47426;
    const double C47438 = std::pow(C47426, 4);
    const double C47461 = std::pow(C47426, 6);
    const double C141 =
        (ae * std::pow(C47426, 2) * bs[2] * C47423 * be +
         C47424 * std::pow(-C47426, 3) * bs[3] * C47424 * C47423 * ae * be) /
        C47185;
    const double C47733 = std::pow(C47426, 2);
    const double C128 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47431) / C47180;
    const double C129 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47509) / C47180 -
        (ae * bs[1] * C47425) / (C47422 * C47180);
    const double C48135 = C48134 / C48132;
    const double C48169 = C48168 / C48132;
    const double C48186 = C48185 / C48132;
    const double C48215 = C48214 / C47180;
    const double C47204 = C47199 * ae;
    const double C47203 = C47196 * ae;
    const double C48101 = -C48100;
    const double C47326 = C47322 * ae;
    const double C48198 = -C48197;
    const double C47329 = C47325 * ae;
    const double C47440 = C47439 * C47435;
    const double C47450 = C47448 * C47435;
    const double C47464 = C47462 * C47435;
    const double C47488 = C47484 * C47435;
    const double C47432 = std::pow(C47428, 3);
    const double C47447 = std::pow(C47428, 5);
    const double C47483 = std::pow(C47428, 7);
    const double C47443 = C47438 * C47441;
    const double C47513 = C47439 * C47438;
    const double C47514 = C47438 * C47512;
    const double C47469 = C47461 * C47466;
    const double C47529 = C47462 * C47461;
    const double C47530 = C47461 * C47526;
    const double C47735 = C47734 * C47733;
    const double C265 = (C47423 * C47733 * C47734 * C47431) / C47180 -
                        (be * bs[1] * C47425) / (C47422 * C47180);
    const double C266 = (C47423 * C47733 * C47734 * C47509) / C47180;
    const double C389 = (C47638 * C47733 * C47734 * C47431) / C47180;
    const double C390 = (C47638 * C47733 * C47734 * C47509) / C47180;
    const double C48136 = -C48135;
    const double C48170 = -C48169;
    const double C48187 = -C48186;
    const double C48216 = -C48215;
    const double C47208 = C47204 / C47180;
    const double C47207 = C47203 / C47180;
    const double C48102 = std::exp(C48101);
    const double C47330 = C47326 / C47180;
    const double C48199 = std::exp(C48198);
    const double C47333 = C47329 / C47180;
    const double C47442 = C47438 * C47440;
    const double C47468 = C47461 * C47464;
    const double C47436 = C47432 * C47434;
    const double C47510 = C47429 * C47432;
    const double C47550 = C47432 * C47549;
    const double C277 = (be * std::pow(C47426, 2) * bs[2] * C47424 * ae +
                         C47423 * C47432 * C47429 * C47435) /
                        C47185;
    const double C401 = ((zP - zQ) * C47432 * C47429 * C47435) / C47185;
    const double C47453 = C47447 * C47451;
    const double C47452 = C47447 * C47450;
    const double C47519 = C47448 * C47447;
    const double C47520 = C47447 * C47516;
    const double C47493 = C47483 * C47490;
    const double C47492 = C47483 * C47488;
    const double C47574 = C47483 * C47569;
    const double C47446 = ae * C47443;
    const double C47445 = C47424 * C47443;
    const double C47824 = C47423 * C47443;
    const double C47518 = C47424 * C47513;
    const double C47517 = C47513 * ae;
    const double C47741 = C47513 * C47449;
    const double C47827 = C47513 * C47609;
    const double C47890 = C47423 * C47513;
    const double C47889 = C47513 * be;
    const double C48077 = C47513 * C47646;
    const double C48086 = C47638 * C47513;
    const double C47552 = C47424 * C47514;
    const double C47607 = be * C47514;
    const double C47606 = C47423 * C47514;
    const double C47471 = C47469 * C47449;
    const double C47482 = ae * C47469;
    const double C47481 = C47424 * C47469;
    const double C47923 = C47423 * C47469;
    const double C47984 = C47469 * C47646;
    const double C47532 = C47529 * C47449;
    const double C47571 = C47424 * C47529;
    const double C47570 = C47529 * ae;
    const double C47927 = C47529 * C47609;
    const double C47534 = C47424 * C47530;
    const double C47653 = C47530 * C47609;
    const double C47683 = be * C47530;
    const double C47682 = C47423 * C47530;
    const double C47991 = C47530 * C47646;
    const double C121 = C47735 * C47449 - (bs[1] * C47425) / C47422;
    const double C260 = C47423 * C47424 * C47735;
    const double C384 = C47638 * C47424 * C47735;
    const double C575 = C47735 * C47609 - (bs[1] * C47425) / C47422;
    const double C677 = C47638 * C47423 * C47735;
    const double C928 = C47735 * C47646 - (bs[1] * C47425) / C47422;
    const double C48137 = std::exp(C48136);
    const double C48171 = std::exp(C48170);
    const double C48188 = std::exp(C48187);
    const double C48217 = std::exp(C48216);
    const double C47212 = C47208 - C47198;
    const double C47211 = C47207 - C47197;
    const double C47195 = C47190 * C48102;
    const double C48104 = C48102 * C48097;
    const double C48103 = C48102 / C47186;
    const double C48112 = C48110 * C48102;
    const double C48440 = C48102 * C48098;
    const double C48481 = C48444 * C48102;
    const double C48475 = C48102 * C48437;
    const double C47334 = C47330 - C47317;
    const double C150 = C48199 * C141;
    const double C148 = C48199 * C128;
    const double C2798 = C48199 * C389;
    const double C47259 = C47258 * C48199;
    const double C113 = -(2 * ae * be * (yA - yB) * C48199) / (ae + be);
    const double C48253 = C48199 / C47186;
    const double C48255 = C48199 * C48252;
    const double C48262 = C48110 * C48199;
    const double C48463 = C48199 * C48254;
    const double C48494 = C48444 * C48199;
    const double C48492 = C48199 * C48457;
    const double C47337 = C47333 - C47316;
    const double C943 =
        (C47432 * C47429 * C47435 + C47442 * std::pow(zP - zQ, 2)) / C47185;
    const double C47470 = C47424 * C47468;
    const double C47652 = C47423 * C47468;
    const double C47712 = C47468 * C47646;
    const double C47721 = C47638 * C47468;
    const double C142 = (C47432 * C47429 * C47435 + ae * C47424 * C47436 +
                         C47424 * (ae * C47436 + C47424 * std::pow(C47426, 4) *
                                                     bs[4] * C47435)) /
                        C47185;
    const double C143 =
        (2 * (ae * C47436 + C47424 * C47442) +
         ae * (C47436 + C47443 * std::pow(C47424, 2)) +
         C47424 * (C47442 + ae * C47424 * C47443 +
                   C47424 * (ae * C47443 +
                             C47424 * std::pow(C47428, 5) * bs[5] * C47435))) /
        C47185;
    const double C278 = (be * (C47424 * C47432 * C47429 * C47424 * ae +
                               bs[2] * std::pow(C47426, 2) * ae) +
                         C47423 * (ae * C47436 + C47424 * C47442)) /
                        C47185;
    const double C402 = ((zP - zQ) * (ae * C47436 + C47424 * C47442)) / C47185;
    const double C130 =
        (std::pow(C47426, 2) * bs[2] * C47431 + C47436 * C47449) / C47180;
    const double C132 =
        (2 * C47424 * C47436 + C47424 * (C47436 + C47443 * C47449)) / C47180;
    const double C267 =
        (C47423 * C47424 * C47436 + C47424 * C47735 * be) / C47180;
    const double C391 = (C47638 * C47424 * C47436) / C47180;
    const double C393 = (C47638 * (C47436 + C47443 * C47449)) / C47180;
    const double C580 =
        (C47733 * C47734 * C47431 + C47423 * (C47423 * C47436 + C47735 * be) +
         C47423 * C47735 * be) /
        C47180;
    const double C682 = (C47638 * (C47423 * C47436 + C47735 * be)) / C47180;
    const double C933 = (C47733 * C47734 * C47431 + C47436 * C47646) / C47180;
    const double C2785 =
        (2 * C47638 * C47436 + C47638 * (C47436 + C47443 * C47646)) / C47180;
    const double C47553 = C47510 * ae;
    const double C47740 = C47424 * C47510;
    const double C47826 = C47423 * C47510;
    const double C47825 = C47510 * be;
    const double C269 = (C47423 * (C47436 + C47443 * C47449) +
                         (C47735 + C47510 * C47449) * be) /
                        C47180;
    const double C1266 =
        (2 * (C47423 * C47436 + C47735 * be) +
         C47423 * (C47436 + C47423 * (C47423 * C47443 + C47510 * be) +
                   C47423 * C47510 * be) +
         (C47735 + C47510 * C47609) * be) /
        C47180;
    const double C1452 =
        (C47638 * (C47436 + C47423 * (C47423 * C47443 + C47510 * be) +
                   C47423 * C47510 * be)) /
        C47180;
    const double C122 =
        2 * C47424 * C47735 + C47424 * (C47735 + C47510 * C47449);
    const double C261 = C47423 * (C47735 + C47510 * C47449);
    const double C385 = C47638 * (C47735 + C47510 * C47449);
    const double C1262 =
        2 * C47423 * C47735 + C47423 * (C47735 + C47510 * C47609);
    const double C1448 = C47638 * (C47735 + C47510 * C47609);
    const double C2781 =
        2 * C47638 * C47735 + C47638 * (C47735 + C47510 * C47646);
    const double C3649 =
        3 * (C47735 + C47510 * C47646) +
        C47638 * (2 * C47638 * C47510 + C47638 * (C47510 + C47513 * C47646));
    const double C590 = (C47432 * C47429 * C47435 + be * C47423 * C47550 +
                         C47423 * (be * C47550 + C47423 * C47442)) /
                        C47185;
    const double C692 = ((zP - zQ) * (be * C47550 + C47423 * C47442)) / C47185;
    const double C131 =
        (C47733 * C47734 * C47509 + C47424 * (C47424 * C47550 + C47735 * ae) +
         C47424 * C47735 * ae) /
        C47180;
    const double C268 = (C47423 * (C47424 * C47550 + C47735 * ae)) / C47180;
    const double C392 = (C47638 * (C47424 * C47550 + C47735 * ae)) / C47180;
    const double C581 = (C47733 * C47734 * C47509 + C47550 * C47609) / C47180;
    const double C683 = (C47638 * C47423 * C47550) / C47180;
    const double C934 = (C47733 * C47734 * C47509 + C47550 * C47646) / C47180;
    const double C1267 =
        (2 * C47423 * C47550 + C47423 * (C47550 + C47514 * C47609)) / C47180;
    const double C1453 = (C47638 * (C47550 + C47514 * C47609)) / C47180;
    const double C2786 =
        (2 * C47638 * C47550 + C47638 * (C47550 + C47514 * C47646)) / C47180;
    const double C2800 = C48199 * C401;
    const double C47455 = C47453 * C47449;
    const double C47460 = ae * C47453;
    const double C47459 = C47424 * C47453;
    const double C47888 = C47423 * C47453;
    const double C47965 = C47453 * C47646;
    const double C47983 = C47638 * C47453;
    const double C3652 =
        (3 * (C47436 + C47443 * C47646) +
         C47638 * (2 * C47638 * C47443 + C47638 * (C47443 + C47453 * C47646))) /
        C47180;
    const double C47454 = C47424 * C47452;
    const double C47608 = C47423 * C47452;
    const double C1274 = (2 * (be * C47550 + C47423 * C47442) +
                          be * (C47550 + C47514 * std::pow(C47423, 2)) +
                          C47423 * (C47442 + be * C47423 * C47514 +
                                    C47423 * (be * C47514 + C47423 * C47452))) /
                         C47185;
    const double C1460 =
        ((zP - zQ) * (C47442 + be * C47423 * C47514 +
                      C47423 * (be * C47514 + C47423 * C47452))) /
        C47185;
    const double C2793 = (2 * C47638 * C47442 +
                          C47638 * (C47442 + C47452 * std::pow(C47638, 2))) /
                         C47185;
    const double C3658 =
        (3 * (C47442 + C47452 * C47646) +
         C47638 * (2 * C47638 * C47452 + C47638 * (C47452 + C47468 * C47646))) /
        C47185;
    const double C47521 = C47519 * C47449;
    const double C47528 = C47424 * C47519;
    const double C47527 = C47519 * ae;
    const double C47891 = C47519 * C47609;
    const double C47925 = C47423 * C47519;
    const double C47924 = C47519 * be;
    const double C48087 = C47519 * C47646;
    const double C47522 = C47424 * C47520;
    const double C47611 = C47520 * C47609;
    const double C47651 = be * C47520;
    const double C47650 = C47423 * C47520;
    const double C47968 = C47520 * C47646;
    const double C47990 = C47638 * C47520;
    const double C3653 =
        (3 * (C47550 + C47514 * C47646) +
         C47638 * (2 * C47638 * C47514 + C47638 * (C47514 + C47520 * C47646))) /
        C47180;
    const double C47495 = C47493 * C47449;
    const double C47494 = C47424 * C47492;
    const double C47684 = C47423 * C47492;
    const double C47722 = C47492 * C47646;
    const double C47576 = C47424 * C47574;
    const double C47686 = C47574 * C47609;
    const double C935 = (C47424 * C47436 + C47445 * C47646) / C47180;
    const double C47557 = C47518 * ae;
    const double C47745 = 2 * C47518;
    const double C47834 = C47423 * C47518;
    const double C47833 = C47518 * be;
    const double C47742 = C47510 + C47741;
    const double C47829 = C47510 + C47827;
    const double C47895 = 2 * C47890;
    const double C47893 = C47890 * be;
    const double C48078 = C47510 + C48077;
    const double C48088 = 2 * C48086;
    const double C2324 = (C47423 * C47550 + C47606 * C47646) / C47180;
    const double C47473 = C47453 + C47471;
    const double C47489 = 2 * C47481;
    const double C47487 = ae * C47481;
    const double C47903 = C47423 * C47481;
    const double C47971 = C47481 * C47646;
    const double C47986 = C47453 + C47984;
    const double C47535 = C47519 + C47532;
    const double C47575 = C47571 * ae;
    const double C47906 = C47571 * C47609;
    const double C47931 = C47519 + C47927;
    const double C47657 = C47520 + C47653;
    const double C47690 = 2 * C47682;
    const double C47688 = be * C47682;
    const double C47980 = C47682 * C47646;
    const double C47993 = C47520 + C47991;
    const double C48487 = C48452 * C48137;
    const double C48485 = C48137 * C48449;
    const double C257 = -(C48137 * C48450) / C48132;
    const double C48489 = C48452 * C48171;
    const double C48488 = C48171 * C48453;
    const double C505 = -(C48171 * C48455) / C48132;
    const double C48491 = C48452 * C48188;
    const double C48490 = C48188 * C48454;
    const double C779 = -(C48188 * C48456) / C48132;
    const double C48295 = C48217 / C47186;
    const double C48297 = C48217 * C48294;
    const double C48304 = C48110 * C48217;
    const double C48469 = C48217 * C48296;
    const double C48497 = C48444 * C48217;
    const double C48495 = C48217 * C48459;
    const double C47217 = C47212 / C47186;
    const double C47216 = C47178 * C47212;
    const double C47215 = C47211 + C47188;
    const double C47202 = C47195 / C47185;
    const double C47200 = 2 * C47195;
    const double C48105 = C48104 * C48098;
    const double C48111 = C48104 / C47192;
    const double C48441 = C48110 * C48104;
    const double C48439 = C48104 / C47180;
    const double C1061 = (C48102 * std::pow(C48098, 2)) / C47185 + C48103;
    const double C48113 = C48112 * C48098;
    const double C48445 = C48097 * C48112;
    const double C48443 = 2 * C48112;
    const double C48498 = C48112 / C48447;
    const double C106 = C48112 / C48484;
    const double C26147 = C48112 / C47186;
    const double C48477 = C48440 / C47180;
    const double C1062 = (-2 * C48110 * C48440) / C47180;
    const double C48511 = C48475 / C47185;
    const double C47339 = C47334 / C47186;
    const double C47338 = C47256 * C47334;
    const double C47286 = 2 * C47259;
    const double C47314 = C47259 / C47185;
    const double C1066 =
        ((0 * ae) / C47180 - C47259 / C47185) / C47186 + (0 * ae) / C47180;
    const double C3782 =
        ((C48199 - (C47256 * 2 * C47259) / C47180) * ae) / C47180 -
        C47257 / C47192;
    const double C3783 = (0 * ae) / C47180 - C47259 / C47185;
    const double C153 = C113 * C121;
    const double C151 = C113 * C129;
    const double C149 = C113 * C120;
    const double C284 = C113 * C260;
    const double C408 = C113 * C384;
    const double C2805 = C113 * C928;
    const double C2801 = C113 * C390;
    const double C2799 = C113 * C383;
    const double C3240 = C113 * C677;
    const double C7732 = (C48199 * std::pow(C48254, 2)) / C47185 + C48253;
    const double C48256 = C48255 * C48254;
    const double C48261 = C48255 / C47192;
    const double C48461 = C48255 / C47180;
    const double C48458 = C48110 * C48255;
    const double C1065 =
        (((C48199 - (C47256 * 2 * C47259) / C47180) * ae) / C47180 -
         C47257 / C47192) /
            C47186 +
        ((C47256 * ((0 * ae) / C47180 - C47259 / C47185) + C48262) * ae) /
            C47180;
    const double C48263 = C48262 * C48254;
    const double C48467 = C48252 * C48262;
    const double C48466 = 2 * C48262;
    const double C48504 = C48262 / C48447;
    const double C9000 = C48262 / C48484;
    const double C26144 = C48262 / C47186;
    const double C48500 = C48463 / C47180;
    const double C7733 = (-2 * C48110 * C48463) / C47180;
    const double C48516 = C48492 / C47185;
    const double C47343 = C47337 + C47309;
    const double C2806 = C48199 * C943;
    const double C47713 = C47452 + C47712;
    const double C47723 = 2 * C47721;
    const double C154 = C48199 * C142;
    const double C158 = C48199 * C143;
    const double C287 = C48199 * C278;
    const double C3795 = C48262 * C278;
    const double C22102 = C48262 * C278;
    const double C411 = C48199 * C402;
    const double C152 = C48199 * C130;
    const double C156 = C48199 * C132;
    const double C285 = C48199 * C267;
    const double C3791 = C48262 * C267;
    const double C22098 = C48262 * C267;
    const double C409 = C48199 * C391;
    const double C413 = C48199 * C393;
    const double C3241 = C48199 * C682;
    const double C6499 = C48262 * C682;
    const double C24882 = C48262 * C682;
    const double C2804 = C48199 * C933;
    const double C3669 = C48199 * C2785;
    const double C47554 = C47552 + C47553;
    const double C582 =
        (C47424 * C47436 + C47423 * (C47423 * C47445 + C47740 * be) +
         C47423 * C47740 * be) /
        C47180;
    const double C684 = (C47638 * (C47423 * C47445 + C47740 * be)) / C47180;
    const double C576 = C47424 * C47735 + C47740 * C47609;
    const double C678 = C47638 * C47423 * C47740;
    const double C929 = C47424 * C47735 + C47740 * C47646;
    const double C1263 =
        2 * C47423 * C47740 + C47423 * (C47740 + C47518 * C47609);
    const double C1449 = C47638 * (C47740 + C47518 * C47609);
    const double C2782 =
        2 * C47638 * C47740 + C47638 * (C47740 + C47518 * C47646);
    const double C2316 = C47423 * C47735 + C47826 * C47646;
    const double C3227 =
        2 * C47638 * C47826 + C47638 * (C47826 + C47890 * C47646);
    const double C47828 = C47824 + C47825;
    const double C289 = C48199 * C269;
    const double C3799 = C48262 * C269;
    const double C22106 = C48262 * C269;
    const double C7076 = C48262 * C1452;
    const double C10075 = C48494 * C1452;
    const double C16504 = C48494 * C1452;
    const double C25465 = C48262 * C1452;
    const double C157 = C113 * C122;
    const double C288 = C113 * C261;
    const double C412 = C113 * C385;
    const double C3668 = C113 * C2781;
    const double C17633 = C113 * C3649;
    const double C3243 = C48199 * C692;
    const double C6503 = C48262 * C692;
    const double C24886 = C48262 * C692;
    const double C155 = C113 * C131;
    const double C286 = C113 * C268;
    const double C410 = C113 * C392;
    const double C3242 = C113 * C683;
    const double C2807 = C113 * C934;
    const double C3670 = C113 * C2786;
    const double C47457 = C47443 + C47455;
    const double C47472 = C47460 + C47470;
    const double C47465 = 2 * C47459;
    const double C47463 = ae * C47459;
    const double C47832 = C47423 * C47459;
    const double C1268 =
        (2 * (C47423 * C47445 + C47740 * be) +
         C47423 * (C47445 + C47423 * (C47423 * C47459 + C47518 * be) +
                   C47423 * C47518 * be) +
         (C47740 + C47518 * C47609) * be) /
        C47180;
    const double C1454 =
        (C47638 * (C47445 + C47423 * (C47423 * C47459 + C47518 * be) +
                   C47423 * C47518 * be)) /
        C47180;
    const double C2787 =
        (2 * C47638 * C47445 + C47638 * (C47445 + C47459 * C47646)) / C47180;
    const double C3654 =
        (3 * (C47445 + C47459 * C47646) +
         C47638 * (2 * C47638 * C47459 + C47638 * (C47459 + C47481 * C47646))) /
        C47180;
    const double C47892 = C47888 + C47889;
    const double C47966 = C47443 + C47965;
    const double C47985 = 2 * C47983;
    const double C17632 = C48199 * C3652;
    const double C47456 = C47446 + C47454;
    const double C47610 = C47607 + C47608;
    const double C7080 = C48262 * C1460;
    const double C10081 = C48494 * C1460;
    const double C16510 = C48494 * C1460;
    const double C25469 = C48262 * C1460;
    const double C3671 = C48199 * C2793;
    const double C17634 = C48199 * C3658;
    const double C47523 = C47513 + C47521;
    const double C47533 = 2 * C47528;
    const double C47531 = C47528 * ae;
    const double C47835 = C47528 * C47609;
    const double C47905 = C47423 * C47528;
    const double C47904 = C47528 * be;
    const double C48080 = C47528 * C47646;
    const double C3650 =
        3 * (C47740 + C47518 * C47646) +
        C47638 * (2 * C47638 * C47518 + C47638 * (C47518 + C47528 * C47646));
    const double C47536 = C47534 + C47527;
    const double C47894 = C47513 + C47891;
    const double C47932 = 2 * C47925;
    const double C47930 = C47925 * be;
    const double C48083 = C47925 * C47646;
    const double C10938 =
        3 * (C47826 + C47890 * C47646) +
        C47638 * (2 * C47638 * C47890 + C47638 * (C47890 + C47925 * C47646));
    const double C47929 = C47923 + C47924;
    const double C48089 = C47513 + C48087;
    const double C47524 = C47522 + C47517;
    const double C47612 = C47514 + C47611;
    const double C47655 = C47651 + C47652;
    const double C47656 = 2 * C47650;
    const double C47654 = be * C47650;
    const double C3231 =
        (2 * C47638 * C47606 + C47638 * (C47606 + C47650 * C47646)) / C47180;
    const double C10942 =
        (3 * (C47606 + C47650 * C47646) +
         C47638 * (2 * C47638 * C47650 + C47638 * (C47650 + C47682 * C47646))) /
        C47180;
    const double C47969 = C47514 + C47968;
    const double C47992 = 2 * C47990;
    const double C17635 = C113 * C3653;
    const double C47497 = C47469 + C47495;
    const double C47496 = C47482 + C47494;
    const double C47689 = C47683 + C47684;
    const double C47724 = C47468 + C47722;
    const double C47577 = C47576 + C47570;
    const double C47691 = C47530 + C47686;
    const double C2456 = C48199 * C935;
    const double C2318 = C47423 * C47740 + C47834 * C47646;
    const double C123 = 3 * (C47735 + C47510 * C47449) +
                        C47424 * (2 * C47740 + C47424 * C47742);
    const double C262 = C47423 * (2 * C47740 + C47424 * C47742);
    const double C386 = C47638 * (2 * C47740 + C47424 * C47742);
    const double C577 = C47735 + C47510 * C47449 + C47742 * C47609;
    const double C679 = C47638 * C47423 * C47742;
    const double C930 = C47735 + C47510 * C47449 + C47742 * C47646;
    const double C1744 = 3 * (C47735 + C47510 * C47609) +
                         C47423 * (2 * C47826 + C47423 * C47829);
    const double C1902 = C47638 * (2 * C47826 + C47423 * C47829);
    const double C2317 = C47735 + C47510 * C47609 + C47829 * C47646;
    const double C17623 =
        4 * (2 * C47638 * C47510 + C47638 * C48078) +
        C47638 * (3 * C48078 + C47638 * (2 * C47638 * C47513 +
                                         C47638 * (C47513 + C47519 * C47646)));
    const double C3246 = C113 * C2324;
    const double C47475 = C47424 * C47473;
    const double C47485 = 3 * C47473;
    const double C47480 = ae * C47473;
    const double C47840 = C47423 * C47473;
    const double C47491 = C47468 + C47487;
    const double C47972 = C47459 + C47971;
    const double C47987 = C47638 * C47986;
    const double C47537 = C47424 * C47535;
    const double C47572 = C47535 * ae;
    const double C47843 = C47535 * C47609;
    const double C47909 = C47528 + C47906;
    const double C47934 = C47423 * C47931;
    const double C47660 = C47423 * C47657;
    const double C47685 = 3 * C47657;
    const double C47681 = be * C47657;
    const double C47692 = C47468 + C47688;
    const double C47981 = C47650 + C47980;
    const double C47994 = C47638 * C47993;
    const double C112 = C48487 / C48142;
    const double C110 = C48137 / C48142 - (C48485 * C48450) / C48451;
    const double C111 = C48485 / C48486 - (C48487 * C48450) / C48132;
    const double C507 = C48485 / C48132;
    const double C573 = C48489 / C48142;
    const double C255 = C48488 / C48132;
    const double C571 = C48171 / C48142 - (C48488 * C48455) / C48451;
    const double C572 = C48488 / C48486 - (C48489 * C48455) / C48132;
    const double C927 = C48491 / C48142;
    const double C381 = C48490 / C48132;
    const double C925 = C48188 / C48142 - (C48490 * C48456) / C48451;
    const double C926 = C48490 / C48486 - (C48491 * C48456) / C48132;
    const double C14987 = (C48217 * std::pow(C48296, 2)) / C47185 + C48295;
    const double C48298 = C48297 * C48296;
    const double C48303 = C48297 / C47192;
    const double C48462 = C48297 / C47180;
    const double C48460 = C48110 * C48297;
    const double C48305 = C48304 * C48296;
    const double C48473 = C48294 * C48304;
    const double C48472 = 2 * C48304;
    const double C48510 = C48304 / C48447;
    const double C17454 = C48304 / C48484;
    const double C36164 = C48304 / C47186;
    const double C48506 = C48469 / C47180;
    const double C14988 = (-2 * C48110 * C48469) / C47180;
    const double C48518 = C48495 / C47185;
    const double C47221 = C47216 + 0;
    const double C47220 = C47215 / C47186;
    const double C47206 = C47191 - C47202;
    const double C47205 = C47178 * C47200;
    const double C1069 =
        ((-C47200 / C47180) / C47186 - (0 * be) / C47180) / C47186 -
        (0 * be) / C47180;
    const double C9007 = -C47200 / C47180;
    const double C23272 = (-C47200 / C47180) / C47186 - (0 * be) / C47180;
    const double C48106 = C48105 / C47185;
    const double C48478 = 2 * C48441;
    const double C48114 = C48113 / C47180;
    const double C48482 = C48445 / C47192;
    const double C48512 = C48439 - C48477;
    const double C23265 = -C48477;
    const double C48526 = C48511 + C48103;
    const double C47344 = C47338 + 0;
    const double C47311 = C47256 * C47286;
    const double C7739 =
        ((-C47257 / C47180) / C47186 -
         ((C48199 - (C47256 * C47286) / C47180) * be) / C47180) /
            C47186 -
        ((C47256 * ((-C47286 / C47180) / C47186 - (0 * be) / C47180) + C48262) *
         be) /
            C47180;
    const double C7740 =
        ((-C47286 / C47180) / C47186 - (0 * be) / C47180) / C47186 -
        (0 * be) / C47180;
    const double C22090 = (-C47286 / C47180) / C47186 - (0 * be) / C47180;
    const double C47324 = C47320 - C47314;
    const double C16511 = C1066 * C1453;
    const double C16505 = C1066 * C1448;
    const double C3806 = C3782 * C122;
    const double C3802 = C3782 * C131;
    const double C3798 = C3782 * C121;
    const double C3794 = C3782 * C129;
    const double C3790 = C3782 * C120;
    const double C3971 = C3782 * C261;
    const double C3967 = C3782 * C268;
    const double C3963 = C3782 * C260;
    const double C4125 = C3782 * C385;
    const double C4121 = C3782 * C392;
    const double C4117 = C3782 * C384;
    const double C6502 = C3782 * C390;
    const double C6498 = C3782 * C383;
    const double C7077 = C3782 * C683;
    const double C7073 = C3782 * C677;
    const double C7619 = C3782 * C934;
    const double C7615 = C3782 * C928;
    const double C19225 = C3782 * C2324;
    const double C19773 = C3782 * C2786;
    const double C19769 = C3782 * C2781;
    const double C21976 = C3782 * C3653;
    const double C21972 = C3782 * C3649;
    const double C3800 = C3783 * C261;
    const double C3796 = C3783 * C268;
    const double C3792 = C3783 * C260;
    const double C6504 = C3783 * C683;
    const double C6500 = C3783 * C677;
    const double C7079 = C3783 * C1453;
    const double C7075 = C3783 * C1448;
    const double C7621 = C3783 * C2324;
    const double C7776 = C7732 * C143;
    const double C7770 = C7732 * C132;
    const double C7763 = C7732 * C142;
    const double C7757 = C7732 * C130;
    const double C7751 = C7732 * C141;
    const double C7745 = C7732 * C128;
    const double C7950 = C7732 * C269;
    const double C7944 = C7732 * C278;
    const double C7938 = C7732 * C267;
    const double C8120 = C7732 * C393;
    const double C8114 = C7732 * C402;
    const double C8108 = C7732 * C391;
    const double C10096 = C7732 * C935;
    const double C10089 = C7732 * C943;
    const double C10083 = C7732 * C933;
    const double C10077 = C7732 * C401;
    const double C10071 = C7732 * C389;
    const double C10520 = C7732 * C692;
    const double C10514 = C7732 * C682;
    const double C10960 = C7732 * C2793;
    const double C10954 = C7732 * C2785;
    const double C48257 = C48256 / C47185;
    const double C3809 = C48461 * C143;
    const double C3805 = C48461 * C132;
    const double C3801 = C48461 * C142;
    const double C3797 = C48461 * C130;
    const double C3793 = C48461 * C141;
    const double C3789 = C48461 * C128;
    const double C3972 = C48461 * C269;
    const double C3968 = C48461 * C278;
    const double C3964 = C48461 * C267;
    const double C4126 = C48461 * C393;
    const double C4122 = C48461 * C402;
    const double C4118 = C48461 * C391;
    const double C6518 = C48461 * C935;
    const double C6501 = C48461 * C401;
    const double C6497 = C48461 * C389;
    const double C7078 = C48461 * C692;
    const double C7074 = C48461 * C682;
    const double C7620 = C48461 * C943;
    const double C7616 = C48461 * C933;
    const double C19774 = C48461 * C2793;
    const double C19770 = C48461 * C2785;
    const double C21977 = C48461 * C3658;
    const double C21973 = C48461 * C3652;
    const double C1064 =
        (((0 - (C47256 * C47257) / C47180) * ae) / C47180 - (0 * be) / C47192) /
            C47186 +
        ((C47256 * (((C48199 - (C47256 * 2 * C47259) / C47180) * ae) / C47180 -
                    C47257 / C47192) +
          C48461) *
         ae) /
            C47180 +
        (0 * ae) / C47180 - C47259 / C47185;
    const double C48493 = 2 * C48458;
    const double C1086 = C1065 * C261;
    const double C1080 = C1065 * C268;
    const double C1074 = C1065 * C260;
    const double C16521 = C1065 * C2324;
    const double C16509 = C1065 * C683;
    const double C16503 = C1065 * C677;
    const double C16946 = C1065 * C1453;
    const double C16940 = C1065 * C1448;
    const double C48264 = C48263 / C47180;
    const double C48503 = C48467 / C47192;
    const double C29523 = C26144 * C1460;
    const double C29517 = C26144 * C1452;
    const double C48520 = C48461 - C48500;
    const double C22083 = -C48500;
    const double C7759 = C7733 * C269;
    const double C7753 = C7733 * C278;
    const double C7747 = C7733 * C267;
    const double C10079 = C7733 * C692;
    const double C10073 = C7733 * C682;
    const double C10522 = C7733 * C1460;
    const double C10516 = C7733 * C1452;
    const double C48529 = C48516 + C48253;
    const double C47347 = C47343 / C47186;
    const double C17629 =
        (4 * (2 * C47638 * C47452 + C47638 * C47713) +
         C47638 *
             (3 * C47713 + C47638 * (2 * C47638 * C47468 +
                                     C47638 * (C47468 + C47492 * C47646)))) /
        C47185;
    const double C168 = C152 - C153;
    const double C2810 = C408 - C409;
    const double C2802 = C409 - C408;
    const double C3662 = C2804 - C2805;
    const double C133 =
        (2 * (C47424 * C47550 + C47735 * ae) +
         C47424 * (C47550 + C47424 * C47554 + C47424 * C47510 * ae) +
         (C47735 + C47510 * C47449) * ae) /
        C47180;
    const double C270 =
        (C47423 * (C47550 + C47424 * C47554 + C47740 * ae)) / C47180;
    const double C394 =
        (C47638 * (C47550 + C47424 * C47554 + C47740 * ae)) / C47180;
    const double C583 =
        (C47424 * C47550 + C47735 * ae + C47554 * C47609) / C47180;
    const double C685 = (C47638 * C47423 * C47554) / C47180;
    const double C936 =
        (C47424 * C47550 + C47735 * ae + C47554 * C47646) / C47180;
    const double C1075 = C48494 * C582;
    const double C3966 = C48262 * C582;
    const double C7749 = C48494 * C582;
    const double C7940 = C7733 * C582;
    const double C22273 = C48262 * C582;
    const double C26159 = C26144 * C582;
    const double C2621 = C48199 * C684;
    const double C4120 = C48262 * C684;
    const double C6288 = C48461 * C684;
    const double C8110 = C7733 * C684;
    const double C12463 = C7732 * C684;
    const double C22427 = C48262 * C684;
    const double C1076 = C1066 * C576;
    const double C1281 = C1065 * C576;
    const double C3965 = C3783 * C576;
    const double C1467 = C1065 * C678;
    const double C2620 = C113 * C678;
    const double C4119 = C3783 * C678;
    const double C6287 = C3782 * C678;
    const double C2457 = C113 * C929;
    const double C6517 = C3782 * C929;
    const double C1283 = C1066 * C1263;
    const double C1469 = C1066 * C1449;
    const double C6289 = C3783 * C1449;
    const double C32067 = C1065 * C1449;
    const double C2818 = C113 * C2782;
    const double C18675 = C3782 * C2782;
    const double C3244 = C113 * C2316;
    const double C7617 = C3783 * C2316;
    const double C16515 = C1065 * C2316;
    const double C19221 = C3782 * C2316;
    const double C17372 = C1065 * C3227;
    const double C17870 = C113 * C3227;
    const double C19771 = C3783 * C3227;
    const double C21600 = C3782 * C3227;
    const double C1747 =
        (3 * (C47436 + C47423 * C47828 + C47826 * be) +
         C47423 * (2 * C47828 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47513 * be) +
                             C47423 * C47513 * be) +
                   C47829 * be) +
         (2 * C47826 + C47423 * C47829) * be) /
        C47180;
    const double C1905 =
        (C47638 * (2 * C47828 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47513 * be) +
                             C47423 * C47513 * be) +
                   C47829 * be)) /
        C47180;
    const double C2322 =
        (C47423 * C47436 + C47735 * be + C47828 * C47646) / C47180;
    const double C2323 = (C47436 + C47423 * C47828 + C47826 * be +
                          (C47443 + C47423 * (C47423 * C47453 + C47513 * be) +
                           C47423 * C47513 * be) *
                              C47646) /
                         C47180;
    const double C3230 =
        (2 * C47638 * C47828 +
         C47638 * (C47828 + (C47423 * C47453 + C47513 * be) * C47646)) /
        C47180;
    const double C170 = C156 - C157;
    const double C2454 = C413 - C412;
    const double C2812 = C412 - C413;
    const double C18110 = C3669 - C3668;
    const double C169 = C154 - C155;
    const double C2811 = C410 - C411;
    const double C2803 = C411 - C410;
    const double C3663 = C2806 - C2807;
    const double C134 = (3 * (C47436 + C47443 * C47449) +
                         C47424 * (2 * C47445 + C47424 * C47457)) /
                        C47180;
    const double C271 = (C47423 * (2 * C47445 + C47424 * C47457) +
                         (2 * C47740 + C47424 * C47742) * be) /
                        C47180;
    const double C395 = (C47638 * (2 * C47445 + C47424 * C47457)) / C47180;
    const double C584 =
        (C47436 + C47443 * C47449 + C47423 * (C47423 * C47457 + C47742 * be) +
         C47423 * C47742 * be) /
        C47180;
    const double C686 = (C47638 * (C47423 * C47457 + C47742 * be)) / C47180;
    const double C937 = (C47436 + C47443 * C47449 + C47457 * C47646) / C47180;
    const double C2789 =
        (2 * C47638 * C47457 + C47638 * (C47457 + C47473 * C47646)) / C47180;
    const double C47474 = C47424 * C47472;
    const double C47479 = 2 * C47472;
    const double C47616 = C47423 * C47472;
    const double C47467 = C47452 + C47463;
    const double C47836 = C47832 + C47833;
    const double C1284 = C48494 * C1268;
    const double C7942 = C48494 * C1268;
    const double C11088 = C48504 * C1268;
    const double C23280 = C48504 * C1268;
    const double C26352 = C26144 * C1268;
    const double C1470 = C48494 * C1454;
    const double C6290 = C48262 * C1454;
    const double C8112 = C48494 * C1454;
    const double C12465 = C7733 * C1454;
    const double C24673 = C48262 * C1454;
    const double C26522 = C26144 * C1454;
    const double C2819 = C48199 * C2787;
    const double C18676 = C48461 * C2787;
    const double C17637 = C48199 * C3654;
    const double C47896 = C47423 * C47892;
    const double C47922 = 2 * C47892;
    const double C17625 =
        (4 * (2 * C47638 * C47443 + C47638 * C47966) +
         C47638 *
             (3 * C47966 + C47638 * (2 * C47638 * C47453 +
                                     C47638 * (C47453 + C47469 * C47646)))) /
        C47180;
    const double C18112 = C17632 - C17633;
    const double C144 =
        (3 * (C47442 + ae * C47445 + C47424 * C47456) +
         ae * (2 * C47445 + C47424 * C47457) +
         C47424 *
             (2 * C47456 + ae * C47457 +
              C47424 * (C47452 + ae * C47424 * C47453 +
                        C47424 * (ae * C47453 + C47424 * std::pow(C47426, 6) *
                                                    bs[6] * C47435)))) /
        C47185;
    const double C279 =
        (be * (C47432 * C47429 * C47509 +
               C47424 * (C47424 * C47438 * C47439 * C47509 + C47510 * ae) +
               C47424 * C47510 * ae) +
         C47423 * (C47442 + ae * C47445 + C47424 * C47456)) /
        C47185;
    const double C403 =
        ((zP - zQ) * (C47442 + ae * C47445 + C47424 * C47456)) / C47185;
    const double C591 = (ae * C47436 + C47424 * C47442 + be * C47423 * C47554 +
                         C47423 * (be * C47554 + C47423 * C47456)) /
                        C47185;
    const double C693 = ((zP - zQ) * (be * C47554 + C47423 * C47456)) / C47185;
    const double C944 =
        (ae * C47436 + C47424 * C47442 + C47456 * std::pow(zP - zQ, 2)) /
        C47185;
    const double C2794 = (2 * C47638 * C47456 +
                          C47638 * (C47456 + C47472 * std::pow(C47638, 2))) /
                         C47185;
    const double C2334 =
        (be * C47550 + C47423 * C47442 + C47610 * std::pow(zP - zQ, 2)) /
        C47185;
    const double C2335 = (C47442 + be * C47606 + C47423 * C47610 +
                          (C47452 + be * C47423 * C47520 +
                           C47423 * (be * C47520 + C47423 * C47468)) *
                              std::pow(zP - zQ, 2)) /
                         C47185;
    const double C3236 = (2 * C47638 * C47610 +
                          C47638 * (C47610 + (be * C47520 + C47423 * C47468) *
                                                 std::pow(C47638, 2))) /
                         C47185;
    const double C18111 = C3671 - C3670;
    const double C47563 = C47523 * ae;
    const double C47746 = C47424 * C47523;
    const double C47750 = 3 * C47523;
    const double C47842 = C47423 * C47523;
    const double C47841 = C47523 * be;
    const double C1270 =
        (2 * (C47423 * C47457 + C47742 * be) +
         C47423 * (C47457 + C47423 * (C47423 * C47473 + C47523 * be) +
                   C47423 * C47523 * be) +
         (C47742 + C47523 * C47609) * be) /
        C47180;
    const double C1456 =
        (C47638 * (C47457 + C47423 * (C47423 * C47473 + C47523 * be) +
                   C47423 * C47523 * be)) /
        C47180;
    const double C1264 =
        2 * C47423 * C47742 + C47423 * (C47742 + C47523 * C47609);
    const double C1450 = C47638 * (C47742 + C47523 * C47609);
    const double C2783 =
        2 * C47638 * C47742 + C47638 * (C47742 + C47523 * C47646);
    const double C3651 =
        3 * (C47742 + C47523 * C47646) +
        C47638 * (2 * C47638 * C47523 + C47638 * (C47523 + C47535 * C47646));
    const double C47837 = C47518 + C47835;
    const double C47910 = 2 * C47905;
    const double C47908 = C47905 * be;
    const double C3228 =
        2 * C47638 * C47834 + C47638 * (C47834 + C47905 * C47646);
    const double C17537 =
        3 * (C47834 + C47905 * C47646) +
        C47638 * (2 * C47638 * C47905 +
                  C47638 * (C47905 + C47423 * C47571 * C47646));
    const double C47907 = C47903 + C47904;
    const double C48081 = C47518 + C48080;
    const double C17636 = C113 * C3650;
    const double C47538 = C47424 * C47536;
    const double C47568 = 2 * C47536;
    const double C47617 = C47536 * C47609;
    const double C47665 = be * C47536;
    const double C47664 = C47423 * C47536;
    const double C47974 = C47536 * C47646;
    const double C47897 = C47423 * C47894;
    const double C47928 = 3 * C47894;
    const double C47926 = C47894 * be;
    const double C10062 =
        2 * C47638 * C47829 + C47638 * (C47829 + C47894 * C47646);
    const double C10939 =
        3 * (C47829 + C47894 * C47646) +
        C47638 * (2 * C47638 * C47894 + C47638 * (C47894 + C47931 * C47646));
    const double C48084 = C47890 + C48083;
    const double C17874 = C113 * C10938;
    const double C21974 = C3783 * C10938;
    const double C47933 = C47423 * C47929;
    const double C47977 = C47929 * C47646;
    const double C10940 =
        (3 * (C47828 + C47892 * C47646) +
         C47638 * (2 * C47638 * C47892 + C47638 * (C47892 + C47929 * C47646))) /
        C47180;
    const double C48090 = C47638 * C48089;
    const double C47556 = C47424 * C47524;
    const double C47561 = 2 * C47524;
    const double C47615 = be * C47524;
    const double C47614 = C47423 * C47524;
    const double C1275 = (2 * (be * C47554 + C47423 * C47456) +
                          be * (C47554 + C47524 * std::pow(C47423, 2)) +
                          C47423 * (C47456 + be * C47423 * C47524 +
                                    C47423 * (be * C47524 + C47423 * C47472))) /
                         C47185;
    const double C1461 =
        ((zP - zQ) * (C47456 + be * C47423 * C47524 +
                      C47423 * (be * C47524 + C47423 * C47472))) /
        C47185;
    const double C1269 =
        (2 * C47423 * C47554 + C47423 * (C47554 + C47524 * C47609)) / C47180;
    const double C1455 = (C47638 * (C47554 + C47524 * C47609)) / C47180;
    const double C2788 =
        (2 * C47638 * C47554 + C47638 * (C47554 + C47524 * C47646)) / C47180;
    const double C3655 =
        (3 * (C47554 + C47524 * C47646) +
         C47638 * (2 * C47638 * C47524 + C47638 * (C47524 + C47536 * C47646))) /
        C47180;
    const double C1753 =
        (3 * (C47442 + be * C47606 + C47423 * C47610) +
         be * (2 * C47606 + C47423 * C47612) +
         C47423 * (2 * C47610 + be * C47612 +
                   C47423 * (C47452 + be * C47423 * C47520 +
                             C47423 * (be * C47520 + C47423 * C47468)))) /
        C47185;
    const double C1911 =
        ((zP - zQ) * (2 * C47610 + be * C47612 +
                      C47423 * (C47452 + be * C47423 * C47520 +
                                C47423 * (be * C47520 + C47423 * C47468)))) /
        C47185;
    const double C1748 = (3 * (C47550 + C47514 * C47609) +
                          C47423 * (2 * C47606 + C47423 * C47612)) /
                         C47180;
    const double C1906 = (C47638 * (2 * C47606 + C47423 * C47612)) / C47180;
    const double C2325 = (C47550 + C47514 * C47609 + C47612 * C47646) / C47180;
    const double C10065 =
        (2 * C47638 * C47612 + C47638 * (C47612 + C47657 * C47646)) / C47180;
    const double C47659 = C47423 * C47655;
    const double C47680 = 2 * C47655;
    const double C47658 = C47452 + C47654;
    const double C17378 = C1065 * C3231;
    const double C17872 = C113 * C3231;
    const double C19775 = C3783 * C3231;
    const double C21604 = C3782 * C3231;
    const double C17876 = C113 * C10942;
    const double C21978 = C3783 * C10942;
    const double C17626 =
        (4 * (2 * C47638 * C47514 + C47638 * C47969) +
         C47638 *
             (3 * C47969 + C47638 * (2 * C47638 * C47520 +
                                     C47638 * (C47520 + C47530 * C47646)))) /
        C47180;
    const double C18113 = C17634 - C17635;
    const double C47499 = C47424 * C47497;
    const double C3656 =
        (3 * (C47457 + C47473 * C47646) +
         C47638 * (2 * C47638 * C47473 + C47638 * (C47473 + C47497 * C47646))) /
        C47180;
    const double C47498 = C47424 * C47496;
    const double C47666 = C47423 * C47496;
    const double C47715 = C47496 * C47646;
    const double C3659 =
        (3 * (C47456 + C47472 * C47646) +
         C47638 * (2 * C47638 * C47472 + C47638 * (C47472 + C47496 * C47646))) /
        C47185;
    const double C47693 = C47423 * C47689;
    const double C47718 = C47689 * C47646;
    const double C10944 =
        (3 * (C47610 + C47655 * C47646) +
         C47638 * (2 * C47638 * C47655 + C47638 * (C47655 + C47689 * C47646))) /
        C47185;
    const double C47725 = C47638 * C47724;
    const double C47578 = C47424 * C47577;
    const double C47667 = C47577 * C47609;
    const double C47694 = C47423 * C47691;
    const double C10943 =
        (3 * (C47612 + C47657 * C47646) +
         C47638 * (2 * C47638 * C47657 + C47638 * (C47657 + C47691 * C47646))) /
        C47180;
    const double C2628 = C113 * C2318;
    const double C6519 = C3783 * C2318;
    const double C16526 = C1065 * C2318;
    const double C18465 = C3782 * C2318;
    const double C161 = C113 * C123;
    const double C3813 = C3782 * C123;
    const double C292 = C113 * C262;
    const double C1097 = C1065 * C262;
    const double C3808 = C3783 * C262;
    const double C3979 = C3782 * C262;
    const double C416 = C113 * C386;
    const double C4133 = C3782 * C386;
    const double C1088 = C1066 * C577;
    const double C1293 = C1065 * C577;
    const double C3973 = C3783 * C577;
    const double C1479 = C1065 * C679;
    const double C2624 = C113 * C679;
    const double C4127 = C3783 * C679;
    const double C6295 = C3782 * C679;
    const double C2461 = C113 * C930;
    const double C6525 = C3782 * C930;
    const double C16942 = C1066 * C1902;
    const double C16517 = C1066 * C2317;
    const double C16952 = C1065 * C2317;
    const double C19223 = C3783 * C2317;
    const double C18114 = C113 * C17623;
    const double C47477 = C47465 + C47475;
    const double C17627 =
        (4 * (2 * C47638 * C47459 + C47638 * C47972) +
         C47638 * (3 * C47972 +
                   C47638 * (2 * C47638 * C47481 +
                             C47638 * (C47481 + C47424 * C47493 * C47646)))) /
        C47180;
    const double C47988 = C47985 + C47987;
    const double C47539 = C47533 + C47537;
    const double C47845 = C47523 + C47843;
    const double C47912 = C47423 * C47909;
    const double C47936 = C47932 + C47934;
    const double C47662 = C47656 + C47660;
    const double C17867 =
        (4 * (2 * C47638 * C47650 + C47638 * C47981) +
         C47638 * (3 * C47981 +
                   C47638 * (2 * C47638 * C47682 +
                             C47638 * (C47682 + C47423 * C47574 * C47646)))) /
        C47180;
    const double C47995 = C47992 + C47994;
    const double C48299 = C48298 / C47185;
    const double C48496 = 2 * C48460;
    const double C48306 = C48305 / C47180;
    const double C48509 = C48473 / C47192;
    const double C48523 = C48462 - C48506;
    const double C30746 = -C48506;
    const double C48530 = C48518 + C48295;
    const double C47224 = C47221 * be;
    const double C47210 = C47178 * C47206;
    const double C47238 = C47206 / C47186;
    const double C47209 = C47205 / C47180;
    const double C48107 = C48103 - C48106;
    const double C48513 = C48478 / C47180;
    const double C48115 = C48111 - C48114;
    const double C48527 = C48512 / C47186;
    const double C47348 = C47344 * be;
    const double C47319 = C47311 / C47180;
    const double C7771 = C7739 * C262;
    const double C7760 = C7739 * C261;
    const double C7754 = C7739 * C268;
    const double C7748 = C7739 * C260;
    const double C7951 = C7739 * C577;
    const double C7939 = C7739 * C576;
    const double C8121 = C7739 * C679;
    const double C8109 = C7739 * C678;
    const double C10097 = C7739 * C2318;
    const double C10092 = C7739 * C2324;
    const double C10086 = C7739 * C2316;
    const double C10080 = C7739 * C683;
    const double C10074 = C7739 * C677;
    const double C10527 = C7739 * C2317;
    const double C10521 = C7739 * C1453;
    const double C10515 = C7739 * C1448;
    const double C10961 = C7739 * C3231;
    const double C10955 = C7739 * C3227;
    const double C12464 = C7739 * C1449;
    const double C7762 = C7740 * C577;
    const double C7750 = C7740 * C576;
    const double C7941 = C7740 * C1263;
    const double C8111 = C7740 * C1449;
    const double C10088 = C7740 * C2317;
    const double C10082 = C7740 * C1453;
    const double C10076 = C7740 * C1448;
    const double C10517 = C7740 * C1902;
    const double C22115 = C22090 * C262;
    const double C22107 = C22090 * C261;
    const double C22103 = C22090 * C268;
    const double C22099 = C22090 * C260;
    const double C22280 = C22090 * C577;
    const double C22272 = C22090 * C576;
    const double C22434 = C22090 * C679;
    const double C22426 = C22090 * C678;
    const double C24463 = C22090 * C2318;
    const double C24672 = C22090 * C1449;
    const double C24899 = C22090 * C2324;
    const double C24895 = C22090 * C2316;
    const double C24887 = C22090 * C683;
    const double C24883 = C22090 * C677;
    const double C25472 = C22090 * C2317;
    const double C25468 = C22090 * C1453;
    const double C25464 = C22090 * C1448;
    const double C26024 = C22090 * C3231;
    const double C26020 = C22090 * C3227;
    const double C42700 = C22090 * C10942;
    const double C42696 = C22090 * C10938;
    const double C47328 = C47256 * C47324;
    const double C47357 = C47324 / C47186;
    const double C3822 = C3799 - C3800;
    const double C48258 = C48253 - C48257;
    const double C3825 = C3805 - C3806;
    const double C3823 = C3801 - C3802;
    const double C3821 = C3797 - C3798;
    const double C6087 = C4126 - C4125;
    const double C6513 = C4125 - C4126;
    const double C6511 = C4121 - C4122;
    const double C6507 = C4122 - C4121;
    const double C6509 = C4117 - C4118;
    const double C6505 = C4118 - C4117;
    const double C19765 = C7620 - C7619;
    const double C19763 = C7616 - C7615;
    const double C21970 = C19774 - C19773;
    const double C21968 = C19770 - C19769;
    const double C1095 = C1064 * C122;
    const double C1090 = C1064 * C131;
    const double C1084 = C1064 * C121;
    const double C1078 = C1064 * C129;
    const double C1072 = C1064 * C120;
    const double C1291 = C1064 * C261;
    const double C1285 = C1064 * C268;
    const double C1279 = C1064 * C260;
    const double C1477 = C1064 * C385;
    const double C1471 = C1064 * C392;
    const double C1465 = C1064 * C384;
    const double C16524 = C1064 * C929;
    const double C16519 = C1064 * C934;
    const double C16513 = C1064 * C928;
    const double C16507 = C1064 * C390;
    const double C16501 = C1064 * C383;
    const double C16956 = C1064 * C2324;
    const double C16950 = C1064 * C2316;
    const double C16944 = C1064 * C683;
    const double C16938 = C1064 * C677;
    const double C17376 = C1064 * C2786;
    const double C17370 = C1064 * C2781;
    const double C32065 = C1064 * C678;
    const double C48517 = C48493 / C47180;
    const double C48265 = C48261 - C48264;
    const double C48531 = C48520 / C47186;
    const double C22116 = C22083 * C143;
    const double C22112 = C22083 * C132;
    const double C22108 = C22083 * C142;
    const double C22104 = C22083 * C130;
    const double C22100 = C22083 * C141;
    const double C22096 = C22083 * C128;
    const double C22279 = C22083 * C269;
    const double C22275 = C22083 * C278;
    const double C22271 = C22083 * C267;
    const double C22433 = C22083 * C393;
    const double C22429 = C22083 * C402;
    const double C22425 = C22083 * C391;
    const double C24460 = C22083 * C935;
    const double C24671 = C22083 * C684;
    const double C24913 = C22083 * C2787;
    const double C24896 = C22083 * C943;
    const double C24892 = C22083 * C933;
    const double C24884 = C22083 * C401;
    const double C24880 = C22083 * C389;
    const double C25467 = C22083 * C692;
    const double C25463 = C22083 * C682;
    const double C26023 = C22083 * C2793;
    const double C26019 = C22083 * C2785;
    const double C42699 = C22083 * C3658;
    const double C42695 = C22083 * C3652;
    const double C7738 =
        ((-(0 * be) / C47180) / C47186 -
         ((0 - (C47256 * C47257) / C47180) * be) / C47180) /
            C47186 -
        ((C47256 * ((-C47257 / C47180) / C47186 -
                    ((C48199 - (C47256 * C47286) / C47180) * be) / C47180) +
          C22083) *
         be) /
            C47180 +
        (-C47286 / C47180) / C47186 - (0 * be) / C47180;
    const double C1102 = C48529 * C143;
    const double C1096 = C48529 * C132;
    const double C1089 = C48529 * C142;
    const double C1083 = C48529 * C130;
    const double C1077 = C48529 * C141;
    const double C1071 = C48529 * C128;
    const double C1292 = C48529 * C269;
    const double C1286 = C48529 * C278;
    const double C1280 = C48529 * C267;
    const double C1478 = C48529 * C393;
    const double C1472 = C48529 * C402;
    const double C1466 = C48529 * C391;
    const double C16525 = C48529 * C935;
    const double C16518 = C48529 * C943;
    const double C16512 = C48529 * C933;
    const double C16506 = C48529 * C401;
    const double C16500 = C48529 * C389;
    const double C16945 = C48529 * C692;
    const double C16939 = C48529 * C682;
    const double C17377 = C48529 * C2793;
    const double C17371 = C48529 * C2785;
    const double C32066 = C48529 * C684;
    const double C18117 = C48199 * C17629;
    const double C18108 = C3662 * C9007;
    const double C159 = C113 * C133;
    const double C1101 = C1064 * C133;
    const double C3810 = C3782 * C133;
    const double C290 = C113 * C270;
    const double C1092 = C1065 * C270;
    const double C1297 = C1064 * C270;
    const double C3804 = C3783 * C270;
    const double C3975 = C3782 * C270;
    const double C7766 = C7739 * C270;
    const double C22111 = C22090 * C270;
    const double C414 = C113 * C394;
    const double C1483 = C1064 * C394;
    const double C4129 = C3782 * C394;
    const double C1082 = C1066 * C583;
    const double C1287 = C1065 * C583;
    const double C3969 = C3783 * C583;
    const double C7756 = C7740 * C583;
    const double C7945 = C7739 * C583;
    const double C22276 = C22090 * C583;
    const double C1473 = C1065 * C685;
    const double C2622 = C113 * C685;
    const double C4123 = C3783 * C685;
    const double C6291 = C3782 * C685;
    const double C8115 = C7739 * C685;
    const double C22430 = C22090 * C685;
    const double C32071 = C1064 * C685;
    const double C2459 = C113 * C936;
    const double C6521 = C3782 * C936;
    const double C16530 = C1064 * C936;
    const double C6510 = C4119 - C4120;
    const double C6506 = C4120 - C4119;
    const double C2814 = C2457 - C2456;
    const double C2808 = C2456 - C2457;
    const double C18671 = C6517 - C6518;
    const double C18667 = C6518 - C6517;
    const double C10518 = C48494 * C1905;
    const double C14120 = C48504 * C1905;
    const double C16943 = C48494 * C1905;
    const double C30096 = C26144 * C1905;
    const double C40848 = C48504 * C1905;
    const double C3245 = C48199 * C2322;
    const double C7618 = C48262 * C2322;
    const double C10085 = C7733 * C2322;
    const double C10526 = C7732 * C2322;
    const double C16951 = C48529 * C2322;
    const double C19222 = C48461 * C2322;
    const double C24894 = C48262 * C2322;
    const double C25471 = C22083 * C2322;
    const double C10087 = C48494 * C2323;
    const double C10528 = C7733 * C2323;
    const double C16516 = C48494 * C2323;
    const double C19224 = C48262 * C2323;
    const double C25473 = C48262 * C2323;
    const double C30642 = C26144 * C2323;
    const double C10956 = C7733 * C3230;
    const double C17871 = C48199 * C3230;
    const double C19772 = C48262 * C3230;
    const double C21601 = C48461 * C3230;
    const double C26021 = C48262 * C3230;
    const double C42323 = C22083 * C3230;
    const double C18119 = C18110 * C9007;
    const double C3673 = C3663 * C1061;
    const double C16088 = C3663 * C48526;
    const double C18109 = C3663 * C48102;
    const double C20871 = C3663 * C48439;
    const double C34438 = C3663 * C23265;
    const double C160 = C48199 * C134;
    const double C3814 = C48461 * C134;
    const double C22121 = C22083 * C134;
    const double C293 = C48199 * C271;
    const double C3807 = C48262 * C271;
    const double C3980 = C48461 * C271;
    const double C7772 = C7733 * C271;
    const double C22114 = C48262 * C271;
    const double C22287 = C22083 * C271;
    const double C417 = C48199 * C395;
    const double C4134 = C48461 * C395;
    const double C22441 = C22083 * C395;
    const double C1087 = C48494 * C584;
    const double C3974 = C48262 * C584;
    const double C7761 = C48494 * C584;
    const double C7952 = C7733 * C584;
    const double C22281 = C48262 * C584;
    const double C26171 = C26144 * C584;
    const double C2625 = C48199 * C686;
    const double C4128 = C48262 * C686;
    const double C6296 = C48461 * C686;
    const double C8122 = C7733 * C686;
    const double C22435 = C48262 * C686;
    const double C27692 = C22083 * C686;
    const double C2460 = C48199 * C937;
    const double C6526 = C48461 * C937;
    const double C24469 = C22083 * C937;
    const double C2823 = C48199 * C2789;
    const double C47486 = C47479 + C47480;
    const double C47476 = C47467 + C47474;
    const double C2326 =
        (C47423 * C47445 + C47740 * be + C47836 * C47646) / C47180;
    const double C2327 = (C47445 + C47423 * C47836 + C47834 * be +
                          (C47459 + C47423 * (C47423 * C47481 + C47528 * be) +
                           C47423 * C47528 * be) *
                              C47646) /
                         C47180;
    const double C3232 =
        (2 * C47638 * C47836 +
         C47638 * (C47836 + (C47423 * C47481 + C47528 * be) * C47646)) /
        C47180;
    const double C32279 = C1469 - C1470;
    const double C32273 = C1470 - C1469;
    const double C20152 = C2818 - C2819;
    const double C20150 = C2819 - C2818;
    const double C47898 = C47443 + C47896;
    const double C18115 = C48199 * C17625;
    const double C18121 = C18112 * C9007;
    const double C162 = C48199 * C144;
    const double C3818 = C48461 * C144;
    const double C22125 = C22083 * C144;
    const double C291 = C48199 * C279;
    const double C1298 = C48529 * C279;
    const double C3803 = C48262 * C279;
    const double C3976 = C48461 * C279;
    const double C7765 = C7733 * C279;
    const double C7956 = C7732 * C279;
    const double C22110 = C48262 * C279;
    const double C22283 = C22083 * C279;
    const double C415 = C48199 * C403;
    const double C1484 = C48529 * C403;
    const double C4130 = C48461 * C403;
    const double C8126 = C7732 * C403;
    const double C22437 = C22083 * C403;
    const double C1081 = C48494 * C591;
    const double C3970 = C48262 * C591;
    const double C7755 = C48494 * C591;
    const double C7946 = C7733 * C591;
    const double C22277 = C48262 * C591;
    const double C26165 = C26144 * C591;
    const double C2623 = C48199 * C693;
    const double C4124 = C48262 * C693;
    const double C6292 = C48461 * C693;
    const double C8116 = C7733 * C693;
    const double C12469 = C7732 * C693;
    const double C22431 = C48262 * C693;
    const double C24675 = C22083 * C693;
    const double C32072 = C48529 * C693;
    const double C2458 = C48199 * C944;
    const double C6522 = C48461 * C944;
    const double C10102 = C7732 * C944;
    const double C16531 = C48529 * C944;
    const double C24464 = C22083 * C944;
    const double C2821 = C48199 * C2794;
    const double C18680 = C48461 * C2794;
    const double C24917 = C22083 * C2794;
    const double C3247 = C48199 * C2334;
    const double C7622 = C48262 * C2334;
    const double C10091 = C7733 * C2334;
    const double C10532 = C7732 * C2334;
    const double C16957 = C48529 * C2334;
    const double C19226 = C48461 * C2334;
    const double C24898 = C48262 * C2334;
    const double C25475 = C22083 * C2334;
    const double C10093 = C48494 * C2335;
    const double C10534 = C7733 * C2335;
    const double C16522 = C48494 * C2335;
    const double C19228 = C48262 * C2335;
    const double C25477 = C48262 * C2335;
    const double C30648 = C26144 * C2335;
    const double C10962 = C7733 * C3236;
    const double C17873 = C48199 * C3236;
    const double C19776 = C48262 * C3236;
    const double C21605 = C48461 * C3236;
    const double C26025 = C48262 * C3236;
    const double C42327 = C22083 * C3236;
    const double C18120 = C18111 * C48102;
    const double C20875 = C18111 * C48439;
    const double C34442 = C18111 * C23265;
    const double C47747 = C47745 + C47746;
    const double C2320 = C47423 * C47742 + C47842 * C47646;
    const double C3229 =
        2 * C47638 * C47842 + C47638 * (C47842 + C47423 * C47535 * C47646);
    const double C47844 = C47840 + C47841;
    const double C1296 = C48494 * C1270;
    const double C7954 = C48494 * C1270;
    const double C11105 = C48504 * C1270;
    const double C23297 = C48504 * C1270;
    const double C26364 = C26144 * C1270;
    const double C1482 = C48494 * C1456;
    const double C6298 = C48262 * C1456;
    const double C8124 = C48494 * C1456;
    const double C26534 = C26144 * C1456;
    const double C27694 = C48262 * C1456;
    const double C1295 = C1066 * C1264;
    const double C7953 = C7740 * C1264;
    const double C1481 = C1066 * C1450;
    const double C6297 = C3783 * C1450;
    const double C8123 = C7740 * C1450;
    const double C27693 = C22090 * C1450;
    const double C2822 = C113 * C2783;
    const double C1749 =
        (3 * (C47445 + C47423 * C47836 + C47834 * be) +
         C47423 * (2 * C47836 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47528 * be) +
                             C47423 * C47528 * be) +
                   C47837 * be) +
         (2 * C47834 + C47423 * C47837) * be) /
        C47180;
    const double C1907 =
        (C47638 * (2 * C47836 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47528 * be) +
                             C47423 * C47528 * be) +
                   C47837 * be)) /
        C47180;
    const double C1745 = 3 * (C47740 + C47518 * C47609) +
                         C47423 * (2 * C47834 + C47423 * C47837);
    const double C1903 = C47638 * (2 * C47834 + C47423 * C47837);
    const double C2319 = C47740 + C47518 * C47609 + C47837 * C47646;
    const double C10063 =
        2 * C47638 * C47837 + C47638 * (C47837 + C47909 * C47646);
    const double C18677 = C3783 * C3228;
    const double C20016 = C113 * C3228;
    const double C24914 = C22090 * C3228;
    const double C47911 = C47423 * C47907;
    const double C17538 =
        (3 * (C47836 + C47907 * C47646) +
         C47638 * (2 * C47638 * C47907 +
                   C47638 * (C47907 + (C47423 * C47424 * C47493 + C47571 * be) *
                                          C47646))) /
        C47180;
    const double C17624 =
        4 * (2 * C47638 * C47518 + C47638 * C48081) +
        C47638 * (3 * C48081 + C47638 * (2 * C47638 * C47528 +
                                         C47638 * (C47528 + C47571 * C47646)));
    const double C47540 = C47520 + C47538;
    const double C47619 = C47524 + C47617;
    const double C47670 = 2 * C47664;
    const double C47668 = be * C47664;
    const double C47975 = C47524 + C47974;
    const double C47899 = C47895 + C47897;
    const double C10957 = C7740 * C10062;
    const double C17374 = C1066 * C10062;
    const double C21602 = C3783 * C10062;
    const double C42324 = C22090 * C10062;
    const double C17865 =
        4 * (2 * C47638 * C47890 + C47638 * C48084) +
        C47638 * (3 * C48084 +
                  C47638 * (2 * C47638 * C47925 +
                            C47638 * (C47925 + C47423 * C47529 * C47646)));
    const double C47935 = C47453 + C47933;
    const double C47978 = C47892 + C47977;
    const double C17875 = C48199 * C10940;
    const double C21975 = C48262 * C10940;
    const double C42697 = C48262 * C10940;
    const double C48091 = C48088 + C48090;
    const double C47558 = C47514 + C47556;
    const double C47618 = C47615 + C47616;
    const double C2328 = (C47423 * C47554 + C47614 * C47646) / C47180;
    const double C3233 =
        (2 * C47638 * C47614 + C47638 * (C47614 + C47664 * C47646)) / C47180;
    const double C17539 =
        (3 * (C47614 + C47664 * C47646) +
         C47638 * (2 * C47638 * C47664 +
                   C47638 * (C47664 + C47423 * C47577 * C47646))) /
        C47180;
    const double C1290 = C48494 * C1275;
    const double C7948 = C48494 * C1275;
    const double C11096 = C48504 * C1275;
    const double C23288 = C48504 * C1275;
    const double C26358 = C26144 * C1275;
    const double C1476 = C48494 * C1461;
    const double C6294 = C48262 * C1461;
    const double C8118 = C48494 * C1461;
    const double C12471 = C7733 * C1461;
    const double C24677 = C48262 * C1461;
    const double C26528 = C26144 * C1461;
    const double C1289 = C1066 * C1269;
    const double C7947 = C7740 * C1269;
    const double C1475 = C1066 * C1455;
    const double C6293 = C3783 * C1455;
    const double C8117 = C7740 * C1455;
    const double C12470 = C7739 * C1455;
    const double C24676 = C22090 * C1455;
    const double C32073 = C1065 * C1455;
    const double C2820 = C113 * C2788;
    const double C18679 = C3782 * C2788;
    const double C17638 = C113 * C3655;
    const double C10524 = C48494 * C1911;
    const double C14128 = C48504 * C1911;
    const double C16949 = C48494 * C1911;
    const double C30102 = C26144 * C1911;
    const double C40856 = C48504 * C1911;
    const double C10523 = C7740 * C1906;
    const double C16948 = C1066 * C1906;
    const double C10094 = C7740 * C2325;
    const double C10533 = C7739 * C2325;
    const double C16523 = C1066 * C2325;
    const double C16958 = C1065 * C2325;
    const double C19227 = C3783 * C2325;
    const double C25476 = C22090 * C2325;
    const double C10963 = C7740 * C10065;
    const double C17380 = C1066 * C10065;
    const double C21606 = C3783 * C10065;
    const double C42328 = C22090 * C10065;
    const double C47687 = C47680 + C47681;
    const double C47661 = C47658 + C47659;
    const double C18116 = C113 * C17626;
    const double C18122 = C18113 * C48102;
    const double C47501 = C47489 + C47499;
    const double C47500 = C47491 + C47498;
    const double C47669 = C47665 + C47666;
    const double C47716 = C47472 + C47715;
    const double C17639 = C48199 * C3659;
    const double C47695 = C47692 + C47693;
    const double C47719 = C47655 + C47718;
    const double C17877 = C48199 * C10944;
    const double C21979 = C48262 * C10944;
    const double C42701 = C48262 * C10944;
    const double C47726 = C47723 + C47725;
    const double C47579 = C47530 + C47578;
    const double C47671 = C47536 + C47667;
    const double C47696 = C47690 + C47694;
    const double C136 = (4 * (2 * C47445 + C47424 * C47457) +
                         C47424 * (3 * C47457 + C47424 * C47477)) /
                        C47180;
    const double C397 = (C47638 * (3 * C47457 + C47424 * C47477)) / C47180;
    const double C939 =
        (2 * C47445 + C47424 * C47457 + C47477 * C47646) / C47180;
    const double C18104 =
        (5 * (3 * C47966 + C47638 * C47988) +
         C47638 * (4 * C47988 +
                   C47638 * (3 * C47986 +
                             C47638 * (2 * C47638 * C47469 +
                                       C47638 * (C47469 + C47493 * C47646))))) /
        C47180;
    const double C47573 = C47539 * ae;
    const double C47751 = C47424 * C47539;
    const double C1746 = 3 * (C47742 + C47523 * C47609) +
                         C47423 * (2 * C47842 + C47423 * C47845);
    const double C1904 = C47638 * (2 * C47842 + C47423 * C47845);
    const double C2321 = C47742 + C47523 * C47609 + C47845 * C47646;
    const double C47914 = C47910 + C47912;
    const double C47938 = C47423 * C47936;
    const double C9093 = (4 * (2 * C47606 + C47423 * C47612) +
                          C47423 * (3 * C47612 + C47423 * C47662)) /
                         C47180;
    const double C9183 = (C47638 * (3 * C47612 + C47423 * C47662)) / C47180;
    const double C9652 =
        (2 * C47606 + C47423 * C47612 + C47662 * C47646) / C47180;
    const double C18105 =
        (5 * (3 * C47969 + C47638 * C47995) +
         C47638 * (4 * C47995 +
                   C47638 * (3 * C47993 +
                             C47638 * (2 * C47638 * C47530 +
                                       C47638 * (C47530 + C47574 * C47646))))) /
        C47180;
    const double C48300 = C48295 - C48299;
    const double C48519 = C48496 / C47180;
    const double C48307 = C48303 - C48306;
    const double C48533 = C48523 / C47186;
    const double C47226 = C47224 / C47180;
    const double C47214 = C47210 + C48112;
    const double C47241 = C47238 - C47240;
    const double C7743 = C47238 + (0 * ae) / C47180;
    const double C47213 = C48102 - C47209;
    const double C37263 = C3663 * C48107;
    const double C48438 = C48107 * C48097;
    const double C48480 = C48443 + C48107;
    const double C48446 = C48115 / C47186;
    const double C48442 = C48115 * C48097;
    const double C3778 = C48527 - (C48107 * C48098) / C47180;
    const double C47350 = C47348 / C47180;
    const double C47323 = C48199 - C47319;
    const double C7782 = C7759 - C7760;
    const double C12675 = C8109 - C8110;
    const double C12669 = C8110 - C8109;
    const double C12676 = C8111 - C8112;
    const double C12670 = C8112 - C8111;
    const double C22129 = C22106 - C22107;
    const double C24905 = C22426 - C22427;
    const double C24889 = C22427 - C22426;
    const double C47332 = C47328 + C48262;
    const double C47360 = C47357 - C47359;
    const double C26186 = C48258 * C143;
    const double C26180 = C48258 * C132;
    const double C26173 = C48258 * C142;
    const double C26167 = C48258 * C130;
    const double C26161 = C48258 * C141;
    const double C26155 = C48258 * C128;
    const double C26366 = C48258 * C279;
    const double C26360 = C48258 * C269;
    const double C26354 = C48258 * C278;
    const double C26348 = C48258 * C267;
    const double C26536 = C48258 * C403;
    const double C26530 = C48258 * C393;
    const double C26524 = C48258 * C402;
    const double C26518 = C48258 * C391;
    const double C29314 = C48258 * C693;
    const double C29308 = C48258 * C684;
    const double C29544 = C48258 * C944;
    const double C29538 = C48258 * C935;
    const double C29519 = C48258 * C401;
    const double C29513 = C48258 * C389;
    const double C30098 = C48258 * C692;
    const double C30092 = C48258 * C682;
    const double C30644 = C48258 * C943;
    const double C30638 = C48258 * C933;
    const double C46730 = C48258 * C2334;
    const double C46724 = C48258 * C2322;
    const double C47150 = C48258 * C2793;
    const double C47144 = C48258 * C2785;
    const double C48464 = C48258 * C48252;
    const double C48502 = C48466 + C48258;
    const double C3829 = C3821 + C3822;
    const double C1098 = C48517 * C271;
    const double C1091 = C48517 * C279;
    const double C1085 = C48517 * C269;
    const double C1079 = C48517 * C278;
    const double C1073 = C48517 * C267;
    const double C1294 = C48517 * C584;
    const double C1288 = C48517 * C591;
    const double C1282 = C48517 * C582;
    const double C1480 = C48517 * C686;
    const double C1474 = C48517 * C693;
    const double C1468 = C48517 * C684;
    const double C16520 = C48517 * C2334;
    const double C16514 = C48517 * C2322;
    const double C16508 = C48517 * C692;
    const double C16502 = C48517 * C682;
    const double C16959 = C48517 * C2335;
    const double C16953 = C48517 * C2323;
    const double C16947 = C48517 * C1460;
    const double C16941 = C48517 * C1452;
    const double C17379 = C48517 * C3236;
    const double C17373 = C48517 * C3230;
    const double C32074 = C48517 * C1461;
    const double C32068 = C48517 * C1454;
    const double C26182 = C48265 * C271;
    const double C26175 = C48265 * C279;
    const double C26169 = C48265 * C269;
    const double C26163 = C48265 * C278;
    const double C26157 = C48265 * C267;
    const double C26362 = C48265 * C584;
    const double C26356 = C48265 * C591;
    const double C26350 = C48265 * C582;
    const double C26532 = C48265 * C686;
    const double C26526 = C48265 * C693;
    const double C26520 = C48265 * C684;
    const double C29316 = C48265 * C1461;
    const double C29310 = C48265 * C1454;
    const double C29521 = C48265 * C692;
    const double C29515 = C48265 * C682;
    const double C30100 = C48265 * C1460;
    const double C30094 = C48265 * C1452;
    const double C30646 = C48265 * C2334;
    const double C30640 = C48265 * C2322;
    const double C46732 = C48265 * C2335;
    const double C46726 = C48265 * C2323;
    const double C47152 = C48265 * C3236;
    const double C47146 = C48265 * C3230;
    const double C48468 = C48265 / C47186;
    const double C48465 = C48265 * C48252;
    const double C11069 = C48531 - (C48258 * C48254) / C47180;
    const double C7775 = C7738 * C133;
    const double C7769 = C7738 * C122;
    const double C7764 = C7738 * C131;
    const double C7758 = C7738 * C121;
    const double C7752 = C7738 * C129;
    const double C7746 = C7738 * C120;
    const double C7955 = C7738 * C270;
    const double C7949 = C7738 * C261;
    const double C7943 = C7738 * C268;
    const double C7937 = C7738 * C260;
    const double C8125 = C7738 * C394;
    const double C8119 = C7738 * C385;
    const double C8113 = C7738 * C392;
    const double C8107 = C7738 * C384;
    const double C10101 = C7738 * C936;
    const double C10095 = C7738 * C929;
    const double C10090 = C7738 * C934;
    const double C10084 = C7738 * C928;
    const double C10078 = C7738 * C390;
    const double C10072 = C7738 * C383;
    const double C10531 = C7738 * C2324;
    const double C10525 = C7738 * C2316;
    const double C10519 = C7738 * C683;
    const double C10513 = C7738 * C677;
    const double C10959 = C7738 * C2786;
    const double C10953 = C7738 * C2781;
    const double C12468 = C7738 * C685;
    const double C12462 = C7738 * C678;
    const double C1110 = C1089 - C1090;
    const double C1107 = C1083 - C1084;
    const double C32280 = C1471 - C1472;
    const double C32274 = C1472 - C1471;
    const double C32277 = C1465 - C1466;
    const double C32271 = C1466 - C1465;
    const double C17367 = C16518 - C16519;
    const double C17364 = C16512 - C16513;
    const double C171 = C158 - C159;
    const double C3827 = C3809 - C3810;
    const double C6535 = C6509 + C6510;
    const double C6533 = C6505 + C6506;
    const double C20872 = C2808 * C47206;
    const double C34439 = C2808 * C23272;
    const double C19764 = C7618 - C7617;
    const double C10948 = C10085 - C10086;
    const double C26013 = C24894 - C24895;
    const double C10949 = C10087 - C10088;
    const double C17366 = C16516 - C16517;
    const double C21969 = C19772 - C19771;
    const double C42691 = C26021 - C26020;
    const double C18118 = C18108 + C18109;
    const double C172 = C160 - C161;
    const double C3826 = C3807 - C3808;
    const double C22133 = C22114 - C22115;
    const double C4957 = C417 - C416;
    const double C5223 = C416 - C417;
    const double C1109 = C1087 - C1088;
    const double C7783 = C7761 - C7762;
    const double C6088 = C4128 - C4127;
    const double C6514 = C4127 - C4128;
    const double C27492 = C22435 - C22434;
    const double C27894 = C22434 - C22435;
    const double C2468 = C2460 - C2461;
    const double C2816 = C2461 - C2460;
    const double C145 =
        (4 * (2 * C47456 + ae * C47457 + C47424 * C47476) +
         ae * (3 * C47457 + C47424 * C47477) +
         C47424 * (3 * C47476 + ae * C47477 +
                   C47424 * (2 * C47472 + ae * C47473 +
                             C47424 * (C47468 + ae * C47424 * C47469 +
                                       C47424 * (ae * C47469 +
                                                 C47424 * std::pow(C47428, 7) *
                                                     bs[7] * C47435))))) /
        C47185;
    const double C280 =
        (be * (2 * (C47424 * C47514 + C47510 * ae) +
               C47424 *
                   (C47514 +
                    C47424 * (C47424 * C47447 * C47448 * C47509 + C47513 * ae) +
                    C47424 * C47513 * ae) +
               (C47510 + C47513 * C47449) * ae) +
         C47423 * (2 * C47456 + ae * C47457 + C47424 * C47476)) /
        C47185;
    const double C404 =
        ((zP - zQ) * (2 * C47456 + ae * C47457 + C47424 * C47476)) / C47185;
    const double C945 = (C47442 + ae * C47445 + C47424 * C47456 +
                         C47476 * std::pow(zP - zQ, 2)) /
                        C47185;
    const double C2629 = C48199 * C2326;
    const double C6520 = C48262 * C2326;
    const double C10098 = C7733 * C2326;
    const double C16527 = C48517 * C2326;
    const double C18466 = C48461 * C2326;
    const double C24462 = C48262 * C2326;
    const double C24679 = C22083 * C2326;
    const double C29540 = C48265 * C2326;
    const double C10100 = C48494 * C2327;
    const double C16529 = C48494 * C2327;
    const double C18468 = C48262 * C2327;
    const double C24681 = C48262 * C2327;
    const double C29542 = C26144 * C2327;
    const double C18678 = C48262 * C3232;
    const double C20017 = C48199 * C3232;
    const double C24915 = C48262 * C3232;
    const double C20876 = C20150 * C47206;
    const double C34443 = C20150 * C23272;
    const double C47900 = C47898 + C47893;
    const double C3824 = C3803 - C3804;
    const double C7785 = C7765 - C7766;
    const double C22131 = C22110 - C22111;
    const double C2455 = C415 - C414;
    const double C2813 = C414 - C415;
    const double C6089 = C4130 - C4129;
    const double C6515 = C4129 - C4130;
    const double C6512 = C4123 - C4124;
    const double C6508 = C4124 - C4123;
    const double C12678 = C8115 - C8116;
    const double C12672 = C8116 - C8115;
    const double C24907 = C22430 - C22431;
    const double C24891 = C22431 - C22430;
    const double C2815 = C2459 - C2458;
    const double C2809 = C2458 - C2459;
    const double C18673 = C6521 - C6522;
    const double C18669 = C6522 - C6521;
    const double C19766 = C7622 - C7621;
    const double C10951 = C10091 - C10092;
    const double C26015 = C24898 - C24899;
    const double C21971 = C19776 - C19775;
    const double C42693 = C26025 - C26024;
    const double C18123 = C18119 + C18120;
    const double C273 = (C47423 * (3 * C47457 + C47424 * C47477) +
                         (3 * C47742 + C47424 * C47747) * be) /
                        C47180;
    const double C586 =
        (2 * C47445 + C47424 * C47457 +
         C47423 * (C47423 * C47477 + C47747 * be) + C47423 * C47747 * be) /
        C47180;
    const double C688 = (C47638 * (C47423 * C47477 + C47747 * be)) / C47180;
    const double C124 = 4 * (2 * C47740 + C47424 * C47742) +
                        C47424 * (3 * C47742 + C47424 * C47747);
    const double C263 = C47423 * (3 * C47742 + C47424 * C47747);
    const double C387 = C47638 * (3 * C47742 + C47424 * C47747);
    const double C578 = 2 * C47740 + C47424 * C47742 + C47747 * C47609;
    const double C680 = C47638 * C47423 * C47747;
    const double C931 = 2 * C47740 + C47424 * C47742 + C47747 * C47646;
    const double C1265 =
        2 * C47423 * C47747 + C47423 * (C47747 + C47539 * C47609);
    const double C1451 = C47638 * (C47747 + C47539 * C47609);
    const double C2615 = C47423 * C47747 + C47423 * C47539 * C47646;
    const double C2784 =
        2 * C47638 * C47747 + C47638 * (C47747 + C47539 * C47646);
    const double C2632 = C113 * C2320;
    const double C6527 = C3783 * C2320;
    const double C24470 = C22090 * C2320;
    const double C1751 =
        (3 * (C47457 + C47423 * C47844 + C47842 * be) +
         C47423 * (2 * C47844 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47535 * be) +
                             C47423 * C47535 * be) +
                   C47845 * be) +
         (2 * C47842 + C47423 * C47845) * be) /
        C47180;
    const double C1909 =
        (C47638 * (2 * C47844 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47535 * be) +
                             C47423 * C47535 * be) +
                   C47845 * be)) /
        C47180;
    const double C2330 =
        (C47423 * C47457 + C47742 * be + C47844 * C47646) / C47180;
    const double C2331 = (C47457 + C47423 * C47844 + C47842 * be +
                          (C47473 + C47423 * (C47423 * C47497 + C47535 * be) +
                           C47423 * C47535 * be) *
                              C47646) /
                         C47180;
    const double C3234 =
        (2 * C47638 * C47844 +
         C47638 * (C47844 + (C47423 * C47497 + C47535 * be) * C47646)) /
        C47180;
    const double C11251 = C48504 * C1749;
    const double C23443 = C48504 * C1749;
    const double C11397 = C48504 * C1907;
    const double C12467 = C48494 * C1907;
    const double C23589 = C48504 * C1907;
    const double C29312 = C26144 * C1907;
    const double C32070 = C48494 * C1907;
    const double C12466 = C7740 * C1903;
    const double C32069 = C1066 * C1903;
    const double C10099 = C7740 * C2319;
    const double C16528 = C1066 * C2319;
    const double C18467 = C3783 * C2319;
    const double C24680 = C22090 * C2319;
    const double C47913 = C47459 + C47911;
    const double C47541 = C47540 + C47531;
    const double C1750 = (3 * (C47554 + C47524 * C47609) +
                          C47423 * (2 * C47614 + C47423 * C47619)) /
                         C47180;
    const double C1908 = (C47638 * (2 * C47614 + C47423 * C47619)) / C47180;
    const double C2329 = (C47554 + C47524 * C47609 + C47619 * C47646) / C47180;
    const double C47672 = C47472 + C47668;
    const double C17628 =
        (4 * (2 * C47638 * C47524 + C47638 * C47975) +
         C47638 *
             (3 * C47975 + C47638 * (2 * C47638 * C47536 +
                                     C47638 * (C47536 + C47577 * C47646)))) /
        C47180;
    const double C9090 = 4 * (2 * C47826 + C47423 * C47829) +
                         C47423 * (3 * C47829 + C47423 * C47899);
    const double C9180 = C47638 * (3 * C47829 + C47423 * C47899);
    const double C9648 = 2 * C47826 + C47423 * C47829 + C47899 * C47646;
    const double C10508 =
        2 * C47638 * C47899 + C47638 * (C47899 + C47936 * C47646);
    const double C47937 = C47935 + C47930;
    const double C17866 =
        (4 * (2 * C47638 * C47892 + C47638 * C47978) +
         C47638 * (3 * C47978 + C47638 * (2 * C47638 * C47929 +
                                          C47638 * (C47929 + (C47423 * C47493 +
                                                              C47529 * be) *
                                                                 C47646)))) /
        C47180;
    const double C18103 =
        5 * (3 * C48078 + C47638 * C48091) +
        C47638 * (4 * C48091 +
                  C47638 * (3 * C48089 +
                            C47638 * (2 * C47638 * C47519 +
                                      C47638 * (C47519 + C47529 * C47646))));
    const double C47559 = C47558 + C47557;
    const double C1754 =
        (3 * (C47456 + be * C47614 + C47423 * C47618) +
         be * (2 * C47614 + C47423 * C47619) +
         C47423 * (2 * C47618 + be * C47619 +
                   C47423 * (C47472 + be * C47423 * C47536 +
                             C47423 * (be * C47536 + C47423 * C47496)))) /
        C47185;
    const double C1912 =
        ((zP - zQ) * (2 * C47618 + be * C47619 +
                      C47423 * (C47472 + be * C47423 * C47536 +
                                C47423 * (be * C47536 + C47423 * C47496)))) /
        C47185;
    const double C2336 =
        (be * C47554 + C47423 * C47456 + C47618 * std::pow(zP - zQ, 2)) /
        C47185;
    const double C2337 = (C47456 + be * C47614 + C47423 * C47618 +
                          (C47472 + be * C47423 * C47536 +
                           C47423 * (be * C47536 + C47423 * C47496)) *
                              std::pow(zP - zQ, 2)) /
                         C47185;
    const double C3237 = (2 * C47638 * C47618 +
                          C47638 * (C47618 + (be * C47536 + C47423 * C47496) *
                                                 std::pow(C47638, 2))) /
                         C47185;
    const double C2630 = C113 * C2328;
    const double C6523 = C3783 * C2328;
    const double C10103 = C7739 * C2328;
    const double C16532 = C1065 * C2328;
    const double C18469 = C3782 * C2328;
    const double C24467 = C22090 * C2328;
    const double C18681 = C3783 * C3233;
    const double C20018 = C113 * C3233;
    const double C24918 = C22090 * C3233;
    const double C32282 = C1475 - C1476;
    const double C32276 = C1476 - C1475;
    const double C12679 = C8117 - C8118;
    const double C12673 = C8118 - C8117;
    const double C20153 = C2820 - C2821;
    const double C20151 = C2821 - C2820;
    const double C10952 = C10093 - C10094;
    const double C17369 = C16522 - C16523;
    const double C9096 =
        (4 * (2 * C47610 + be * C47612 + C47423 * C47661) +
         be * (3 * C47612 + C47423 * C47662) +
         C47423 *
             (3 * C47661 + be * C47662 +
              C47423 * (2 * C47655 + be * C47657 +
                        C47423 * (C47468 + be * C47423 * C47530 +
                                  C47423 * (be * C47530 + C47423 * C47492))))) /
        C47185;
    const double C9186 =
        (C47638 *
         (3 * C47661 + be * C47662 +
          C47423 * (2 * C47655 + be * C47657 +
                    C47423 * (C47468 + be * C47423 * C47530 +
                              C47423 * (be * C47530 + C47423 * C47492))))) /
        C47185;
    const double C18124 = C18121 + C18122;
    const double C47503 = C47424 * C47501;
    const double C1272 =
        (2 * (C47423 * C47477 + C47747 * be) +
         C47423 * (C47477 + C47423 * (C47423 * C47501 + C47539 * be) +
                   C47423 * C47539 * be) +
         (C47747 + C47539 * C47609) * be) /
        C47180;
    const double C1458 =
        (C47638 * (C47477 + C47423 * (C47423 * C47501 + C47539 * be) +
                   C47423 * C47539 * be)) /
        C47180;
    const double C2616 = (C47423 * C47477 + C47747 * be +
                          (C47423 * C47501 + C47539 * be) * C47646) /
                         C47180;
    const double C2791 =
        (2 * C47638 * C47477 + C47638 * (C47477 + C47501 * C47646)) / C47180;
    const double C47502 = C47424 * C47500;
    const double C47623 = C47423 * C47500;
    const double C2795 = (2 * C47638 * C47476 +
                          C47638 * (C47476 + C47500 * std::pow(C47638, 2))) /
                         C47185;
    const double C3660 =
        (3 * (C47476 + C47500 * C47646) +
         C47638 * (2 * C47638 * C47500 +
                   C47638 * (C47500 + (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47646))) /
        C47185;
    const double C47673 = C47423 * C47669;
    const double C17540 =
        (3 * (C47618 + C47669 * C47646) +
         C47638 * (2 * C47638 * C47669 +
                   C47638 * (C47669 + (be * C47577 +
                                       C47423 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47646))) /
        C47185;
    const double C17630 =
        (4 * (2 * C47638 * C47472 + C47638 * C47716) +
         C47638 * (3 * C47716 +
                   C47638 * (2 * C47638 * C47496 +
                             C47638 * (C47496 + (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47646)))) /
        C47185;
    const double C47697 = C47423 * C47695;
    const double C10068 =
        (2 * C47638 * C47661 + C47638 * (C47661 + C47695 * C47646)) / C47185;
    const double C10945 =
        (3 * (C47661 + C47695 * C47646) +
         C47638 * (2 * C47638 * C47695 +
                   C47638 * (C47695 + (C47492 + be * C47423 * C47574 +
                                       C47423 * (be * C47574 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47646))) /
        C47185;
    const double C17868 =
        (4 * (2 * C47638 * C47655 + C47638 * C47719) +
         C47638 * (3 * C47719 +
                   C47638 * (2 * C47638 * C47689 +
                             C47638 * (C47689 + (be * C47574 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47646)))) /
        C47185;
    const double C18106 =
        (5 * (3 * C47713 + C47638 * C47726) +
         C47638 * (4 * C47726 +
                   C47638 * (3 * C47724 +
                             C47638 * (2 * C47638 * C47492 +
                                       C47638 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47646))))) /
        C47185;
    const double C47580 = C47579 + C47575;
    const double C47674 = C47423 * C47671;
    const double C10067 =
        (2 * C47638 * C47619 + C47638 * (C47619 + C47671 * C47646)) / C47180;
    const double C47698 = C47423 * C47696;
    const double C10510 =
        (2 * C47638 * C47662 + C47638 * (C47662 + C47696 * C47646)) / C47180;
    const double C165 = C48199 * C136;
    const double C421 = C48199 * C397;
    const double C2465 = C48199 * C939;
    const double C47752 = C47750 + C47751;
    const double C9091 = 4 * (2 * C47834 + C47423 * C47837) +
                         C47423 * (3 * C47837 + C47423 * C47914);
    const double C9181 = C47638 * (3 * C47837 + C47423 * C47914);
    const double C9912 = 2 * C47834 + C47423 * C47837 + C47914 * C47646;
    const double C47940 = C47928 + C47938;
    const double C10535 = C7740 * C9652;
    const double C16960 = C1066 * C9652;
    const double C48470 = C48300 * C48294;
    const double C48508 = C48472 + C48300;
    const double C48474 = C48307 / C47186;
    const double C48471 = C48307 * C48294;
    const double C19881 = C48533 - (C48300 * C48296) / C47180;
    const double C47229 = C47220 - C47226;
    const double C47219 = C47214 * be;
    const double C118 =
        (C47241 / C47186 + (0 * ae) / C47180) / C47186 - (0 * be) / C47180;
    const double C3787 = C47241 / C47186 - (0 * be) / C47180;
    const double C22094 = C47241 / C47186 + (0 * ae) / C47180;
    const double C47218 = C47213 * ae;
    const double C1067 =
        ((-C47181 / C47180) / C47186 - (C47199 * be) / C47180) / C47186 -
        ((C47178 * ((-C47188) / C47186 - (C47213 * be) / C47180) + C23265) *
         be) /
            C47180 +
        (-C47200 / C47180) / C47186 - (0 * be) / C47180;
    const double C1068 =
        ((-C47188) / C47186 - (C47213 * be) / C47180) / C47186 -
        ((C47178 * ((-C47200 / C47180) / C47186 - (0 * be) / C47180) + C48112) *
         be) /
            C47180;
    const double C23271 = (-C47188) / C47186 - (C47213 * be) / C47180;
    const double C48476 = C48438 / C47180;
    const double C48514 = C48480 / C47186;
    const double C48515 = C48482 + C48446;
    const double C3780 = C48446 - C48113 / C47192;
    const double C48479 = C48442 / C47180;
    const double C47352 = C47347 - C47350;
    const double C47327 = C47323 * ae;
    const double C22089 = (-C47309) / C47186 - (C47323 * be) / C47180;
    const double C47336 = C47332 * be;
    const double C26172 = C47360 * C577;
    const double C26166 = C47360 * C583;
    const double C26160 = C47360 * C576;
    const double C26363 = C47360 * C1264;
    const double C26357 = C47360 * C1269;
    const double C26351 = C47360 * C1263;
    const double C26533 = C47360 * C1450;
    const double C26527 = C47360 * C1455;
    const double C26521 = C47360 * C1449;
    const double C29311 = C47360 * C1903;
    const double C29541 = C47360 * C2319;
    const double C29524 = C47360 * C1453;
    const double C29518 = C47360 * C1448;
    const double C30101 = C47360 * C1906;
    const double C30095 = C47360 * C1902;
    const double C30647 = C47360 * C2325;
    const double C30641 = C47360 * C2317;
    const double C46733 = C47360 * C9652;
    const double C47153 = C47360 * C10065;
    const double C47147 = C47360 * C10062;
    const double C9006 =
        (C47360 / C47186 + (0 * ae) / C47180) / C47186 - (0 * be) / C47180;
    const double C11078 = C47360 / C47186 - (0 * be) / C47180;
    const double C23270 = C47360 / C47186 + (0 * ae) / C47180;
    const double C48499 = C48464 / C47180;
    const double C48521 = C48502 / C47186;
    const double C1111 = C1091 - C1092;
    const double C1108 = C1085 - C1086;
    const double C32281 = C1473 - C1474;
    const double C32275 = C1474 - C1473;
    const double C32278 = C1467 - C1468;
    const double C32272 = C1468 - C1467;
    const double C17368 = C16520 - C16521;
    const double C17365 = C16514 - C16515;
    const double C48522 = C48503 + C48468;
    const double C11071 = C48468 - C48263 / C47192;
    const double C48501 = C48465 / C47180;
    const double C11107 = C11069 * C142;
    const double C11099 = C11069 * C130;
    const double C11090 = C11069 * C141;
    const double C11082 = C11069 * C128;
    const double C11253 = C11069 * C278;
    const double C11245 = C11069 * C267;
    const double C11399 = C11069 * C402;
    const double C11391 = C11069 * C391;
    const double C14122 = C11069 * C401;
    const double C14114 = C11069 * C389;
    const double C14497 = C11069 * C692;
    const double C14489 = C11069 * C682;
    const double C14871 = C11069 * C943;
    const double C14863 = C11069 * C933;
    const double C7784 = C7763 - C7764;
    const double C7781 = C7757 - C7758;
    const double C12677 = C8113 - C8114;
    const double C12671 = C8114 - C8113;
    const double C12674 = C8107 - C8108;
    const double C12668 = C8108 - C8107;
    const double C10950 = C10089 - C10090;
    const double C10947 = C10083 - C10084;
    const double C19777 = C19763 + C19764;
    const double C21981 = C21968 + C21969;
    const double C3831 = C3825 + C3826;
    const double C6091 = C6087 + C6088;
    const double C6537 = C6513 + C6514;
    const double C3666 = C2468 * C1069;
    const double C16091 = C2468 * C7743;
    const double C37266 = C2468 * C47241;
    const double C167 = C48199 * C145;
    const double C295 = C48199 * C280;
    const double C1104 = C48517 * C280;
    const double C3811 = C48262 * C280;
    const double C3984 = C48461 * C280;
    const double C7778 = C7733 * C280;
    const double C22118 = C48262 * C280;
    const double C22291 = C22083 * C280;
    const double C26188 = C48265 * C280;
    const double C419 = C48199 * C404;
    const double C4138 = C48461 * C404;
    const double C22445 = C22083 * C404;
    const double C2462 = C48199 * C945;
    const double C6530 = C48461 * C945;
    const double C24473 = C22083 * C945;
    const double C18672 = C6519 - C6520;
    const double C18668 = C6520 - C6519;
    const double C24909 = C24463 - C24462;
    const double C24901 = C24462 - C24463;
    const double C9092 =
        (4 * (2 * C47828 + C47423 * C47900 + C47829 * be) +
         C47423 *
             (3 * C47900 +
              C47423 *
                  (2 * C47892 +
                   C47423 * (C47453 + C47423 * (C47423 * C47469 + C47519 * be) +
                             C47423 * C47519 * be) +
                   C47894 * be) +
              C47899 * be) +
         (3 * C47829 + C47423 * C47899) * be) /
        C47180;
    const double C9182 =
        (C47638 *
         (3 * C47900 +
          C47423 *
              (2 * C47892 +
               C47423 * (C47453 + C47423 * (C47423 * C47469 + C47519 * be) +
                         C47423 * C47519 * be) +
               C47894 * be) +
          C47899 * be)) /
        C47180;
    const double C3830 = C3823 + C3824;
    const double C6536 = C6511 + C6512;
    const double C6534 = C6507 + C6508;
    const double C3665 = C2809 * C1062;
    const double C16090 = C2809 * C48513;
    const double C20873 = C2809 * C48112;
    const double C34440 = C2809 * C48112;
    const double C37265 = C2809 * C48115;
    const double C19778 = C19765 + C19766;
    const double C21982 = C21970 + C21971;
    const double C297 = C48199 * C273;
    const double C3816 = C48262 * C273;
    const double C22123 = C48262 * C273;
    const double C1100 = C48494 * C586;
    const double C3982 = C48262 * C586;
    const double C7774 = C48494 * C586;
    const double C22289 = C48262 * C586;
    const double C26184 = C26144 * C586;
    const double C4136 = C48262 * C688;
    const double C5090 = C48199 * C688;
    const double C22443 = C48262 * C688;
    const double C164 = C113 * C124;
    const double C296 = C113 * C263;
    const double C3815 = C3783 * C263;
    const double C22122 = C22090 * C263;
    const double C420 = C113 * C387;
    const double C1099 = C1066 * C578;
    const double C3981 = C3783 * C578;
    const double C7773 = C7740 * C578;
    const double C22288 = C22090 * C578;
    const double C26183 = C47360 * C578;
    const double C4135 = C3783 * C680;
    const double C5089 = C113 * C680;
    const double C22442 = C22090 * C680;
    const double C2464 = C113 * C931;
    const double C2633 = C48199 * C2330;
    const double C6528 = C48262 * C2330;
    const double C24471 = C48262 * C2330;
    const double C47915 = C47913 + C47908;
    const double C47562 = C47424 * C47541;
    const double C47567 = 3 * C47541;
    const double C47622 = be * C47541;
    const double C47621 = C47423 * C47541;
    const double C1462 =
        ((zP - zQ) * (C47476 + be * C47423 * C47541 +
                      C47423 * (be * C47541 + C47423 * C47500))) /
        C47185;
    const double C12472 = C7740 * C1908;
    const double C29317 = C47360 * C1908;
    const double C32075 = C1066 * C1908;
    const double C10105 = C7740 * C2329;
    const double C16534 = C1066 * C2329;
    const double C18471 = C3783 * C2329;
    const double C24684 = C22090 * C2329;
    const double C29547 = C47360 * C2329;
    const double C10529 = C7740 * C9648;
    const double C16954 = C1066 * C9648;
    const double C46727 = C47360 * C9648;
    const double C47939 = C47423 * C47937;
    const double C10064 =
        (2 * C47638 * C47900 + C47638 * (C47900 + C47937 * C47646)) / C47180;
    const double C10941 =
        (3 * (C47900 + C47937 * C47646) +
         C47638 *
             (2 * C47638 * C47937 +
              C47638 *
                  (C47937 + (C47469 + C47423 * (C47423 * C47493 + C47529 * be) +
                             C47423 * C47529 * be) *
                                C47646))) /
        C47180;
    const double C592 =
        (C47442 + ae * C47445 + C47424 * C47456 + be * C47423 * C47559 +
         C47423 * (be * C47559 + C47423 * C47476)) /
        C47185;
    const double C694 = ((zP - zQ) * (be * C47559 + C47423 * C47476)) / C47185;
    const double C1276 = (2 * (be * C47559 + C47423 * C47476) +
                          be * (C47559 + C47541 * std::pow(C47423, 2)) +
                          C47423 * (C47476 + be * C47423 * C47541 +
                                    C47423 * (be * C47541 + C47423 * C47500))) /
                         C47185;
    const double C135 = (3 * (C47550 + C47424 * C47554 + C47740 * ae) +
                         C47424 * (2 * C47554 + C47424 * C47559 + C47742 * ae) +
                         (2 * C47740 + C47424 * C47742) * ae) /
                        C47180;
    const double C272 =
        (C47423 * (2 * C47554 + C47424 * C47559 + C47742 * ae)) / C47180;
    const double C396 =
        (C47638 * (2 * C47554 + C47424 * C47559 + C47742 * ae)) / C47180;
    const double C585 =
        (C47550 + C47424 * C47554 + C47740 * ae + C47559 * C47609) / C47180;
    const double C687 = (C47638 * C47423 * C47559) / C47180;
    const double C938 =
        (C47550 + C47424 * C47554 + C47740 * ae + C47559 * C47646) / C47180;
    const double C1271 =
        (2 * C47423 * C47559 + C47423 * (C47559 + C47541 * C47609)) / C47180;
    const double C1457 = (C47638 * (C47559 + C47541 * C47609)) / C47180;
    const double C2790 =
        (2 * C47638 * C47559 + C47638 * (C47559 + C47541 * C47646)) / C47180;
    const double C11259 = C48504 * C1754;
    const double C23451 = C48504 * C1754;
    const double C11405 = C48504 * C1912;
    const double C12473 = C48494 * C1912;
    const double C23597 = C48504 * C1912;
    const double C29318 = C26144 * C1912;
    const double C32076 = C48494 * C1912;
    const double C2631 = C48199 * C2336;
    const double C6524 = C48262 * C2336;
    const double C10104 = C7733 * C2336;
    const double C16533 = C48517 * C2336;
    const double C18470 = C48461 * C2336;
    const double C24466 = C48262 * C2336;
    const double C24683 = C22083 * C2336;
    const double C29546 = C48265 * C2336;
    const double C10106 = C48494 * C2337;
    const double C16535 = C48494 * C2337;
    const double C18472 = C48262 * C2337;
    const double C24685 = C48262 * C2337;
    const double C29548 = C26144 * C2337;
    const double C18682 = C48262 * C3237;
    const double C20019 = C48199 * C3237;
    const double C24919 = C48262 * C3237;
    const double C20877 = C20151 * C48112;
    const double C34444 = C20151 * C48112;
    const double C14503 = C48504 * C9186;
    const double C41231 = C48504 * C9186;
    const double C47505 = C47485 + C47503;
    const double C47504 = C47486 + C47502;
    const double C2825 = C48199 * C2795;
    const double C47675 = C47672 + C47673;
    const double C47699 = C47687 + C47697;
    const double C10964 = C48494 * C10068;
    const double C17381 = C48494 * C10068;
    const double C21607 = C48262 * C10068;
    const double C42329 = C48262 * C10068;
    const double C47154 = C26144 * C10068;
    const double C47581 = C47424 * C47580;
    const double C47624 = C47580 * C47609;
    const double C3657 =
        (3 * (C47559 + C47541 * C47646) +
         C47638 * (2 * C47638 * C47541 + C47638 * (C47541 + C47580 * C47646))) /
        C47180;
    const double C47676 = C47670 + C47674;
    const double C47700 = C47685 + C47698;
    const double C125 = 5 * (3 * C47742 + C47424 * C47747) +
                        C47424 * (4 * C47747 + C47424 * C47752);
    const double C264 = C47423 * (4 * C47747 + C47424 * C47752);
    const double C388 = C47638 * (4 * C47747 + C47424 * C47752);
    const double C579 = 3 * C47742 + C47424 * C47747 + C47752 * C47609;
    const double C681 = C47638 * C47423 * C47752;
    const double C932 = 3 * C47742 + C47424 * C47747 + C47752 * C47646;
    const double C9332 = 5 * (3 * C47829 + C47423 * C47899) +
                         C47423 * (4 * C47899 + C47423 * C47940);
    const double C9418 = C47638 * (4 * C47899 + C47423 * C47940);
    const double C9649 = 3 * C47829 + C47423 * C47899 + C47940 * C47646;
    const double C48505 = C48470 / C47180;
    const double C48524 = C48508 / C47186;
    const double C48525 = C48509 + C48474;
    const double C19883 = C48474 - C48305 / C47192;
    const double C48507 = C48471 / C47180;
    const double C47223 = C47219 / C47180;
    const double C47222 = C47218 / C47180;
    const double C3672 = C3662 * C1067;
    const double C3664 = C2808 * C1068;
    const double C34441 = C18110 * C23271;
    const double C34437 = C3662 * C23271;
    const double C48535 = C48476 + C48527;
    const double C3779 = C48514 - (C48115 * C48098) / C47180;
    const double C105 = C48515 / C47186 - C48113 / C48483;
    const double C48528 = C48479 + C48514;
    const double C47331 = C47327 / C47180;
    const double C22120 = C22089 * C123;
    const double C22117 = C22089 * C133;
    const double C22113 = C22089 * C122;
    const double C22109 = C22089 * C131;
    const double C22105 = C22089 * C121;
    const double C22101 = C22089 * C129;
    const double C22097 = C22089 * C120;
    const double C22286 = C22089 * C262;
    const double C22282 = C22089 * C270;
    const double C22278 = C22089 * C261;
    const double C22274 = C22089 * C268;
    const double C22270 = C22089 * C260;
    const double C22440 = C22089 * C386;
    const double C22436 = C22089 * C394;
    const double C22432 = C22089 * C385;
    const double C22428 = C22089 * C392;
    const double C22424 = C22089 * C384;
    const double C24468 = C22089 * C930;
    const double C24465 = C22089 * C936;
    const double C24461 = C22089 * C929;
    const double C24682 = C22089 * C2328;
    const double C24678 = C22089 * C2318;
    const double C24674 = C22089 * C685;
    const double C24670 = C22089 * C678;
    const double C24916 = C22089 * C2788;
    const double C24912 = C22089 * C2782;
    const double C24897 = C22089 * C934;
    const double C24893 = C22089 * C928;
    const double C24885 = C22089 * C390;
    const double C24881 = C22089 * C383;
    const double C25474 = C22089 * C2324;
    const double C25470 = C22089 * C2316;
    const double C25466 = C22089 * C683;
    const double C25462 = C22089 * C677;
    const double C26022 = C22089 * C2786;
    const double C26018 = C22089 * C2781;
    const double C27691 = C22089 * C679;
    const double C42326 = C22089 * C3231;
    const double C42322 = C22089 * C3227;
    const double C42698 = C22089 * C3653;
    const double C42694 = C22089 * C3649;
    const double C47342 = C47336 / C47180;
    const double C26193 = C26171 - C26172;
    const double C29536 = C26527 - C26528;
    const double C29530 = C26528 - C26527;
    const double C29533 = C26521 - C26522;
    const double C29527 = C26522 - C26521;
    const double C47142 = C30648 - C30647;
    const double C47139 = C30642 - C30641;
    const double C11104 = C11078 * C1264;
    const double C11097 = C11078 * C1269;
    const double C11089 = C11078 * C1263;
    const double C11258 = C11078 * C1750;
    const double C11250 = C11078 * C1745;
    const double C11404 = C11078 * C1908;
    const double C11396 = C11078 * C1903;
    const double C14129 = C11078 * C1906;
    const double C14121 = C11078 * C1902;
    const double C14502 = C11078 * C9183;
    const double C14494 = C11078 * C9180;
    const double C14876 = C11078 * C9652;
    const double C14868 = C11078 * C9648;
    const double C23296 = C23270 * C1264;
    const double C23289 = C23270 * C1269;
    const double C23281 = C23270 * C1263;
    const double C23450 = C23270 * C1750;
    const double C23442 = C23270 * C1745;
    const double C23596 = C23270 * C1908;
    const double C23588 = C23270 * C1903;
    const double C40857 = C23270 * C1906;
    const double C40849 = C23270 * C1902;
    const double C41230 = C23270 * C9183;
    const double C41222 = C23270 * C9180;
    const double C41604 = C23270 * C9652;
    const double C41596 = C23270 * C9648;
    const double C48536 = C48499 + C48531;
    const double C11070 = C48521 - (C48265 * C48254) / C47180;
    const double C1114 = C1110 + C1111;
    const double C1113 = C1107 + C1108;
    const double C32286 = C32280 + C32281;
    const double C32284 = C32274 + C32275;
    const double C32285 = C32277 + C32278;
    const double C32283 = C32271 + C32272;
    const double C17383 = C17367 + C17368;
    const double C17382 = C17364 + C17365;
    const double C23295 = C48522 * C584;
    const double C23286 = C48522 * C591;
    const double C23278 = C48522 * C582;
    const double C23449 = C48522 * C1275;
    const double C23441 = C48522 * C1268;
    const double C23595 = C48522 * C1461;
    const double C23587 = C48522 * C1454;
    const double C40854 = C48522 * C1460;
    const double C40846 = C48522 * C1452;
    const double C41229 = C48522 * C1911;
    const double C41221 = C48522 * C1905;
    const double C41603 = C48522 * C2335;
    const double C41595 = C48522 * C2323;
    const double C8999 = C48522 / C47186 - C48263 / C48483;
    const double C11103 = C11071 * C584;
    const double C11094 = C11071 * C591;
    const double C11086 = C11071 * C582;
    const double C11257 = C11071 * C1275;
    const double C11249 = C11071 * C1268;
    const double C11403 = C11071 * C1461;
    const double C11395 = C11071 * C1454;
    const double C14126 = C11071 * C1460;
    const double C14118 = C11071 * C1452;
    const double C14501 = C11071 * C1911;
    const double C14493 = C11071 * C1905;
    const double C14875 = C11071 * C2335;
    const double C14867 = C11071 * C2323;
    const double C48532 = C48501 + C48521;
    const double C7788 = C7784 + C7785;
    const double C7787 = C7781 + C7782;
    const double C12683 = C12677 + C12678;
    const double C12681 = C12671 + C12672;
    const double C12682 = C12674 + C12675;
    const double C12680 = C12668 + C12669;
    const double C10966 = C10950 + C10951;
    const double C10965 = C10947 + C10948;
    const double C21966 = C19777 * C9007;
    const double C38875 = C19777 * C23271;
    const double C21983 = C21981 * C9007;
    const double C18685 = C18671 + C18672;
    const double C18683 = C18667 + C18668;
    const double C14495 = C48504 * C9182;
    const double C41223 = C48504 * C9182;
    const double C19780 = C19778 * C48439;
    const double C21967 = C19778 * C48102;
    const double C38876 = C19778 * C23265;
    const double C21984 = C21982 * C48102;
    const double C9094 =
        (4 * (2 * C47836 + C47423 * C47915 + C47837 * be) +
         C47423 * (3 * C47915 +
                   C47423 * (2 * C47907 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47571 * be) +
                                       C47423 * C47571 * be) +
                             C47909 * be) +
                   C47914 * be) +
         (3 * C47837 + C47423 * C47914) * be) /
        C47180;
    const double C9184 =
        (C47638 * (3 * C47915 +
                   C47423 * (2 * C47907 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47571 * be) +
                                       C47423 * C47571 * be) +
                             C47909 * be) +
                   C47914 * be)) /
        C47180;
    const double C9913 =
        (2 * C47836 + C47423 * C47915 + C47837 * be +
         (2 * C47907 +
          C47423 * (C47481 + C47423 * (C47423 * C47424 * C47493 + C47571 * be) +
                    C47423 * C47571 * be) +
          C47909 * be) *
             C47646) /
        C47180;
    const double C10066 =
        (2 * C47638 * C47915 +
         C47638 * (C47915 +
                   (C47481 + C47423 * (C47423 * C47424 * C47493 + C47571 * be) +
                    C47423 * C47571 * be) *
                       C47646)) /
        C47180;
    const double C47564 = C47561 + C47562;
    const double C47625 = C47622 + C47623;
    const double C2332 = (C47423 * C47559 + C47621 * C47646) / C47180;
    const double C3235 =
        (2 * C47638 * C47621 + C47638 * (C47621 + C47423 * C47580 * C47646)) /
        C47180;
    const double C1488 = C48494 * C1462;
    const double C6302 = C48262 * C1462;
    const double C8130 = C48494 * C1462;
    const double C26540 = C26144 * C1462;
    const double C27698 = C48262 * C1462;
    const double C47941 = C47922 + C47939;
    const double C10958 = C48494 * C10064;
    const double C17375 = C48494 * C10064;
    const double C21603 = C48262 * C10064;
    const double C42325 = C48262 * C10064;
    const double C47148 = C26144 * C10064;
    const double C1093 = C48494 * C592;
    const double C1300 = C48517 * C592;
    const double C3978 = C48262 * C592;
    const double C7767 = C48494 * C592;
    const double C7958 = C7733 * C592;
    const double C11111 = C11071 * C592;
    const double C22285 = C48262 * C592;
    const double C23303 = C48522 * C592;
    const double C26177 = C26144 * C592;
    const double C26368 = C48265 * C592;
    const double C1486 = C48517 * C694;
    const double C2627 = C48199 * C694;
    const double C4132 = C48262 * C694;
    const double C6300 = C48461 * C694;
    const double C8128 = C7733 * C694;
    const double C22439 = C48262 * C694;
    const double C26538 = C48265 * C694;
    const double C27696 = C22083 * C694;
    const double C1302 = C48494 * C1276;
    const double C7960 = C48494 * C1276;
    const double C11113 = C48504 * C1276;
    const double C23305 = C48504 * C1276;
    const double C26370 = C26144 * C1276;
    const double C163 = C113 * C135;
    const double C3817 = C3782 * C135;
    const double C22124 = C22089 * C135;
    const double C294 = C113 * C272;
    const double C1103 = C1065 * C272;
    const double C3812 = C3783 * C272;
    const double C3983 = C3782 * C272;
    const double C7777 = C7739 * C272;
    const double C22119 = C22090 * C272;
    const double C22290 = C22089 * C272;
    const double C418 = C113 * C396;
    const double C4137 = C3782 * C396;
    const double C22444 = C22089 * C396;
    const double C1094 = C1066 * C585;
    const double C1299 = C1065 * C585;
    const double C3977 = C3783 * C585;
    const double C7768 = C7740 * C585;
    const double C7957 = C7739 * C585;
    const double C22284 = C22090 * C585;
    const double C26178 = C47360 * C585;
    const double C1485 = C1065 * C687;
    const double C2626 = C113 * C687;
    const double C4131 = C3783 * C687;
    const double C6299 = C3782 * C687;
    const double C8127 = C7739 * C687;
    const double C22438 = C22090 * C687;
    const double C27695 = C22089 * C687;
    const double C2463 = C113 * C938;
    const double C6529 = C3782 * C938;
    const double C24472 = C22089 * C938;
    const double C1301 = C1066 * C1271;
    const double C7959 = C7740 * C1271;
    const double C11112 = C11078 * C1271;
    const double C23304 = C23270 * C1271;
    const double C26369 = C47360 * C1271;
    const double C1487 = C1066 * C1457;
    const double C6301 = C3783 * C1457;
    const double C8129 = C7740 * C1457;
    const double C26539 = C47360 * C1457;
    const double C27697 = C22090 * C1457;
    const double C2824 = C113 * C2790;
    const double C18674 = C6523 - C6524;
    const double C18670 = C6524 - C6523;
    const double C24911 = C24467 - C24466;
    const double C24903 = C24466 - C24467;
    const double C138 = (5 * (3 * C47457 + C47424 * C47477) +
                         C47424 * (4 * C47477 + C47424 * C47505)) /
                        C47180;
    const double C275 = (C47423 * (4 * C47477 + C47424 * C47505) +
                         (4 * C47747 + C47424 * C47752) * be) /
                        C47180;
    const double C399 = (C47638 * (4 * C47477 + C47424 * C47505)) / C47180;
    const double C588 =
        (3 * C47457 + C47424 * C47477 +
         C47423 * (C47423 * C47505 + C47752 * be) + C47423 * C47752 * be) /
        C47180;
    const double C690 = (C47638 * (C47423 * C47505 + C47752 * be)) / C47180;
    const double C941 =
        (3 * C47457 + C47424 * C47477 + C47505 * C47646) / C47180;
    const double C146 =
        (5 * (3 * C47476 + ae * C47477 + C47424 * C47504) +
         ae * (4 * C47477 + C47424 * C47505) +
         C47424 *
             (4 * C47504 + ae * C47505 +
              C47424 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C281 =
        (be * (3 * (C47514 + C47424 * C47524 + C47518 * ae) +
               C47424 * (2 * C47524 +
                         C47424 * (C47520 +
                                   C47424 * (C47424 * C47461 * C47462 * C47509 +
                                             C47519 * ae) +
                                   C47424 * C47519 * ae) +
                         C47523 * ae) +
               (2 * C47518 + C47424 * C47523) * ae) +
         C47423 * (3 * C47476 + ae * C47477 + C47424 * C47504)) /
        C47185;
    const double C282 =
        (be * (4 * (2 * C47524 + C47424 * C47541 + C47523 * ae) +
               C47424 * (3 * C47541 +
                         C47424 * (2 * C47536 +
                                   C47424 * (C47530 +
                                             C47424 * (C47424 * C47483 *
                                                           C47484 * C47509 +
                                                       C47529 * ae) +
                                             C47424 * C47529 * ae) +
                                   C47535 * ae) +
                         C47539 * ae) +
               (3 * C47523 + C47424 * C47539) * ae) +
         C47423 *
             (4 * C47504 + ae * C47505 +
              C47424 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C405 =
        ((zP - zQ) * (3 * C47476 + ae * C47477 + C47424 * C47504)) / C47185;
    const double C406 =
        ((zP - zQ) *
         (4 * C47504 + ae * C47505 +
          C47424 * (3 * C47500 + ae * C47501 +
                    C47424 * (2 * C47496 + ae * C47497 +
                              C47424 * (C47492 + ae * C47424 * C47493 +
                                        C47424 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C946 = (2 * C47456 + ae * C47457 + C47424 * C47476 +
                         C47504 * std::pow(zP - zQ, 2)) /
                        C47185;
    const double C947 =
        (3 * C47476 + ae * C47477 + C47424 * C47504 +
         (3 * C47500 + ae * C47501 +
          C47424 *
              (2 * C47496 + ae * C47497 +
               C47424 * (C47492 + ae * C47424 * C47493 +
                         C47424 * (ae * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(zP - zQ, 2)) /
        C47185;
    const double C2796 =
        (2 * C47638 * C47504 +
         C47638 * (C47504 + (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                std::pow(C47638, 2))) /
        C47185;
    const double C9915 =
        (2 * C47618 + be * C47619 + C47423 * C47675 +
         (2 * C47669 + be * C47671 +
          C47423 *
              (C47496 + be * C47423 * C47577 +
               C47423 * (be * C47577 +
                         C47423 * (ae * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             C47646) /
        C47185;
    const double C10069 =
        (2 * C47638 * C47675 +
         C47638 * (C47675 + (C47496 + be * C47423 * C47577 +
                             C47423 * (be * C47577 +
                                       C47423 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47646)) /
        C47185;
    const double C9654 =
        (2 * C47610 + be * C47612 + C47423 * C47661 + C47699 * C47646) / C47185;
    const double C9655 =
        (3 * C47661 + be * C47662 + C47423 * C47699 +
         (3 * C47695 + be * C47696 +
          C47423 *
              (2 * C47689 + be * C47691 +
               C47423 * (C47492 + be * C47423 * C47574 +
                         C47423 * (be * C47574 + C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             C47646) /
        C47185;
    const double C10511 =
        (2 * C47638 * C47699 +
         C47638 * (C47699 + (2 * C47689 + be * C47691 +
                             C47423 * (C47492 + be * C47423 * C47574 +
                                       C47423 * (be * C47574 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47646)) /
        C47185;
    const double C47582 = C47568 + C47581;
    const double C47626 = C47541 + C47624;
    const double C9097 =
        (4 * (2 * C47618 + be * C47619 + C47423 * C47675) +
         be * (3 * C47619 + C47423 * C47676) +
         C47423 *
             (3 * C47675 + be * C47676 +
              C47423 *
                  (2 * C47669 + be * C47671 +
                   C47423 * (C47496 + be * C47423 * C47577 +
                             C47423 * (be * C47577 +
                                       C47423 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C9187 =
        (C47638 *
         (3 * C47675 + be * C47676 +
          C47423 * (2 * C47669 + be * C47671 +
                    C47423 * (C47496 + be * C47423 * C47577 +
                              C47423 * (be * C47577 +
                                        C47423 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C9095 = (4 * (2 * C47614 + C47423 * C47619) +
                          C47423 * (3 * C47619 + C47423 * C47676)) /
                         C47180;
    const double C9185 = (C47638 * (3 * C47619 + C47423 * C47676)) / C47180;
    const double C9914 =
        (2 * C47614 + C47423 * C47619 + C47676 * C47646) / C47180;
    const double C9335 =
        (5 * (3 * C47661 + be * C47662 + C47423 * C47699) +
         be * (4 * C47662 + C47423 * C47700) +
         C47423 *
             (4 * C47699 + be * C47700 +
              C47423 *
                  (3 * C47695 + be * C47696 +
                   C47423 * (2 * C47689 + be * C47691 +
                             C47423 * (C47492 + be * C47423 * C47574 +
                                       C47423 * (be * C47574 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C9421 =
        (C47638 *
         (4 * C47699 + be * C47700 +
          C47423 * (3 * C47695 + be * C47696 +
                    C47423 * (2 * C47689 + be * C47691 +
                              C47423 * (C47492 + be * C47423 * C47574 +
                                        C47423 * (be * C47574 +
                                                  C47423 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C9334 = (5 * (3 * C47612 + C47423 * C47662) +
                          C47423 * (4 * C47662 + C47423 * C47700)) /
                         C47180;
    const double C9420 = (C47638 * (4 * C47662 + C47423 * C47700)) / C47180;
    const double C9653 =
        (3 * C47612 + C47423 * C47662 + C47700 * C47646) / C47180;
    const double C48537 = C48505 + C48533;
    const double C19882 = C48524 - (C48307 * C48296) / C47180;
    const double C17453 = C48525 / C47186 - C48305 / C48483;
    const double C48534 = C48507 + C48524;
    const double C47225 = C47222 - C47201;
    const double C3674 = C3672 + C3673;
    const double C34446 = C34441 + C34442;
    const double C34445 = C34437 + C34438;
    const double C102 =
        (C48526 + 2 * C48107) / C47186 - (C48535 * C48098) / C47180;
    const double C103 =
        (C48513 + 2 * C48115 + C48535) / C47186 - (C48528 * C48098) / C47180;
    const double C104 = (C48481 + C48112 / C47180 + C48528) / C47186 -
                        (C48515 * C48098) / C47180;
    const double C47335 = C47331 - C47312;
    const double C22134 = C22116 - C22117;
    const double C22132 = C22112 - C22113;
    const double C22130 = C22108 - C22109;
    const double C22128 = C22104 - C22105;
    const double C27493 = C22437 - C22436;
    const double C27895 = C22436 - C22437;
    const double C27491 = C22433 - C22432;
    const double C27893 = C22432 - C22433;
    const double C24906 = C22428 - C22429;
    const double C24890 = C22429 - C22428;
    const double C24904 = C22424 - C22425;
    const double C24888 = C22425 - C22424;
    const double C24910 = C24465 - C24464;
    const double C24902 = C24464 - C24465;
    const double C24908 = C24461 - C24460;
    const double C24900 = C24460 - C24461;
    const double C26014 = C24896 - C24897;
    const double C26012 = C24892 - C24893;
    const double C42692 = C26023 - C26022;
    const double C42690 = C26019 - C26018;
    const double C23299 = C48536 * C142;
    const double C23291 = C48536 * C130;
    const double C23282 = C48536 * C141;
    const double C23274 = C48536 * C128;
    const double C23445 = C48536 * C278;
    const double C23437 = C48536 * C267;
    const double C23591 = C48536 * C402;
    const double C23583 = C48536 * C391;
    const double C40850 = C48536 * C401;
    const double C40842 = C48536 * C389;
    const double C41225 = C48536 * C692;
    const double C41217 = C48536 * C682;
    const double C41599 = C48536 * C943;
    const double C41591 = C48536 * C933;
    const double C8996 =
        (C48529 + 2 * C48258) / C47186 - (C48536 * C48254) / C47180;
    const double C11109 = C11070 * C279;
    const double C11101 = C11070 * C269;
    const double C11092 = C11070 * C278;
    const double C11084 = C11070 * C267;
    const double C11255 = C11070 * C591;
    const double C11247 = C11070 * C582;
    const double C11401 = C11070 * C693;
    const double C11393 = C11070 * C684;
    const double C14124 = C11070 * C692;
    const double C14116 = C11070 * C682;
    const double C14499 = C11070 * C1460;
    const double C14491 = C11070 * C1452;
    const double C14873 = C11070 * C2334;
    const double C14865 = C11070 * C2322;
    const double C1115 = C1113 + C1109;
    const double C32290 = C32286 + C32282;
    const double C32288 = C32284 + C32276;
    const double C32289 = C32285 + C32279;
    const double C32287 = C32283 + C32273;
    const double C17385 = C17383 + C17369;
    const double C17384 = C17382 + C17366;
    const double C23301 = C48532 * C279;
    const double C23293 = C48532 * C269;
    const double C23284 = C48532 * C278;
    const double C23276 = C48532 * C267;
    const double C23447 = C48532 * C591;
    const double C23439 = C48532 * C582;
    const double C23593 = C48532 * C693;
    const double C23585 = C48532 * C684;
    const double C40852 = C48532 * C692;
    const double C40844 = C48532 * C682;
    const double C41227 = C48532 * C1460;
    const double C41219 = C48532 * C1452;
    const double C41601 = C48532 * C2334;
    const double C41593 = C48532 * C2322;
    const double C8997 =
        (C48517 + 2 * C48265 + C48536) / C47186 - (C48532 * C48254) / C47180;
    const double C8998 = (C48494 + C48262 / C47180 + C48532) / C47186 -
                         (C48522 * C48254) / C47180;
    const double C7789 = C7787 + C7783;
    const double C12687 = C12683 + C12679;
    const double C12685 = C12681 + C12673;
    const double C12686 = C12682 + C12676;
    const double C12684 = C12680 + C12670;
    const double C10968 = C10966 + C10952;
    const double C10967 = C10965 + C10949;
    const double C19767 = C18683 * C47206;
    const double C38877 = C18683 * C23272;
    const double C21980 = C21966 + C21967;
    const double C38879 = C38875 + C38876;
    const double C21985 = C21983 + C21984;
    const double C47565 = C47564 + C47563;
    const double C2338 =
        (be * C47559 + C47423 * C47476 + C47625 * std::pow(zP - zQ, 2)) /
        C47185;
    const double C2339 =
        (C47476 + be * C47621 + C47423 * C47625 +
         (C47500 + be * C47423 * C47580 +
          C47423 *
              (be * C47580 +
               C47423 * (C47492 + ae * C47424 * C47493 +
                         C47424 * (ae * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(zP - zQ, 2)) /
        C47185;
    const double C3238 =
        (2 * C47638 * C47625 +
         C47638 * (C47625 + (be * C47580 +
                             C47423 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                std::pow(C47638, 2))) /
        C47185;
    const double C2634 = C113 * C2332;
    const double C6531 = C3783 * C2332;
    const double C24474 = C22090 * C2332;
    const double C47942 = C47941 + C47926;
    const double C173 = C162 - C163;
    const double C3828 = C3811 - C3812;
    const double C22135 = C22118 - C22119;
    const double C4958 = C419 - C418;
    const double C5224 = C418 - C419;
    const double C1112 = C1093 - C1094;
    const double C7786 = C7767 - C7768;
    const double C26196 = C26177 - C26178;
    const double C6090 = C4132 - C4131;
    const double C6516 = C4131 - C4132;
    const double C27494 = C22439 - C22438;
    const double C27896 = C22438 - C22439;
    const double C2469 = C2462 - C2463;
    const double C2817 = C2463 - C2462;
    const double C18686 = C18673 + C18674;
    const double C18684 = C18669 + C18670;
    const double C299 = C48199 * C281;
    const double C3820 = C48262 * C281;
    const double C22127 = C48262 * C281;
    const double C423 = C48199 * C405;
    const double C2467 = C48199 * C946;
    const double C10536 = C48494 * C9654;
    const double C14877 = C48504 * C9654;
    const double C16961 = C48494 * C9654;
    const double C41605 = C48504 * C9654;
    const double C46734 = C26144 * C9654;
    const double C47583 = C47582 + C47572;
    const double C1755 =
        (3 * (C47476 + be * C47621 + C47423 * C47625) +
         be * (2 * C47621 + C47423 * C47626) +
         C47423 *
             (2 * C47625 + be * C47626 +
              C47423 *
                  (C47500 + be * C47423 * C47580 +
                   C47423 * (be * C47580 +
                             C47423 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C1913 =
        ((zP - zQ) *
         (2 * C47625 + be * C47626 +
          C47423 * (C47500 + be * C47423 * C47580 +
                    C47423 * (be * C47580 +
                              C47423 * (C47492 + ae * C47424 * C47493 +
                                        C47424 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C1752 = (3 * (C47559 + C47541 * C47609) +
                          C47423 * (2 * C47621 + C47423 * C47626)) /
                         C47180;
    const double C1910 = (C47638 * (2 * C47621 + C47423 * C47626)) / C47180;
    const double C2333 = (C47559 + C47541 * C47609 + C47626 * C47646) / C47180;
    const double C17450 =
        (C48530 + 2 * C48300) / C47186 - (C48537 * C48296) / C47180;
    const double C17451 =
        (C48519 + 2 * C48307 + C48537) / C47186 - (C48534 * C48296) / C47180;
    const double C17452 = (C48497 + C48304 / C47180 + C48534) / C47186 -
                          (C48525 * C48296) / C47180;
    const double C19779 = C19777 * C47225;
    const double C20874 = C18110 * C47225;
    const double C20870 = C3662 * C47225;
    const double C47228 = C47225 / C47186;
    const double C47227 = C47178 * C47225;
    const double C3675 = C3674 + C3664;
    const double C34448 = C34446 + C34443;
    const double C34447 = C34445 + C34439;
    const double C47341 = C47335 / C47186;
    const double C47340 = C47256 * C47335;
    const double C22138 = C22132 + C22133;
    const double C22137 = C22130 + C22131;
    const double C22136 = C22128 + C22129;
    const double C27495 = C27491 + C27492;
    const double C27897 = C27893 + C27894;
    const double C24925 = C24906 + C24907;
    const double C24921 = C24890 + C24891;
    const double C24924 = C24904 + C24905;
    const double C24920 = C24888 + C24889;
    const double C24927 = C24910 + C24911;
    const double C24923 = C24902 + C24903;
    const double C24926 = C24908 + C24909;
    const double C24922 = C24900 + C24901;
    const double C26027 = C26014 + C26015;
    const double C26026 = C26012 + C26013;
    const double C42704 = C42692 + C42693;
    const double C42703 = C42690 + C42691;
    const double C17387 = C17385 * C48102;
    const double C17386 = C17384 * C9007;
    const double C10970 = C10968 * C48102;
    const double C10969 = C10967 * C9007;
    const double C38880 = C38879 + C38877;
    const double C593 =
        (2 * C47456 + ae * C47457 + C47424 * C47476 + be * C47423 * C47565 +
         C47423 * (be * C47565 + C47423 * C47504)) /
        C47185;
    const double C695 = ((zP - zQ) * (be * C47565 + C47423 * C47504)) / C47185;
    const double C137 = (4 * (2 * C47554 + C47424 * C47559 + C47742 * ae) +
                         C47424 * (3 * C47559 + C47424 * C47565 + C47747 * ae) +
                         (3 * C47742 + C47424 * C47747) * ae) /
                        C47180;
    const double C274 =
        (C47423 * (3 * C47559 + C47424 * C47565 + C47747 * ae)) / C47180;
    const double C398 =
        (C47638 * (3 * C47559 + C47424 * C47565 + C47747 * ae)) / C47180;
    const double C587 =
        (2 * C47554 + C47424 * C47559 + C47742 * ae + C47565 * C47609) / C47180;
    const double C689 = (C47638 * C47423 * C47565) / C47180;
    const double C940 =
        (2 * C47554 + C47424 * C47559 + C47742 * ae + C47565 * C47646) / C47180;
    const double C2635 = C48199 * C2338;
    const double C6532 = C48262 * C2338;
    const double C24475 = C48262 * C2338;
    const double C9333 =
        (5 * (3 * C47900 + C47423 * C47942 + C47899 * be) +
         C47423 * (4 * C47942 +
                   C47423 * (3 * C47937 +
                             C47423 * (2 * C47929 +
                                       C47423 * (C47469 +
                                                 C47423 * (C47423 * C47493 +
                                                           C47529 * be) +
                                                 C47423 * C47529 * be) +
                                       C47931 * be) +
                             C47936 * be) +
                   C47940 * be) +
         (4 * C47899 + C47423 * C47940) * be) /
        C47180;
    const double C9419 =
        (C47638 *
         (4 * C47942 +
          C47423 *
              (3 * C47937 +
               C47423 * (2 * C47929 +
                         C47423 * (C47469 +
                                   C47423 * (C47423 * C47493 + C47529 * be) +
                                   C47423 * C47529 * be) +
                         C47931 * be) +
               C47936 * be) +
          C47940 * be)) /
        C47180;
    const double C9650 =
        (2 * C47828 + C47423 * C47900 + C47829 * be + C47942 * C47646) / C47180;
    const double C9651 =
        (3 * C47900 + C47423 * C47942 + C47899 * be +
         (3 * C47937 +
          C47423 *
              (2 * C47929 +
               C47423 * (C47469 + C47423 * (C47423 * C47493 + C47529 * be) +
                         C47423 * C47529 * be) +
               C47931 * be) +
          C47936 * be) *
             C47646) /
        C47180;
    const double C10509 =
        (2 * C47638 * C47942 +
         C47638 *
             (C47942 +
              (2 * C47929 +
               C47423 * (C47469 + C47423 * (C47423 * C47493 + C47529 * be) +
                         C47423 * C47529 * be) +
               C47931 * be) *
                  C47646)) /
        C47180;
    const double C3832 = C3827 + C3828;
    const double C22139 = C22134 + C22135;
    const double C1116 = C1114 + C1112;
    const double C7790 = C7788 + C7786;
    const double C6092 = C6089 + C6090;
    const double C6538 = C6515 + C6516;
    const double C27496 = C27493 + C27494;
    const double C27898 = C27895 + C27896;
    const double C3667 = C2469 * C48481;
    const double C16092 = C2469 * C48481;
    const double C37267 = C2469 * C26147;
    const double C19768 = C18684 * C48112;
    const double C38878 = C18684 * C48112;
    const double C47584 = C47424 * C47583;
    const double C1277 =
        (2 * (be * C47565 + C47423 * C47504) +
         be * (C47565 + C47583 * std::pow(C47423, 2)) +
         C47423 *
             (C47504 + be * C47423 * C47583 +
              C47423 *
                  (be * C47583 +
                   C47423 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C1463 =
        ((zP - zQ) *
         (C47504 + be * C47423 * C47583 +
          C47423 * (be * C47583 +
                    C47423 * (2 * C47496 + ae * C47497 +
                              C47424 * (C47492 + ae * C47424 * C47493 +
                                        C47424 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C2618 =
        (be * C47565 + C47423 * C47504 +
         (be * C47583 +
          C47423 *
              (2 * C47496 + ae * C47497 +
               C47424 * (C47492 + ae * C47424 * C47493 +
                         C47424 * (ae * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(zP - zQ, 2)) /
        C47185;
    const double C1273 =
        (2 * C47423 * C47565 + C47423 * (C47565 + C47583 * C47609)) / C47180;
    const double C1459 = (C47638 * (C47565 + C47583 * C47609)) / C47180;
    const double C2617 = (C47423 * C47565 + C47423 * C47583 * C47646) / C47180;
    const double C2792 =
        (2 * C47638 * C47565 + C47638 * (C47565 + C47583 * C47646)) / C47180;
    const double C19781 = C19779 + C19780;
    const double C20879 = C20874 + C20875;
    const double C20878 = C20870 + C20871;
    const double C47231 = C47228 - C47223;
    const double C7742 = C47228 + (C47214 * ae) / C47180;
    const double C47230 = C47227 + C48439;
    const double C3676 = C3675 + C3665;
    const double C34450 = C34448 + C34444;
    const double C34449 = C34447 + C34440;
    const double C47346 = C47341 - C47342;
    const double C47345 = C47340 + C48461;
    const double C26017 = C24923 * C48112;
    const double C45915 = C24923 * C48112;
    const double C26016 = C24922 * C23272;
    const double C45914 = C24922 * C47206;
    const double C26029 = C26027 * C23265;
    const double C42689 = C26027 * C48102;
    const double C45913 = C26027 * C48439;
    const double C26028 = C26026 * C23271;
    const double C42688 = C26026 * C9007;
    const double C45912 = C26026 * C47225;
    const double C42706 = C42704 * C48102;
    const double C42705 = C42703 * C9007;
    const double C17388 = C17386 + C17387;
    const double C10971 = C10969 + C10970;
    const double C1106 = C48494 * C593;
    const double C3986 = C48262 * C593;
    const double C7780 = C48494 * C593;
    const double C22293 = C48262 * C593;
    const double C26190 = C26144 * C593;
    const double C4140 = C48262 * C695;
    const double C5092 = C48199 * C695;
    const double C22447 = C48262 * C695;
    const double C166 = C113 * C137;
    const double C298 = C113 * C274;
    const double C3819 = C3783 * C274;
    const double C22126 = C22090 * C274;
    const double C422 = C113 * C398;
    const double C1105 = C1066 * C587;
    const double C3985 = C3783 * C587;
    const double C7779 = C7740 * C587;
    const double C22292 = C22090 * C587;
    const double C26189 = C47360 * C587;
    const double C4139 = C3783 * C689;
    const double C5091 = C113 * C689;
    const double C22446 = C22090 * C689;
    const double C2466 = C113 * C940;
    const double C10530 = C48494 * C9650;
    const double C14869 = C48504 * C9650;
    const double C16955 = C48494 * C9650;
    const double C41597 = C48504 * C9650;
    const double C46728 = C26144 * C9650;
    const double C38881 = C38880 + C38878;
    const double C47585 = C47567 + C47584;
    const double C19782 = C19781 + C19767;
    const double C20881 = C20879 + C20876;
    const double C20880 = C20878 + C20872;
    const double C37264 = C2808 * C47231;
    const double C117 =
        (C47231 / C47186 + ((C47178 * C47241 + C26147) * ae) / C47180) /
            C47186 -
        ((C47178 * (C47241 / C47186 + (0 * ae) / C47180) + C48498) * be) /
            C47180;
    const double C3786 =
        C47231 / C47186 - ((C47178 * C47241 + C26147) * be) / C47180;
    const double C22093 =
        C47231 / C47186 + ((C47178 * C47241 + C26147) * ae) / C47180;
    const double C16089 = C2808 * C7742;
    const double C47232 = C47230 * be;
    const double C7741 = C47217 + (C47230 * ae) / C47180 + C47206;
    const double C3677 = C3676 + C3666;
    const double C26187 = C47346 * C272;
    const double C26181 = C47346 * C262;
    const double C26176 = C47346 * C270;
    const double C26170 = C47346 * C261;
    const double C26164 = C47346 * C268;
    const double C26158 = C47346 * C260;
    const double C26367 = C47346 * C585;
    const double C26361 = C47346 * C577;
    const double C26355 = C47346 * C583;
    const double C26349 = C47346 * C576;
    const double C26537 = C47346 * C687;
    const double C26531 = C47346 * C679;
    const double C26525 = C47346 * C685;
    const double C26519 = C47346 * C678;
    const double C29315 = C47346 * C1455;
    const double C29309 = C47346 * C1449;
    const double C29545 = C47346 * C2328;
    const double C29539 = C47346 * C2318;
    const double C29522 = C47346 * C683;
    const double C29516 = C47346 * C677;
    const double C30099 = C47346 * C1453;
    const double C30093 = C47346 * C1448;
    const double C30645 = C47346 * C2324;
    const double C30639 = C47346 * C2316;
    const double C46731 = C47346 * C2325;
    const double C46725 = C47346 * C2317;
    const double C47151 = C47346 * C3231;
    const double C47145 = C47346 * C3227;
    const double C9005 =
        (C47346 / C47186 + ((C47256 * C47360 + C26144) * ae) / C47180) /
            C47186 -
        ((C47256 * (C47360 / C47186 + (0 * ae) / C47180) + C48504) * be) /
            C47180;
    const double C11077 =
        C47346 / C47186 - ((C47256 * C47360 + C26144) * be) / C47180;
    const double C23269 =
        C47346 / C47186 + ((C47256 * C47360 + C26144) * ae) / C47180;
    const double C47349 = C47345 * be;
    const double C26030 = C26028 + C26029;
    const double C42702 = C42688 + C42689;
    const double C45916 = C45912 + C45913;
    const double C42707 = C42705 + C42706;
    const double C47586 = C47585 + C47573;
    const double C19783 = C19782 + C19768;
    const double C20883 = C20881 + C20877;
    const double C20882 = C20880 + C20873;
    const double C47233 = C47232 / C47180;
    const double C16087 = C3662 * C7741;
    const double C3678 = C3677 + C3667;
    const double C26195 = C26175 - C26176;
    const double C26192 = C26169 - C26170;
    const double C29535 = C26525 - C26526;
    const double C29529 = C26526 - C26525;
    const double C29532 = C26519 - C26520;
    const double C29526 = C26520 - C26519;
    const double C47141 = C30646 - C30645;
    const double C47138 = C30640 - C30639;
    const double C11110 = C11077 * C585;
    const double C11102 = C11077 * C577;
    const double C11095 = C11077 * C583;
    const double C11087 = C11077 * C576;
    const double C11256 = C11077 * C1269;
    const double C11248 = C11077 * C1263;
    const double C11402 = C11077 * C1455;
    const double C11394 = C11077 * C1449;
    const double C14127 = C11077 * C1453;
    const double C14119 = C11077 * C1448;
    const double C14500 = C11077 * C1906;
    const double C14492 = C11077 * C1902;
    const double C14874 = C11077 * C2325;
    const double C14866 = C11077 * C2317;
    const double C23302 = C23269 * C585;
    const double C23294 = C23269 * C577;
    const double C23287 = C23269 * C583;
    const double C23279 = C23269 * C576;
    const double C23448 = C23269 * C1269;
    const double C23440 = C23269 * C1263;
    const double C23594 = C23269 * C1455;
    const double C23586 = C23269 * C1449;
    const double C40855 = C23269 * C1453;
    const double C40847 = C23269 * C1448;
    const double C41228 = C23269 * C1906;
    const double C41220 = C23269 * C1902;
    const double C41602 = C23269 * C2325;
    const double C41594 = C23269 * C2317;
    const double C47351 = C47349 / C47180;
    const double C26031 = C26030 + C26016;
    const double C45917 = C45916 + C45914;
    const double C594 =
        (3 * C47476 + ae * C47477 + C47424 * C47504 + be * C47423 * C47586 +
         C47423 *
             (be * C47586 +
              C47423 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C696 =
        ((zP - zQ) *
         (be * C47586 +
          C47423 * (3 * C47500 + ae * C47501 +
                    C47424 * (2 * C47496 + ae * C47497 +
                              C47424 * (C47492 + ae * C47424 * C47493 +
                                        C47424 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C139 = (5 * (3 * C47559 + C47424 * C47565 + C47747 * ae) +
                         C47424 * (4 * C47565 + C47424 * C47586 + C47752 * ae) +
                         (4 * C47747 + C47424 * C47752) * ae) /
                        C47180;
    const double C276 =
        (C47423 * (4 * C47565 + C47424 * C47586 + C47752 * ae)) / C47180;
    const double C400 =
        (C47638 * (4 * C47565 + C47424 * C47586 + C47752 * ae)) / C47180;
    const double C589 =
        (3 * C47559 + C47424 * C47565 + C47747 * ae + C47586 * C47609) / C47180;
    const double C691 = (C47638 * C47423 * C47586) / C47180;
    const double C942 =
        (3 * C47559 + C47424 * C47565 + C47747 * ae + C47586 * C47646) / C47180;
    const double C47234 = C47217 - C47233;
    const double C16093 = C16087 + C16088;
    const double C47353 = C47339 - C47351;
    const double C26032 = C26031 + C26017;
    const double C45918 = C45917 + C45915;
    const double C47235 = C47234 + C47206;
    const double C16094 = C16093 + C16089;
    const double C47354 = C47353 + C47324;
    const double C37262 = C3662 * C47235;
    const double C114 =
        (((((0 - (C47178 * C47179) / C47180) * ae) / C47180 -
           (0 * be) / C47192 + (2 * C47181) / C47180) /
              C47186 -
          ((C47178 * C47215 + 0) * be) / C47180 + C47198 - C47208) /
             C47186 +
         ((C47178 * C47229 + 0) * ae) / C47180) /
            C47186 -
        ((C47178 * (C47229 / C47186 +
                    ((C47178 * C47235 + C48107) * ae) / C47180 + C47231) +
          C48535) *
         be) /
            C47180 +
        C47235 / C47186 + ((C47178 * C47231 + C48115) * ae) / C47180 +
        2 * (C47206 / C47186 - (0 * be) / C47180);
    const double C115 =
        (C47229 / C47186 + ((C47178 * C47235 + C48107) * ae) / C47180 +
         C47231) /
            C47186 -
        ((C47178 * (C47235 / C47186 +
                    ((C47178 * C47231 + C48115) * ae) / C47180 + 2 * C47241) +
          C48528) *
         be) /
            C47180 +
        2 * (C47231 / C47186 + ((C47178 * C47241 + C26147) * ae) / C47180);
    const double C116 =
        (C47235 / C47186 + ((C47178 * C47231 + C48115) * ae) / C47180 +
         2 * C47241) /
            C47186 -
        ((C47178 *
              (C47231 / C47186 + ((C47178 * C47241 + C26147) * ae) / C47180) +
          C48515) *
         be) /
            C47180 +
        3 * (C47241 / C47186 + (0 * ae) / C47180);
    const double C3784 =
        C47229 / C47186 - ((C47178 * C47235 + C48107) * be) / C47180 + C47231;
    const double C3785 = C47235 / C47186 -
                         ((C47178 * C47231 + C48115) * be) / C47180 +
                         2 * C47241;
    const double C22091 =
        C47229 / C47186 + ((C47178 * C47235 + C48107) * ae) / C47180 + C47231;
    const double C22092 = C47235 / C47186 +
                          ((C47178 * C47231 + C48115) * ae) / C47180 +
                          2 * C47241;
    const double C16095 = C16094 + C16090;
    const double C26185 = C47354 * C133;
    const double C26179 = C47354 * C122;
    const double C26174 = C47354 * C131;
    const double C26168 = C47354 * C121;
    const double C26162 = C47354 * C129;
    const double C26156 = C47354 * C120;
    const double C26365 = C47354 * C270;
    const double C26359 = C47354 * C261;
    const double C26353 = C47354 * C268;
    const double C26347 = C47354 * C260;
    const double C26535 = C47354 * C394;
    const double C26529 = C47354 * C385;
    const double C26523 = C47354 * C392;
    const double C26517 = C47354 * C384;
    const double C29313 = C47354 * C685;
    const double C29307 = C47354 * C678;
    const double C29543 = C47354 * C936;
    const double C29537 = C47354 * C929;
    const double C29520 = C47354 * C390;
    const double C29514 = C47354 * C383;
    const double C30097 = C47354 * C683;
    const double C30091 = C47354 * C677;
    const double C30643 = C47354 * C934;
    const double C30637 = C47354 * C928;
    const double C46729 = C47354 * C2324;
    const double C46723 = C47354 * C2316;
    const double C47149 = C47354 * C2786;
    const double C47143 = C47354 * C2781;
    const double C9002 =
        (((((0 - (C47256 * C47307) / C47180) * ae) / C47180 -
           (0 * be) / C47192 + (2 * C47308) / C47180) /
              C47186 -
          ((C47256 * C47343 + 0) * be) / C47180 + C47317 - C47330) /
             C47186 +
         ((C47256 * C47352 + 0) * ae) / C47180) /
            C47186 -
        ((C47256 * (C47352 / C47186 +
                    ((C47256 * C47354 + C48258) * ae) / C47180 + C47346) +
          C48536) *
         be) /
            C47180 +
        C47354 / C47186 + ((C47256 * C47346 + C48265) * ae) / C47180 +
        2 * (C47324 / C47186 - (0 * be) / C47180);
    const double C9003 =
        (C47352 / C47186 + ((C47256 * C47354 + C48258) * ae) / C47180 +
         C47346) /
            C47186 -
        ((C47256 * (C47354 / C47186 +
                    ((C47256 * C47346 + C48265) * ae) / C47180 + 2 * C47360) +
          C48532) *
         be) /
            C47180 +
        2 * (C47346 / C47186 + ((C47256 * C47360 + C26144) * ae) / C47180);
    const double C9004 =
        (C47354 / C47186 + ((C47256 * C47346 + C48265) * ae) / C47180 +
         2 * C47360) /
            C47186 -
        ((C47256 *
              (C47346 / C47186 + ((C47256 * C47360 + C26144) * ae) / C47180) +
          C48522) *
         be) /
            C47180 +
        3 * (C47360 / C47186 + (0 * ae) / C47180);
    const double C11075 =
        C47352 / C47186 - ((C47256 * C47354 + C48258) * be) / C47180 + C47346;
    const double C11076 = C47354 / C47186 -
                          ((C47256 * C47346 + C48265) * be) / C47180 +
                          2 * C47360;
    const double C23267 =
        C47352 / C47186 + ((C47256 * C47354 + C48258) * ae) / C47180 + C47346;
    const double C23268 = C47354 / C47186 +
                          ((C47256 * C47346 + C48265) * ae) / C47180 +
                          2 * C47360;
    const double C37268 = C37262 + C37263;
    const double C16096 = C16095 + C16091;
    const double C26194 = C26173 - C26174;
    const double C26191 = C26167 - C26168;
    const double C29534 = C26523 - C26524;
    const double C29528 = C26524 - C26523;
    const double C29531 = C26517 - C26518;
    const double C29525 = C26518 - C26517;
    const double C47140 = C30644 - C30643;
    const double C47137 = C30638 - C30637;
    const double C11106 = C11075 * C131;
    const double C11098 = C11075 * C121;
    const double C11091 = C11075 * C129;
    const double C11083 = C11075 * C120;
    const double C11252 = C11075 * C268;
    const double C11244 = C11075 * C260;
    const double C11398 = C11075 * C392;
    const double C11390 = C11075 * C384;
    const double C14123 = C11075 * C390;
    const double C14115 = C11075 * C383;
    const double C14496 = C11075 * C683;
    const double C14488 = C11075 * C677;
    const double C14870 = C11075 * C934;
    const double C14862 = C11075 * C928;
    const double C11108 = C11076 * C270;
    const double C11100 = C11076 * C261;
    const double C11093 = C11076 * C268;
    const double C11085 = C11076 * C260;
    const double C11254 = C11076 * C583;
    const double C11246 = C11076 * C576;
    const double C11400 = C11076 * C685;
    const double C11392 = C11076 * C678;
    const double C14125 = C11076 * C683;
    const double C14117 = C11076 * C677;
    const double C14498 = C11076 * C1453;
    const double C14490 = C11076 * C1448;
    const double C14872 = C11076 * C2324;
    const double C14864 = C11076 * C2316;
    const double C23298 = C23267 * C131;
    const double C23290 = C23267 * C121;
    const double C23283 = C23267 * C129;
    const double C23275 = C23267 * C120;
    const double C23444 = C23267 * C268;
    const double C23436 = C23267 * C260;
    const double C23590 = C23267 * C392;
    const double C23582 = C23267 * C384;
    const double C40851 = C23267 * C390;
    const double C40843 = C23267 * C383;
    const double C41224 = C23267 * C683;
    const double C41216 = C23267 * C677;
    const double C41598 = C23267 * C934;
    const double C41590 = C23267 * C928;
    const double C23300 = C23268 * C270;
    const double C23292 = C23268 * C261;
    const double C23285 = C23268 * C268;
    const double C23277 = C23268 * C260;
    const double C23446 = C23268 * C583;
    const double C23438 = C23268 * C576;
    const double C23592 = C23268 * C685;
    const double C23584 = C23268 * C678;
    const double C40853 = C23268 * C683;
    const double C40845 = C23268 * C677;
    const double C41226 = C23268 * C1453;
    const double C41218 = C23268 * C1448;
    const double C41600 = C23268 * C2324;
    const double C41592 = C23268 * C2316;
    const double C37269 = C37268 + C37264;
    const double C16097 = C16096 + C16092;
    const double C26198 = C26194 + C26195;
    const double C26197 = C26191 + C26192;
    const double C29552 = C29534 + C29535;
    const double C29550 = C29528 + C29529;
    const double C29551 = C29531 + C29532;
    const double C29549 = C29525 + C29526;
    const double C47156 = C47140 + C47141;
    const double C47155 = C47137 + C47138;
    const double C37270 = C37269 + C37265;
    const double C26200 = C26198 + C26196;
    const double C26199 = C26197 + C26193;
    const double C29556 = C29552 + C29536;
    const double C29554 = C29550 + C29530;
    const double C29555 = C29551 + C29533;
    const double C29553 = C29549 + C29527;
    const double C47158 = C47156 + C47142;
    const double C47157 = C47155 + C47139;
    const double C37271 = C37270 + C37266;
    const double C47160 = C47158 * C48102;
    const double C47159 = C47157 * C9007;
    const double C37272 = C37271 + C37267;
    const double C47161 = C47159 + C47160;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
            C26144 * C580 - C47360 * C575) *
               C47235 +
           (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
            C26144 * C590 - C47360 * C581) *
               C48107 +
           (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
           (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
           C26199 * C47241 + C26200 * C26147) *
              C48217 * C48188 * C48171 * C110 +
          ((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47235 +
           (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48107 +
           (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47231 +
           (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48115 +
           (C26179 - C26180 + C26181 - C26182 + C26183 - C26184) * C47241 +
           (C26185 - C26186 + C26187 - C26188 + C26189 - C26190) * C26147) *
              C48217 * C48188 * C48171 * C111 +
          (C26199 * C47235 + C26200 * C48107 +
           (C26180 - C26179 + C26182 - C26181 + C26184 - C26183) * C47231 +
           (C26186 - C26185 + C26188 - C26187 + C26190 - C26189) * C48115 +
           (C48258 * C134 - C47354 * C123 + C48265 * C273 - C47346 * C263 +
            C26144 * C588 - C47360 * C579) *
               C47241 +
           (C48258 * C144 - C47354 * C135 + C48265 * C281 - C47346 * C274 +
            C26144 * C594 - C47360 * C589) *
               C26147) *
              C48217 * C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C48188 * C255 +
           ((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C47235 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48107 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47231 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48115 +
            (C26359 - C26360 + C26361 - C26362 + C26363 - C26364) * C47241 +
            (C26365 - C26366 + C26367 - C26368 + C26369 - C26370) * C26147) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47235 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48107 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47231 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48115 +
            (C26179 - C26180 + C26181 - C26182 + C26183 - C26184) * C47241 +
            (C26185 - C26186 + C26187 - C26188 + C26189 - C26190) * C26147) *
               C48217 * C48188 * C255 +
           ((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C47235 +
            (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48107 +
            (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C47231 +
            (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48115 +
            (C48258 * C271 - C47354 * C262 + C48265 * C586 - C47346 * C578 +
             C26144 * C1272 - C47360 * C1265) *
                C47241 +
            (C48258 * C280 - C47354 * C272 + C48265 * C593 - C47346 * C587 +
             C26144 * C1277 - C47360 * C1273) *
                C26147) *
               C48217 * C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C381 +
           ((C47354 * C383 - C48258 * C389 + C47346 * C677 - C48265 * C682 +
             C47360 * C1448 - C26144 * C1452) *
                C47235 +
            (C47354 * C390 - C48258 * C401 + C47346 * C683 - C48265 * C692 +
             C47360 * C1453 - C26144 * C1460) *
                C48107 +
            (C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C47231 +
            (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C48115 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47241 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C26147) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47235 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48107 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47231 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48115 +
            (C26179 - C26180 + C26181 - C26182 + C26183 - C26184) * C47241 +
            (C26185 - C26186 + C26187 - C26188 + C26189 - C26190) * C26147) *
               C48217 * C381 +
           ((C26518 - C26517 + C26520 - C26519 + C26522 - C26521) * C47235 +
            (C26524 - C26523 + C26526 - C26525 + C26528 - C26527) * C48107 +
            (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C47231 +
            (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48115 +
            (C48258 * C395 - C47354 * C386 + C48265 * C688 - C47346 * C680 +
             C26144 * C1458 - C47360 * C1451) *
                C47241 +
            (C48258 * C404 - C47354 * C396 + C48265 * C695 - C47346 * C689 +
             C26144 * C1463 - C47360 * C1459) *
                C26147) *
               C48217 * C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C48188 * C505 +
           ((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C47235 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48107 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47231 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48115 +
            (C26359 - C26360 + C26361 - C26362 + C26363 - C26364) * C47241 +
            (C26365 - C26366 + C26367 - C26368 + C26369 - C26370) * C26147) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47235 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48107 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47231 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48115 +
            (C26179 - C26180 + C26181 - C26182 + C26183 - C26184) * C47241 +
            (C26185 - C26186 + C26187 - C26188 + C26189 - C26190) * C26147) *
               C48217 * C48188 * C505 +
           ((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C47235 +
            (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48107 +
            (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C47231 +
            (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48115 +
            (C48258 * C271 - C47354 * C262 + C48265 * C586 - C47346 * C578 +
             C26144 * C1272 - C47360 * C1265) *
                C47241 +
            (C48258 * C280 - C47354 * C272 + C48265 * C593 - C47346 * C587 +
             C26144 * C1277 - C47360 * C1273) *
                C26147) *
               C48217 * C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
            C26144 * C580 - C47360 * C575) *
               C47235 +
           (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
            C26144 * C590 - C47360 * C581) *
               C48107 +
           (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
           (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
           C26199 * C47241 + C26200 * C26147) *
              C48217 * C48188 * C571 +
          ((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
            C47360 * C1262 - C26144 * C1266) *
               C47235 +
           (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
            C47360 * C1267 - C26144 * C1274) *
               C48107 +
           (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47231 +
           (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48115 +
           (C26359 - C26360 + C26361 - C26362 + C26363 - C26364) * C47241 +
           (C26365 - C26366 + C26367 - C26368 + C26369 - C26370) * C26147) *
              C48217 * C48188 * C572 +
          ((C48258 * C580 - C47354 * C575 + C48265 * C1266 - C47346 * C1262 +
            C26144 * C1747 - C47360 * C1744) *
               C47235 +
           (C48258 * C590 - C47354 * C581 + C48265 * C1274 - C47346 * C1267 +
            C26144 * C1753 - C47360 * C1748) *
               C48107 +
           (C48258 * C582 - C47354 * C576 + C48265 * C1268 - C47346 * C1263 +
            C26144 * C1749 - C47360 * C1745) *
               C47231 +
           (C48258 * C591 - C47354 * C583 + C48265 * C1275 - C47346 * C1269 +
            C26144 * C1754 - C47360 * C1750) *
               C48115 +
           (C48258 * C584 - C47354 * C577 + C48265 * C1270 - C47346 * C1264 +
            C26144 * C1751 - C47360 * C1746) *
               C47241 +
           (C48258 * C592 - C47354 * C585 + C48265 * C1276 - C47346 * C1271 +
            C26144 * C1755 - C47360 * C1752) *
               C26147) *
              C48217 * C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C381 +
           ((C47354 * C383 - C48258 * C389 + C47346 * C677 - C48265 * C682 +
             C47360 * C1448 - C26144 * C1452) *
                C47235 +
            (C47354 * C390 - C48258 * C401 + C47346 * C683 - C48265 * C692 +
             C47360 * C1453 - C26144 * C1460) *
                C48107 +
            (C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C47231 +
            (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C48115 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47241 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C26147) *
               C48217 * C48491) *
              C505 +
          (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C47235 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48107 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47231 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48115 +
            (C26359 - C26360 + C26361 - C26362 + C26363 - C26364) * C47241 +
            (C26365 - C26366 + C26367 - C26368 + C26369 - C26370) * C26147) *
               C48217 * C381 +
           ((C48258 * C682 - C47354 * C677 + C48265 * C1452 - C47346 * C1448 +
             C26144 * C1905 - C47360 * C1902) *
                C47235 +
            (C48258 * C692 - C47354 * C683 + C48265 * C1460 - C47346 * C1453 +
             C26144 * C1911 - C47360 * C1906) *
                C48107 +
            (C48258 * C684 - C47354 * C678 + C48265 * C1454 - C47346 * C1449 +
             C26144 * C1907 - C47360 * C1903) *
                C47231 +
            (C48258 * C693 - C47354 * C685 + C48265 * C1461 - C47346 * C1455 +
             C26144 * C1912 - C47360 * C1908) *
                C48115 +
            (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
             C26144 * C1909 - C47360 * C1904) *
                C47241 +
            (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
             C26144 * C1913 - C47360 * C1910) *
                C26147) *
               C48217 * C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C779 +
           ((C47354 * C383 - C48258 * C389 + C47346 * C677 - C48265 * C682 +
             C47360 * C1448 - C26144 * C1452) *
                C47235 +
            (C47354 * C390 - C48258 * C401 + C47346 * C683 - C48265 * C692 +
             C47360 * C1453 - C26144 * C1460) *
                C48107 +
            (C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C47231 +
            (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C48115 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47241 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C26147) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47235 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48107 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47231 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48115 +
            (C26179 - C26180 + C26181 - C26182 + C26183 - C26184) * C47241 +
            (C26185 - C26186 + C26187 - C26188 + C26189 - C26190) * C26147) *
               C48217 * C779 +
           ((C26518 - C26517 + C26520 - C26519 + C26522 - C26521) * C47235 +
            (C26524 - C26523 + C26526 - C26525 + C26528 - C26527) * C48107 +
            (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C47231 +
            (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48115 +
            (C48258 * C395 - C47354 * C386 + C48265 * C688 - C47346 * C680 +
             C26144 * C1458 - C47360 * C1451) *
                C47241 +
            (C48258 * C404 - C47354 * C396 + C48265 * C695 - C47346 * C689 +
             C26144 * C1463 - C47360 * C1459) *
                C26147) *
               C48217 * C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47235 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48107 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
            C26199 * C47241 + C26200 * C26147) *
               C48217 * C779 +
           ((C47354 * C383 - C48258 * C389 + C47346 * C677 - C48265 * C682 +
             C47360 * C1448 - C26144 * C1452) *
                C47235 +
            (C47354 * C390 - C48258 * C401 + C47346 * C683 - C48265 * C692 +
             C47360 * C1453 - C26144 * C1460) *
                C48107 +
            (C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C47231 +
            (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C48115 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47241 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C26147) *
               C48217 * C48491) *
              C255 +
          (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C47235 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48107 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47231 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48115 +
            (C26359 - C26360 + C26361 - C26362 + C26363 - C26364) * C47241 +
            (C26365 - C26366 + C26367 - C26368 + C26369 - C26370) * C26147) *
               C48217 * C779 +
           ((C48258 * C682 - C47354 * C677 + C48265 * C1452 - C47346 * C1448 +
             C26144 * C1905 - C47360 * C1902) *
                C47235 +
            (C48258 * C692 - C47354 * C683 + C48265 * C1460 - C47346 * C1453 +
             C26144 * C1911 - C47360 * C1906) *
                C48107 +
            (C48258 * C684 - C47354 * C678 + C48265 * C1454 - C47346 * C1449 +
             C26144 * C1907 - C47360 * C1903) *
                C47231 +
            (C48258 * C693 - C47354 * C685 + C48265 * C1461 - C47346 * C1455 +
             C26144 * C1912 - C47360 * C1908) *
                C48115 +
            (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
             C26144 * C1909 - C47360 * C1904) *
                C47241 +
            (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
             C26144 * C1913 - C47360 * C1910) *
                C26147) *
               C48217 * C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
            C26144 * C580 - C47360 * C575) *
               C47235 +
           (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
            C26144 * C590 - C47360 * C581) *
               C48107 +
           (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47231 +
           (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48115 +
           C26199 * C47241 + C26200 * C26147) *
              C48217 * C925 +
          ((C47354 * C383 - C48258 * C389 + C47346 * C677 - C48265 * C682 +
            C47360 * C1448 - C26144 * C1452) *
               C47235 +
           (C47354 * C390 - C48258 * C401 + C47346 * C683 - C48265 * C692 +
            C47360 * C1453 - C26144 * C1460) *
               C48107 +
           (C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C47231 +
           (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C48115 +
           (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47241 +
           (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C26147) *
              C48217 * C926 +
          ((C48258 * C933 - C47354 * C928 + C48265 * C2322 - C47346 * C2316 +
            C26144 * C2323 - C47360 * C2317) *
               C47235 +
           (C48258 * C943 - C47354 * C934 + C48265 * C2334 - C47346 * C2324 +
            C26144 * C2335 - C47360 * C2325) *
               C48107 +
           (C48258 * C935 - C47354 * C929 + C48265 * C2326 - C47346 * C2318 +
            C26144 * C2327 - C47360 * C2319) *
               C47231 +
           (C48258 * C944 - C47354 * C936 + C48265 * C2336 - C47346 * C2328 +
            C26144 * C2337 - C47360 * C2329) *
               C48115 +
           (C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
            C26144 * C2331 - C47360 * C2321) *
               C47241 +
           (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
            C26144 * C2339 - C47360 * C2333) *
               C26147) *
              C48217 * C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C23271 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C23265 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C48462 +
           ((C48258 * C389 - C47354 * C383 + C48265 * C682 - C47346 * C677 +
             C26144 * C1452 - C47360 * C1448) *
                C23271 +
            (C48258 * C401 - C47354 * C390 + C48265 * C692 - C47346 * C683 +
             C26144 * C1460 - C47360 * C1453) *
                C23265 +
            (C26518 - C26517 + C26520 - C26519 + C26522 - C26521) * C23272 +
            (C26524 - C26523 + C26526 - C26525 + C26528 - C26527) * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C23271 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C23265 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C23272 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
               C48462 +
           ((C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C23271 +
            (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C23265 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C23272 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C26199 * C23271 + C26200 * C23265 +
            (C26180 - C26179 + C26182 - C26181 + C26184 - C26183) * C23272 +
            (C26186 - C26185 + C26188 - C26187 + C26190 - C26189) * C48112) *
               C48462 +
           ((C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C23271 +
            (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C23265 +
            (C48258 * C395 - C47354 * C386 + C48265 * C688 - C47346 * C680 +
             C26144 * C1458 - C47360 * C1451) *
                C23272 +
            (C48258 * C404 - C47354 * C396 + C48265 * C695 - C47346 * C689 +
             C26144 * C1463 - C47360 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C48258 * C389 - C47354 * C383 + C48265 * C682 - C47346 * C677 +
              C26144 * C1452 - C47360 * C1448) *
                 C23271 +
             (C48258 * C401 - C47354 * C390 + C48265 * C692 - C47346 * C683 +
              C26144 * C1460 - C47360 * C1453) *
                 C23265 +
             (C26518 - C26517 + C26520 - C26519 + C26522 - C26521) * C23272 +
             (C26524 - C26523 + C26526 - C26525 + C26528 - C26527) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C23271 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C23265 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C23272 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C48462 +
            ((C47354 * C677 - C48258 * C682 + C47346 * C1448 - C48265 * C1452 +
              C47360 * C1902 - C26144 * C1905) *
                 C23271 +
             (C47354 * C683 - C48258 * C692 + C47346 * C1453 - C48265 * C1460 +
              C47360 * C1906 - C26144 * C1911) *
                 C23265 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C23272 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C23271 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C23265 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C23272 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C48462 +
            ((C26517 - C26518 + C26519 - C26520 + C26521 - C26522) * C23271 +
             (C26523 - C26524 + C26525 - C26526 + C26527 - C26528) * C23265 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C23272 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C23271 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C23265 +
             (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C23272 +
             (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48112) *
                C48462 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C23271 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C23265 +
             (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
              C26144 * C1909 - C47360 * C1904) *
                 C23272 +
             (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
              C26144 * C1913 - C47360 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
             C29553 * C23272 + C29554 * C48112) *
                C48304) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C23271 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C23265 +
             C29555 * C23272 + C29556 * C48112) *
                C48462 +
            ((C47354 * C928 - C48258 * C933 + C47346 * C2316 - C48265 * C2322 +
              C47360 * C2317 - C26144 * C2323) *
                 C23271 +
             (C47354 * C934 - C48258 * C943 + C47346 * C2324 - C48265 * C2334 +
              C47360 * C2325 - C26144 * C2335) *
                 C23265 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C23272 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C23271 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C23265 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C23272 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C48462 +
            (C29555 * C23271 + C29556 * C23265 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C23272 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C381 +
           ((C29553 * C23271 + C29554 * C23265 +
             (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C23272 +
             (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48112) *
                C48462 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C23271 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C23265 +
             (C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
              C26144 * C2331 - C47360 * C2321) *
                 C23272 +
             (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
              C26144 * C2339 - C47360 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
             C29553 * C23272 + C29554 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C23271 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C23265 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C23272 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C48462 +
            ((C47354 * C677 - C48258 * C682 + C47346 * C1448 - C48265 * C1452 +
              C47360 * C1902 - C26144 * C1905) *
                 C23271 +
             (C47354 * C683 - C48258 * C692 + C47346 * C1453 - C48265 * C1460 +
              C47360 * C1906 - C26144 * C1911) *
                 C23265 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C23272 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C23271 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C23265 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C23272 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C48462 +
            (C29555 * C23271 + C29556 * C23265 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C23272 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C23271 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C23265 +
             (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C23272 +
             (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48112) *
                C48462 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C23271 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C23265 +
             (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
              C26144 * C1909 - C47360 * C1904) *
                 C23272 +
             (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
              C26144 * C1913 - C47360 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C23271 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C23265 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C48462 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
            C29553 * C23272 + C29554 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C23271 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C23265 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C23272 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
               C48462 +
           ((C47354 * C677 - C48258 * C682 + C47346 * C1448 - C48265 * C1452 +
             C47360 * C1902 - C26144 * C1905) *
                C23271 +
            (C47354 * C683 - C48258 * C692 + C47346 * C1453 - C48265 * C1460 +
             C47360 * C1906 - C26144 * C1911) *
                C23265 +
            (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C23272 +
            (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C48258 * C580 - C47354 * C575 + C48265 * C1266 - C47346 * C1262 +
             C26144 * C1747 - C47360 * C1744) *
                C23271 +
            (C48258 * C590 - C47354 * C581 + C48265 * C1274 - C47346 * C1267 +
             C26144 * C1753 - C47360 * C1748) *
                C23265 +
            (C48258 * C582 - C47354 * C576 + C48265 * C1268 - C47346 * C1263 +
             C26144 * C1749 - C47360 * C1745) *
                C23272 +
            (C48258 * C591 - C47354 * C583 + C48265 * C1275 - C47346 * C1269 +
             C26144 * C1754 - C47360 * C1750) *
                C48112) *
               C48462 +
           ((C48258 * C1452 - C47354 * C1448 + C48265 * C1905 - C47346 * C1902 +
             C26144 * C9182 - C47360 * C9180) *
                C23271 +
            (C48258 * C1460 - C47354 * C1453 + C48265 * C1911 - C47346 * C1906 +
             C26144 * C9186 - C47360 * C9183) *
                C23265 +
            (C48258 * C1454 - C47354 * C1449 + C48265 * C1907 - C47346 * C1903 +
             C26144 * C9184 - C47360 * C9181) *
                C23272 +
            (C48258 * C1461 - C47354 * C1455 + C48265 * C1912 - C47346 * C1908 +
             C26144 * C9187 - C47360 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
             C29553 * C23272 + C29554 * C48112) *
                C48304) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C23271 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C23265 +
             C29555 * C23272 + C29556 * C48112) *
                C48462 +
            ((C47354 * C928 - C48258 * C933 + C47346 * C2316 - C48265 * C2322 +
              C47360 * C2317 - C26144 * C2323) *
                 C23271 +
             (C47354 * C934 - C48258 * C943 + C47346 * C2324 - C48265 * C2334 +
              C47360 * C2325 - C26144 * C2335) *
                 C23265 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C23272 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C23271 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C23265 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C23272 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C48462 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C23271 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C23265 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C23272 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C381 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C23271 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C23265 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C23272 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48112) *
                C48462 +
            ((C48258 * C2322 - C47354 * C2316 + C48265 * C2323 -
              C47346 * C2317 + C26144 * C9650 - C47360 * C9648) *
                 C23271 +
             (C48258 * C2334 - C47354 * C2324 + C48265 * C2335 -
              C47346 * C2325 + C26144 * C9654 - C47360 * C9652) *
                 C23265 +
             (C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C23272 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
             C29553 * C23272 + C29554 * C48112) *
                C48304) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C23271 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C23265 +
             C29555 * C23272 + C29556 * C48112) *
                C48462 +
            ((C47354 * C928 - C48258 * C933 + C47346 * C2316 - C48265 * C2322 +
              C47360 * C2317 - C26144 * C2323) *
                 C23271 +
             (C47354 * C934 - C48258 * C943 + C47346 * C2324 - C48265 * C2334 +
              C47360 * C2325 - C26144 * C2335) *
                 C23265 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C23272 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C23271 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C23265 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C23272 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C48462 +
            (C29555 * C23271 + C29556 * C23265 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C23272 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C779 +
           ((C29553 * C23271 + C29554 * C23265 +
             (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C23272 +
             (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48112) *
                C48462 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C23271 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C23265 +
             (C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
              C26144 * C2331 - C47360 * C2321) *
                 C23272 +
             (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
              C26144 * C2339 - C47360 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C23271 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C23265 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C48462 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
             C29553 * C23272 + C29554 * C48112) *
                C48304) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C23271 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C23265 +
             C29555 * C23272 + C29556 * C48112) *
                C48462 +
            ((C47354 * C928 - C48258 * C933 + C47346 * C2316 - C48265 * C2322 +
              C47360 * C2317 - C26144 * C2323) *
                 C23271 +
             (C47354 * C934 - C48258 * C943 + C47346 * C2324 - C48265 * C2334 +
              C47360 * C2325 - C26144 * C2335) *
                 C23265 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C23272 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C23271 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C23265 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C23272 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C48462 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C23271 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C23265 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C23272 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C779 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C23271 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C23265 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C23272 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48112) *
                C48462 +
            ((C48258 * C2322 - C47354 * C2316 + C48265 * C2323 -
              C47346 * C2317 + C26144 * C9650 - C47360 * C9648) *
                 C23271 +
             (C48258 * C2334 - C47354 * C2324 + C48265 * C2335 -
              C47346 * C2325 + C26144 * C9654 - C47360 * C9652) *
                 C23265 +
             (C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C23272 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C23271 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C23265 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C23272 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C48462 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C23271 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C23265 +
            C29553 * C23272 + C29554 * C48112) *
               C48304) *
              C925 +
          (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C23271 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C23265 +
            C29555 * C23272 + C29556 * C48112) *
               C48462 +
           ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C23271 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C23265 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C23272 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
               C48304) *
              C926 +
          (((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C23271 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C23265 +
            (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C23272 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48112) *
               C48462 +
           ((C48258 * C2785 - C47354 * C2781 + C48265 * C3230 - C47346 * C3227 +
             C26144 * C10064 - C47360 * C10062) *
                C23271 +
            (C48258 * C2793 - C47354 * C2786 + C48265 * C3236 - C47346 * C3231 +
             C26144 * C10068 - C47360 * C10065) *
                C23265 +
            (C48258 * C2787 - C47354 * C2782 + C48265 * C3232 - C47346 * C3228 +
             C26144 * C10066 - C47360 * C10063) *
                C23272 +
            (C48258 * C2794 - C47354 * C2788 + C48265 * C3237 - C47346 * C3233 +
             C26144 * C10069 - C47360 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C48188 * C48171 * C110 +
          ((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
            C23280) *
               C23271 +
           (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
            C23288) *
               C23265 +
           (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
            C23297) *
               C23272 +
           (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
            C23305) *
               C48112) *
              C48217 * C48188 * C48171 * C111 +
          ((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
            C23296) *
               C23271 +
           (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
            C23304) *
               C23265 +
           (C48536 * C132 - C23267 * C122 + C48532 * C271 - C23268 * C262 +
            C48522 * C586 - C23269 * C578 + C48504 * C1272 - C23270 * C1265) *
               C23272 +
           (C48536 * C143 - C23267 * C133 + C48532 * C280 - C23268 * C272 +
            C48522 * C593 - C23269 * C587 + C48504 * C1277 - C23270 * C1273) *
               C48112) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C48188 * C48171 * C110 +
          ((C22097 - C22096 + C22099 - C22098) * C22091 +
           (C22101 - C22100 + C22103 - C22102) * C48535 +
           (C22105 - C22104 + C22107 - C22106) * C22092 +
           (C22109 - C22108 + C22111 - C22110) * C48528 +
           (C22113 - C22112 + C22115 - C22114) * C22093 +
           (C22117 - C22116 + C22119 - C22118) * C48515 +
           (C22120 - C22121 + C22122 - C22123) * C22094 +
           (C22124 - C22125 + C22126 - C22127) * C48498) *
              C48217 * C48188 * C48171 * C111 +
          (C22136 * C22091 + C22137 * C48535 + C22138 * C22092 +
           C22139 * C48528 + (C22121 - C22120 + C22123 - C22122) * C22093 +
           (C22125 - C22124 + C22127 - C22126) * C48515 +
           (C22083 * C136 - C22089 * C124 + C48262 * C275 - C22090 * C264) *
               C22094 +
           (C22083 * C145 - C22089 * C137 + C48262 * C282 - C22090 * C276) *
               C48498) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C23271 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C23265 +
            (C22096 - C22097 + C22098 - C22099) * C23272 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48530 +
           ((C22083 * C389 - C22089 * C383 + C48262 * C682 - C22090 * C677) *
                C23271 +
            (C22083 * C401 - C22089 * C390 + C48262 * C692 - C22090 * C683) *
                C23265 +
            (C22425 - C22424 + C22427 - C22426) * C23272 +
            (C22429 - C22428 + C22431 - C22430) * C48112) *
               C48519 +
           ((C22083 * C933 - C22089 * C928 + C48262 * C2322 - C22090 * C2316) *
                C23271 +
            (C22083 * C943 - C22089 * C934 + C48262 * C2334 - C22090 * C2324) *
                C23265 +
            (C24460 - C24461 + C24462 - C24463) * C23272 +
            (C24464 - C24465 + C24466 - C24467) * C48112) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C23271 +
            (C22101 - C22100 + C22103 - C22102) * C23265 +
            (C22105 - C22104 + C22107 - C22106) * C23272 +
            (C22109 - C22108 + C22111 - C22110) * C48112) *
               C48530 +
           ((C22424 - C22425 + C22426 - C22427) * C23271 +
            (C22428 - C22429 + C22430 - C22431) * C23265 +
            (C22432 - C22433 + C22434 - C22435) * C23272 +
            (C22436 - C22437 + C22438 - C22439) * C48112) *
               C48519 +
           ((C24461 - C24460 + C24463 - C24462) * C23271 +
            (C24465 - C24464 + C24467 - C24466) * C23265 +
            (C24468 - C24469 + C24470 - C24471) * C23272 +
            (C24472 - C24473 + C24474 - C24475) * C48112) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C22136 * C23271 + C22137 * C23265 + C22138 * C23272 +
            C22139 * C48112) *
               C48530 +
           ((C22433 - C22432 + C22435 - C22434) * C23271 +
            (C22437 - C22436 + C22439 - C22438) * C23265 +
            (C22441 - C22440 + C22443 - C22442) * C23272 +
            (C22445 - C22444 + C22447 - C22446) * C48112) *
               C48519 +
           ((C24469 - C24468 + C24471 - C24470) * C23271 +
            (C24473 - C24472 + C24475 - C24474) * C23265 +
            (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                C23272 +
            (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                C48112) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C23271 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C23265 +
            (C48536 * C269 - C23267 * C261 + C48532 * C584 - C23268 * C577 +
             C48522 * C1270 - C23269 * C1264 + C48504 * C1751 -
             C23270 * C1746) *
                C23272 +
            (C48536 * C279 - C23267 * C270 + C48532 * C592 - C23268 * C585 +
             C48522 * C1276 - C23269 * C1271 + C48504 * C1755 -
             C23270 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C48188 * C255 +
           ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C48188 * C255 +
           ((C22271 - C22270 + C22273 - C22272) * C22091 +
            (C22275 - C22274 + C22277 - C22276) * C48535 +
            (C22279 - C22278 + C22281 - C22280) * C22092 +
            (C22283 - C22282 + C22285 - C22284) * C48528 +
            (C22287 - C22286 + C22289 - C22288) * C22093 +
            (C22291 - C22290 + C22293 - C22292) * C48515 +
            (C22083 * C273 - C22089 * C263 + C48262 * C588 - C22090 * C579) *
                C22094 +
            (C22083 * C281 - C22089 * C274 + C48262 * C594 - C22090 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C22083 * C389 - C22089 * C383 + C48262 * C682 - C22090 * C677) *
                 C23271 +
             (C22083 * C401 - C22089 * C390 + C48262 * C692 - C22090 * C683) *
                 C23265 +
             (C22425 - C22424 + C22427 - C22426) * C23272 +
             (C22429 - C22428 + C22431 - C22430) * C48112) *
                C48519 +
            ((C22083 * C933 - C22089 * C928 + C48262 * C2322 - C22090 * C2316) *
                 C23271 +
             (C22083 * C943 - C22089 * C934 + C48262 * C2334 - C22090 * C2324) *
                 C23265 +
             (C24460 - C24461 + C24462 - C24463) * C23272 +
             (C24464 - C24465 + C24466 - C24467) * C48112) *
                C48497) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C23271 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C23265 +
             (C22270 - C22271 + C22272 - C22273) * C23272 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48530 +
            ((C22089 * C677 - C22083 * C682 + C22090 * C1448 - C48262 * C1452) *
                 C23271 +
             (C22089 * C683 - C22083 * C692 + C22090 * C1453 - C48262 * C1460) *
                 C23265 +
             (C24670 - C24671 + C24672 - C24673) * C23272 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48519 +
            ((C22089 * C2316 - C22083 * C2322 + C22090 * C2317 -
              C48262 * C2323) *
                 C23271 +
             (C22089 * C2324 - C22083 * C2334 + C22090 * C2325 -
              C48262 * C2335) *
                 C23265 +
             (C24678 - C24679 + C24680 - C24681) * C23272 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C23271 +
             (C22101 - C22100 + C22103 - C22102) * C23265 +
             (C22105 - C22104 + C22107 - C22106) * C23272 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48530 +
            ((C22424 - C22425 + C22426 - C22427) * C23271 +
             (C22428 - C22429 + C22430 - C22431) * C23265 +
             (C22432 - C22433 + C22434 - C22435) * C23272 +
             (C22436 - C22437 + C22438 - C22439) * C48112) *
                C48519 +
            ((C24461 - C24460 + C24463 - C24462) * C23271 +
             (C24465 - C24464 + C24467 - C24466) * C23265 +
             (C24468 - C24469 + C24470 - C24471) * C23272 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C48497) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C23271 +
             (C22275 - C22274 + C22277 - C22276) * C23265 +
             (C22279 - C22278 + C22281 - C22280) * C23272 +
             (C22283 - C22282 + C22285 - C22284) * C48112) *
                C48530 +
            ((C24671 - C24670 + C24673 - C24672) * C23271 +
             (C24675 - C24674 + C24677 - C24676) * C23265 +
             (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                 C23272 +
             (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                 C48112) *
                C48519 +
            ((C24679 - C24678 + C24681 - C24680) * C23271 +
             (C24683 - C24682 + C24685 - C24684) * C23265 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C23272 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48112) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C381 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C381 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C23271 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C23265 +
            (C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C23272 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C381 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C381 +
           ((C22425 - C22424 + C22427 - C22426) * C22091 +
            (C22429 - C22428 + C22431 - C22430) * C48535 +
            (C22433 - C22432 + C22435 - C22434) * C22092 +
            (C22437 - C22436 + C22439 - C22438) * C48528 +
            (C22441 - C22440 + C22443 - C22442) * C22093 +
            (C22445 - C22444 + C22447 - C22446) * C48515 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C22094 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C24880 - C24881 + C24882 - C24883) * C23271 +
             (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
             C24921 * C48112) *
                C48519 +
            ((C24892 - C24893 + C24894 - C24895) * C23271 +
             (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
             C24923 * C48112) *
                C48497) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C23271 +
             (C24885 - C24884 + C24887 - C24886) * C23265 + C24924 * C23272 +
             C24925 * C48112) *
                C48530 +
            ((C24893 - C24892 + C24895 - C24894) * C23271 +
             (C24897 - C24896 + C24899 - C24898) * C23265 + C24926 * C23272 +
             C24927 * C48112) *
                C48519 +
            ((C22089 * C2781 - C22083 * C2785 + C22090 * C3227 -
              C48262 * C3230) *
                 C23271 +
             (C22089 * C2786 - C22083 * C2793 + C22090 * C3231 -
              C48262 * C3236) *
                 C23265 +
             (C24912 - C24913 + C24914 - C24915) * C23272 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C23271 +
             (C22101 - C22100 + C22103 - C22102) * C23265 +
             (C22105 - C22104 + C22107 - C22106) * C23272 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48530 +
            (C24924 * C23271 + C24925 * C23265 +
             (C22432 - C22433 + C22434 - C22435) * C23272 +
             (C22436 - C22437 + C22438 - C22439) * C48112) *
                C48519 +
            (C24926 * C23271 + C24927 * C23265 +
             (C24468 - C24469 + C24470 - C24471) * C23272 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C48497) *
               C381 +
           ((C24920 * C23271 + C24921 * C23265 +
             (C22433 - C22432 + C22435 - C22434) * C23272 +
             (C22437 - C22436 + C22439 - C22438) * C48112) *
                C48530 +
            (C24922 * C23271 + C24923 * C23265 +
             (C24469 - C24468 + C24471 - C24470) * C23272 +
             (C24473 - C24472 + C24475 - C24474) * C48112) *
                C48519 +
            ((C24913 - C24912 + C24915 - C24914) * C23271 +
             (C24917 - C24916 + C24919 - C24918) * C23265 +
             (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
              C22090 * C3229) *
                 C23272 +
             (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
              C22090 * C3235) *
                 C48112) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C23271 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C23265 +
            (C48536 * C269 - C23267 * C261 + C48532 * C584 - C23268 * C577 +
             C48522 * C1270 - C23269 * C1264 + C48504 * C1751 -
             C23270 * C1746) *
                C23272 +
            (C48536 * C279 - C23267 * C270 + C48532 * C592 - C23268 * C585 +
             C48522 * C1276 - C23269 * C1271 + C48504 * C1755 -
             C23270 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C48188 * C505 +
           ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C48188 * C505 +
           ((C22271 - C22270 + C22273 - C22272) * C22091 +
            (C22275 - C22274 + C22277 - C22276) * C48535 +
            (C22279 - C22278 + C22281 - C22280) * C22092 +
            (C22283 - C22282 + C22285 - C22284) * C48528 +
            (C22287 - C22286 + C22289 - C22288) * C22093 +
            (C22291 - C22290 + C22293 - C22292) * C48515 +
            (C22083 * C273 - C22089 * C263 + C48262 * C588 - C22090 * C579) *
                C22094 +
            (C22083 * C281 - C22089 * C274 + C48262 * C594 - C22090 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C24880 - C24881 + C24882 - C24883) * C23271 +
             (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
             C24921 * C48112) *
                C48519 +
            ((C24892 - C24893 + C24894 - C24895) * C23271 +
             (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
             C24923 * C48112) *
                C48497) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C23271 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C23265 +
             (C22270 - C22271 + C22272 - C22273) * C23272 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48530 +
            ((C22089 * C677 - C22083 * C682 + C22090 * C1448 - C48262 * C1452) *
                 C23271 +
             (C22089 * C683 - C22083 * C692 + C22090 * C1453 - C48262 * C1460) *
                 C23265 +
             (C24670 - C24671 + C24672 - C24673) * C23272 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48519 +
            ((C22089 * C2316 - C22083 * C2322 + C22090 * C2317 -
              C48262 * C2323) *
                 C23271 +
             (C22089 * C2324 - C22083 * C2334 + C22090 * C2325 -
              C48262 * C2335) *
                 C23265 +
             (C24678 - C24679 + C24680 - C24681) * C23272 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C23271 +
             (C22101 - C22100 + C22103 - C22102) * C23265 +
             (C22105 - C22104 + C22107 - C22106) * C23272 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48530 +
            (C24924 * C23271 + C24925 * C23265 +
             (C22432 - C22433 + C22434 - C22435) * C23272 +
             (C22436 - C22437 + C22438 - C22439) * C48112) *
                C48519 +
            (C24926 * C23271 + C24927 * C23265 +
             (C24468 - C24469 + C24470 - C24471) * C23272 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C48497) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C23271 +
             (C22275 - C22274 + C22277 - C22276) * C23265 +
             (C22279 - C22278 + C22281 - C22280) * C23272 +
             (C22283 - C22282 + C22285 - C22284) * C48112) *
                C48530 +
            ((C24671 - C24670 + C24673 - C24672) * C23271 +
             (C24675 - C24674 + C24677 - C24676) * C23265 +
             (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                 C23272 +
             (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                 C48112) *
                C48519 +
            ((C24679 - C24678 + C24681 - C24680) * C23271 +
             (C24683 - C24682 + C24685 - C24684) * C23265 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C23272 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48112) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C48188 * C571 +
          ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
            C23269 * C1262 - C48522 * C1266 + C23270 * C1744 - C48504 * C1747) *
               C23271 +
           (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
            C23269 * C1267 - C48522 * C1274 + C23270 * C1748 - C48504 * C1753) *
               C23265 +
           (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
            C23443) *
               C23272 +
           (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
            C23451) *
               C48112) *
              C48217 * C48188 * C572 +
          ((C48536 * C580 - C23267 * C575 + C48532 * C1266 - C23268 * C1262 +
            C48522 * C1747 - C23269 * C1744 + C48504 * C9092 - C23270 * C9090) *
               C23271 +
           (C48536 * C590 - C23267 * C581 + C48532 * C1274 - C23268 * C1267 +
            C48522 * C1753 - C23269 * C1748 + C48504 * C9096 - C23270 * C9093) *
               C23265 +
           (C48536 * C582 - C23267 * C576 + C48532 * C1268 - C23268 * C1263 +
            C48522 * C1749 - C23269 * C1745 + C48504 * C9094 - C23270 * C9091) *
               C23272 +
           (C48536 * C591 - C23267 * C583 + C48532 * C1275 - C23268 * C1269 +
            C48522 * C1754 - C23269 * C1750 + C48504 * C9097 - C23270 * C9095) *
               C48112) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C48188 * C571 +
          ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
               C22091 +
           (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
               C48535 +
           (C22270 - C22271 + C22272 - C22273) * C22092 +
           (C22274 - C22275 + C22276 - C22277) * C48528 +
           (C22278 - C22279 + C22280 - C22281) * C22093 +
           (C22282 - C22283 + C22284 - C22285) * C48515 +
           (C22286 - C22287 + C22288 - C22289) * C22094 +
           (C22290 - C22291 + C22292 - C22293) * C48498) *
              C48217 * C48188 * C572 +
          ((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
               C22091 +
           (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
               C48535 +
           (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
               C22092 +
           (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
               C48528 +
           (C22083 * C584 - C22089 * C577 + C48262 * C1270 - C22090 * C1264) *
               C22093 +
           (C22083 * C592 - C22089 * C585 + C48262 * C1276 - C22090 * C1271) *
               C48515 +
           (C22083 * C586 - C22089 * C578 + C48262 * C1272 - C22090 * C1265) *
               C22094 +
           (C22083 * C593 - C22089 * C587 + C48262 * C1277 - C22090 * C1273) *
               C48498) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C23271 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C23265 +
            (C22096 - C22097 + C22098 - C22099) * C23272 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48530 +
           ((C24880 - C24881 + C24882 - C24883) * C23271 +
            (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
            C24921 * C48112) *
               C48519 +
           ((C24892 - C24893 + C24894 - C24895) * C23271 +
            (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
            C24923 * C48112) *
               C48497) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C23271 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C23265 +
            (C22270 - C22271 + C22272 - C22273) * C23272 +
            (C22274 - C22275 + C22276 - C22277) * C48112) *
               C48530 +
           ((C22089 * C677 - C22083 * C682 + C22090 * C1448 - C48262 * C1452) *
                C23271 +
            (C22089 * C683 - C22083 * C692 + C22090 * C1453 - C48262 * C1460) *
                C23265 +
            (C24670 - C24671 + C24672 - C24673) * C23272 +
            (C24674 - C24675 + C24676 - C24677) * C48112) *
               C48519 +
           ((C22089 * C2316 - C22083 * C2322 + C22090 * C2317 -
             C48262 * C2323) *
                C23271 +
            (C22089 * C2324 - C22083 * C2334 + C22090 * C2325 -
             C48262 * C2335) *
                C23265 +
            (C24678 - C24679 + C24680 - C24681) * C23272 +
            (C24682 - C24683 + C24684 - C24685) * C48112) *
               C48497) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C23271 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C23265 +
            (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
                C23272 +
            (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
                C48112) *
               C48530 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C23271 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C23265 +
            (C22083 * C1454 - C22089 * C1449 + C48262 * C1907 -
             C22090 * C1903) *
                C23272 +
            (C22083 * C1461 - C22089 * C1455 + C48262 * C1912 -
             C22090 * C1908) *
                C48112) *
               C48519 +
           ((C22083 * C2323 - C22089 * C2317 + C48262 * C9650 -
             C22090 * C9648) *
                C23271 +
            (C22083 * C2335 - C22089 * C2325 + C48262 * C9654 -
             C22090 * C9652) *
                C23265 +
            (C22083 * C2327 - C22089 * C2319 + C48262 * C9913 -
             C22090 * C9912) *
                C23272 +
            (C22083 * C2337 - C22089 * C2329 + C48262 * C9915 -
             C22090 * C9914) *
                C48112) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C381 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C505 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C381 +
           ((C48536 * C682 - C23267 * C677 + C48532 * C1452 - C23268 * C1448 +
             C48522 * C1905 - C23269 * C1902 + C48504 * C9182 -
             C23270 * C9180) *
                C23271 +
            (C48536 * C692 - C23267 * C683 + C48532 * C1460 - C23268 * C1453 +
             C48522 * C1911 - C23269 * C1906 + C48504 * C9186 -
             C23270 * C9183) *
                C23265 +
            (C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
             C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
             C23270 * C9181) *
                C23272 +
            (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
             C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
             C23270 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C381 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C505 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C381 +
           ((C22083 * C682 - C22089 * C677 + C48262 * C1452 - C22090 * C1448) *
                C22091 +
            (C22083 * C692 - C22089 * C683 + C48262 * C1460 - C22090 * C1453) *
                C48535 +
            (C22083 * C684 - C22089 * C678 + C48262 * C1454 - C22090 * C1449) *
                C22092 +
            (C22083 * C693 - C22089 * C685 + C48262 * C1461 - C22090 * C1455) *
                C48528 +
            (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                C22093 +
            (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                C48515 +
            (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                C22094 +
            (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C24880 - C24881 + C24882 - C24883) * C23271 +
             (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
             C24921 * C48112) *
                C48519 +
            ((C24892 - C24893 + C24894 - C24895) * C23271 +
             (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
             C24923 * C48112) *
                C48497) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C23271 +
             (C24885 - C24884 + C24887 - C24886) * C23265 + C24924 * C23272 +
             C24925 * C48112) *
                C48530 +
            ((C24893 - C24892 + C24895 - C24894) * C23271 +
             (C24897 - C24896 + C24899 - C24898) * C23265 + C24926 * C23272 +
             C24927 * C48112) *
                C48519 +
            ((C22089 * C2781 - C22083 * C2785 + C22090 * C3227 -
              C48262 * C3230) *
                 C23271 +
             (C22089 * C2786 - C22083 * C2793 + C22090 * C3231 -
              C48262 * C3236) *
                 C23265 +
             (C24912 - C24913 + C24914 - C24915) * C23272 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C48497) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C23271 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C23265 +
             (C22270 - C22271 + C22272 - C22273) * C23272 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48530 +
            ((C25462 - C25463 + C25464 - C25465) * C23271 +
             (C25466 - C25467 + C25468 - C25469) * C23265 +
             (C24670 - C24671 + C24672 - C24673) * C23272 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48519 +
            ((C25470 - C25471 + C25472 - C25473) * C23271 +
             (C25474 - C25475 + C25476 - C25477) * C23265 +
             (C24678 - C24679 + C24680 - C24681) * C23272 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C48497) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C23271 +
             (C25467 - C25466 + C25469 - C25468) * C23265 +
             (C24671 - C24670 + C24673 - C24672) * C23272 +
             (C24675 - C24674 + C24677 - C24676) * C48112) *
                C48530 +
            ((C25471 - C25470 + C25473 - C25472) * C23271 +
             (C25475 - C25474 + C25477 - C25476) * C23265 +
             (C24679 - C24678 + C24681 - C24680) * C23272 +
             (C24683 - C24682 + C24685 - C24684) * C48112) *
                C48519 +
            ((C22083 * C3230 - C22089 * C3227 + C48262 * C10064 -
              C22090 * C10062) *
                 C23271 +
             (C22083 * C3236 - C22089 * C3231 + C48262 * C10068 -
              C22090 * C10065) *
                 C23265 +
             (C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C23272 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48112) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C779 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C779 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C23271 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C23265 +
            (C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C23272 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C779 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C779 +
           ((C22425 - C22424 + C22427 - C22426) * C22091 +
            (C22429 - C22428 + C22431 - C22430) * C48535 +
            (C22433 - C22432 + C22435 - C22434) * C22092 +
            (C22437 - C22436 + C22439 - C22438) * C48528 +
            (C22441 - C22440 + C22443 - C22442) * C22093 +
            (C22445 - C22444 + C22447 - C22446) * C48515 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C22094 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C24880 - C24881 + C24882 - C24883) * C23271 +
             (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
             C24921 * C48112) *
                C48519 +
            ((C24892 - C24893 + C24894 - C24895) * C23271 +
             (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
             C24923 * C48112) *
                C48497) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C23271 +
             (C24885 - C24884 + C24887 - C24886) * C23265 + C24924 * C23272 +
             C24925 * C48112) *
                C48530 +
            ((C24893 - C24892 + C24895 - C24894) * C23271 +
             (C24897 - C24896 + C24899 - C24898) * C23265 + C24926 * C23272 +
             C24927 * C48112) *
                C48519 +
            ((C22089 * C2781 - C22083 * C2785 + C22090 * C3227 -
              C48262 * C3230) *
                 C23271 +
             (C22089 * C2786 - C22083 * C2793 + C22090 * C3231 -
              C48262 * C3236) *
                 C23265 +
             (C24912 - C24913 + C24914 - C24915) * C23272 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C23271 +
             (C22101 - C22100 + C22103 - C22102) * C23265 +
             (C22105 - C22104 + C22107 - C22106) * C23272 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48530 +
            (C24924 * C23271 + C24925 * C23265 +
             (C22432 - C22433 + C22434 - C22435) * C23272 +
             (C22436 - C22437 + C22438 - C22439) * C48112) *
                C48519 +
            (C24926 * C23271 + C24927 * C23265 +
             (C24468 - C24469 + C24470 - C24471) * C23272 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C48497) *
               C779 +
           ((C24920 * C23271 + C24921 * C23265 +
             (C22433 - C22432 + C22435 - C22434) * C23272 +
             (C22437 - C22436 + C22439 - C22438) * C48112) *
                C48530 +
            (C24922 * C23271 + C24923 * C23265 +
             (C24469 - C24468 + C24471 - C24470) * C23272 +
             (C24473 - C24472 + C24475 - C24474) * C48112) *
                C48519 +
            ((C24913 - C24912 + C24915 - C24914) * C23271 +
             (C24917 - C24916 + C24919 - C24918) * C23265 +
             (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
              C22090 * C3229) *
                 C23272 +
             (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
              C22090 * C3235) *
                 C48112) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C779 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C255 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C779 +
           ((C48536 * C682 - C23267 * C677 + C48532 * C1452 - C23268 * C1448 +
             C48522 * C1905 - C23269 * C1902 + C48504 * C9182 -
             C23270 * C9180) *
                C23271 +
            (C48536 * C692 - C23267 * C683 + C48532 * C1460 - C23268 * C1453 +
             C48522 * C1911 - C23269 * C1906 + C48504 * C9186 -
             C23270 * C9183) *
                C23265 +
            (C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
             C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
             C23270 * C9181) *
                C23272 +
            (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
             C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
             C23270 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C779 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C255 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C779 +
           ((C22083 * C682 - C22089 * C677 + C48262 * C1452 - C22090 * C1448) *
                C22091 +
            (C22083 * C692 - C22089 * C683 + C48262 * C1460 - C22090 * C1453) *
                C48535 +
            (C22083 * C684 - C22089 * C678 + C48262 * C1454 - C22090 * C1449) *
                C22092 +
            (C22083 * C693 - C22089 * C685 + C48262 * C1461 - C22090 * C1455) *
                C48528 +
            (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                C22093 +
            (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                C48515 +
            (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                C22094 +
            (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C23271 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C23265 +
             (C22096 - C22097 + C22098 - C22099) * C23272 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48530 +
            ((C24880 - C24881 + C24882 - C24883) * C23271 +
             (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
             C24921 * C48112) *
                C48519 +
            ((C24892 - C24893 + C24894 - C24895) * C23271 +
             (C24896 - C24897 + C24898 - C24899) * C23265 + C24922 * C23272 +
             C24923 * C48112) *
                C48497) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C23271 +
             (C24885 - C24884 + C24887 - C24886) * C23265 + C24924 * C23272 +
             C24925 * C48112) *
                C48530 +
            ((C24893 - C24892 + C24895 - C24894) * C23271 +
             (C24897 - C24896 + C24899 - C24898) * C23265 + C24926 * C23272 +
             C24927 * C48112) *
                C48519 +
            ((C22089 * C2781 - C22083 * C2785 + C22090 * C3227 -
              C48262 * C3230) *
                 C23271 +
             (C22089 * C2786 - C22083 * C2793 + C22090 * C3231 -
              C48262 * C3236) *
                 C23265 +
             (C24912 - C24913 + C24914 - C24915) * C23272 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C48497) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C23271 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C23265 +
             (C22270 - C22271 + C22272 - C22273) * C23272 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48530 +
            ((C25462 - C25463 + C25464 - C25465) * C23271 +
             (C25466 - C25467 + C25468 - C25469) * C23265 +
             (C24670 - C24671 + C24672 - C24673) * C23272 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48519 +
            ((C25470 - C25471 + C25472 - C25473) * C23271 +
             (C25474 - C25475 + C25476 - C25477) * C23265 +
             (C24678 - C24679 + C24680 - C24681) * C23272 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C48497) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C23271 +
             (C25467 - C25466 + C25469 - C25468) * C23265 +
             (C24671 - C24670 + C24673 - C24672) * C23272 +
             (C24675 - C24674 + C24677 - C24676) * C48112) *
                C48530 +
            ((C25471 - C25470 + C25473 - C25472) * C23271 +
             (C25475 - C25474 + C25477 - C25476) * C23265 +
             (C24679 - C24678 + C24681 - C24680) * C23272 +
             (C24683 - C24682 + C24685 - C24684) * C48112) *
                C48519 +
            ((C22083 * C3230 - C22089 * C3227 + C48262 * C10064 -
              C22090 * C10062) *
                 C23271 +
             (C22083 * C3236 - C22089 * C3231 + C48262 * C10068 -
              C22090 * C10065) *
                 C23265 +
             (C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C23272 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48112) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C925 +
          ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
            C23269 * C1448 - C48522 * C1452 + C23270 * C1902 - C48504 * C1905) *
               C23271 +
           (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
            C23269 * C1453 - C48522 * C1460 + C23270 * C1906 - C48504 * C1911) *
               C23265 +
           (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
            C23589) *
               C23272 +
           (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
            C23597) *
               C48112) *
              C48217 * C926 +
          ((C48536 * C933 - C23267 * C928 + C48532 * C2322 - C23268 * C2316 +
            C48522 * C2323 - C23269 * C2317 + C48504 * C9650 - C23270 * C9648) *
               C23271 +
           (C48536 * C943 - C23267 * C934 + C48532 * C2334 - C23268 * C2324 +
            C48522 * C2335 - C23269 * C2325 + C48504 * C9654 - C23270 * C9652) *
               C23265 +
           (C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
            C48522 * C2327 - C23269 * C2319 + C48504 * C9913 - C23270 * C9912) *
               C23272 +
           (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
            C48522 * C2337 - C23269 * C2329 + C48504 * C9915 - C23270 * C9914) *
               C48112) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C925 +
          ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
               C22091 +
           (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
               C48535 +
           (C22424 - C22425 + C22426 - C22427) * C22092 +
           (C22428 - C22429 + C22430 - C22431) * C48528 +
           (C22432 - C22433 + C22434 - C22435) * C22093 +
           (C22436 - C22437 + C22438 - C22439) * C48515 +
           (C22440 - C22441 + C22442 - C22443) * C22094 +
           (C22444 - C22445 + C22446 - C22447) * C48498) *
              C48217 * C926 +
          ((C22083 * C933 - C22089 * C928 + C48262 * C2322 - C22090 * C2316) *
               C22091 +
           (C22083 * C943 - C22089 * C934 + C48262 * C2334 - C22090 * C2324) *
               C48535 +
           (C22083 * C935 - C22089 * C929 + C48262 * C2326 - C22090 * C2318) *
               C22092 +
           (C22083 * C944 - C22089 * C936 + C48262 * C2336 - C22090 * C2328) *
               C48528 +
           (C22083 * C937 - C22089 * C930 + C48262 * C2330 - C22090 * C2320) *
               C22093 +
           (C22083 * C945 - C22089 * C938 + C48262 * C2338 - C22090 * C2332) *
               C48515 +
           (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
               C22094 +
           (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
               C48498) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C23271 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C23265 +
            (C22096 - C22097 + C22098 - C22099) * C23272 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48530 +
           ((C24880 - C24881 + C24882 - C24883) * C23271 +
            (C24884 - C24885 + C24886 - C24887) * C23265 + C24920 * C23272 +
            C24921 * C48112) *
               C48519 +
           C26032 * C48497) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C23271 +
            (C24885 - C24884 + C24887 - C24886) * C23265 + C24924 * C23272 +
            C24925 * C48112) *
               C48530 +
           ((C24893 - C24892 + C24895 - C24894) * C23271 +
            (C24897 - C24896 + C24899 - C24898) * C23265 + C24926 * C23272 +
            C24927 * C48112) *
               C48519 +
           ((C26018 - C26019 + C26020 - C26021) * C23271 +
            (C26022 - C26023 + C26024 - C26025) * C23265 +
            (C24912 - C24913 + C24914 - C24915) * C23272 +
            (C24916 - C24917 + C24918 - C24919) * C48112) *
               C48497) *
              C926 +
          (C26032 * C48530 +
           ((C26019 - C26018 + C26021 - C26020) * C23271 +
            (C26023 - C26022 + C26025 - C26024) * C23265 +
            (C24913 - C24912 + C24915 - C24914) * C23272 +
            (C24917 - C24916 + C24919 - C24918) * C48112) *
               C48519 +
           ((C22083 * C3652 - C22089 * C3649 + C48262 * C10940 -
             C22090 * C10938) *
                C23271 +
            (C22083 * C3658 - C22089 * C3653 + C48262 * C10944 -
             C22090 * C10942) *
                C23265 +
            (C22083 * C3654 - C22089 * C3650 + C48262 * C17538 -
             C22090 * C17537) *
                C23272 +
            (C22083 * C3659 - C22089 * C3655 + C48262 * C17540 -
             C22090 * C17539) *
                C48112) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47235 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48107 +
            (C22096 - C22097 + C22098 - C22099) * C47231 +
            (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
            C22137 * C26147) *
               C48462 +
           ((C24880 - C24881 + C24882 - C24883) * C47235 +
            (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
            C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C47235 +
            (C22101 - C22100 + C22103 - C22102) * C48107 +
            (C22105 - C22104 + C22107 - C22106) * C47231 +
            (C22109 - C22108 + C22111 - C22110) * C48115 +
            (C22113 - C22112 + C22115 - C22114) * C47241 +
            (C22117 - C22116 + C22119 - C22118) * C26147) *
               C48462 +
           (C24924 * C47235 + C24925 * C48107 +
            (C22432 - C22433 + C22434 - C22435) * C47231 +
            (C22436 - C22437 + C22438 - C22439) * C48115 +
            (C22440 - C22441 + C22442 - C22443) * C47241 +
            (C22444 - C22445 + C22446 - C22447) * C26147) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C22136 * C47235 + C22137 * C48107 + C22138 * C47231 +
            C22139 * C48115 + (C22121 - C22120 + C22123 - C22122) * C47241 +
            (C22125 - C22124 + C22127 - C22126) * C26147) *
               C48462 +
           (C27495 * C47235 + C27496 * C48107 +
            (C22441 - C22440 + C22443 - C22442) * C47231 +
            (C22445 - C22444 + C22447 - C22446) * C48115 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C47241 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C26147) *
               C48304) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47235 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48107 +
             (C22270 - C22271 + C22272 - C22273) * C47231 +
             (C22274 - C22275 + C22276 - C22277) * C48115 +
             (C22278 - C22279 + C22280 - C22281) * C47241 +
             (C22282 - C22283 + C22284 - C22285) * C26147) *
                C48462 +
            ((C25462 - C25463 + C25464 - C25465) * C47235 +
             (C25466 - C25467 + C25468 - C25469) * C48107 +
             (C24670 - C24671 + C24672 - C24673) * C47231 +
             (C24674 - C24675 + C24676 - C24677) * C48115 +
             (C27691 - C27692 + C27693 - C27694) * C47241 +
             (C27695 - C27696 + C27697 - C27698) * C26147) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C47235 +
             (C22101 - C22100 + C22103 - C22102) * C48107 +
             (C22105 - C22104 + C22107 - C22106) * C47231 +
             (C22109 - C22108 + C22111 - C22110) * C48115 +
             (C22113 - C22112 + C22115 - C22114) * C47241 +
             (C22117 - C22116 + C22119 - C22118) * C26147) *
                C48462 +
            (C24924 * C47235 + C24925 * C48107 +
             (C22432 - C22433 + C22434 - C22435) * C47231 +
             (C22436 - C22437 + C22438 - C22439) * C48115 +
             (C22440 - C22441 + C22442 - C22443) * C47241 +
             (C22444 - C22445 + C22446 - C22447) * C26147) *
                C48304) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C47235 +
             (C22275 - C22274 + C22277 - C22276) * C48107 +
             (C22279 - C22278 + C22281 - C22280) * C47231 +
             (C22283 - C22282 + C22285 - C22284) * C48115 +
             (C22287 - C22286 + C22289 - C22288) * C47241 +
             (C22291 - C22290 + C22293 - C22292) * C26147) *
                C48462 +
            ((C24671 - C24670 + C24673 - C24672) * C47235 +
             (C24675 - C24674 + C24677 - C24676) * C48107 +
             (C27692 - C27691 + C27694 - C27693) * C47231 +
             (C27696 - C27695 + C27698 - C27697) * C48115 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C47241 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C26147) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C47235 +
             (C24885 - C24884 + C24887 - C24886) * C48107 + C24924 * C47231 +
             C24925 * C48115 + C27897 * C47241 + C27898 * C26147) *
                C48462 +
            ((C24893 - C24892 + C24895 - C24894) * C47235 +
             (C24897 - C24896 + C24899 - C24898) * C48107 + C24926 * C47231 +
             C24927 * C48115 + (C24468 - C24469 + C24470 - C24471) * C47241 +
             (C24472 - C24473 + C24474 - C24475) * C26147) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C47235 +
             (C22101 - C22100 + C22103 - C22102) * C48107 +
             (C22105 - C22104 + C22107 - C22106) * C47231 +
             (C22109 - C22108 + C22111 - C22110) * C48115 +
             (C22113 - C22112 + C22115 - C22114) * C47241 +
             (C22117 - C22116 + C22119 - C22118) * C26147) *
                C48462 +
            (C24924 * C47235 + C24925 * C48107 + C27897 * C47231 +
             C27898 * C48115 + (C22440 - C22441 + C22442 - C22443) * C47241 +
             (C22444 - C22445 + C22446 - C22447) * C26147) *
                C48304) *
               C381 +
           ((C24920 * C47235 + C24921 * C48107 + C27495 * C47231 +
             C27496 * C48115 + (C22441 - C22440 + C22443 - C22442) * C47241 +
             (C22445 - C22444 + C22447 - C22446) * C26147) *
                C48462 +
            (C24922 * C47235 + C24923 * C48107 +
             (C24469 - C24468 + C24471 - C24470) * C47231 +
             (C24473 - C24472 + C24475 - C24474) * C48115 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C47241 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C26147) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47235 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48107 +
             (C22270 - C22271 + C22272 - C22273) * C47231 +
             (C22274 - C22275 + C22276 - C22277) * C48115 +
             (C22278 - C22279 + C22280 - C22281) * C47241 +
             (C22282 - C22283 + C22284 - C22285) * C26147) *
                C48462 +
            ((C25462 - C25463 + C25464 - C25465) * C47235 +
             (C25466 - C25467 + C25468 - C25469) * C48107 +
             (C24670 - C24671 + C24672 - C24673) * C47231 +
             (C24674 - C24675 + C24676 - C24677) * C48115 +
             (C27691 - C27692 + C27693 - C27694) * C47241 +
             (C27695 - C27696 + C27697 - C27698) * C26147) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C47235 +
             (C22101 - C22100 + C22103 - C22102) * C48107 +
             (C22105 - C22104 + C22107 - C22106) * C47231 +
             (C22109 - C22108 + C22111 - C22110) * C48115 +
             (C22113 - C22112 + C22115 - C22114) * C47241 +
             (C22117 - C22116 + C22119 - C22118) * C26147) *
                C48462 +
            (C24924 * C47235 + C24925 * C48107 + C27897 * C47231 +
             C27898 * C48115 + (C22440 - C22441 + C22442 - C22443) * C47241 +
             (C22444 - C22445 + C22446 - C22447) * C26147) *
                C48304) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C47235 +
             (C22275 - C22274 + C22277 - C22276) * C48107 +
             (C22279 - C22278 + C22281 - C22280) * C47231 +
             (C22283 - C22282 + C22285 - C22284) * C48115 +
             (C22287 - C22286 + C22289 - C22288) * C47241 +
             (C22291 - C22290 + C22293 - C22292) * C26147) *
                C48462 +
            ((C24671 - C24670 + C24673 - C24672) * C47235 +
             (C24675 - C24674 + C24677 - C24676) * C48107 +
             (C27692 - C27691 + C27694 - C27693) * C47231 +
             (C27696 - C27695 + C27698 - C27697) * C48115 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C47241 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C26147) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47235 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48107 +
            (C22096 - C22097 + C22098 - C22099) * C47231 +
            (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
            C22137 * C26147) *
               C48462 +
           ((C24880 - C24881 + C24882 - C24883) * C47235 +
            (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
            C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
               C48304) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C47235 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48107 +
            (C22270 - C22271 + C22272 - C22273) * C47231 +
            (C22274 - C22275 + C22276 - C22277) * C48115 +
            (C22278 - C22279 + C22280 - C22281) * C47241 +
            (C22282 - C22283 + C22284 - C22285) * C26147) *
               C48462 +
           ((C25462 - C25463 + C25464 - C25465) * C47235 +
            (C25466 - C25467 + C25468 - C25469) * C48107 +
            (C24670 - C24671 + C24672 - C24673) * C47231 +
            (C24674 - C24675 + C24676 - C24677) * C48115 +
            (C27691 - C27692 + C27693 - C27694) * C47241 +
            (C27695 - C27696 + C27697 - C27698) * C26147) *
               C48304) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C47235 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C48107 +
            (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
                C47231 +
            (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
                C48115 +
            (C22083 * C584 - C22089 * C577 + C48262 * C1270 - C22090 * C1264) *
                C47241 +
            (C22083 * C592 - C22089 * C585 + C48262 * C1276 - C22090 * C1271) *
                C26147) *
               C48462 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C47235 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C48107 +
            (C22083 * C1454 - C22089 * C1449 + C48262 * C1907 -
             C22090 * C1903) *
                C47231 +
            (C22083 * C1461 - C22089 * C1455 + C48262 * C1912 -
             C22090 * C1908) *
                C48115 +
            (C22083 * C1456 - C22089 * C1450 + C48262 * C1909 -
             C22090 * C1904) *
                C47241 +
            (C22083 * C1462 - C22089 * C1457 + C48262 * C1913 -
             C22090 * C1910) *
                C26147) *
               C48304) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C47235 +
             (C24885 - C24884 + C24887 - C24886) * C48107 + C24924 * C47231 +
             C24925 * C48115 + C27897 * C47241 + C27898 * C26147) *
                C48462 +
            ((C24893 - C24892 + C24895 - C24894) * C47235 +
             (C24897 - C24896 + C24899 - C24898) * C48107 + C24926 * C47231 +
             C24927 * C48115 + (C24468 - C24469 + C24470 - C24471) * C47241 +
             (C24472 - C24473 + C24474 - C24475) * C26147) *
                C48304) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47235 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48107 +
             (C22270 - C22271 + C22272 - C22273) * C47231 +
             (C22274 - C22275 + C22276 - C22277) * C48115 +
             (C22278 - C22279 + C22280 - C22281) * C47241 +
             (C22282 - C22283 + C22284 - C22285) * C26147) *
                C48462 +
            ((C25462 - C25463 + C25464 - C25465) * C47235 +
             (C25466 - C25467 + C25468 - C25469) * C48107 +
             (C24670 - C24671 + C24672 - C24673) * C47231 +
             (C24674 - C24675 + C24676 - C24677) * C48115 +
             (C27691 - C27692 + C27693 - C27694) * C47241 +
             (C27695 - C27696 + C27697 - C27698) * C26147) *
                C48304) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C47235 +
             (C25467 - C25466 + C25469 - C25468) * C48107 +
             (C24671 - C24670 + C24673 - C24672) * C47231 +
             (C24675 - C24674 + C24677 - C24676) * C48115 +
             (C27692 - C27691 + C27694 - C27693) * C47241 +
             (C27696 - C27695 + C27698 - C27697) * C26147) *
                C48462 +
            ((C25471 - C25470 + C25473 - C25472) * C47235 +
             (C25475 - C25474 + C25477 - C25476) * C48107 +
             (C24679 - C24678 + C24681 - C24680) * C47231 +
             (C24683 - C24682 + C24685 - C24684) * C48115 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C47241 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C26147) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C47235 +
             (C24885 - C24884 + C24887 - C24886) * C48107 + C24924 * C47231 +
             C24925 * C48115 + C27897 * C47241 + C27898 * C26147) *
                C48462 +
            ((C24893 - C24892 + C24895 - C24894) * C47235 +
             (C24897 - C24896 + C24899 - C24898) * C48107 + C24926 * C47231 +
             C24927 * C48115 + (C24468 - C24469 + C24470 - C24471) * C47241 +
             (C24472 - C24473 + C24474 - C24475) * C26147) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C47235 +
             (C22101 - C22100 + C22103 - C22102) * C48107 +
             (C22105 - C22104 + C22107 - C22106) * C47231 +
             (C22109 - C22108 + C22111 - C22110) * C48115 +
             (C22113 - C22112 + C22115 - C22114) * C47241 +
             (C22117 - C22116 + C22119 - C22118) * C26147) *
                C48462 +
            (C24924 * C47235 + C24925 * C48107 + C27897 * C47231 +
             C27898 * C48115 + (C22440 - C22441 + C22442 - C22443) * C47241 +
             (C22444 - C22445 + C22446 - C22447) * C26147) *
                C48304) *
               C779 +
           ((C24920 * C47235 + C24921 * C48107 + C27495 * C47231 +
             C27496 * C48115 + (C22441 - C22440 + C22443 - C22442) * C47241 +
             (C22445 - C22444 + C22447 - C22446) * C26147) *
                C48462 +
            (C24922 * C47235 + C24923 * C48107 +
             (C24469 - C24468 + C24471 - C24470) * C47231 +
             (C24473 - C24472 + C24475 - C24474) * C48115 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C47241 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C26147) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47235 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48107 +
             (C22096 - C22097 + C22098 - C22099) * C47231 +
             (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
             C22137 * C26147) *
                C48462 +
            ((C24880 - C24881 + C24882 - C24883) * C47235 +
             (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
             C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C47235 +
             (C24885 - C24884 + C24887 - C24886) * C48107 + C24924 * C47231 +
             C24925 * C48115 + C27897 * C47241 + C27898 * C26147) *
                C48462 +
            ((C24893 - C24892 + C24895 - C24894) * C47235 +
             (C24897 - C24896 + C24899 - C24898) * C48107 + C24926 * C47231 +
             C24927 * C48115 + (C24468 - C24469 + C24470 - C24471) * C47241 +
             (C24472 - C24473 + C24474 - C24475) * C26147) *
                C48304) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47235 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48107 +
             (C22270 - C22271 + C22272 - C22273) * C47231 +
             (C22274 - C22275 + C22276 - C22277) * C48115 +
             (C22278 - C22279 + C22280 - C22281) * C47241 +
             (C22282 - C22283 + C22284 - C22285) * C26147) *
                C48462 +
            ((C25462 - C25463 + C25464 - C25465) * C47235 +
             (C25466 - C25467 + C25468 - C25469) * C48107 +
             (C24670 - C24671 + C24672 - C24673) * C47231 +
             (C24674 - C24675 + C24676 - C24677) * C48115 +
             (C27691 - C27692 + C27693 - C27694) * C47241 +
             (C27695 - C27696 + C27697 - C27698) * C26147) *
                C48304) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C47235 +
             (C25467 - C25466 + C25469 - C25468) * C48107 +
             (C24671 - C24670 + C24673 - C24672) * C47231 +
             (C24675 - C24674 + C24677 - C24676) * C48115 +
             (C27692 - C27691 + C27694 - C27693) * C47241 +
             (C27696 - C27695 + C27698 - C27697) * C26147) *
                C48462 +
            ((C25471 - C25470 + C25473 - C25472) * C47235 +
             (C25475 - C25474 + C25477 - C25476) * C48107 +
             (C24679 - C24678 + C24681 - C24680) * C47231 +
             (C24683 - C24682 + C24685 - C24684) * C48115 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C47241 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C26147) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47235 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48107 +
            (C22096 - C22097 + C22098 - C22099) * C47231 +
            (C22100 - C22101 + C22102 - C22103) * C48115 + C22136 * C47241 +
            C22137 * C26147) *
               C48462 +
           ((C24880 - C24881 + C24882 - C24883) * C47235 +
            (C24884 - C24885 + C24886 - C24887) * C48107 + C24920 * C47231 +
            C24921 * C48115 + C27495 * C47241 + C27496 * C26147) *
               C48304) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C47235 +
            (C24885 - C24884 + C24887 - C24886) * C48107 + C24924 * C47231 +
            C24925 * C48115 + C27897 * C47241 + C27898 * C26147) *
               C48462 +
           ((C24893 - C24892 + C24895 - C24894) * C47235 +
            (C24897 - C24896 + C24899 - C24898) * C48107 + C24926 * C47231 +
            C24927 * C48115 + (C24468 - C24469 + C24470 - C24471) * C47241 +
            (C24472 - C24473 + C24474 - C24475) * C26147) *
               C48304) *
              C926 +
          ((C26026 * C47235 + C26027 * C48107 + C24922 * C47231 +
            C24923 * C48115 + (C24469 - C24468 + C24471 - C24470) * C47241 +
            (C24473 - C24472 + C24475 - C24474) * C26147) *
               C48462 +
           ((C26019 - C26018 + C26021 - C26020) * C47235 +
            (C26023 - C26022 + C26025 - C26024) * C48107 +
            (C24913 - C24912 + C24915 - C24914) * C47231 +
            (C24917 - C24916 + C24919 - C24918) * C48115 +
            (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
             C22090 * C3229) *
                C47241 +
            (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
             C22090 * C3235) *
                C26147) *
               C48304) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C48188 * C48171 * C110 +
          ((C22097 - C22096 + C22099 - C22098) * C22091 +
           (C22101 - C22100 + C22103 - C22102) * C48535 +
           (C22105 - C22104 + C22107 - C22106) * C22092 +
           (C22109 - C22108 + C22111 - C22110) * C48528 +
           (C22113 - C22112 + C22115 - C22114) * C22093 +
           (C22117 - C22116 + C22119 - C22118) * C48515 +
           (C22120 - C22121 + C22122 - C22123) * C22094 +
           (C22124 - C22125 + C22126 - C22127) * C48498) *
              C48217 * C48188 * C48171 * C111 +
          (C22136 * C22091 + C22137 * C48535 + C22138 * C22092 +
           C22139 * C48528 + (C22121 - C22120 + C22123 - C22122) * C22093 +
           (C22125 - C22124 + C22127 - C22126) * C48515 +
           (C22083 * C136 - C22089 * C124 + C48262 * C275 - C22090 * C264) *
               C22094 +
           (C22083 * C145 - C22089 * C137 + C48262 * C282 - C22090 * C276) *
               C48498) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C48188 * C48171 * C110 +
          ((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
            C23280) *
               C23271 +
           (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
            C23288) *
               C23265 +
           (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
            C23297) *
               C23272 +
           (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
            C23305) *
               C48112) *
              C48217 * C48188 * C48171 * C111 +
          ((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
            C23296) *
               C23271 +
           (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
            C23304) *
               C23265 +
           (C48536 * C132 - C23267 * C122 + C48532 * C271 - C23268 * C262 +
            C48522 * C586 - C23269 * C578 + C48504 * C1272 - C23270 * C1265) *
               C23272 +
           (C48536 * C143 - C23267 * C133 + C48532 * C280 - C23268 * C272 +
            C48522 * C593 - C23269 * C587 + C48504 * C1277 - C23270 * C1273) *
               C48112) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C48188 * C255 +
           ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C48188 * C255 +
           ((C22271 - C22270 + C22273 - C22272) * C22091 +
            (C22275 - C22274 + C22277 - C22276) * C48535 +
            (C22279 - C22278 + C22281 - C22280) * C22092 +
            (C22283 - C22282 + C22285 - C22284) * C48528 +
            (C22287 - C22286 + C22289 - C22288) * C22093 +
            (C22291 - C22290 + C22293 - C22292) * C48515 +
            (C22083 * C273 - C22089 * C263 + C48262 * C588 - C22090 * C579) *
                C22094 +
            (C22083 * C281 - C22089 * C274 + C48262 * C594 - C22090 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C23271 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C23265 +
            (C48536 * C269 - C23267 * C261 + C48532 * C584 - C23268 * C577 +
             C48522 * C1270 - C23269 * C1264 + C48504 * C1751 -
             C23270 * C1746) *
                C23272 +
            (C48536 * C279 - C23267 * C270 + C48532 * C592 - C23268 * C585 +
             C48522 * C1276 - C23269 * C1271 + C48504 * C1755 -
             C23270 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C381 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C381 +
           ((C22425 - C22424 + C22427 - C22426) * C22091 +
            (C22429 - C22428 + C22431 - C22430) * C48535 +
            (C22433 - C22432 + C22435 - C22434) * C22092 +
            (C22437 - C22436 + C22439 - C22438) * C48528 +
            (C22441 - C22440 + C22443 - C22442) * C22093 +
            (C22445 - C22444 + C22447 - C22446) * C48515 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C22094 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C381 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C381 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C23271 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C23265 +
            (C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C23272 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C48188 * C505 +
           ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C48188 * C505 +
           ((C22271 - C22270 + C22273 - C22272) * C22091 +
            (C22275 - C22274 + C22277 - C22276) * C48535 +
            (C22279 - C22278 + C22281 - C22280) * C22092 +
            (C22283 - C22282 + C22285 - C22284) * C48528 +
            (C22287 - C22286 + C22289 - C22288) * C22093 +
            (C22291 - C22290 + C22293 - C22292) * C48515 +
            (C22083 * C273 - C22089 * C263 + C48262 * C588 - C22090 * C579) *
                C22094 +
            (C22083 * C281 - C22089 * C274 + C48262 * C594 - C22090 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
             C23442) *
                C23271 +
            (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
             C23450) *
                C23265 +
            (C48536 * C269 - C23267 * C261 + C48532 * C584 - C23268 * C577 +
             C48522 * C1270 - C23269 * C1264 + C48504 * C1751 -
             C23270 * C1746) *
                C23272 +
            (C48536 * C279 - C23267 * C270 + C48532 * C592 - C23268 * C585 +
             C48522 * C1276 - C23269 * C1271 + C48504 * C1755 -
             C23270 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C48188 * C571 +
          ((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
               C22091 +
           (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
               C48535 +
           (C22270 - C22271 + C22272 - C22273) * C22092 +
           (C22274 - C22275 + C22276 - C22277) * C48528 +
           (C22278 - C22279 + C22280 - C22281) * C22093 +
           (C22282 - C22283 + C22284 - C22285) * C48515 +
           (C22286 - C22287 + C22288 - C22289) * C22094 +
           (C22290 - C22291 + C22292 - C22293) * C48498) *
              C48217 * C48188 * C572 +
          ((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
               C22091 +
           (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
               C48535 +
           (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
               C22092 +
           (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
               C48528 +
           (C22083 * C584 - C22089 * C577 + C48262 * C1270 - C22090 * C1264) *
               C22093 +
           (C22083 * C592 - C22089 * C585 + C48262 * C1276 - C22090 * C1271) *
               C48515 +
           (C22083 * C586 - C22089 * C578 + C48262 * C1272 - C22090 * C1265) *
               C22094 +
           (C22083 * C593 - C22089 * C587 + C48262 * C1277 - C22090 * C1273) *
               C48498) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C48188 * C571 +
          ((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
            C23269 * C1262 - C48522 * C1266 + C23270 * C1744 - C48504 * C1747) *
               C23271 +
           (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
            C23269 * C1267 - C48522 * C1274 + C23270 * C1748 - C48504 * C1753) *
               C23265 +
           (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
            C23443) *
               C23272 +
           (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
            C23451) *
               C48112) *
              C48217 * C48188 * C572 +
          ((C48536 * C580 - C23267 * C575 + C48532 * C1266 - C23268 * C1262 +
            C48522 * C1747 - C23269 * C1744 + C48504 * C9092 - C23270 * C9090) *
               C23271 +
           (C48536 * C590 - C23267 * C581 + C48532 * C1274 - C23268 * C1267 +
            C48522 * C1753 - C23269 * C1748 + C48504 * C9096 - C23270 * C9093) *
               C23265 +
           (C48536 * C582 - C23267 * C576 + C48532 * C1268 - C23268 * C1263 +
            C48522 * C1749 - C23269 * C1745 + C48504 * C9094 - C23270 * C9091) *
               C23272 +
           (C48536 * C591 - C23267 * C583 + C48532 * C1275 - C23268 * C1269 +
            C48522 * C1754 - C23269 * C1750 + C48504 * C9097 - C23270 * C9095) *
               C48112) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C381 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C505 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C381 +
           ((C22083 * C682 - C22089 * C677 + C48262 * C1452 - C22090 * C1448) *
                C22091 +
            (C22083 * C692 - C22089 * C683 + C48262 * C1460 - C22090 * C1453) *
                C48535 +
            (C22083 * C684 - C22089 * C678 + C48262 * C1454 - C22090 * C1449) *
                C22092 +
            (C22083 * C693 - C22089 * C685 + C48262 * C1461 - C22090 * C1455) *
                C48528 +
            (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                C22093 +
            (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                C48515 +
            (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                C22094 +
            (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C381 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C505 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C381 +
           ((C48536 * C682 - C23267 * C677 + C48532 * C1452 - C23268 * C1448 +
             C48522 * C1905 - C23269 * C1902 + C48504 * C9182 -
             C23270 * C9180) *
                C23271 +
            (C48536 * C692 - C23267 * C683 + C48532 * C1460 - C23268 * C1453 +
             C48522 * C1911 - C23269 * C1906 + C48504 * C9186 -
             C23270 * C9183) *
                C23265 +
            (C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
             C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
             C23270 * C9181) *
                C23272 +
            (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
             C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
             C23270 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C779 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C22097 - C22096 + C22099 - C22098) * C22091 +
            (C22101 - C22100 + C22103 - C22102) * C48535 +
            (C22105 - C22104 + C22107 - C22106) * C22092 +
            (C22109 - C22108 + C22111 - C22110) * C48528 +
            (C22113 - C22112 + C22115 - C22114) * C22093 +
            (C22117 - C22116 + C22119 - C22118) * C48515 +
            (C22120 - C22121 + C22122 - C22123) * C22094 +
            (C22124 - C22125 + C22126 - C22127) * C48498) *
               C48217 * C779 +
           ((C22425 - C22424 + C22427 - C22426) * C22091 +
            (C22429 - C22428 + C22431 - C22430) * C48535 +
            (C22433 - C22432 + C22435 - C22434) * C22092 +
            (C22437 - C22436 + C22439 - C22438) * C48528 +
            (C22441 - C22440 + C22443 - C22442) * C22093 +
            (C22445 - C22444 + C22447 - C22446) * C48515 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C22094 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C779 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C23271 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C23265 +
            (C23290 - C23291 + C23292 - C23293 + C23294 - C23295 + C23296 -
             C23297) *
                C23272 +
            (C23298 - C23299 + C23300 - C23301 + C23302 - C23303 + C23304 -
             C23305) *
                C48112) *
               C48217 * C779 +
           ((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
             C23588) *
                C23271 +
            (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
             C23596) *
                C23265 +
            (C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C23272 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C22091 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48535 +
            (C22096 - C22097 + C22098 - C22099) * C22092 +
            (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
            C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
               C48217 * C779 +
           ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
                C22091 +
            (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
                C48535 +
            (C22424 - C22425 + C22426 - C22427) * C22092 +
            (C22428 - C22429 + C22430 - C22431) * C48528 +
            (C22432 - C22433 + C22434 - C22435) * C22093 +
            (C22436 - C22437 + C22438 - C22439) * C48515 +
            (C22440 - C22441 + C22442 - C22443) * C22094 +
            (C22444 - C22445 + C22446 - C22447) * C48498) *
               C48217 * C48491) *
              C255 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C22091 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48535 +
            (C22270 - C22271 + C22272 - C22273) * C22092 +
            (C22274 - C22275 + C22276 - C22277) * C48528 +
            (C22278 - C22279 + C22280 - C22281) * C22093 +
            (C22282 - C22283 + C22284 - C22285) * C48515 +
            (C22286 - C22287 + C22288 - C22289) * C22094 +
            (C22290 - C22291 + C22292 - C22293) * C48498) *
               C48217 * C779 +
           ((C22083 * C682 - C22089 * C677 + C48262 * C1452 - C22090 * C1448) *
                C22091 +
            (C22083 * C692 - C22089 * C683 + C48262 * C1460 - C22090 * C1453) *
                C48535 +
            (C22083 * C684 - C22089 * C678 + C48262 * C1454 - C22090 * C1449) *
                C22092 +
            (C22083 * C693 - C22089 * C685 + C48262 * C1461 - C22090 * C1455) *
                C48528 +
            (C22083 * C686 - C22089 * C679 + C48262 * C1456 - C22090 * C1450) *
                C22093 +
            (C22083 * C694 - C22089 * C687 + C48262 * C1462 - C22090 * C1457) *
                C48515 +
            (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                C22094 +
            (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C23271 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C23265 +
            (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
             C23281) *
                C23272 +
            (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
             C23289) *
                C48112) *
               C48217 * C779 +
           ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
             C23269 * C1448 - C48522 * C1452 + C23270 * C1902 -
             C48504 * C1905) *
                C23271 +
            (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
             C23269 * C1453 - C48522 * C1460 + C23270 * C1906 -
             C48504 * C1911) *
                C23265 +
            (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C23272 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48112) *
               C48217 * C48491) *
              C255 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C23271 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C23265 +
            (C23436 - C23437 + C23438 - C23439 + C23440 - C23441 + C23442 -
             C23443) *
                C23272 +
            (C23444 - C23445 + C23446 - C23447 + C23448 - C23449 + C23450 -
             C23451) *
                C48112) *
               C48217 * C779 +
           ((C48536 * C682 - C23267 * C677 + C48532 * C1452 - C23268 * C1448 +
             C48522 * C1905 - C23269 * C1902 + C48504 * C9182 -
             C23270 * C9180) *
                C23271 +
            (C48536 * C692 - C23267 * C683 + C48532 * C1460 - C23268 * C1453 +
             C48522 * C1911 - C23269 * C1906 + C48504 * C9186 -
             C23270 * C9183) *
                C23265 +
            (C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
             C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
             C23270 * C9181) *
                C23272 +
            (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
             C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
             C23270 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
               C22091 +
           (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
               C48535 +
           (C22096 - C22097 + C22098 - C22099) * C22092 +
           (C22100 - C22101 + C22102 - C22103) * C48528 + C22136 * C22093 +
           C22137 * C48515 + C22138 * C22094 + C22139 * C48498) *
              C48217 * C925 +
          ((C22089 * C383 - C22083 * C389 + C22090 * C677 - C48262 * C682) *
               C22091 +
           (C22089 * C390 - C22083 * C401 + C22090 * C683 - C48262 * C692) *
               C48535 +
           (C22424 - C22425 + C22426 - C22427) * C22092 +
           (C22428 - C22429 + C22430 - C22431) * C48528 +
           (C22432 - C22433 + C22434 - C22435) * C22093 +
           (C22436 - C22437 + C22438 - C22439) * C48515 +
           (C22440 - C22441 + C22442 - C22443) * C22094 +
           (C22444 - C22445 + C22446 - C22447) * C48498) *
              C48217 * C926 +
          ((C22083 * C933 - C22089 * C928 + C48262 * C2322 - C22090 * C2316) *
               C22091 +
           (C22083 * C943 - C22089 * C934 + C48262 * C2334 - C22090 * C2324) *
               C48535 +
           (C22083 * C935 - C22089 * C929 + C48262 * C2326 - C22090 * C2318) *
               C22092 +
           (C22083 * C944 - C22089 * C936 + C48262 * C2336 - C22090 * C2328) *
               C48528 +
           (C22083 * C937 - C22089 * C930 + C48262 * C2330 - C22090 * C2320) *
               C22093 +
           (C22083 * C945 - C22089 * C938 + C48262 * C2338 - C22090 * C2332) *
               C48515 +
           (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
               C22094 +
           (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
               C48498) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
            C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
               C23271 +
           (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
            C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
               C23265 +
           (C23274 - C23275 + C23276 - C23277 + C23278 - C23279 + C23280 -
            C23281) *
               C23272 +
           (C23282 - C23283 + C23284 - C23285 + C23286 - C23287 + C23288 -
            C23289) *
               C48112) *
              C48217 * C925 +
          ((C23267 * C383 - C48536 * C389 + C23268 * C677 - C48532 * C682 +
            C23269 * C1448 - C48522 * C1452 + C23270 * C1902 - C48504 * C1905) *
               C23271 +
           (C23267 * C390 - C48536 * C401 + C23268 * C683 - C48532 * C692 +
            C23269 * C1453 - C48522 * C1460 + C23270 * C1906 - C48504 * C1911) *
               C23265 +
           (C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
            C23589) *
               C23272 +
           (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
            C23597) *
               C48112) *
              C48217 * C926 +
          ((C48536 * C933 - C23267 * C928 + C48532 * C2322 - C23268 * C2316 +
            C48522 * C2323 - C23269 * C2317 + C48504 * C9650 - C23270 * C9648) *
               C23271 +
           (C48536 * C943 - C23267 * C934 + C48532 * C2334 - C23268 * C2324 +
            C48522 * C2335 - C23269 * C2325 + C48504 * C9654 - C23270 * C9652) *
               C23265 +
           (C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
            C48522 * C2327 - C23269 * C2319 + C48504 * C9913 - C23270 * C9912) *
               C23272 +
           (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
            C48522 * C2337 - C23269 * C2329 + C48504 * C9915 - C23270 * C9914) *
               C48112) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47225 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48439 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C30746 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
            C29553 * C47206 + C29554 * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47225 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48439 +
            (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47206 +
            (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
               C30746 +
           (C29555 * C47225 + C29556 * C48439 +
            (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47206 +
            (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C26199 * C47225 + C26200 * C48439 +
            (C26180 - C26179 + C26182 - C26181 + C26184 - C26183) * C47206 +
            (C26186 - C26185 + C26188 - C26187 + C26190 - C26189) * C48112) *
               C30746 +
           ((C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C47225 +
            (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48439 +
            (C48258 * C395 - C47354 * C386 + C48265 * C688 - C47346 * C680 +
             C26144 * C1458 - C47360 * C1451) *
                C47206 +
            (C48258 * C404 - C47354 * C396 + C48265 * C695 - C47346 * C689 +
             C26144 * C1463 - C47360 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C48188 * C255 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C47225 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48439 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47206 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C30746 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47225 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48439 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C47206 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47225 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48439 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47206 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C30746 +
            (C29555 * C47225 + C29556 * C48439 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47206 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C47225 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48439 +
             (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C47206 +
             (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48112) *
                C30746 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47225 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48439 +
             (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
              C26144 * C1909 - C47360 * C1904) *
                 C47206 +
             (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
              C26144 * C1913 - C47360 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47225 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48439 +
             C29555 * C47206 + C29556 * C48112) *
                C30746 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47225 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48439 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47206 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47225 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48439 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47206 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C30746 +
            (C29555 * C47225 + C29556 * C48439 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47206 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C381 +
           ((C29553 * C47225 + C29554 * C48439 +
             (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C47206 +
             (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48112) *
                C30746 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C47225 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48439 +
             (C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
              C26144 * C2331 - C47360 * C2321) *
                 C47206 +
             (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
              C26144 * C2339 - C47360 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C47225 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48439 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47206 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C30746 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47225 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48439 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C47206 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47225 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48439 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47206 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C30746 +
            (C29555 * C47225 + C29556 * C48439 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47206 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C47225 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48439 +
             (C26360 - C26359 + C26362 - C26361 + C26364 - C26363) * C47206 +
             (C26366 - C26365 + C26368 - C26367 + C26370 - C26369) * C48112) *
                C30746 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47225 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48439 +
             (C48258 * C686 - C47354 * C679 + C48265 * C1456 - C47346 * C1450 +
              C26144 * C1909 - C47360 * C1904) *
                 C47206 +
             (C48258 * C694 - C47354 * C687 + C48265 * C1462 - C47346 * C1457 +
              C26144 * C1913 - C47360 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47225 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48439 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C30746 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
            C29553 * C47206 + C29554 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C47225 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48439 +
            (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47206 +
            (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
               C30746 +
           ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47225 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48439 +
            (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C47206 +
            (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C48258 * C580 - C47354 * C575 + C48265 * C1266 - C47346 * C1262 +
             C26144 * C1747 - C47360 * C1744) *
                C47225 +
            (C48258 * C590 - C47354 * C581 + C48265 * C1274 - C47346 * C1267 +
             C26144 * C1753 - C47360 * C1748) *
                C48439 +
            (C48258 * C582 - C47354 * C576 + C48265 * C1268 - C47346 * C1263 +
             C26144 * C1749 - C47360 * C1745) *
                C47206 +
            (C48258 * C591 - C47354 * C583 + C48265 * C1275 - C47346 * C1269 +
             C26144 * C1754 - C47360 * C1750) *
                C48112) *
               C30746 +
           ((C48258 * C1452 - C47354 * C1448 + C48265 * C1905 - C47346 * C1902 +
             C26144 * C9182 - C47360 * C9180) *
                C47225 +
            (C48258 * C1460 - C47354 * C1453 + C48265 * C1911 - C47346 * C1906 +
             C26144 * C9186 - C47360 * C9183) *
                C48439 +
            (C48258 * C1454 - C47354 * C1449 + C48265 * C1907 - C47346 * C1903 +
             C26144 * C9184 - C47360 * C9181) *
                C47206 +
            (C48258 * C1461 - C47354 * C1455 + C48265 * C1912 - C47346 * C1908 +
             C26144 * C9187 - C47360 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47225 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48439 +
             C29555 * C47206 + C29556 * C48112) *
                C30746 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47225 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48439 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47206 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C47225 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48439 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47206 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C30746 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47225 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48439 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C47206 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C381 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C47225 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48439 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47206 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48112) *
                C30746 +
            ((C48258 * C2322 - C47354 * C2316 + C48265 * C2323 -
              C47346 * C2317 + C26144 * C9650 - C47360 * C9648) *
                 C47225 +
             (C48258 * C2334 - C47354 * C2324 + C48265 * C2335 -
              C47346 * C2325 + C26144 * C9654 - C47360 * C9652) *
                 C48439 +
             (C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C47206 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47225 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48439 +
             C29555 * C47206 + C29556 * C48112) *
                C30746 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47225 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48439 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47206 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C47225 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48439 +
             (C26168 - C26167 + C26170 - C26169 + C26172 - C26171) * C47206 +
             (C26174 - C26173 + C26176 - C26175 + C26178 - C26177) * C48112) *
                C30746 +
            (C29555 * C47225 + C29556 * C48439 +
             (C26529 - C26530 + C26531 - C26532 + C26533 - C26534) * C47206 +
             (C26535 - C26536 + C26537 - C26538 + C26539 - C26540) * C48112) *
                C48304) *
               C779 +
           ((C29553 * C47225 + C29554 * C48439 +
             (C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C47206 +
             (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48112) *
                C30746 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C47225 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48439 +
             (C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
              C26144 * C2331 - C47360 * C2321) *
                 C47206 +
             (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
              C26144 * C2339 - C47360 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C47225 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48439 +
             (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
             (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
                C30746 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
             C29553 * C47206 + C29554 * C48112) *
                C48304) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47225 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48439 +
             C29555 * C47206 + C29556 * C48112) *
                C30746 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47225 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48439 +
             (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47206 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C47225 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48439 +
             (C26347 - C26348 + C26349 - C26350 + C26351 - C26352) * C47206 +
             (C26353 - C26354 + C26355 - C26356 + C26357 - C26358) * C48112) *
                C30746 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C47225 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48439 +
             (C29307 - C29308 + C29309 - C29310 + C29311 - C29312) * C47206 +
             (C29313 - C29314 + C29315 - C29316 + C29317 - C29318) * C48112) *
                C48304) *
               C779 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C47225 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48439 +
             (C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C47206 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48112) *
                C30746 +
            ((C48258 * C2322 - C47354 * C2316 + C48265 * C2323 -
              C47346 * C2317 + C26144 * C9650 - C47360 * C9648) *
                 C47225 +
             (C48258 * C2334 - C47354 * C2324 + C48265 * C2335 -
              C47346 * C2325 + C26144 * C9654 - C47360 * C9652) *
                 C48439 +
             (C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C47206 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C47225 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48439 +
            (C26155 - C26156 + C26157 - C26158 + C26159 - C26160) * C47206 +
            (C26161 - C26162 + C26163 - C26164 + C26165 - C26166) * C48112) *
               C30746 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C47225 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48439 +
            C29553 * C47206 + C29554 * C48112) *
               C48304) *
              C925 +
          (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C47225 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48439 +
            C29555 * C47206 + C29556 * C48112) *
               C30746 +
           ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C47225 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48439 +
            (C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C47206 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48112) *
               C48304) *
              C926 +
          (((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C47225 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48439 +
            (C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C47206 +
            (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48112) *
               C30746 +
           ((C48258 * C2785 - C47354 * C2781 + C48265 * C3230 - C47346 * C3227 +
             C26144 * C10064 - C47360 * C10062) *
                C47225 +
            (C48258 * C2793 - C47354 * C2786 + C48265 * C3236 - C47346 * C3231 +
             C26144 * C10068 - C47360 * C10065) *
                C48439 +
            (C48258 * C2787 - C47354 * C2782 + C48265 * C3232 - C47346 * C3228 +
             C26144 * C10066 - C47360 * C10063) *
                C47206 +
            (C48258 * C2794 - C47354 * C2788 + C48265 * C3237 - C47346 * C3233 +
             C26144 * C10069 - C47360 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C9007 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48102) *
               C48300 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
               C48307 +
           ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
               C36164) *
              C48188 * C48171 * C110 +
          (((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C9007 +
            (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48102) *
               C48300 +
           (C29555 * C9007 + C29556 * C48102) * C48307 +
           ((C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C9007 +
            (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48102) *
               C36164) *
              C48188 * C48171 * C111 +
          ((C26199 * C9007 + C26200 * C48102) * C48300 +
           ((C26530 - C26529 + C26532 - C26531 + C26534 - C26533) * C9007 +
            (C26536 - C26535 + C26538 - C26537 + C26540 - C26539) * C48102) *
               C48307 +
           ((C48258 * C937 - C47354 * C930 + C48265 * C2330 - C47346 * C2320 +
             C26144 * C2331 - C47360 * C2321) *
                C9007 +
            (C48258 * C945 - C47354 * C938 + C48265 * C2338 - C47346 * C2332 +
             C26144 * C2339 - C47360 * C2333) *
                C48102) *
               C36164) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C48188 * C255 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C9007 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48102) *
                C48300 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C9007 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48102) *
                C48307 +
            ((C47354 * C2316 - C48258 * C2322 + C47346 * C2317 -
              C48265 * C2323 + C47360 * C9648 - C26144 * C9650) *
                 C9007 +
             (C47354 * C2324 - C48258 * C2334 + C47346 * C2325 -
              C48265 * C2335 + C47360 * C9652 - C26144 * C9654) *
                 C48102) *
                C36164) *
               C48188 * C48489) *
              C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C9007 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48102) *
                C48300 +
            (C29555 * C9007 + C29556 * C48102) * C48307 +
            ((C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C9007 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48102) *
                C36164) *
               C48188 * C255 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C9007 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48102) *
                C48300 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C9007 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48102) *
                C48307 +
            ((C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C9007 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48102) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C9007 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48102) *
                C48300 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C9007 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48102) *
                C48307 +
            ((C47354 * C2781 - C48258 * C2785 + C47346 * C3227 -
              C48265 * C3230 + C47360 * C10062 - C26144 * C10064) *
                 C9007 +
             (C47354 * C2786 - C48258 * C2793 + C47346 * C3231 -
              C48265 * C3236 + C47360 * C10065 - C26144 * C10068) *
                 C48102) *
                C36164) *
               C48491) *
              C48171 * C257 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C9007 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48102) *
                C48300 +
            (C29555 * C9007 + C29556 * C48102) * C48307 +
            ((C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C9007 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48102) *
                C36164) *
               C381 +
           ((C29553 * C9007 + C29554 * C48102) * C48300 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C9007 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48102) *
                C48307 +
            ((C48258 * C2787 - C47354 * C2782 + C48265 * C3232 -
              C47346 * C3228 + C26144 * C10066 - C47360 * C10063) *
                 C9007 +
             (C48258 * C2794 - C47354 * C2788 + C48265 * C3237 -
              C47346 * C3233 + C26144 * C10069 - C47360 * C10067) *
                 C48102) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C48188 * C505 +
           (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C9007 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48102) *
                C48300 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C9007 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48102) *
                C48307 +
            ((C47354 * C2316 - C48258 * C2322 + C47346 * C2317 -
              C48265 * C2323 + C47360 * C9648 - C26144 * C9650) *
                 C9007 +
             (C47354 * C2324 - C48258 * C2334 + C47346 * C2325 -
              C48265 * C2335 + C47360 * C9652 - C26144 * C9654) *
                 C48102) *
                C36164) *
               C48188 * C48489) *
              C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C9007 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48102) *
                C48300 +
            (C29555 * C9007 + C29556 * C48102) * C48307 +
            ((C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C9007 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48102) *
                C36164) *
               C48188 * C505 +
           (((C26348 - C26347 + C26350 - C26349 + C26352 - C26351) * C9007 +
             (C26354 - C26353 + C26356 - C26355 + C26358 - C26357) * C48102) *
                C48300 +
            ((C29308 - C29307 + C29310 - C29309 + C29312 - C29311) * C9007 +
             (C29314 - C29313 + C29316 - C29315 + C29318 - C29317) * C48102) *
                C48307 +
            ((C48258 * C2326 - C47354 * C2318 + C48265 * C2327 -
              C47346 * C2319 + C26144 * C9913 - C47360 * C9912) *
                 C9007 +
             (C48258 * C2336 - C47354 * C2328 + C48265 * C2337 -
              C47346 * C2329 + C26144 * C9915 - C47360 * C9914) *
                 C48102) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C9007 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48102) *
               C48300 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
               C48307 +
           ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
            (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
               C36164) *
              C48188 * C571 +
          (((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
             C47360 * C1262 - C26144 * C1266) *
                C9007 +
            (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
             C47360 * C1267 - C26144 * C1274) *
                C48102) *
               C48300 +
           ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C9007 +
            (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48102) *
               C48307 +
           ((C47354 * C2316 - C48258 * C2322 + C47346 * C2317 - C48265 * C2323 +
             C47360 * C9648 - C26144 * C9650) *
                C9007 +
            (C47354 * C2324 - C48258 * C2334 + C47346 * C2325 - C48265 * C2335 +
             C47360 * C9652 - C26144 * C9654) *
                C48102) *
               C36164) *
              C48188 * C572 +
          (((C48258 * C580 - C47354 * C575 + C48265 * C1266 - C47346 * C1262 +
             C26144 * C1747 - C47360 * C1744) *
                C9007 +
            (C48258 * C590 - C47354 * C581 + C48265 * C1274 - C47346 * C1267 +
             C26144 * C1753 - C47360 * C1748) *
                C48102) *
               C48300 +
           ((C48258 * C1452 - C47354 * C1448 + C48265 * C1905 - C47346 * C1902 +
             C26144 * C9182 - C47360 * C9180) *
                C9007 +
            (C48258 * C1460 - C47354 * C1453 + C48265 * C1911 - C47346 * C1906 +
             C26144 * C9186 - C47360 * C9183) *
                C48102) *
               C48307 +
           ((C48258 * C2323 - C47354 * C2317 + C48265 * C9650 - C47346 * C9648 +
             C26144 * C9651 - C47360 * C9649) *
                C9007 +
            (C48258 * C2335 - C47354 * C2325 + C48265 * C9654 - C47346 * C9652 +
             C26144 * C9655 - C47360 * C9653) *
                C48102) *
               C36164) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C381 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C9007 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48102) *
                C48300 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C9007 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48102) *
                C48307 +
            ((C47354 * C2781 - C48258 * C2785 + C47346 * C3227 -
              C48265 * C3230 + C47360 * C10062 - C26144 * C10064) *
                 C9007 +
             (C47354 * C2786 - C48258 * C2793 + C47346 * C3231 -
              C48265 * C3236 + C47360 * C10065 - C26144 * C10068) *
                 C48102) *
                C36164) *
               C48491) *
              C505 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C9007 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48102) *
                C48300 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C9007 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48102) *
                C48307 +
            ((C46723 - C46724 + C46725 - C46726 + C46727 - C46728) * C9007 +
             (C46729 - C46730 + C46731 - C46732 + C46733 - C46734) * C48102) *
                C36164) *
               C381 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C9007 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48102) *
                C48300 +
            ((C46724 - C46723 + C46726 - C46725 + C46728 - C46727) * C9007 +
             (C46730 - C46729 + C46732 - C46731 + C46734 - C46733) * C48102) *
                C48307 +
            ((C48258 * C3230 - C47354 * C3227 + C48265 * C10064 -
              C47346 * C10062 + C26144 * C10509 - C47360 * C10508) *
                 C9007 +
             (C48258 * C3236 - C47354 * C3231 + C48265 * C10068 -
              C47346 * C10065 + C26144 * C10511 - C47360 * C10510) *
                 C48102) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C9007 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48102) *
                C48300 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C9007 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48102) *
                C48307 +
            ((C47354 * C2781 - C48258 * C2785 + C47346 * C3227 -
              C48265 * C3230 + C47360 * C10062 - C26144 * C10064) *
                 C9007 +
             (C47354 * C2786 - C48258 * C2793 + C47346 * C3231 -
              C48265 * C3236 + C47360 * C10065 - C26144 * C10068) *
                 C48102) *
                C36164) *
               C48491) *
              C48171 * C507 +
          ((((C26156 - C26155 + C26158 - C26157 + C26160 - C26159) * C9007 +
             (C26162 - C26161 + C26164 - C26163 + C26166 - C26165) * C48102) *
                C48300 +
            (C29555 * C9007 + C29556 * C48102) * C48307 +
            ((C29537 - C29538 + C29539 - C29540 + C29541 - C29542) * C9007 +
             (C29543 - C29544 + C29545 - C29546 + C29547 - C29548) * C48102) *
                C36164) *
               C779 +
           ((C29553 * C9007 + C29554 * C48102) * C48300 +
            ((C29538 - C29537 + C29540 - C29539 + C29542 - C29541) * C9007 +
             (C29544 - C29543 + C29546 - C29545 + C29548 - C29547) * C48102) *
                C48307 +
            ((C48258 * C2787 - C47354 * C2782 + C48265 * C3232 -
              C47346 * C3228 + C26144 * C10066 - C47360 * C10063) *
                 C9007 +
             (C48258 * C2794 - C47354 * C2788 + C48265 * C3237 -
              C47346 * C3233 + C26144 * C10069 - C47360 * C10067) *
                 C48102) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
              C26144 * C580 - C47360 * C575) *
                 C9007 +
             (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
              C26144 * C590 - C47360 * C581) *
                 C48102) *
                C48300 +
            ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
             (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
                C48307 +
            ((C30638 - C30637 + C30640 - C30639 + C30642 - C30641) * C9007 +
             (C30644 - C30643 + C30646 - C30645 + C30648 - C30647) * C48102) *
                C36164) *
               C779 +
           (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C9007 +
             (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48102) *
                C48300 +
            ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C9007 +
             (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48102) *
                C48307 +
            ((C47354 * C2781 - C48258 * C2785 + C47346 * C3227 -
              C48265 * C3230 + C47360 * C10062 - C26144 * C10064) *
                 C9007 +
             (C47354 * C2786 - C48258 * C2793 + C47346 * C3231 -
              C48265 * C3236 + C47360 * C10065 - C26144 * C10068) *
                 C48102) *
                C36164) *
               C48491) *
              C255 +
          ((((C47354 * C259 - C48258 * C265 + C47346 * C575 - C48265 * C580 +
              C47360 * C1262 - C26144 * C1266) *
                 C9007 +
             (C47354 * C266 - C48258 * C277 + C47346 * C581 - C48265 * C590 +
              C47360 * C1267 - C26144 * C1274) *
                 C48102) *
                C48300 +
            ((C30091 - C30092 + C30093 - C30094 + C30095 - C30096) * C9007 +
             (C30097 - C30098 + C30099 - C30100 + C30101 - C30102) * C48102) *
                C48307 +
            ((C46723 - C46724 + C46725 - C46726 + C46727 - C46728) * C9007 +
             (C46729 - C46730 + C46731 - C46732 + C46733 - C46734) * C48102) *
                C36164) *
               C779 +
           (((C30092 - C30091 + C30094 - C30093 + C30096 - C30095) * C9007 +
             (C30098 - C30097 + C30100 - C30099 + C30102 - C30101) * C48102) *
                C48300 +
            ((C46724 - C46723 + C46726 - C46725 + C46728 - C46727) * C9007 +
             (C46730 - C46729 + C46732 - C46731 + C46734 - C46733) * C48102) *
                C48307 +
            ((C48258 * C3230 - C47354 * C3227 + C48265 * C10064 -
              C47346 * C10062 + C26144 * C10509 - C47360 * C10508) *
                 C9007 +
             (C48258 * C3236 - C47354 * C3231 + C48265 * C10068 -
              C47346 * C10065 + C26144 * C10511 - C47360 * C10510) *
                 C48102) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48258 * C126 - C47354 * C119 + C48265 * C265 - C47346 * C259 +
             C26144 * C580 - C47360 * C575) *
                C9007 +
            (C48258 * C140 - C47354 * C127 + C48265 * C277 - C47346 * C266 +
             C26144 * C590 - C47360 * C581) *
                C48102) *
               C48300 +
           ((C29513 - C29514 + C29515 - C29516 + C29517 - C29518) * C9007 +
            (C29519 - C29520 + C29521 - C29522 + C29523 - C29524) * C48102) *
               C48307 +
           C47161 * C36164) *
              C925 +
          (((C29514 - C29513 + C29516 - C29515 + C29518 - C29517) * C9007 +
            (C29520 - C29519 + C29522 - C29521 + C29524 - C29523) * C48102) *
               C48300 +
           ((C30637 - C30638 + C30639 - C30640 + C30641 - C30642) * C9007 +
            (C30643 - C30644 + C30645 - C30646 + C30647 - C30648) * C48102) *
               C48307 +
           ((C47143 - C47144 + C47145 - C47146 + C47147 - C47148) * C9007 +
            (C47149 - C47150 + C47151 - C47152 + C47153 - C47154) * C48102) *
               C36164) *
              C926 +
          (C47161 * C48300 +
           ((C47144 - C47143 + C47146 - C47145 + C47148 - C47147) * C9007 +
            (C47150 - C47149 + C47152 - C47151 + C47154 - C47153) * C48102) *
               C48307 +
           ((C48258 * C3652 - C47354 * C3649 + C48265 * C10940 -
             C47346 * C10938 + C26144 * C10941 - C47360 * C10939) *
                C9007 +
            (C48258 * C3658 - C47354 * C3653 + C48265 * C10944 -
             C47346 * C10942 + C26144 * C10945 - C47360 * C10943) *
                C48102) *
               C36164) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C48536 * C389 - C23267 * C383 + C48532 * C682 - C23268 * C677 +
             C48522 * C1452 - C23269 * C1448 + C48504 * C1905 -
             C23270 * C1902) *
                C9007 +
            (C48536 * C401 - C23267 * C390 + C48532 * C692 - C23268 * C683 +
             C48522 * C1460 - C23269 * C1453 + C48504 * C1911 -
             C23270 * C1906) *
                C48102) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C9007 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C48102) *
               C30746 +
           ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C9007 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48102) *
               C48304) *
              C48188 * C48171 * C111 +
          (((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
             C23296) *
                C9007 +
            (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
             C23304) *
                C48102) *
               C30746 +
           ((C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C9007 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48102) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C7741 +
            (C22101 - C22100 + C22103 - C22102) * C48526 +
            (C22105 - C22104 + C22107 - C22106) * C7742 +
            (C22109 - C22108 + C22111 - C22110) * C48513 +
            (C22113 - C22112 + C22115 - C22114) * C7743 +
            (C22117 - C22116 + C22119 - C22118) * C48481) *
               C30746 +
           (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
            C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
            (C22444 - C22445 + C22446 - C22447) * C48481) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C22136 * C7741 + C22137 * C48526 + C22138 * C7742 +
            C22139 * C48513 + (C22121 - C22120 + C22123 - C22122) * C7743 +
            (C22125 - C22124 + C22127 - C22126) * C48481) *
               C30746 +
           (C27495 * C7741 + C27496 * C48526 +
            (C22441 - C22440 + C22443 - C22442) * C7742 +
            (C22445 - C22444 + C22447 - C22446) * C48513 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C7743 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48481) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C9007 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48102) *
               C48537 +
           ((C24880 - C24881 + C24882 - C24883) * C9007 +
            (C24884 - C24885 + C24886 - C24887) * C48102) *
               C48534 +
           (C26026 * C9007 + C26027 * C48102) * C48525 +
           ((C26019 - C26018 + C26021 - C26020) * C9007 +
            (C26023 - C26022 + C26025 - C26024) * C48102) *
               C48510) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C9007 +
            (C22101 - C22100 + C22103 - C22102) * C48102) *
               C48537 +
           (C24924 * C9007 + C24925 * C48102) * C48534 +
           (C24926 * C9007 + C24927 * C48102) * C48525 +
           ((C24912 - C24913 + C24914 - C24915) * C9007 +
            (C24916 - C24917 + C24918 - C24919) * C48102) *
               C48510) *
              C48188 * C48171 * C111 +
          ((C22136 * C9007 + C22137 * C48102) * C48537 +
           (C27495 * C9007 + C27496 * C48102) * C48534 +
           ((C24469 - C24468 + C24471 - C24470) * C9007 +
            (C24473 - C24472 + C24475 - C24474) * C48102) *
               C48525 +
           ((C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
             C22090 * C3229) *
                C9007 +
            (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
             C22090 * C3235) *
                C48102) *
               C48510) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C48536 * C389 - C23267 * C383 + C48532 * C682 - C23268 * C677 +
              C48522 * C1452 - C23269 * C1448 + C48504 * C1905 -
              C23270 * C1902) *
                 C9007 +
             (C48536 * C401 - C23267 * C390 + C48532 * C692 - C23268 * C683 +
              C48522 * C1460 - C23269 * C1453 + C48504 * C1911 -
              C23270 * C1906) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
              C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
              C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C9007 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48102) *
                C30746 +
            ((C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
              C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
              C23270 * C9181) *
                 C9007 +
             (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
              C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
              C23270 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C7741 +
             (C22275 - C22274 + C22277 - C22276) * C48526 +
             (C22279 - C22278 + C22281 - C22280) * C7742 +
             (C22283 - C22282 + C22285 - C22284) * C48513 +
             (C22287 - C22286 + C22289 - C22288) * C7743 +
             (C22291 - C22290 + C22293 - C22292) * C48481) *
                C30746 +
            ((C24671 - C24670 + C24673 - C24672) * C7741 +
             (C24675 - C24674 + C24677 - C24676) * C48526 +
             (C27692 - C27691 + C27694 - C27693) * C7742 +
             (C27696 - C27695 + C27698 - C27697) * C48513 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C7743 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C9007 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48102) *
                C48537 +
            ((C25462 - C25463 + C25464 - C25465) * C9007 +
             (C25466 - C25467 + C25468 - C25469) * C48102) *
                C48534 +
            ((C25470 - C25471 + C25472 - C25473) * C9007 +
             (C25474 - C25475 + C25476 - C25477) * C48102) *
                C48525 +
            ((C22089 * C3227 - C22083 * C3230 + C22090 * C10062 -
              C48262 * C10064) *
                 C9007 +
             (C22089 * C3231 - C22083 * C3236 + C22090 * C10065 -
              C48262 * C10068) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C9007 +
             (C22101 - C22100 + C22103 - C22102) * C48102) *
                C48537 +
            (C24924 * C9007 + C24925 * C48102) * C48534 +
            (C24926 * C9007 + C24927 * C48102) * C48525 +
            ((C24912 - C24913 + C24914 - C24915) * C9007 +
             (C24916 - C24917 + C24918 - C24919) * C48102) *
                C48510) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C9007 +
             (C22275 - C22274 + C22277 - C22276) * C48102) *
                C48537 +
            ((C24671 - C24670 + C24673 - C24672) * C9007 +
             (C24675 - C24674 + C24677 - C24676) * C48102) *
                C48534 +
            ((C24679 - C24678 + C24681 - C24680) * C9007 +
             (C24683 - C24682 + C24685 - C24684) * C48102) *
                C48525 +
            ((C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C9007 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C381 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C381 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C9007 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48102) *
                C30746 +
            ((C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
              C48522 * C2327 - C23269 * C2319 + C48504 * C9913 -
              C23270 * C9912) *
                 C9007 +
             (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
              C48522 * C2337 - C23269 * C2329 + C48504 * C9915 -
              C23270 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C381 +
           ((C24920 * C7741 + C24921 * C48526 + C27495 * C7742 +
             C27496 * C48513 + (C22441 - C22440 + C22443 - C22442) * C7743 +
             (C22445 - C22444 + C22447 - C22446) * C48481) *
                C30746 +
            (C24922 * C7741 + C24923 * C48526 +
             (C24469 - C24468 + C24471 - C24470) * C7742 +
             (C24473 - C24472 + C24475 - C24474) * C48513 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C7743 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C9007 +
             (C24885 - C24884 + C24887 - C24886) * C48102) *
                C48537 +
            ((C24893 - C24892 + C24895 - C24894) * C9007 +
             (C24897 - C24896 + C24899 - C24898) * C48102) *
                C48534 +
            ((C26018 - C26019 + C26020 - C26021) * C9007 +
             (C26022 - C26023 + C26024 - C26025) * C48102) *
                C48525 +
            ((C22089 * C3649 - C22083 * C3652 + C22090 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C22089 * C3653 - C22083 * C3658 + C22090 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C9007 +
             (C22101 - C22100 + C22103 - C22102) * C48102) *
                C48537 +
            (C24924 * C9007 + C24925 * C48102) * C48534 +
            (C24926 * C9007 + C24927 * C48102) * C48525 +
            ((C24912 - C24913 + C24914 - C24915) * C9007 +
             (C24916 - C24917 + C24918 - C24919) * C48102) *
                C48510) *
               C381 +
           ((C24920 * C9007 + C24921 * C48102) * C48537 +
            (C24922 * C9007 + C24923 * C48102) * C48534 +
            ((C24913 - C24912 + C24915 - C24914) * C9007 +
             (C24917 - C24916 + C24919 - C24918) * C48102) *
                C48525 +
            ((C22083 * C3654 - C22089 * C3650 + C48262 * C17538 -
              C22090 * C17537) *
                 C9007 +
             (C22083 * C3659 - C22089 * C3655 + C48262 * C17540 -
              C22090 * C17539) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
              C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
              C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C9007 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48102) *
                C30746 +
            ((C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
              C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
              C23270 * C9181) *
                 C9007 +
             (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
              C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
              C23270 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C7741 +
             (C22275 - C22274 + C22277 - C22276) * C48526 +
             (C22279 - C22278 + C22281 - C22280) * C7742 +
             (C22283 - C22282 + C22285 - C22284) * C48513 +
             (C22287 - C22286 + C22289 - C22288) * C7743 +
             (C22291 - C22290 + C22293 - C22292) * C48481) *
                C30746 +
            ((C24671 - C24670 + C24673 - C24672) * C7741 +
             (C24675 - C24674 + C24677 - C24676) * C48526 +
             (C27692 - C27691 + C27694 - C27693) * C7742 +
             (C27696 - C27695 + C27698 - C27697) * C48513 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C7743 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C9007 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48102) *
                C48537 +
            ((C25462 - C25463 + C25464 - C25465) * C9007 +
             (C25466 - C25467 + C25468 - C25469) * C48102) *
                C48534 +
            ((C25470 - C25471 + C25472 - C25473) * C9007 +
             (C25474 - C25475 + C25476 - C25477) * C48102) *
                C48525 +
            ((C22089 * C3227 - C22083 * C3230 + C22090 * C10062 -
              C48262 * C10064) *
                 C9007 +
             (C22089 * C3231 - C22083 * C3236 + C22090 * C10065 -
              C48262 * C10068) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C9007 +
             (C22101 - C22100 + C22103 - C22102) * C48102) *
                C48537 +
            (C24924 * C9007 + C24925 * C48102) * C48534 +
            (C24926 * C9007 + C24927 * C48102) * C48525 +
            ((C24912 - C24913 + C24914 - C24915) * C9007 +
             (C24916 - C24917 + C24918 - C24919) * C48102) *
                C48510) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C9007 +
             (C22275 - C22274 + C22277 - C22276) * C48102) *
                C48537 +
            ((C24671 - C24670 + C24673 - C24672) * C9007 +
             (C24675 - C24674 + C24677 - C24676) * C48102) *
                C48534 +
            ((C24679 - C24678 + C24681 - C24680) * C9007 +
             (C24683 - C24682 + C24685 - C24684) * C48102) *
                C48525 +
            ((C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C9007 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
             C40849) *
                C9007 +
            (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
             C40857) *
                C48102) *
               C48304) *
              C48188 * C571 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C9007 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C48102) *
               C30746 +
           ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
             C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
             C48504 * C9182) *
                C9007 +
            (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
             C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
             C48504 * C9186) *
                C48102) *
               C48304) *
              C48188 * C572 +
          (((C48536 * C580 - C23267 * C575 + C48532 * C1266 - C23268 * C1262 +
             C48522 * C1747 - C23269 * C1744 + C48504 * C9092 -
             C23270 * C9090) *
                C9007 +
            (C48536 * C590 - C23267 * C581 + C48532 * C1274 - C23268 * C1267 +
             C48522 * C1753 - C23269 * C1748 + C48504 * C9096 -
             C23270 * C9093) *
                C48102) *
               C30746 +
           ((C48536 * C1452 - C23267 * C1448 + C48532 * C1905 - C23268 * C1902 +
             C48522 * C9182 - C23269 * C9180 + C48504 * C9419 -
             C23270 * C9418) *
                C9007 +
            (C48536 * C1460 - C23267 * C1453 + C48532 * C1911 - C23268 * C1906 +
             C48522 * C9186 - C23269 * C9183 + C48504 * C9421 -
             C23270 * C9420) *
                C48102) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C7741 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48526 +
            (C22270 - C22271 + C22272 - C22273) * C7742 +
            (C22274 - C22275 + C22276 - C22277) * C48513 +
            (C22278 - C22279 + C22280 - C22281) * C7743 +
            (C22282 - C22283 + C22284 - C22285) * C48481) *
               C30746 +
           ((C25462 - C25463 + C25464 - C25465) * C7741 +
            (C25466 - C25467 + C25468 - C25469) * C48526 +
            (C24670 - C24671 + C24672 - C24673) * C7742 +
            (C24674 - C24675 + C24676 - C24677) * C48513 +
            (C27691 - C27692 + C27693 - C27694) * C7743 +
            (C27695 - C27696 + C27697 - C27698) * C48481) *
               C48304) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C7741 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C48526 +
            (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
                C7742 +
            (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
                C48513 +
            (C22083 * C584 - C22089 * C577 + C48262 * C1270 - C22090 * C1264) *
                C7743 +
            (C22083 * C592 - C22089 * C585 + C48262 * C1276 - C22090 * C1271) *
                C48481) *
               C30746 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C7741 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C48526 +
            (C22083 * C1454 - C22089 * C1449 + C48262 * C1907 -
             C22090 * C1903) *
                C7742 +
            (C22083 * C1461 - C22089 * C1455 + C48262 * C1912 -
             C22090 * C1908) *
                C48513 +
            (C22083 * C1456 - C22089 * C1450 + C48262 * C1909 -
             C22090 * C1904) *
                C7743 +
            (C22083 * C1462 - C22089 * C1457 + C48262 * C1913 -
             C22090 * C1910) *
                C48481) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C9007 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48102) *
               C48537 +
           ((C24880 - C24881 + C24882 - C24883) * C9007 +
            (C24884 - C24885 + C24886 - C24887) * C48102) *
               C48534 +
           (C26026 * C9007 + C26027 * C48102) * C48525 +
           ((C26019 - C26018 + C26021 - C26020) * C9007 +
            (C26023 - C26022 + C26025 - C26024) * C48102) *
               C48510) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C9007 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48102) *
               C48537 +
           ((C25462 - C25463 + C25464 - C25465) * C9007 +
            (C25466 - C25467 + C25468 - C25469) * C48102) *
               C48534 +
           ((C25470 - C25471 + C25472 - C25473) * C9007 +
            (C25474 - C25475 + C25476 - C25477) * C48102) *
               C48525 +
           ((C22089 * C3227 - C22083 * C3230 + C22090 * C10062 -
             C48262 * C10064) *
                C9007 +
            (C22089 * C3231 - C22083 * C3236 + C22090 * C10065 -
             C48262 * C10068) *
                C48102) *
               C48510) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C9007 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C48102) *
               C48537 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C9007 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C48102) *
               C48534 +
           ((C22083 * C2323 - C22089 * C2317 + C48262 * C9650 -
             C22090 * C9648) *
                C9007 +
            (C22083 * C2335 - C22089 * C2325 + C48262 * C9654 -
             C22090 * C9652) *
                C48102) *
               C48525 +
           ((C22083 * C10064 - C22089 * C10062 + C48262 * C10509 -
             C22090 * C10508) *
                C9007 +
            (C22083 * C10068 - C22089 * C10065 + C48262 * C10511 -
             C22090 * C10510) *
                C48102) *
               C48510) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C381 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C505 +
          ((((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C41216 - C41217 + C41218 - C41219 + C41220 - C41221 + C41222 -
              C41223) *
                 C9007 +
             (C41224 - C41225 + C41226 - C41227 + C41228 - C41229 + C41230 -
              C41231) *
                 C48102) *
                C48304) *
               C381 +
           (((C41217 - C41216 + C41219 - C41218 + C41221 - C41220 + C41223 -
              C41222) *
                 C9007 +
             (C41225 - C41224 + C41227 - C41226 + C41229 - C41228 + C41231 -
              C41230) *
                 C48102) *
                C30746 +
            ((C48536 * C2322 - C23267 * C2316 + C48532 * C2323 -
              C23268 * C2317 + C48522 * C9650 - C23269 * C9648 +
              C48504 * C9651 - C23270 * C9649) *
                 C9007 +
             (C48536 * C2334 - C23267 * C2324 + C48532 * C2335 -
              C23268 * C2325 + C48522 * C9654 - C23269 * C9652 +
              C48504 * C9655 - C23270 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C7741 +
             (C25467 - C25466 + C25469 - C25468) * C48526 +
             (C24671 - C24670 + C24673 - C24672) * C7742 +
             (C24675 - C24674 + C24677 - C24676) * C48513 +
             (C27692 - C27691 + C27694 - C27693) * C7743 +
             (C27696 - C27695 + C27698 - C27697) * C48481) *
                C30746 +
            ((C25471 - C25470 + C25473 - C25472) * C7741 +
             (C25475 - C25474 + C25477 - C25476) * C48526 +
             (C24679 - C24678 + C24681 - C24680) * C7742 +
             (C24683 - C24682 + C24685 - C24684) * C48513 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C7743 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C9007 +
             (C24885 - C24884 + C24887 - C24886) * C48102) *
                C48537 +
            ((C24893 - C24892 + C24895 - C24894) * C9007 +
             (C24897 - C24896 + C24899 - C24898) * C48102) *
                C48534 +
            ((C26018 - C26019 + C26020 - C26021) * C9007 +
             (C26022 - C26023 + C26024 - C26025) * C48102) *
                C48525 +
            ((C22089 * C3649 - C22083 * C3652 + C22090 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C22089 * C3653 - C22083 * C3658 + C22090 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C9007 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48102) *
                C48537 +
            ((C25462 - C25463 + C25464 - C25465) * C9007 +
             (C25466 - C25467 + C25468 - C25469) * C48102) *
                C48534 +
            ((C25470 - C25471 + C25472 - C25473) * C9007 +
             (C25474 - C25475 + C25476 - C25477) * C48102) *
                C48525 +
            ((C42322 - C42323 + C42324 - C42325) * C9007 +
             (C42326 - C42327 + C42328 - C42329) * C48102) *
                C48510) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C9007 +
             (C25467 - C25466 + C25469 - C25468) * C48102) *
                C48537 +
            ((C25471 - C25470 + C25473 - C25472) * C9007 +
             (C25475 - C25474 + C25477 - C25476) * C48102) *
                C48534 +
            ((C42323 - C42322 + C42325 - C42324) * C9007 +
             (C42327 - C42326 + C42329 - C42328) * C48102) *
                C48525 +
            ((C22083 * C10940 - C22089 * C10938 + C48262 * C10941 -
              C22090 * C10939) *
                 C9007 +
             (C22083 * C10944 - C22089 * C10942 + C48262 * C10945 -
              C22090 * C10943) *
                 C48102) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C779 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C779 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C9007 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48102) *
                C30746 +
            ((C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
              C48522 * C2327 - C23269 * C2319 + C48504 * C9913 -
              C23270 * C9912) *
                 C9007 +
             (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
              C48522 * C2337 - C23269 * C2329 + C48504 * C9915 -
              C23270 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C779 +
           ((C24920 * C7741 + C24921 * C48526 + C27495 * C7742 +
             C27496 * C48513 + (C22441 - C22440 + C22443 - C22442) * C7743 +
             (C22445 - C22444 + C22447 - C22446) * C48481) *
                C30746 +
            (C24922 * C7741 + C24923 * C48526 +
             (C24469 - C24468 + C24471 - C24470) * C7742 +
             (C24473 - C24472 + C24475 - C24474) * C48513 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C7743 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C9007 +
             (C24885 - C24884 + C24887 - C24886) * C48102) *
                C48537 +
            ((C24893 - C24892 + C24895 - C24894) * C9007 +
             (C24897 - C24896 + C24899 - C24898) * C48102) *
                C48534 +
            ((C26018 - C26019 + C26020 - C26021) * C9007 +
             (C26022 - C26023 + C26024 - C26025) * C48102) *
                C48525 +
            ((C22089 * C3649 - C22083 * C3652 + C22090 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C22089 * C3653 - C22083 * C3658 + C22090 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C9007 +
             (C22101 - C22100 + C22103 - C22102) * C48102) *
                C48537 +
            (C24924 * C9007 + C24925 * C48102) * C48534 +
            (C24926 * C9007 + C24927 * C48102) * C48525 +
            ((C24912 - C24913 + C24914 - C24915) * C9007 +
             (C24916 - C24917 + C24918 - C24919) * C48102) *
                C48510) *
               C779 +
           ((C24920 * C9007 + C24921 * C48102) * C48537 +
            (C24922 * C9007 + C24923 * C48102) * C48534 +
            ((C24913 - C24912 + C24915 - C24914) * C9007 +
             (C24917 - C24916 + C24919 - C24918) * C48102) *
                C48525 +
            ((C22083 * C3654 - C22089 * C3650 + C48262 * C17538 -
              C22090 * C17537) *
                 C9007 +
             (C22083 * C3659 - C22089 * C3655 + C48262 * C17540 -
              C22090 * C17539) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C779 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C255 +
          ((((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C41216 - C41217 + C41218 - C41219 + C41220 - C41221 + C41222 -
              C41223) *
                 C9007 +
             (C41224 - C41225 + C41226 - C41227 + C41228 - C41229 + C41230 -
              C41231) *
                 C48102) *
                C48304) *
               C779 +
           (((C41217 - C41216 + C41219 - C41218 + C41221 - C41220 + C41223 -
              C41222) *
                 C9007 +
             (C41225 - C41224 + C41227 - C41226 + C41229 - C41228 + C41231 -
              C41230) *
                 C48102) *
                C30746 +
            ((C48536 * C2322 - C23267 * C2316 + C48532 * C2323 -
              C23268 * C2317 + C48522 * C9650 - C23269 * C9648 +
              C48504 * C9651 - C23270 * C9649) *
                 C9007 +
             (C48536 * C2334 - C23267 * C2324 + C48532 * C2335 -
              C23268 * C2325 + C48522 * C9654 - C23269 * C9652 +
              C48504 * C9655 - C23270 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C7741 +
             (C25467 - C25466 + C25469 - C25468) * C48526 +
             (C24671 - C24670 + C24673 - C24672) * C7742 +
             (C24675 - C24674 + C24677 - C24676) * C48513 +
             (C27692 - C27691 + C27694 - C27693) * C7743 +
             (C27696 - C27695 + C27698 - C27697) * C48481) *
                C30746 +
            ((C25471 - C25470 + C25473 - C25472) * C7741 +
             (C25475 - C25474 + C25477 - C25476) * C48526 +
             (C24679 - C24678 + C24681 - C24680) * C7742 +
             (C24683 - C24682 + C24685 - C24684) * C48513 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C7743 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C9007 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48102) *
                C48537 +
            ((C24880 - C24881 + C24882 - C24883) * C9007 +
             (C24884 - C24885 + C24886 - C24887) * C48102) *
                C48534 +
            (C26026 * C9007 + C26027 * C48102) * C48525 +
            ((C26019 - C26018 + C26021 - C26020) * C9007 +
             (C26023 - C26022 + C26025 - C26024) * C48102) *
                C48510) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C9007 +
             (C24885 - C24884 + C24887 - C24886) * C48102) *
                C48537 +
            ((C24893 - C24892 + C24895 - C24894) * C9007 +
             (C24897 - C24896 + C24899 - C24898) * C48102) *
                C48534 +
            ((C26018 - C26019 + C26020 - C26021) * C9007 +
             (C26022 - C26023 + C26024 - C26025) * C48102) *
                C48525 +
            ((C22089 * C3649 - C22083 * C3652 + C22090 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C22089 * C3653 - C22083 * C3658 + C22090 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C9007 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48102) *
                C48537 +
            ((C25462 - C25463 + C25464 - C25465) * C9007 +
             (C25466 - C25467 + C25468 - C25469) * C48102) *
                C48534 +
            ((C25470 - C25471 + C25472 - C25473) * C9007 +
             (C25474 - C25475 + C25476 - C25477) * C48102) *
                C48525 +
            ((C42322 - C42323 + C42324 - C42325) * C9007 +
             (C42326 - C42327 + C42328 - C42329) * C48102) *
                C48510) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C9007 +
             (C25467 - C25466 + C25469 - C25468) * C48102) *
                C48537 +
            ((C25471 - C25470 + C25473 - C25472) * C9007 +
             (C25475 - C25474 + C25477 - C25476) * C48102) *
                C48534 +
            ((C42323 - C42322 + C42325 - C42324) * C9007 +
             (C42327 - C42326 + C42329 - C42328) * C48102) *
                C48525 +
            ((C22083 * C10940 - C22089 * C10938 + C48262 * C10941 -
              C22090 * C10939) *
                 C9007 +
             (C22083 * C10944 - C22089 * C10942 + C48262 * C10945 -
              C22090 * C10943) *
                 C48102) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
             C40849) *
                C9007 +
            (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
             C40857) *
                C48102) *
               C48304) *
              C925 +
          (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
             C40848) *
                C9007 +
            (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
             C40856) *
                C48102) *
               C30746 +
           ((C41590 - C41591 + C41592 - C41593 + C41594 - C41595 + C41596 -
             C41597) *
                C9007 +
            (C41598 - C41599 + C41600 - C41601 + C41602 - C41603 + C41604 -
             C41605) *
                C48102) *
               C48304) *
              C926 +
          (((C41591 - C41590 + C41593 - C41592 + C41595 - C41594 + C41597 -
             C41596) *
                C9007 +
            (C41599 - C41598 + C41601 - C41600 + C41603 - C41602 + C41605 -
             C41604) *
                C48102) *
               C30746 +
           ((C48536 * C2785 - C23267 * C2781 + C48532 * C3230 - C23268 * C3227 +
             C48522 * C10064 - C23269 * C10062 + C48504 * C10509 -
             C23270 * C10508) *
                C9007 +
            (C48536 * C2793 - C23267 * C2786 + C48532 * C3236 - C23268 * C3231 +
             C48522 * C10068 - C23269 * C10065 + C48504 * C10511 -
             C23270 * C10510) *
                C48102) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C7741 +
            (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
            C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
               C30746 +
           ((C24893 - C24892 + C24895 - C24894) * C7741 +
            (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
            C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
            (C24472 - C24473 + C24474 - C24475) * C48481) *
               C48304) *
              C926 +
          ((C26026 * C7741 + C26027 * C48526 + C24922 * C7742 +
            C24923 * C48513 + (C24469 - C24468 + C24471 - C24470) * C7743 +
            (C24473 - C24472 + C24475 - C24474) * C48481) *
               C30746 +
           ((C26019 - C26018 + C26021 - C26020) * C7741 +
            (C26023 - C26022 + C26025 - C26024) * C48526 +
            (C24913 - C24912 + C24915 - C24914) * C7742 +
            (C24917 - C24916 + C24919 - C24918) * C48513 +
            (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
             C22090 * C3229) *
                C7743 +
            (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
             C22090 * C3235) *
                C48481) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C9007 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48102) *
               C48537 +
           ((C24880 - C24881 + C24882 - C24883) * C9007 +
            (C24884 - C24885 + C24886 - C24887) * C48102) *
               C48534 +
           C42702 * C48525 + C42707 * C48510) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C9007 +
            (C24885 - C24884 + C24887 - C24886) * C48102) *
               C48537 +
           ((C24893 - C24892 + C24895 - C24894) * C9007 +
            (C24897 - C24896 + C24899 - C24898) * C48102) *
               C48534 +
           ((C26018 - C26019 + C26020 - C26021) * C9007 +
            (C26022 - C26023 + C26024 - C26025) * C48102) *
               C48525 +
           ((C42694 - C42695 + C42696 - C42697) * C9007 +
            (C42698 - C42699 + C42700 - C42701) * C48102) *
               C48510) *
              C926 +
          (C42702 * C48537 + C42707 * C48534 +
           ((C42695 - C42694 + C42697 - C42696) * C9007 +
            (C42699 - C42698 + C42701 - C42700) * C48102) *
               C48525 +
           ((C22083 * C17625 - C22089 * C17623 + C48262 * C17866 -
             C22090 * C17865) *
                C9007 +
            (C22083 * C17629 - C22089 * C17626 + C48262 * C17868 -
             C22090 * C17867) *
                C48102) *
               C48510) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47225 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48439 +
            (C22096 - C22097 + C22098 - C22099) * C47206 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48300 +
           ((C24880 - C24881 + C24882 - C24883) * C47225 +
            (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
            C24921 * C48112) *
               C48307 +
           (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
            C24923 * C48112) *
               C36164) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C47225 +
            (C22101 - C22100 + C22103 - C22102) * C48439 +
            (C22105 - C22104 + C22107 - C22106) * C47206 +
            (C22109 - C22108 + C22111 - C22110) * C48112) *
               C48300 +
           (C24924 * C47225 + C24925 * C48439 + C27897 * C47206 +
            C27898 * C48112) *
               C48307 +
           (C24926 * C47225 + C24927 * C48439 +
            (C24468 - C24469 + C24470 - C24471) * C47206 +
            (C24472 - C24473 + C24474 - C24475) * C48112) *
               C36164) *
              C48188 * C48171 * C111 +
          ((C22136 * C47225 + C22137 * C48439 + C22138 * C47206 +
            C22139 * C48112) *
               C48300 +
           (C27495 * C47225 + C27496 * C48439 +
            (C22441 - C22440 + C22443 - C22442) * C47206 +
            (C22445 - C22444 + C22447 - C22446) * C48112) *
               C48307 +
           ((C24469 - C24468 + C24471 - C24470) * C47225 +
            (C24473 - C24472 + C24475 - C24474) * C48439 +
            (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                C47206 +
            (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                C48112) *
               C36164) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47225 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48439 +
             (C22270 - C22271 + C22272 - C22273) * C47206 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48300 +
            ((C25462 - C25463 + C25464 - C25465) * C47225 +
             (C25466 - C25467 + C25468 - C25469) * C48439 +
             (C24670 - C24671 + C24672 - C24673) * C47206 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48307 +
            ((C25470 - C25471 + C25472 - C25473) * C47225 +
             (C25474 - C25475 + C25476 - C25477) * C48439 +
             (C24678 - C24679 + C24680 - C24681) * C47206 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C36164) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C47225 +
             (C22101 - C22100 + C22103 - C22102) * C48439 +
             (C22105 - C22104 + C22107 - C22106) * C47206 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48300 +
            (C24924 * C47225 + C24925 * C48439 + C27897 * C47206 +
             C27898 * C48112) *
                C48307 +
            (C24926 * C47225 + C24927 * C48439 +
             (C24468 - C24469 + C24470 - C24471) * C47206 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C36164) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C47225 +
             (C22275 - C22274 + C22277 - C22276) * C48439 +
             (C22279 - C22278 + C22281 - C22280) * C47206 +
             (C22283 - C22282 + C22285 - C22284) * C48112) *
                C48300 +
            ((C24671 - C24670 + C24673 - C24672) * C47225 +
             (C24675 - C24674 + C24677 - C24676) * C48439 +
             (C27692 - C27691 + C27694 - C27693) * C47206 +
             (C27696 - C27695 + C27698 - C27697) * C48112) *
                C48307 +
            ((C24679 - C24678 + C24681 - C24680) * C47225 +
             (C24683 - C24682 + C24685 - C24684) * C48439 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C47206 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48112) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C47225 +
             (C24885 - C24884 + C24887 - C24886) * C48439 + C24924 * C47206 +
             C24925 * C48112) *
                C48300 +
            ((C24893 - C24892 + C24895 - C24894) * C47225 +
             (C24897 - C24896 + C24899 - C24898) * C48439 + C24926 * C47206 +
             C24927 * C48112) *
                C48307 +
            ((C26018 - C26019 + C26020 - C26021) * C47225 +
             (C26022 - C26023 + C26024 - C26025) * C48439 +
             (C24912 - C24913 + C24914 - C24915) * C47206 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C36164) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C47225 +
             (C22101 - C22100 + C22103 - C22102) * C48439 +
             (C22105 - C22104 + C22107 - C22106) * C47206 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48300 +
            (C24924 * C47225 + C24925 * C48439 + C27897 * C47206 +
             C27898 * C48112) *
                C48307 +
            (C24926 * C47225 + C24927 * C48439 +
             (C24468 - C24469 + C24470 - C24471) * C47206 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C36164) *
               C381 +
           ((C24920 * C47225 + C24921 * C48439 + C27495 * C47206 +
             C27496 * C48112) *
                C48300 +
            (C24922 * C47225 + C24923 * C48439 +
             (C24469 - C24468 + C24471 - C24470) * C47206 +
             (C24473 - C24472 + C24475 - C24474) * C48112) *
                C48307 +
            ((C24913 - C24912 + C24915 - C24914) * C47225 +
             (C24917 - C24916 + C24919 - C24918) * C48439 +
             (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
              C22090 * C3229) *
                 C47206 +
             (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
              C22090 * C3235) *
                 C48112) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47225 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48439 +
             (C22270 - C22271 + C22272 - C22273) * C47206 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48300 +
            ((C25462 - C25463 + C25464 - C25465) * C47225 +
             (C25466 - C25467 + C25468 - C25469) * C48439 +
             (C24670 - C24671 + C24672 - C24673) * C47206 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48307 +
            ((C25470 - C25471 + C25472 - C25473) * C47225 +
             (C25474 - C25475 + C25476 - C25477) * C48439 +
             (C24678 - C24679 + C24680 - C24681) * C47206 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C36164) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C47225 +
             (C22101 - C22100 + C22103 - C22102) * C48439 +
             (C22105 - C22104 + C22107 - C22106) * C47206 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48300 +
            (C24924 * C47225 + C24925 * C48439 + C27897 * C47206 +
             C27898 * C48112) *
                C48307 +
            (C24926 * C47225 + C24927 * C48439 +
             (C24468 - C24469 + C24470 - C24471) * C47206 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C36164) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C47225 +
             (C22275 - C22274 + C22277 - C22276) * C48439 +
             (C22279 - C22278 + C22281 - C22280) * C47206 +
             (C22283 - C22282 + C22285 - C22284) * C48112) *
                C48300 +
            ((C24671 - C24670 + C24673 - C24672) * C47225 +
             (C24675 - C24674 + C24677 - C24676) * C48439 +
             (C27692 - C27691 + C27694 - C27693) * C47206 +
             (C27696 - C27695 + C27698 - C27697) * C48112) *
                C48307 +
            ((C24679 - C24678 + C24681 - C24680) * C47225 +
             (C24683 - C24682 + C24685 - C24684) * C48439 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C47206 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48112) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47225 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48439 +
            (C22096 - C22097 + C22098 - C22099) * C47206 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48300 +
           ((C24880 - C24881 + C24882 - C24883) * C47225 +
            (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
            C24921 * C48112) *
               C48307 +
           (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
            C24923 * C48112) *
               C36164) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C47225 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48439 +
            (C22270 - C22271 + C22272 - C22273) * C47206 +
            (C22274 - C22275 + C22276 - C22277) * C48112) *
               C48300 +
           ((C25462 - C25463 + C25464 - C25465) * C47225 +
            (C25466 - C25467 + C25468 - C25469) * C48439 +
            (C24670 - C24671 + C24672 - C24673) * C47206 +
            (C24674 - C24675 + C24676 - C24677) * C48112) *
               C48307 +
           ((C25470 - C25471 + C25472 - C25473) * C47225 +
            (C25474 - C25475 + C25476 - C25477) * C48439 +
            (C24678 - C24679 + C24680 - C24681) * C47206 +
            (C24682 - C24683 + C24684 - C24685) * C48112) *
               C36164) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C47225 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C48439 +
            (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
                C47206 +
            (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
                C48112) *
               C48300 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C47225 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C48439 +
            (C22083 * C1454 - C22089 * C1449 + C48262 * C1907 -
             C22090 * C1903) *
                C47206 +
            (C22083 * C1461 - C22089 * C1455 + C48262 * C1912 -
             C22090 * C1908) *
                C48112) *
               C48307 +
           ((C22083 * C2323 - C22089 * C2317 + C48262 * C9650 -
             C22090 * C9648) *
                C47225 +
            (C22083 * C2335 - C22089 * C2325 + C48262 * C9654 -
             C22090 * C9652) *
                C48439 +
            (C22083 * C2327 - C22089 * C2319 + C48262 * C9913 -
             C22090 * C9912) *
                C47206 +
            (C22083 * C2337 - C22089 * C2329 + C48262 * C9915 -
             C22090 * C9914) *
                C48112) *
               C36164) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C47225 +
             (C24885 - C24884 + C24887 - C24886) * C48439 + C24924 * C47206 +
             C24925 * C48112) *
                C48300 +
            ((C24893 - C24892 + C24895 - C24894) * C47225 +
             (C24897 - C24896 + C24899 - C24898) * C48439 + C24926 * C47206 +
             C24927 * C48112) *
                C48307 +
            ((C26018 - C26019 + C26020 - C26021) * C47225 +
             (C26022 - C26023 + C26024 - C26025) * C48439 +
             (C24912 - C24913 + C24914 - C24915) * C47206 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C36164) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47225 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48439 +
             (C22270 - C22271 + C22272 - C22273) * C47206 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48300 +
            ((C25462 - C25463 + C25464 - C25465) * C47225 +
             (C25466 - C25467 + C25468 - C25469) * C48439 +
             (C24670 - C24671 + C24672 - C24673) * C47206 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48307 +
            ((C25470 - C25471 + C25472 - C25473) * C47225 +
             (C25474 - C25475 + C25476 - C25477) * C48439 +
             (C24678 - C24679 + C24680 - C24681) * C47206 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C36164) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C47225 +
             (C25467 - C25466 + C25469 - C25468) * C48439 +
             (C24671 - C24670 + C24673 - C24672) * C47206 +
             (C24675 - C24674 + C24677 - C24676) * C48112) *
                C48300 +
            ((C25471 - C25470 + C25473 - C25472) * C47225 +
             (C25475 - C25474 + C25477 - C25476) * C48439 +
             (C24679 - C24678 + C24681 - C24680) * C47206 +
             (C24683 - C24682 + C24685 - C24684) * C48112) *
                C48307 +
            ((C42323 - C42322 + C42325 - C42324) * C47225 +
             (C42327 - C42326 + C42329 - C42328) * C48439 +
             (C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C47206 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48112) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C47225 +
             (C24885 - C24884 + C24887 - C24886) * C48439 + C24924 * C47206 +
             C24925 * C48112) *
                C48300 +
            ((C24893 - C24892 + C24895 - C24894) * C47225 +
             (C24897 - C24896 + C24899 - C24898) * C48439 + C24926 * C47206 +
             C24927 * C48112) *
                C48307 +
            ((C26018 - C26019 + C26020 - C26021) * C47225 +
             (C26022 - C26023 + C26024 - C26025) * C48439 +
             (C24912 - C24913 + C24914 - C24915) * C47206 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C36164) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C47225 +
             (C22101 - C22100 + C22103 - C22102) * C48439 +
             (C22105 - C22104 + C22107 - C22106) * C47206 +
             (C22109 - C22108 + C22111 - C22110) * C48112) *
                C48300 +
            (C24924 * C47225 + C24925 * C48439 + C27897 * C47206 +
             C27898 * C48112) *
                C48307 +
            (C24926 * C47225 + C24927 * C48439 +
             (C24468 - C24469 + C24470 - C24471) * C47206 +
             (C24472 - C24473 + C24474 - C24475) * C48112) *
                C36164) *
               C779 +
           ((C24920 * C47225 + C24921 * C48439 + C27495 * C47206 +
             C27496 * C48112) *
                C48300 +
            (C24922 * C47225 + C24923 * C48439 +
             (C24469 - C24468 + C24471 - C24470) * C47206 +
             (C24473 - C24472 + C24475 - C24474) * C48112) *
                C48307 +
            ((C24913 - C24912 + C24915 - C24914) * C47225 +
             (C24917 - C24916 + C24919 - C24918) * C48439 +
             (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
              C22090 * C3229) *
                 C47206 +
             (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
              C22090 * C3235) *
                 C48112) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C47225 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48439 +
             (C22096 - C22097 + C22098 - C22099) * C47206 +
             (C22100 - C22101 + C22102 - C22103) * C48112) *
                C48300 +
            ((C24880 - C24881 + C24882 - C24883) * C47225 +
             (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
             C24921 * C48112) *
                C48307 +
            (C26026 * C47225 + C26027 * C48439 + C24922 * C47206 +
             C24923 * C48112) *
                C36164) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C47225 +
             (C24885 - C24884 + C24887 - C24886) * C48439 + C24924 * C47206 +
             C24925 * C48112) *
                C48300 +
            ((C24893 - C24892 + C24895 - C24894) * C47225 +
             (C24897 - C24896 + C24899 - C24898) * C48439 + C24926 * C47206 +
             C24927 * C48112) *
                C48307 +
            ((C26018 - C26019 + C26020 - C26021) * C47225 +
             (C26022 - C26023 + C26024 - C26025) * C48439 +
             (C24912 - C24913 + C24914 - C24915) * C47206 +
             (C24916 - C24917 + C24918 - C24919) * C48112) *
                C36164) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C47225 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48439 +
             (C22270 - C22271 + C22272 - C22273) * C47206 +
             (C22274 - C22275 + C22276 - C22277) * C48112) *
                C48300 +
            ((C25462 - C25463 + C25464 - C25465) * C47225 +
             (C25466 - C25467 + C25468 - C25469) * C48439 +
             (C24670 - C24671 + C24672 - C24673) * C47206 +
             (C24674 - C24675 + C24676 - C24677) * C48112) *
                C48307 +
            ((C25470 - C25471 + C25472 - C25473) * C47225 +
             (C25474 - C25475 + C25476 - C25477) * C48439 +
             (C24678 - C24679 + C24680 - C24681) * C47206 +
             (C24682 - C24683 + C24684 - C24685) * C48112) *
                C36164) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C47225 +
             (C25467 - C25466 + C25469 - C25468) * C48439 +
             (C24671 - C24670 + C24673 - C24672) * C47206 +
             (C24675 - C24674 + C24677 - C24676) * C48112) *
                C48300 +
            ((C25471 - C25470 + C25473 - C25472) * C47225 +
             (C25475 - C25474 + C25477 - C25476) * C48439 +
             (C24679 - C24678 + C24681 - C24680) * C47206 +
             (C24683 - C24682 + C24685 - C24684) * C48112) *
                C48307 +
            ((C42323 - C42322 + C42325 - C42324) * C47225 +
             (C42327 - C42326 + C42329 - C42328) * C48439 +
             (C22083 * C3232 - C22089 * C3228 + C48262 * C10066 -
              C22090 * C10063) *
                 C47206 +
             (C22083 * C3237 - C22089 * C3233 + C48262 * C10069 -
              C22090 * C10067) *
                 C48112) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C47225 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48439 +
            (C22096 - C22097 + C22098 - C22099) * C47206 +
            (C22100 - C22101 + C22102 - C22103) * C48112) *
               C48300 +
           ((C24880 - C24881 + C24882 - C24883) * C47225 +
            (C24884 - C24885 + C24886 - C24887) * C48439 + C24920 * C47206 +
            C24921 * C48112) *
               C48307 +
           C45918 * C36164) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C47225 +
            (C24885 - C24884 + C24887 - C24886) * C48439 + C24924 * C47206 +
            C24925 * C48112) *
               C48300 +
           ((C24893 - C24892 + C24895 - C24894) * C47225 +
            (C24897 - C24896 + C24899 - C24898) * C48439 + C24926 * C47206 +
            C24927 * C48112) *
               C48307 +
           ((C26018 - C26019 + C26020 - C26021) * C47225 +
            (C26022 - C26023 + C26024 - C26025) * C48439 +
            (C24912 - C24913 + C24914 - C24915) * C47206 +
            (C24916 - C24917 + C24918 - C24919) * C48112) *
               C36164) *
              C926 +
          (C45918 * C48300 +
           (C42703 * C47225 + C42704 * C48439 +
            (C24913 - C24912 + C24915 - C24914) * C47206 +
            (C24917 - C24916 + C24919 - C24918) * C48112) *
               C48307 +
           ((C42695 - C42694 + C42697 - C42696) * C47225 +
            (C42699 - C42698 + C42701 - C42700) * C48439 +
            (C22083 * C3654 - C22089 * C3650 + C48262 * C17538 -
             C22090 * C17537) *
                C47206 +
            (C22083 * C3659 - C22089 * C3655 + C48262 * C17540 -
             C22090 * C17539) *
                C48112) *
               C36164) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C22097 - C22096 + C22099 - C22098) * C7741 +
            (C22101 - C22100 + C22103 - C22102) * C48526 +
            (C22105 - C22104 + C22107 - C22106) * C7742 +
            (C22109 - C22108 + C22111 - C22110) * C48513 +
            (C22113 - C22112 + C22115 - C22114) * C7743 +
            (C22117 - C22116 + C22119 - C22118) * C48481) *
               C30746 +
           (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
            C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
            (C22444 - C22445 + C22446 - C22447) * C48481) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C22136 * C7741 + C22137 * C48526 + C22138 * C7742 +
            C22139 * C48513 + (C22121 - C22120 + C22123 - C22122) * C7743 +
            (C22125 - C22124 + C22127 - C22126) * C48481) *
               C30746 +
           (C27495 * C7741 + C27496 * C48526 +
            (C22441 - C22440 + C22443 - C22442) * C7742 +
            (C22445 - C22444 + C22447 - C22446) * C48513 +
            (C22083 * C397 - C22089 * C387 + C48262 * C690 - C22090 * C681) *
                C7743 +
            (C22083 * C405 - C22089 * C398 + C48262 * C696 - C22090 * C691) *
                C48481) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C48536 * C389 - C23267 * C383 + C48532 * C682 - C23268 * C677 +
             C48522 * C1452 - C23269 * C1448 + C48504 * C1905 -
             C23270 * C1902) *
                C9007 +
            (C48536 * C401 - C23267 * C390 + C48532 * C692 - C23268 * C683 +
             C48522 * C1460 - C23269 * C1453 + C48504 * C1911 -
             C23270 * C1906) *
                C48102) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
             C23280) *
                C9007 +
            (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
             C23288) *
                C48102) *
               C30746 +
           ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
             C23589) *
                C9007 +
            (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
             C23597) *
                C48102) *
               C48304) *
              C48188 * C48171 * C111 +
          (((C23291 - C23290 + C23293 - C23292 + C23295 - C23294 + C23297 -
             C23296) *
                C9007 +
            (C23299 - C23298 + C23301 - C23300 + C23303 - C23302 + C23305 -
             C23304) *
                C48102) *
               C30746 +
           ((C48536 * C393 - C23267 * C385 + C48532 * C686 - C23268 * C679 +
             C48522 * C1456 - C23269 * C1450 + C48504 * C1909 -
             C23270 * C1904) *
                C9007 +
            (C48536 * C403 - C23267 * C394 + C48532 * C694 - C23268 * C687 +
             C48522 * C1462 - C23269 * C1457 + C48504 * C1913 -
             C23270 * C1910) *
                C48102) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C48188 * C255 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C48188 * C255 +
           (((C22271 - C22270 + C22273 - C22272) * C7741 +
             (C22275 - C22274 + C22277 - C22276) * C48526 +
             (C22279 - C22278 + C22281 - C22280) * C7742 +
             (C22283 - C22282 + C22285 - C22284) * C48513 +
             (C22287 - C22286 + C22289 - C22288) * C7743 +
             (C22291 - C22290 + C22293 - C22292) * C48481) *
                C30746 +
            ((C24671 - C24670 + C24673 - C24672) * C7741 +
             (C24675 - C24674 + C24677 - C24676) * C48526 +
             (C27692 - C27691 + C27694 - C27693) * C7742 +
             (C27696 - C27695 + C27698 - C27697) * C48513 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C7743 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C48536 * C389 - C23267 * C383 + C48532 * C682 - C23268 * C677 +
              C48522 * C1452 - C23269 * C1448 + C48504 * C1905 -
              C23270 * C1902) *
                 C9007 +
             (C48536 * C401 - C23267 * C390 + C48532 * C692 - C23268 * C683 +
              C48522 * C1460 - C23269 * C1453 + C48504 * C1911 -
              C23270 * C1906) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
              C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
              C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C9007 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48102) *
                C30746 +
            ((C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
              C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
              C23270 * C9181) *
                 C9007 +
             (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
              C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
              C23270 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C381 +
           ((C24920 * C7741 + C24921 * C48526 + C27495 * C7742 +
             C27496 * C48513 + (C22441 - C22440 + C22443 - C22442) * C7743 +
             (C22445 - C22444 + C22447 - C22446) * C48481) *
                C30746 +
            (C24922 * C7741 + C24923 * C48526 +
             (C24469 - C24468 + C24471 - C24470) * C7742 +
             (C24473 - C24472 + C24475 - C24474) * C48513 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C7743 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C381 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C381 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C9007 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48102) *
                C30746 +
            ((C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
              C48522 * C2327 - C23269 * C2319 + C48504 * C9913 -
              C23270 * C9912) *
                 C9007 +
             (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
              C48522 * C2337 - C23269 * C2329 + C48504 * C9915 -
              C23270 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C48188 * C505 +
           (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C48188 * C505 +
           (((C22271 - C22270 + C22273 - C22272) * C7741 +
             (C22275 - C22274 + C22277 - C22276) * C48526 +
             (C22279 - C22278 + C22281 - C22280) * C7742 +
             (C22283 - C22282 + C22285 - C22284) * C48513 +
             (C22287 - C22286 + C22289 - C22288) * C7743 +
             (C22291 - C22290 + C22293 - C22292) * C48481) *
                C30746 +
            ((C24671 - C24670 + C24673 - C24672) * C7741 +
             (C24675 - C24674 + C24677 - C24676) * C48526 +
             (C27692 - C27691 + C27694 - C27693) * C7742 +
             (C27696 - C27695 + C27698 - C27697) * C48513 +
             (C22083 * C688 - C22089 * C680 + C48262 * C1458 - C22090 * C1451) *
                 C7743 +
             (C22083 * C695 - C22089 * C689 + C48262 * C1463 - C22090 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
              C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
              C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C23437 - C23436 + C23439 - C23438 + C23441 - C23440 + C23443 -
              C23442) *
                 C9007 +
             (C23445 - C23444 + C23447 - C23446 + C23449 - C23448 + C23451 -
              C23450) *
                 C48102) *
                C30746 +
            ((C48536 * C684 - C23267 * C678 + C48532 * C1454 - C23268 * C1449 +
              C48522 * C1907 - C23269 * C1903 + C48504 * C9184 -
              C23270 * C9181) *
                 C9007 +
             (C48536 * C693 - C23267 * C685 + C48532 * C1461 - C23268 * C1455 +
              C48522 * C1912 - C23269 * C1908 + C48504 * C9187 -
              C23270 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C48188 * C571 +
          (((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                C7741 +
            (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                C48526 +
            (C22270 - C22271 + C22272 - C22273) * C7742 +
            (C22274 - C22275 + C22276 - C22277) * C48513 +
            (C22278 - C22279 + C22280 - C22281) * C7743 +
            (C22282 - C22283 + C22284 - C22285) * C48481) *
               C30746 +
           ((C25462 - C25463 + C25464 - C25465) * C7741 +
            (C25466 - C25467 + C25468 - C25469) * C48526 +
            (C24670 - C24671 + C24672 - C24673) * C7742 +
            (C24674 - C24675 + C24676 - C24677) * C48513 +
            (C27691 - C27692 + C27693 - C27694) * C7743 +
            (C27695 - C27696 + C27697 - C27698) * C48481) *
               C48304) *
              C48188 * C572 +
          (((C22083 * C580 - C22089 * C575 + C48262 * C1266 - C22090 * C1262) *
                C7741 +
            (C22083 * C590 - C22089 * C581 + C48262 * C1274 - C22090 * C1267) *
                C48526 +
            (C22083 * C582 - C22089 * C576 + C48262 * C1268 - C22090 * C1263) *
                C7742 +
            (C22083 * C591 - C22089 * C583 + C48262 * C1275 - C22090 * C1269) *
                C48513 +
            (C22083 * C584 - C22089 * C577 + C48262 * C1270 - C22090 * C1264) *
                C7743 +
            (C22083 * C592 - C22089 * C585 + C48262 * C1276 - C22090 * C1271) *
                C48481) *
               C30746 +
           ((C22083 * C1452 - C22089 * C1448 + C48262 * C1905 -
             C22090 * C1902) *
                C7741 +
            (C22083 * C1460 - C22089 * C1453 + C48262 * C1911 -
             C22090 * C1906) *
                C48526 +
            (C22083 * C1454 - C22089 * C1449 + C48262 * C1907 -
             C22090 * C1903) *
                C7742 +
            (C22083 * C1461 - C22089 * C1455 + C48262 * C1912 -
             C22090 * C1908) *
                C48513 +
            (C22083 * C1456 - C22089 * C1450 + C48262 * C1909 -
             C22090 * C1904) *
                C7743 +
            (C22083 * C1462 - C22089 * C1457 + C48262 * C1913 -
             C22090 * C1910) *
                C48481) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
             C40849) *
                C9007 +
            (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
             C40857) *
                C48102) *
               C48304) *
              C48188 * C571 +
          (((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
             C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
             C48504 * C1747) *
                C9007 +
            (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
             C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
             C48504 * C1753) *
                C48102) *
               C30746 +
           ((C23267 * C677 - C48536 * C682 + C23268 * C1448 - C48532 * C1452 +
             C23269 * C1902 - C48522 * C1905 + C23270 * C9180 -
             C48504 * C9182) *
                C9007 +
            (C23267 * C683 - C48536 * C692 + C23268 * C1453 - C48532 * C1460 +
             C23269 * C1906 - C48522 * C1911 + C23270 * C9183 -
             C48504 * C9186) *
                C48102) *
               C48304) *
              C48188 * C572 +
          (((C48536 * C580 - C23267 * C575 + C48532 * C1266 - C23268 * C1262 +
             C48522 * C1747 - C23269 * C1744 + C48504 * C9092 -
             C23270 * C9090) *
                C9007 +
            (C48536 * C590 - C23267 * C581 + C48532 * C1274 - C23268 * C1267 +
             C48522 * C1753 - C23269 * C1748 + C48504 * C9096 -
             C23270 * C9093) *
                C48102) *
               C30746 +
           ((C48536 * C1452 - C23267 * C1448 + C48532 * C1905 - C23268 * C1902 +
             C48522 * C9182 - C23269 * C9180 + C48504 * C9419 -
             C23270 * C9418) *
                C9007 +
            (C48536 * C1460 - C23267 * C1453 + C48532 * C1911 - C23268 * C1906 +
             C48522 * C9186 - C23269 * C9183 + C48504 * C9421 -
             C23270 * C9420) *
                C48102) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C381 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C505 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C381 +
           (((C25463 - C25462 + C25465 - C25464) * C7741 +
             (C25467 - C25466 + C25469 - C25468) * C48526 +
             (C24671 - C24670 + C24673 - C24672) * C7742 +
             (C24675 - C24674 + C24677 - C24676) * C48513 +
             (C27692 - C27691 + C27694 - C27693) * C7743 +
             (C27696 - C27695 + C27698 - C27697) * C48481) *
                C30746 +
            ((C25471 - C25470 + C25473 - C25472) * C7741 +
             (C25475 - C25474 + C25477 - C25476) * C48526 +
             (C24679 - C24678 + C24681 - C24680) * C7742 +
             (C24683 - C24682 + C24685 - C24684) * C48513 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C7743 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C381 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C505 +
          ((((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C41216 - C41217 + C41218 - C41219 + C41220 - C41221 + C41222 -
              C41223) *
                 C9007 +
             (C41224 - C41225 + C41226 - C41227 + C41228 - C41229 + C41230 -
              C41231) *
                 C48102) *
                C48304) *
               C381 +
           (((C41217 - C41216 + C41219 - C41218 + C41221 - C41220 + C41223 -
              C41222) *
                 C9007 +
             (C41225 - C41224 + C41227 - C41226 + C41229 - C41228 + C41231 -
              C41230) *
                 C48102) *
                C30746 +
            ((C48536 * C2322 - C23267 * C2316 + C48532 * C2323 -
              C23268 * C2317 + C48522 * C9650 - C23269 * C9648 +
              C48504 * C9651 - C23270 * C9649) *
                 C9007 +
             (C48536 * C2334 - C23267 * C2324 + C48532 * C2335 -
              C23268 * C2325 + C48522 * C9654 - C23269 * C9652 +
              C48504 * C9655 - C23270 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C22097 - C22096 + C22099 - C22098) * C7741 +
             (C22101 - C22100 + C22103 - C22102) * C48526 +
             (C22105 - C22104 + C22107 - C22106) * C7742 +
             (C22109 - C22108 + C22111 - C22110) * C48513 +
             (C22113 - C22112 + C22115 - C22114) * C7743 +
             (C22117 - C22116 + C22119 - C22118) * C48481) *
                C30746 +
            (C24924 * C7741 + C24925 * C48526 + C27897 * C7742 +
             C27898 * C48513 + (C22440 - C22441 + C22442 - C22443) * C7743 +
             (C22444 - C22445 + C22446 - C22447) * C48481) *
                C48304) *
               C779 +
           ((C24920 * C7741 + C24921 * C48526 + C27495 * C7742 +
             C27496 * C48513 + (C22441 - C22440 + C22443 - C22442) * C7743 +
             (C22445 - C22444 + C22447 - C22446) * C48481) *
                C30746 +
            (C24922 * C7741 + C24923 * C48526 +
             (C24469 - C24468 + C24471 - C24470) * C7742 +
             (C24473 - C24472 + C24475 - C24474) * C48513 +
             (C22083 * C939 - C22089 * C931 + C48262 * C2616 - C22090 * C2615) *
                 C7743 +
             (C22083 * C946 - C22089 * C940 + C48262 * C2618 - C22090 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C779 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C23275 - C23274 + C23277 - C23276 + C23279 - C23278 + C23281 -
              C23280) *
                 C9007 +
             (C23283 - C23282 + C23285 - C23284 + C23287 - C23286 + C23289 -
              C23288) *
                 C48102) *
                C30746 +
            ((C23582 - C23583 + C23584 - C23585 + C23586 - C23587 + C23588 -
              C23589) *
                 C9007 +
             (C23590 - C23591 + C23592 - C23593 + C23594 - C23595 + C23596 -
              C23597) *
                 C48102) *
                C48304) *
               C779 +
           (((C23583 - C23582 + C23585 - C23584 + C23587 - C23586 + C23589 -
              C23588) *
                 C9007 +
             (C23591 - C23590 + C23593 - C23592 + C23595 - C23594 + C23597 -
              C23596) *
                 C48102) *
                C30746 +
            ((C48536 * C935 - C23267 * C929 + C48532 * C2326 - C23268 * C2318 +
              C48522 * C2327 - C23269 * C2319 + C48504 * C9913 -
              C23270 * C9912) *
                 C9007 +
             (C48536 * C944 - C23267 * C936 + C48532 * C2336 - C23268 * C2328 +
              C48522 * C2337 - C23269 * C2329 + C48504 * C9915 -
              C23270 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                 C7741 +
             (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                 C48526 +
             (C22096 - C22097 + C22098 - C22099) * C7742 +
             (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
             C22137 * C48481) *
                C30746 +
            ((C24880 - C24881 + C24882 - C24883) * C7741 +
             (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
             C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
                C48304) *
               C779 +
           (((C24881 - C24880 + C24883 - C24882) * C7741 +
             (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
             C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
                C30746 +
            ((C24893 - C24892 + C24895 - C24894) * C7741 +
             (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
             C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
             (C24472 - C24473 + C24474 - C24475) * C48481) *
                C48304) *
               C48491) *
              C255 +
          ((((C22089 * C259 - C22083 * C265 + C22090 * C575 - C48262 * C580) *
                 C7741 +
             (C22089 * C266 - C22083 * C277 + C22090 * C581 - C48262 * C590) *
                 C48526 +
             (C22270 - C22271 + C22272 - C22273) * C7742 +
             (C22274 - C22275 + C22276 - C22277) * C48513 +
             (C22278 - C22279 + C22280 - C22281) * C7743 +
             (C22282 - C22283 + C22284 - C22285) * C48481) *
                C30746 +
            ((C25462 - C25463 + C25464 - C25465) * C7741 +
             (C25466 - C25467 + C25468 - C25469) * C48526 +
             (C24670 - C24671 + C24672 - C24673) * C7742 +
             (C24674 - C24675 + C24676 - C24677) * C48513 +
             (C27691 - C27692 + C27693 - C27694) * C7743 +
             (C27695 - C27696 + C27697 - C27698) * C48481) *
                C48304) *
               C779 +
           (((C25463 - C25462 + C25465 - C25464) * C7741 +
             (C25467 - C25466 + C25469 - C25468) * C48526 +
             (C24671 - C24670 + C24673 - C24672) * C7742 +
             (C24675 - C24674 + C24677 - C24676) * C48513 +
             (C27692 - C27691 + C27694 - C27693) * C7743 +
             (C27696 - C27695 + C27698 - C27697) * C48481) *
                C30746 +
            ((C25471 - C25470 + C25473 - C25472) * C7741 +
             (C25475 - C25474 + C25477 - C25476) * C48526 +
             (C24679 - C24678 + C24681 - C24680) * C7742 +
             (C24683 - C24682 + C24685 - C24684) * C48513 +
             (C22083 * C2330 - C22089 * C2320 + C48262 * C2331 -
              C22090 * C2321) *
                 C7743 +
             (C22083 * C2338 - C22089 * C2332 + C48262 * C2339 -
              C22090 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
              C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                 C9007 +
             (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
              C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                 C48102) *
                C30746 +
            ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
              C40849) *
                 C9007 +
             (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
              C40857) *
                 C48102) *
                C48304) *
               C779 +
           (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
              C40848) *
                 C9007 +
             (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
              C40856) *
                 C48102) *
                C30746 +
            ((C23267 * C928 - C48536 * C933 + C23268 * C2316 - C48532 * C2322 +
              C23269 * C2317 - C48522 * C2323 + C23270 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C23267 * C934 - C48536 * C943 + C23268 * C2324 - C48532 * C2334 +
              C23269 * C2325 - C48522 * C2335 + C23270 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C255 +
          ((((C23267 * C259 - C48536 * C265 + C23268 * C575 - C48532 * C580 +
              C23269 * C1262 - C48522 * C1266 + C23270 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C23267 * C266 - C48536 * C277 + C23268 * C581 - C48532 * C590 +
              C23269 * C1267 - C48522 * C1274 + C23270 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C30746 +
            ((C41216 - C41217 + C41218 - C41219 + C41220 - C41221 + C41222 -
              C41223) *
                 C9007 +
             (C41224 - C41225 + C41226 - C41227 + C41228 - C41229 + C41230 -
              C41231) *
                 C48102) *
                C48304) *
               C779 +
           (((C41217 - C41216 + C41219 - C41218 + C41221 - C41220 + C41223 -
              C41222) *
                 C9007 +
             (C41225 - C41224 + C41227 - C41226 + C41229 - C41228 + C41231 -
              C41230) *
                 C48102) *
                C30746 +
            ((C48536 * C2322 - C23267 * C2316 + C48532 * C2323 -
              C23268 * C2317 + C48522 * C9650 - C23269 * C9648 +
              C48504 * C9651 - C23270 * C9649) *
                 C9007 +
             (C48536 * C2334 - C23267 * C2324 + C48532 * C2335 -
              C23268 * C2325 + C48522 * C9654 - C23269 * C9652 +
              C48504 * C9655 - C23270 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22083 * C126 - C22089 * C119 + C48262 * C265 - C22090 * C259) *
                C7741 +
            (C22083 * C140 - C22089 * C127 + C48262 * C277 - C22090 * C266) *
                C48526 +
            (C22096 - C22097 + C22098 - C22099) * C7742 +
            (C22100 - C22101 + C22102 - C22103) * C48513 + C22136 * C7743 +
            C22137 * C48481) *
               C30746 +
           ((C24880 - C24881 + C24882 - C24883) * C7741 +
            (C24884 - C24885 + C24886 - C24887) * C48526 + C24920 * C7742 +
            C24921 * C48513 + C27495 * C7743 + C27496 * C48481) *
               C48304) *
              C925 +
          (((C24881 - C24880 + C24883 - C24882) * C7741 +
            (C24885 - C24884 + C24887 - C24886) * C48526 + C24924 * C7742 +
            C24925 * C48513 + C27897 * C7743 + C27898 * C48481) *
               C30746 +
           ((C24893 - C24892 + C24895 - C24894) * C7741 +
            (C24897 - C24896 + C24899 - C24898) * C48526 + C24926 * C7742 +
            C24927 * C48513 + (C24468 - C24469 + C24470 - C24471) * C7743 +
            (C24472 - C24473 + C24474 - C24475) * C48481) *
               C48304) *
              C926 +
          ((C26026 * C7741 + C26027 * C48526 + C24922 * C7742 +
            C24923 * C48513 + (C24469 - C24468 + C24471 - C24470) * C7743 +
            (C24473 - C24472 + C24475 - C24474) * C48481) *
               C30746 +
           ((C26019 - C26018 + C26021 - C26020) * C7741 +
            (C26023 - C26022 + C26025 - C26024) * C48526 +
            (C24913 - C24912 + C24915 - C24914) * C7742 +
            (C24917 - C24916 + C24919 - C24918) * C48513 +
            (C22083 * C2789 - C22089 * C2783 + C48262 * C3234 -
             C22090 * C3229) *
                C7743 +
            (C22083 * C2795 - C22089 * C2790 + C48262 * C3238 -
             C22090 * C3235) *
                C48481) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48536 * C126 - C23267 * C119 + C48532 * C265 - C23268 * C259 +
             C48522 * C580 - C23269 * C575 + C48504 * C1266 - C23270 * C1262) *
                C9007 +
            (C48536 * C140 - C23267 * C127 + C48532 * C277 - C23268 * C266 +
             C48522 * C590 - C23269 * C581 + C48504 * C1274 - C23270 * C1267) *
                C48102) *
               C30746 +
           ((C40842 - C40843 + C40844 - C40845 + C40846 - C40847 + C40848 -
             C40849) *
                C9007 +
            (C40850 - C40851 + C40852 - C40853 + C40854 - C40855 + C40856 -
             C40857) *
                C48102) *
               C48304) *
              C925 +
          (((C40843 - C40842 + C40845 - C40844 + C40847 - C40846 + C40849 -
             C40848) *
                C9007 +
            (C40851 - C40850 + C40853 - C40852 + C40855 - C40854 + C40857 -
             C40856) *
                C48102) *
               C30746 +
           ((C41590 - C41591 + C41592 - C41593 + C41594 - C41595 + C41596 -
             C41597) *
                C9007 +
            (C41598 - C41599 + C41600 - C41601 + C41602 - C41603 + C41604 -
             C41605) *
                C48102) *
               C48304) *
              C926 +
          (((C41591 - C41590 + C41593 - C41592 + C41595 - C41594 + C41597 -
             C41596) *
                C9007 +
            (C41599 - C41598 + C41601 - C41600 + C41603 - C41602 + C41605 -
             C41604) *
                C48102) *
               C30746 +
           ((C48536 * C2785 - C23267 * C2781 + C48532 * C3230 - C23268 * C3227 +
             C48522 * C10064 - C23269 * C10062 + C48504 * C10509 -
             C23270 * C10508) *
                C9007 +
            (C48536 * C2793 - C23267 * C2786 + C48532 * C3236 - C23268 * C3231 +
             C48522 * C10068 - C23269 * C10065 + C48504 * C10511 -
             C23270 * C10510) *
                C48102) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C48188 * C48171 * C110 +
          ((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
            C11088) *
               C47225 +
           (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
            C11096) *
               C48439 +
           (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
            C11105) *
               C47206 +
           (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
            C11113) *
               C48112) *
              C48217 * C48188 * C48171 * C111 +
          ((C11099 - C11098 + C11101 - C11100 + C11103 - C11102 + C11105 -
            C11104) *
               C47225 +
           (C11107 - C11106 + C11109 - C11108 + C11111 - C11110 + C11113 -
            C11112) *
               C48439 +
           (C11069 * C132 - C11075 * C122 + C11070 * C271 - C11076 * C262 +
            C11071 * C586 - C11077 * C578 + C48504 * C1272 - C11078 * C1265) *
               C47206 +
           (C11069 * C143 - C11075 * C133 + C11070 * C280 - C11076 * C272 +
            C11071 * C593 - C11077 * C587 + C48504 * C1277 - C11078 * C1273) *
               C48112) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C48188 * C48171 * C110 +
          ((C3790 - C3789 + C3792 - C3791) * C3784 +
           (C3794 - C3793 + C3796 - C3795) * C3778 +
           (C3798 - C3797 + C3800 - C3799) * C3785 +
           (C3802 - C3801 + C3804 - C3803) * C3779 +
           (C3806 - C3805 + C3808 - C3807) * C3786 +
           (C3810 - C3809 + C3812 - C3811) * C3780 +
           (C3813 - C3814 + C3815 - C3816) * C3787 +
           (C3817 - C3818 + C3819 - C3820) * C48498) *
              C48217 * C48188 * C48171 * C111 +
          (C3829 * C3784 + C3830 * C3778 + C3831 * C3785 + C3832 * C3779 +
           (C3814 - C3813 + C3816 - C3815) * C3786 +
           (C3818 - C3817 + C3820 - C3819) * C3780 +
           (C48461 * C136 - C3782 * C124 + C48262 * C275 - C3783 * C264) *
               C3787 +
           (C48461 * C145 - C3782 * C137 + C48262 * C282 - C3783 * C276) *
               C48498) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47225 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48439 +
            (C3789 - C3790 + C3791 - C3792) * C47206 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C14987 +
           ((C6497 - C6498 + C6499 - C6500) * C47225 +
            (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
            C6534 * C48112) *
               C14988 +
           ((C7616 - C7615 + C7618 - C7617) * C47225 +
            (C7620 - C7619 + C7622 - C7621) * C48439 +
            (C6518 - C6517 + C6520 - C6519) * C47206 +
            (C6522 - C6521 + C6524 - C6523) * C48112) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C47225 +
            (C3794 - C3793 + C3796 - C3795) * C48439 +
            (C3798 - C3797 + C3800 - C3799) * C47206 +
            (C3802 - C3801 + C3804 - C3803) * C48112) *
               C14987 +
           (C6535 * C47225 + C6536 * C48439 + C6537 * C47206 + C6538 * C48112) *
               C14988 +
           ((C6517 - C6518 + C6519 - C6520) * C47225 +
            (C6521 - C6522 + C6523 - C6524) * C48439 +
            (C6525 - C6526 + C6527 - C6528) * C47206 +
            (C6529 - C6530 + C6531 - C6532) * C48112) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C3829 * C47225 + C3830 * C48439 + C3831 * C47206 + C3832 * C48112) *
               C14987 +
           (C6091 * C47225 + C6092 * C48439 +
            (C4134 - C4133 + C4136 - C4135) * C47206 +
            (C4138 - C4137 + C4140 - C4139) * C48112) *
               C14988 +
           ((C6526 - C6525 + C6528 - C6527) * C47225 +
            (C6530 - C6529 + C6532 - C6531) * C48439 +
            (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                C47206 +
            (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                C48112) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
             C11250) *
                C47225 +
            (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
             C11258) *
                C48439 +
            (C11069 * C269 - C11075 * C261 + C11070 * C584 - C11076 * C577 +
             C11071 * C1270 - C11077 * C1264 + C48504 * C1751 -
             C11078 * C1746) *
                C47206 +
            (C11069 * C279 - C11075 * C270 + C11070 * C592 - C11076 * C585 +
             C11071 * C1276 - C11077 * C1271 + C48504 * C1755 -
             C11078 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C48188 * C255 +
           ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C48188 * C255 +
           ((C3964 - C3963 + C3966 - C3965) * C3784 +
            (C3968 - C3967 + C3970 - C3969) * C3778 +
            (C3972 - C3971 + C3974 - C3973) * C3785 +
            (C3976 - C3975 + C3978 - C3977) * C3779 +
            (C3980 - C3979 + C3982 - C3981) * C3786 +
            (C3984 - C3983 + C3986 - C3985) * C3780 +
            (C48461 * C273 - C3782 * C263 + C48262 * C588 - C3783 * C579) *
                C3787 +
            (C48461 * C281 - C3782 * C274 + C48262 * C594 - C3783 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 +
             (C6518 - C6517 + C6520 - C6519) * C47206 +
             (C6522 - C6521 + C6524 - C6523) * C48112) *
                C48497) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47225 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48439 +
             (C3963 - C3964 + C3965 - C3966) * C47206 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C14987 +
            ((C7073 - C7074 + C7075 - C7076) * C47225 +
             (C7077 - C7078 + C7079 - C7080) * C48439 +
             (C6287 - C6288 + C6289 - C6290) * C47206 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C14988 +
            ((C3782 * C2316 - C48461 * C2322 + C3783 * C2317 - C48262 * C2323) *
                 C47225 +
             (C3782 * C2324 - C48461 * C2334 + C3783 * C2325 - C48262 * C2335) *
                 C48439 +
             (C18465 - C18466 + C18467 - C18468) * C47206 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C47225 +
             (C3794 - C3793 + C3796 - C3795) * C48439 +
             (C3798 - C3797 + C3800 - C3799) * C47206 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C14987 +
            (C6535 * C47225 + C6536 * C48439 + C6537 * C47206 +
             C6538 * C48112) *
                C14988 +
            ((C6517 - C6518 + C6519 - C6520) * C47225 +
             (C6521 - C6522 + C6523 - C6524) * C48439 +
             (C6525 - C6526 + C6527 - C6528) * C47206 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C48497) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C47225 +
             (C3968 - C3967 + C3970 - C3969) * C48439 +
             (C3972 - C3971 + C3974 - C3973) * C47206 +
             (C3976 - C3975 + C3978 - C3977) * C48112) *
                C14987 +
            ((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48439 +
             (C6296 - C6295 + C6298 - C6297) * C47206 +
             (C6300 - C6299 + C6302 - C6301) * C48112) *
                C14988 +
            ((C18466 - C18465 + C18468 - C18467) * C47225 +
             (C18470 - C18469 + C18472 - C18471) * C48439 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C47206 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48112) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C381 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C381 +
           ((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
             C11396) *
                C47225 +
            (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
             C11404) *
                C48439 +
            (C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C47206 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C381 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C381 +
           ((C4118 - C4117 + C4120 - C4119) * C3784 +
            (C4122 - C4121 + C4124 - C4123) * C3778 +
            (C4126 - C4125 + C4128 - C4127) * C3785 +
            (C4130 - C4129 + C4132 - C4131) * C3779 +
            (C4134 - C4133 + C4136 - C4135) * C3786 +
            (C4138 - C4137 + C4140 - C4139) * C3780 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C3787 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
             C18684 * C48112) *
                C48497) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C47225 +
             (C6502 - C6501 + C6504 - C6503) * C48439 + C6535 * C47206 +
             C6536 * C48112) *
                C14987 +
            ((C7615 - C7616 + C7617 - C7618) * C47225 +
             (C7619 - C7620 + C7621 - C7622) * C48439 + C18685 * C47206 +
             C18686 * C48112) *
                C14988 +
            ((C3782 * C2781 - C48461 * C2785 + C3783 * C3227 - C48262 * C3230) *
                 C47225 +
             (C3782 * C2786 - C48461 * C2793 + C3783 * C3231 - C48262 * C3236) *
                 C48439 +
             (C18675 - C18676 + C18677 - C18678) * C47206 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C47225 +
             (C3794 - C3793 + C3796 - C3795) * C48439 +
             (C3798 - C3797 + C3800 - C3799) * C47206 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C14987 +
            (C6535 * C47225 + C6536 * C48439 + C6537 * C47206 +
             C6538 * C48112) *
                C14988 +
            (C18685 * C47225 + C18686 * C48439 +
             (C6525 - C6526 + C6527 - C6528) * C47206 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C48497) *
               C381 +
           ((C6533 * C47225 + C6534 * C48439 + C6091 * C47206 +
             C6092 * C48112) *
                C14987 +
            (C18683 * C47225 + C18684 * C48439 +
             (C6526 - C6525 + C6528 - C6527) * C47206 +
             (C6530 - C6529 + C6532 - C6531) * C48112) *
                C14988 +
            ((C18676 - C18675 + C18678 - C18677) * C47225 +
             (C18680 - C18679 + C18682 - C18681) * C48439 +
             (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                 C47206 +
             (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                 C48112) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
             C11250) *
                C47225 +
            (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
             C11258) *
                C48439 +
            (C11069 * C269 - C11075 * C261 + C11070 * C584 - C11076 * C577 +
             C11071 * C1270 - C11077 * C1264 + C48504 * C1751 -
             C11078 * C1746) *
                C47206 +
            (C11069 * C279 - C11075 * C270 + C11070 * C592 - C11076 * C585 +
             C11071 * C1276 - C11077 * C1271 + C48504 * C1755 -
             C11078 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C48188 * C505 +
           ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C48188 * C505 +
           ((C3964 - C3963 + C3966 - C3965) * C3784 +
            (C3968 - C3967 + C3970 - C3969) * C3778 +
            (C3972 - C3971 + C3974 - C3973) * C3785 +
            (C3976 - C3975 + C3978 - C3977) * C3779 +
            (C3980 - C3979 + C3982 - C3981) * C3786 +
            (C3984 - C3983 + C3986 - C3985) * C3780 +
            (C48461 * C273 - C3782 * C263 + C48262 * C588 - C3783 * C579) *
                C3787 +
            (C48461 * C281 - C3782 * C274 + C48262 * C594 - C3783 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
             C18684 * C48112) *
                C48497) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47225 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48439 +
             (C3963 - C3964 + C3965 - C3966) * C47206 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C14987 +
            ((C7073 - C7074 + C7075 - C7076) * C47225 +
             (C7077 - C7078 + C7079 - C7080) * C48439 +
             (C6287 - C6288 + C6289 - C6290) * C47206 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C14988 +
            ((C3782 * C2316 - C48461 * C2322 + C3783 * C2317 - C48262 * C2323) *
                 C47225 +
             (C3782 * C2324 - C48461 * C2334 + C3783 * C2325 - C48262 * C2335) *
                 C48439 +
             (C18465 - C18466 + C18467 - C18468) * C47206 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C47225 +
             (C3794 - C3793 + C3796 - C3795) * C48439 +
             (C3798 - C3797 + C3800 - C3799) * C47206 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C14987 +
            (C6535 * C47225 + C6536 * C48439 + C6537 * C47206 +
             C6538 * C48112) *
                C14988 +
            (C18685 * C47225 + C18686 * C48439 +
             (C6525 - C6526 + C6527 - C6528) * C47206 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C48497) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C47225 +
             (C3968 - C3967 + C3970 - C3969) * C48439 +
             (C3972 - C3971 + C3974 - C3973) * C47206 +
             (C3976 - C3975 + C3978 - C3977) * C48112) *
                C14987 +
            ((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48439 +
             (C6296 - C6295 + C6298 - C6297) * C47206 +
             (C6300 - C6299 + C6302 - C6301) * C48112) *
                C14988 +
            ((C18466 - C18465 + C18468 - C18467) * C47225 +
             (C18470 - C18469 + C18472 - C18471) * C48439 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C47206 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48112) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C48188 * C571 +
          ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
            C11077 * C1262 - C11071 * C1266 + C11078 * C1744 - C48504 * C1747) *
               C47225 +
           (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
            C11077 * C1267 - C11071 * C1274 + C11078 * C1748 - C48504 * C1753) *
               C48439 +
           (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
            C11251) *
               C47206 +
           (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
            C11259) *
               C48112) *
              C48217 * C48188 * C572 +
          ((C11069 * C580 - C11075 * C575 + C11070 * C1266 - C11076 * C1262 +
            C11071 * C1747 - C11077 * C1744 + C48504 * C9092 - C11078 * C9090) *
               C47225 +
           (C11069 * C590 - C11075 * C581 + C11070 * C1274 - C11076 * C1267 +
            C11071 * C1753 - C11077 * C1748 + C48504 * C9096 - C11078 * C9093) *
               C48439 +
           (C11069 * C582 - C11075 * C576 + C11070 * C1268 - C11076 * C1263 +
            C11071 * C1749 - C11077 * C1745 + C48504 * C9094 - C11078 * C9091) *
               C47206 +
           (C11069 * C591 - C11075 * C583 + C11070 * C1275 - C11076 * C1269 +
            C11071 * C1754 - C11077 * C1750 + C48504 * C9097 - C11078 * C9095) *
               C48112) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C48188 * C571 +
          ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
               C3784 +
           (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
               C3778 +
           (C3963 - C3964 + C3965 - C3966) * C3785 +
           (C3967 - C3968 + C3969 - C3970) * C3779 +
           (C3971 - C3972 + C3973 - C3974) * C3786 +
           (C3975 - C3976 + C3977 - C3978) * C3780 +
           (C3979 - C3980 + C3981 - C3982) * C3787 +
           (C3983 - C3984 + C3985 - C3986) * C48498) *
              C48217 * C48188 * C572 +
          ((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
               C3784 +
           (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
               C3778 +
           (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
               C3785 +
           (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
               C3779 +
           (C48461 * C584 - C3782 * C577 + C48262 * C1270 - C3783 * C1264) *
               C3786 +
           (C48461 * C592 - C3782 * C585 + C48262 * C1276 - C3783 * C1271) *
               C3780 +
           (C48461 * C586 - C3782 * C578 + C48262 * C1272 - C3783 * C1265) *
               C3787 +
           (C48461 * C593 - C3782 * C587 + C48262 * C1277 - C3783 * C1273) *
               C48498) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47225 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48439 +
            (C3789 - C3790 + C3791 - C3792) * C47206 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C14987 +
           ((C6497 - C6498 + C6499 - C6500) * C47225 +
            (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
            C6534 * C48112) *
               C14988 +
           ((C7616 - C7615 + C7618 - C7617) * C47225 +
            (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
            C18684 * C48112) *
               C48497) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C47225 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C48439 +
            (C3963 - C3964 + C3965 - C3966) * C47206 +
            (C3967 - C3968 + C3969 - C3970) * C48112) *
               C14987 +
           ((C7073 - C7074 + C7075 - C7076) * C47225 +
            (C7077 - C7078 + C7079 - C7080) * C48439 +
            (C6287 - C6288 + C6289 - C6290) * C47206 +
            (C6291 - C6292 + C6293 - C6294) * C48112) *
               C14988 +
           ((C3782 * C2316 - C48461 * C2322 + C3783 * C2317 - C48262 * C2323) *
                C47225 +
            (C3782 * C2324 - C48461 * C2334 + C3783 * C2325 - C48262 * C2335) *
                C48439 +
            (C18465 - C18466 + C18467 - C18468) * C47206 +
            (C18469 - C18470 + C18471 - C18472) * C48112) *
               C48497) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C47225 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C48439 +
            (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
                C47206 +
            (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
                C48112) *
               C14987 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C47225 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C48439 +
            (C48461 * C1454 - C3782 * C1449 + C48262 * C1907 - C3783 * C1903) *
                C47206 +
            (C48461 * C1461 - C3782 * C1455 + C48262 * C1912 - C3783 * C1908) *
                C48112) *
               C14988 +
           ((C48461 * C2323 - C3782 * C2317 + C48262 * C9650 - C3783 * C9648) *
                C47225 +
            (C48461 * C2335 - C3782 * C2325 + C48262 * C9654 - C3783 * C9652) *
                C48439 +
            (C48461 * C2327 - C3782 * C2319 + C48262 * C9913 - C3783 * C9912) *
                C47206 +
            (C48461 * C2337 - C3782 * C2329 + C48262 * C9915 - C3783 * C9914) *
                C48112) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C381 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C505 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C381 +
           ((C11069 * C682 - C11075 * C677 + C11070 * C1452 - C11076 * C1448 +
             C11071 * C1905 - C11077 * C1902 + C48504 * C9182 -
             C11078 * C9180) *
                C47225 +
            (C11069 * C692 - C11075 * C683 + C11070 * C1460 - C11076 * C1453 +
             C11071 * C1911 - C11077 * C1906 + C48504 * C9186 -
             C11078 * C9183) *
                C48439 +
            (C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
             C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
             C11078 * C9181) *
                C47206 +
            (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
             C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
             C11078 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C381 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C505 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C381 +
           ((C48461 * C682 - C3782 * C677 + C48262 * C1452 - C3783 * C1448) *
                C3784 +
            (C48461 * C692 - C3782 * C683 + C48262 * C1460 - C3783 * C1453) *
                C3778 +
            (C48461 * C684 - C3782 * C678 + C48262 * C1454 - C3783 * C1449) *
                C3785 +
            (C48461 * C693 - C3782 * C685 + C48262 * C1461 - C3783 * C1455) *
                C3779 +
            (C48461 * C686 - C3782 * C679 + C48262 * C1456 - C3783 * C1450) *
                C3786 +
            (C48461 * C694 - C3782 * C687 + C48262 * C1462 - C3783 * C1457) *
                C3780 +
            (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                C3787 +
            (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
             C18684 * C48112) *
                C48497) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C47225 +
             (C6502 - C6501 + C6504 - C6503) * C48439 + C6535 * C47206 +
             C6536 * C48112) *
                C14987 +
            ((C7615 - C7616 + C7617 - C7618) * C47225 +
             (C7619 - C7620 + C7621 - C7622) * C48439 + C18685 * C47206 +
             C18686 * C48112) *
                C14988 +
            ((C3782 * C2781 - C48461 * C2785 + C3783 * C3227 - C48262 * C3230) *
                 C47225 +
             (C3782 * C2786 - C48461 * C2793 + C3783 * C3231 - C48262 * C3236) *
                 C48439 +
             (C18675 - C18676 + C18677 - C18678) * C47206 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C48497) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47225 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48439 +
             (C3963 - C3964 + C3965 - C3966) * C47206 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C14987 +
            ((C7073 - C7074 + C7075 - C7076) * C47225 +
             (C7077 - C7078 + C7079 - C7080) * C48439 +
             (C6287 - C6288 + C6289 - C6290) * C47206 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C14988 +
            ((C19221 - C19222 + C19223 - C19224) * C47225 +
             (C19225 - C19226 + C19227 - C19228) * C48439 +
             (C18465 - C18466 + C18467 - C18468) * C47206 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C48497) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C47225 +
             (C7078 - C7077 + C7080 - C7079) * C48439 +
             (C6288 - C6287 + C6290 - C6289) * C47206 +
             (C6292 - C6291 + C6294 - C6293) * C48112) *
                C14987 +
            ((C19222 - C19221 + C19224 - C19223) * C47225 +
             (C19226 - C19225 + C19228 - C19227) * C48439 +
             (C18466 - C18465 + C18468 - C18467) * C47206 +
             (C18470 - C18469 + C18472 - C18471) * C48112) *
                C14988 +
            ((C48461 * C3230 - C3782 * C3227 + C48262 * C10064 -
              C3783 * C10062) *
                 C47225 +
             (C48461 * C3236 - C3782 * C3231 + C48262 * C10068 -
              C3783 * C10065) *
                 C48439 +
             (C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C47206 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48112) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C779 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C779 +
           ((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
             C11396) *
                C47225 +
            (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
             C11404) *
                C48439 +
            (C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C47206 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C779 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C779 +
           ((C4118 - C4117 + C4120 - C4119) * C3784 +
            (C4122 - C4121 + C4124 - C4123) * C3778 +
            (C4126 - C4125 + C4128 - C4127) * C3785 +
            (C4130 - C4129 + C4132 - C4131) * C3779 +
            (C4134 - C4133 + C4136 - C4135) * C3786 +
            (C4138 - C4137 + C4140 - C4139) * C3780 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C3787 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
             C18684 * C48112) *
                C48497) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C47225 +
             (C6502 - C6501 + C6504 - C6503) * C48439 + C6535 * C47206 +
             C6536 * C48112) *
                C14987 +
            ((C7615 - C7616 + C7617 - C7618) * C47225 +
             (C7619 - C7620 + C7621 - C7622) * C48439 + C18685 * C47206 +
             C18686 * C48112) *
                C14988 +
            ((C3782 * C2781 - C48461 * C2785 + C3783 * C3227 - C48262 * C3230) *
                 C47225 +
             (C3782 * C2786 - C48461 * C2793 + C3783 * C3231 - C48262 * C3236) *
                 C48439 +
             (C18675 - C18676 + C18677 - C18678) * C47206 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C47225 +
             (C3794 - C3793 + C3796 - C3795) * C48439 +
             (C3798 - C3797 + C3800 - C3799) * C47206 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C14987 +
            (C6535 * C47225 + C6536 * C48439 + C6537 * C47206 +
             C6538 * C48112) *
                C14988 +
            (C18685 * C47225 + C18686 * C48439 +
             (C6525 - C6526 + C6527 - C6528) * C47206 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C48497) *
               C779 +
           ((C6533 * C47225 + C6534 * C48439 + C6091 * C47206 +
             C6092 * C48112) *
                C14987 +
            (C18683 * C47225 + C18684 * C48439 +
             (C6526 - C6525 + C6528 - C6527) * C47206 +
             (C6530 - C6529 + C6532 - C6531) * C48112) *
                C14988 +
            ((C18676 - C18675 + C18678 - C18677) * C47225 +
             (C18680 - C18679 + C18682 - C18681) * C48439 +
             (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                 C47206 +
             (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                 C48112) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C779 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C255 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C779 +
           ((C11069 * C682 - C11075 * C677 + C11070 * C1452 - C11076 * C1448 +
             C11071 * C1905 - C11077 * C1902 + C48504 * C9182 -
             C11078 * C9180) *
                C47225 +
            (C11069 * C692 - C11075 * C683 + C11070 * C1460 - C11076 * C1453 +
             C11071 * C1911 - C11077 * C1906 + C48504 * C9186 -
             C11078 * C9183) *
                C48439 +
            (C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
             C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
             C11078 * C9181) *
                C47206 +
            (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
             C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
             C11078 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C779 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C255 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C779 +
           ((C48461 * C682 - C3782 * C677 + C48262 * C1452 - C3783 * C1448) *
                C3784 +
            (C48461 * C692 - C3782 * C683 + C48262 * C1460 - C3783 * C1453) *
                C3778 +
            (C48461 * C684 - C3782 * C678 + C48262 * C1454 - C3783 * C1449) *
                C3785 +
            (C48461 * C693 - C3782 * C685 + C48262 * C1461 - C3783 * C1455) *
                C3779 +
            (C48461 * C686 - C3782 * C679 + C48262 * C1456 - C3783 * C1450) *
                C3786 +
            (C48461 * C694 - C3782 * C687 + C48262 * C1462 - C3783 * C1457) *
                C3780 +
            (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                C3787 +
            (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47225 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48439 +
             (C3789 - C3790 + C3791 - C3792) * C47206 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C14987 +
            ((C6497 - C6498 + C6499 - C6500) * C47225 +
             (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
             C6534 * C48112) *
                C14988 +
            ((C7616 - C7615 + C7618 - C7617) * C47225 +
             (C7620 - C7619 + C7622 - C7621) * C48439 + C18683 * C47206 +
             C18684 * C48112) *
                C48497) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C47225 +
             (C6502 - C6501 + C6504 - C6503) * C48439 + C6535 * C47206 +
             C6536 * C48112) *
                C14987 +
            ((C7615 - C7616 + C7617 - C7618) * C47225 +
             (C7619 - C7620 + C7621 - C7622) * C48439 + C18685 * C47206 +
             C18686 * C48112) *
                C14988 +
            ((C3782 * C2781 - C48461 * C2785 + C3783 * C3227 - C48262 * C3230) *
                 C47225 +
             (C3782 * C2786 - C48461 * C2793 + C3783 * C3231 - C48262 * C3236) *
                 C48439 +
             (C18675 - C18676 + C18677 - C18678) * C47206 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C48497) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47225 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48439 +
             (C3963 - C3964 + C3965 - C3966) * C47206 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C14987 +
            ((C7073 - C7074 + C7075 - C7076) * C47225 +
             (C7077 - C7078 + C7079 - C7080) * C48439 +
             (C6287 - C6288 + C6289 - C6290) * C47206 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C14988 +
            ((C19221 - C19222 + C19223 - C19224) * C47225 +
             (C19225 - C19226 + C19227 - C19228) * C48439 +
             (C18465 - C18466 + C18467 - C18468) * C47206 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C48497) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C47225 +
             (C7078 - C7077 + C7080 - C7079) * C48439 +
             (C6288 - C6287 + C6290 - C6289) * C47206 +
             (C6292 - C6291 + C6294 - C6293) * C48112) *
                C14987 +
            ((C19222 - C19221 + C19224 - C19223) * C47225 +
             (C19226 - C19225 + C19228 - C19227) * C48439 +
             (C18466 - C18465 + C18468 - C18467) * C47206 +
             (C18470 - C18469 + C18472 - C18471) * C48112) *
                C14988 +
            ((C48461 * C3230 - C3782 * C3227 + C48262 * C10064 -
              C3783 * C10062) *
                 C47225 +
             (C48461 * C3236 - C3782 * C3231 + C48262 * C10068 -
              C3783 * C10065) *
                 C48439 +
             (C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C47206 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48112) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C925 +
          ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
            C11077 * C1448 - C11071 * C1452 + C11078 * C1902 - C48504 * C1905) *
               C47225 +
           (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
            C11077 * C1453 - C11071 * C1460 + C11078 * C1906 - C48504 * C1911) *
               C48439 +
           (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
            C11397) *
               C47206 +
           (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
            C11405) *
               C48112) *
              C48217 * C926 +
          ((C11069 * C933 - C11075 * C928 + C11070 * C2322 - C11076 * C2316 +
            C11071 * C2323 - C11077 * C2317 + C48504 * C9650 - C11078 * C9648) *
               C47225 +
           (C11069 * C943 - C11075 * C934 + C11070 * C2334 - C11076 * C2324 +
            C11071 * C2335 - C11077 * C2325 + C48504 * C9654 - C11078 * C9652) *
               C48439 +
           (C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
            C11071 * C2327 - C11077 * C2319 + C48504 * C9913 - C11078 * C9912) *
               C47206 +
           (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
            C11071 * C2337 - C11077 * C2329 + C48504 * C9915 - C11078 * C9914) *
               C48112) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C925 +
          ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
               C3784 +
           (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
               C3778 +
           (C4117 - C4118 + C4119 - C4120) * C3785 +
           (C4121 - C4122 + C4123 - C4124) * C3779 +
           (C4125 - C4126 + C4127 - C4128) * C3786 +
           (C4129 - C4130 + C4131 - C4132) * C3780 +
           (C4133 - C4134 + C4135 - C4136) * C3787 +
           (C4137 - C4138 + C4139 - C4140) * C48498) *
              C48217 * C926 +
          ((C48461 * C933 - C3782 * C928 + C48262 * C2322 - C3783 * C2316) *
               C3784 +
           (C48461 * C943 - C3782 * C934 + C48262 * C2334 - C3783 * C2324) *
               C3778 +
           (C48461 * C935 - C3782 * C929 + C48262 * C2326 - C3783 * C2318) *
               C3785 +
           (C48461 * C944 - C3782 * C936 + C48262 * C2336 - C3783 * C2328) *
               C3779 +
           (C48461 * C937 - C3782 * C930 + C48262 * C2330 - C3783 * C2320) *
               C3786 +
           (C48461 * C945 - C3782 * C938 + C48262 * C2338 - C3783 * C2332) *
               C3780 +
           (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
               C3787 +
           (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
               C48498) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47225 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48439 +
            (C3789 - C3790 + C3791 - C3792) * C47206 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C14987 +
           ((C6497 - C6498 + C6499 - C6500) * C47225 +
            (C6501 - C6502 + C6503 - C6504) * C48439 + C6533 * C47206 +
            C6534 * C48112) *
               C14988 +
           C19783 * C48497) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C47225 +
            (C6502 - C6501 + C6504 - C6503) * C48439 + C6535 * C47206 +
            C6536 * C48112) *
               C14987 +
           ((C7615 - C7616 + C7617 - C7618) * C47225 +
            (C7619 - C7620 + C7621 - C7622) * C48439 + C18685 * C47206 +
            C18686 * C48112) *
               C14988 +
           ((C19769 - C19770 + C19771 - C19772) * C47225 +
            (C19773 - C19774 + C19775 - C19776) * C48439 +
            (C18675 - C18676 + C18677 - C18678) * C47206 +
            (C18679 - C18680 + C18681 - C18682) * C48112) *
               C48497) *
              C926 +
          (C19783 * C14987 +
           ((C19770 - C19769 + C19772 - C19771) * C47225 +
            (C19774 - C19773 + C19776 - C19775) * C48439 +
            (C18676 - C18675 + C18678 - C18677) * C47206 +
            (C18680 - C18679 + C18682 - C18681) * C48112) *
               C14988 +
           ((C48461 * C3652 - C3782 * C3649 + C48262 * C10940 -
             C3783 * C10938) *
                C47225 +
            (C48461 * C3658 - C3782 * C3653 + C48262 * C10944 -
             C3783 * C10942) *
                C48439 +
            (C48461 * C3654 - C3782 * C3650 + C48262 * C17538 -
             C3783 * C17537) *
                C47206 +
            (C48461 * C3659 - C3782 * C3655 + C48262 * C17540 -
             C3783 * C17539) *
                C48112) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C11069 * C389 - C11075 * C383 + C11070 * C682 - C11076 * C677 +
             C11071 * C1452 - C11077 * C1448 + C48504 * C1905 -
             C11078 * C1902) *
                C9007 +
            (C11069 * C401 - C11075 * C390 + C11070 * C692 - C11076 * C683 +
             C11071 * C1460 - C11077 * C1453 + C48504 * C1911 -
             C11078 * C1906) *
                C48102) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C9007 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48102) *
               C48462 +
           ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C9007 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48102) *
               C48304) *
              C48188 * C48171 * C111 +
          (((C11099 - C11098 + C11101 - C11100 + C11103 - C11102 + C11105 -
             C11104) *
                C9007 +
            (C11107 - C11106 + C11109 - C11108 + C11111 - C11110 + C11113 -
             C11112) *
                C48102) *
               C48462 +
           ((C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C9007 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48102) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C48461 * C389 - C3782 * C383 + C48262 * C682 - C3783 * C677) *
                C1067 +
            (C48461 * C401 - C3782 * C390 + C48262 * C692 - C3783 * C683) *
                C1061 +
            (C4118 - C4117 + C4120 - C4119) * C1068 +
            (C4122 - C4121 + C4124 - C4123) * C1062 + C6091 * C1069 +
            C6092 * C48481) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C1067 +
            (C3794 - C3793 + C3796 - C3795) * C1061 +
            (C3798 - C3797 + C3800 - C3799) * C1068 +
            (C3802 - C3801 + C3804 - C3803) * C1062 +
            (C3806 - C3805 + C3808 - C3807) * C1069 +
            (C3810 - C3809 + C3812 - C3811) * C48481) *
               C48462 +
           ((C4117 - C4118 + C4119 - C4120) * C1067 +
            (C4121 - C4122 + C4123 - C4124) * C1061 +
            (C4125 - C4126 + C4127 - C4128) * C1068 +
            (C4129 - C4130 + C4131 - C4132) * C1062 +
            (C4133 - C4134 + C4135 - C4136) * C1069 +
            (C4137 - C4138 + C4139 - C4140) * C48481) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C3829 * C1067 + C3830 * C1061 + C3831 * C1068 + C3832 * C1062 +
            (C3814 - C3813 + C3816 - C3815) * C1069 +
            (C3818 - C3817 + C3820 - C3819) * C48481) *
               C48462 +
           (C6091 * C1067 + C6092 * C1061 +
            (C4134 - C4133 + C4136 - C4135) * C1068 +
            (C4138 - C4137 + C4140 - C4139) * C1062 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C1069 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48481) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C9007 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48102) *
               C19881 +
           ((C6497 - C6498 + C6499 - C6500) * C9007 +
            (C6501 - C6502 + C6503 - C6504) * C48102) *
               C19882 +
           (C19777 * C9007 + C19778 * C48102) * C19883 +
           ((C19770 - C19769 + C19772 - C19771) * C9007 +
            (C19774 - C19773 + C19776 - C19775) * C48102) *
               C48510) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C9007 +
            (C3794 - C3793 + C3796 - C3795) * C48102) *
               C19881 +
           (C6535 * C9007 + C6536 * C48102) * C19882 +
           (C18685 * C9007 + C18686 * C48102) * C19883 +
           ((C18675 - C18676 + C18677 - C18678) * C9007 +
            (C18679 - C18680 + C18681 - C18682) * C48102) *
               C48510) *
              C48188 * C48171 * C111 +
          ((C3829 * C9007 + C3830 * C48102) * C19881 +
           (C6091 * C9007 + C6092 * C48102) * C19882 +
           ((C6526 - C6525 + C6528 - C6527) * C9007 +
            (C6530 - C6529 + C6532 - C6531) * C48102) *
               C19883 +
           ((C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                C9007 +
            (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                C48102) *
               C48510) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C11069 * C389 - C11075 * C383 + C11070 * C682 - C11076 * C677 +
              C11071 * C1452 - C11077 * C1448 + C48504 * C1905 -
              C11078 * C1902) *
                 C9007 +
             (C11069 * C401 - C11075 * C390 + C11070 * C692 - C11076 * C683 +
              C11071 * C1460 - C11077 * C1453 + C48504 * C1911 -
              C11078 * C1906) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
              C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
              C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
              C11250) *
                 C9007 +
             (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
              C11258) *
                 C48102) *
                C48462 +
            ((C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
              C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
              C11078 * C9181) *
                 C9007 +
             (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
              C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
              C11078 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C48461 * C389 - C3782 * C383 + C48262 * C682 - C3783 * C677) *
                 C1067 +
             (C48461 * C401 - C3782 * C390 + C48262 * C692 - C3783 * C683) *
                 C1061 +
             (C4118 - C4117 + C4120 - C4119) * C1068 +
             (C4122 - C4121 + C4124 - C4123) * C1062 + C6091 * C1069 +
             C6092 * C48481) *
                C48304) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                 C1067 +
             (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                 C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            ((C4117 - C4118 + C4119 - C4120) * C1067 +
             (C4121 - C4122 + C4123 - C4124) * C1061 +
             (C4125 - C4126 + C4127 - C4128) * C1068 +
             (C4129 - C4130 + C4131 - C4132) * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C1067 +
             (C3968 - C3967 + C3970 - C3969) * C1061 +
             (C3972 - C3971 + C3974 - C3973) * C1068 +
             (C3976 - C3975 + C3978 - C3977) * C1062 +
             (C3980 - C3979 + C3982 - C3981) * C1069 +
             (C3984 - C3983 + C3986 - C3985) * C48481) *
                C48462 +
            ((C6288 - C6287 + C6290 - C6289) * C1067 +
             (C6292 - C6291 + C6294 - C6293) * C1061 +
             (C6296 - C6295 + C6298 - C6297) * C1068 +
             (C6300 - C6299 + C6302 - C6301) * C1062 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C1069 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C9007 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48102) *
                C19881 +
            ((C7073 - C7074 + C7075 - C7076) * C9007 +
             (C7077 - C7078 + C7079 - C7080) * C48102) *
                C19882 +
            ((C19221 - C19222 + C19223 - C19224) * C9007 +
             (C19225 - C19226 + C19227 - C19228) * C48102) *
                C19883 +
            ((C3782 * C3227 - C48461 * C3230 + C3783 * C10062 -
              C48262 * C10064) *
                 C9007 +
             (C3782 * C3231 - C48461 * C3236 + C3783 * C10065 -
              C48262 * C10068) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C9007 +
             (C3794 - C3793 + C3796 - C3795) * C48102) *
                C19881 +
            (C6535 * C9007 + C6536 * C48102) * C19882 +
            (C18685 * C9007 + C18686 * C48102) * C19883 +
            ((C18675 - C18676 + C18677 - C18678) * C9007 +
             (C18679 - C18680 + C18681 - C18682) * C48102) *
                C48510) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C9007 +
             (C3968 - C3967 + C3970 - C3969) * C48102) *
                C19881 +
            ((C6288 - C6287 + C6290 - C6289) * C9007 +
             (C6292 - C6291 + C6294 - C6293) * C48102) *
                C19882 +
            ((C18466 - C18465 + C18468 - C18467) * C9007 +
             (C18470 - C18469 + C18472 - C18471) * C48102) *
                C19883 +
            ((C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C9007 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C381 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C381 +
           (((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
              C11396) *
                 C9007 +
             (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
              C11404) *
                 C48102) *
                C48462 +
            ((C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
              C11071 * C2327 - C11077 * C2319 + C48504 * C9913 -
              C11078 * C9912) *
                 C9007 +
             (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
              C11071 * C2337 - C11077 * C2329 + C48504 * C9915 -
              C11078 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C381 +
           ((C6533 * C1067 + C6534 * C1061 + C6091 * C1068 + C6092 * C1062 +
             (C4134 - C4133 + C4136 - C4135) * C1069 +
             (C4138 - C4137 + C4140 - C4139) * C48481) *
                C48462 +
            ((C6518 - C6517 + C6520 - C6519) * C1067 +
             (C6522 - C6521 + C6524 - C6523) * C1061 +
             (C6526 - C6525 + C6528 - C6527) * C1068 +
             (C6530 - C6529 + C6532 - C6531) * C1062 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C1069 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C9007 +
             (C6502 - C6501 + C6504 - C6503) * C48102) *
                C19881 +
            ((C7615 - C7616 + C7617 - C7618) * C9007 +
             (C7619 - C7620 + C7621 - C7622) * C48102) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C9007 +
             (C19773 - C19774 + C19775 - C19776) * C48102) *
                C19883 +
            ((C3782 * C3649 - C48461 * C3652 + C3783 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C3782 * C3653 - C48461 * C3658 + C3783 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C9007 +
             (C3794 - C3793 + C3796 - C3795) * C48102) *
                C19881 +
            (C6535 * C9007 + C6536 * C48102) * C19882 +
            (C18685 * C9007 + C18686 * C48102) * C19883 +
            ((C18675 - C18676 + C18677 - C18678) * C9007 +
             (C18679 - C18680 + C18681 - C18682) * C48102) *
                C48510) *
               C381 +
           ((C6533 * C9007 + C6534 * C48102) * C19881 +
            (C18683 * C9007 + C18684 * C48102) * C19882 +
            ((C18676 - C18675 + C18678 - C18677) * C9007 +
             (C18680 - C18679 + C18682 - C18681) * C48102) *
                C19883 +
            ((C48461 * C3654 - C3782 * C3650 + C48262 * C17538 -
              C3783 * C17537) *
                 C9007 +
             (C48461 * C3659 - C3782 * C3655 + C48262 * C17540 -
              C3783 * C17539) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
              C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
              C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
              C11250) *
                 C9007 +
             (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
              C11258) *
                 C48102) *
                C48462 +
            ((C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
              C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
              C11078 * C9181) *
                 C9007 +
             (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
              C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
              C11078 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                 C1067 +
             (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                 C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C1067 +
             (C3968 - C3967 + C3970 - C3969) * C1061 +
             (C3972 - C3971 + C3974 - C3973) * C1068 +
             (C3976 - C3975 + C3978 - C3977) * C1062 +
             (C3980 - C3979 + C3982 - C3981) * C1069 +
             (C3984 - C3983 + C3986 - C3985) * C48481) *
                C48462 +
            ((C6288 - C6287 + C6290 - C6289) * C1067 +
             (C6292 - C6291 + C6294 - C6293) * C1061 +
             (C6296 - C6295 + C6298 - C6297) * C1068 +
             (C6300 - C6299 + C6302 - C6301) * C1062 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C1069 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C9007 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48102) *
                C19881 +
            ((C7073 - C7074 + C7075 - C7076) * C9007 +
             (C7077 - C7078 + C7079 - C7080) * C48102) *
                C19882 +
            ((C19221 - C19222 + C19223 - C19224) * C9007 +
             (C19225 - C19226 + C19227 - C19228) * C48102) *
                C19883 +
            ((C3782 * C3227 - C48461 * C3230 + C3783 * C10062 -
              C48262 * C10064) *
                 C9007 +
             (C3782 * C3231 - C48461 * C3236 + C3783 * C10065 -
              C48262 * C10068) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C9007 +
             (C3794 - C3793 + C3796 - C3795) * C48102) *
                C19881 +
            (C6535 * C9007 + C6536 * C48102) * C19882 +
            (C18685 * C9007 + C18686 * C48102) * C19883 +
            ((C18675 - C18676 + C18677 - C18678) * C9007 +
             (C18679 - C18680 + C18681 - C18682) * C48102) *
                C48510) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C9007 +
             (C3968 - C3967 + C3970 - C3969) * C48102) *
                C19881 +
            ((C6288 - C6287 + C6290 - C6289) * C9007 +
             (C6292 - C6291 + C6294 - C6293) * C48102) *
                C19882 +
            ((C18466 - C18465 + C18468 - C18467) * C9007 +
             (C18470 - C18469 + C18472 - C18471) * C48102) *
                C19883 +
            ((C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C9007 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48102) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
             C14121) *
                C9007 +
            (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
             C14129) *
                C48102) *
               C48304) *
              C48188 * C571 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C9007 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48102) *
               C48462 +
           ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
             C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
             C48504 * C9182) *
                C9007 +
            (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
             C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
             C48504 * C9186) *
                C48102) *
               C48304) *
              C48188 * C572 +
          (((C11069 * C580 - C11075 * C575 + C11070 * C1266 - C11076 * C1262 +
             C11071 * C1747 - C11077 * C1744 + C48504 * C9092 -
             C11078 * C9090) *
                C9007 +
            (C11069 * C590 - C11075 * C581 + C11070 * C1274 - C11076 * C1267 +
             C11071 * C1753 - C11077 * C1748 + C48504 * C9096 -
             C11078 * C9093) *
                C48102) *
               C48462 +
           ((C11069 * C1452 - C11075 * C1448 + C11070 * C1905 - C11076 * C1902 +
             C11071 * C9182 - C11077 * C9180 + C48504 * C9419 -
             C11078 * C9418) *
                C9007 +
            (C11069 * C1460 - C11075 * C1453 + C11070 * C1911 - C11076 * C1906 +
             C11071 * C9186 - C11077 * C9183 + C48504 * C9421 -
             C11078 * C9420) *
                C48102) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C6497 - C6498 + C6499 - C6500) * C1067 +
            (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
            C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
               C48304) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C1067 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C1061 +
            (C3963 - C3964 + C3965 - C3966) * C1068 +
            (C3967 - C3968 + C3969 - C3970) * C1062 +
            (C3971 - C3972 + C3973 - C3974) * C1069 +
            (C3975 - C3976 + C3977 - C3978) * C48481) *
               C48462 +
           ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                C1067 +
            (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                C1061 +
            (C6287 - C6288 + C6289 - C6290) * C1068 +
            (C6291 - C6292 + C6293 - C6294) * C1062 +
            (C6295 - C6296 + C6297 - C6298) * C1069 +
            (C6299 - C6300 + C6301 - C6302) * C48481) *
               C48304) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C1067 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C1061 +
            (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
                C1068 +
            (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
                C1062 +
            (C48461 * C584 - C3782 * C577 + C48262 * C1270 - C3783 * C1264) *
                C1069 +
            (C48461 * C592 - C3782 * C585 + C48262 * C1276 - C3783 * C1271) *
                C48481) *
               C48462 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C1067 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C1061 +
            (C48461 * C1454 - C3782 * C1449 + C48262 * C1907 - C3783 * C1903) *
                C1068 +
            (C48461 * C1461 - C3782 * C1455 + C48262 * C1912 - C3783 * C1908) *
                C1062 +
            (C48461 * C1456 - C3782 * C1450 + C48262 * C1909 - C3783 * C1904) *
                C1069 +
            (C48461 * C1462 - C3782 * C1457 + C48262 * C1913 - C3783 * C1910) *
                C48481) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C9007 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48102) *
               C19881 +
           ((C6497 - C6498 + C6499 - C6500) * C9007 +
            (C6501 - C6502 + C6503 - C6504) * C48102) *
               C19882 +
           (C19777 * C9007 + C19778 * C48102) * C19883 +
           ((C19770 - C19769 + C19772 - C19771) * C9007 +
            (C19774 - C19773 + C19776 - C19775) * C48102) *
               C48510) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C9007 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C48102) *
               C19881 +
           ((C7073 - C7074 + C7075 - C7076) * C9007 +
            (C7077 - C7078 + C7079 - C7080) * C48102) *
               C19882 +
           ((C19221 - C19222 + C19223 - C19224) * C9007 +
            (C19225 - C19226 + C19227 - C19228) * C48102) *
               C19883 +
           ((C3782 * C3227 - C48461 * C3230 + C3783 * C10062 -
             C48262 * C10064) *
                C9007 +
            (C3782 * C3231 - C48461 * C3236 + C3783 * C10065 -
             C48262 * C10068) *
                C48102) *
               C48510) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C9007 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C48102) *
               C19881 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C9007 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C48102) *
               C19882 +
           ((C48461 * C2323 - C3782 * C2317 + C48262 * C9650 - C3783 * C9648) *
                C9007 +
            (C48461 * C2335 - C3782 * C2325 + C48262 * C9654 - C3783 * C9652) *
                C48102) *
               C19883 +
           ((C48461 * C10064 - C3782 * C10062 + C48262 * C10509 -
             C3783 * C10508) *
                C9007 +
            (C48461 * C10068 - C3782 * C10065 + C48262 * C10511 -
             C3783 * C10510) *
                C48102) *
               C48510) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C381 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C505 +
          ((((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C14488 - C14489 + C14490 - C14491 + C14492 - C14493 + C14494 -
              C14495) *
                 C9007 +
             (C14496 - C14497 + C14498 - C14499 + C14500 - C14501 + C14502 -
              C14503) *
                 C48102) *
                C48304) *
               C381 +
           (((C14489 - C14488 + C14491 - C14490 + C14493 - C14492 + C14495 -
              C14494) *
                 C9007 +
             (C14497 - C14496 + C14499 - C14498 + C14501 - C14500 + C14503 -
              C14502) *
                 C48102) *
                C48462 +
            ((C11069 * C2322 - C11075 * C2316 + C11070 * C2323 -
              C11076 * C2317 + C11071 * C9650 - C11077 * C9648 +
              C48504 * C9651 - C11078 * C9649) *
                 C9007 +
             (C11069 * C2334 - C11075 * C2324 + C11070 * C2335 -
              C11076 * C2325 + C11071 * C9654 - C11077 * C9652 +
              C48504 * C9655 - C11078 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C7073 - C7074 + C7075 - C7076) * C1067 +
             (C7077 - C7078 + C7079 - C7080) * C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C1067 +
             (C7078 - C7077 + C7080 - C7079) * C1061 +
             (C6288 - C6287 + C6290 - C6289) * C1068 +
             (C6292 - C6291 + C6294 - C6293) * C1062 +
             (C6296 - C6295 + C6298 - C6297) * C1069 +
             (C6300 - C6299 + C6302 - C6301) * C48481) *
                C48462 +
            ((C48461 * C2322 - C3782 * C2316 + C48262 * C2323 - C3783 * C2317) *
                 C1067 +
             (C48461 * C2334 - C3782 * C2324 + C48262 * C2335 - C3783 * C2325) *
                 C1061 +
             (C48461 * C2326 - C3782 * C2318 + C48262 * C2327 - C3783 * C2319) *
                 C1068 +
             (C48461 * C2336 - C3782 * C2328 + C48262 * C2337 - C3783 * C2329) *
                 C1062 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C1069 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C9007 +
             (C6502 - C6501 + C6504 - C6503) * C48102) *
                C19881 +
            ((C7615 - C7616 + C7617 - C7618) * C9007 +
             (C7619 - C7620 + C7621 - C7622) * C48102) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C9007 +
             (C19773 - C19774 + C19775 - C19776) * C48102) *
                C19883 +
            ((C3782 * C3649 - C48461 * C3652 + C3783 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C3782 * C3653 - C48461 * C3658 + C3783 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C9007 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48102) *
                C19881 +
            ((C7073 - C7074 + C7075 - C7076) * C9007 +
             (C7077 - C7078 + C7079 - C7080) * C48102) *
                C19882 +
            ((C19221 - C19222 + C19223 - C19224) * C9007 +
             (C19225 - C19226 + C19227 - C19228) * C48102) *
                C19883 +
            ((C21600 - C21601 + C21602 - C21603) * C9007 +
             (C21604 - C21605 + C21606 - C21607) * C48102) *
                C48510) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C9007 +
             (C7078 - C7077 + C7080 - C7079) * C48102) *
                C19881 +
            ((C19222 - C19221 + C19224 - C19223) * C9007 +
             (C19226 - C19225 + C19228 - C19227) * C48102) *
                C19882 +
            ((C21601 - C21600 + C21603 - C21602) * C9007 +
             (C21605 - C21604 + C21607 - C21606) * C48102) *
                C19883 +
            ((C48461 * C10940 - C3782 * C10938 + C48262 * C10941 -
              C3783 * C10939) *
                 C9007 +
             (C48461 * C10944 - C3782 * C10942 + C48262 * C10945 -
              C3783 * C10943) *
                 C48102) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C779 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C779 +
           (((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
              C11396) *
                 C9007 +
             (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
              C11404) *
                 C48102) *
                C48462 +
            ((C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
              C11071 * C2327 - C11077 * C2319 + C48504 * C9913 -
              C11078 * C9912) *
                 C9007 +
             (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
              C11071 * C2337 - C11077 * C2329 + C48504 * C9915 -
              C11078 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C779 +
           ((C6533 * C1067 + C6534 * C1061 + C6091 * C1068 + C6092 * C1062 +
             (C4134 - C4133 + C4136 - C4135) * C1069 +
             (C4138 - C4137 + C4140 - C4139) * C48481) *
                C48462 +
            ((C6518 - C6517 + C6520 - C6519) * C1067 +
             (C6522 - C6521 + C6524 - C6523) * C1061 +
             (C6526 - C6525 + C6528 - C6527) * C1068 +
             (C6530 - C6529 + C6532 - C6531) * C1062 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C1069 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C9007 +
             (C6502 - C6501 + C6504 - C6503) * C48102) *
                C19881 +
            ((C7615 - C7616 + C7617 - C7618) * C9007 +
             (C7619 - C7620 + C7621 - C7622) * C48102) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C9007 +
             (C19773 - C19774 + C19775 - C19776) * C48102) *
                C19883 +
            ((C3782 * C3649 - C48461 * C3652 + C3783 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C3782 * C3653 - C48461 * C3658 + C3783 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C9007 +
             (C3794 - C3793 + C3796 - C3795) * C48102) *
                C19881 +
            (C6535 * C9007 + C6536 * C48102) * C19882 +
            (C18685 * C9007 + C18686 * C48102) * C19883 +
            ((C18675 - C18676 + C18677 - C18678) * C9007 +
             (C18679 - C18680 + C18681 - C18682) * C48102) *
                C48510) *
               C779 +
           ((C6533 * C9007 + C6534 * C48102) * C19881 +
            (C18683 * C9007 + C18684 * C48102) * C19882 +
            ((C18676 - C18675 + C18678 - C18677) * C9007 +
             (C18680 - C18679 + C18682 - C18681) * C48102) *
                C19883 +
            ((C48461 * C3654 - C3782 * C3650 + C48262 * C17538 -
              C3783 * C17537) *
                 C9007 +
             (C48461 * C3659 - C3782 * C3655 + C48262 * C17540 -
              C3783 * C17539) *
                 C48102) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C779 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C255 +
          ((((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C14488 - C14489 + C14490 - C14491 + C14492 - C14493 + C14494 -
              C14495) *
                 C9007 +
             (C14496 - C14497 + C14498 - C14499 + C14500 - C14501 + C14502 -
              C14503) *
                 C48102) *
                C48304) *
               C779 +
           (((C14489 - C14488 + C14491 - C14490 + C14493 - C14492 + C14495 -
              C14494) *
                 C9007 +
             (C14497 - C14496 + C14499 - C14498 + C14501 - C14500 + C14503 -
              C14502) *
                 C48102) *
                C48462 +
            ((C11069 * C2322 - C11075 * C2316 + C11070 * C2323 -
              C11076 * C2317 + C11071 * C9650 - C11077 * C9648 +
              C48504 * C9651 - C11078 * C9649) *
                 C9007 +
             (C11069 * C2334 - C11075 * C2324 + C11070 * C2335 -
              C11076 * C2325 + C11071 * C9654 - C11077 * C9652 +
              C48504 * C9655 - C11078 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C7073 - C7074 + C7075 - C7076) * C1067 +
             (C7077 - C7078 + C7079 - C7080) * C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C1067 +
             (C7078 - C7077 + C7080 - C7079) * C1061 +
             (C6288 - C6287 + C6290 - C6289) * C1068 +
             (C6292 - C6291 + C6294 - C6293) * C1062 +
             (C6296 - C6295 + C6298 - C6297) * C1069 +
             (C6300 - C6299 + C6302 - C6301) * C48481) *
                C48462 +
            ((C48461 * C2322 - C3782 * C2316 + C48262 * C2323 - C3783 * C2317) *
                 C1067 +
             (C48461 * C2334 - C3782 * C2324 + C48262 * C2335 - C3783 * C2325) *
                 C1061 +
             (C48461 * C2326 - C3782 * C2318 + C48262 * C2327 - C3783 * C2319) *
                 C1068 +
             (C48461 * C2336 - C3782 * C2328 + C48262 * C2337 - C3783 * C2329) *
                 C1062 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C1069 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C9007 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48102) *
                C19881 +
            ((C6497 - C6498 + C6499 - C6500) * C9007 +
             (C6501 - C6502 + C6503 - C6504) * C48102) *
                C19882 +
            (C19777 * C9007 + C19778 * C48102) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C9007 +
             (C19774 - C19773 + C19776 - C19775) * C48102) *
                C48510) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C9007 +
             (C6502 - C6501 + C6504 - C6503) * C48102) *
                C19881 +
            ((C7615 - C7616 + C7617 - C7618) * C9007 +
             (C7619 - C7620 + C7621 - C7622) * C48102) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C9007 +
             (C19773 - C19774 + C19775 - C19776) * C48102) *
                C19883 +
            ((C3782 * C3649 - C48461 * C3652 + C3783 * C10938 -
              C48262 * C10940) *
                 C9007 +
             (C3782 * C3653 - C48461 * C3658 + C3783 * C10942 -
              C48262 * C10944) *
                 C48102) *
                C48510) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C9007 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48102) *
                C19881 +
            ((C7073 - C7074 + C7075 - C7076) * C9007 +
             (C7077 - C7078 + C7079 - C7080) * C48102) *
                C19882 +
            ((C19221 - C19222 + C19223 - C19224) * C9007 +
             (C19225 - C19226 + C19227 - C19228) * C48102) *
                C19883 +
            ((C21600 - C21601 + C21602 - C21603) * C9007 +
             (C21604 - C21605 + C21606 - C21607) * C48102) *
                C48510) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C9007 +
             (C7078 - C7077 + C7080 - C7079) * C48102) *
                C19881 +
            ((C19222 - C19221 + C19224 - C19223) * C9007 +
             (C19226 - C19225 + C19228 - C19227) * C48102) *
                C19882 +
            ((C21601 - C21600 + C21603 - C21602) * C9007 +
             (C21605 - C21604 + C21607 - C21606) * C48102) *
                C19883 +
            ((C48461 * C10940 - C3782 * C10938 + C48262 * C10941 -
              C3783 * C10939) *
                 C9007 +
             (C48461 * C10944 - C3782 * C10942 + C48262 * C10945 -
              C3783 * C10943) *
                 C48102) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
             C14121) *
                C9007 +
            (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
             C14129) *
                C48102) *
               C48304) *
              C925 +
          (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
             C14120) *
                C9007 +
            (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
             C14128) *
                C48102) *
               C48462 +
           ((C14862 - C14863 + C14864 - C14865 + C14866 - C14867 + C14868 -
             C14869) *
                C9007 +
            (C14870 - C14871 + C14872 - C14873 + C14874 - C14875 + C14876 -
             C14877) *
                C48102) *
               C48304) *
              C926 +
          (((C14863 - C14862 + C14865 - C14864 + C14867 - C14866 + C14869 -
             C14868) *
                C9007 +
            (C14871 - C14870 + C14873 - C14872 + C14875 - C14874 + C14877 -
             C14876) *
                C48102) *
               C48462 +
           ((C11069 * C2785 - C11075 * C2781 + C11070 * C3230 - C11076 * C3227 +
             C11071 * C10064 - C11077 * C10062 + C48504 * C10509 -
             C11078 * C10508) *
                C9007 +
            (C11069 * C2793 - C11075 * C2786 + C11070 * C3236 - C11076 * C3231 +
             C11071 * C10068 - C11077 * C10065 + C48504 * C10511 -
             C11078 * C10510) *
                C48102) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C6497 - C6498 + C6499 - C6500) * C1067 +
            (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
            C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
               C48304) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C1067 +
            (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
            C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
               C48462 +
           ((C7615 - C7616 + C7617 - C7618) * C1067 +
            (C7619 - C7620 + C7621 - C7622) * C1061 +
            (C6517 - C6518 + C6519 - C6520) * C1068 +
            (C6521 - C6522 + C6523 - C6524) * C1062 +
            (C6525 - C6526 + C6527 - C6528) * C1069 +
            (C6529 - C6530 + C6531 - C6532) * C48481) *
               C48304) *
              C926 +
          (((C7616 - C7615 + C7618 - C7617) * C1067 +
            (C7620 - C7619 + C7622 - C7621) * C1061 +
            (C6518 - C6517 + C6520 - C6519) * C1068 +
            (C6522 - C6521 + C6524 - C6523) * C1062 +
            (C6526 - C6525 + C6528 - C6527) * C1069 +
            (C6530 - C6529 + C6532 - C6531) * C48481) *
               C48462 +
           ((C48461 * C2785 - C3782 * C2781 + C48262 * C3230 - C3783 * C3227) *
                C1067 +
            (C48461 * C2793 - C3782 * C2786 + C48262 * C3236 - C3783 * C3231) *
                C1061 +
            (C48461 * C2787 - C3782 * C2782 + C48262 * C3232 - C3783 * C3228) *
                C1068 +
            (C48461 * C2794 - C3782 * C2788 + C48262 * C3237 - C3783 * C3233) *
                C1062 +
            (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                C1069 +
            (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                C48481) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C9007 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48102) *
               C19881 +
           ((C6497 - C6498 + C6499 - C6500) * C9007 +
            (C6501 - C6502 + C6503 - C6504) * C48102) *
               C19882 +
           C21980 * C19883 + C21985 * C48510) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C9007 +
            (C6502 - C6501 + C6504 - C6503) * C48102) *
               C19881 +
           ((C7615 - C7616 + C7617 - C7618) * C9007 +
            (C7619 - C7620 + C7621 - C7622) * C48102) *
               C19882 +
           ((C19769 - C19770 + C19771 - C19772) * C9007 +
            (C19773 - C19774 + C19775 - C19776) * C48102) *
               C19883 +
           ((C21972 - C21973 + C21974 - C21975) * C9007 +
            (C21976 - C21977 + C21978 - C21979) * C48102) *
               C48510) *
              C926 +
          (C21980 * C19881 + C21985 * C19882 +
           ((C21973 - C21972 + C21975 - C21974) * C9007 +
            (C21977 - C21976 + C21979 - C21978) * C48102) *
               C19883 +
           ((C48461 * C17625 - C3782 * C17623 + C48262 * C17866 -
             C3783 * C17865) *
                C9007 +
            (C48461 * C17629 - C3782 * C17626 + C48262 * C17868 -
             C3783 * C17867) *
                C48102) *
               C48510) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48199 * C126 - C113 * C119) * C114 +
               (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48217 * C48188 * C48171 * C110 +
              ((C149 - C148) * C114 + (C151 - C150) * C102 +
               (C153 - C152) * C115 + (C155 - C154) * C103 +
               (C157 - C156) * C116 + (C159 - C158) * C104 +
               (C161 - C160) * C117 + (C163 - C162) * C105 +
               (C164 - C165) * C118 + (C166 - C167) * C106) *
                  C48217 * C48188 * C48171 * C111 +
              (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 +
               C172 * C116 + C173 * C104 + (C165 - C164) * C117 +
               (C167 - C166) * C105 + (C48199 * C138 - C113 * C125) * C118 +
               (C48199 * C146 - C113 * C139) * C106) *
                  C48217 * C48188 * C48171 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                C48494 * C580 - C1066 * C575) *
                   C1067 +
               (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                C48494 * C590 - C1066 * C581) *
                   C1061 +
               (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
               (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
               C1115 * C1069 + C1116 * C48481) *
                  C48217 * C48188 * C48171 * C110 +
              ((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
               (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
               (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
               (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
               (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
               (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
                  C48217 * C48188 * C48171 * C111 +
              (C1115 * C1067 + C1116 * C1061 +
               (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C1068 +
               (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C1062 +
               (C48529 * C134 - C1064 * C123 + C48517 * C273 - C1065 * C263 +
                C48494 * C588 - C1066 * C579) *
                   C1069 +
               (C48529 * C144 - C1064 * C135 + C48517 * C281 - C1065 * C274 +
                C48494 * C594 - C1066 * C589) *
                   C48481) *
                  C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C48199 * C389 - C113 * C383) * C1067 +
            (C48199 * C401 - C113 * C390) * C1061 + (C409 - C408) * C1068 +
            (C411 - C410) * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           ((C48199 * C933 - C113 * C928) * C1067 +
            (C48199 * C943 - C113 * C934) * C1061 + (C2456 - C2457) * C1068 +
            (C2458 - C2459) * C1062 + C2468 * C1069 + C2469 * C48481) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C1067 + (C151 - C150) * C1061 +
            (C153 - C152) * C1068 + (C155 - C154) * C1062 +
            (C157 - C156) * C1069 + (C159 - C158) * C48481) *
               C48530 +
           ((C408 - C409) * C1067 + (C410 - C411) * C1061 +
            (C412 - C413) * C1068 + (C414 - C415) * C1062 +
            (C416 - C417) * C1069 + (C418 - C419) * C48481) *
               C48519 +
           ((C2457 - C2456) * C1067 + (C2459 - C2458) * C1061 +
            (C2461 - C2460) * C1068 + (C2463 - C2462) * C1062 +
            (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C168 * C1067 + C169 * C1061 + C170 * C1068 + C171 * C1062 +
            C172 * C1069 + C173 * C48481) *
               C48530 +
           (C2454 * C1067 + C2455 * C1061 + (C417 - C416) * C1068 +
            (C419 - C418) * C1062 + (C421 - C420) * C1069 +
            (C423 - C422) * C48481) *
               C48519 +
           (C2468 * C1067 + C2469 * C1061 + (C2465 - C2464) * C1068 +
            (C2467 - C2466) * C1062 + (C48199 * C941 - C113 * C932) * C1069 +
            (C48199 * C947 - C113 * C942) * C48481) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
           (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
           (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
           (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
           (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
           (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C7789 * C7741 + C7790 * C48526 +
           (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C7742 +
           (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48513 +
           (C7732 * C134 - C7738 * C123 + C7733 * C273 - C7739 * C263 +
            C48494 * C588 - C7740 * C579) *
               C7743 +
           (C7732 * C144 - C7738 * C135 + C7733 * C281 - C7739 * C274 +
            C48494 * C594 - C7740 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C48171 * C110 +
          ((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
            C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
            C9006 * C1745 - C9000 * C1749) *
               C9007 +
           (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
            C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
            C9006 * C1750 - C9000 * C1754) *
               C48102) *
              C48217 * C48188 * C48171 * C111 +
          ((C8996 * C130 - C9002 * C121 + C8997 * C269 - C9003 * C261 +
            C8998 * C584 - C9004 * C577 + C8999 * C1270 - C9005 * C1264 +
            C9000 * C1751 - C9006 * C1746) *
               C9007 +
           (C8996 * C142 - C9002 * C131 + C8997 * C279 - C9003 * C270 +
            C8998 * C592 - C9004 * C585 + C8999 * C1276 - C9005 * C1271 +
            C9000 * C1755 - C9006 * C1752) *
               C48102) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C7732 * C389 - C7738 * C383 + C7733 * C682 - C7739 * C677 +
             C48494 * C1452 - C7740 * C1448) *
                C9007 +
            (C7732 * C401 - C7738 * C390 + C7733 * C692 - C7739 * C683 +
             C48494 * C1460 - C7740 * C1453) *
                C48102) *
               C48519 +
           ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
             C48494 * C2323 - C7740 * C2317) *
                C9007 +
            (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
             C48494 * C2335 - C7740 * C2325) *
                C48102) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
               C48530 +
           ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
               C48519 +
           ((C7738 * C929 - C7732 * C935 + C7739 * C2318 - C7733 * C2326 +
             C7740 * C2319 - C48494 * C2327) *
                C9007 +
            (C7738 * C936 - C7732 * C944 + C7739 * C2328 - C7733 * C2336 +
             C7740 * C2329 - C48494 * C2337) *
                C48102) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C7789 * C9007 + C7790 * C48102) * C48530 +
           ((C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C9007 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48102) *
               C48519 +
           ((C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
             C48494 * C2331 - C7740 * C2321) *
                C9007 +
            (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
             C48494 * C2339 - C7740 * C2333) *
                C48102) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
            C2468 * C7743 + C2469 * C48481) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C7741 + (C151 - C150) * C48526 +
            (C153 - C152) * C7742 + (C155 - C154) * C48513 +
            (C157 - C156) * C7743 + (C159 - C158) * C48481) *
               C14987 +
           (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
            C5223 * C7743 + C5224 * C48481) *
               C14988 +
           (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
            (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C168 * C7741 + C169 * C48526 + C170 * C7742 + C171 * C48513 +
            C172 * C7743 + C173 * C48481) *
               C14987 +
           (C2454 * C7741 + C2455 * C48526 + C4957 * C7742 + C4958 * C48513 +
            (C421 - C420) * C7743 + (C423 - C422) * C48481) *
               C14988 +
           (C2468 * C7741 + C2469 * C48526 + (C2465 - C2464) * C7742 +
            (C2467 - C2466) * C48513 + (C48199 * C941 - C113 * C932) * C7743 +
            (C48199 * C947 - C113 * C942) * C48481) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C48529 * C389 - C1064 * C383 + C48517 * C682 - C1065 * C677 +
             C48494 * C1452 - C1066 * C1448) *
                C9007 +
            (C48529 * C401 - C1064 * C390 + C48517 * C692 - C1065 * C683 +
             C48494 * C1460 - C1066 * C1453) *
                C48102) *
               C14988 +
           ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
             C48494 * C2323 - C1066 * C2317) *
                C9007 +
            (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
             C48494 * C2335 - C1066 * C2325) *
                C48102) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
               C14987 +
           ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
               C14988 +
           ((C1064 * C929 - C48529 * C935 + C1065 * C2318 - C48517 * C2326 +
             C1066 * C2319 - C48494 * C2327) *
                C9007 +
            (C1064 * C936 - C48529 * C944 + C1065 * C2328 - C48517 * C2336 +
             C1066 * C2329 - C48494 * C2337) *
                C48102) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C1115 * C9007 + C1116 * C48102) * C14987 +
           ((C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C9007 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48102) *
               C14988 +
           ((C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
             C48494 * C2331 - C1066 * C2321) *
                C9007 +
            (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
             C48494 * C2339 - C1066 * C2333) *
                C48102) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C9007 +
            (C48199 * C140 - C113 * C127) * C48102) *
               C17450 +
           ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
           (C3662 * C9007 + C3663 * C48102) * C17452 +
           ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
           ((C48199 * C3652 - C113 * C3649) * C9007 +
            (C48199 * C3658 - C113 * C3653) * C48102) *
               C17454) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C9007 + (C151 - C150) * C48102) * C17450 +
           (C2810 * C9007 + C2811 * C48102) * C17451 +
           (C2814 * C9007 + C2815 * C48102) * C17452 +
           ((C2818 - C2819) * C9007 + (C2820 - C2821) * C48102) * C17453 +
           ((C113 * C3650 - C48199 * C3654) * C9007 +
            (C113 * C3655 - C48199 * C3659) * C48102) *
               C17454) *
              C48188 * C48171 * C111 +
          ((C168 * C9007 + C169 * C48102) * C17450 +
           (C2454 * C9007 + C2455 * C48102) * C17451 +
           (C2468 * C9007 + C2469 * C48102) * C17452 +
           ((C2823 - C2822) * C9007 + (C2825 - C2824) * C48102) * C17453 +
           ((C48199 * C3656 - C113 * C3651) * C9007 +
            (C48199 * C3660 - C113 * C3657) * C48102) *
               C17454) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C48188 * C255 +
               ((C113 * C259 - C48199 * C265) * C114 +
                (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48217 * C48188 * C48489) *
                  C257 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48217 * C48188 * C255 +
               ((C285 - C284) * C114 + (C287 - C286) * C102 +
                (C289 - C288) * C115 + (C291 - C290) * C103 +
                (C293 - C292) * C116 + (C295 - C294) * C104 +
                (C297 - C296) * C117 + (C299 - C298) * C105 +
                (C48199 * C275 - C113 * C264) * C118 +
                (C48199 * C282 - C113 * C276) * C106) *
                   C48217 * C48188 * C48489) *
                  C48487) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C48188 * C255 +
               ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
                 C1066 * C1262 - C48494 * C1266) *
                    C1067 +
                (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
                 C1066 * C1267 - C48494 * C1274) *
                    C1061 +
                (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
                (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
                (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
                (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
                   C48217 * C48188 * C48489) *
                  C257 +
              (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
                (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
                (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
                (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
                (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
                (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
                   C48217 * C48188 * C255 +
               ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
                (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
                (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
                (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
                (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
                 C48494 * C1272 - C1066 * C1265) *
                    C1069 +
                (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
                 C48494 * C1277 - C1066 * C1273) *
                    C48481) *
                   C48217 * C48188 * C48489) *
                  C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C48199 * C389 - C113 * C383) * C1067 +
             (C48199 * C401 - C113 * C390) * C1061 + (C409 - C408) * C1068 +
             (C411 - C410) * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C48199 * C933 - C113 * C928) * C1067 +
             (C48199 * C943 - C113 * C934) * C1061 + (C2456 - C2457) * C1068 +
             (C2458 - C2459) * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C113 * C677 - C48199 * C682) * C1067 +
             (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
             (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
             (C2626 - C2627) * C48481) *
                C48519 +
            ((C113 * C2316 - C48199 * C2322) * C1067 +
             (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
             (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
             (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            ((C408 - C409) * C1067 + (C410 - C411) * C1061 +
             (C412 - C413) * C1068 + (C414 - C415) * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            ((C2457 - C2456) * C1067 + (C2459 - C2458) * C1061 +
             (C2461 - C2460) * C1068 + (C2463 - C2462) * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C255 +
           (((C285 - C284) * C1067 + (C287 - C286) * C1061 +
             (C289 - C288) * C1068 + (C291 - C290) * C1062 +
             (C293 - C292) * C1069 + (C295 - C294) * C48481) *
                C48530 +
            ((C2621 - C2620) * C1067 + (C2623 - C2622) * C1061 +
             (C2625 - C2624) * C1068 + (C2627 - C2626) * C1062 +
             (C48199 * C688 - C113 * C680) * C1069 +
             (C48199 * C695 - C113 * C689) * C48481) *
                C48519 +
            ((C2629 - C2628) * C1067 + (C2631 - C2630) * C1061 +
             (C2633 - C2632) * C1068 + (C2635 - C2634) * C1062 +
             (C48199 * C2616 - C113 * C2615) * C1069 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C255 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C255 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C7732 * C389 - C7738 * C383 + C7733 * C682 - C7739 * C677 +
              C48494 * C1452 - C7740 * C1448) *
                 C9007 +
             (C7732 * C401 - C7738 * C390 + C7733 * C692 - C7739 * C683 +
              C48494 * C1460 - C7740 * C1453) *
                 C48102) *
                C48519 +
            ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
              C48494 * C2323 - C7740 * C2317) *
                 C9007 +
             (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
              C48494 * C2335 - C7740 * C2325) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
              C7740 * C1902 - C48494 * C1905) *
                 C9007 +
             (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
              C7740 * C1906 - C48494 * C1911) *
                 C48102) *
                C48519 +
            ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
              C7740 * C9648 - C48494 * C9650) *
                 C9007 +
             (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
              C7740 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C7738 * C929 - C7732 * C935 + C7739 * C2318 - C7733 * C2326 +
              C7740 * C2319 - C48494 * C2327) *
                 C9007 +
             (C7738 * C936 - C7732 * C944 + C7739 * C2328 - C7733 * C2336 +
              C7740 * C2329 - C48494 * C2337) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C9007 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48102) *
                C48530 +
            ((C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
              C48494 * C1907 - C7740 * C1903) *
                 C9007 +
             (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
              C48494 * C1912 - C7740 * C1908) *
                 C48102) *
                C48519 +
            ((C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C9007 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C255 +
           (((C285 - C284) * C7741 + (C287 - C286) * C48526 +
             (C289 - C288) * C7742 + (C291 - C290) * C48513 +
             (C293 - C292) * C7743 + (C295 - C294) * C48481) *
                C14987 +
            ((C2621 - C2620) * C7741 + (C2623 - C2622) * C48526 +
             (C2625 - C2624) * C7742 + (C2627 - C2626) * C48513 +
             (C5090 - C5089) * C7743 + (C5092 - C5091) * C48481) *
                C14988 +
            ((C2629 - C2628) * C7741 + (C2631 - C2630) * C48526 +
             (C2633 - C2632) * C7742 + (C2635 - C2634) * C48513 +
             (C48199 * C2616 - C113 * C2615) * C7743 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C48529 * C389 - C1064 * C383 + C48517 * C682 - C1065 * C677 +
              C48494 * C1452 - C1066 * C1448) *
                 C9007 +
             (C48529 * C401 - C1064 * C390 + C48517 * C692 - C1065 * C683 +
              C48494 * C1460 - C1066 * C1453) *
                 C48102) *
                C14988 +
            ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
              C48494 * C2323 - C1066 * C2317) *
                 C9007 +
             (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
              C48494 * C2335 - C1066 * C2325) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
              C1066 * C1902 - C48494 * C1905) *
                 C9007 +
             (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
              C1066 * C1906 - C48494 * C1911) *
                 C48102) *
                C14988 +
            ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
              C1066 * C9648 - C48494 * C9650) *
                 C9007 +
             (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
              C1066 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C1064 * C929 - C48529 * C935 + C1065 * C2318 - C48517 * C2326 +
              C1066 * C2319 - C48494 * C2327) *
                 C9007 +
             (C1064 * C936 - C48529 * C944 + C1065 * C2328 - C48517 * C2336 +
              C1066 * C2329 - C48494 * C2337) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C9007 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C48102) *
                C14987 +
            ((C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
              C48494 * C1907 - C1066 * C1903) *
                 C9007 +
             (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
              C48494 * C1912 - C1066 * C1908) *
                 C48102) *
                C14988 +
            ((C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C9007 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C48199 * C3652 - C113 * C3649) * C9007 +
             (C48199 * C3658 - C113 * C3653) * C48102) *
                C17454) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C9007 +
             (C113 * C266 - C48199 * C277) * C48102) *
                C17450 +
            ((C3240 - C3241) * C9007 + (C3242 - C3243) * C48102) * C17451 +
            ((C3244 - C3245) * C9007 + (C3246 - C3247) * C48102) * C17452 +
            ((C113 * C3227 - C48199 * C3230) * C9007 +
             (C113 * C3231 - C48199 * C3236) * C48102) *
                C17453 +
            ((C113 * C10938 - C48199 * C10940) * C9007 +
             (C113 * C10942 - C48199 * C10944) * C48102) *
                C17454) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C9007 + (C151 - C150) * C48102) * C17450 +
            (C2810 * C9007 + C2811 * C48102) * C17451 +
            (C2814 * C9007 + C2815 * C48102) * C17452 +
            ((C2818 - C2819) * C9007 + (C2820 - C2821) * C48102) * C17453 +
            ((C113 * C3650 - C48199 * C3654) * C9007 +
             (C113 * C3655 - C48199 * C3659) * C48102) *
                C17454) *
               C48188 * C255 +
           (((C285 - C284) * C9007 + (C287 - C286) * C48102) * C17450 +
            ((C2621 - C2620) * C9007 + (C2623 - C2622) * C48102) * C17451 +
            ((C2629 - C2628) * C9007 + (C2631 - C2630) * C48102) * C17452 +
            ((C48199 * C3232 - C113 * C3228) * C9007 +
             (C48199 * C3237 - C113 * C3233) * C48102) *
                C17453 +
            ((C48199 * C17538 - C113 * C17537) * C9007 +
             (C48199 * C17540 - C113 * C17539) * C48102) *
                C17454) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C381 +
               ((C113 * C383 - C48199 * C389) * C114 +
                (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48217 * C48491) *
                  C48171 * C257 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48217 * C381 +
               ((C409 - C408) * C114 + (C411 - C410) * C102 +
                (C413 - C412) * C115 + (C415 - C414) * C103 +
                (C417 - C416) * C116 + (C419 - C418) * C104 +
                (C421 - C420) * C117 + (C423 - C422) * C105 +
                (C48199 * C399 - C113 * C388) * C118 +
                (C48199 * C406 - C113 * C400) * C106) *
                   C48217 * C48491) *
                  C48171 * C48487) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C381 +
               ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
                 C1066 * C1448 - C48494 * C1452) *
                    C1067 +
                (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
                 C1066 * C1453 - C48494 * C1460) *
                    C1061 +
                (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
                (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
                (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
                (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
                   C48217 * C48491) *
                  C48171 * C257 +
              (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
                (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
                (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
                (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
                (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
                (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
                   C48217 * C381 +
               ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
                (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
                (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
                (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
                (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
                 C48494 * C1458 - C1066 * C1451) *
                    C1069 +
                (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
                 C48494 * C1463 - C1066 * C1459) *
                    C48481) *
                   C48217 * C48491) *
                  C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C381 +
           ((C2802 * C1067 + C2803 * C1061 + C2454 * C1068 + C2455 * C1062 +
             (C417 - C416) * C1069 + (C419 - C418) * C48481) *
                C48530 +
            (C2808 * C1067 + C2809 * C1061 + C2468 * C1068 + C2469 * C1062 +
             (C2465 - C2464) * C1069 + (C2467 - C2466) * C48481) *
                C48519 +
            ((C2819 - C2818) * C1067 + (C2821 - C2820) * C1061 +
             (C2823 - C2822) * C1068 + (C2825 - C2824) * C1062 +
             (C48199 * C2791 - C113 * C2784) * C1069 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C381 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C381 +
           (((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C9007 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48102) *
                C48530 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C9007 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48102) *
                C48519 +
            ((C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
              C48494 * C10066 - C7740 * C10063) *
                 C9007 +
             (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
              C48494 * C10069 - C7740 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C381 +
           ((C2802 * C7741 + C2803 * C48526 + C2454 * C7742 + C2455 * C48513 +
             C4957 * C7743 + C4958 * C48481) *
                C14987 +
            (C2808 * C7741 + C2809 * C48526 + C2468 * C7742 + C2469 * C48513 +
             (C2465 - C2464) * C7743 + (C2467 - C2466) * C48481) *
                C14988 +
            ((C2819 - C2818) * C7741 + (C2821 - C2820) * C48526 +
             (C2823 - C2822) * C7742 + (C2825 - C2824) * C48513 +
             (C48199 * C2791 - C113 * C2784) * C7743 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C381 +
           (((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C9007 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48102) *
                C14987 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C9007 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48102) *
                C14988 +
            ((C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
              C48494 * C10066 - C1066 * C10063) *
                 C9007 +
             (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
              C48494 * C10069 - C1066 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
               C381 +
           (((C2799 - C2798) * C9007 + (C2801 - C2800) * C48102) * C17450 +
            ((C2805 - C2804) * C9007 + (C2807 - C2806) * C48102) * C17451 +
            ((C3668 - C3669) * C9007 + (C3670 - C3671) * C48102) * C17452 +
            ((C17633 - C17632) * C9007 + (C17635 - C17634) * C48102) * C17453 +
            ((C113 * C17623 - C48199 * C17625) * C9007 +
             (C113 * C17626 - C48199 * C17629) * C48102) *
                C17454) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C9007 + (C151 - C150) * C48102) * C17450 +
            (C2810 * C9007 + C2811 * C48102) * C17451 +
            (C2814 * C9007 + C2815 * C48102) * C17452 +
            ((C2818 - C2819) * C9007 + (C2820 - C2821) * C48102) * C17453 +
            ((C17636 - C17637) * C9007 + (C17638 - C17639) * C48102) * C17454) *
               C381 +
           ((C2802 * C9007 + C2803 * C48102) * C17450 +
            (C2808 * C9007 + C2809 * C48102) * C17451 +
            ((C2819 - C2818) * C9007 + (C2821 - C2820) * C48102) * C17452 +
            ((C17637 - C17636) * C9007 + (C17639 - C17638) * C48102) * C17453 +
            ((C48199 * C17627 - C113 * C17624) * C9007 +
             (C48199 * C17630 - C113 * C17628) * C48102) *
                C17454) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C48188 * C505 +
               ((C113 * C259 - C48199 * C265) * C114 +
                (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48217 * C48188 * C48489) *
                  C507 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48217 * C48188 * C505 +
               ((C285 - C284) * C114 + (C287 - C286) * C102 +
                (C289 - C288) * C115 + (C291 - C290) * C103 +
                (C293 - C292) * C116 + (C295 - C294) * C104 +
                (C297 - C296) * C117 + (C299 - C298) * C105 +
                (C48199 * C275 - C113 * C264) * C118 +
                (C48199 * C282 - C113 * C276) * C106) *
                   C48217 * C48188 * C48489) *
                  C48487) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C48188 * C505 +
               ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
                 C1066 * C1262 - C48494 * C1266) *
                    C1067 +
                (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
                 C1066 * C1267 - C48494 * C1274) *
                    C1061 +
                (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
                (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
                (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
                (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
                   C48217 * C48188 * C48489) *
                  C507 +
              (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
                (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
                (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
                (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
                (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
                (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
                   C48217 * C48188 * C505 +
               ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
                (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
                (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
                (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
                (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
                 C48494 * C1272 - C1066 * C1265) *
                    C1069 +
                (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
                 C48494 * C1277 - C1066 * C1273) *
                    C48481) *
                   C48217 * C48188 * C48489) *
                  C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C113 * C677 - C48199 * C682) * C1067 +
             (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
             (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
             (C2626 - C2627) * C48481) *
                C48519 +
            ((C113 * C2316 - C48199 * C2322) * C1067 +
             (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
             (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
             (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C505 +
           (((C285 - C284) * C1067 + (C287 - C286) * C1061 +
             (C289 - C288) * C1068 + (C291 - C290) * C1062 +
             (C293 - C292) * C1069 + (C295 - C294) * C48481) *
                C48530 +
            ((C2621 - C2620) * C1067 + (C2623 - C2622) * C1061 +
             (C2625 - C2624) * C1068 + (C2627 - C2626) * C1062 +
             (C48199 * C688 - C113 * C680) * C1069 +
             (C48199 * C695 - C113 * C689) * C48481) *
                C48519 +
            ((C2629 - C2628) * C1067 + (C2631 - C2630) * C1061 +
             (C2633 - C2632) * C1068 + (C2635 - C2634) * C1062 +
             (C48199 * C2616 - C113 * C2615) * C1069 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C505 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C505 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
              C7740 * C1902 - C48494 * C1905) *
                 C9007 +
             (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
              C7740 * C1906 - C48494 * C1911) *
                 C48102) *
                C48519 +
            ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
              C7740 * C9648 - C48494 * C9650) *
                 C9007 +
             (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
              C7740 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C9007 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48102) *
                C48530 +
            ((C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
              C48494 * C1907 - C7740 * C1903) *
                 C9007 +
             (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
              C48494 * C1912 - C7740 * C1908) *
                 C48102) *
                C48519 +
            ((C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C9007 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C505 +
           (((C285 - C284) * C7741 + (C287 - C286) * C48526 +
             (C289 - C288) * C7742 + (C291 - C290) * C48513 +
             (C293 - C292) * C7743 + (C295 - C294) * C48481) *
                C14987 +
            ((C2621 - C2620) * C7741 + (C2623 - C2622) * C48526 +
             (C2625 - C2624) * C7742 + (C2627 - C2626) * C48513 +
             (C5090 - C5089) * C7743 + (C5092 - C5091) * C48481) *
                C14988 +
            ((C2629 - C2628) * C7741 + (C2631 - C2630) * C48526 +
             (C2633 - C2632) * C7742 + (C2635 - C2634) * C48513 +
             (C48199 * C2616 - C113 * C2615) * C7743 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
              C1066 * C1902 - C48494 * C1905) *
                 C9007 +
             (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
              C1066 * C1906 - C48494 * C1911) *
                 C48102) *
                C14988 +
            ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
              C1066 * C9648 - C48494 * C9650) *
                 C9007 +
             (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
              C1066 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C9007 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C48102) *
                C14987 +
            ((C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
              C48494 * C1907 - C1066 * C1903) *
                 C9007 +
             (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
              C48494 * C1912 - C1066 * C1908) *
                 C48102) *
                C14988 +
            ((C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C9007 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C9007 +
             (C113 * C266 - C48199 * C277) * C48102) *
                C17450 +
            ((C3240 - C3241) * C9007 + (C3242 - C3243) * C48102) * C17451 +
            ((C3244 - C3245) * C9007 + (C3246 - C3247) * C48102) * C17452 +
            ((C113 * C3227 - C48199 * C3230) * C9007 +
             (C113 * C3231 - C48199 * C3236) * C48102) *
                C17453 +
            ((C113 * C10938 - C48199 * C10940) * C9007 +
             (C113 * C10942 - C48199 * C10944) * C48102) *
                C17454) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C9007 + (C151 - C150) * C48102) * C17450 +
            (C2810 * C9007 + C2811 * C48102) * C17451 +
            (C2814 * C9007 + C2815 * C48102) * C17452 +
            ((C2818 - C2819) * C9007 + (C2820 - C2821) * C48102) * C17453 +
            ((C17636 - C17637) * C9007 + (C17638 - C17639) * C48102) * C17454) *
               C48188 * C505 +
           (((C285 - C284) * C9007 + (C287 - C286) * C48102) * C17450 +
            ((C2621 - C2620) * C9007 + (C2623 - C2622) * C48102) * C17451 +
            ((C2629 - C2628) * C9007 + (C2631 - C2630) * C48102) * C17452 +
            ((C48199 * C3232 - C113 * C3228) * C9007 +
             (C48199 * C3237 - C113 * C3233) * C48102) *
                C17453 +
            ((C48199 * C17538 - C113 * C17537) * C9007 +
             (C48199 * C17540 - C113 * C17539) * C48102) *
                C17454) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48199 * C126 - C113 * C119) * C114 +
               (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48217 * C48188 * C571 +
              ((C113 * C259 - C48199 * C265) * C114 +
               (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
               (C286 - C287) * C103 + (C288 - C289) * C116 +
               (C290 - C291) * C104 + (C292 - C293) * C117 +
               (C294 - C295) * C105 + (C296 - C297) * C118 +
               (C298 - C299) * C106) *
                  C48217 * C48188 * C572 +
              ((C48199 * C580 - C113 * C575) * C114 +
               (C48199 * C590 - C113 * C581) * C102 +
               (C48199 * C582 - C113 * C576) * C115 +
               (C48199 * C591 - C113 * C583) * C103 +
               (C48199 * C584 - C113 * C577) * C116 +
               (C48199 * C592 - C113 * C585) * C104 +
               (C48199 * C586 - C113 * C578) * C117 +
               (C48199 * C593 - C113 * C587) * C105 +
               (C48199 * C588 - C113 * C579) * C118 +
               (C48199 * C594 - C113 * C589) * C106) *
                  C48217 * C48188 * C573) *
             C48137 +
         0.5 * std::pow(Pi, 2.5) *
             (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                C48494 * C580 - C1066 * C575) *
                   C1067 +
               (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                C48494 * C590 - C1066 * C581) *
                   C1061 +
               (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
               (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
               C1115 * C1069 + C1116 * C48481) *
                  C48217 * C48188 * C571 +
              ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
                C1066 * C1262 - C48494 * C1266) *
                   C1067 +
               (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
                C1066 * C1267 - C48494 * C1274) *
                   C1061 +
               (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
               (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
               (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
               (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
                  C48217 * C48188 * C572 +
              ((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
                C48494 * C1747 - C1066 * C1744) *
                   C1067 +
               (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
                C48494 * C1753 - C1066 * C1748) *
                   C1061 +
               (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
                C48494 * C1749 - C1066 * C1745) *
                   C1068 +
               (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
                C48494 * C1754 - C1066 * C1750) *
                   C1062 +
               (C48529 * C584 - C1064 * C577 + C48517 * C1270 - C1065 * C1264 +
                C48494 * C1751 - C1066 * C1746) *
                   C1069 +
               (C48529 * C592 - C1064 * C585 + C48517 * C1276 - C1065 * C1271 +
                C48494 * C1755 - C1066 * C1752) *
                   C48481) *
                  C48217 * C48188 * C573) *
             C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
            C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
            C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
               C48497) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C1067 +
            (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
            (C286 - C287) * C1062 + (C288 - C289) * C1069 +
            (C290 - C291) * C48481) *
               C48530 +
           ((C113 * C677 - C48199 * C682) * C1067 +
            (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
            (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
            (C2626 - C2627) * C48481) *
               C48519 +
           ((C113 * C2316 - C48199 * C2322) * C1067 +
            (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
            (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
            (C2634 - C2635) * C48481) *
               C48497) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C1067 +
            (C48199 * C590 - C113 * C581) * C1061 +
            (C48199 * C582 - C113 * C576) * C1068 +
            (C48199 * C591 - C113 * C583) * C1062 +
            (C48199 * C584 - C113 * C577) * C1069 +
            (C48199 * C592 - C113 * C585) * C48481) *
               C48530 +
           ((C48199 * C1452 - C113 * C1448) * C1067 +
            (C48199 * C1460 - C113 * C1453) * C1061 +
            (C48199 * C1454 - C113 * C1449) * C1068 +
            (C48199 * C1461 - C113 * C1455) * C1062 +
            (C48199 * C1456 - C113 * C1450) * C1069 +
            (C48199 * C1462 - C113 * C1457) * C48481) *
               C48519 +
           ((C48199 * C2323 - C113 * C2317) * C1067 +
            (C48199 * C2335 - C113 * C2325) * C1061 +
            (C48199 * C2327 - C113 * C2319) * C1068 +
            (C48199 * C2337 - C113 * C2329) * C1062 +
            (C48199 * C2331 - C113 * C2321) * C1069 +
            (C48199 * C2339 - C113 * C2333) * C48481) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C571 +
          ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
            C7740 * C1262 - C48494 * C1266) *
               C7741 +
           (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
            C7740 * C1267 - C48494 * C1274) *
               C48526 +
           (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
           (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
           (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
           (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
              C48217 * C48188 * C572 +
          ((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
            C48494 * C1747 - C7740 * C1744) *
               C7741 +
           (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
            C48494 * C1753 - C7740 * C1748) *
               C48526 +
           (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
            C48494 * C1749 - C7740 * C1745) *
               C7742 +
           (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
            C48494 * C1754 - C7740 * C1750) *
               C48513 +
           (C7732 * C584 - C7738 * C577 + C7733 * C1270 - C7739 * C1264 +
            C48494 * C1751 - C7740 * C1746) *
               C7743 +
           (C7732 * C592 - C7738 * C585 + C7733 * C1276 - C7739 * C1271 +
            C48494 * C1755 - C7740 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C571 +
          ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
            C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
            C9006 * C9090 - C9000 * C9092) *
               C9007 +
           (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
            C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
            C9006 * C9093 - C9000 * C9096) *
               C48102) *
              C48217 * C48188 * C572 +
          ((C8996 * C580 - C9002 * C575 + C8997 * C1266 - C9003 * C1262 +
            C8998 * C1747 - C9004 * C1744 + C8999 * C9092 - C9005 * C9090 +
            C9000 * C9333 - C9006 * C9332) *
               C9007 +
           (C8996 * C590 - C9002 * C581 + C8997 * C1274 - C9003 * C1267 +
            C8998 * C1753 - C9004 * C1748 + C8999 * C9096 - C9005 * C9093 +
            C9000 * C9335 - C9006 * C9334) *
               C48102) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
               C48519 +
           ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
            (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
               C48497) *
              C48188 * C571 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C9007 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48102) *
               C48530 +
           ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
             C7740 * C1902 - C48494 * C1905) *
                C9007 +
            (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
             C7740 * C1906 - C48494 * C1911) *
                C48102) *
               C48519 +
           ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
             C7740 * C9648 - C48494 * C9650) *
                C9007 +
            (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
             C7740 * C9652 - C48494 * C9654) *
                C48102) *
               C48497) *
              C48188 * C572 +
          (((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
             C48494 * C1747 - C7740 * C1744) *
                C9007 +
            (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
             C48494 * C1753 - C7740 * C1748) *
                C48102) *
               C48530 +
           ((C7732 * C1452 - C7738 * C1448 + C7733 * C1905 - C7739 * C1902 +
             C48494 * C9182 - C7740 * C9180) *
                C9007 +
            (C7732 * C1460 - C7738 * C1453 + C7733 * C1911 - C7739 * C1906 +
             C48494 * C9186 - C7740 * C9183) *
                C48102) *
               C48519 +
           ((C7732 * C2323 - C7738 * C2317 + C7733 * C9650 - C7739 * C9648 +
             C48494 * C9651 - C7740 * C9649) *
                C9007 +
            (C7732 * C2335 - C7738 * C2325 + C7733 * C9654 - C7739 * C9652 +
             C48494 * C9655 - C7740 * C9653) *
                C48102) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
            C2468 * C7743 + C2469 * C48481) *
               C48497) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C7741 +
            (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
            (C286 - C287) * C48513 + (C288 - C289) * C7743 +
            (C290 - C291) * C48481) *
               C14987 +
           ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
            (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
            (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
               C14988 +
           ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
            (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
            (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
               C48497) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C7741 +
            (C48199 * C590 - C113 * C581) * C48526 +
            (C48199 * C582 - C113 * C576) * C7742 +
            (C48199 * C591 - C113 * C583) * C48513 +
            (C48199 * C584 - C113 * C577) * C7743 +
            (C48199 * C592 - C113 * C585) * C48481) *
               C14987 +
           ((C48199 * C1452 - C113 * C1448) * C7741 +
            (C48199 * C1460 - C113 * C1453) * C48526 +
            (C48199 * C1454 - C113 * C1449) * C7742 +
            (C48199 * C1461 - C113 * C1455) * C48513 +
            (C48199 * C1456 - C113 * C1450) * C7743 +
            (C48199 * C1462 - C113 * C1457) * C48481) *
               C14988 +
           ((C48199 * C2323 - C113 * C2317) * C7741 +
            (C48199 * C2335 - C113 * C2325) * C48526 +
            (C48199 * C2327 - C113 * C2319) * C7742 +
            (C48199 * C2337 - C113 * C2329) * C48513 +
            (C48199 * C2331 - C113 * C2321) * C7743 +
            (C48199 * C2339 - C113 * C2333) * C48481) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
               C14988 +
           ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
            (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
               C48497) *
              C48188 * C571 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C9007 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C48102) *
               C14987 +
           ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
             C1066 * C1902 - C48494 * C1905) *
                C9007 +
            (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
             C1066 * C1906 - C48494 * C1911) *
                C48102) *
               C14988 +
           ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
             C1066 * C9648 - C48494 * C9650) *
                C9007 +
            (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
             C1066 * C9652 - C48494 * C9654) *
                C48102) *
               C48497) *
              C48188 * C572 +
          (((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
             C48494 * C1747 - C1066 * C1744) *
                C9007 +
            (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
             C48494 * C1753 - C1066 * C1748) *
                C48102) *
               C14987 +
           ((C48529 * C1452 - C1064 * C1448 + C48517 * C1905 - C1065 * C1902 +
             C48494 * C9182 - C1066 * C9180) *
                C9007 +
            (C48529 * C1460 - C1064 * C1453 + C48517 * C1911 - C1065 * C1906 +
             C48494 * C9186 - C1066 * C9183) *
                C48102) *
               C14988 +
           ((C48529 * C2323 - C1064 * C2317 + C48517 * C9650 - C1065 * C9648 +
             C48494 * C9651 - C1066 * C9649) *
                C9007 +
            (C48529 * C2335 - C1064 * C2325 + C48517 * C9654 - C1065 * C9652 +
             C48494 * C9655 - C1066 * C9653) *
                C48102) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C9007 +
            (C48199 * C140 - C113 * C127) * C48102) *
               C17450 +
           ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
           (C3662 * C9007 + C3663 * C48102) * C17452 +
           ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
           ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C9007 +
            (C113 * C266 - C48199 * C277) * C48102) *
               C17450 +
           ((C3240 - C3241) * C9007 + (C3242 - C3243) * C48102) * C17451 +
           ((C3244 - C3245) * C9007 + (C3246 - C3247) * C48102) * C17452 +
           ((C113 * C3227 - C48199 * C3230) * C9007 +
            (C113 * C3231 - C48199 * C3236) * C48102) *
               C17453 +
           ((C113 * C10938 - C48199 * C10940) * C9007 +
            (C113 * C10942 - C48199 * C10944) * C48102) *
               C17454) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C9007 +
            (C48199 * C590 - C113 * C581) * C48102) *
               C17450 +
           ((C48199 * C1452 - C113 * C1448) * C9007 +
            (C48199 * C1460 - C113 * C1453) * C48102) *
               C17451 +
           ((C48199 * C2323 - C113 * C2317) * C9007 +
            (C48199 * C2335 - C113 * C2325) * C48102) *
               C17452 +
           ((C48199 * C10064 - C113 * C10062) * C9007 +
            (C48199 * C10068 - C113 * C10065) * C48102) *
               C17453 +
           ((C48199 * C10941 - C113 * C10939) * C9007 +
            (C48199 * C10945 - C113 * C10943) * C48102) *
               C17454) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C381 +
               ((C113 * C383 - C48199 * C389) * C114 +
                (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48217 * C48491) *
                  C505 +
              (((C113 * C259 - C48199 * C265) * C114 +
                (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48217 * C381 +
               ((C48199 * C682 - C113 * C677) * C114 +
                (C48199 * C692 - C113 * C683) * C102 +
                (C48199 * C684 - C113 * C678) * C115 +
                (C48199 * C693 - C113 * C685) * C103 +
                (C48199 * C686 - C113 * C679) * C116 +
                (C48199 * C694 - C113 * C687) * C104 +
                (C48199 * C688 - C113 * C680) * C117 +
                (C48199 * C695 - C113 * C689) * C105 +
                (C48199 * C690 - C113 * C681) * C118 +
                (C48199 * C696 - C113 * C691) * C106) *
                   C48217 * C48491) *
                  C48489) *
             C48137 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C381 +
               ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
                 C1066 * C1448 - C48494 * C1452) *
                    C1067 +
                (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
                 C1066 * C1453 - C48494 * C1460) *
                    C1061 +
                (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
                (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
                (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
                (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
                   C48217 * C48491) *
                  C505 +
              (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
                 C1066 * C1262 - C48494 * C1266) *
                    C1067 +
                (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
                 C1066 * C1267 - C48494 * C1274) *
                    C1061 +
                (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
                (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
                (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
                (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
                   C48217 * C381 +
               ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
                 C48494 * C1905 - C1066 * C1902) *
                    C1067 +
                (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
                 C48494 * C1911 - C1066 * C1906) *
                    C1061 +
                (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
                 C48494 * C1907 - C1066 * C1903) *
                    C1068 +
                (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
                 C48494 * C1912 - C1066 * C1908) *
                    C1062 +
                (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
                 C48494 * C1909 - C1066 * C1904) *
                    C1069 +
                (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
                 C48494 * C1913 - C1066 * C1910) *
                    C48481) *
                   C48217 * C48491) *
                  C48489) *
             C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C3240 - C3241) * C1067 + (C3242 - C3243) * C1061 +
             (C2620 - C2621) * C1068 + (C2622 - C2623) * C1062 +
             (C2624 - C2625) * C1069 + (C2626 - C2627) * C48481) *
                C48519 +
            ((C3244 - C3245) * C1067 + (C3246 - C3247) * C1061 +
             (C2628 - C2629) * C1068 + (C2630 - C2631) * C1062 +
             (C2632 - C2633) * C1069 + (C2634 - C2635) * C48481) *
                C48497) *
               C381 +
           (((C3241 - C3240) * C1067 + (C3243 - C3242) * C1061 +
             (C2621 - C2620) * C1068 + (C2623 - C2622) * C1062 +
             (C2625 - C2624) * C1069 + (C2627 - C2626) * C48481) *
                C48530 +
            ((C3245 - C3244) * C1067 + (C3247 - C3246) * C1061 +
             (C2629 - C2628) * C1068 + (C2631 - C2630) * C1062 +
             (C2633 - C2632) * C1069 + (C2635 - C2634) * C48481) *
                C48519 +
            ((C48199 * C3230 - C113 * C3227) * C1067 +
             (C48199 * C3236 - C113 * C3231) * C1061 +
             (C48199 * C3232 - C113 * C3228) * C1068 +
             (C48199 * C3237 - C113 * C3233) * C1062 +
             (C48199 * C3234 - C113 * C3229) * C1069 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C381 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C505 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C505 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C9007 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48102) *
                C48519 +
            ((C10525 - C10526 + C10527 - C10528 + C10529 - C10530) * C9007 +
             (C10531 - C10532 + C10533 - C10534 + C10535 - C10536) * C48102) *
                C48497) *
               C381 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C9007 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48102) *
                C48530 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C9007 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48102) *
                C48519 +
            ((C7732 * C3230 - C7738 * C3227 + C7733 * C10064 - C7739 * C10062 +
              C48494 * C10509 - C7740 * C10508) *
                 C9007 +
             (C7732 * C3236 - C7738 * C3231 + C7733 * C10068 - C7739 * C10065 +
              C48494 * C10511 - C7740 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C381 +
           (((C3241 - C3240) * C7741 + (C3243 - C3242) * C48526 +
             (C2621 - C2620) * C7742 + (C2623 - C2622) * C48513 +
             (C2625 - C2624) * C7743 + (C2627 - C2626) * C48481) *
                C14987 +
            ((C3245 - C3244) * C7741 + (C3247 - C3246) * C48526 +
             (C2629 - C2628) * C7742 + (C2631 - C2630) * C48513 +
             (C2633 - C2632) * C7743 + (C2635 - C2634) * C48481) *
                C14988 +
            ((C48199 * C3230 - C113 * C3227) * C7741 +
             (C48199 * C3236 - C113 * C3231) * C48526 +
             (C48199 * C3232 - C113 * C3228) * C7742 +
             (C48199 * C3237 - C113 * C3233) * C48513 +
             (C48199 * C3234 - C113 * C3229) * C7743 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C505 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C9007 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C48102) *
                C14988 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C9007 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48102) *
                C48497) *
               C381 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C9007 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C48102) *
                C14987 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C9007 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48102) *
                C14988 +
            ((C48529 * C3230 - C1064 * C3227 + C48517 * C10064 -
              C1065 * C10062 + C48494 * C10509 - C1066 * C10508) *
                 C9007 +
             (C48529 * C3236 - C1064 * C3231 + C48517 * C10068 -
              C1065 * C10065 + C48494 * C10511 - C1066 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
               C381 +
           (((C2799 - C2798) * C9007 + (C2801 - C2800) * C48102) * C17450 +
            ((C2805 - C2804) * C9007 + (C2807 - C2806) * C48102) * C17451 +
            ((C3668 - C3669) * C9007 + (C3670 - C3671) * C48102) * C17452 +
            ((C17633 - C17632) * C9007 + (C17635 - C17634) * C48102) * C17453 +
            ((C113 * C17623 - C48199 * C17625) * C9007 +
             (C113 * C17626 - C48199 * C17629) * C48102) *
                C17454) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C9007 +
             (C113 * C266 - C48199 * C277) * C48102) *
                C17450 +
            ((C3240 - C3241) * C9007 + (C3242 - C3243) * C48102) * C17451 +
            ((C3244 - C3245) * C9007 + (C3246 - C3247) * C48102) * C17452 +
            ((C17870 - C17871) * C9007 + (C17872 - C17873) * C48102) * C17453 +
            ((C17874 - C17875) * C9007 + (C17876 - C17877) * C48102) * C17454) *
               C381 +
           (((C3241 - C3240) * C9007 + (C3243 - C3242) * C48102) * C17450 +
            ((C3245 - C3244) * C9007 + (C3247 - C3246) * C48102) * C17451 +
            ((C17871 - C17870) * C9007 + (C17873 - C17872) * C48102) * C17452 +
            ((C17875 - C17874) * C9007 + (C17877 - C17876) * C48102) * C17453 +
            ((C48199 * C17866 - C113 * C17865) * C9007 +
             (C48199 * C17868 - C113 * C17867) * C48102) *
                C17454) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C779 +
               ((C113 * C383 - C48199 * C389) * C114 +
                (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48217 * C48491) *
                  C48171 * C507 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48217 * C779 +
               ((C409 - C408) * C114 + (C411 - C410) * C102 +
                (C413 - C412) * C115 + (C415 - C414) * C103 +
                (C417 - C416) * C116 + (C419 - C418) * C104 +
                (C421 - C420) * C117 + (C423 - C422) * C105 +
                (C48199 * C399 - C113 * C388) * C118 +
                (C48199 * C406 - C113 * C400) * C106) *
                   C48217 * C48491) *
                  C48171 * C48487) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C779 +
               ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
                 C1066 * C1448 - C48494 * C1452) *
                    C1067 +
                (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
                 C1066 * C1453 - C48494 * C1460) *
                    C1061 +
                (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
                (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
                (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
                (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
                   C48217 * C48491) *
                  C48171 * C507 +
              (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
                (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
                (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
                (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
                (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
                (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
                   C48217 * C779 +
               ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
                (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
                (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
                (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
                (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
                 C48494 * C1458 - C1066 * C1451) *
                    C1069 +
                (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
                 C48494 * C1463 - C1066 * C1459) *
                    C48481) *
                   C48217 * C48491) *
                  C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C779 +
           ((C2802 * C1067 + C2803 * C1061 + C2454 * C1068 + C2455 * C1062 +
             (C417 - C416) * C1069 + (C419 - C418) * C48481) *
                C48530 +
            (C2808 * C1067 + C2809 * C1061 + C2468 * C1068 + C2469 * C1062 +
             (C2465 - C2464) * C1069 + (C2467 - C2466) * C48481) *
                C48519 +
            ((C2819 - C2818) * C1067 + (C2821 - C2820) * C1061 +
             (C2823 - C2822) * C1068 + (C2825 - C2824) * C1062 +
             (C48199 * C2791 - C113 * C2784) * C1069 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C779 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C779 +
           (((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C9007 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48102) *
                C48530 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C9007 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48102) *
                C48519 +
            ((C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
              C48494 * C10066 - C7740 * C10063) *
                 C9007 +
             (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
              C48494 * C10069 - C7740 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C779 +
           ((C2802 * C7741 + C2803 * C48526 + C2454 * C7742 + C2455 * C48513 +
             C4957 * C7743 + C4958 * C48481) *
                C14987 +
            (C2808 * C7741 + C2809 * C48526 + C2468 * C7742 + C2469 * C48513 +
             (C2465 - C2464) * C7743 + (C2467 - C2466) * C48481) *
                C14988 +
            ((C2819 - C2818) * C7741 + (C2821 - C2820) * C48526 +
             (C2823 - C2822) * C7742 + (C2825 - C2824) * C48513 +
             (C48199 * C2791 - C113 * C2784) * C7743 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C779 +
           (((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C9007 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48102) *
                C14987 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C9007 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48102) *
                C14988 +
            ((C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
              C48494 * C10066 - C1066 * C10063) *
                 C9007 +
             (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
              C48494 * C10069 - C1066 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
               C779 +
           (((C2799 - C2798) * C9007 + (C2801 - C2800) * C48102) * C17450 +
            ((C2805 - C2804) * C9007 + (C2807 - C2806) * C48102) * C17451 +
            ((C3668 - C3669) * C9007 + (C3670 - C3671) * C48102) * C17452 +
            ((C17633 - C17632) * C9007 + (C17635 - C17634) * C48102) * C17453 +
            ((C113 * C17623 - C48199 * C17625) * C9007 +
             (C113 * C17626 - C48199 * C17629) * C48102) *
                C17454) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C9007 + (C151 - C150) * C48102) * C17450 +
            (C2810 * C9007 + C2811 * C48102) * C17451 +
            (C2814 * C9007 + C2815 * C48102) * C17452 +
            ((C2818 - C2819) * C9007 + (C2820 - C2821) * C48102) * C17453 +
            ((C17636 - C17637) * C9007 + (C17638 - C17639) * C48102) * C17454) *
               C779 +
           ((C2802 * C9007 + C2803 * C48102) * C17450 +
            (C2808 * C9007 + C2809 * C48102) * C17451 +
            ((C2819 - C2818) * C9007 + (C2821 - C2820) * C48102) * C17452 +
            ((C17637 - C17636) * C9007 + (C17639 - C17638) * C48102) * C17453 +
            ((C48199 * C17627 - C113 * C17624) * C9007 +
             (C48199 * C17630 - C113 * C17628) * C48102) *
                C17454) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48199 * C126 - C113 * C119) * C114 +
                (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48217 * C779 +
               ((C113 * C383 - C48199 * C389) * C114 +
                (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48217 * C48491) *
                  C255 +
              (((C113 * C259 - C48199 * C265) * C114 +
                (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48217 * C779 +
               ((C48199 * C682 - C113 * C677) * C114 +
                (C48199 * C692 - C113 * C683) * C102 +
                (C48199 * C684 - C113 * C678) * C115 +
                (C48199 * C693 - C113 * C685) * C103 +
                (C48199 * C686 - C113 * C679) * C116 +
                (C48199 * C694 - C113 * C687) * C104 +
                (C48199 * C688 - C113 * C680) * C117 +
                (C48199 * C695 - C113 * C689) * C105 +
                (C48199 * C690 - C113 * C681) * C118 +
                (C48199 * C696 - C113 * C691) * C106) *
                   C48217 * C48491) *
                  C48489) *
             C48137 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                 C48494 * C580 - C1066 * C575) *
                    C1067 +
                (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                 C48494 * C590 - C1066 * C581) *
                    C1061 +
                (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
                (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
                C1115 * C1069 + C1116 * C48481) *
                   C48217 * C779 +
               ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
                 C1066 * C1448 - C48494 * C1452) *
                    C1067 +
                (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
                 C1066 * C1453 - C48494 * C1460) *
                    C1061 +
                (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
                (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
                (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
                (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
                   C48217 * C48491) *
                  C255 +
              (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
                 C1066 * C1262 - C48494 * C1266) *
                    C1067 +
                (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
                 C1066 * C1267 - C48494 * C1274) *
                    C1061 +
                (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
                (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
                (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
                (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
                   C48217 * C779 +
               ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
                 C48494 * C1905 - C1066 * C1902) *
                    C1067 +
                (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
                 C48494 * C1911 - C1066 * C1906) *
                    C1061 +
                (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
                 C48494 * C1907 - C1066 * C1903) *
                    C1068 +
                (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
                 C48494 * C1912 - C1066 * C1908) *
                    C1062 +
                (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
                 C48494 * C1909 - C1066 * C1904) *
                    C1069 +
                (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
                 C48494 * C1913 - C1066 * C1910) *
                    C48481) *
                   C48217 * C48491) *
                  C48489) *
             C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C3240 - C3241) * C1067 + (C3242 - C3243) * C1061 +
             (C2620 - C2621) * C1068 + (C2622 - C2623) * C1062 +
             (C2624 - C2625) * C1069 + (C2626 - C2627) * C48481) *
                C48519 +
            ((C3244 - C3245) * C1067 + (C3246 - C3247) * C1061 +
             (C2628 - C2629) * C1068 + (C2630 - C2631) * C1062 +
             (C2632 - C2633) * C1069 + (C2634 - C2635) * C48481) *
                C48497) *
               C779 +
           (((C3241 - C3240) * C1067 + (C3243 - C3242) * C1061 +
             (C2621 - C2620) * C1068 + (C2623 - C2622) * C1062 +
             (C2625 - C2624) * C1069 + (C2627 - C2626) * C48481) *
                C48530 +
            ((C3245 - C3244) * C1067 + (C3247 - C3246) * C1061 +
             (C2629 - C2628) * C1068 + (C2631 - C2630) * C1062 +
             (C2633 - C2632) * C1069 + (C2635 - C2634) * C48481) *
                C48519 +
            ((C48199 * C3230 - C113 * C3227) * C1067 +
             (C48199 * C3236 - C113 * C3231) * C1061 +
             (C48199 * C3232 - C113 * C3228) * C1068 +
             (C48199 * C3237 - C113 * C3233) * C1062 +
             (C48199 * C3234 - C113 * C3229) * C1069 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C779 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C255 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C255 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C9007 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48102) *
                C48519 +
            ((C10525 - C10526 + C10527 - C10528 + C10529 - C10530) * C9007 +
             (C10531 - C10532 + C10533 - C10534 + C10535 - C10536) * C48102) *
                C48497) *
               C779 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C9007 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48102) *
                C48530 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C9007 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48102) *
                C48519 +
            ((C7732 * C3230 - C7738 * C3227 + C7733 * C10064 - C7739 * C10062 +
              C48494 * C10509 - C7740 * C10508) *
                 C9007 +
             (C7732 * C3236 - C7738 * C3231 + C7733 * C10068 - C7739 * C10065 +
              C48494 * C10511 - C7740 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C779 +
           (((C3241 - C3240) * C7741 + (C3243 - C3242) * C48526 +
             (C2621 - C2620) * C7742 + (C2623 - C2622) * C48513 +
             (C2625 - C2624) * C7743 + (C2627 - C2626) * C48481) *
                C14987 +
            ((C3245 - C3244) * C7741 + (C3247 - C3246) * C48526 +
             (C2629 - C2628) * C7742 + (C2631 - C2630) * C48513 +
             (C2633 - C2632) * C7743 + (C2635 - C2634) * C48481) *
                C14988 +
            ((C48199 * C3230 - C113 * C3227) * C7741 +
             (C48199 * C3236 - C113 * C3231) * C48526 +
             (C48199 * C3232 - C113 * C3228) * C7742 +
             (C48199 * C3237 - C113 * C3233) * C48513 +
             (C48199 * C3234 - C113 * C3229) * C7743 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C255 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C9007 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C48102) *
                C14988 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C9007 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48102) *
                C48497) *
               C779 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C9007 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C48102) *
                C14987 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C9007 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48102) *
                C14988 +
            ((C48529 * C3230 - C1064 * C3227 + C48517 * C10064 -
              C1065 * C10062 + C48494 * C10509 - C1066 * C10508) *
                 C9007 +
             (C48529 * C3236 - C1064 * C3231 + C48517 * C10068 -
              C1065 * C10065 + C48494 * C10511 - C1066 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C9007 +
             (C48199 * C140 - C113 * C127) * C48102) *
                C17450 +
            ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
            (C3662 * C9007 + C3663 * C48102) * C17452 +
            ((C3669 - C3668) * C9007 + (C3671 - C3670) * C48102) * C17453 +
            ((C17632 - C17633) * C9007 + (C17634 - C17635) * C48102) * C17454) *
               C779 +
           (((C2799 - C2798) * C9007 + (C2801 - C2800) * C48102) * C17450 +
            ((C2805 - C2804) * C9007 + (C2807 - C2806) * C48102) * C17451 +
            ((C3668 - C3669) * C9007 + (C3670 - C3671) * C48102) * C17452 +
            ((C17633 - C17632) * C9007 + (C17635 - C17634) * C48102) * C17453 +
            ((C113 * C17623 - C48199 * C17625) * C9007 +
             (C113 * C17626 - C48199 * C17629) * C48102) *
                C17454) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C9007 +
             (C113 * C266 - C48199 * C277) * C48102) *
                C17450 +
            ((C3240 - C3241) * C9007 + (C3242 - C3243) * C48102) * C17451 +
            ((C3244 - C3245) * C9007 + (C3246 - C3247) * C48102) * C17452 +
            ((C17870 - C17871) * C9007 + (C17872 - C17873) * C48102) * C17453 +
            ((C17874 - C17875) * C9007 + (C17876 - C17877) * C48102) * C17454) *
               C779 +
           (((C3241 - C3240) * C9007 + (C3243 - C3242) * C48102) * C17450 +
            ((C3245 - C3244) * C9007 + (C3247 - C3246) * C48102) * C17451 +
            ((C17871 - C17870) * C9007 + (C17873 - C17872) * C48102) * C17452 +
            ((C17875 - C17874) * C9007 + (C17877 - C17876) * C48102) * C17453 +
            ((C48199 * C17866 - C113 * C17865) * C9007 +
             (C48199 * C17868 - C113 * C17867) * C48102) *
                C17454) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48199 * C126 - C113 * C119) * C114 +
               (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48217 * C925 +
              ((C113 * C383 - C48199 * C389) * C114 +
               (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
               (C410 - C411) * C103 + (C412 - C413) * C116 +
               (C414 - C415) * C104 + (C416 - C417) * C117 +
               (C418 - C419) * C105 + (C420 - C421) * C118 +
               (C422 - C423) * C106) *
                  C48217 * C926 +
              ((C48199 * C933 - C113 * C928) * C114 +
               (C48199 * C943 - C113 * C934) * C102 +
               (C48199 * C935 - C113 * C929) * C115 +
               (C48199 * C944 - C113 * C936) * C103 +
               (C48199 * C937 - C113 * C930) * C116 +
               (C48199 * C945 - C113 * C938) * C104 +
               (C48199 * C939 - C113 * C931) * C117 +
               (C48199 * C946 - C113 * C940) * C105 +
               (C48199 * C941 - C113 * C932) * C118 +
               (C48199 * C947 - C113 * C942) * C106) *
                  C48217 * C927) *
             C48171 * C48137 +
         0.5 * std::pow(Pi, 2.5) *
             (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
                C48494 * C580 - C1066 * C575) *
                   C1067 +
               (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
                C48494 * C590 - C1066 * C581) *
                   C1061 +
               (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
               (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
               C1115 * C1069 + C1116 * C48481) *
                  C48217 * C925 +
              ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
                C1066 * C1448 - C48494 * C1452) *
                   C1067 +
               (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
                C1066 * C1453 - C48494 * C1460) *
                   C1061 +
               (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
               (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
               (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
               (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
                  C48217 * C926 +
              ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
                C48494 * C2323 - C1066 * C2317) *
                   C1067 +
               (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
                C48494 * C2335 - C1066 * C2325) *
                   C1061 +
               (C48529 * C935 - C1064 * C929 + C48517 * C2326 - C1065 * C2318 +
                C48494 * C2327 - C1066 * C2319) *
                   C1068 +
               (C48529 * C944 - C1064 * C936 + C48517 * C2336 - C1065 * C2328 +
                C48494 * C2337 - C1066 * C2329) *
                   C1062 +
               (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
                C48494 * C2331 - C1066 * C2321) *
                   C1069 +
               (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
                C48494 * C2339 - C1066 * C2333) *
                   C48481) *
                  C48217 * C927) *
             C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
            C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           C3678 * C48497) *
              C925 +
          (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
            C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
               C48530 +
           ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
            C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
               C48519 +
           ((C3668 - C3669) * C1067 + (C3670 - C3671) * C1061 +
            (C2818 - C2819) * C1068 + (C2820 - C2821) * C1062 +
            (C2822 - C2823) * C1069 + (C2824 - C2825) * C48481) *
               C48497) *
              C926 +
          (C3678 * C48530 +
           ((C3669 - C3668) * C1067 + (C3671 - C3670) * C1061 +
            (C2819 - C2818) * C1068 + (C2821 - C2820) * C1062 +
            (C2823 - C2822) * C1069 + (C2825 - C2824) * C48481) *
               C48519 +
           ((C48199 * C3652 - C113 * C3649) * C1067 +
            (C48199 * C3658 - C113 * C3653) * C1061 +
            (C48199 * C3654 - C113 * C3650) * C1068 +
            (C48199 * C3659 - C113 * C3655) * C1062 +
            (C48199 * C3656 - C113 * C3651) * C1069 +
            (C48199 * C3660 - C113 * C3657) * C48481) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C925 +
          ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
            C7740 * C1448 - C48494 * C1452) *
               C7741 +
           (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
            C7740 * C1453 - C48494 * C1460) *
               C48526 +
           (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
           (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
           (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
           (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
              C48217 * C926 +
          ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
            C48494 * C2323 - C7740 * C2317) *
               C7741 +
           (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
            C48494 * C2335 - C7740 * C2325) *
               C48526 +
           (C7732 * C935 - C7738 * C929 + C7733 * C2326 - C7739 * C2318 +
            C48494 * C2327 - C7740 * C2319) *
               C7742 +
           (C7732 * C944 - C7738 * C936 + C7733 * C2336 - C7739 * C2328 +
            C48494 * C2337 - C7740 * C2329) *
               C48513 +
           (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
            C48494 * C2331 - C7740 * C2321) *
               C7743 +
           (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
            C48494 * C2339 - C7740 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C925 +
          ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
            C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
            C9006 * C9180 - C9000 * C9182) *
               C9007 +
           (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
            C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
            C9006 * C9183 - C9000 * C9186) *
               C48102) *
              C48217 * C926 +
          ((C8996 * C933 - C9002 * C928 + C8997 * C2322 - C9003 * C2316 +
            C8998 * C2323 - C9004 * C2317 + C8999 * C9650 - C9005 * C9648 +
            C9000 * C9651 - C9006 * C9649) *
               C9007 +
           (C8996 * C943 - C9002 * C934 + C8997 * C2334 - C9003 * C2324 +
            C8998 * C2335 - C9004 * C2325 + C8999 * C9654 - C9005 * C9652 +
            C9000 * C9655 - C9006 * C9653) *
               C48102) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
               C48519 +
           C10971 * C48497) *
              C925 +
          (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
            (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
               C48530 +
           ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
            (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
               C48519 +
           ((C10953 - C10954 + C10955 - C10956 + C10957 - C10958) * C9007 +
            (C10959 - C10960 + C10961 - C10962 + C10963 - C10964) * C48102) *
               C48497) *
              C926 +
          (C10971 * C48530 +
           ((C10954 - C10953 + C10956 - C10955 + C10958 - C10957) * C9007 +
            (C10960 - C10959 + C10962 - C10961 + C10964 - C10963) * C48102) *
               C48519 +
           ((C7732 * C3652 - C7738 * C3649 + C7733 * C10940 - C7739 * C10938 +
             C48494 * C10941 - C7740 * C10939) *
                C9007 +
            (C7732 * C3658 - C7738 * C3653 + C7733 * C10944 - C7739 * C10942 +
             C48494 * C10945 - C7740 * C10943) *
                C48102) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           C16097 * C48497) *
              C925 +
          (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 + C2810 * C7742 +
            C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
               C14987 +
           ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 + C2814 * C7742 +
            C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
               C14988 +
           ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
            (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
            (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
               C48497) *
              C926 +
          (C16097 * C14987 +
           ((C3669 - C3668) * C7741 + (C3671 - C3670) * C48526 +
            (C2819 - C2818) * C7742 + (C2821 - C2820) * C48513 +
            (C2823 - C2822) * C7743 + (C2825 - C2824) * C48481) *
               C14988 +
           ((C48199 * C3652 - C113 * C3649) * C7741 +
            (C48199 * C3658 - C113 * C3653) * C48526 +
            (C48199 * C3654 - C113 * C3650) * C7742 +
            (C48199 * C3659 - C113 * C3655) * C48513 +
            (C48199 * C3656 - C113 * C3651) * C7743 +
            (C48199 * C3660 - C113 * C3657) * C48481) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
               C14988 +
           C17388 * C48497) *
              C925 +
          (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
            (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
               C14987 +
           ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
            (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
               C14988 +
           ((C17370 - C17371 + C17372 - C17373 + C17374 - C17375) * C9007 +
            (C17376 - C17377 + C17378 - C17379 + C17380 - C17381) * C48102) *
               C48497) *
              C926 +
          (C17388 * C14987 +
           ((C17371 - C17370 + C17373 - C17372 + C17375 - C17374) * C9007 +
            (C17377 - C17376 + C17379 - C17378 + C17381 - C17380) * C48102) *
               C14988 +
           ((C48529 * C3652 - C1064 * C3649 + C48517 * C10940 - C1065 * C10938 +
             C48494 * C10941 - C1066 * C10939) *
                C9007 +
            (C48529 * C3658 - C1064 * C3653 + C48517 * C10944 - C1065 * C10942 +
             C48494 * C10945 - C1066 * C10943) *
                C48102) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C9007 +
            (C48199 * C140 - C113 * C127) * C48102) *
               C17450 +
           ((C2798 - C2799) * C9007 + (C2800 - C2801) * C48102) * C17451 +
           C18118 * C17452 + C18123 * C17453 + C18124 * C17454) *
              C925 +
          (((C2799 - C2798) * C9007 + (C2801 - C2800) * C48102) * C17450 +
           ((C2805 - C2804) * C9007 + (C2807 - C2806) * C48102) * C17451 +
           ((C3668 - C3669) * C9007 + (C3670 - C3671) * C48102) * C17452 +
           ((C17633 - C17632) * C9007 + (C17635 - C17634) * C48102) * C17453 +
           ((C18114 - C18115) * C9007 + (C18116 - C18117) * C48102) * C17454) *
              C926 +
          (C18118 * C17450 + C18123 * C17451 + C18124 * C17452 +
           ((C18115 - C18114) * C9007 + (C18117 - C18116) * C48102) * C17453 +
           ((C48199 * C18104 - C113 * C18103) * C9007 +
            (C48199 * C18106 - C113 * C18105) * C48102) *
               C17454) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            (C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C47206 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
               C48462 +
           ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C47225 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48439 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C7789 * C47225 + C7790 * C48439 +
            (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C47206 +
            (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48112) *
               C48462 +
           ((C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47225 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48439 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C47206 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C3784 + (C151 - C150) * C3778 +
            (C153 - C152) * C3785 + (C155 - C154) * C3779 +
            (C157 - C156) * C3786 + (C159 - C158) * C3780 +
            (C161 - C160) * C3787 + (C163 - C162) * C48498) *
               C48462 +
           (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
            (C416 - C417) * C3786 + (C418 - C419) * C3780 +
            (C420 - C421) * C3787 + (C422 - C423) * C48498) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C168 * C3784 + C169 * C3778 + C170 * C3785 + C171 * C3779 +
            C172 * C3786 + C173 * C3780 + (C165 - C164) * C3787 +
            (C167 - C166) * C48498) *
               C48462 +
           (C2454 * C3784 + C2455 * C3778 + C4957 * C3785 + C4958 * C3779 +
            (C421 - C420) * C3786 + (C423 - C422) * C3780 +
            (C48199 * C399 - C113 * C388) * C3787 +
            (C48199 * C406 - C113 * C400) * C48498) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47225 +
            (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
            (C150 - C151) * C48112) *
               C19881 +
           ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
            C2802 * C47206 + C2803 * C48112) *
               C19882 +
           (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 + C2809 * C48112) *
               C19883 +
           (C18110 * C47225 + C18111 * C48439 + (C2819 - C2818) * C47206 +
            (C2821 - C2820) * C48112) *
               C48510) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C47225 + (C151 - C150) * C48439 +
            (C153 - C152) * C47206 + (C155 - C154) * C48112) *
               C19881 +
           (C2810 * C47225 + C2811 * C48439 + C2812 * C47206 + C2813 * C48112) *
               C19882 +
           (C2814 * C47225 + C2815 * C48439 + C2816 * C47206 + C2817 * C48112) *
               C19883 +
           ((C2818 - C2819) * C47225 + (C2820 - C2821) * C48439 +
            (C2822 - C2823) * C47206 + (C2824 - C2825) * C48112) *
               C48510) *
              C48188 * C48171 * C111 +
          ((C168 * C47225 + C169 * C48439 + C170 * C47206 + C171 * C48112) *
               C19881 +
           (C2454 * C47225 + C2455 * C48439 + C4957 * C47206 + C4958 * C48112) *
               C19882 +
           (C2468 * C47225 + C2469 * C48439 + (C2465 - C2464) * C47206 +
            (C2467 - C2466) * C48112) *
               C19883 +
           ((C2823 - C2822) * C47225 + (C2825 - C2824) * C48439 +
            (C48199 * C2791 - C113 * C2784) * C47206 +
            (C48199 * C2796 - C113 * C2792) * C48112) *
               C48510) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             (C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C47206 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C47225 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C47225 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48439 +
             (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C47206 +
             (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48112) *
                C48462 +
            ((C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47225 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48439 +
             (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
              C48494 * C1909 - C7740 * C1904) *
                 C47206 +
             (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
              C48494 * C1913 - C7740 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             (C416 - C417) * C3786 + (C418 - C419) * C3780 +
             (C420 - C421) * C3787 + (C422 - C423) * C48498) *
                C48304) *
               C48188 * C255 +
           (((C285 - C284) * C3784 + (C287 - C286) * C3778 +
             (C289 - C288) * C3785 + (C291 - C290) * C3779 +
             (C293 - C292) * C3786 + (C295 - C294) * C3780 +
             (C297 - C296) * C3787 + (C299 - C298) * C48498) *
                C48462 +
            ((C2621 - C2620) * C3784 + (C2623 - C2622) * C3778 +
             (C2625 - C2624) * C3785 + (C2627 - C2626) * C3779 +
             (C5090 - C5089) * C3786 + (C5092 - C5091) * C3780 +
             (C48199 * C690 - C113 * C681) * C3787 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + (C2819 - C2818) * C47206 +
             (C2821 - C2820) * C48112) *
                C48510) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C47225 +
             (C113 * C266 - C48199 * C277) * C48439 + (C284 - C285) * C47206 +
             (C286 - C287) * C48112) *
                C19881 +
            ((C3240 - C3241) * C47225 + (C3242 - C3243) * C48439 +
             (C2620 - C2621) * C47206 + (C2622 - C2623) * C48112) *
                C19882 +
            ((C3244 - C3245) * C47225 + (C3246 - C3247) * C48439 +
             (C2628 - C2629) * C47206 + (C2630 - C2631) * C48112) *
                C19883 +
            ((C17870 - C17871) * C47225 + (C17872 - C17873) * C48439 +
             (C20016 - C20017) * C47206 + (C20018 - C20019) * C48112) *
                C48510) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48439 +
             (C153 - C152) * C47206 + (C155 - C154) * C48112) *
                C19881 +
            (C2810 * C47225 + C2811 * C48439 + C2812 * C47206 +
             C2813 * C48112) *
                C19882 +
            (C2814 * C47225 + C2815 * C48439 + C2816 * C47206 +
             C2817 * C48112) *
                C19883 +
            ((C2818 - C2819) * C47225 + (C2820 - C2821) * C48439 +
             (C2822 - C2823) * C47206 + (C2824 - C2825) * C48112) *
                C48510) *
               C48188 * C255 +
           (((C285 - C284) * C47225 + (C287 - C286) * C48439 +
             (C289 - C288) * C47206 + (C291 - C290) * C48112) *
                C19881 +
            ((C2621 - C2620) * C47225 + (C2623 - C2622) * C48439 +
             (C2625 - C2624) * C47206 + (C2627 - C2626) * C48112) *
                C19882 +
            ((C2629 - C2628) * C47225 + (C2631 - C2630) * C48439 +
             (C2633 - C2632) * C47206 + (C2635 - C2634) * C48112) *
                C19883 +
            ((C20017 - C20016) * C47225 + (C20019 - C20018) * C48439 +
             (C48199 * C3234 - C113 * C3229) * C47206 +
             (C48199 * C3238 - C113 * C3235) * C48112) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C381 +
           ((C12684 * C47225 + C12685 * C48439 +
             (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47206 +
             (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48112) *
                C48462 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47225 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48439 +
             (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
              C48494 * C2331 - C7740 * C2321) *
                 C47206 +
             (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
              C48494 * C2339 - C7740 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C381 +
           ((C2802 * C3784 + C2803 * C3778 + C2454 * C3785 + C2455 * C3779 +
             C4957 * C3786 + C4958 * C3780 + (C421 - C420) * C3787 +
             (C423 - C422) * C48498) *
                C48462 +
            (C2808 * C3784 + C2809 * C3778 + C2468 * C3785 + C2469 * C3779 +
             (C2465 - C2464) * C3786 + (C2467 - C2466) * C3780 +
             (C48199 * C941 - C113 * C932) * C3787 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
             C20151 * C48112) *
                C48510) *
               C381 +
           (((C2799 - C2798) * C47225 + (C2801 - C2800) * C48439 +
             C2810 * C47206 + C2811 * C48112) *
                C19881 +
            ((C2805 - C2804) * C47225 + (C2807 - C2806) * C48439 +
             C2814 * C47206 + C2815 * C48112) *
                C19882 +
            ((C3668 - C3669) * C47225 + (C3670 - C3671) * C48439 +
             C20152 * C47206 + C20153 * C48112) *
                C19883 +
            ((C17633 - C17632) * C47225 + (C17635 - C17634) * C48439 +
             (C17636 - C17637) * C47206 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48439 +
             (C153 - C152) * C47206 + (C155 - C154) * C48112) *
                C19881 +
            (C2810 * C47225 + C2811 * C48439 + C2812 * C47206 +
             C2813 * C48112) *
                C19882 +
            (C2814 * C47225 + C2815 * C48439 + C2816 * C47206 +
             C2817 * C48112) *
                C19883 +
            (C20152 * C47225 + C20153 * C48439 + (C2822 - C2823) * C47206 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C381 +
           ((C2802 * C47225 + C2803 * C48439 + C2454 * C47206 +
             C2455 * C48112) *
                C19881 +
            (C2808 * C47225 + C2809 * C48439 + C2468 * C47206 +
             C2469 * C48112) *
                C19882 +
            (C20150 * C47225 + C20151 * C48439 + (C2823 - C2822) * C47206 +
             (C2825 - C2824) * C48112) *
                C19883 +
            ((C17637 - C17636) * C47225 + (C17639 - C17638) * C48439 +
             (C48199 * C3656 - C113 * C3651) * C47206 +
             (C48199 * C3660 - C113 * C3657) * C48112) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C47225 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48439 +
             (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C47206 +
             (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48112) *
                C48462 +
            ((C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47225 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48439 +
             (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
              C48494 * C1909 - C7740 * C1904) *
                 C47206 +
             (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
              C48494 * C1913 - C7740 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C505 +
           (((C285 - C284) * C3784 + (C287 - C286) * C3778 +
             (C289 - C288) * C3785 + (C291 - C290) * C3779 +
             (C293 - C292) * C3786 + (C295 - C294) * C3780 +
             (C297 - C296) * C3787 + (C299 - C298) * C48498) *
                C48462 +
            ((C2621 - C2620) * C3784 + (C2623 - C2622) * C3778 +
             (C2625 - C2624) * C3785 + (C2627 - C2626) * C3779 +
             (C5090 - C5089) * C3786 + (C5092 - C5091) * C3780 +
             (C48199 * C690 - C113 * C681) * C3787 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
             C20151 * C48112) *
                C48510) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C47225 +
             (C113 * C266 - C48199 * C277) * C48439 + (C284 - C285) * C47206 +
             (C286 - C287) * C48112) *
                C19881 +
            ((C3240 - C3241) * C47225 + (C3242 - C3243) * C48439 +
             (C2620 - C2621) * C47206 + (C2622 - C2623) * C48112) *
                C19882 +
            ((C3244 - C3245) * C47225 + (C3246 - C3247) * C48439 +
             (C2628 - C2629) * C47206 + (C2630 - C2631) * C48112) *
                C19883 +
            ((C17870 - C17871) * C47225 + (C17872 - C17873) * C48439 +
             (C20016 - C20017) * C47206 + (C20018 - C20019) * C48112) *
                C48510) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48439 +
             (C153 - C152) * C47206 + (C155 - C154) * C48112) *
                C19881 +
            (C2810 * C47225 + C2811 * C48439 + C2812 * C47206 +
             C2813 * C48112) *
                C19882 +
            (C2814 * C47225 + C2815 * C48439 + C2816 * C47206 +
             C2817 * C48112) *
                C19883 +
            (C20152 * C47225 + C20153 * C48439 + (C2822 - C2823) * C47206 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C48188 * C505 +
           (((C285 - C284) * C47225 + (C287 - C286) * C48439 +
             (C289 - C288) * C47206 + (C291 - C290) * C48112) *
                C19881 +
            ((C2621 - C2620) * C47225 + (C2623 - C2622) * C48439 +
             (C2625 - C2624) * C47206 + (C2627 - C2626) * C48112) *
                C19882 +
            ((C2629 - C2628) * C47225 + (C2631 - C2630) * C48439 +
             (C2633 - C2632) * C47206 + (C2635 - C2634) * C48112) *
                C19883 +
            ((C20017 - C20016) * C47225 + (C20019 - C20018) * C48439 +
             (C48199 * C3234 - C113 * C3229) * C47206 +
             (C48199 * C3238 - C113 * C3235) * C48112) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            C12684 * C47206 + C12685 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C47225 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48439 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
               C48462 +
           ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
            (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
            (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
            (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
             C48494 * C1747 - C7740 * C1744) *
                C47225 +
            (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
             C48494 * C1753 - C7740 * C1748) *
                C48439 +
            (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
             C48494 * C1749 - C7740 * C1745) *
                C47206 +
            (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
             C48494 * C1754 - C7740 * C1750) *
                C48112) *
               C48462 +
           ((C7732 * C1452 - C7738 * C1448 + C7733 * C1905 - C7739 * C1902 +
             C48494 * C9182 - C7740 * C9180) *
                C47225 +
            (C7732 * C1460 - C7738 * C1453 + C7733 * C1911 - C7739 * C1906 +
             C48494 * C9186 - C7740 * C9183) *
                C48439 +
            (C7732 * C1454 - C7738 * C1449 + C7733 * C1907 - C7739 * C1903 +
             C48494 * C9184 - C7740 * C9181) *
                C47206 +
            (C7732 * C1461 - C7738 * C1455 + C7733 * C1912 - C7739 * C1908 +
             C48494 * C9187 - C7740 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C3784 +
            (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
            (C286 - C287) * C3779 + (C288 - C289) * C3786 +
            (C290 - C291) * C3780 + (C292 - C293) * C3787 +
            (C294 - C295) * C48498) *
               C48462 +
           ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
            (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
            (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
            (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
               C48304) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C3784 +
            (C48199 * C590 - C113 * C581) * C3778 +
            (C48199 * C582 - C113 * C576) * C3785 +
            (C48199 * C591 - C113 * C583) * C3779 +
            (C48199 * C584 - C113 * C577) * C3786 +
            (C48199 * C592 - C113 * C585) * C3780 +
            (C48199 * C586 - C113 * C578) * C3787 +
            (C48199 * C593 - C113 * C587) * C48498) *
               C48462 +
           ((C48199 * C1452 - C113 * C1448) * C3784 +
            (C48199 * C1460 - C113 * C1453) * C3778 +
            (C48199 * C1454 - C113 * C1449) * C3785 +
            (C48199 * C1461 - C113 * C1455) * C3779 +
            (C48199 * C1456 - C113 * C1450) * C3786 +
            (C48199 * C1462 - C113 * C1457) * C3780 +
            (C48199 * C1458 - C113 * C1451) * C3787 +
            (C48199 * C1463 - C113 * C1459) * C48498) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47225 +
            (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
            (C150 - C151) * C48112) *
               C19881 +
           ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
            C2802 * C47206 + C2803 * C48112) *
               C19882 +
           (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 + C2809 * C48112) *
               C19883 +
           (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
            C20151 * C48112) *
               C48510) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C47225 +
            (C113 * C266 - C48199 * C277) * C48439 + (C284 - C285) * C47206 +
            (C286 - C287) * C48112) *
               C19881 +
           ((C3240 - C3241) * C47225 + (C3242 - C3243) * C48439 +
            (C2620 - C2621) * C47206 + (C2622 - C2623) * C48112) *
               C19882 +
           ((C3244 - C3245) * C47225 + (C3246 - C3247) * C48439 +
            (C2628 - C2629) * C47206 + (C2630 - C2631) * C48112) *
               C19883 +
           ((C17870 - C17871) * C47225 + (C17872 - C17873) * C48439 +
            (C20016 - C20017) * C47206 + (C20018 - C20019) * C48112) *
               C48510) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C47225 +
            (C48199 * C590 - C113 * C581) * C48439 +
            (C48199 * C582 - C113 * C576) * C47206 +
            (C48199 * C591 - C113 * C583) * C48112) *
               C19881 +
           ((C48199 * C1452 - C113 * C1448) * C47225 +
            (C48199 * C1460 - C113 * C1453) * C48439 +
            (C48199 * C1454 - C113 * C1449) * C47206 +
            (C48199 * C1461 - C113 * C1455) * C48112) *
               C19882 +
           ((C48199 * C2323 - C113 * C2317) * C47225 +
            (C48199 * C2335 - C113 * C2325) * C48439 +
            (C48199 * C2327 - C113 * C2319) * C47206 +
            (C48199 * C2337 - C113 * C2329) * C48112) *
               C19883 +
           ((C48199 * C10064 - C113 * C10062) * C47225 +
            (C48199 * C10068 - C113 * C10065) * C48439 +
            (C48199 * C10066 - C113 * C10063) * C47206 +
            (C48199 * C10069 - C113 * C10067) * C48112) *
               C48510) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C381 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C47225 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48439 +
             (C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47206 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48112) *
                C48462 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C47225 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48439 +
             (C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C47206 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C381 +
           (((C3241 - C3240) * C3784 + (C3243 - C3242) * C3778 +
             (C2621 - C2620) * C3785 + (C2623 - C2622) * C3779 +
             (C2625 - C2624) * C3786 + (C2627 - C2626) * C3780 +
             (C5090 - C5089) * C3787 + (C5092 - C5091) * C48498) *
                C48462 +
            ((C3245 - C3244) * C3784 + (C3247 - C3246) * C3778 +
             (C2629 - C2628) * C3785 + (C2631 - C2630) * C3779 +
             (C2633 - C2632) * C3786 + (C2635 - C2634) * C3780 +
             (C48199 * C2616 - C113 * C2615) * C3787 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
             C20151 * C48112) *
                C48510) *
               C381 +
           (((C2799 - C2798) * C47225 + (C2801 - C2800) * C48439 +
             C2810 * C47206 + C2811 * C48112) *
                C19881 +
            ((C2805 - C2804) * C47225 + (C2807 - C2806) * C48439 +
             C2814 * C47206 + C2815 * C48112) *
                C19882 +
            ((C3668 - C3669) * C47225 + (C3670 - C3671) * C48439 +
             C20152 * C47206 + C20153 * C48112) *
                C19883 +
            ((C17633 - C17632) * C47225 + (C17635 - C17634) * C48439 +
             (C17636 - C17637) * C47206 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C47225 +
             (C113 * C266 - C48199 * C277) * C48439 + (C284 - C285) * C47206 +
             (C286 - C287) * C48112) *
                C19881 +
            ((C3240 - C3241) * C47225 + (C3242 - C3243) * C48439 +
             (C2620 - C2621) * C47206 + (C2622 - C2623) * C48112) *
                C19882 +
            ((C3244 - C3245) * C47225 + (C3246 - C3247) * C48439 +
             (C2628 - C2629) * C47206 + (C2630 - C2631) * C48112) *
                C19883 +
            ((C17870 - C17871) * C47225 + (C17872 - C17873) * C48439 +
             (C20016 - C20017) * C47206 + (C20018 - C20019) * C48112) *
                C48510) *
               C381 +
           (((C3241 - C3240) * C47225 + (C3243 - C3242) * C48439 +
             (C2621 - C2620) * C47206 + (C2623 - C2622) * C48112) *
                C19881 +
            ((C3245 - C3244) * C47225 + (C3247 - C3246) * C48439 +
             (C2629 - C2628) * C47206 + (C2631 - C2630) * C48112) *
                C19882 +
            ((C17871 - C17870) * C47225 + (C17873 - C17872) * C48439 +
             (C20017 - C20016) * C47206 + (C20019 - C20018) * C48112) *
                C19883 +
            ((C17875 - C17874) * C47225 + (C17877 - C17876) * C48439 +
             (C48199 * C17538 - C113 * C17537) * C47206 +
             (C48199 * C17540 - C113 * C17539) * C48112) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C779 +
           ((C12684 * C47225 + C12685 * C48439 +
             (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47206 +
             (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48112) *
                C48462 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47225 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48439 +
             (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
              C48494 * C2331 - C7740 * C2321) *
                 C47206 +
             (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
              C48494 * C2339 - C7740 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C779 +
           ((C2802 * C3784 + C2803 * C3778 + C2454 * C3785 + C2455 * C3779 +
             C4957 * C3786 + C4958 * C3780 + (C421 - C420) * C3787 +
             (C423 - C422) * C48498) *
                C48462 +
            (C2808 * C3784 + C2809 * C3778 + C2468 * C3785 + C2469 * C3779 +
             (C2465 - C2464) * C3786 + (C2467 - C2466) * C3780 +
             (C48199 * C941 - C113 * C932) * C3787 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
             C20151 * C48112) *
                C48510) *
               C779 +
           (((C2799 - C2798) * C47225 + (C2801 - C2800) * C48439 +
             C2810 * C47206 + C2811 * C48112) *
                C19881 +
            ((C2805 - C2804) * C47225 + (C2807 - C2806) * C48439 +
             C2814 * C47206 + C2815 * C48112) *
                C19882 +
            ((C3668 - C3669) * C47225 + (C3670 - C3671) * C48439 +
             C20152 * C47206 + C20153 * C48112) *
                C19883 +
            ((C17633 - C17632) * C47225 + (C17635 - C17634) * C48439 +
             (C17636 - C17637) * C47206 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48439 +
             (C153 - C152) * C47206 + (C155 - C154) * C48112) *
                C19881 +
            (C2810 * C47225 + C2811 * C48439 + C2812 * C47206 +
             C2813 * C48112) *
                C19882 +
            (C2814 * C47225 + C2815 * C48439 + C2816 * C47206 +
             C2817 * C48112) *
                C19883 +
            (C20152 * C47225 + C20153 * C48439 + (C2822 - C2823) * C47206 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C779 +
           ((C2802 * C47225 + C2803 * C48439 + C2454 * C47206 +
             C2455 * C48112) *
                C19881 +
            (C2808 * C47225 + C2809 * C48439 + C2468 * C47206 +
             C2469 * C48112) *
                C19882 +
            (C20150 * C47225 + C20151 * C48439 + (C2823 - C2822) * C47206 +
             (C2825 - C2824) * C48112) *
                C19883 +
            ((C17637 - C17636) * C47225 + (C17639 - C17638) * C48439 +
             (C48199 * C3656 - C113 * C3651) * C47206 +
             (C48199 * C3660 - C113 * C3657) * C48112) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C779 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C47225 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48439 +
             (C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47206 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48112) *
                C48462 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C47225 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48439 +
             (C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C47206 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C779 +
           (((C3241 - C3240) * C3784 + (C3243 - C3242) * C3778 +
             (C2621 - C2620) * C3785 + (C2623 - C2622) * C3779 +
             (C2625 - C2624) * C3786 + (C2627 - C2626) * C3780 +
             (C5090 - C5089) * C3787 + (C5092 - C5091) * C48498) *
                C48462 +
            ((C3245 - C3244) * C3784 + (C3247 - C3246) * C3778 +
             (C2629 - C2628) * C3785 + (C2631 - C2630) * C3779 +
             (C2633 - C2632) * C3786 + (C2635 - C2634) * C3780 +
             (C48199 * C2616 - C113 * C2615) * C3787 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47225 +
             (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
             (C150 - C151) * C48112) *
                C19881 +
            ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
             C2802 * C47206 + C2803 * C48112) *
                C19882 +
            (C3662 * C47225 + C3663 * C48439 + C2808 * C47206 +
             C2809 * C48112) *
                C19883 +
            (C18110 * C47225 + C18111 * C48439 + C20150 * C47206 +
             C20151 * C48112) *
                C48510) *
               C779 +
           (((C2799 - C2798) * C47225 + (C2801 - C2800) * C48439 +
             C2810 * C47206 + C2811 * C48112) *
                C19881 +
            ((C2805 - C2804) * C47225 + (C2807 - C2806) * C48439 +
             C2814 * C47206 + C2815 * C48112) *
                C19882 +
            ((C3668 - C3669) * C47225 + (C3670 - C3671) * C48439 +
             C20152 * C47206 + C20153 * C48112) *
                C19883 +
            ((C17633 - C17632) * C47225 + (C17635 - C17634) * C48439 +
             (C17636 - C17637) * C47206 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C47225 +
             (C113 * C266 - C48199 * C277) * C48439 + (C284 - C285) * C47206 +
             (C286 - C287) * C48112) *
                C19881 +
            ((C3240 - C3241) * C47225 + (C3242 - C3243) * C48439 +
             (C2620 - C2621) * C47206 + (C2622 - C2623) * C48112) *
                C19882 +
            ((C3244 - C3245) * C47225 + (C3246 - C3247) * C48439 +
             (C2628 - C2629) * C47206 + (C2630 - C2631) * C48112) *
                C19883 +
            ((C17870 - C17871) * C47225 + (C17872 - C17873) * C48439 +
             (C20016 - C20017) * C47206 + (C20018 - C20019) * C48112) *
                C48510) *
               C779 +
           (((C3241 - C3240) * C47225 + (C3243 - C3242) * C48439 +
             (C2621 - C2620) * C47206 + (C2623 - C2622) * C48112) *
                C19881 +
            ((C3245 - C3244) * C47225 + (C3247 - C3246) * C48439 +
             (C2629 - C2628) * C47206 + (C2631 - C2630) * C48112) *
                C19882 +
            ((C17871 - C17870) * C47225 + (C17873 - C17872) * C48439 +
             (C20017 - C20016) * C47206 + (C20019 - C20018) * C48112) *
                C19883 +
            ((C17875 - C17874) * C47225 + (C17877 - C17876) * C48439 +
             (C48199 * C17538 - C113 * C17537) * C47206 +
             (C48199 * C17540 - C113 * C17539) * C48112) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            C12684 * C47206 + C12685 * C48112) *
               C48304) *
              C925 +
          (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
            (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
            C12686 * C47206 + C12687 * C48112) *
               C48462 +
           ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
            (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
            (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
            (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
               C48304) *
              C926 +
          ((C10967 * C47225 + C10968 * C48439 +
            (C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47206 +
            (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48112) *
               C48462 +
           ((C10954 - C10953 + C10956 - C10955 + C10958 - C10957) * C47225 +
            (C10960 - C10959 + C10962 - C10961 + C10964 - C10963) * C48439 +
            (C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
             C48494 * C10066 - C7740 * C10063) *
                C47206 +
            (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
             C48494 * C10069 - C7740 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C925 +
          (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
            C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
            C5224 * C48498) *
               C48462 +
           ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
            C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
            (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
               C48304) *
              C926 +
          ((C3662 * C3784 + C3663 * C3778 + C2808 * C3785 + C2809 * C3779 +
            C2468 * C3786 + C2469 * C3780 + (C2465 - C2464) * C3787 +
            (C2467 - C2466) * C48498) *
               C48462 +
           ((C3669 - C3668) * C3784 + (C3671 - C3670) * C3778 +
            (C2819 - C2818) * C3785 + (C2821 - C2820) * C3779 +
            (C2823 - C2822) * C3786 + (C2825 - C2824) * C3780 +
            (C48199 * C2791 - C113 * C2784) * C3787 +
            (C48199 * C2796 - C113 * C2792) * C48498) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47225 +
            (C48199 * C140 - C113 * C127) * C48439 + (C148 - C149) * C47206 +
            (C150 - C151) * C48112) *
               C19881 +
           ((C2798 - C2799) * C47225 + (C2800 - C2801) * C48439 +
            C2802 * C47206 + C2803 * C48112) *
               C19882 +
           C20882 * C19883 + C20883 * C48510) *
              C925 +
          (((C2799 - C2798) * C47225 + (C2801 - C2800) * C48439 +
            C2810 * C47206 + C2811 * C48112) *
               C19881 +
           ((C2805 - C2804) * C47225 + (C2807 - C2806) * C48439 +
            C2814 * C47206 + C2815 * C48112) *
               C19882 +
           ((C3668 - C3669) * C47225 + (C3670 - C3671) * C48439 +
            C20152 * C47206 + C20153 * C48112) *
               C19883 +
           ((C17633 - C17632) * C47225 + (C17635 - C17634) * C48439 +
            (C17636 - C17637) * C47206 + (C17638 - C17639) * C48112) *
               C48510) *
              C926 +
          (C20882 * C19881 + C20883 * C19882 +
           (C18112 * C47225 + C18113 * C48439 + (C17637 - C17636) * C47206 +
            (C17639 - C17638) * C48112) *
               C19883 +
           ((C18115 - C18114) * C47225 + (C18117 - C18116) * C48439 +
            (C48199 * C17627 - C113 * C17624) * C47206 +
            (C48199 * C17630 - C113 * C17628) * C48112) *
               C48510) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
           (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
           (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
           (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
           (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
           (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C1115 * C1067 + C1116 * C1061 +
           (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C1068 +
           (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C1062 +
           (C48529 * C134 - C1064 * C123 + C48517 * C273 - C1065 * C263 +
            C48494 * C588 - C1066 * C579) *
               C1069 +
           (C48529 * C144 - C1064 * C135 + C48517 * C281 - C1065 * C274 +
            C48494 * C594 - C1066 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C48171 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48217 * C48188 * C48171 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48199 * C138 - C113 * C125) * C118 +
           (C48199 * C146 - C113 * C139) * C106) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
           (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
           (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
           (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
           (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
           (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C7789 * C7741 + C7790 * C48526 +
           (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C7742 +
           (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48513 +
           (C7732 * C134 - C7738 * C123 + C7733 * C273 - C7739 * C263 +
            C48494 * C588 - C7740 * C579) *
               C7743 +
           (C7732 * C144 - C7738 * C135 + C7733 * C281 - C7739 * C274 +
            C48494 * C594 - C7740 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C48171 * C110 +
          ((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
            C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
            C9006 * C1745 - C9000 * C1749) *
               C9007 +
           (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
            C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
            C9006 * C1750 - C9000 * C1754) *
               C48102) *
              C48217 * C48188 * C48171 * C111 +
          ((C8996 * C130 - C9002 * C121 + C8997 * C269 - C9003 * C261 +
            C8998 * C584 - C9004 * C577 + C8999 * C1270 - C9005 * C1264 +
            C9000 * C1751 - C9006 * C1746) *
               C9007 +
           (C8996 * C142 - C9002 * C131 + C8997 * C279 - C9003 * C270 +
            C8998 * C592 - C9004 * C585 + C8999 * C1276 - C9005 * C1271 +
            C9000 * C1755 - C9006 * C1752) *
               C48102) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
            C2468 * C7743 + C2469 * C48481) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C7741 + (C151 - C150) * C48526 +
            (C153 - C152) * C7742 + (C155 - C154) * C48513 +
            (C157 - C156) * C7743 + (C159 - C158) * C48481) *
               C14987 +
           (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
            C5223 * C7743 + C5224 * C48481) *
               C14988 +
           (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
            (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C168 * C7741 + C169 * C48526 + C170 * C7742 + C171 * C48513 +
            C172 * C7743 + C173 * C48481) *
               C14987 +
           (C2454 * C7741 + C2455 * C48526 + C4957 * C7742 + C4958 * C48513 +
            (C421 - C420) * C7743 + (C423 - C422) * C48481) *
               C14988 +
           (C2468 * C7741 + C2469 * C48526 + (C2465 - C2464) * C7742 +
            (C2467 - C2466) * C48513 + (C48199 * C941 - C113 * C932) * C7743 +
            (C48199 * C947 - C113 * C942) * C48481) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C48529 * C389 - C1064 * C383 + C48517 * C682 - C1065 * C677 +
             C48494 * C1452 - C1066 * C1448) *
                C9007 +
            (C48529 * C401 - C1064 * C390 + C48517 * C692 - C1065 * C683 +
             C48494 * C1460 - C1066 * C1453) *
                C48102) *
               C14988 +
           ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
             C48494 * C2323 - C1066 * C2317) *
                C9007 +
            (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
             C48494 * C2335 - C1066 * C2325) *
                C48102) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
               C14987 +
           ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
               C14988 +
           ((C1064 * C929 - C48529 * C935 + C1065 * C2318 - C48517 * C2326 +
             C1066 * C2319 - C48494 * C2327) *
                C9007 +
            (C1064 * C936 - C48529 * C944 + C1065 * C2328 - C48517 * C2336 +
             C1066 * C2329 - C48494 * C2337) *
                C48102) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C1115 * C9007 + C1116 * C48102) * C14987 +
           ((C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C9007 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48102) *
               C14988 +
           ((C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
             C48494 * C2331 - C1066 * C2321) *
                C9007 +
            (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
             C48494 * C2339 - C1066 * C2333) *
                C48102) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C255 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C255 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C255 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C255 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C255 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C255 +
           (((C285 - C284) * C7741 + (C287 - C286) * C48526 +
             (C289 - C288) * C7742 + (C291 - C290) * C48513 +
             (C293 - C292) * C7743 + (C295 - C294) * C48481) *
                C14987 +
            ((C2621 - C2620) * C7741 + (C2623 - C2622) * C48526 +
             (C2625 - C2624) * C7742 + (C2627 - C2626) * C48513 +
             (C5090 - C5089) * C7743 + (C5092 - C5091) * C48481) *
                C14988 +
            ((C2629 - C2628) * C7741 + (C2631 - C2630) * C48526 +
             (C2633 - C2632) * C7742 + (C2635 - C2634) * C48513 +
             (C48199 * C2616 - C113 * C2615) * C7743 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C48529 * C389 - C1064 * C383 + C48517 * C682 - C1065 * C677 +
              C48494 * C1452 - C1066 * C1448) *
                 C9007 +
             (C48529 * C401 - C1064 * C390 + C48517 * C692 - C1065 * C683 +
              C48494 * C1460 - C1066 * C1453) *
                 C48102) *
                C14988 +
            ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
              C48494 * C2323 - C1066 * C2317) *
                 C9007 +
             (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
              C48494 * C2335 - C1066 * C2325) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
              C1066 * C1902 - C48494 * C1905) *
                 C9007 +
             (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
              C1066 * C1906 - C48494 * C1911) *
                 C48102) *
                C14988 +
            ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
              C1066 * C9648 - C48494 * C9650) *
                 C9007 +
             (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
              C1066 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C1064 * C929 - C48529 * C935 + C1065 * C2318 - C48517 * C2326 +
              C1066 * C2319 - C48494 * C2327) *
                 C9007 +
             (C1064 * C936 - C48529 * C944 + C1065 * C2328 - C48517 * C2336 +
              C1066 * C2329 - C48494 * C2337) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C9007 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C48102) *
                C14987 +
            ((C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
              C48494 * C1907 - C1066 * C1903) *
                 C9007 +
             (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
              C48494 * C1912 - C1066 * C1908) *
                 C48102) *
                C14988 +
            ((C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C9007 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C381 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C381 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C381 +
           ((C2802 * C7741 + C2803 * C48526 + C2454 * C7742 + C2455 * C48513 +
             C4957 * C7743 + C4958 * C48481) *
                C14987 +
            (C2808 * C7741 + C2809 * C48526 + C2468 * C7742 + C2469 * C48513 +
             (C2465 - C2464) * C7743 + (C2467 - C2466) * C48481) *
                C14988 +
            ((C2819 - C2818) * C7741 + (C2821 - C2820) * C48526 +
             (C2823 - C2822) * C7742 + (C2825 - C2824) * C48513 +
             (C48199 * C2791 - C113 * C2784) * C7743 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C381 +
           (((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C9007 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48102) *
                C14987 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C9007 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48102) *
                C14988 +
            ((C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
              C48494 * C10066 - C1066 * C10063) *
                 C9007 +
             (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
              C48494 * C10069 - C1066 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C505 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C505 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C505 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C505 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C505 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C505 +
           (((C285 - C284) * C7741 + (C287 - C286) * C48526 +
             (C289 - C288) * C7742 + (C291 - C290) * C48513 +
             (C293 - C292) * C7743 + (C295 - C294) * C48481) *
                C14987 +
            ((C2621 - C2620) * C7741 + (C2623 - C2622) * C48526 +
             (C2625 - C2624) * C7742 + (C2627 - C2626) * C48513 +
             (C5090 - C5089) * C7743 + (C5092 - C5091) * C48481) *
                C14988 +
            ((C2629 - C2628) * C7741 + (C2631 - C2630) * C48526 +
             (C2633 - C2632) * C7742 + (C2635 - C2634) * C48513 +
             (C48199 * C2616 - C113 * C2615) * C7743 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
              C1066 * C1902 - C48494 * C1905) *
                 C9007 +
             (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
              C1066 * C1906 - C48494 * C1911) *
                 C48102) *
                C14988 +
            ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
              C1066 * C9648 - C48494 * C9650) *
                 C9007 +
             (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
              C1066 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C9007 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C48102) *
                C14987 +
            ((C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
              C48494 * C1907 - C1066 * C1903) *
                 C9007 +
             (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
              C48494 * C1912 - C1066 * C1908) *
                 C48102) *
                C14988 +
            ((C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C9007 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C571 +
          ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
            C1066 * C1262 - C48494 * C1266) *
               C1067 +
           (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
            C1066 * C1267 - C48494 * C1274) *
               C1061 +
           (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
           (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
           (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
           (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
              C48217 * C48188 * C572 +
          ((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
            C48494 * C1747 - C1066 * C1744) *
               C1067 +
           (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
            C48494 * C1753 - C1066 * C1748) *
               C1061 +
           (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
            C48494 * C1749 - C1066 * C1745) *
               C1068 +
           (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
            C48494 * C1754 - C1066 * C1750) *
               C1062 +
           (C48529 * C584 - C1064 * C577 + C48517 * C1270 - C1065 * C1264 +
            C48494 * C1751 - C1066 * C1746) *
               C1069 +
           (C48529 * C592 - C1064 * C585 + C48517 * C1276 - C1065 * C1271 +
            C48494 * C1755 - C1066 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C571 +
          ((C113 * C259 - C48199 * C265) * C114 +
           (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48217 * C48188 * C572 +
          ((C48199 * C580 - C113 * C575) * C114 +
           (C48199 * C590 - C113 * C581) * C102 +
           (C48199 * C582 - C113 * C576) * C115 +
           (C48199 * C591 - C113 * C583) * C103 +
           (C48199 * C584 - C113 * C577) * C116 +
           (C48199 * C592 - C113 * C585) * C104 +
           (C48199 * C586 - C113 * C578) * C117 +
           (C48199 * C593 - C113 * C587) * C105 +
           (C48199 * C588 - C113 * C579) * C118 +
           (C48199 * C594 - C113 * C589) * C106) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C571 +
          ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
            C7740 * C1262 - C48494 * C1266) *
               C7741 +
           (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
            C7740 * C1267 - C48494 * C1274) *
               C48526 +
           (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
           (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
           (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
           (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
              C48217 * C48188 * C572 +
          ((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
            C48494 * C1747 - C7740 * C1744) *
               C7741 +
           (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
            C48494 * C1753 - C7740 * C1748) *
               C48526 +
           (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
            C48494 * C1749 - C7740 * C1745) *
               C7742 +
           (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
            C48494 * C1754 - C7740 * C1750) *
               C48513 +
           (C7732 * C584 - C7738 * C577 + C7733 * C1270 - C7739 * C1264 +
            C48494 * C1751 - C7740 * C1746) *
               C7743 +
           (C7732 * C592 - C7738 * C585 + C7733 * C1276 - C7739 * C1271 +
            C48494 * C1755 - C7740 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C571 +
          ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
            C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
            C9006 * C9090 - C9000 * C9092) *
               C9007 +
           (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
            C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
            C9006 * C9093 - C9000 * C9096) *
               C48102) *
              C48217 * C48188 * C572 +
          ((C8996 * C580 - C9002 * C575 + C8997 * C1266 - C9003 * C1262 +
            C8998 * C1747 - C9004 * C1744 + C8999 * C9092 - C9005 * C9090 +
            C9000 * C9333 - C9006 * C9332) *
               C9007 +
           (C8996 * C590 - C9002 * C581 + C8997 * C1274 - C9003 * C1267 +
            C8998 * C1753 - C9004 * C1748 + C8999 * C9096 - C9005 * C9093 +
            C9000 * C9335 - C9006 * C9334) *
               C48102) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
            C2468 * C7743 + C2469 * C48481) *
               C48497) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C7741 +
            (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
            (C286 - C287) * C48513 + (C288 - C289) * C7743 +
            (C290 - C291) * C48481) *
               C14987 +
           ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
            (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
            (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
               C14988 +
           ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
            (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
            (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
               C48497) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C7741 +
            (C48199 * C590 - C113 * C581) * C48526 +
            (C48199 * C582 - C113 * C576) * C7742 +
            (C48199 * C591 - C113 * C583) * C48513 +
            (C48199 * C584 - C113 * C577) * C7743 +
            (C48199 * C592 - C113 * C585) * C48481) *
               C14987 +
           ((C48199 * C1452 - C113 * C1448) * C7741 +
            (C48199 * C1460 - C113 * C1453) * C48526 +
            (C48199 * C1454 - C113 * C1449) * C7742 +
            (C48199 * C1461 - C113 * C1455) * C48513 +
            (C48199 * C1456 - C113 * C1450) * C7743 +
            (C48199 * C1462 - C113 * C1457) * C48481) *
               C14988 +
           ((C48199 * C2323 - C113 * C2317) * C7741 +
            (C48199 * C2335 - C113 * C2325) * C48526 +
            (C48199 * C2327 - C113 * C2319) * C7742 +
            (C48199 * C2337 - C113 * C2329) * C48513 +
            (C48199 * C2331 - C113 * C2321) * C7743 +
            (C48199 * C2339 - C113 * C2333) * C48481) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
               C14988 +
           ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
            (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
               C48497) *
              C48188 * C571 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C9007 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C48102) *
               C14987 +
           ((C1064 * C677 - C48529 * C682 + C1065 * C1448 - C48517 * C1452 +
             C1066 * C1902 - C48494 * C1905) *
                C9007 +
            (C1064 * C683 - C48529 * C692 + C1065 * C1453 - C48517 * C1460 +
             C1066 * C1906 - C48494 * C1911) *
                C48102) *
               C14988 +
           ((C1064 * C2316 - C48529 * C2322 + C1065 * C2317 - C48517 * C2323 +
             C1066 * C9648 - C48494 * C9650) *
                C9007 +
            (C1064 * C2324 - C48529 * C2334 + C1065 * C2325 - C48517 * C2335 +
             C1066 * C9652 - C48494 * C9654) *
                C48102) *
               C48497) *
              C48188 * C572 +
          (((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
             C48494 * C1747 - C1066 * C1744) *
                C9007 +
            (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
             C48494 * C1753 - C1066 * C1748) *
                C48102) *
               C14987 +
           ((C48529 * C1452 - C1064 * C1448 + C48517 * C1905 - C1065 * C1902 +
             C48494 * C9182 - C1066 * C9180) *
                C9007 +
            (C48529 * C1460 - C1064 * C1453 + C48517 * C1911 - C1065 * C1906 +
             C48494 * C9186 - C1066 * C9183) *
                C48102) *
               C14988 +
           ((C48529 * C2323 - C1064 * C2317 + C48517 * C9650 - C1065 * C9648 +
             C48494 * C9651 - C1066 * C9649) *
                C9007 +
            (C48529 * C2335 - C1064 * C2325 + C48517 * C9654 - C1065 * C9652 +
             C48494 * C9655 - C1066 * C9653) *
                C48102) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C381 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C505 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C381 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C381 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C505 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C381 +
           (((C3241 - C3240) * C7741 + (C3243 - C3242) * C48526 +
             (C2621 - C2620) * C7742 + (C2623 - C2622) * C48513 +
             (C2625 - C2624) * C7743 + (C2627 - C2626) * C48481) *
                C14987 +
            ((C3245 - C3244) * C7741 + (C3247 - C3246) * C48526 +
             (C2629 - C2628) * C7742 + (C2631 - C2630) * C48513 +
             (C2633 - C2632) * C7743 + (C2635 - C2634) * C48481) *
                C14988 +
            ((C48199 * C3230 - C113 * C3227) * C7741 +
             (C48199 * C3236 - C113 * C3231) * C48526 +
             (C48199 * C3232 - C113 * C3228) * C7742 +
             (C48199 * C3237 - C113 * C3233) * C48513 +
             (C48199 * C3234 - C113 * C3229) * C7743 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C505 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C9007 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C48102) *
                C14988 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C9007 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48102) *
                C48497) *
               C381 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C9007 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C48102) *
                C14987 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C9007 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48102) *
                C14988 +
            ((C48529 * C3230 - C1064 * C3227 + C48517 * C10064 -
              C1065 * C10062 + C48494 * C10509 - C1066 * C10508) *
                 C9007 +
             (C48529 * C3236 - C1064 * C3231 + C48517 * C10068 -
              C1065 * C10065 + C48494 * C10511 - C1066 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C779 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C779 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C7741 + (C151 - C150) * C48526 +
             (C153 - C152) * C7742 + (C155 - C154) * C48513 +
             (C157 - C156) * C7743 + (C159 - C158) * C48481) *
                C14987 +
            (C2810 * C7741 + C2811 * C48526 + C2812 * C7742 + C2813 * C48513 +
             C5223 * C7743 + C5224 * C48481) *
                C14988 +
            (C2814 * C7741 + C2815 * C48526 + C2816 * C7742 + C2817 * C48513 +
             (C2464 - C2465) * C7743 + (C2466 - C2467) * C48481) *
                C48497) *
               C779 +
           ((C2802 * C7741 + C2803 * C48526 + C2454 * C7742 + C2455 * C48513 +
             C4957 * C7743 + C4958 * C48481) *
                C14987 +
            (C2808 * C7741 + C2809 * C48526 + C2468 * C7742 + C2469 * C48513 +
             (C2465 - C2464) * C7743 + (C2467 - C2466) * C48481) *
                C14988 +
            ((C2819 - C2818) * C7741 + (C2821 - C2820) * C48526 +
             (C2823 - C2822) * C7742 + (C2825 - C2824) * C48513 +
             (C48199 * C2791 - C113 * C2784) * C7743 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C9007 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C48102) *
                C14987 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C9007 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C48102) *
                C14988 +
            ((C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C9007 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48102) *
                C48497) *
               C779 +
           (((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C9007 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48102) *
                C14987 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C9007 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48102) *
                C14988 +
            ((C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
              C48494 * C10066 - C1066 * C10063) *
                 C9007 +
             (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
              C48494 * C10069 - C1066 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C779 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C255 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C779 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C779 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C255 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C7741 +
             (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
             (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
                C14987 +
            ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 +
             C2802 * C7742 + C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
                C14988 +
            (C3662 * C7741 + C3663 * C48526 + C2808 * C7742 + C2809 * C48513 +
             C2468 * C7743 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 +
             C2810 * C7742 + C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
                C14987 +
            ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 +
             C2814 * C7742 + C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
                C14988 +
            ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
             (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
             (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C7741 +
             (C113 * C266 - C48199 * C277) * C48526 + (C284 - C285) * C7742 +
             (C286 - C287) * C48513 + (C288 - C289) * C7743 +
             (C290 - C291) * C48481) *
                C14987 +
            ((C3240 - C3241) * C7741 + (C3242 - C3243) * C48526 +
             (C2620 - C2621) * C7742 + (C2622 - C2623) * C48513 +
             (C2624 - C2625) * C7743 + (C2626 - C2627) * C48481) *
                C14988 +
            ((C3244 - C3245) * C7741 + (C3246 - C3247) * C48526 +
             (C2628 - C2629) * C7742 + (C2630 - C2631) * C48513 +
             (C2632 - C2633) * C7743 + (C2634 - C2635) * C48481) *
                C48497) *
               C779 +
           (((C3241 - C3240) * C7741 + (C3243 - C3242) * C48526 +
             (C2621 - C2620) * C7742 + (C2623 - C2622) * C48513 +
             (C2625 - C2624) * C7743 + (C2627 - C2626) * C48481) *
                C14987 +
            ((C3245 - C3244) * C7741 + (C3247 - C3246) * C48526 +
             (C2629 - C2628) * C7742 + (C2631 - C2630) * C48513 +
             (C2633 - C2632) * C7743 + (C2635 - C2634) * C48481) *
                C14988 +
            ((C48199 * C3230 - C113 * C3227) * C7741 +
             (C48199 * C3236 - C113 * C3231) * C48526 +
             (C48199 * C3232 - C113 * C3228) * C7742 +
             (C48199 * C3237 - C113 * C3233) * C48513 +
             (C48199 * C3234 - C113 * C3229) * C7743 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C9007 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C48102) *
                C14987 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
                C14988 +
            ((C16512 - C16513 + C16514 - C16515 + C16516 - C16517) * C9007 +
             (C16518 - C16519 + C16520 - C16521 + C16522 - C16523) * C48102) *
                C48497) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
                C14987 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
                C14988 +
            ((C1064 * C2781 - C48529 * C2785 + C1065 * C3227 - C48517 * C3230 +
              C1066 * C10062 - C48494 * C10064) *
                 C9007 +
             (C1064 * C2786 - C48529 * C2793 + C1065 * C3231 - C48517 * C3236 +
              C1066 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C255 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C9007 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C48102) *
                C14987 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C9007 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C48102) *
                C14988 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C9007 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48102) *
                C48497) *
               C779 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C9007 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C48102) *
                C14987 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C9007 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48102) *
                C14988 +
            ((C48529 * C3230 - C1064 * C3227 + C48517 * C10064 -
              C1065 * C10062 + C48494 * C10509 - C1066 * C10508) *
                 C9007 +
             (C48529 * C3236 - C1064 * C3231 + C48517 * C10068 -
              C1065 * C10065 + C48494 * C10511 - C1066 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C925 +
          ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
            C1066 * C1448 - C48494 * C1452) *
               C1067 +
           (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
            C1066 * C1453 - C48494 * C1460) *
               C1061 +
           (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
           (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
           (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
           (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
              C48217 * C926 +
          ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
            C48494 * C2323 - C1066 * C2317) *
               C1067 +
           (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
            C48494 * C2335 - C1066 * C2325) *
               C1061 +
           (C48529 * C935 - C1064 * C929 + C48517 * C2326 - C1065 * C2318 +
            C48494 * C2327 - C1066 * C2319) *
               C1068 +
           (C48529 * C944 - C1064 * C936 + C48517 * C2336 - C1065 * C2328 +
            C48494 * C2337 - C1066 * C2329) *
               C1062 +
           (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
            C48494 * C2331 - C1066 * C2321) *
               C1069 +
           (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
            C48494 * C2339 - C1066 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C925 +
          ((C113 * C383 - C48199 * C389) * C114 +
           (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48217 * C926 +
          ((C48199 * C933 - C113 * C928) * C114 +
           (C48199 * C943 - C113 * C934) * C102 +
           (C48199 * C935 - C113 * C929) * C115 +
           (C48199 * C944 - C113 * C936) * C103 +
           (C48199 * C937 - C113 * C930) * C116 +
           (C48199 * C945 - C113 * C938) * C104 +
           (C48199 * C939 - C113 * C931) * C117 +
           (C48199 * C946 - C113 * C940) * C105 +
           (C48199 * C941 - C113 * C932) * C118 +
           (C48199 * C947 - C113 * C942) * C106) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C925 +
          ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
            C7740 * C1448 - C48494 * C1452) *
               C7741 +
           (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
            C7740 * C1453 - C48494 * C1460) *
               C48526 +
           (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
           (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
           (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
           (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
              C48217 * C926 +
          ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
            C48494 * C2323 - C7740 * C2317) *
               C7741 +
           (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
            C48494 * C2335 - C7740 * C2325) *
               C48526 +
           (C7732 * C935 - C7738 * C929 + C7733 * C2326 - C7739 * C2318 +
            C48494 * C2327 - C7740 * C2319) *
               C7742 +
           (C7732 * C944 - C7738 * C936 + C7733 * C2336 - C7739 * C2328 +
            C48494 * C2337 - C7740 * C2329) *
               C48513 +
           (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
            C48494 * C2331 - C7740 * C2321) *
               C7743 +
           (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
            C48494 * C2339 - C7740 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C925 +
          ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
            C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
            C9006 * C9180 - C9000 * C9182) *
               C9007 +
           (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
            C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
            C9006 * C9183 - C9000 * C9186) *
               C48102) *
              C48217 * C926 +
          ((C8996 * C933 - C9002 * C928 + C8997 * C2322 - C9003 * C2316 +
            C8998 * C2323 - C9004 * C2317 + C8999 * C9650 - C9005 * C9648 +
            C9000 * C9651 - C9006 * C9649) *
               C9007 +
           (C8996 * C943 - C9002 * C934 + C8997 * C2334 - C9003 * C2324 +
            C8998 * C2335 - C9004 * C2325 + C8999 * C9654 - C9005 * C9652 +
            C9000 * C9655 - C9006 * C9653) *
               C48102) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C7741 +
            (C48199 * C140 - C113 * C127) * C48526 + (C148 - C149) * C7742 +
            (C150 - C151) * C48513 + C168 * C7743 + C169 * C48481) *
               C14987 +
           ((C2798 - C2799) * C7741 + (C2800 - C2801) * C48526 + C2802 * C7742 +
            C2803 * C48513 + C2454 * C7743 + C2455 * C48481) *
               C14988 +
           C16097 * C48497) *
              C925 +
          (((C2799 - C2798) * C7741 + (C2801 - C2800) * C48526 + C2810 * C7742 +
            C2811 * C48513 + C2812 * C7743 + C2813 * C48481) *
               C14987 +
           ((C2805 - C2804) * C7741 + (C2807 - C2806) * C48526 + C2814 * C7742 +
            C2815 * C48513 + C2816 * C7743 + C2817 * C48481) *
               C14988 +
           ((C3668 - C3669) * C7741 + (C3670 - C3671) * C48526 +
            (C2818 - C2819) * C7742 + (C2820 - C2821) * C48513 +
            (C2822 - C2823) * C7743 + (C2824 - C2825) * C48481) *
               C48497) *
              C926 +
          (C16097 * C14987 +
           ((C3669 - C3668) * C7741 + (C3671 - C3670) * C48526 +
            (C2819 - C2818) * C7742 + (C2821 - C2820) * C48513 +
            (C2823 - C2822) * C7743 + (C2825 - C2824) * C48481) *
               C14988 +
           ((C48199 * C3652 - C113 * C3649) * C7741 +
            (C48199 * C3658 - C113 * C3653) * C48526 +
            (C48199 * C3654 - C113 * C3650) * C7742 +
            (C48199 * C3659 - C113 * C3655) * C48513 +
            (C48199 * C3656 - C113 * C3651) * C7743 +
            (C48199 * C3660 - C113 * C3657) * C48481) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C9007 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C48102) *
               C14987 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C9007 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C48102) *
               C14988 +
           C17388 * C48497) *
              C925 +
          (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C9007 +
            (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C48102) *
               C14987 +
           ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C9007 +
            (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C48102) *
               C14988 +
           ((C17370 - C17371 + C17372 - C17373 + C17374 - C17375) * C9007 +
            (C17376 - C17377 + C17378 - C17379 + C17380 - C17381) * C48102) *
               C48497) *
              C926 +
          (C17388 * C14987 +
           ((C17371 - C17370 + C17373 - C17372 + C17375 - C17374) * C9007 +
            (C17377 - C17376 + C17379 - C17378 + C17381 - C17380) * C48102) *
               C14988 +
           ((C48529 * C3652 - C1064 * C3649 + C48517 * C10940 - C1065 * C10938 +
             C48494 * C10941 - C1066 * C10939) *
                C9007 +
            (C48529 * C3658 - C1064 * C3653 + C48517 * C10944 - C1065 * C10942 +
             C48494 * C10945 - C1066 * C10943) *
                C48102) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47235 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48107 +
            (C3789 - C3790 + C3791 - C3792) * C47231 +
            (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
            C3830 * C26147) *
               C30746 +
           ((C6497 - C6498 + C6499 - C6500) * C47235 +
            (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
            C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C47235 +
            (C3794 - C3793 + C3796 - C3795) * C48107 +
            (C3798 - C3797 + C3800 - C3799) * C47231 +
            (C3802 - C3801 + C3804 - C3803) * C48115 +
            (C3806 - C3805 + C3808 - C3807) * C47241 +
            (C3810 - C3809 + C3812 - C3811) * C26147) *
               C30746 +
           (C6535 * C47235 + C6536 * C48107 + C6537 * C47231 + C6538 * C48115 +
            (C4133 - C4134 + C4135 - C4136) * C47241 +
            (C4137 - C4138 + C4139 - C4140) * C26147) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C3829 * C47235 + C3830 * C48107 + C3831 * C47231 + C3832 * C48115 +
            (C3814 - C3813 + C3816 - C3815) * C47241 +
            (C3818 - C3817 + C3820 - C3819) * C26147) *
               C30746 +
           (C6091 * C47235 + C6092 * C48107 +
            (C4134 - C4133 + C4136 - C4135) * C47231 +
            (C4138 - C4137 + C4140 - C4139) * C48115 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C47241 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C26147) *
               C48304) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47235 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48107 +
             (C3963 - C3964 + C3965 - C3966) * C47231 +
             (C3967 - C3968 + C3969 - C3970) * C48115 +
             (C3971 - C3972 + C3973 - C3974) * C47241 +
             (C3975 - C3976 + C3977 - C3978) * C26147) *
                C30746 +
            ((C7073 - C7074 + C7075 - C7076) * C47235 +
             (C7077 - C7078 + C7079 - C7080) * C48107 +
             (C6287 - C6288 + C6289 - C6290) * C47231 +
             (C6291 - C6292 + C6293 - C6294) * C48115 +
             (C6295 - C6296 + C6297 - C6298) * C47241 +
             (C6299 - C6300 + C6301 - C6302) * C26147) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C47235 +
             (C3794 - C3793 + C3796 - C3795) * C48107 +
             (C3798 - C3797 + C3800 - C3799) * C47231 +
             (C3802 - C3801 + C3804 - C3803) * C48115 +
             (C3806 - C3805 + C3808 - C3807) * C47241 +
             (C3810 - C3809 + C3812 - C3811) * C26147) *
                C30746 +
            (C6535 * C47235 + C6536 * C48107 + C6537 * C47231 + C6538 * C48115 +
             (C4133 - C4134 + C4135 - C4136) * C47241 +
             (C4137 - C4138 + C4139 - C4140) * C26147) *
                C48304) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C47235 +
             (C3968 - C3967 + C3970 - C3969) * C48107 +
             (C3972 - C3971 + C3974 - C3973) * C47231 +
             (C3976 - C3975 + C3978 - C3977) * C48115 +
             (C3980 - C3979 + C3982 - C3981) * C47241 +
             (C3984 - C3983 + C3986 - C3985) * C26147) *
                C30746 +
            ((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48107 +
             (C6296 - C6295 + C6298 - C6297) * C47231 +
             (C6300 - C6299 + C6302 - C6301) * C48115 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C47241 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C26147) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C47235 +
             (C6502 - C6501 + C6504 - C6503) * C48107 + C6535 * C47231 +
             C6536 * C48115 + C6537 * C47241 + C6538 * C26147) *
                C30746 +
            ((C7615 - C7616 + C7617 - C7618) * C47235 +
             (C7619 - C7620 + C7621 - C7622) * C48107 + C18685 * C47231 +
             C18686 * C48115 + (C6525 - C6526 + C6527 - C6528) * C47241 +
             (C6529 - C6530 + C6531 - C6532) * C26147) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C47235 +
             (C3794 - C3793 + C3796 - C3795) * C48107 +
             (C3798 - C3797 + C3800 - C3799) * C47231 +
             (C3802 - C3801 + C3804 - C3803) * C48115 +
             (C3806 - C3805 + C3808 - C3807) * C47241 +
             (C3810 - C3809 + C3812 - C3811) * C26147) *
                C30746 +
            (C6535 * C47235 + C6536 * C48107 + C6537 * C47231 + C6538 * C48115 +
             (C4133 - C4134 + C4135 - C4136) * C47241 +
             (C4137 - C4138 + C4139 - C4140) * C26147) *
                C48304) *
               C381 +
           ((C6533 * C47235 + C6534 * C48107 + C6091 * C47231 + C6092 * C48115 +
             (C4134 - C4133 + C4136 - C4135) * C47241 +
             (C4138 - C4137 + C4140 - C4139) * C26147) *
                C30746 +
            (C18683 * C47235 + C18684 * C48107 +
             (C6526 - C6525 + C6528 - C6527) * C47231 +
             (C6530 - C6529 + C6532 - C6531) * C48115 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C47241 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C26147) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47235 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48107 +
             (C3963 - C3964 + C3965 - C3966) * C47231 +
             (C3967 - C3968 + C3969 - C3970) * C48115 +
             (C3971 - C3972 + C3973 - C3974) * C47241 +
             (C3975 - C3976 + C3977 - C3978) * C26147) *
                C30746 +
            ((C7073 - C7074 + C7075 - C7076) * C47235 +
             (C7077 - C7078 + C7079 - C7080) * C48107 +
             (C6287 - C6288 + C6289 - C6290) * C47231 +
             (C6291 - C6292 + C6293 - C6294) * C48115 +
             (C6295 - C6296 + C6297 - C6298) * C47241 +
             (C6299 - C6300 + C6301 - C6302) * C26147) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C47235 +
             (C3794 - C3793 + C3796 - C3795) * C48107 +
             (C3798 - C3797 + C3800 - C3799) * C47231 +
             (C3802 - C3801 + C3804 - C3803) * C48115 +
             (C3806 - C3805 + C3808 - C3807) * C47241 +
             (C3810 - C3809 + C3812 - C3811) * C26147) *
                C30746 +
            (C6535 * C47235 + C6536 * C48107 + C6537 * C47231 + C6538 * C48115 +
             (C4133 - C4134 + C4135 - C4136) * C47241 +
             (C4137 - C4138 + C4139 - C4140) * C26147) *
                C48304) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C47235 +
             (C3968 - C3967 + C3970 - C3969) * C48107 +
             (C3972 - C3971 + C3974 - C3973) * C47231 +
             (C3976 - C3975 + C3978 - C3977) * C48115 +
             (C3980 - C3979 + C3982 - C3981) * C47241 +
             (C3984 - C3983 + C3986 - C3985) * C26147) *
                C30746 +
            ((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48107 +
             (C6296 - C6295 + C6298 - C6297) * C47231 +
             (C6300 - C6299 + C6302 - C6301) * C48115 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C47241 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C26147) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47235 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48107 +
            (C3789 - C3790 + C3791 - C3792) * C47231 +
            (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
            C3830 * C26147) *
               C30746 +
           ((C6497 - C6498 + C6499 - C6500) * C47235 +
            (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
            C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
               C48304) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C47235 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C48107 +
            (C3963 - C3964 + C3965 - C3966) * C47231 +
            (C3967 - C3968 + C3969 - C3970) * C48115 +
            (C3971 - C3972 + C3973 - C3974) * C47241 +
            (C3975 - C3976 + C3977 - C3978) * C26147) *
               C30746 +
           ((C7073 - C7074 + C7075 - C7076) * C47235 +
            (C7077 - C7078 + C7079 - C7080) * C48107 +
            (C6287 - C6288 + C6289 - C6290) * C47231 +
            (C6291 - C6292 + C6293 - C6294) * C48115 +
            (C6295 - C6296 + C6297 - C6298) * C47241 +
            (C6299 - C6300 + C6301 - C6302) * C26147) *
               C48304) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C47235 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C48107 +
            (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
                C47231 +
            (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
                C48115 +
            (C48461 * C584 - C3782 * C577 + C48262 * C1270 - C3783 * C1264) *
                C47241 +
            (C48461 * C592 - C3782 * C585 + C48262 * C1276 - C3783 * C1271) *
                C26147) *
               C30746 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C47235 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C48107 +
            (C48461 * C1454 - C3782 * C1449 + C48262 * C1907 - C3783 * C1903) *
                C47231 +
            (C48461 * C1461 - C3782 * C1455 + C48262 * C1912 - C3783 * C1908) *
                C48115 +
            (C48461 * C1456 - C3782 * C1450 + C48262 * C1909 - C3783 * C1904) *
                C47241 +
            (C48461 * C1462 - C3782 * C1457 + C48262 * C1913 - C3783 * C1910) *
                C26147) *
               C48304) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C47235 +
             (C6502 - C6501 + C6504 - C6503) * C48107 + C6535 * C47231 +
             C6536 * C48115 + C6537 * C47241 + C6538 * C26147) *
                C30746 +
            ((C7615 - C7616 + C7617 - C7618) * C47235 +
             (C7619 - C7620 + C7621 - C7622) * C48107 + C18685 * C47231 +
             C18686 * C48115 + (C6525 - C6526 + C6527 - C6528) * C47241 +
             (C6529 - C6530 + C6531 - C6532) * C26147) *
                C48304) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47235 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48107 +
             (C3963 - C3964 + C3965 - C3966) * C47231 +
             (C3967 - C3968 + C3969 - C3970) * C48115 +
             (C3971 - C3972 + C3973 - C3974) * C47241 +
             (C3975 - C3976 + C3977 - C3978) * C26147) *
                C30746 +
            ((C7073 - C7074 + C7075 - C7076) * C47235 +
             (C7077 - C7078 + C7079 - C7080) * C48107 +
             (C6287 - C6288 + C6289 - C6290) * C47231 +
             (C6291 - C6292 + C6293 - C6294) * C48115 +
             (C6295 - C6296 + C6297 - C6298) * C47241 +
             (C6299 - C6300 + C6301 - C6302) * C26147) *
                C48304) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C47235 +
             (C7078 - C7077 + C7080 - C7079) * C48107 +
             (C6288 - C6287 + C6290 - C6289) * C47231 +
             (C6292 - C6291 + C6294 - C6293) * C48115 +
             (C6296 - C6295 + C6298 - C6297) * C47241 +
             (C6300 - C6299 + C6302 - C6301) * C26147) *
                C30746 +
            ((C19222 - C19221 + C19224 - C19223) * C47235 +
             (C19226 - C19225 + C19228 - C19227) * C48107 +
             (C18466 - C18465 + C18468 - C18467) * C47231 +
             (C18470 - C18469 + C18472 - C18471) * C48115 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C47241 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C26147) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C47235 +
             (C6502 - C6501 + C6504 - C6503) * C48107 + C6535 * C47231 +
             C6536 * C48115 + C6537 * C47241 + C6538 * C26147) *
                C30746 +
            ((C7615 - C7616 + C7617 - C7618) * C47235 +
             (C7619 - C7620 + C7621 - C7622) * C48107 + C18685 * C47231 +
             C18686 * C48115 + (C6525 - C6526 + C6527 - C6528) * C47241 +
             (C6529 - C6530 + C6531 - C6532) * C26147) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C47235 +
             (C3794 - C3793 + C3796 - C3795) * C48107 +
             (C3798 - C3797 + C3800 - C3799) * C47231 +
             (C3802 - C3801 + C3804 - C3803) * C48115 +
             (C3806 - C3805 + C3808 - C3807) * C47241 +
             (C3810 - C3809 + C3812 - C3811) * C26147) *
                C30746 +
            (C6535 * C47235 + C6536 * C48107 + C6537 * C47231 + C6538 * C48115 +
             (C4133 - C4134 + C4135 - C4136) * C47241 +
             (C4137 - C4138 + C4139 - C4140) * C26147) *
                C48304) *
               C779 +
           ((C6533 * C47235 + C6534 * C48107 + C6091 * C47231 + C6092 * C48115 +
             (C4134 - C4133 + C4136 - C4135) * C47241 +
             (C4138 - C4137 + C4140 - C4139) * C26147) *
                C30746 +
            (C18683 * C47235 + C18684 * C48107 +
             (C6526 - C6525 + C6528 - C6527) * C47231 +
             (C6530 - C6529 + C6532 - C6531) * C48115 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C47241 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C26147) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C47235 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C48107 +
             (C3789 - C3790 + C3791 - C3792) * C47231 +
             (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
             C3830 * C26147) *
                C30746 +
            ((C6497 - C6498 + C6499 - C6500) * C47235 +
             (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
             C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C47235 +
             (C6502 - C6501 + C6504 - C6503) * C48107 + C6535 * C47231 +
             C6536 * C48115 + C6537 * C47241 + C6538 * C26147) *
                C30746 +
            ((C7615 - C7616 + C7617 - C7618) * C47235 +
             (C7619 - C7620 + C7621 - C7622) * C48107 + C18685 * C47231 +
             C18686 * C48115 + (C6525 - C6526 + C6527 - C6528) * C47241 +
             (C6529 - C6530 + C6531 - C6532) * C26147) *
                C48304) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C47235 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C48107 +
             (C3963 - C3964 + C3965 - C3966) * C47231 +
             (C3967 - C3968 + C3969 - C3970) * C48115 +
             (C3971 - C3972 + C3973 - C3974) * C47241 +
             (C3975 - C3976 + C3977 - C3978) * C26147) *
                C30746 +
            ((C7073 - C7074 + C7075 - C7076) * C47235 +
             (C7077 - C7078 + C7079 - C7080) * C48107 +
             (C6287 - C6288 + C6289 - C6290) * C47231 +
             (C6291 - C6292 + C6293 - C6294) * C48115 +
             (C6295 - C6296 + C6297 - C6298) * C47241 +
             (C6299 - C6300 + C6301 - C6302) * C26147) *
                C48304) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C47235 +
             (C7078 - C7077 + C7080 - C7079) * C48107 +
             (C6288 - C6287 + C6290 - C6289) * C47231 +
             (C6292 - C6291 + C6294 - C6293) * C48115 +
             (C6296 - C6295 + C6298 - C6297) * C47241 +
             (C6300 - C6299 + C6302 - C6301) * C26147) *
                C30746 +
            ((C19222 - C19221 + C19224 - C19223) * C47235 +
             (C19226 - C19225 + C19228 - C19227) * C48107 +
             (C18466 - C18465 + C18468 - C18467) * C47231 +
             (C18470 - C18469 + C18472 - C18471) * C48115 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C47241 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C26147) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C47235 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C48107 +
            (C3789 - C3790 + C3791 - C3792) * C47231 +
            (C3793 - C3794 + C3795 - C3796) * C48115 + C3829 * C47241 +
            C3830 * C26147) *
               C30746 +
           ((C6497 - C6498 + C6499 - C6500) * C47235 +
            (C6501 - C6502 + C6503 - C6504) * C48107 + C6533 * C47231 +
            C6534 * C48115 + C6091 * C47241 + C6092 * C26147) *
               C48304) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C47235 +
            (C6502 - C6501 + C6504 - C6503) * C48107 + C6535 * C47231 +
            C6536 * C48115 + C6537 * C47241 + C6538 * C26147) *
               C30746 +
           ((C7615 - C7616 + C7617 - C7618) * C47235 +
            (C7619 - C7620 + C7621 - C7622) * C48107 + C18685 * C47231 +
            C18686 * C48115 + (C6525 - C6526 + C6527 - C6528) * C47241 +
            (C6529 - C6530 + C6531 - C6532) * C26147) *
               C48304) *
              C926 +
          ((C19777 * C47235 + C19778 * C48107 + C18683 * C47231 +
            C18684 * C48115 + (C6526 - C6525 + C6528 - C6527) * C47241 +
            (C6530 - C6529 + C6532 - C6531) * C26147) *
               C30746 +
           (C21981 * C47235 + C21982 * C48107 +
            (C18676 - C18675 + C18678 - C18677) * C47231 +
            (C18680 - C18679 + C18682 - C18681) * C48115 +
            (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                C47241 +
            (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                C26147) *
               C48304) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C23271 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C23265 +
            (C3789 - C3790 + C3791 - C3792) * C23272 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C48300 +
           ((C6497 - C6498 + C6499 - C6500) * C23271 +
            (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
            C6534 * C48112) *
               C48307 +
           (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
            C18684 * C48112) *
               C36164) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C23271 +
            (C3794 - C3793 + C3796 - C3795) * C23265 +
            (C3798 - C3797 + C3800 - C3799) * C23272 +
            (C3802 - C3801 + C3804 - C3803) * C48112) *
               C48300 +
           (C6535 * C23271 + C6536 * C23265 + C6537 * C23272 + C6538 * C48112) *
               C48307 +
           (C18685 * C23271 + C18686 * C23265 +
            (C6525 - C6526 + C6527 - C6528) * C23272 +
            (C6529 - C6530 + C6531 - C6532) * C48112) *
               C36164) *
              C48188 * C48171 * C111 +
          ((C3829 * C23271 + C3830 * C23265 + C3831 * C23272 + C3832 * C48112) *
               C48300 +
           (C6091 * C23271 + C6092 * C23265 +
            (C4134 - C4133 + C4136 - C4135) * C23272 +
            (C4138 - C4137 + C4140 - C4139) * C48112) *
               C48307 +
           ((C6526 - C6525 + C6528 - C6527) * C23271 +
            (C6530 - C6529 + C6532 - C6531) * C23265 +
            (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                C23272 +
            (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                C48112) *
               C36164) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C23271 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C23265 +
             (C3963 - C3964 + C3965 - C3966) * C23272 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C48300 +
            ((C7073 - C7074 + C7075 - C7076) * C23271 +
             (C7077 - C7078 + C7079 - C7080) * C23265 +
             (C6287 - C6288 + C6289 - C6290) * C23272 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C48307 +
            ((C19221 - C19222 + C19223 - C19224) * C23271 +
             (C19225 - C19226 + C19227 - C19228) * C23265 +
             (C18465 - C18466 + C18467 - C18468) * C23272 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C36164) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C23271 +
             (C3794 - C3793 + C3796 - C3795) * C23265 +
             (C3798 - C3797 + C3800 - C3799) * C23272 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C48300 +
            (C6535 * C23271 + C6536 * C23265 + C6537 * C23272 +
             C6538 * C48112) *
                C48307 +
            (C18685 * C23271 + C18686 * C23265 +
             (C6525 - C6526 + C6527 - C6528) * C23272 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C36164) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C23271 +
             (C3968 - C3967 + C3970 - C3969) * C23265 +
             (C3972 - C3971 + C3974 - C3973) * C23272 +
             (C3976 - C3975 + C3978 - C3977) * C48112) *
                C48300 +
            ((C6288 - C6287 + C6290 - C6289) * C23271 +
             (C6292 - C6291 + C6294 - C6293) * C23265 +
             (C6296 - C6295 + C6298 - C6297) * C23272 +
             (C6300 - C6299 + C6302 - C6301) * C48112) *
                C48307 +
            ((C18466 - C18465 + C18468 - C18467) * C23271 +
             (C18470 - C18469 + C18472 - C18471) * C23265 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C23272 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48112) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C23271 +
             (C6502 - C6501 + C6504 - C6503) * C23265 + C6535 * C23272 +
             C6536 * C48112) *
                C48300 +
            ((C7615 - C7616 + C7617 - C7618) * C23271 +
             (C7619 - C7620 + C7621 - C7622) * C23265 + C18685 * C23272 +
             C18686 * C48112) *
                C48307 +
            ((C19769 - C19770 + C19771 - C19772) * C23271 +
             (C19773 - C19774 + C19775 - C19776) * C23265 +
             (C18675 - C18676 + C18677 - C18678) * C23272 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C36164) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C23271 +
             (C3794 - C3793 + C3796 - C3795) * C23265 +
             (C3798 - C3797 + C3800 - C3799) * C23272 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C48300 +
            (C6535 * C23271 + C6536 * C23265 + C6537 * C23272 +
             C6538 * C48112) *
                C48307 +
            (C18685 * C23271 + C18686 * C23265 +
             (C6525 - C6526 + C6527 - C6528) * C23272 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C36164) *
               C381 +
           ((C6533 * C23271 + C6534 * C23265 + C6091 * C23272 +
             C6092 * C48112) *
                C48300 +
            (C18683 * C23271 + C18684 * C23265 +
             (C6526 - C6525 + C6528 - C6527) * C23272 +
             (C6530 - C6529 + C6532 - C6531) * C48112) *
                C48307 +
            ((C18676 - C18675 + C18678 - C18677) * C23271 +
             (C18680 - C18679 + C18682 - C18681) * C23265 +
             (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                 C23272 +
             (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                 C48112) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C23271 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C23265 +
             (C3963 - C3964 + C3965 - C3966) * C23272 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C48300 +
            ((C7073 - C7074 + C7075 - C7076) * C23271 +
             (C7077 - C7078 + C7079 - C7080) * C23265 +
             (C6287 - C6288 + C6289 - C6290) * C23272 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C48307 +
            ((C19221 - C19222 + C19223 - C19224) * C23271 +
             (C19225 - C19226 + C19227 - C19228) * C23265 +
             (C18465 - C18466 + C18467 - C18468) * C23272 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C36164) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C23271 +
             (C3794 - C3793 + C3796 - C3795) * C23265 +
             (C3798 - C3797 + C3800 - C3799) * C23272 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C48300 +
            (C6535 * C23271 + C6536 * C23265 + C6537 * C23272 +
             C6538 * C48112) *
                C48307 +
            (C18685 * C23271 + C18686 * C23265 +
             (C6525 - C6526 + C6527 - C6528) * C23272 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C36164) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C23271 +
             (C3968 - C3967 + C3970 - C3969) * C23265 +
             (C3972 - C3971 + C3974 - C3973) * C23272 +
             (C3976 - C3975 + C3978 - C3977) * C48112) *
                C48300 +
            ((C6288 - C6287 + C6290 - C6289) * C23271 +
             (C6292 - C6291 + C6294 - C6293) * C23265 +
             (C6296 - C6295 + C6298 - C6297) * C23272 +
             (C6300 - C6299 + C6302 - C6301) * C48112) *
                C48307 +
            ((C18466 - C18465 + C18468 - C18467) * C23271 +
             (C18470 - C18469 + C18472 - C18471) * C23265 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C23272 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48112) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C23271 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C23265 +
            (C3789 - C3790 + C3791 - C3792) * C23272 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C48300 +
           ((C6497 - C6498 + C6499 - C6500) * C23271 +
            (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
            C6534 * C48112) *
               C48307 +
           (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
            C18684 * C48112) *
               C36164) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C23271 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C23265 +
            (C3963 - C3964 + C3965 - C3966) * C23272 +
            (C3967 - C3968 + C3969 - C3970) * C48112) *
               C48300 +
           ((C7073 - C7074 + C7075 - C7076) * C23271 +
            (C7077 - C7078 + C7079 - C7080) * C23265 +
            (C6287 - C6288 + C6289 - C6290) * C23272 +
            (C6291 - C6292 + C6293 - C6294) * C48112) *
               C48307 +
           ((C19221 - C19222 + C19223 - C19224) * C23271 +
            (C19225 - C19226 + C19227 - C19228) * C23265 +
            (C18465 - C18466 + C18467 - C18468) * C23272 +
            (C18469 - C18470 + C18471 - C18472) * C48112) *
               C36164) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C23271 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C23265 +
            (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
                C23272 +
            (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
                C48112) *
               C48300 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C23271 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C23265 +
            (C48461 * C1454 - C3782 * C1449 + C48262 * C1907 - C3783 * C1903) *
                C23272 +
            (C48461 * C1461 - C3782 * C1455 + C48262 * C1912 - C3783 * C1908) *
                C48112) *
               C48307 +
           ((C48461 * C2323 - C3782 * C2317 + C48262 * C9650 - C3783 * C9648) *
                C23271 +
            (C48461 * C2335 - C3782 * C2325 + C48262 * C9654 - C3783 * C9652) *
                C23265 +
            (C48461 * C2327 - C3782 * C2319 + C48262 * C9913 - C3783 * C9912) *
                C23272 +
            (C48461 * C2337 - C3782 * C2329 + C48262 * C9915 - C3783 * C9914) *
                C48112) *
               C36164) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C23271 +
             (C6502 - C6501 + C6504 - C6503) * C23265 + C6535 * C23272 +
             C6536 * C48112) *
                C48300 +
            ((C7615 - C7616 + C7617 - C7618) * C23271 +
             (C7619 - C7620 + C7621 - C7622) * C23265 + C18685 * C23272 +
             C18686 * C48112) *
                C48307 +
            ((C19769 - C19770 + C19771 - C19772) * C23271 +
             (C19773 - C19774 + C19775 - C19776) * C23265 +
             (C18675 - C18676 + C18677 - C18678) * C23272 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C36164) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C23271 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C23265 +
             (C3963 - C3964 + C3965 - C3966) * C23272 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C48300 +
            ((C7073 - C7074 + C7075 - C7076) * C23271 +
             (C7077 - C7078 + C7079 - C7080) * C23265 +
             (C6287 - C6288 + C6289 - C6290) * C23272 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C48307 +
            ((C19221 - C19222 + C19223 - C19224) * C23271 +
             (C19225 - C19226 + C19227 - C19228) * C23265 +
             (C18465 - C18466 + C18467 - C18468) * C23272 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C36164) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C23271 +
             (C7078 - C7077 + C7080 - C7079) * C23265 +
             (C6288 - C6287 + C6290 - C6289) * C23272 +
             (C6292 - C6291 + C6294 - C6293) * C48112) *
                C48300 +
            ((C19222 - C19221 + C19224 - C19223) * C23271 +
             (C19226 - C19225 + C19228 - C19227) * C23265 +
             (C18466 - C18465 + C18468 - C18467) * C23272 +
             (C18470 - C18469 + C18472 - C18471) * C48112) *
                C48307 +
            ((C21601 - C21600 + C21603 - C21602) * C23271 +
             (C21605 - C21604 + C21607 - C21606) * C23265 +
             (C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C23272 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48112) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C23271 +
             (C6502 - C6501 + C6504 - C6503) * C23265 + C6535 * C23272 +
             C6536 * C48112) *
                C48300 +
            ((C7615 - C7616 + C7617 - C7618) * C23271 +
             (C7619 - C7620 + C7621 - C7622) * C23265 + C18685 * C23272 +
             C18686 * C48112) *
                C48307 +
            ((C19769 - C19770 + C19771 - C19772) * C23271 +
             (C19773 - C19774 + C19775 - C19776) * C23265 +
             (C18675 - C18676 + C18677 - C18678) * C23272 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C36164) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C23271 +
             (C3794 - C3793 + C3796 - C3795) * C23265 +
             (C3798 - C3797 + C3800 - C3799) * C23272 +
             (C3802 - C3801 + C3804 - C3803) * C48112) *
                C48300 +
            (C6535 * C23271 + C6536 * C23265 + C6537 * C23272 +
             C6538 * C48112) *
                C48307 +
            (C18685 * C23271 + C18686 * C23265 +
             (C6525 - C6526 + C6527 - C6528) * C23272 +
             (C6529 - C6530 + C6531 - C6532) * C48112) *
                C36164) *
               C779 +
           ((C6533 * C23271 + C6534 * C23265 + C6091 * C23272 +
             C6092 * C48112) *
                C48300 +
            (C18683 * C23271 + C18684 * C23265 +
             (C6526 - C6525 + C6528 - C6527) * C23272 +
             (C6530 - C6529 + C6532 - C6531) * C48112) *
                C48307 +
            ((C18676 - C18675 + C18678 - C18677) * C23271 +
             (C18680 - C18679 + C18682 - C18681) * C23265 +
             (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                 C23272 +
             (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                 C48112) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C23271 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C23265 +
             (C3789 - C3790 + C3791 - C3792) * C23272 +
             (C3793 - C3794 + C3795 - C3796) * C48112) *
                C48300 +
            ((C6497 - C6498 + C6499 - C6500) * C23271 +
             (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
             C6534 * C48112) *
                C48307 +
            (C19777 * C23271 + C19778 * C23265 + C18683 * C23272 +
             C18684 * C48112) *
                C36164) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C23271 +
             (C6502 - C6501 + C6504 - C6503) * C23265 + C6535 * C23272 +
             C6536 * C48112) *
                C48300 +
            ((C7615 - C7616 + C7617 - C7618) * C23271 +
             (C7619 - C7620 + C7621 - C7622) * C23265 + C18685 * C23272 +
             C18686 * C48112) *
                C48307 +
            ((C19769 - C19770 + C19771 - C19772) * C23271 +
             (C19773 - C19774 + C19775 - C19776) * C23265 +
             (C18675 - C18676 + C18677 - C18678) * C23272 +
             (C18679 - C18680 + C18681 - C18682) * C48112) *
                C36164) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C23271 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C23265 +
             (C3963 - C3964 + C3965 - C3966) * C23272 +
             (C3967 - C3968 + C3969 - C3970) * C48112) *
                C48300 +
            ((C7073 - C7074 + C7075 - C7076) * C23271 +
             (C7077 - C7078 + C7079 - C7080) * C23265 +
             (C6287 - C6288 + C6289 - C6290) * C23272 +
             (C6291 - C6292 + C6293 - C6294) * C48112) *
                C48307 +
            ((C19221 - C19222 + C19223 - C19224) * C23271 +
             (C19225 - C19226 + C19227 - C19228) * C23265 +
             (C18465 - C18466 + C18467 - C18468) * C23272 +
             (C18469 - C18470 + C18471 - C18472) * C48112) *
                C36164) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C23271 +
             (C7078 - C7077 + C7080 - C7079) * C23265 +
             (C6288 - C6287 + C6290 - C6289) * C23272 +
             (C6292 - C6291 + C6294 - C6293) * C48112) *
                C48300 +
            ((C19222 - C19221 + C19224 - C19223) * C23271 +
             (C19226 - C19225 + C19228 - C19227) * C23265 +
             (C18466 - C18465 + C18468 - C18467) * C23272 +
             (C18470 - C18469 + C18472 - C18471) * C48112) *
                C48307 +
            ((C21601 - C21600 + C21603 - C21602) * C23271 +
             (C21605 - C21604 + C21607 - C21606) * C23265 +
             (C48461 * C3232 - C3782 * C3228 + C48262 * C10066 -
              C3783 * C10063) *
                 C23272 +
             (C48461 * C3237 - C3782 * C3233 + C48262 * C10069 -
              C3783 * C10067) *
                 C48112) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C23271 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C23265 +
            (C3789 - C3790 + C3791 - C3792) * C23272 +
            (C3793 - C3794 + C3795 - C3796) * C48112) *
               C48300 +
           ((C6497 - C6498 + C6499 - C6500) * C23271 +
            (C6501 - C6502 + C6503 - C6504) * C23265 + C6533 * C23272 +
            C6534 * C48112) *
               C48307 +
           C38881 * C36164) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C23271 +
            (C6502 - C6501 + C6504 - C6503) * C23265 + C6535 * C23272 +
            C6536 * C48112) *
               C48300 +
           ((C7615 - C7616 + C7617 - C7618) * C23271 +
            (C7619 - C7620 + C7621 - C7622) * C23265 + C18685 * C23272 +
            C18686 * C48112) *
               C48307 +
           ((C19769 - C19770 + C19771 - C19772) * C23271 +
            (C19773 - C19774 + C19775 - C19776) * C23265 +
            (C18675 - C18676 + C18677 - C18678) * C23272 +
            (C18679 - C18680 + C18681 - C18682) * C48112) *
               C36164) *
              C926 +
          (C38881 * C48300 +
           (C21981 * C23271 + C21982 * C23265 +
            (C18676 - C18675 + C18678 - C18677) * C23272 +
            (C18680 - C18679 + C18682 - C18681) * C48112) *
               C48307 +
           ((C21973 - C21972 + C21975 - C21974) * C23271 +
            (C21977 - C21976 + C21979 - C21978) * C23265 +
            (C48461 * C3654 - C3782 * C3650 + C48262 * C17538 -
             C3783 * C17537) *
                C23272 +
            (C48461 * C3659 - C3782 * C3655 + C48262 * C17540 -
             C3783 * C17539) *
                C48112) *
               C36164) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            (C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C23272 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
               C30746 +
           ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C23271 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C23265 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C1115 * C23271 + C1116 * C23265 +
            (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C23272 +
            (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C48112) *
               C30746 +
           ((C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23271 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C23265 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C23272 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C22091 + (C151 - C150) * C48535 +
            (C153 - C152) * C22092 + (C155 - C154) * C48528 +
            (C157 - C156) * C22093 + (C159 - C158) * C48515 +
            (C161 - C160) * C22094 + (C163 - C162) * C48498) *
               C30746 +
           (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
            C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
            (C422 - C423) * C48498) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C168 * C22091 + C169 * C48535 + C170 * C22092 + C171 * C48528 +
            C172 * C22093 + C173 * C48515 + (C165 - C164) * C22094 +
            (C167 - C166) * C48498) *
               C30746 +
           (C2454 * C22091 + C2455 * C48535 + C4957 * C22092 + C4958 * C48528 +
            (C421 - C420) * C22093 + (C423 - C422) * C48515 +
            (C48199 * C399 - C113 * C388) * C22094 +
            (C48199 * C406 - C113 * C400) * C48498) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C23271 +
            (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
            (C150 - C151) * C48112) *
               C48537 +
           ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
            C2802 * C23272 + C2803 * C48112) *
               C48534 +
           (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 + C2809 * C48112) *
               C48525 +
           (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
            C20151 * C48112) *
               C48510) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C23271 + (C151 - C150) * C23265 +
            (C153 - C152) * C23272 + (C155 - C154) * C48112) *
               C48537 +
           (C2810 * C23271 + C2811 * C23265 + C2812 * C23272 + C2813 * C48112) *
               C48534 +
           (C2814 * C23271 + C2815 * C23265 + C2816 * C23272 + C2817 * C48112) *
               C48525 +
           (C20152 * C23271 + C20153 * C23265 + (C2822 - C2823) * C23272 +
            (C2824 - C2825) * C48112) *
               C48510) *
              C48188 * C48171 * C111 +
          ((C168 * C23271 + C169 * C23265 + C170 * C23272 + C171 * C48112) *
               C48537 +
           (C2454 * C23271 + C2455 * C23265 + C4957 * C23272 + C4958 * C48112) *
               C48534 +
           (C2468 * C23271 + C2469 * C23265 + (C2465 - C2464) * C23272 +
            (C2467 - C2466) * C48112) *
               C48525 +
           ((C2823 - C2822) * C23271 + (C2825 - C2824) * C23265 +
            (C48199 * C2791 - C113 * C2784) * C23272 +
            (C48199 * C2796 - C113 * C2792) * C48112) *
               C48510) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             (C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C23272 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C23271 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C23271 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C23265 +
             (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C23272 +
             (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C48112) *
                C30746 +
            ((C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23271 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C23265 +
             (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
              C48494 * C1909 - C1066 * C1904) *
                 C23272 +
             (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
              C48494 * C1913 - C1066 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C255 +
           (((C285 - C284) * C22091 + (C287 - C286) * C48535 +
             (C289 - C288) * C22092 + (C291 - C290) * C48528 +
             (C293 - C292) * C22093 + (C295 - C294) * C48515 +
             (C297 - C296) * C22094 + (C299 - C298) * C48498) *
                C30746 +
            ((C2621 - C2620) * C22091 + (C2623 - C2622) * C48535 +
             (C2625 - C2624) * C22092 + (C2627 - C2626) * C48528 +
             (C5090 - C5089) * C22093 + (C5092 - C5091) * C48515 +
             (C48199 * C690 - C113 * C681) * C22094 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C23271 +
             (C113 * C266 - C48199 * C277) * C23265 + (C284 - C285) * C23272 +
             (C286 - C287) * C48112) *
                C48537 +
            ((C3240 - C3241) * C23271 + (C3242 - C3243) * C23265 +
             (C2620 - C2621) * C23272 + (C2622 - C2623) * C48112) *
                C48534 +
            ((C3244 - C3245) * C23271 + (C3246 - C3247) * C23265 +
             (C2628 - C2629) * C23272 + (C2630 - C2631) * C48112) *
                C48525 +
            ((C17870 - C17871) * C23271 + (C17872 - C17873) * C23265 +
             (C20016 - C20017) * C23272 + (C20018 - C20019) * C48112) *
                C48510) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C23271 + (C151 - C150) * C23265 +
             (C153 - C152) * C23272 + (C155 - C154) * C48112) *
                C48537 +
            (C2810 * C23271 + C2811 * C23265 + C2812 * C23272 +
             C2813 * C48112) *
                C48534 +
            (C2814 * C23271 + C2815 * C23265 + C2816 * C23272 +
             C2817 * C48112) *
                C48525 +
            (C20152 * C23271 + C20153 * C23265 + (C2822 - C2823) * C23272 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C48188 * C255 +
           (((C285 - C284) * C23271 + (C287 - C286) * C23265 +
             (C289 - C288) * C23272 + (C291 - C290) * C48112) *
                C48537 +
            ((C2621 - C2620) * C23271 + (C2623 - C2622) * C23265 +
             (C2625 - C2624) * C23272 + (C2627 - C2626) * C48112) *
                C48534 +
            ((C2629 - C2628) * C23271 + (C2631 - C2630) * C23265 +
             (C2633 - C2632) * C23272 + (C2635 - C2634) * C48112) *
                C48525 +
            ((C20017 - C20016) * C23271 + (C20019 - C20018) * C23265 +
             (C48199 * C3234 - C113 * C3229) * C23272 +
             (C48199 * C3238 - C113 * C3235) * C48112) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C381 +
           ((C32287 * C23271 + C32288 * C23265 +
             (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23272 +
             (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48112) *
                C30746 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23271 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C23265 +
             (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
              C48494 * C2331 - C1066 * C2321) *
                 C23272 +
             (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
              C48494 * C2339 - C1066 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C381 +
           ((C2802 * C22091 + C2803 * C48535 + C2454 * C22092 + C2455 * C48528 +
             C4957 * C22093 + C4958 * C48515 + (C421 - C420) * C22094 +
             (C423 - C422) * C48498) *
                C30746 +
            (C2808 * C22091 + C2809 * C48535 + C2468 * C22092 + C2469 * C48528 +
             (C2465 - C2464) * C22093 + (C2467 - C2466) * C48515 +
             (C48199 * C941 - C113 * C932) * C22094 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C381 +
           (((C2799 - C2798) * C23271 + (C2801 - C2800) * C23265 +
             C2810 * C23272 + C2811 * C48112) *
                C48537 +
            ((C2805 - C2804) * C23271 + (C2807 - C2806) * C23265 +
             C2814 * C23272 + C2815 * C48112) *
                C48534 +
            ((C3668 - C3669) * C23271 + (C3670 - C3671) * C23265 +
             C20152 * C23272 + C20153 * C48112) *
                C48525 +
            ((C17633 - C17632) * C23271 + (C17635 - C17634) * C23265 +
             (C17636 - C17637) * C23272 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C23271 + (C151 - C150) * C23265 +
             (C153 - C152) * C23272 + (C155 - C154) * C48112) *
                C48537 +
            (C2810 * C23271 + C2811 * C23265 + C2812 * C23272 +
             C2813 * C48112) *
                C48534 +
            (C2814 * C23271 + C2815 * C23265 + C2816 * C23272 +
             C2817 * C48112) *
                C48525 +
            (C20152 * C23271 + C20153 * C23265 + (C2822 - C2823) * C23272 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C381 +
           ((C2802 * C23271 + C2803 * C23265 + C2454 * C23272 +
             C2455 * C48112) *
                C48537 +
            (C2808 * C23271 + C2809 * C23265 + C2468 * C23272 +
             C2469 * C48112) *
                C48534 +
            (C20150 * C23271 + C20151 * C23265 + (C2823 - C2822) * C23272 +
             (C2825 - C2824) * C48112) *
                C48525 +
            ((C17637 - C17636) * C23271 + (C17639 - C17638) * C23265 +
             (C48199 * C3656 - C113 * C3651) * C23272 +
             (C48199 * C3660 - C113 * C3657) * C48112) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C23271 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C23265 +
             (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C23272 +
             (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C48112) *
                C30746 +
            ((C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23271 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C23265 +
             (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
              C48494 * C1909 - C1066 * C1904) *
                 C23272 +
             (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
              C48494 * C1913 - C1066 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C505 +
           (((C285 - C284) * C22091 + (C287 - C286) * C48535 +
             (C289 - C288) * C22092 + (C291 - C290) * C48528 +
             (C293 - C292) * C22093 + (C295 - C294) * C48515 +
             (C297 - C296) * C22094 + (C299 - C298) * C48498) *
                C30746 +
            ((C2621 - C2620) * C22091 + (C2623 - C2622) * C48535 +
             (C2625 - C2624) * C22092 + (C2627 - C2626) * C48528 +
             (C5090 - C5089) * C22093 + (C5092 - C5091) * C48515 +
             (C48199 * C690 - C113 * C681) * C22094 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C23271 +
             (C113 * C266 - C48199 * C277) * C23265 + (C284 - C285) * C23272 +
             (C286 - C287) * C48112) *
                C48537 +
            ((C3240 - C3241) * C23271 + (C3242 - C3243) * C23265 +
             (C2620 - C2621) * C23272 + (C2622 - C2623) * C48112) *
                C48534 +
            ((C3244 - C3245) * C23271 + (C3246 - C3247) * C23265 +
             (C2628 - C2629) * C23272 + (C2630 - C2631) * C48112) *
                C48525 +
            ((C17870 - C17871) * C23271 + (C17872 - C17873) * C23265 +
             (C20016 - C20017) * C23272 + (C20018 - C20019) * C48112) *
                C48510) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C23271 + (C151 - C150) * C23265 +
             (C153 - C152) * C23272 + (C155 - C154) * C48112) *
                C48537 +
            (C2810 * C23271 + C2811 * C23265 + C2812 * C23272 +
             C2813 * C48112) *
                C48534 +
            (C2814 * C23271 + C2815 * C23265 + C2816 * C23272 +
             C2817 * C48112) *
                C48525 +
            (C20152 * C23271 + C20153 * C23265 + (C2822 - C2823) * C23272 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C48188 * C505 +
           (((C285 - C284) * C23271 + (C287 - C286) * C23265 +
             (C289 - C288) * C23272 + (C291 - C290) * C48112) *
                C48537 +
            ((C2621 - C2620) * C23271 + (C2623 - C2622) * C23265 +
             (C2625 - C2624) * C23272 + (C2627 - C2626) * C48112) *
                C48534 +
            ((C2629 - C2628) * C23271 + (C2631 - C2630) * C23265 +
             (C2633 - C2632) * C23272 + (C2635 - C2634) * C48112) *
                C48525 +
            ((C20017 - C20016) * C23271 + (C20019 - C20018) * C23265 +
             (C48199 * C3234 - C113 * C3229) * C23272 +
             (C48199 * C3238 - C113 * C3235) * C48112) *
                C48510) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            C32287 * C23272 + C32288 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C23271 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C23265 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
               C30746 +
           ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
            (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
            (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
            (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
             C48494 * C1747 - C1066 * C1744) *
                C23271 +
            (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
             C48494 * C1753 - C1066 * C1748) *
                C23265 +
            (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
             C48494 * C1749 - C1066 * C1745) *
                C23272 +
            (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
             C48494 * C1754 - C1066 * C1750) *
                C48112) *
               C30746 +
           ((C48529 * C1452 - C1064 * C1448 + C48517 * C1905 - C1065 * C1902 +
             C48494 * C9182 - C1066 * C9180) *
                C23271 +
            (C48529 * C1460 - C1064 * C1453 + C48517 * C1911 - C1065 * C1906 +
             C48494 * C9186 - C1066 * C9183) *
                C23265 +
            (C48529 * C1454 - C1064 * C1449 + C48517 * C1907 - C1065 * C1903 +
             C48494 * C9184 - C1066 * C9181) *
                C23272 +
            (C48529 * C1461 - C1064 * C1455 + C48517 * C1912 - C1065 * C1908 +
             C48494 * C9187 - C1066 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C22091 +
            (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
            (C286 - C287) * C48528 + (C288 - C289) * C22093 +
            (C290 - C291) * C48515 + (C292 - C293) * C22094 +
            (C294 - C295) * C48498) *
               C30746 +
           ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
            (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
            (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
            (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
               C48304) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C22091 +
            (C48199 * C590 - C113 * C581) * C48535 +
            (C48199 * C582 - C113 * C576) * C22092 +
            (C48199 * C591 - C113 * C583) * C48528 +
            (C48199 * C584 - C113 * C577) * C22093 +
            (C48199 * C592 - C113 * C585) * C48515 +
            (C48199 * C586 - C113 * C578) * C22094 +
            (C48199 * C593 - C113 * C587) * C48498) *
               C30746 +
           ((C48199 * C1452 - C113 * C1448) * C22091 +
            (C48199 * C1460 - C113 * C1453) * C48535 +
            (C48199 * C1454 - C113 * C1449) * C22092 +
            (C48199 * C1461 - C113 * C1455) * C48528 +
            (C48199 * C1456 - C113 * C1450) * C22093 +
            (C48199 * C1462 - C113 * C1457) * C48515 +
            (C48199 * C1458 - C113 * C1451) * C22094 +
            (C48199 * C1463 - C113 * C1459) * C48498) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C23271 +
            (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
            (C150 - C151) * C48112) *
               C48537 +
           ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
            C2802 * C23272 + C2803 * C48112) *
               C48534 +
           (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 + C2809 * C48112) *
               C48525 +
           (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
            C20151 * C48112) *
               C48510) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C23271 +
            (C113 * C266 - C48199 * C277) * C23265 + (C284 - C285) * C23272 +
            (C286 - C287) * C48112) *
               C48537 +
           ((C3240 - C3241) * C23271 + (C3242 - C3243) * C23265 +
            (C2620 - C2621) * C23272 + (C2622 - C2623) * C48112) *
               C48534 +
           ((C3244 - C3245) * C23271 + (C3246 - C3247) * C23265 +
            (C2628 - C2629) * C23272 + (C2630 - C2631) * C48112) *
               C48525 +
           ((C17870 - C17871) * C23271 + (C17872 - C17873) * C23265 +
            (C20016 - C20017) * C23272 + (C20018 - C20019) * C48112) *
               C48510) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C23271 +
            (C48199 * C590 - C113 * C581) * C23265 +
            (C48199 * C582 - C113 * C576) * C23272 +
            (C48199 * C591 - C113 * C583) * C48112) *
               C48537 +
           ((C48199 * C1452 - C113 * C1448) * C23271 +
            (C48199 * C1460 - C113 * C1453) * C23265 +
            (C48199 * C1454 - C113 * C1449) * C23272 +
            (C48199 * C1461 - C113 * C1455) * C48112) *
               C48534 +
           ((C48199 * C2323 - C113 * C2317) * C23271 +
            (C48199 * C2335 - C113 * C2325) * C23265 +
            (C48199 * C2327 - C113 * C2319) * C23272 +
            (C48199 * C2337 - C113 * C2329) * C48112) *
               C48525 +
           ((C48199 * C10064 - C113 * C10062) * C23271 +
            (C48199 * C10068 - C113 * C10065) * C23265 +
            (C48199 * C10066 - C113 * C10063) * C23272 +
            (C48199 * C10069 - C113 * C10067) * C48112) *
               C48510) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C381 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C23271 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C23265 +
             (C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23272 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C48112) *
                C30746 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C23271 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C23265 +
             (C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C23272 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C381 +
           (((C3241 - C3240) * C22091 + (C3243 - C3242) * C48535 +
             (C2621 - C2620) * C22092 + (C2623 - C2622) * C48528 +
             (C2625 - C2624) * C22093 + (C2627 - C2626) * C48515 +
             (C5090 - C5089) * C22094 + (C5092 - C5091) * C48498) *
                C30746 +
            ((C3245 - C3244) * C22091 + (C3247 - C3246) * C48535 +
             (C2629 - C2628) * C22092 + (C2631 - C2630) * C48528 +
             (C2633 - C2632) * C22093 + (C2635 - C2634) * C48515 +
             (C48199 * C2616 - C113 * C2615) * C22094 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C381 +
           (((C2799 - C2798) * C23271 + (C2801 - C2800) * C23265 +
             C2810 * C23272 + C2811 * C48112) *
                C48537 +
            ((C2805 - C2804) * C23271 + (C2807 - C2806) * C23265 +
             C2814 * C23272 + C2815 * C48112) *
                C48534 +
            ((C3668 - C3669) * C23271 + (C3670 - C3671) * C23265 +
             C20152 * C23272 + C20153 * C48112) *
                C48525 +
            ((C17633 - C17632) * C23271 + (C17635 - C17634) * C23265 +
             (C17636 - C17637) * C23272 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C23271 +
             (C113 * C266 - C48199 * C277) * C23265 + (C284 - C285) * C23272 +
             (C286 - C287) * C48112) *
                C48537 +
            ((C3240 - C3241) * C23271 + (C3242 - C3243) * C23265 +
             (C2620 - C2621) * C23272 + (C2622 - C2623) * C48112) *
                C48534 +
            ((C3244 - C3245) * C23271 + (C3246 - C3247) * C23265 +
             (C2628 - C2629) * C23272 + (C2630 - C2631) * C48112) *
                C48525 +
            ((C17870 - C17871) * C23271 + (C17872 - C17873) * C23265 +
             (C20016 - C20017) * C23272 + (C20018 - C20019) * C48112) *
                C48510) *
               C381 +
           (((C3241 - C3240) * C23271 + (C3243 - C3242) * C23265 +
             (C2621 - C2620) * C23272 + (C2623 - C2622) * C48112) *
                C48537 +
            ((C3245 - C3244) * C23271 + (C3247 - C3246) * C23265 +
             (C2629 - C2628) * C23272 + (C2631 - C2630) * C48112) *
                C48534 +
            ((C17871 - C17870) * C23271 + (C17873 - C17872) * C23265 +
             (C20017 - C20016) * C23272 + (C20019 - C20018) * C48112) *
                C48525 +
            ((C17875 - C17874) * C23271 + (C17877 - C17876) * C23265 +
             (C48199 * C17538 - C113 * C17537) * C23272 +
             (C48199 * C17540 - C113 * C17539) * C48112) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C779 +
           ((C32287 * C23271 + C32288 * C23265 +
             (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23272 +
             (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48112) *
                C30746 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23271 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C23265 +
             (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
              C48494 * C2331 - C1066 * C2321) *
                 C23272 +
             (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
              C48494 * C2339 - C1066 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C779 +
           ((C2802 * C22091 + C2803 * C48535 + C2454 * C22092 + C2455 * C48528 +
             C4957 * C22093 + C4958 * C48515 + (C421 - C420) * C22094 +
             (C423 - C422) * C48498) *
                C30746 +
            (C2808 * C22091 + C2809 * C48535 + C2468 * C22092 + C2469 * C48528 +
             (C2465 - C2464) * C22093 + (C2467 - C2466) * C48515 +
             (C48199 * C941 - C113 * C932) * C22094 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C779 +
           (((C2799 - C2798) * C23271 + (C2801 - C2800) * C23265 +
             C2810 * C23272 + C2811 * C48112) *
                C48537 +
            ((C2805 - C2804) * C23271 + (C2807 - C2806) * C23265 +
             C2814 * C23272 + C2815 * C48112) *
                C48534 +
            ((C3668 - C3669) * C23271 + (C3670 - C3671) * C23265 +
             C20152 * C23272 + C20153 * C48112) *
                C48525 +
            ((C17633 - C17632) * C23271 + (C17635 - C17634) * C23265 +
             (C17636 - C17637) * C23272 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C23271 + (C151 - C150) * C23265 +
             (C153 - C152) * C23272 + (C155 - C154) * C48112) *
                C48537 +
            (C2810 * C23271 + C2811 * C23265 + C2812 * C23272 +
             C2813 * C48112) *
                C48534 +
            (C2814 * C23271 + C2815 * C23265 + C2816 * C23272 +
             C2817 * C48112) *
                C48525 +
            (C20152 * C23271 + C20153 * C23265 + (C2822 - C2823) * C23272 +
             (C2824 - C2825) * C48112) *
                C48510) *
               C779 +
           ((C2802 * C23271 + C2803 * C23265 + C2454 * C23272 +
             C2455 * C48112) *
                C48537 +
            (C2808 * C23271 + C2809 * C23265 + C2468 * C23272 +
             C2469 * C48112) *
                C48534 +
            (C20150 * C23271 + C20151 * C23265 + (C2823 - C2822) * C23272 +
             (C2825 - C2824) * C48112) *
                C48525 +
            ((C17637 - C17636) * C23271 + (C17639 - C17638) * C23265 +
             (C48199 * C3656 - C113 * C3651) * C23272 +
             (C48199 * C3660 - C113 * C3657) * C48112) *
                C48510) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C779 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C23271 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C23265 +
             (C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23272 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C48112) *
                C30746 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C23271 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C23265 +
             (C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C23272 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C779 +
           (((C3241 - C3240) * C22091 + (C3243 - C3242) * C48535 +
             (C2621 - C2620) * C22092 + (C2623 - C2622) * C48528 +
             (C2625 - C2624) * C22093 + (C2627 - C2626) * C48515 +
             (C5090 - C5089) * C22094 + (C5092 - C5091) * C48498) *
                C30746 +
            ((C3245 - C3244) * C22091 + (C3247 - C3246) * C48535 +
             (C2629 - C2628) * C22092 + (C2631 - C2630) * C48528 +
             (C2633 - C2632) * C22093 + (C2635 - C2634) * C48515 +
             (C48199 * C2616 - C113 * C2615) * C22094 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C23271 +
             (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
             (C150 - C151) * C48112) *
                C48537 +
            ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
             C2802 * C23272 + C2803 * C48112) *
                C48534 +
            (C3662 * C23271 + C3663 * C23265 + C2808 * C23272 +
             C2809 * C48112) *
                C48525 +
            (C18110 * C23271 + C18111 * C23265 + C20150 * C23272 +
             C20151 * C48112) *
                C48510) *
               C779 +
           (((C2799 - C2798) * C23271 + (C2801 - C2800) * C23265 +
             C2810 * C23272 + C2811 * C48112) *
                C48537 +
            ((C2805 - C2804) * C23271 + (C2807 - C2806) * C23265 +
             C2814 * C23272 + C2815 * C48112) *
                C48534 +
            ((C3668 - C3669) * C23271 + (C3670 - C3671) * C23265 +
             C20152 * C23272 + C20153 * C48112) *
                C48525 +
            ((C17633 - C17632) * C23271 + (C17635 - C17634) * C23265 +
             (C17636 - C17637) * C23272 + (C17638 - C17639) * C48112) *
                C48510) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C23271 +
             (C113 * C266 - C48199 * C277) * C23265 + (C284 - C285) * C23272 +
             (C286 - C287) * C48112) *
                C48537 +
            ((C3240 - C3241) * C23271 + (C3242 - C3243) * C23265 +
             (C2620 - C2621) * C23272 + (C2622 - C2623) * C48112) *
                C48534 +
            ((C3244 - C3245) * C23271 + (C3246 - C3247) * C23265 +
             (C2628 - C2629) * C23272 + (C2630 - C2631) * C48112) *
                C48525 +
            ((C17870 - C17871) * C23271 + (C17872 - C17873) * C23265 +
             (C20016 - C20017) * C23272 + (C20018 - C20019) * C48112) *
                C48510) *
               C779 +
           (((C3241 - C3240) * C23271 + (C3243 - C3242) * C23265 +
             (C2621 - C2620) * C23272 + (C2623 - C2622) * C48112) *
                C48537 +
            ((C3245 - C3244) * C23271 + (C3247 - C3246) * C23265 +
             (C2629 - C2628) * C23272 + (C2631 - C2630) * C48112) *
                C48534 +
            ((C17871 - C17870) * C23271 + (C17873 - C17872) * C23265 +
             (C20017 - C20016) * C23272 + (C20019 - C20018) * C48112) *
                C48525 +
            ((C17875 - C17874) * C23271 + (C17877 - C17876) * C23265 +
             (C48199 * C17538 - C113 * C17537) * C23272 +
             (C48199 * C17540 - C113 * C17539) * C48112) *
                C48510) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            C32287 * C23272 + C32288 * C48112) *
               C48304) *
              C925 +
          (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
            (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
            C32289 * C23272 + C32290 * C48112) *
               C30746 +
           ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
            (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
            (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
               C48304) *
              C926 +
          ((C17384 * C23271 + C17385 * C23265 +
            (C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23272 +
            (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48112) *
               C30746 +
           ((C17371 - C17370 + C17373 - C17372 + C17375 - C17374) * C23271 +
            (C17377 - C17376 + C17379 - C17378 + C17381 - C17380) * C23265 +
            (C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
             C48494 * C10066 - C1066 * C10063) *
                C23272 +
            (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
             C48494 * C10069 - C1066 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C925 +
          (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
            C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
            C5223 * C22094 + C5224 * C48498) *
               C30746 +
           ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
            C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
            (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
               C48304) *
              C926 +
          ((C3662 * C22091 + C3663 * C48535 + C2808 * C22092 + C2809 * C48528 +
            C2468 * C22093 + C2469 * C48515 + (C2465 - C2464) * C22094 +
            (C2467 - C2466) * C48498) *
               C30746 +
           (C18110 * C22091 + C18111 * C48535 + C20150 * C22092 +
            C20151 * C48528 + (C2823 - C2822) * C22093 +
            (C2825 - C2824) * C48515 +
            (C48199 * C2791 - C113 * C2784) * C22094 +
            (C48199 * C2796 - C113 * C2792) * C48498) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C23271 +
            (C48199 * C140 - C113 * C127) * C23265 + (C148 - C149) * C23272 +
            (C150 - C151) * C48112) *
               C48537 +
           ((C2798 - C2799) * C23271 + (C2800 - C2801) * C23265 +
            C2802 * C23272 + C2803 * C48112) *
               C48534 +
           C34449 * C48525 + C34450 * C48510) *
              C925 +
          (((C2799 - C2798) * C23271 + (C2801 - C2800) * C23265 +
            C2810 * C23272 + C2811 * C48112) *
               C48537 +
           ((C2805 - C2804) * C23271 + (C2807 - C2806) * C23265 +
            C2814 * C23272 + C2815 * C48112) *
               C48534 +
           ((C3668 - C3669) * C23271 + (C3670 - C3671) * C23265 +
            C20152 * C23272 + C20153 * C48112) *
               C48525 +
           ((C17633 - C17632) * C23271 + (C17635 - C17634) * C23265 +
            (C17636 - C17637) * C23272 + (C17638 - C17639) * C48112) *
               C48510) *
              C926 +
          (C34449 * C48537 + C34450 * C48534 +
           (C18112 * C23271 + C18113 * C23265 + (C17637 - C17636) * C23272 +
            (C17639 - C17638) * C48112) *
               C48525 +
           ((C18115 - C18114) * C23271 + (C18117 - C18116) * C23265 +
            (C48199 * C17627 - C113 * C17624) * C23272 +
            (C48199 * C17630 - C113 * C17628) * C48112) *
               C48510) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47235 +
            (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
            (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
               C48300 +
           ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
            C2802 * C47231 + C2803 * C48115 + C2454 * C47241 + C2455 * C26147) *
               C48307 +
           (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
            C2468 * C47241 + C2469 * C26147) *
               C36164) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C47235 + (C151 - C150) * C48107 +
            (C153 - C152) * C47231 + (C155 - C154) * C48115 +
            (C157 - C156) * C47241 + (C159 - C158) * C26147) *
               C48300 +
           (C2810 * C47235 + C2811 * C48107 + C2812 * C47231 + C2813 * C48115 +
            C5223 * C47241 + C5224 * C26147) *
               C48307 +
           (C2814 * C47235 + C2815 * C48107 + C2816 * C47231 + C2817 * C48115 +
            (C2464 - C2465) * C47241 + (C2466 - C2467) * C26147) *
               C36164) *
              C48188 * C48171 * C111 +
          ((C168 * C47235 + C169 * C48107 + C170 * C47231 + C171 * C48115 +
            C172 * C47241 + C173 * C26147) *
               C48300 +
           (C2454 * C47235 + C2455 * C48107 + C4957 * C47231 + C4958 * C48115 +
            (C421 - C420) * C47241 + (C423 - C422) * C26147) *
               C48307 +
           (C2468 * C47235 + C2469 * C48107 + (C2465 - C2464) * C47231 +
            (C2467 - C2466) * C48115 + (C48199 * C941 - C113 * C932) * C47241 +
            (C48199 * C947 - C113 * C942) * C26147) *
               C36164) *
              C48188 * C48171 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C47235 +
             (C113 * C266 - C48199 * C277) * C48107 + (C284 - C285) * C47231 +
             (C286 - C287) * C48115 + (C288 - C289) * C47241 +
             (C290 - C291) * C26147) *
                C48300 +
            ((C3240 - C3241) * C47235 + (C3242 - C3243) * C48107 +
             (C2620 - C2621) * C47231 + (C2622 - C2623) * C48115 +
             (C2624 - C2625) * C47241 + (C2626 - C2627) * C26147) *
                C48307 +
            ((C3244 - C3245) * C47235 + (C3246 - C3247) * C48107 +
             (C2628 - C2629) * C47231 + (C2630 - C2631) * C48115 +
             (C2632 - C2633) * C47241 + (C2634 - C2635) * C26147) *
                C36164) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48107 +
             (C153 - C152) * C47231 + (C155 - C154) * C48115 +
             (C157 - C156) * C47241 + (C159 - C158) * C26147) *
                C48300 +
            (C2810 * C47235 + C2811 * C48107 + C2812 * C47231 + C2813 * C48115 +
             C5223 * C47241 + C5224 * C26147) *
                C48307 +
            (C2814 * C47235 + C2815 * C48107 + C2816 * C47231 + C2817 * C48115 +
             (C2464 - C2465) * C47241 + (C2466 - C2467) * C26147) *
                C36164) *
               C48188 * C255 +
           (((C285 - C284) * C47235 + (C287 - C286) * C48107 +
             (C289 - C288) * C47231 + (C291 - C290) * C48115 +
             (C293 - C292) * C47241 + (C295 - C294) * C26147) *
                C48300 +
            ((C2621 - C2620) * C47235 + (C2623 - C2622) * C48107 +
             (C2625 - C2624) * C47231 + (C2627 - C2626) * C48115 +
             (C5090 - C5089) * C47241 + (C5092 - C5091) * C26147) *
                C48307 +
            ((C2629 - C2628) * C47235 + (C2631 - C2630) * C48107 +
             (C2633 - C2632) * C47231 + (C2635 - C2634) * C48115 +
             (C48199 * C2616 - C113 * C2615) * C47241 +
             (C48199 * C2618 - C113 * C2617) * C26147) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C381 +
           (((C2799 - C2798) * C47235 + (C2801 - C2800) * C48107 +
             C2810 * C47231 + C2811 * C48115 + C2812 * C47241 +
             C2813 * C26147) *
                C48300 +
            ((C2805 - C2804) * C47235 + (C2807 - C2806) * C48107 +
             C2814 * C47231 + C2815 * C48115 + C2816 * C47241 +
             C2817 * C26147) *
                C48307 +
            ((C3668 - C3669) * C47235 + (C3670 - C3671) * C48107 +
             C20152 * C47231 + C20153 * C48115 + (C2822 - C2823) * C47241 +
             (C2824 - C2825) * C26147) *
                C36164) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48107 +
             (C153 - C152) * C47231 + (C155 - C154) * C48115 +
             (C157 - C156) * C47241 + (C159 - C158) * C26147) *
                C48300 +
            (C2810 * C47235 + C2811 * C48107 + C2812 * C47231 + C2813 * C48115 +
             C5223 * C47241 + C5224 * C26147) *
                C48307 +
            (C2814 * C47235 + C2815 * C48107 + C2816 * C47231 + C2817 * C48115 +
             (C2464 - C2465) * C47241 + (C2466 - C2467) * C26147) *
                C36164) *
               C381 +
           ((C2802 * C47235 + C2803 * C48107 + C2454 * C47231 + C2455 * C48115 +
             C4957 * C47241 + C4958 * C26147) *
                C48300 +
            (C2808 * C47235 + C2809 * C48107 + C2468 * C47231 + C2469 * C48115 +
             (C2465 - C2464) * C47241 + (C2467 - C2466) * C26147) *
                C48307 +
            (C20150 * C47235 + C20151 * C48107 + (C2823 - C2822) * C47231 +
             (C2825 - C2824) * C48115 +
             (C48199 * C2791 - C113 * C2784) * C47241 +
             (C48199 * C2796 - C113 * C2792) * C26147) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C47235 +
             (C113 * C266 - C48199 * C277) * C48107 + (C284 - C285) * C47231 +
             (C286 - C287) * C48115 + (C288 - C289) * C47241 +
             (C290 - C291) * C26147) *
                C48300 +
            ((C3240 - C3241) * C47235 + (C3242 - C3243) * C48107 +
             (C2620 - C2621) * C47231 + (C2622 - C2623) * C48115 +
             (C2624 - C2625) * C47241 + (C2626 - C2627) * C26147) *
                C48307 +
            ((C3244 - C3245) * C47235 + (C3246 - C3247) * C48107 +
             (C2628 - C2629) * C47231 + (C2630 - C2631) * C48115 +
             (C2632 - C2633) * C47241 + (C2634 - C2635) * C26147) *
                C36164) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48107 +
             (C153 - C152) * C47231 + (C155 - C154) * C48115 +
             (C157 - C156) * C47241 + (C159 - C158) * C26147) *
                C48300 +
            (C2810 * C47235 + C2811 * C48107 + C2812 * C47231 + C2813 * C48115 +
             C5223 * C47241 + C5224 * C26147) *
                C48307 +
            (C2814 * C47235 + C2815 * C48107 + C2816 * C47231 + C2817 * C48115 +
             (C2464 - C2465) * C47241 + (C2466 - C2467) * C26147) *
                C36164) *
               C48188 * C505 +
           (((C285 - C284) * C47235 + (C287 - C286) * C48107 +
             (C289 - C288) * C47231 + (C291 - C290) * C48115 +
             (C293 - C292) * C47241 + (C295 - C294) * C26147) *
                C48300 +
            ((C2621 - C2620) * C47235 + (C2623 - C2622) * C48107 +
             (C2625 - C2624) * C47231 + (C2627 - C2626) * C48115 +
             (C5090 - C5089) * C47241 + (C5092 - C5091) * C26147) *
                C48307 +
            ((C2629 - C2628) * C47235 + (C2631 - C2630) * C48107 +
             (C2633 - C2632) * C47231 + (C2635 - C2634) * C48115 +
             (C48199 * C2616 - C113 * C2615) * C47241 +
             (C48199 * C2618 - C113 * C2617) * C26147) *
                C36164) *
               C48188 * C48489) *
              C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47235 +
            (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
            (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
               C48300 +
           ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
            C2802 * C47231 + C2803 * C48115 + C2454 * C47241 + C2455 * C26147) *
               C48307 +
           (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
            C2468 * C47241 + C2469 * C26147) *
               C36164) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C47235 +
            (C113 * C266 - C48199 * C277) * C48107 + (C284 - C285) * C47231 +
            (C286 - C287) * C48115 + (C288 - C289) * C47241 +
            (C290 - C291) * C26147) *
               C48300 +
           ((C3240 - C3241) * C47235 + (C3242 - C3243) * C48107 +
            (C2620 - C2621) * C47231 + (C2622 - C2623) * C48115 +
            (C2624 - C2625) * C47241 + (C2626 - C2627) * C26147) *
               C48307 +
           ((C3244 - C3245) * C47235 + (C3246 - C3247) * C48107 +
            (C2628 - C2629) * C47231 + (C2630 - C2631) * C48115 +
            (C2632 - C2633) * C47241 + (C2634 - C2635) * C26147) *
               C36164) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C47235 +
            (C48199 * C590 - C113 * C581) * C48107 +
            (C48199 * C582 - C113 * C576) * C47231 +
            (C48199 * C591 - C113 * C583) * C48115 +
            (C48199 * C584 - C113 * C577) * C47241 +
            (C48199 * C592 - C113 * C585) * C26147) *
               C48300 +
           ((C48199 * C1452 - C113 * C1448) * C47235 +
            (C48199 * C1460 - C113 * C1453) * C48107 +
            (C48199 * C1454 - C113 * C1449) * C47231 +
            (C48199 * C1461 - C113 * C1455) * C48115 +
            (C48199 * C1456 - C113 * C1450) * C47241 +
            (C48199 * C1462 - C113 * C1457) * C26147) *
               C48307 +
           ((C48199 * C2323 - C113 * C2317) * C47235 +
            (C48199 * C2335 - C113 * C2325) * C48107 +
            (C48199 * C2327 - C113 * C2319) * C47231 +
            (C48199 * C2337 - C113 * C2329) * C48115 +
            (C48199 * C2331 - C113 * C2321) * C47241 +
            (C48199 * C2339 - C113 * C2333) * C26147) *
               C36164) *
              C48188 * C573) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C381 +
           (((C2799 - C2798) * C47235 + (C2801 - C2800) * C48107 +
             C2810 * C47231 + C2811 * C48115 + C2812 * C47241 +
             C2813 * C26147) *
                C48300 +
            ((C2805 - C2804) * C47235 + (C2807 - C2806) * C48107 +
             C2814 * C47231 + C2815 * C48115 + C2816 * C47241 +
             C2817 * C26147) *
                C48307 +
            ((C3668 - C3669) * C47235 + (C3670 - C3671) * C48107 +
             C20152 * C47231 + C20153 * C48115 + (C2822 - C2823) * C47241 +
             (C2824 - C2825) * C26147) *
                C36164) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C47235 +
             (C113 * C266 - C48199 * C277) * C48107 + (C284 - C285) * C47231 +
             (C286 - C287) * C48115 + (C288 - C289) * C47241 +
             (C290 - C291) * C26147) *
                C48300 +
            ((C3240 - C3241) * C47235 + (C3242 - C3243) * C48107 +
             (C2620 - C2621) * C47231 + (C2622 - C2623) * C48115 +
             (C2624 - C2625) * C47241 + (C2626 - C2627) * C26147) *
                C48307 +
            ((C3244 - C3245) * C47235 + (C3246 - C3247) * C48107 +
             (C2628 - C2629) * C47231 + (C2630 - C2631) * C48115 +
             (C2632 - C2633) * C47241 + (C2634 - C2635) * C26147) *
                C36164) *
               C381 +
           (((C3241 - C3240) * C47235 + (C3243 - C3242) * C48107 +
             (C2621 - C2620) * C47231 + (C2623 - C2622) * C48115 +
             (C2625 - C2624) * C47241 + (C2627 - C2626) * C26147) *
                C48300 +
            ((C3245 - C3244) * C47235 + (C3247 - C3246) * C48107 +
             (C2629 - C2628) * C47231 + (C2631 - C2630) * C48115 +
             (C2633 - C2632) * C47241 + (C2635 - C2634) * C26147) *
                C48307 +
            ((C17871 - C17870) * C47235 + (C17873 - C17872) * C48107 +
             (C20017 - C20016) * C47231 + (C20019 - C20018) * C48115 +
             (C48199 * C3234 - C113 * C3229) * C47241 +
             (C48199 * C3238 - C113 * C3235) * C26147) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C779 +
           (((C2799 - C2798) * C47235 + (C2801 - C2800) * C48107 +
             C2810 * C47231 + C2811 * C48115 + C2812 * C47241 +
             C2813 * C26147) *
                C48300 +
            ((C2805 - C2804) * C47235 + (C2807 - C2806) * C48107 +
             C2814 * C47231 + C2815 * C48115 + C2816 * C47241 +
             C2817 * C26147) *
                C48307 +
            ((C3668 - C3669) * C47235 + (C3670 - C3671) * C48107 +
             C20152 * C47231 + C20153 * C48115 + (C2822 - C2823) * C47241 +
             (C2824 - C2825) * C26147) *
                C36164) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48107 +
             (C153 - C152) * C47231 + (C155 - C154) * C48115 +
             (C157 - C156) * C47241 + (C159 - C158) * C26147) *
                C48300 +
            (C2810 * C47235 + C2811 * C48107 + C2812 * C47231 + C2813 * C48115 +
             C5223 * C47241 + C5224 * C26147) *
                C48307 +
            (C2814 * C47235 + C2815 * C48107 + C2816 * C47231 + C2817 * C48115 +
             (C2464 - C2465) * C47241 + (C2466 - C2467) * C26147) *
                C36164) *
               C779 +
           ((C2802 * C47235 + C2803 * C48107 + C2454 * C47231 + C2455 * C48115 +
             C4957 * C47241 + C4958 * C26147) *
                C48300 +
            (C2808 * C47235 + C2809 * C48107 + C2468 * C47231 + C2469 * C48115 +
             (C2465 - C2464) * C47241 + (C2467 - C2466) * C26147) *
                C48307 +
            (C20150 * C47235 + C20151 * C48107 + (C2823 - C2822) * C47231 +
             (C2825 - C2824) * C48115 +
             (C48199 * C2791 - C113 * C2784) * C47241 +
             (C48199 * C2796 - C113 * C2792) * C26147) *
                C36164) *
               C48491) *
              C48171 * C48487)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C47235 +
             (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
             (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
                C48300 +
            ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
             C2802 * C47231 + C2803 * C48115 + C2454 * C47241 +
             C2455 * C26147) *
                C48307 +
            (C3662 * C47235 + C3663 * C48107 + C2808 * C47231 + C2809 * C48115 +
             C2468 * C47241 + C2469 * C26147) *
                C36164) *
               C779 +
           (((C2799 - C2798) * C47235 + (C2801 - C2800) * C48107 +
             C2810 * C47231 + C2811 * C48115 + C2812 * C47241 +
             C2813 * C26147) *
                C48300 +
            ((C2805 - C2804) * C47235 + (C2807 - C2806) * C48107 +
             C2814 * C47231 + C2815 * C48115 + C2816 * C47241 +
             C2817 * C26147) *
                C48307 +
            ((C3668 - C3669) * C47235 + (C3670 - C3671) * C48107 +
             C20152 * C47231 + C20153 * C48115 + (C2822 - C2823) * C47241 +
             (C2824 - C2825) * C26147) *
                C36164) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C47235 +
             (C113 * C266 - C48199 * C277) * C48107 + (C284 - C285) * C47231 +
             (C286 - C287) * C48115 + (C288 - C289) * C47241 +
             (C290 - C291) * C26147) *
                C48300 +
            ((C3240 - C3241) * C47235 + (C3242 - C3243) * C48107 +
             (C2620 - C2621) * C47231 + (C2622 - C2623) * C48115 +
             (C2624 - C2625) * C47241 + (C2626 - C2627) * C26147) *
                C48307 +
            ((C3244 - C3245) * C47235 + (C3246 - C3247) * C48107 +
             (C2628 - C2629) * C47231 + (C2630 - C2631) * C48115 +
             (C2632 - C2633) * C47241 + (C2634 - C2635) * C26147) *
                C36164) *
               C779 +
           (((C3241 - C3240) * C47235 + (C3243 - C3242) * C48107 +
             (C2621 - C2620) * C47231 + (C2623 - C2622) * C48115 +
             (C2625 - C2624) * C47241 + (C2627 - C2626) * C26147) *
                C48300 +
            ((C3245 - C3244) * C47235 + (C3247 - C3246) * C48107 +
             (C2629 - C2628) * C47231 + (C2631 - C2630) * C48115 +
             (C2633 - C2632) * C47241 + (C2635 - C2634) * C26147) *
                C48307 +
            ((C17871 - C17870) * C47235 + (C17873 - C17872) * C48107 +
             (C20017 - C20016) * C47231 + (C20019 - C20018) * C48115 +
             (C48199 * C3234 - C113 * C3229) * C47241 +
             (C48199 * C3238 - C113 * C3235) * C26147) *
                C36164) *
               C48491) *
              C48489) *
         C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C47235 +
            (C48199 * C140 - C113 * C127) * C48107 + (C148 - C149) * C47231 +
            (C150 - C151) * C48115 + C168 * C47241 + C169 * C26147) *
               C48300 +
           ((C2798 - C2799) * C47235 + (C2800 - C2801) * C48107 +
            C2802 * C47231 + C2803 * C48115 + C2454 * C47241 + C2455 * C26147) *
               C48307 +
           C37272 * C36164) *
              C925 +
          (((C2799 - C2798) * C47235 + (C2801 - C2800) * C48107 +
            C2810 * C47231 + C2811 * C48115 + C2812 * C47241 + C2813 * C26147) *
               C48300 +
           ((C2805 - C2804) * C47235 + (C2807 - C2806) * C48107 +
            C2814 * C47231 + C2815 * C48115 + C2816 * C47241 + C2817 * C26147) *
               C48307 +
           ((C3668 - C3669) * C47235 + (C3670 - C3671) * C48107 +
            C20152 * C47231 + C20153 * C48115 + (C2822 - C2823) * C47241 +
            (C2824 - C2825) * C26147) *
               C36164) *
              C926 +
          (C37272 * C48300 +
           (C18110 * C47235 + C18111 * C48107 + C20150 * C47231 +
            C20151 * C48115 + (C2823 - C2822) * C47241 +
            (C2825 - C2824) * C26147) *
               C48307 +
           (C18112 * C47235 + C18113 * C48107 + (C17637 - C17636) * C47231 +
            (C17639 - C17638) * C48115 +
            (C48199 * C3656 - C113 * C3651) * C47241 +
            (C48199 * C3660 - C113 * C3657) * C26147) *
               C36164) *
              C927) *
         C48171 * C48137) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C22091 + (C151 - C150) * C48535 +
            (C153 - C152) * C22092 + (C155 - C154) * C48528 +
            (C157 - C156) * C22093 + (C159 - C158) * C48515 +
            (C161 - C160) * C22094 + (C163 - C162) * C48498) *
               C30746 +
           (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
            C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
            (C422 - C423) * C48498) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C168 * C22091 + C169 * C48535 + C170 * C22092 + C171 * C48528 +
            C172 * C22093 + C173 * C48515 + (C165 - C164) * C22094 +
            (C167 - C166) * C48498) *
               C30746 +
           (C2454 * C22091 + C2455 * C48535 + C4957 * C22092 + C4958 * C48528 +
            (C421 - C420) * C22093 + (C423 - C422) * C48515 +
            (C48199 * C399 - C113 * C388) * C22094 +
            (C48199 * C406 - C113 * C400) * C48498) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            (C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C23272 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
               C30746 +
           ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C23271 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C23265 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C1115 * C23271 + C1116 * C23265 +
            (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C23272 +
            (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C48112) *
               C30746 +
           ((C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23271 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C23265 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C23272 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C255 +
           (((C285 - C284) * C22091 + (C287 - C286) * C48535 +
             (C289 - C288) * C22092 + (C291 - C290) * C48528 +
             (C293 - C292) * C22093 + (C295 - C294) * C48515 +
             (C297 - C296) * C22094 + (C299 - C298) * C48498) *
                C30746 +
            ((C2621 - C2620) * C22091 + (C2623 - C2622) * C48535 +
             (C2625 - C2624) * C22092 + (C2627 - C2626) * C48528 +
             (C5090 - C5089) * C22093 + (C5092 - C5091) * C48515 +
             (C48199 * C690 - C113 * C681) * C22094 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             (C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C23272 +
             (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            ((C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C23271 +
             (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C23271 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C23265 +
             (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C23272 +
             (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C48112) *
                C30746 +
            ((C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23271 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C23265 +
             (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
              C48494 * C1909 - C1066 * C1904) *
                 C23272 +
             (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
              C48494 * C1913 - C1066 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C381 +
           ((C2802 * C22091 + C2803 * C48535 + C2454 * C22092 + C2455 * C48528 +
             C4957 * C22093 + C4958 * C48515 + (C421 - C420) * C22094 +
             (C423 - C422) * C48498) *
                C30746 +
            (C2808 * C22091 + C2809 * C48535 + C2468 * C22092 + C2469 * C48528 +
             (C2465 - C2464) * C22093 + (C2467 - C2466) * C48515 +
             (C48199 * C941 - C113 * C932) * C22094 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C381 +
           ((C32287 * C23271 + C32288 * C23265 +
             (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23272 +
             (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48112) *
                C30746 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23271 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C23265 +
             (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
              C48494 * C2331 - C1066 * C2321) *
                 C23272 +
             (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
              C48494 * C2339 - C1066 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C505 +
           (((C285 - C284) * C22091 + (C287 - C286) * C48535 +
             (C289 - C288) * C22092 + (C291 - C290) * C48528 +
             (C293 - C292) * C22093 + (C295 - C294) * C48515 +
             (C297 - C296) * C22094 + (C299 - C298) * C48498) *
                C30746 +
            ((C2621 - C2620) * C22091 + (C2623 - C2622) * C48535 +
             (C2625 - C2624) * C22092 + (C2627 - C2626) * C48528 +
             (C5090 - C5089) * C22093 + (C5092 - C5091) * C48515 +
             (C48199 * C690 - C113 * C681) * C22094 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C23271 +
             (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C23265 +
             (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C23272 +
             (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C48112) *
                C30746 +
            ((C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23271 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C23265 +
             (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
              C48494 * C1909 - C1066 * C1904) *
                 C23272 +
             (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
              C48494 * C1913 - C1066 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C22091 +
            (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
            (C286 - C287) * C48528 + (C288 - C289) * C22093 +
            (C290 - C291) * C48515 + (C292 - C293) * C22094 +
            (C294 - C295) * C48498) *
               C30746 +
           ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
            (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
            (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
            (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
               C48304) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C22091 +
            (C48199 * C590 - C113 * C581) * C48535 +
            (C48199 * C582 - C113 * C576) * C22092 +
            (C48199 * C591 - C113 * C583) * C48528 +
            (C48199 * C584 - C113 * C577) * C22093 +
            (C48199 * C592 - C113 * C585) * C48515 +
            (C48199 * C586 - C113 * C578) * C22094 +
            (C48199 * C593 - C113 * C587) * C48498) *
               C30746 +
           ((C48199 * C1452 - C113 * C1448) * C22091 +
            (C48199 * C1460 - C113 * C1453) * C48535 +
            (C48199 * C1454 - C113 * C1449) * C22092 +
            (C48199 * C1461 - C113 * C1455) * C48528 +
            (C48199 * C1456 - C113 * C1450) * C22093 +
            (C48199 * C1462 - C113 * C1457) * C48515 +
            (C48199 * C1458 - C113 * C1451) * C22094 +
            (C48199 * C1463 - C113 * C1459) * C48498) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            C32287 * C23272 + C32288 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C23271 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C23265 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
               C30746 +
           ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
            (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
            (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
            (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
             C48494 * C1747 - C1066 * C1744) *
                C23271 +
            (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
             C48494 * C1753 - C1066 * C1748) *
                C23265 +
            (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
             C48494 * C1749 - C1066 * C1745) *
                C23272 +
            (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
             C48494 * C1754 - C1066 * C1750) *
                C48112) *
               C30746 +
           ((C48529 * C1452 - C1064 * C1448 + C48517 * C1905 - C1065 * C1902 +
             C48494 * C9182 - C1066 * C9180) *
                C23271 +
            (C48529 * C1460 - C1064 * C1453 + C48517 * C1911 - C1065 * C1906 +
             C48494 * C9186 - C1066 * C9183) *
                C23265 +
            (C48529 * C1454 - C1064 * C1449 + C48517 * C1907 - C1065 * C1903 +
             C48494 * C9184 - C1066 * C9181) *
                C23272 +
            (C48529 * C1461 - C1064 * C1455 + C48517 * C1912 - C1065 * C1908 +
             C48494 * C9187 - C1066 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C381 +
           (((C3241 - C3240) * C22091 + (C3243 - C3242) * C48535 +
             (C2621 - C2620) * C22092 + (C2623 - C2622) * C48528 +
             (C2625 - C2624) * C22093 + (C2627 - C2626) * C48515 +
             (C5090 - C5089) * C22094 + (C5092 - C5091) * C48498) *
                C30746 +
            ((C3245 - C3244) * C22091 + (C3247 - C3246) * C48535 +
             (C2629 - C2628) * C22092 + (C2631 - C2630) * C48528 +
             (C2633 - C2632) * C22093 + (C2635 - C2634) * C48515 +
             (C48199 * C2616 - C113 * C2615) * C22094 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C381 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C381 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C23271 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C23265 +
             (C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23272 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C48112) *
                C30746 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C23271 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C23265 +
             (C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C23272 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C22091 + (C151 - C150) * C48535 +
             (C153 - C152) * C22092 + (C155 - C154) * C48528 +
             (C157 - C156) * C22093 + (C159 - C158) * C48515 +
             (C161 - C160) * C22094 + (C163 - C162) * C48498) *
                C30746 +
            (C2810 * C22091 + C2811 * C48535 + C2812 * C22092 + C2813 * C48528 +
             C5223 * C22093 + C5224 * C48515 + (C420 - C421) * C22094 +
             (C422 - C423) * C48498) *
                C48304) *
               C779 +
           ((C2802 * C22091 + C2803 * C48535 + C2454 * C22092 + C2455 * C48528 +
             C4957 * C22093 + C4958 * C48515 + (C421 - C420) * C22094 +
             (C423 - C422) * C48498) *
                C30746 +
            (C2808 * C22091 + C2809 * C48535 + C2468 * C22092 + C2469 * C48528 +
             (C2465 - C2464) * C22093 + (C2467 - C2466) * C48515 +
             (C48199 * C941 - C113 * C932) * C22094 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C23271 +
             (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C23265 +
             (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C23272 +
             (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C48112) *
                C30746 +
            (C32289 * C23271 + C32290 * C23265 +
             (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C23272 +
             (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48112) *
                C48304) *
               C779 +
           ((C32287 * C23271 + C32288 * C23265 +
             (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C23272 +
             (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C48112) *
                C30746 +
            ((C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23271 +
             (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C23265 +
             (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
              C48494 * C2331 - C1066 * C2321) *
                 C23272 +
             (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
              C48494 * C2339 - C1066 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C22091 +
             (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
             (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
             C170 * C22094 + C171 * C48498) *
                C30746 +
            ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
             C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
             C4957 * C22094 + C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
             C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
             C5223 * C22094 + C5224 * C48498) *
                C30746 +
            ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
             C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
             (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C22091 +
             (C113 * C266 - C48199 * C277) * C48535 + (C284 - C285) * C22092 +
             (C286 - C287) * C48528 + (C288 - C289) * C22093 +
             (C290 - C291) * C48515 + (C292 - C293) * C22094 +
             (C294 - C295) * C48498) *
                C30746 +
            ((C3240 - C3241) * C22091 + (C3242 - C3243) * C48535 +
             (C2620 - C2621) * C22092 + (C2622 - C2623) * C48528 +
             (C2624 - C2625) * C22093 + (C2626 - C2627) * C48515 +
             (C5089 - C5090) * C22094 + (C5091 - C5092) * C48498) *
                C48304) *
               C779 +
           (((C3241 - C3240) * C22091 + (C3243 - C3242) * C48535 +
             (C2621 - C2620) * C22092 + (C2623 - C2622) * C48528 +
             (C2625 - C2624) * C22093 + (C2627 - C2626) * C48515 +
             (C5090 - C5089) * C22094 + (C5092 - C5091) * C48498) *
                C30746 +
            ((C3245 - C3244) * C22091 + (C3247 - C3246) * C48535 +
             (C2629 - C2628) * C22092 + (C2631 - C2630) * C48528 +
             (C2633 - C2632) * C22093 + (C2635 - C2634) * C48515 +
             (C48199 * C2616 - C113 * C2615) * C22094 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
              C48494 * C580 - C1066 * C575) *
                 C23271 +
             (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
              C48494 * C590 - C1066 * C581) *
                 C23265 +
             (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
             (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
                C30746 +
            ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
             (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
             C32287 * C23272 + C32288 * C48112) *
                C48304) *
               C779 +
           (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
             (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
             C32289 * C23272 + C32290 * C48112) *
                C30746 +
            ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
             (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
             (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
             (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
              C1066 * C1262 - C48494 * C1266) *
                 C23271 +
             (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
              C1066 * C1267 - C48494 * C1274) *
                 C23265 +
             (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C23272 +
             (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C48112) *
                C30746 +
            ((C16938 - C16939 + C16940 - C16941 + C16942 - C16943) * C23271 +
             (C16944 - C16945 + C16946 - C16947 + C16948 - C16949) * C23265 +
             (C32065 - C32066 + C32067 - C32068 + C32069 - C32070) * C23272 +
             (C32071 - C32072 + C32073 - C32074 + C32075 - C32076) * C48112) *
                C48304) *
               C779 +
           (((C16939 - C16938 + C16941 - C16940 + C16943 - C16942) * C23271 +
             (C16945 - C16944 + C16947 - C16946 + C16949 - C16948) * C23265 +
             (C32066 - C32065 + C32068 - C32067 + C32070 - C32069) * C23272 +
             (C32072 - C32071 + C32074 - C32073 + C32076 - C32075) * C48112) *
                C30746 +
            ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C23271 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C23265 +
             (C48529 * C2326 - C1064 * C2318 + C48517 * C2327 - C1065 * C2319 +
              C48494 * C9913 - C1066 * C9912) *
                 C23272 +
             (C48529 * C2336 - C1064 * C2328 + C48517 * C2337 - C1065 * C2329 +
              C48494 * C9915 - C1066 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C22091 +
            (C48199 * C140 - C113 * C127) * C48535 + (C148 - C149) * C22092 +
            (C150 - C151) * C48528 + C168 * C22093 + C169 * C48515 +
            C170 * C22094 + C171 * C48498) *
               C30746 +
           ((C2798 - C2799) * C22091 + (C2800 - C2801) * C48535 +
            C2802 * C22092 + C2803 * C48528 + C2454 * C22093 + C2455 * C48515 +
            C4957 * C22094 + C4958 * C48498) *
               C48304) *
              C925 +
          (((C2799 - C2798) * C22091 + (C2801 - C2800) * C48535 +
            C2810 * C22092 + C2811 * C48528 + C2812 * C22093 + C2813 * C48515 +
            C5223 * C22094 + C5224 * C48498) *
               C30746 +
           ((C2805 - C2804) * C22091 + (C2807 - C2806) * C48535 +
            C2814 * C22092 + C2815 * C48528 + C2816 * C22093 + C2817 * C48515 +
            (C2464 - C2465) * C22094 + (C2466 - C2467) * C48498) *
               C48304) *
              C926 +
          ((C3662 * C22091 + C3663 * C48535 + C2808 * C22092 + C2809 * C48528 +
            C2468 * C22093 + C2469 * C48515 + (C2465 - C2464) * C22094 +
            (C2467 - C2466) * C48498) *
               C30746 +
           (C18110 * C22091 + C18111 * C48535 + C20150 * C22092 +
            C20151 * C48528 + (C2823 - C2822) * C22093 +
            (C2825 - C2824) * C48515 +
            (C48199 * C2791 - C113 * C2784) * C22094 +
            (C48199 * C2796 - C113 * C2792) * C48498) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C23271 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C23265 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C23272 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C48112) *
               C30746 +
           ((C16500 - C16501 + C16502 - C16503 + C16504 - C16505) * C23271 +
            (C16506 - C16507 + C16508 - C16509 + C16510 - C16511) * C23265 +
            C32287 * C23272 + C32288 * C48112) *
               C48304) *
              C925 +
          (((C16501 - C16500 + C16503 - C16502 + C16505 - C16504) * C23271 +
            (C16507 - C16506 + C16509 - C16508 + C16511 - C16510) * C23265 +
            C32289 * C23272 + C32290 * C48112) *
               C30746 +
           ((C16513 - C16512 + C16515 - C16514 + C16517 - C16516) * C23271 +
            (C16519 - C16518 + C16521 - C16520 + C16523 - C16522) * C23265 +
            (C16524 - C16525 + C16526 - C16527 + C16528 - C16529) * C23272 +
            (C16530 - C16531 + C16532 - C16533 + C16534 - C16535) * C48112) *
               C48304) *
              C926 +
          ((C17384 * C23271 + C17385 * C23265 +
            (C16525 - C16524 + C16527 - C16526 + C16529 - C16528) * C23272 +
            (C16531 - C16530 + C16533 - C16532 + C16535 - C16534) * C48112) *
               C30746 +
           ((C17371 - C17370 + C17373 - C17372 + C17375 - C17374) * C23271 +
            (C17377 - C17376 + C17379 - C17378 + C17381 - C17380) * C23265 +
            (C48529 * C2787 - C1064 * C2782 + C48517 * C3232 - C1065 * C3228 +
             C48494 * C10066 - C1066 * C10063) *
                C23272 +
            (C48529 * C2794 - C1064 * C2788 + C48517 * C3237 - C1065 * C3233 +
             C48494 * C10069 - C1066 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C48188 * C48171 * C110 +
          ((C3790 - C3789 + C3792 - C3791) * C3784 +
           (C3794 - C3793 + C3796 - C3795) * C3778 +
           (C3798 - C3797 + C3800 - C3799) * C3785 +
           (C3802 - C3801 + C3804 - C3803) * C3779 +
           (C3806 - C3805 + C3808 - C3807) * C3786 +
           (C3810 - C3809 + C3812 - C3811) * C3780 +
           (C3813 - C3814 + C3815 - C3816) * C3787 +
           (C3817 - C3818 + C3819 - C3820) * C48498) *
              C48217 * C48188 * C48171 * C111 +
          (C3829 * C3784 + C3830 * C3778 + C3831 * C3785 + C3832 * C3779 +
           (C3814 - C3813 + C3816 - C3815) * C3786 +
           (C3818 - C3817 + C3820 - C3819) * C3780 +
           (C48461 * C136 - C3782 * C124 + C48262 * C275 - C3783 * C264) *
               C3787 +
           (C48461 * C145 - C3782 * C137 + C48262 * C282 - C3783 * C276) *
               C48498) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C48188 * C48171 * C110 +
          ((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
            C11088) *
               C47225 +
           (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
            C11096) *
               C48439 +
           (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
            C11105) *
               C47206 +
           (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
            C11113) *
               C48112) *
              C48217 * C48188 * C48171 * C111 +
          ((C11099 - C11098 + C11101 - C11100 + C11103 - C11102 + C11105 -
            C11104) *
               C47225 +
           (C11107 - C11106 + C11109 - C11108 + C11111 - C11110 + C11113 -
            C11112) *
               C48439 +
           (C11069 * C132 - C11075 * C122 + C11070 * C271 - C11076 * C262 +
            C11071 * C586 - C11077 * C578 + C48504 * C1272 - C11078 * C1265) *
               C47206 +
           (C11069 * C143 - C11075 * C133 + C11070 * C280 - C11076 * C272 +
            C11071 * C593 - C11077 * C587 + C48504 * C1277 - C11078 * C1273) *
               C48112) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C48188 * C255 +
           ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C48188 * C255 +
           ((C3964 - C3963 + C3966 - C3965) * C3784 +
            (C3968 - C3967 + C3970 - C3969) * C3778 +
            (C3972 - C3971 + C3974 - C3973) * C3785 +
            (C3976 - C3975 + C3978 - C3977) * C3779 +
            (C3980 - C3979 + C3982 - C3981) * C3786 +
            (C3984 - C3983 + C3986 - C3985) * C3780 +
            (C48461 * C273 - C3782 * C263 + C48262 * C588 - C3783 * C579) *
                C3787 +
            (C48461 * C281 - C3782 * C274 + C48262 * C594 - C3783 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C48188 * C255 +
           ((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
             C11250) *
                C47225 +
            (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
             C11258) *
                C48439 +
            (C11069 * C269 - C11075 * C261 + C11070 * C584 - C11076 * C577 +
             C11071 * C1270 - C11077 * C1264 + C48504 * C1751 -
             C11078 * C1746) *
                C47206 +
            (C11069 * C279 - C11075 * C270 + C11070 * C592 - C11076 * C585 +
             C11071 * C1276 - C11077 * C1271 + C48504 * C1755 -
             C11078 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C381 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C381 +
           ((C4118 - C4117 + C4120 - C4119) * C3784 +
            (C4122 - C4121 + C4124 - C4123) * C3778 +
            (C4126 - C4125 + C4128 - C4127) * C3785 +
            (C4130 - C4129 + C4132 - C4131) * C3779 +
            (C4134 - C4133 + C4136 - C4135) * C3786 +
            (C4138 - C4137 + C4140 - C4139) * C3780 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C3787 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C381 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C381 +
           ((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
             C11396) *
                C47225 +
            (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
             C11404) *
                C48439 +
            (C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C47206 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C48188 * C505 +
           ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C48188 * C505 +
           ((C3964 - C3963 + C3966 - C3965) * C3784 +
            (C3968 - C3967 + C3970 - C3969) * C3778 +
            (C3972 - C3971 + C3974 - C3973) * C3785 +
            (C3976 - C3975 + C3978 - C3977) * C3779 +
            (C3980 - C3979 + C3982 - C3981) * C3786 +
            (C3984 - C3983 + C3986 - C3985) * C3780 +
            (C48461 * C273 - C3782 * C263 + C48262 * C588 - C3783 * C579) *
                C3787 +
            (C48461 * C281 - C3782 * C274 + C48262 * C594 - C3783 * C589) *
                C48498) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C48188 * C505 +
           ((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
             C11250) *
                C47225 +
            (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
             C11258) *
                C48439 +
            (C11069 * C269 - C11075 * C261 + C11070 * C584 - C11076 * C577 +
             C11071 * C1270 - C11077 * C1264 + C48504 * C1751 -
             C11078 * C1746) *
                C47206 +
            (C11069 * C279 - C11075 * C270 + C11070 * C592 - C11076 * C585 +
             C11071 * C1276 - C11077 * C1271 + C48504 * C1755 -
             C11078 * C1752) *
                C48112) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C48188 * C571 +
          ((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
               C3784 +
           (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
               C3778 +
           (C3963 - C3964 + C3965 - C3966) * C3785 +
           (C3967 - C3968 + C3969 - C3970) * C3779 +
           (C3971 - C3972 + C3973 - C3974) * C3786 +
           (C3975 - C3976 + C3977 - C3978) * C3780 +
           (C3979 - C3980 + C3981 - C3982) * C3787 +
           (C3983 - C3984 + C3985 - C3986) * C48498) *
              C48217 * C48188 * C572 +
          ((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
               C3784 +
           (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
               C3778 +
           (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
               C3785 +
           (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
               C3779 +
           (C48461 * C584 - C3782 * C577 + C48262 * C1270 - C3783 * C1264) *
               C3786 +
           (C48461 * C592 - C3782 * C585 + C48262 * C1276 - C3783 * C1271) *
               C3780 +
           (C48461 * C586 - C3782 * C578 + C48262 * C1272 - C3783 * C1265) *
               C3787 +
           (C48461 * C593 - C3782 * C587 + C48262 * C1277 - C3783 * C1273) *
               C48498) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C48188 * C571 +
          ((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
            C11077 * C1262 - C11071 * C1266 + C11078 * C1744 - C48504 * C1747) *
               C47225 +
           (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
            C11077 * C1267 - C11071 * C1274 + C11078 * C1748 - C48504 * C1753) *
               C48439 +
           (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
            C11251) *
               C47206 +
           (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
            C11259) *
               C48112) *
              C48217 * C48188 * C572 +
          ((C11069 * C580 - C11075 * C575 + C11070 * C1266 - C11076 * C1262 +
            C11071 * C1747 - C11077 * C1744 + C48504 * C9092 - C11078 * C9090) *
               C47225 +
           (C11069 * C590 - C11075 * C581 + C11070 * C1274 - C11076 * C1267 +
            C11071 * C1753 - C11077 * C1748 + C48504 * C9096 - C11078 * C9093) *
               C48439 +
           (C11069 * C582 - C11075 * C576 + C11070 * C1268 - C11076 * C1263 +
            C11071 * C1749 - C11077 * C1745 + C48504 * C9094 - C11078 * C9091) *
               C47206 +
           (C11069 * C591 - C11075 * C583 + C11070 * C1275 - C11076 * C1269 +
            C11071 * C1754 - C11077 * C1750 + C48504 * C9097 - C11078 * C9095) *
               C48112) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C381 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C505 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C381 +
           ((C48461 * C682 - C3782 * C677 + C48262 * C1452 - C3783 * C1448) *
                C3784 +
            (C48461 * C692 - C3782 * C683 + C48262 * C1460 - C3783 * C1453) *
                C3778 +
            (C48461 * C684 - C3782 * C678 + C48262 * C1454 - C3783 * C1449) *
                C3785 +
            (C48461 * C693 - C3782 * C685 + C48262 * C1461 - C3783 * C1455) *
                C3779 +
            (C48461 * C686 - C3782 * C679 + C48262 * C1456 - C3783 * C1450) *
                C3786 +
            (C48461 * C694 - C3782 * C687 + C48262 * C1462 - C3783 * C1457) *
                C3780 +
            (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                C3787 +
            (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C381 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C505 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C381 +
           ((C11069 * C682 - C11075 * C677 + C11070 * C1452 - C11076 * C1448 +
             C11071 * C1905 - C11077 * C1902 + C48504 * C9182 -
             C11078 * C9180) *
                C47225 +
            (C11069 * C692 - C11075 * C683 + C11070 * C1460 - C11076 * C1453 +
             C11071 * C1911 - C11077 * C1906 + C48504 * C9186 -
             C11078 * C9183) *
                C48439 +
            (C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
             C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
             C11078 * C9181) *
                C47206 +
            (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
             C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
             C11078 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C779 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C3790 - C3789 + C3792 - C3791) * C3784 +
            (C3794 - C3793 + C3796 - C3795) * C3778 +
            (C3798 - C3797 + C3800 - C3799) * C3785 +
            (C3802 - C3801 + C3804 - C3803) * C3779 +
            (C3806 - C3805 + C3808 - C3807) * C3786 +
            (C3810 - C3809 + C3812 - C3811) * C3780 +
            (C3813 - C3814 + C3815 - C3816) * C3787 +
            (C3817 - C3818 + C3819 - C3820) * C48498) *
               C48217 * C779 +
           ((C4118 - C4117 + C4120 - C4119) * C3784 +
            (C4122 - C4121 + C4124 - C4123) * C3778 +
            (C4126 - C4125 + C4128 - C4127) * C3785 +
            (C4130 - C4129 + C4132 - C4131) * C3779 +
            (C4134 - C4133 + C4136 - C4135) * C3786 +
            (C4138 - C4137 + C4140 - C4139) * C3780 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C3787 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48498) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C779 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C47225 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48439 +
            (C11098 - C11099 + C11100 - C11101 + C11102 - C11103 + C11104 -
             C11105) *
                C47206 +
            (C11106 - C11107 + C11108 - C11109 + C11110 - C11111 + C11112 -
             C11113) *
                C48112) *
               C48217 * C779 +
           ((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
             C11396) *
                C47225 +
            (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
             C11404) *
                C48439 +
            (C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C47206 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48112) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C3784 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C3778 +
            (C3789 - C3790 + C3791 - C3792) * C3785 +
            (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
            C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
               C48217 * C779 +
           ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
                C3784 +
            (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
                C3778 +
            (C4117 - C4118 + C4119 - C4120) * C3785 +
            (C4121 - C4122 + C4123 - C4124) * C3779 +
            (C4125 - C4126 + C4127 - C4128) * C3786 +
            (C4129 - C4130 + C4131 - C4132) * C3780 +
            (C4133 - C4134 + C4135 - C4136) * C3787 +
            (C4137 - C4138 + C4139 - C4140) * C48498) *
               C48217 * C48491) *
              C255 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C3784 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C3778 +
            (C3963 - C3964 + C3965 - C3966) * C3785 +
            (C3967 - C3968 + C3969 - C3970) * C3779 +
            (C3971 - C3972 + C3973 - C3974) * C3786 +
            (C3975 - C3976 + C3977 - C3978) * C3780 +
            (C3979 - C3980 + C3981 - C3982) * C3787 +
            (C3983 - C3984 + C3985 - C3986) * C48498) *
               C48217 * C779 +
           ((C48461 * C682 - C3782 * C677 + C48262 * C1452 - C3783 * C1448) *
                C3784 +
            (C48461 * C692 - C3782 * C683 + C48262 * C1460 - C3783 * C1453) *
                C3778 +
            (C48461 * C684 - C3782 * C678 + C48262 * C1454 - C3783 * C1449) *
                C3785 +
            (C48461 * C693 - C3782 * C685 + C48262 * C1461 - C3783 * C1455) *
                C3779 +
            (C48461 * C686 - C3782 * C679 + C48262 * C1456 - C3783 * C1450) *
                C3786 +
            (C48461 * C694 - C3782 * C687 + C48262 * C1462 - C3783 * C1457) *
                C3780 +
            (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                C3787 +
            (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                C48498) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C47225 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48439 +
            (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
             C11089) *
                C47206 +
            (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
             C11097) *
                C48112) *
               C48217 * C779 +
           ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
             C11077 * C1448 - C11071 * C1452 + C11078 * C1902 -
             C48504 * C1905) *
                C47225 +
            (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
             C11077 * C1453 - C11071 * C1460 + C11078 * C1906 -
             C48504 * C1911) *
                C48439 +
            (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C47206 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48112) *
               C48217 * C48491) *
              C255 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C47225 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48439 +
            (C11244 - C11245 + C11246 - C11247 + C11248 - C11249 + C11250 -
             C11251) *
                C47206 +
            (C11252 - C11253 + C11254 - C11255 + C11256 - C11257 + C11258 -
             C11259) *
                C48112) *
               C48217 * C779 +
           ((C11069 * C682 - C11075 * C677 + C11070 * C1452 - C11076 * C1448 +
             C11071 * C1905 - C11077 * C1902 + C48504 * C9182 -
             C11078 * C9180) *
                C47225 +
            (C11069 * C692 - C11075 * C683 + C11070 * C1460 - C11076 * C1453 +
             C11071 * C1911 - C11077 * C1906 + C48504 * C9186 -
             C11078 * C9183) *
                C48439 +
            (C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
             C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
             C11078 * C9181) *
                C47206 +
            (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
             C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
             C11078 * C9185) *
                C48112) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
               C3784 +
           (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
               C3778 +
           (C3789 - C3790 + C3791 - C3792) * C3785 +
           (C3793 - C3794 + C3795 - C3796) * C3779 + C3829 * C3786 +
           C3830 * C3780 + C3831 * C3787 + C3832 * C48498) *
              C48217 * C925 +
          ((C3782 * C383 - C48461 * C389 + C3783 * C677 - C48262 * C682) *
               C3784 +
           (C3782 * C390 - C48461 * C401 + C3783 * C683 - C48262 * C692) *
               C3778 +
           (C4117 - C4118 + C4119 - C4120) * C3785 +
           (C4121 - C4122 + C4123 - C4124) * C3779 +
           (C4125 - C4126 + C4127 - C4128) * C3786 +
           (C4129 - C4130 + C4131 - C4132) * C3780 +
           (C4133 - C4134 + C4135 - C4136) * C3787 +
           (C4137 - C4138 + C4139 - C4140) * C48498) *
              C48217 * C926 +
          ((C48461 * C933 - C3782 * C928 + C48262 * C2322 - C3783 * C2316) *
               C3784 +
           (C48461 * C943 - C3782 * C934 + C48262 * C2334 - C3783 * C2324) *
               C3778 +
           (C48461 * C935 - C3782 * C929 + C48262 * C2326 - C3783 * C2318) *
               C3785 +
           (C48461 * C944 - C3782 * C936 + C48262 * C2336 - C3783 * C2328) *
               C3779 +
           (C48461 * C937 - C3782 * C930 + C48262 * C2330 - C3783 * C2320) *
               C3786 +
           (C48461 * C945 - C3782 * C938 + C48262 * C2338 - C3783 * C2332) *
               C3780 +
           (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
               C3787 +
           (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
               C48498) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
            C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
               C47225 +
           (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
            C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
               C48439 +
           (C11082 - C11083 + C11084 - C11085 + C11086 - C11087 + C11088 -
            C11089) *
               C47206 +
           (C11090 - C11091 + C11092 - C11093 + C11094 - C11095 + C11096 -
            C11097) *
               C48112) *
              C48217 * C925 +
          ((C11075 * C383 - C11069 * C389 + C11076 * C677 - C11070 * C682 +
            C11077 * C1448 - C11071 * C1452 + C11078 * C1902 - C48504 * C1905) *
               C47225 +
           (C11075 * C390 - C11069 * C401 + C11076 * C683 - C11070 * C692 +
            C11077 * C1453 - C11071 * C1460 + C11078 * C1906 - C48504 * C1911) *
               C48439 +
           (C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
            C11397) *
               C47206 +
           (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
            C11405) *
               C48112) *
              C48217 * C926 +
          ((C11069 * C933 - C11075 * C928 + C11070 * C2322 - C11076 * C2316 +
            C11071 * C2323 - C11077 * C2317 + C48504 * C9650 - C11078 * C9648) *
               C47225 +
           (C11069 * C943 - C11075 * C934 + C11070 * C2334 - C11076 * C2324 +
            C11071 * C2335 - C11077 * C2325 + C48504 * C9654 - C11078 * C9652) *
               C48439 +
           (C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
            C11071 * C2327 - C11077 * C2319 + C48504 * C9913 - C11078 * C9912) *
               C47206 +
           (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
            C11071 * C2337 - C11077 * C2329 + C48504 * C9915 - C11078 * C9914) *
               C48112) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C48461 * C389 - C3782 * C383 + C48262 * C682 - C3783 * C677) *
                C1067 +
            (C48461 * C401 - C3782 * C390 + C48262 * C692 - C3783 * C683) *
                C1061 +
            (C4118 - C4117 + C4120 - C4119) * C1068 +
            (C4122 - C4121 + C4124 - C4123) * C1062 + C6091 * C1069 +
            C6092 * C48481) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C3790 - C3789 + C3792 - C3791) * C1067 +
            (C3794 - C3793 + C3796 - C3795) * C1061 +
            (C3798 - C3797 + C3800 - C3799) * C1068 +
            (C3802 - C3801 + C3804 - C3803) * C1062 +
            (C3806 - C3805 + C3808 - C3807) * C1069 +
            (C3810 - C3809 + C3812 - C3811) * C48481) *
               C48462 +
           ((C4117 - C4118 + C4119 - C4120) * C1067 +
            (C4121 - C4122 + C4123 - C4124) * C1061 +
            (C4125 - C4126 + C4127 - C4128) * C1068 +
            (C4129 - C4130 + C4131 - C4132) * C1062 +
            (C4133 - C4134 + C4135 - C4136) * C1069 +
            (C4137 - C4138 + C4139 - C4140) * C48481) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C3829 * C1067 + C3830 * C1061 + C3831 * C1068 + C3832 * C1062 +
            (C3814 - C3813 + C3816 - C3815) * C1069 +
            (C3818 - C3817 + C3820 - C3819) * C48481) *
               C48462 +
           (C6091 * C1067 + C6092 * C1061 +
            (C4134 - C4133 + C4136 - C4135) * C1068 +
            (C4138 - C4137 + C4140 - C4139) * C1062 +
            (C48461 * C397 - C3782 * C387 + C48262 * C690 - C3783 * C681) *
                C1069 +
            (C48461 * C405 - C3782 * C398 + C48262 * C696 - C3783 * C691) *
                C48481) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C11069 * C389 - C11075 * C383 + C11070 * C682 - C11076 * C677 +
             C11071 * C1452 - C11077 * C1448 + C48504 * C1905 -
             C11078 * C1902) *
                C9007 +
            (C11069 * C401 - C11075 * C390 + C11070 * C692 - C11076 * C683 +
             C11071 * C1460 - C11077 * C1453 + C48504 * C1911 -
             C11078 * C1906) *
                C48102) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
             C11088) *
                C9007 +
            (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
             C11096) *
                C48102) *
               C48462 +
           ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
             C11397) *
                C9007 +
            (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
             C11405) *
                C48102) *
               C48304) *
              C48188 * C48171 * C111 +
          (((C11099 - C11098 + C11101 - C11100 + C11103 - C11102 + C11105 -
             C11104) *
                C9007 +
            (C11107 - C11106 + C11109 - C11108 + C11111 - C11110 + C11113 -
             C11112) *
                C48102) *
               C48462 +
           ((C11069 * C393 - C11075 * C385 + C11070 * C686 - C11076 * C679 +
             C11071 * C1456 - C11077 * C1450 + C48504 * C1909 -
             C11078 * C1904) *
                C9007 +
            (C11069 * C403 - C11075 * C394 + C11070 * C694 - C11076 * C687 +
             C11071 * C1462 - C11077 * C1457 + C48504 * C1913 -
             C11078 * C1910) *
                C48102) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C48461 * C389 - C3782 * C383 + C48262 * C682 - C3783 * C677) *
                 C1067 +
             (C48461 * C401 - C3782 * C390 + C48262 * C692 - C3783 * C683) *
                 C1061 +
             (C4118 - C4117 + C4120 - C4119) * C1068 +
             (C4122 - C4121 + C4124 - C4123) * C1062 + C6091 * C1069 +
             C6092 * C48481) *
                C48304) *
               C48188 * C255 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                 C1067 +
             (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                 C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            ((C4117 - C4118 + C4119 - C4120) * C1067 +
             (C4121 - C4122 + C4123 - C4124) * C1061 +
             (C4125 - C4126 + C4127 - C4128) * C1068 +
             (C4129 - C4130 + C4131 - C4132) * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C48188 * C255 +
           (((C3964 - C3963 + C3966 - C3965) * C1067 +
             (C3968 - C3967 + C3970 - C3969) * C1061 +
             (C3972 - C3971 + C3974 - C3973) * C1068 +
             (C3976 - C3975 + C3978 - C3977) * C1062 +
             (C3980 - C3979 + C3982 - C3981) * C1069 +
             (C3984 - C3983 + C3986 - C3985) * C48481) *
                C48462 +
            ((C6288 - C6287 + C6290 - C6289) * C1067 +
             (C6292 - C6291 + C6294 - C6293) * C1061 +
             (C6296 - C6295 + C6298 - C6297) * C1068 +
             (C6300 - C6299 + C6302 - C6301) * C1062 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C1069 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C11069 * C389 - C11075 * C383 + C11070 * C682 - C11076 * C677 +
              C11071 * C1452 - C11077 * C1448 + C48504 * C1905 -
              C11078 * C1902) *
                 C9007 +
             (C11069 * C401 - C11075 * C390 + C11070 * C692 - C11076 * C683 +
              C11071 * C1460 - C11077 * C1453 + C48504 * C1911 -
              C11078 * C1906) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
              C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
              C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C48188 * C255 +
           (((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
              C11250) *
                 C9007 +
             (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
              C11258) *
                 C48102) *
                C48462 +
            ((C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
              C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
              C11078 * C9181) *
                 C9007 +
             (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
              C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
              C11078 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C381 +
           ((C6533 * C1067 + C6534 * C1061 + C6091 * C1068 + C6092 * C1062 +
             (C4134 - C4133 + C4136 - C4135) * C1069 +
             (C4138 - C4137 + C4140 - C4139) * C48481) *
                C48462 +
            ((C6518 - C6517 + C6520 - C6519) * C1067 +
             (C6522 - C6521 + C6524 - C6523) * C1061 +
             (C6526 - C6525 + C6528 - C6527) * C1068 +
             (C6530 - C6529 + C6532 - C6531) * C1062 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C1069 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C381 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C381 +
           (((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
              C11396) *
                 C9007 +
             (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
              C11404) *
                 C48102) *
                C48462 +
            ((C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
              C11071 * C2327 - C11077 * C2319 + C48504 * C9913 -
              C11078 * C9912) *
                 C9007 +
             (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
              C11071 * C2337 - C11077 * C2329 + C48504 * C9915 -
              C11078 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C48188 * C505 +
           (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                 C1067 +
             (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                 C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C48188 * C505 +
           (((C3964 - C3963 + C3966 - C3965) * C1067 +
             (C3968 - C3967 + C3970 - C3969) * C1061 +
             (C3972 - C3971 + C3974 - C3973) * C1068 +
             (C3976 - C3975 + C3978 - C3977) * C1062 +
             (C3980 - C3979 + C3982 - C3981) * C1069 +
             (C3984 - C3983 + C3986 - C3985) * C48481) *
                C48462 +
            ((C6288 - C6287 + C6290 - C6289) * C1067 +
             (C6292 - C6291 + C6294 - C6293) * C1061 +
             (C6296 - C6295 + C6298 - C6297) * C1068 +
             (C6300 - C6299 + C6302 - C6301) * C1062 +
             (C48461 * C688 - C3782 * C680 + C48262 * C1458 - C3783 * C1451) *
                 C1069 +
             (C48461 * C695 - C3782 * C689 + C48262 * C1463 - C3783 * C1459) *
                 C48481) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
              C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
              C48504 * C9182) *
                 C9007 +
             (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
              C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
              C48504 * C9186) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C48188 * C505 +
           (((C11245 - C11244 + C11247 - C11246 + C11249 - C11248 + C11251 -
              C11250) *
                 C9007 +
             (C11253 - C11252 + C11255 - C11254 + C11257 - C11256 + C11259 -
              C11258) *
                 C48102) *
                C48462 +
            ((C11069 * C684 - C11075 * C678 + C11070 * C1454 - C11076 * C1449 +
              C11071 * C1907 - C11077 * C1903 + C48504 * C9184 -
              C11078 * C9181) *
                 C9007 +
             (C11069 * C693 - C11075 * C685 + C11070 * C1461 - C11076 * C1455 +
              C11071 * C1912 - C11077 * C1908 + C48504 * C9187 -
              C11078 * C9185) *
                 C48102) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C6497 - C6498 + C6499 - C6500) * C1067 +
            (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
            C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
               C48304) *
              C48188 * C571 +
          (((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                C1067 +
            (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                C1061 +
            (C3963 - C3964 + C3965 - C3966) * C1068 +
            (C3967 - C3968 + C3969 - C3970) * C1062 +
            (C3971 - C3972 + C3973 - C3974) * C1069 +
            (C3975 - C3976 + C3977 - C3978) * C48481) *
               C48462 +
           ((C3782 * C677 - C48461 * C682 + C3783 * C1448 - C48262 * C1452) *
                C1067 +
            (C3782 * C683 - C48461 * C692 + C3783 * C1453 - C48262 * C1460) *
                C1061 +
            (C6287 - C6288 + C6289 - C6290) * C1068 +
            (C6291 - C6292 + C6293 - C6294) * C1062 +
            (C6295 - C6296 + C6297 - C6298) * C1069 +
            (C6299 - C6300 + C6301 - C6302) * C48481) *
               C48304) *
              C48188 * C572 +
          (((C48461 * C580 - C3782 * C575 + C48262 * C1266 - C3783 * C1262) *
                C1067 +
            (C48461 * C590 - C3782 * C581 + C48262 * C1274 - C3783 * C1267) *
                C1061 +
            (C48461 * C582 - C3782 * C576 + C48262 * C1268 - C3783 * C1263) *
                C1068 +
            (C48461 * C591 - C3782 * C583 + C48262 * C1275 - C3783 * C1269) *
                C1062 +
            (C48461 * C584 - C3782 * C577 + C48262 * C1270 - C3783 * C1264) *
                C1069 +
            (C48461 * C592 - C3782 * C585 + C48262 * C1276 - C3783 * C1271) *
                C48481) *
               C48462 +
           ((C48461 * C1452 - C3782 * C1448 + C48262 * C1905 - C3783 * C1902) *
                C1067 +
            (C48461 * C1460 - C3782 * C1453 + C48262 * C1911 - C3783 * C1906) *
                C1061 +
            (C48461 * C1454 - C3782 * C1449 + C48262 * C1907 - C3783 * C1903) *
                C1068 +
            (C48461 * C1461 - C3782 * C1455 + C48262 * C1912 - C3783 * C1908) *
                C1062 +
            (C48461 * C1456 - C3782 * C1450 + C48262 * C1909 - C3783 * C1904) *
                C1069 +
            (C48461 * C1462 - C3782 * C1457 + C48262 * C1913 - C3783 * C1910) *
                C48481) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
             C14121) *
                C9007 +
            (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
             C14129) *
                C48102) *
               C48304) *
              C48188 * C571 +
          (((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
             C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
             C48504 * C1747) *
                C9007 +
            (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
             C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
             C48504 * C1753) *
                C48102) *
               C48462 +
           ((C11075 * C677 - C11069 * C682 + C11076 * C1448 - C11070 * C1452 +
             C11077 * C1902 - C11071 * C1905 + C11078 * C9180 -
             C48504 * C9182) *
                C9007 +
            (C11075 * C683 - C11069 * C692 + C11076 * C1453 - C11070 * C1460 +
             C11077 * C1906 - C11071 * C1911 + C11078 * C9183 -
             C48504 * C9186) *
                C48102) *
               C48304) *
              C48188 * C572 +
          (((C11069 * C580 - C11075 * C575 + C11070 * C1266 - C11076 * C1262 +
             C11071 * C1747 - C11077 * C1744 + C48504 * C9092 -
             C11078 * C9090) *
                C9007 +
            (C11069 * C590 - C11075 * C581 + C11070 * C1274 - C11076 * C1267 +
             C11071 * C1753 - C11077 * C1748 + C48504 * C9096 -
             C11078 * C9093) *
                C48102) *
               C48462 +
           ((C11069 * C1452 - C11075 * C1448 + C11070 * C1905 - C11076 * C1902 +
             C11071 * C9182 - C11077 * C9180 + C48504 * C9419 -
             C11078 * C9418) *
                C9007 +
            (C11069 * C1460 - C11075 * C1453 + C11070 * C1911 - C11076 * C1906 +
             C11071 * C9186 - C11077 * C9183 + C48504 * C9421 -
             C11078 * C9420) *
                C48102) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C381 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C505 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C7073 - C7074 + C7075 - C7076) * C1067 +
             (C7077 - C7078 + C7079 - C7080) * C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C381 +
           (((C7074 - C7073 + C7076 - C7075) * C1067 +
             (C7078 - C7077 + C7080 - C7079) * C1061 +
             (C6288 - C6287 + C6290 - C6289) * C1068 +
             (C6292 - C6291 + C6294 - C6293) * C1062 +
             (C6296 - C6295 + C6298 - C6297) * C1069 +
             (C6300 - C6299 + C6302 - C6301) * C48481) *
                C48462 +
            ((C48461 * C2322 - C3782 * C2316 + C48262 * C2323 - C3783 * C2317) *
                 C1067 +
             (C48461 * C2334 - C3782 * C2324 + C48262 * C2335 - C3783 * C2325) *
                 C1061 +
             (C48461 * C2326 - C3782 * C2318 + C48262 * C2327 - C3783 * C2319) *
                 C1068 +
             (C48461 * C2336 - C3782 * C2328 + C48262 * C2337 - C3783 * C2329) *
                 C1062 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C1069 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C381 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C505 +
          ((((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C14488 - C14489 + C14490 - C14491 + C14492 - C14493 + C14494 -
              C14495) *
                 C9007 +
             (C14496 - C14497 + C14498 - C14499 + C14500 - C14501 + C14502 -
              C14503) *
                 C48102) *
                C48304) *
               C381 +
           (((C14489 - C14488 + C14491 - C14490 + C14493 - C14492 + C14495 -
              C14494) *
                 C9007 +
             (C14497 - C14496 + C14499 - C14498 + C14501 - C14500 + C14503 -
              C14502) *
                 C48102) *
                C48462 +
            ((C11069 * C2322 - C11075 * C2316 + C11070 * C2323 -
              C11076 * C2317 + C11071 * C9650 - C11077 * C9648 +
              C48504 * C9651 - C11078 * C9649) *
                 C9007 +
             (C11069 * C2334 - C11075 * C2324 + C11070 * C2335 -
              C11076 * C2325 + C11071 * C9654 - C11077 * C9652 +
              C48504 * C9655 - C11078 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C3790 - C3789 + C3792 - C3791) * C1067 +
             (C3794 - C3793 + C3796 - C3795) * C1061 +
             (C3798 - C3797 + C3800 - C3799) * C1068 +
             (C3802 - C3801 + C3804 - C3803) * C1062 +
             (C3806 - C3805 + C3808 - C3807) * C1069 +
             (C3810 - C3809 + C3812 - C3811) * C48481) *
                C48462 +
            (C6535 * C1067 + C6536 * C1061 + C6537 * C1068 + C6538 * C1062 +
             (C4133 - C4134 + C4135 - C4136) * C1069 +
             (C4137 - C4138 + C4139 - C4140) * C48481) *
                C48304) *
               C779 +
           ((C6533 * C1067 + C6534 * C1061 + C6091 * C1068 + C6092 * C1062 +
             (C4134 - C4133 + C4136 - C4135) * C1069 +
             (C4138 - C4137 + C4140 - C4139) * C48481) *
                C48462 +
            ((C6518 - C6517 + C6520 - C6519) * C1067 +
             (C6522 - C6521 + C6524 - C6523) * C1061 +
             (C6526 - C6525 + C6528 - C6527) * C1068 +
             (C6530 - C6529 + C6532 - C6531) * C1062 +
             (C48461 * C939 - C3782 * C931 + C48262 * C2616 - C3783 * C2615) *
                 C1069 +
             (C48461 * C946 - C3782 * C940 + C48262 * C2618 - C3783 * C2617) *
                 C48481) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C779 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C11083 - C11082 + C11085 - C11084 + C11087 - C11086 + C11089 -
              C11088) *
                 C9007 +
             (C11091 - C11090 + C11093 - C11092 + C11095 - C11094 + C11097 -
              C11096) *
                 C48102) *
                C48462 +
            ((C11390 - C11391 + C11392 - C11393 + C11394 - C11395 + C11396 -
              C11397) *
                 C9007 +
             (C11398 - C11399 + C11400 - C11401 + C11402 - C11403 + C11404 -
              C11405) *
                 C48102) *
                C48304) *
               C779 +
           (((C11391 - C11390 + C11393 - C11392 + C11395 - C11394 + C11397 -
              C11396) *
                 C9007 +
             (C11399 - C11398 + C11401 - C11400 + C11403 - C11402 + C11405 -
              C11404) *
                 C48102) *
                C48462 +
            ((C11069 * C935 - C11075 * C929 + C11070 * C2326 - C11076 * C2318 +
              C11071 * C2327 - C11077 * C2319 + C48504 * C9913 -
              C11078 * C9912) *
                 C9007 +
             (C11069 * C944 - C11075 * C936 + C11070 * C2336 - C11076 * C2328 +
              C11071 * C2337 - C11077 * C2329 + C48504 * C9915 -
              C11078 * C9914) *
                 C48102) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                 C1067 +
             (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                 C1061 +
             (C3789 - C3790 + C3791 - C3792) * C1068 +
             (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
             C3830 * C48481) *
                C48462 +
            ((C6497 - C6498 + C6499 - C6500) * C1067 +
             (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
             C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
                C48304) *
               C779 +
           (((C6498 - C6497 + C6500 - C6499) * C1067 +
             (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
             C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
                C48462 +
            ((C3782 * C928 - C48461 * C933 + C3783 * C2316 - C48262 * C2322) *
                 C1067 +
             (C3782 * C934 - C48461 * C943 + C3783 * C2324 - C48262 * C2334) *
                 C1061 +
             (C6517 - C6518 + C6519 - C6520) * C1068 +
             (C6521 - C6522 + C6523 - C6524) * C1062 +
             (C6525 - C6526 + C6527 - C6528) * C1069 +
             (C6529 - C6530 + C6531 - C6532) * C48481) *
                C48304) *
               C48491) *
              C255 +
          ((((C3782 * C259 - C48461 * C265 + C3783 * C575 - C48262 * C580) *
                 C1067 +
             (C3782 * C266 - C48461 * C277 + C3783 * C581 - C48262 * C590) *
                 C1061 +
             (C3963 - C3964 + C3965 - C3966) * C1068 +
             (C3967 - C3968 + C3969 - C3970) * C1062 +
             (C3971 - C3972 + C3973 - C3974) * C1069 +
             (C3975 - C3976 + C3977 - C3978) * C48481) *
                C48462 +
            ((C7073 - C7074 + C7075 - C7076) * C1067 +
             (C7077 - C7078 + C7079 - C7080) * C1061 +
             (C6287 - C6288 + C6289 - C6290) * C1068 +
             (C6291 - C6292 + C6293 - C6294) * C1062 +
             (C6295 - C6296 + C6297 - C6298) * C1069 +
             (C6299 - C6300 + C6301 - C6302) * C48481) *
                C48304) *
               C779 +
           (((C7074 - C7073 + C7076 - C7075) * C1067 +
             (C7078 - C7077 + C7080 - C7079) * C1061 +
             (C6288 - C6287 + C6290 - C6289) * C1068 +
             (C6292 - C6291 + C6294 - C6293) * C1062 +
             (C6296 - C6295 + C6298 - C6297) * C1069 +
             (C6300 - C6299 + C6302 - C6301) * C48481) *
                C48462 +
            ((C48461 * C2322 - C3782 * C2316 + C48262 * C2323 - C3783 * C2317) *
                 C1067 +
             (C48461 * C2334 - C3782 * C2324 + C48262 * C2335 - C3783 * C2325) *
                 C1061 +
             (C48461 * C2326 - C3782 * C2318 + C48262 * C2327 - C3783 * C2319) *
                 C1068 +
             (C48461 * C2336 - C3782 * C2328 + C48262 * C2337 - C3783 * C2329) *
                 C1062 +
             (C48461 * C2330 - C3782 * C2320 + C48262 * C2331 - C3783 * C2321) *
                 C1069 +
             (C48461 * C2338 - C3782 * C2332 + C48262 * C2339 - C3783 * C2333) *
                 C48481) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
              C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                 C9007 +
             (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
              C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                 C48102) *
                C48462 +
            ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
              C14121) *
                 C9007 +
             (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
              C14129) *
                 C48102) *
                C48304) *
               C779 +
           (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
              C14120) *
                 C9007 +
             (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
              C14128) *
                 C48102) *
                C48462 +
            ((C11075 * C928 - C11069 * C933 + C11076 * C2316 - C11070 * C2322 +
              C11077 * C2317 - C11071 * C2323 + C11078 * C9648 -
              C48504 * C9650) *
                 C9007 +
             (C11075 * C934 - C11069 * C943 + C11076 * C2324 - C11070 * C2334 +
              C11077 * C2325 - C11071 * C2335 + C11078 * C9652 -
              C48504 * C9654) *
                 C48102) *
                C48304) *
               C48491) *
              C255 +
          ((((C11075 * C259 - C11069 * C265 + C11076 * C575 - C11070 * C580 +
              C11077 * C1262 - C11071 * C1266 + C11078 * C1744 -
              C48504 * C1747) *
                 C9007 +
             (C11075 * C266 - C11069 * C277 + C11076 * C581 - C11070 * C590 +
              C11077 * C1267 - C11071 * C1274 + C11078 * C1748 -
              C48504 * C1753) *
                 C48102) *
                C48462 +
            ((C14488 - C14489 + C14490 - C14491 + C14492 - C14493 + C14494 -
              C14495) *
                 C9007 +
             (C14496 - C14497 + C14498 - C14499 + C14500 - C14501 + C14502 -
              C14503) *
                 C48102) *
                C48304) *
               C779 +
           (((C14489 - C14488 + C14491 - C14490 + C14493 - C14492 + C14495 -
              C14494) *
                 C9007 +
             (C14497 - C14496 + C14499 - C14498 + C14501 - C14500 + C14503 -
              C14502) *
                 C48102) *
                C48462 +
            ((C11069 * C2322 - C11075 * C2316 + C11070 * C2323 -
              C11076 * C2317 + C11071 * C9650 - C11077 * C9648 +
              C48504 * C9651 - C11078 * C9649) *
                 C9007 +
             (C11069 * C2334 - C11075 * C2324 + C11070 * C2335 -
              C11076 * C2325 + C11071 * C9654 - C11077 * C9652 +
              C48504 * C9655 - C11078 * C9653) *
                 C48102) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C3782 * C119 + C48262 * C265 - C3783 * C259) *
                C1067 +
            (C48461 * C140 - C3782 * C127 + C48262 * C277 - C3783 * C266) *
                C1061 +
            (C3789 - C3790 + C3791 - C3792) * C1068 +
            (C3793 - C3794 + C3795 - C3796) * C1062 + C3829 * C1069 +
            C3830 * C48481) *
               C48462 +
           ((C6497 - C6498 + C6499 - C6500) * C1067 +
            (C6501 - C6502 + C6503 - C6504) * C1061 + C6533 * C1068 +
            C6534 * C1062 + C6091 * C1069 + C6092 * C48481) *
               C48304) *
              C925 +
          (((C6498 - C6497 + C6500 - C6499) * C1067 +
            (C6502 - C6501 + C6504 - C6503) * C1061 + C6535 * C1068 +
            C6536 * C1062 + C6537 * C1069 + C6538 * C48481) *
               C48462 +
           ((C7615 - C7616 + C7617 - C7618) * C1067 +
            (C7619 - C7620 + C7621 - C7622) * C1061 +
            (C6517 - C6518 + C6519 - C6520) * C1068 +
            (C6521 - C6522 + C6523 - C6524) * C1062 +
            (C6525 - C6526 + C6527 - C6528) * C1069 +
            (C6529 - C6530 + C6531 - C6532) * C48481) *
               C48304) *
              C926 +
          (((C7616 - C7615 + C7618 - C7617) * C1067 +
            (C7620 - C7619 + C7622 - C7621) * C1061 +
            (C6518 - C6517 + C6520 - C6519) * C1068 +
            (C6522 - C6521 + C6524 - C6523) * C1062 +
            (C6526 - C6525 + C6528 - C6527) * C1069 +
            (C6530 - C6529 + C6532 - C6531) * C48481) *
               C48462 +
           ((C48461 * C2785 - C3782 * C2781 + C48262 * C3230 - C3783 * C3227) *
                C1067 +
            (C48461 * C2793 - C3782 * C2786 + C48262 * C3236 - C3783 * C3231) *
                C1061 +
            (C48461 * C2787 - C3782 * C2782 + C48262 * C3232 - C3783 * C3228) *
                C1068 +
            (C48461 * C2794 - C3782 * C2788 + C48262 * C3237 - C3783 * C3233) *
                C1062 +
            (C48461 * C2789 - C3782 * C2783 + C48262 * C3234 - C3783 * C3229) *
                C1069 +
            (C48461 * C2795 - C3782 * C2790 + C48262 * C3238 - C3783 * C3235) *
                C48481) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11069 * C126 - C11075 * C119 + C11070 * C265 - C11076 * C259 +
             C11071 * C580 - C11077 * C575 + C48504 * C1266 - C11078 * C1262) *
                C9007 +
            (C11069 * C140 - C11075 * C127 + C11070 * C277 - C11076 * C266 +
             C11071 * C590 - C11077 * C581 + C48504 * C1274 - C11078 * C1267) *
                C48102) *
               C48462 +
           ((C14114 - C14115 + C14116 - C14117 + C14118 - C14119 + C14120 -
             C14121) *
                C9007 +
            (C14122 - C14123 + C14124 - C14125 + C14126 - C14127 + C14128 -
             C14129) *
                C48102) *
               C48304) *
              C925 +
          (((C14115 - C14114 + C14117 - C14116 + C14119 - C14118 + C14121 -
             C14120) *
                C9007 +
            (C14123 - C14122 + C14125 - C14124 + C14127 - C14126 + C14129 -
             C14128) *
                C48102) *
               C48462 +
           ((C14862 - C14863 + C14864 - C14865 + C14866 - C14867 + C14868 -
             C14869) *
                C9007 +
            (C14870 - C14871 + C14872 - C14873 + C14874 - C14875 + C14876 -
             C14877) *
                C48102) *
               C48304) *
              C926 +
          (((C14863 - C14862 + C14865 - C14864 + C14867 - C14866 + C14869 -
             C14868) *
                C9007 +
            (C14871 - C14870 + C14873 - C14872 + C14875 - C14874 + C14877 -
             C14876) *
                C48102) *
               C48462 +
           ((C11069 * C2785 - C11075 * C2781 + C11070 * C3230 - C11076 * C3227 +
             C11071 * C10064 - C11077 * C10062 + C48504 * C10509 -
             C11078 * C10508) *
                C9007 +
            (C11069 * C2793 - C11075 * C2786 + C11070 * C3236 - C11076 * C3231 +
             C11071 * C10068 - C11077 * C10065 + C48504 * C10511 -
             C11078 * C10510) *
                C48102) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
           (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
           (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
           (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
           (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
           (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C1115 * C1067 + C1116 * C1061 +
           (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C1068 +
           (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C1062 +
           (C48529 * C134 - C1064 * C123 + C48517 * C273 - C1065 * C263 +
            C48494 * C588 - C1066 * C579) *
               C1069 +
           (C48529 * C144 - C1064 * C135 + C48517 * C281 - C1065 * C274 +
            C48494 * C594 - C1066 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C48171 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48217 * C48188 * C48171 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48199 * C138 - C113 * C125) * C118 +
           (C48199 * C146 - C113 * C139) * C106) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C48199 * C389 - C113 * C383) * C1067 +
            (C48199 * C401 - C113 * C390) * C1061 + (C409 - C408) * C1068 +
            (C411 - C410) * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           ((C48199 * C933 - C113 * C928) * C1067 +
            (C48199 * C943 - C113 * C934) * C1061 + (C2456 - C2457) * C1068 +
            (C2458 - C2459) * C1062 + C2468 * C1069 + C2469 * C48481) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C1067 + (C151 - C150) * C1061 +
            (C153 - C152) * C1068 + (C155 - C154) * C1062 +
            (C157 - C156) * C1069 + (C159 - C158) * C48481) *
               C48530 +
           ((C408 - C409) * C1067 + (C410 - C411) * C1061 +
            (C412 - C413) * C1068 + (C414 - C415) * C1062 +
            (C416 - C417) * C1069 + (C418 - C419) * C48481) *
               C48519 +
           ((C2457 - C2456) * C1067 + (C2459 - C2458) * C1061 +
            (C2461 - C2460) * C1068 + (C2463 - C2462) * C1062 +
            (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C168 * C1067 + C169 * C1061 + C170 * C1068 + C171 * C1062 +
            C172 * C1069 + C173 * C48481) *
               C48530 +
           (C2454 * C1067 + C2455 * C1061 + (C417 - C416) * C1068 +
            (C419 - C418) * C1062 + (C421 - C420) * C1069 +
            (C423 - C422) * C48481) *
               C48519 +
           (C2468 * C1067 + C2469 * C1061 + (C2465 - C2464) * C1068 +
            (C2467 - C2466) * C1062 + (C48199 * C941 - C113 * C932) * C1069 +
            (C48199 * C947 - C113 * C942) * C48481) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
           (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
           (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
           (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
           (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
           (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C7789 * C7741 + C7790 * C48526 +
           (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C7742 +
           (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48513 +
           (C7732 * C134 - C7738 * C123 + C7733 * C273 - C7739 * C263 +
            C48494 * C588 - C7740 * C579) *
               C7743 +
           (C7732 * C144 - C7738 * C135 + C7733 * C281 - C7739 * C274 +
            C48494 * C594 - C7740 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C48171 * C110 +
          ((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
            C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
            C9006 * C1745 - C9000 * C1749) *
               C9007 +
           (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
            C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
            C9006 * C1750 - C9000 * C1754) *
               C48102) *
              C48217 * C48188 * C48171 * C111 +
          ((C8996 * C130 - C9002 * C121 + C8997 * C269 - C9003 * C261 +
            C8998 * C584 - C9004 * C577 + C8999 * C1270 - C9005 * C1264 +
            C9000 * C1751 - C9006 * C1746) *
               C9007 +
           (C8996 * C142 - C9002 * C131 + C8997 * C279 - C9003 * C270 +
            C8998 * C592 - C9004 * C585 + C8999 * C1276 - C9005 * C1271 +
            C9000 * C1755 - C9006 * C1752) *
               C48102) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C7732 * C389 - C7738 * C383 + C7733 * C682 - C7739 * C677 +
             C48494 * C1452 - C7740 * C1448) *
                C9007 +
            (C7732 * C401 - C7738 * C390 + C7733 * C692 - C7739 * C683 +
             C48494 * C1460 - C7740 * C1453) *
                C48102) *
               C48519 +
           ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
             C48494 * C2323 - C7740 * C2317) *
                C9007 +
            (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
             C48494 * C2335 - C7740 * C2325) *
                C48102) *
               C48497) *
              C48188 * C48171 * C110 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
               C48530 +
           ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
               C48519 +
           ((C7738 * C929 - C7732 * C935 + C7739 * C2318 - C7733 * C2326 +
             C7740 * C2319 - C48494 * C2327) *
                C9007 +
            (C7738 * C936 - C7732 * C944 + C7739 * C2328 - C7733 * C2336 +
             C7740 * C2329 - C48494 * C2337) *
                C48102) *
               C48497) *
              C48188 * C48171 * C111 +
          ((C7789 * C9007 + C7790 * C48102) * C48530 +
           ((C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C9007 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48102) *
               C48519 +
           ((C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
             C48494 * C2331 - C7740 * C2321) *
                C9007 +
            (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
             C48494 * C2339 - C7740 * C2333) *
                C48102) *
               C48497) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C255 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C255 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C255 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C48199 * C389 - C113 * C383) * C1067 +
             (C48199 * C401 - C113 * C390) * C1061 + (C409 - C408) * C1068 +
             (C411 - C410) * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C48199 * C933 - C113 * C928) * C1067 +
             (C48199 * C943 - C113 * C934) * C1061 + (C2456 - C2457) * C1068 +
             (C2458 - C2459) * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C113 * C677 - C48199 * C682) * C1067 +
             (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
             (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
             (C2626 - C2627) * C48481) *
                C48519 +
            ((C113 * C2316 - C48199 * C2322) * C1067 +
             (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
             (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
             (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            ((C408 - C409) * C1067 + (C410 - C411) * C1061 +
             (C412 - C413) * C1068 + (C414 - C415) * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            ((C2457 - C2456) * C1067 + (C2459 - C2458) * C1061 +
             (C2461 - C2460) * C1068 + (C2463 - C2462) * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C255 +
           (((C285 - C284) * C1067 + (C287 - C286) * C1061 +
             (C289 - C288) * C1068 + (C291 - C290) * C1062 +
             (C293 - C292) * C1069 + (C295 - C294) * C48481) *
                C48530 +
            ((C2621 - C2620) * C1067 + (C2623 - C2622) * C1061 +
             (C2625 - C2624) * C1068 + (C2627 - C2626) * C1062 +
             (C48199 * C688 - C113 * C680) * C1069 +
             (C48199 * C695 - C113 * C689) * C48481) *
                C48519 +
            ((C2629 - C2628) * C1067 + (C2631 - C2630) * C1061 +
             (C2633 - C2632) * C1068 + (C2635 - C2634) * C1062 +
             (C48199 * C2616 - C113 * C2615) * C1069 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C255 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C255 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C7732 * C389 - C7738 * C383 + C7733 * C682 - C7739 * C677 +
              C48494 * C1452 - C7740 * C1448) *
                 C9007 +
             (C7732 * C401 - C7738 * C390 + C7733 * C692 - C7739 * C683 +
              C48494 * C1460 - C7740 * C1453) *
                 C48102) *
                C48519 +
            ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
              C48494 * C2323 - C7740 * C2317) *
                 C9007 +
             (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
              C48494 * C2335 - C7740 * C2325) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
              C7740 * C1902 - C48494 * C1905) *
                 C9007 +
             (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
              C7740 * C1906 - C48494 * C1911) *
                 C48102) *
                C48519 +
            ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
              C7740 * C9648 - C48494 * C9650) *
                 C9007 +
             (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
              C7740 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C7738 * C929 - C7732 * C935 + C7739 * C2318 - C7733 * C2326 +
              C7740 * C2319 - C48494 * C2327) *
                 C9007 +
             (C7738 * C936 - C7732 * C944 + C7739 * C2328 - C7733 * C2336 +
              C7740 * C2329 - C48494 * C2337) *
                 C48102) *
                C48497) *
               C48188 * C255 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C9007 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48102) *
                C48530 +
            ((C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
              C48494 * C1907 - C7740 * C1903) *
                 C9007 +
             (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
              C48494 * C1912 - C7740 * C1908) *
                 C48102) *
                C48519 +
            ((C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C9007 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C381 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C381 +
           ((C2802 * C1067 + C2803 * C1061 + C2454 * C1068 + C2455 * C1062 +
             (C417 - C416) * C1069 + (C419 - C418) * C48481) *
                C48530 +
            (C2808 * C1067 + C2809 * C1061 + C2468 * C1068 + C2469 * C1062 +
             (C2465 - C2464) * C1069 + (C2467 - C2466) * C48481) *
                C48519 +
            ((C2819 - C2818) * C1067 + (C2821 - C2820) * C1061 +
             (C2823 - C2822) * C1068 + (C2825 - C2824) * C1062 +
             (C48199 * C2791 - C113 * C2784) * C1069 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C381 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C381 +
           (((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C9007 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48102) *
                C48530 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C9007 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48102) *
                C48519 +
            ((C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
              C48494 * C10066 - C7740 * C10063) *
                 C9007 +
             (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
              C48494 * C10069 - C7740 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C505 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C505 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C505 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C113 * C677 - C48199 * C682) * C1067 +
             (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
             (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
             (C2626 - C2627) * C48481) *
                C48519 +
            ((C113 * C2316 - C48199 * C2322) * C1067 +
             (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
             (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
             (C2634 - C2635) * C48481) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C48188 * C505 +
           (((C285 - C284) * C1067 + (C287 - C286) * C1061 +
             (C289 - C288) * C1068 + (C291 - C290) * C1062 +
             (C293 - C292) * C1069 + (C295 - C294) * C48481) *
                C48530 +
            ((C2621 - C2620) * C1067 + (C2623 - C2622) * C1061 +
             (C2625 - C2624) * C1068 + (C2627 - C2626) * C1062 +
             (C48199 * C688 - C113 * C680) * C1069 +
             (C48199 * C695 - C113 * C689) * C48481) *
                C48519 +
            ((C2629 - C2628) * C1067 + (C2631 - C2630) * C1061 +
             (C2633 - C2632) * C1068 + (C2635 - C2634) * C1062 +
             (C48199 * C2616 - C113 * C2615) * C1069 +
             (C48199 * C2618 - C113 * C2617) * C48481) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C505 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C505 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
              C7740 * C1902 - C48494 * C1905) *
                 C9007 +
             (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
              C7740 * C1906 - C48494 * C1911) *
                 C48102) *
                C48519 +
            ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
              C7740 * C9648 - C48494 * C9650) *
                 C9007 +
             (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
              C7740 * C9652 - C48494 * C9654) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C48188 * C505 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C9007 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48102) *
                C48530 +
            ((C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
              C48494 * C1907 - C7740 * C1903) *
                 C9007 +
             (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
              C48494 * C1912 - C7740 * C1908) *
                 C48102) *
                C48519 +
            ((C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C9007 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48102) *
                C48497) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C571 +
          ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
            C1066 * C1262 - C48494 * C1266) *
               C1067 +
           (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
            C1066 * C1267 - C48494 * C1274) *
               C1061 +
           (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
           (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
           (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
           (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
              C48217 * C48188 * C572 +
          ((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
            C48494 * C1747 - C1066 * C1744) *
               C1067 +
           (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
            C48494 * C1753 - C1066 * C1748) *
               C1061 +
           (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
            C48494 * C1749 - C1066 * C1745) *
               C1068 +
           (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
            C48494 * C1754 - C1066 * C1750) *
               C1062 +
           (C48529 * C584 - C1064 * C577 + C48517 * C1270 - C1065 * C1264 +
            C48494 * C1751 - C1066 * C1746) *
               C1069 +
           (C48529 * C592 - C1064 * C585 + C48517 * C1276 - C1065 * C1271 +
            C48494 * C1755 - C1066 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C571 +
          ((C113 * C259 - C48199 * C265) * C114 +
           (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48217 * C48188 * C572 +
          ((C48199 * C580 - C113 * C575) * C114 +
           (C48199 * C590 - C113 * C581) * C102 +
           (C48199 * C582 - C113 * C576) * C115 +
           (C48199 * C591 - C113 * C583) * C103 +
           (C48199 * C584 - C113 * C577) * C116 +
           (C48199 * C592 - C113 * C585) * C104 +
           (C48199 * C586 - C113 * C578) * C117 +
           (C48199 * C593 - C113 * C587) * C105 +
           (C48199 * C588 - C113 * C579) * C118 +
           (C48199 * C594 - C113 * C589) * C106) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
            C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
            C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
               C48497) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C1067 +
            (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
            (C286 - C287) * C1062 + (C288 - C289) * C1069 +
            (C290 - C291) * C48481) *
               C48530 +
           ((C113 * C677 - C48199 * C682) * C1067 +
            (C113 * C683 - C48199 * C692) * C1061 + (C2620 - C2621) * C1068 +
            (C2622 - C2623) * C1062 + (C2624 - C2625) * C1069 +
            (C2626 - C2627) * C48481) *
               C48519 +
           ((C113 * C2316 - C48199 * C2322) * C1067 +
            (C113 * C2324 - C48199 * C2334) * C1061 + (C2628 - C2629) * C1068 +
            (C2630 - C2631) * C1062 + (C2632 - C2633) * C1069 +
            (C2634 - C2635) * C48481) *
               C48497) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C1067 +
            (C48199 * C590 - C113 * C581) * C1061 +
            (C48199 * C582 - C113 * C576) * C1068 +
            (C48199 * C591 - C113 * C583) * C1062 +
            (C48199 * C584 - C113 * C577) * C1069 +
            (C48199 * C592 - C113 * C585) * C48481) *
               C48530 +
           ((C48199 * C1452 - C113 * C1448) * C1067 +
            (C48199 * C1460 - C113 * C1453) * C1061 +
            (C48199 * C1454 - C113 * C1449) * C1068 +
            (C48199 * C1461 - C113 * C1455) * C1062 +
            (C48199 * C1456 - C113 * C1450) * C1069 +
            (C48199 * C1462 - C113 * C1457) * C48481) *
               C48519 +
           ((C48199 * C2323 - C113 * C2317) * C1067 +
            (C48199 * C2335 - C113 * C2325) * C1061 +
            (C48199 * C2327 - C113 * C2319) * C1068 +
            (C48199 * C2337 - C113 * C2329) * C1062 +
            (C48199 * C2331 - C113 * C2321) * C1069 +
            (C48199 * C2339 - C113 * C2333) * C48481) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C571 +
          ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
            C7740 * C1262 - C48494 * C1266) *
               C7741 +
           (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
            C7740 * C1267 - C48494 * C1274) *
               C48526 +
           (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
           (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
           (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
           (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
              C48217 * C48188 * C572 +
          ((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
            C48494 * C1747 - C7740 * C1744) *
               C7741 +
           (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
            C48494 * C1753 - C7740 * C1748) *
               C48526 +
           (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
            C48494 * C1749 - C7740 * C1745) *
               C7742 +
           (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
            C48494 * C1754 - C7740 * C1750) *
               C48513 +
           (C7732 * C584 - C7738 * C577 + C7733 * C1270 - C7739 * C1264 +
            C48494 * C1751 - C7740 * C1746) *
               C7743 +
           (C7732 * C592 - C7738 * C585 + C7733 * C1276 - C7739 * C1271 +
            C48494 * C1755 - C7740 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C571 +
          ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
            C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
            C9006 * C9090 - C9000 * C9092) *
               C9007 +
           (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
            C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
            C9006 * C9093 - C9000 * C9096) *
               C48102) *
              C48217 * C48188 * C572 +
          ((C8996 * C580 - C9002 * C575 + C8997 * C1266 - C9003 * C1262 +
            C8998 * C1747 - C9004 * C1744 + C8999 * C9092 - C9005 * C9090 +
            C9000 * C9333 - C9006 * C9332) *
               C9007 +
           (C8996 * C590 - C9002 * C581 + C8997 * C1274 - C9003 * C1267 +
            C8998 * C1753 - C9004 * C1748 + C8999 * C9096 - C9005 * C9093 +
            C9000 * C9335 - C9006 * C9334) *
               C48102) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
               C48519 +
           ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
            (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
               C48497) *
              C48188 * C571 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C9007 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48102) *
               C48530 +
           ((C7738 * C677 - C7732 * C682 + C7739 * C1448 - C7733 * C1452 +
             C7740 * C1902 - C48494 * C1905) *
                C9007 +
            (C7738 * C683 - C7732 * C692 + C7739 * C1453 - C7733 * C1460 +
             C7740 * C1906 - C48494 * C1911) *
                C48102) *
               C48519 +
           ((C7738 * C2316 - C7732 * C2322 + C7739 * C2317 - C7733 * C2323 +
             C7740 * C9648 - C48494 * C9650) *
                C9007 +
            (C7738 * C2324 - C7732 * C2334 + C7739 * C2325 - C7733 * C2335 +
             C7740 * C9652 - C48494 * C9654) *
                C48102) *
               C48497) *
              C48188 * C572 +
          (((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
             C48494 * C1747 - C7740 * C1744) *
                C9007 +
            (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
             C48494 * C1753 - C7740 * C1748) *
                C48102) *
               C48530 +
           ((C7732 * C1452 - C7738 * C1448 + C7733 * C1905 - C7739 * C1902 +
             C48494 * C9182 - C7740 * C9180) *
                C9007 +
            (C7732 * C1460 - C7738 * C1453 + C7733 * C1911 - C7739 * C1906 +
             C48494 * C9186 - C7740 * C9183) *
                C48102) *
               C48519 +
           ((C7732 * C2323 - C7738 * C2317 + C7733 * C9650 - C7739 * C9648 +
             C48494 * C9651 - C7740 * C9649) *
                C9007 +
            (C7732 * C2335 - C7738 * C2325 + C7733 * C9654 - C7739 * C9652 +
             C48494 * C9655 - C7740 * C9653) *
                C48102) *
               C48497) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C381 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C505 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C381 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C381 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C3240 - C3241) * C1067 + (C3242 - C3243) * C1061 +
             (C2620 - C2621) * C1068 + (C2622 - C2623) * C1062 +
             (C2624 - C2625) * C1069 + (C2626 - C2627) * C48481) *
                C48519 +
            ((C3244 - C3245) * C1067 + (C3246 - C3247) * C1061 +
             (C2628 - C2629) * C1068 + (C2630 - C2631) * C1062 +
             (C2632 - C2633) * C1069 + (C2634 - C2635) * C48481) *
                C48497) *
               C381 +
           (((C3241 - C3240) * C1067 + (C3243 - C3242) * C1061 +
             (C2621 - C2620) * C1068 + (C2623 - C2622) * C1062 +
             (C2625 - C2624) * C1069 + (C2627 - C2626) * C48481) *
                C48530 +
            ((C3245 - C3244) * C1067 + (C3247 - C3246) * C1061 +
             (C2629 - C2628) * C1068 + (C2631 - C2630) * C1062 +
             (C2633 - C2632) * C1069 + (C2635 - C2634) * C48481) *
                C48519 +
            ((C48199 * C3230 - C113 * C3227) * C1067 +
             (C48199 * C3236 - C113 * C3231) * C1061 +
             (C48199 * C3232 - C113 * C3228) * C1068 +
             (C48199 * C3237 - C113 * C3233) * C1062 +
             (C48199 * C3234 - C113 * C3229) * C1069 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C381 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C505 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C505 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C9007 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48102) *
                C48519 +
            ((C10525 - C10526 + C10527 - C10528 + C10529 - C10530) * C9007 +
             (C10531 - C10532 + C10533 - C10534 + C10535 - C10536) * C48102) *
                C48497) *
               C381 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C9007 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48102) *
                C48530 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C9007 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48102) *
                C48519 +
            ((C7732 * C3230 - C7738 * C3227 + C7733 * C10064 - C7739 * C10062 +
              C48494 * C10509 - C7740 * C10508) *
                 C9007 +
             (C7732 * C3236 - C7738 * C3231 + C7733 * C10068 - C7739 * C10065 +
              C48494 * C10511 - C7740 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C779 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C1067 + (C151 - C150) * C1061 +
             (C153 - C152) * C1068 + (C155 - C154) * C1062 +
             (C157 - C156) * C1069 + (C159 - C158) * C48481) *
                C48530 +
            (C2810 * C1067 + C2811 * C1061 + C2812 * C1068 + C2813 * C1062 +
             (C416 - C417) * C1069 + (C418 - C419) * C48481) *
                C48519 +
            (C2814 * C1067 + C2815 * C1061 + C2816 * C1068 + C2817 * C1062 +
             (C2464 - C2465) * C1069 + (C2466 - C2467) * C48481) *
                C48497) *
               C779 +
           ((C2802 * C1067 + C2803 * C1061 + C2454 * C1068 + C2455 * C1062 +
             (C417 - C416) * C1069 + (C419 - C418) * C48481) *
                C48530 +
            (C2808 * C1067 + C2809 * C1061 + C2468 * C1068 + C2469 * C1062 +
             (C2465 - C2464) * C1069 + (C2467 - C2466) * C48481) *
                C48519 +
            ((C2819 - C2818) * C1067 + (C2821 - C2820) * C1061 +
             (C2823 - C2822) * C1068 + (C2825 - C2824) * C1062 +
             (C48199 * C2791 - C113 * C2784) * C1069 +
             (C48199 * C2796 - C113 * C2792) * C48481) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C779 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C9007 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48102) *
                C48530 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C9007 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48102) *
                C48519 +
            ((C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C9007 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48102) *
                C48497) *
               C779 +
           (((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C9007 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48102) *
                C48530 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C9007 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48102) *
                C48519 +
            ((C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
              C48494 * C10066 - C7740 * C10063) *
                 C9007 +
             (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
              C48494 * C10069 - C7740 * C10067) *
                 C48102) *
                C48497) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C779 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C255 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C779 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C1067 +
             (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
             (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
                C48530 +
            ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
             C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
                C48519 +
            ((C2804 - C2805) * C1067 + (C2806 - C2807) * C1061 + C2808 * C1068 +
             C2809 * C1062 + C2468 * C1069 + C2469 * C48481) *
                C48497) *
               C779 +
           (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
             C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
                C48530 +
            ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
             C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
                C48519 +
            ((C113 * C2781 - C48199 * C2785) * C1067 +
             (C113 * C2786 - C48199 * C2793) * C1061 + (C2818 - C2819) * C1068 +
             (C2820 - C2821) * C1062 + (C2822 - C2823) * C1069 +
             (C2824 - C2825) * C48481) *
                C48497) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C1067 +
             (C113 * C266 - C48199 * C277) * C1061 + (C284 - C285) * C1068 +
             (C286 - C287) * C1062 + (C288 - C289) * C1069 +
             (C290 - C291) * C48481) *
                C48530 +
            ((C3240 - C3241) * C1067 + (C3242 - C3243) * C1061 +
             (C2620 - C2621) * C1068 + (C2622 - C2623) * C1062 +
             (C2624 - C2625) * C1069 + (C2626 - C2627) * C48481) *
                C48519 +
            ((C3244 - C3245) * C1067 + (C3246 - C3247) * C1061 +
             (C2628 - C2629) * C1068 + (C2630 - C2631) * C1062 +
             (C2632 - C2633) * C1069 + (C2634 - C2635) * C48481) *
                C48497) *
               C779 +
           (((C3241 - C3240) * C1067 + (C3243 - C3242) * C1061 +
             (C2621 - C2620) * C1068 + (C2623 - C2622) * C1062 +
             (C2625 - C2624) * C1069 + (C2627 - C2626) * C48481) *
                C48530 +
            ((C3245 - C3244) * C1067 + (C3247 - C3246) * C1061 +
             (C2629 - C2628) * C1068 + (C2631 - C2630) * C1062 +
             (C2633 - C2632) * C1069 + (C2635 - C2634) * C48481) *
                C48519 +
            ((C48199 * C3230 - C113 * C3227) * C1067 +
             (C48199 * C3236 - C113 * C3231) * C1061 +
             (C48199 * C3232 - C113 * C3228) * C1068 +
             (C48199 * C3237 - C113 * C3233) * C1062 +
             (C48199 * C3234 - C113 * C3229) * C1069 +
             (C48199 * C3238 - C113 * C3235) * C48481) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C779 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C255 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C9007 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48102) *
                C48530 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
                C48519 +
            ((C10083 - C10084 + C10085 - C10086 + C10087 - C10088) * C9007 +
             (C10089 - C10090 + C10091 - C10092 + C10093 - C10094) * C48102) *
                C48497) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
                C48530 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
                C48519 +
            ((C7738 * C2781 - C7732 * C2785 + C7739 * C3227 - C7733 * C3230 +
              C7740 * C10062 - C48494 * C10064) *
                 C9007 +
             (C7738 * C2786 - C7732 * C2793 + C7739 * C3231 - C7733 * C3236 +
              C7740 * C10065 - C48494 * C10068) *
                 C48102) *
                C48497) *
               C48491) *
              C255 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C9007 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48102) *
                C48530 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C9007 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48102) *
                C48519 +
            ((C10525 - C10526 + C10527 - C10528 + C10529 - C10530) * C9007 +
             (C10531 - C10532 + C10533 - C10534 + C10535 - C10536) * C48102) *
                C48497) *
               C779 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C9007 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48102) *
                C48530 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C9007 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48102) *
                C48519 +
            ((C7732 * C3230 - C7738 * C3227 + C7733 * C10064 - C7739 * C10062 +
              C48494 * C10509 - C7740 * C10508) *
                 C9007 +
             (C7732 * C3236 - C7738 * C3231 + C7733 * C10068 - C7739 * C10065 +
              C48494 * C10511 - C7740 * C10510) *
                 C48102) *
                C48497) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C925 +
          ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
            C1066 * C1448 - C48494 * C1452) *
               C1067 +
           (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
            C1066 * C1453 - C48494 * C1460) *
               C1061 +
           (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
           (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
           (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
           (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
              C48217 * C926 +
          ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
            C48494 * C2323 - C1066 * C2317) *
               C1067 +
           (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
            C48494 * C2335 - C1066 * C2325) *
               C1061 +
           (C48529 * C935 - C1064 * C929 + C48517 * C2326 - C1065 * C2318 +
            C48494 * C2327 - C1066 * C2319) *
               C1068 +
           (C48529 * C944 - C1064 * C936 + C48517 * C2336 - C1065 * C2328 +
            C48494 * C2337 - C1066 * C2329) *
               C1062 +
           (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
            C48494 * C2331 - C1066 * C2321) *
               C1069 +
           (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
            C48494 * C2339 - C1066 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C925 +
          ((C113 * C383 - C48199 * C389) * C114 +
           (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48217 * C926 +
          ((C48199 * C933 - C113 * C928) * C114 +
           (C48199 * C943 - C113 * C934) * C102 +
           (C48199 * C935 - C113 * C929) * C115 +
           (C48199 * C944 - C113 * C936) * C103 +
           (C48199 * C937 - C113 * C930) * C116 +
           (C48199 * C945 - C113 * C938) * C104 +
           (C48199 * C939 - C113 * C931) * C117 +
           (C48199 * C946 - C113 * C940) * C105 +
           (C48199 * C941 - C113 * C932) * C118 +
           (C48199 * C947 - C113 * C942) * C106) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C1067 +
            (C48199 * C140 - C113 * C127) * C1061 + (C148 - C149) * C1068 +
            (C150 - C151) * C1062 + C168 * C1069 + C169 * C48481) *
               C48530 +
           ((C2798 - C2799) * C1067 + (C2800 - C2801) * C1061 + C2802 * C1068 +
            C2803 * C1062 + C2454 * C1069 + C2455 * C48481) *
               C48519 +
           C3678 * C48497) *
              C925 +
          (((C2799 - C2798) * C1067 + (C2801 - C2800) * C1061 + C2810 * C1068 +
            C2811 * C1062 + C2812 * C1069 + C2813 * C48481) *
               C48530 +
           ((C2805 - C2804) * C1067 + (C2807 - C2806) * C1061 + C2814 * C1068 +
            C2815 * C1062 + C2816 * C1069 + C2817 * C48481) *
               C48519 +
           ((C3668 - C3669) * C1067 + (C3670 - C3671) * C1061 +
            (C2818 - C2819) * C1068 + (C2820 - C2821) * C1062 +
            (C2822 - C2823) * C1069 + (C2824 - C2825) * C48481) *
               C48497) *
              C926 +
          (C3678 * C48530 +
           ((C3669 - C3668) * C1067 + (C3671 - C3670) * C1061 +
            (C2819 - C2818) * C1068 + (C2821 - C2820) * C1062 +
            (C2823 - C2822) * C1069 + (C2825 - C2824) * C48481) *
               C48519 +
           ((C48199 * C3652 - C113 * C3649) * C1067 +
            (C48199 * C3658 - C113 * C3653) * C1061 +
            (C48199 * C3654 - C113 * C3650) * C1068 +
            (C48199 * C3659 - C113 * C3655) * C1062 +
            (C48199 * C3656 - C113 * C3651) * C1069 +
            (C48199 * C3660 - C113 * C3657) * C48481) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C925 +
          ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
            C7740 * C1448 - C48494 * C1452) *
               C7741 +
           (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
            C7740 * C1453 - C48494 * C1460) *
               C48526 +
           (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
           (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
           (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
           (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
              C48217 * C926 +
          ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
            C48494 * C2323 - C7740 * C2317) *
               C7741 +
           (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
            C48494 * C2335 - C7740 * C2325) *
               C48526 +
           (C7732 * C935 - C7738 * C929 + C7733 * C2326 - C7739 * C2318 +
            C48494 * C2327 - C7740 * C2319) *
               C7742 +
           (C7732 * C944 - C7738 * C936 + C7733 * C2336 - C7739 * C2328 +
            C48494 * C2337 - C7740 * C2329) *
               C48513 +
           (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
            C48494 * C2331 - C7740 * C2321) *
               C7743 +
           (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
            C48494 * C2339 - C7740 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C925 +
          ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
            C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
            C9006 * C9180 - C9000 * C9182) *
               C9007 +
           (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
            C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
            C9006 * C9183 - C9000 * C9186) *
               C48102) *
              C48217 * C926 +
          ((C8996 * C933 - C9002 * C928 + C8997 * C2322 - C9003 * C2316 +
            C8998 * C2323 - C9004 * C2317 + C8999 * C9650 - C9005 * C9648 +
            C9000 * C9651 - C9006 * C9649) *
               C9007 +
           (C8996 * C943 - C9002 * C934 + C8997 * C2334 - C9003 * C2324 +
            C8998 * C2335 - C9004 * C2325 + C8999 * C9654 - C9005 * C9652 +
            C9000 * C9655 - C9006 * C9653) *
               C48102) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C9007 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48102) *
               C48530 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C9007 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48102) *
               C48519 +
           C10971 * C48497) *
              C925 +
          (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C9007 +
            (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48102) *
               C48530 +
           ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C9007 +
            (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48102) *
               C48519 +
           ((C10953 - C10954 + C10955 - C10956 + C10957 - C10958) * C9007 +
            (C10959 - C10960 + C10961 - C10962 + C10963 - C10964) * C48102) *
               C48497) *
              C926 +
          (C10971 * C48530 +
           ((C10954 - C10953 + C10956 - C10955 + C10958 - C10957) * C9007 +
            (C10960 - C10959 + C10962 - C10961 + C10964 - C10963) * C48102) *
               C48519 +
           ((C7732 * C3652 - C7738 * C3649 + C7733 * C10940 - C7739 * C10938 +
             C48494 * C10941 - C7740 * C10939) *
                C9007 +
            (C7732 * C3658 - C7738 * C3653 + C7733 * C10944 - C7739 * C10942 +
             C48494 * C10945 - C7740 * C10943) *
                C48102) *
               C48497) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C149 - C148) * C3784 + (C151 - C150) * C3778 +
            (C153 - C152) * C3785 + (C155 - C154) * C3779 +
            (C157 - C156) * C3786 + (C159 - C158) * C3780 +
            (C161 - C160) * C3787 + (C163 - C162) * C48498) *
               C48462 +
           (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
            (C416 - C417) * C3786 + (C418 - C419) * C3780 +
            (C420 - C421) * C3787 + (C422 - C423) * C48498) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C168 * C3784 + C169 * C3778 + C170 * C3785 + C171 * C3779 +
            C172 * C3786 + C173 * C3780 + (C165 - C164) * C3787 +
            (C167 - C166) * C48498) *
               C48462 +
           (C2454 * C3784 + C2455 * C3778 + C4957 * C3785 + C4958 * C3779 +
            (C421 - C420) * C3786 + (C423 - C422) * C3780 +
            (C48199 * C399 - C113 * C388) * C3787 +
            (C48199 * C406 - C113 * C400) * C48498) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            (C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C47206 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48112) *
               C48304) *
              C48188 * C48171 * C110 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
               C48462 +
           ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C47225 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48439 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
               C48304) *
              C48188 * C48171 * C111 +
          ((C7789 * C47225 + C7790 * C48439 +
            (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C47206 +
            (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48112) *
               C48462 +
           ((C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47225 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48439 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C47206 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48112) *
               C48304) *
              C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C48188 * C255 +
           (((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             (C416 - C417) * C3786 + (C418 - C419) * C3780 +
             (C420 - C421) * C3787 + (C422 - C423) * C48498) *
                C48304) *
               C48188 * C255 +
           (((C285 - C284) * C3784 + (C287 - C286) * C3778 +
             (C289 - C288) * C3785 + (C291 - C290) * C3779 +
             (C293 - C292) * C3786 + (C295 - C294) * C3780 +
             (C297 - C296) * C3787 + (C299 - C298) * C48498) *
                C48462 +
            ((C2621 - C2620) * C3784 + (C2623 - C2622) * C3778 +
             (C2625 - C2624) * C3785 + (C2627 - C2626) * C3779 +
             (C5090 - C5089) * C3786 + (C5092 - C5091) * C3780 +
             (C48199 * C690 - C113 * C681) * C3787 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             (C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C47206 +
             (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C48188 * C48489) *
              C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            ((C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C47225 +
             (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C48188 * C255 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C47225 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48439 +
             (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C47206 +
             (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48112) *
                C48462 +
            ((C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47225 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48439 +
             (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
              C48494 * C1909 - C7740 * C1904) *
                 C47206 +
             (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
              C48494 * C1913 - C7740 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C381 +
           ((C2802 * C3784 + C2803 * C3778 + C2454 * C3785 + C2455 * C3779 +
             C4957 * C3786 + C4958 * C3780 + (C421 - C420) * C3787 +
             (C423 - C422) * C48498) *
                C48462 +
            (C2808 * C3784 + C2809 * C3778 + C2468 * C3785 + C2469 * C3779 +
             (C2465 - C2464) * C3786 + (C2467 - C2466) * C3780 +
             (C48199 * C941 - C113 * C932) * C3787 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C48171 * C257 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C381 +
           ((C12684 * C47225 + C12685 * C48439 +
             (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47206 +
             (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48112) *
                C48462 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47225 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48439 +
             (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
              C48494 * C2331 - C7740 * C2321) *
                 C47206 +
             (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
              C48494 * C2339 - C7740 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C48188 * C505 +
           (((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C48188 * C505 +
           (((C285 - C284) * C3784 + (C287 - C286) * C3778 +
             (C289 - C288) * C3785 + (C291 - C290) * C3779 +
             (C293 - C292) * C3786 + (C295 - C294) * C3780 +
             (C297 - C296) * C3787 + (C299 - C298) * C48498) *
                C48462 +
            ((C2621 - C2620) * C3784 + (C2623 - C2622) * C3778 +
             (C2625 - C2624) * C3785 + (C2627 - C2626) * C3779 +
             (C5090 - C5089) * C3786 + (C5092 - C5091) * C3780 +
             (C48199 * C690 - C113 * C681) * C3787 +
             (C48199 * C696 - C113 * C691) * C48498) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C48188 * C505 +
           (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C48188 * C48489) *
              C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C48188 * C505 +
           (((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C47225 +
             (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48439 +
             (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C47206 +
             (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48112) *
                C48462 +
            ((C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47225 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48439 +
             (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
              C48494 * C1909 - C7740 * C1904) *
                 C47206 +
             (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
              C48494 * C1913 - C7740 * C1910) *
                 C48112) *
                C48304) *
               C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C48188 * C571 +
          (((C113 * C259 - C48199 * C265) * C3784 +
            (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
            (C286 - C287) * C3779 + (C288 - C289) * C3786 +
            (C290 - C291) * C3780 + (C292 - C293) * C3787 +
            (C294 - C295) * C48498) *
               C48462 +
           ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
            (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
            (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
            (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
               C48304) *
              C48188 * C572 +
          (((C48199 * C580 - C113 * C575) * C3784 +
            (C48199 * C590 - C113 * C581) * C3778 +
            (C48199 * C582 - C113 * C576) * C3785 +
            (C48199 * C591 - C113 * C583) * C3779 +
            (C48199 * C584 - C113 * C577) * C3786 +
            (C48199 * C592 - C113 * C585) * C3780 +
            (C48199 * C586 - C113 * C578) * C3787 +
            (C48199 * C593 - C113 * C587) * C48498) *
               C48462 +
           ((C48199 * C1452 - C113 * C1448) * C3784 +
            (C48199 * C1460 - C113 * C1453) * C3778 +
            (C48199 * C1454 - C113 * C1449) * C3785 +
            (C48199 * C1461 - C113 * C1455) * C3779 +
            (C48199 * C1456 - C113 * C1450) * C3786 +
            (C48199 * C1462 - C113 * C1457) * C3780 +
            (C48199 * C1458 - C113 * C1451) * C3787 +
            (C48199 * C1463 - C113 * C1459) * C48498) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            C12684 * C47206 + C12685 * C48112) *
               C48304) *
              C48188 * C571 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C47225 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48439 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
               C48462 +
           ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
            (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
            (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
            (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
               C48304) *
              C48188 * C572 +
          (((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
             C48494 * C1747 - C7740 * C1744) *
                C47225 +
            (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
             C48494 * C1753 - C7740 * C1748) *
                C48439 +
            (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
             C48494 * C1749 - C7740 * C1745) *
                C47206 +
            (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
             C48494 * C1754 - C7740 * C1750) *
                C48112) *
               C48462 +
           ((C7732 * C1452 - C7738 * C1448 + C7733 * C1905 - C7739 * C1902 +
             C48494 * C9182 - C7740 * C9180) *
                C47225 +
            (C7732 * C1460 - C7738 * C1453 + C7733 * C1911 - C7739 * C1906 +
             C48494 * C9186 - C7740 * C9183) *
                C48439 +
            (C7732 * C1454 - C7738 * C1449 + C7733 * C1907 - C7739 * C1903 +
             C48494 * C9184 - C7740 * C9181) *
                C47206 +
            (C7732 * C1461 - C7738 * C1455 + C7733 * C1912 - C7739 * C1908 +
             C48494 * C9187 - C7740 * C9185) *
                C48112) *
               C48304) *
              C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C381 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C505 +
          ((((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C381 +
           (((C3241 - C3240) * C3784 + (C3243 - C3242) * C3778 +
             (C2621 - C2620) * C3785 + (C2623 - C2622) * C3779 +
             (C2625 - C2624) * C3786 + (C2627 - C2626) * C3780 +
             (C5090 - C5089) * C3787 + (C5092 - C5091) * C48498) *
                C48462 +
            ((C3245 - C3244) * C3784 + (C3247 - C3246) * C3778 +
             (C2629 - C2628) * C3785 + (C2631 - C2630) * C3779 +
             (C2633 - C2632) * C3786 + (C2635 - C2634) * C3780 +
             (C48199 * C2616 - C113 * C2615) * C3787 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C381 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C505 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C381 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C47225 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48439 +
             (C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47206 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48112) *
                C48462 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C47225 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48439 +
             (C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C47206 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C149 - C148) * C3784 + (C151 - C150) * C3778 +
             (C153 - C152) * C3785 + (C155 - C154) * C3779 +
             (C157 - C156) * C3786 + (C159 - C158) * C3780 +
             (C161 - C160) * C3787 + (C163 - C162) * C48498) *
                C48462 +
            (C2810 * C3784 + C2811 * C3778 + C2812 * C3785 + C2813 * C3779 +
             C5223 * C3786 + C5224 * C3780 + (C420 - C421) * C3787 +
             (C422 - C423) * C48498) *
                C48304) *
               C779 +
           ((C2802 * C3784 + C2803 * C3778 + C2454 * C3785 + C2455 * C3779 +
             C4957 * C3786 + C4958 * C3780 + (C421 - C420) * C3787 +
             (C423 - C422) * C48498) *
                C48462 +
            (C2808 * C3784 + C2809 * C3778 + C2468 * C3785 + C2469 * C3779 +
             (C2465 - C2464) * C3786 + (C2467 - C2466) * C3780 +
             (C48199 * C941 - C113 * C932) * C3787 +
             (C48199 * C947 - C113 * C942) * C48498) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C48171 * C507 +
          ((((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C47225 +
             (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48439 +
             (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C47206 +
             (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48112) *
                C48462 +
            (C12686 * C47225 + C12687 * C48439 +
             (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C47206 +
             (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48112) *
                C48304) *
               C779 +
           ((C12684 * C47225 + C12685 * C48439 +
             (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C47206 +
             (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48112) *
                C48462 +
            ((C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47225 +
             (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48439 +
             (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
              C48494 * C2331 - C7740 * C2321) *
                 C47206 +
             (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
              C48494 * C2339 - C7740 * C2333) *
                 C48112) *
                C48304) *
               C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48199 * C126 - C113 * C119) * C3784 +
             (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
             (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 +
             C170 * C3787 + C171 * C48498) *
                C48462 +
            ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
             C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
             C4958 * C48498) *
                C48304) *
               C779 +
           (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
             C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
             C5224 * C48498) *
                C48462 +
            ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
             C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
             (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
                C48304) *
               C48491) *
              C255 +
          ((((C113 * C259 - C48199 * C265) * C3784 +
             (C113 * C266 - C48199 * C277) * C3778 + (C284 - C285) * C3785 +
             (C286 - C287) * C3779 + (C288 - C289) * C3786 +
             (C290 - C291) * C3780 + (C292 - C293) * C3787 +
             (C294 - C295) * C48498) *
                C48462 +
            ((C3240 - C3241) * C3784 + (C3242 - C3243) * C3778 +
             (C2620 - C2621) * C3785 + (C2622 - C2623) * C3779 +
             (C2624 - C2625) * C3786 + (C2626 - C2627) * C3780 +
             (C5089 - C5090) * C3787 + (C5091 - C5092) * C48498) *
                C48304) *
               C779 +
           (((C3241 - C3240) * C3784 + (C3243 - C3242) * C3778 +
             (C2621 - C2620) * C3785 + (C2623 - C2622) * C3779 +
             (C2625 - C2624) * C3786 + (C2627 - C2626) * C3780 +
             (C5090 - C5089) * C3787 + (C5092 - C5091) * C48498) *
                C48462 +
            ((C3245 - C3244) * C3784 + (C3247 - C3246) * C3778 +
             (C2629 - C2628) * C3785 + (C2631 - C2630) * C3779 +
             (C2633 - C2632) * C3786 + (C2635 - C2634) * C3780 +
             (C48199 * C2616 - C113 * C2615) * C3787 +
             (C48199 * C2618 - C113 * C2617) * C48498) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
              C48494 * C580 - C7740 * C575) *
                 C47225 +
             (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
              C48494 * C590 - C7740 * C581) *
                 C48439 +
             (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
             (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
                C48462 +
            ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
             (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
             C12684 * C47206 + C12685 * C48112) *
                C48304) *
               C779 +
           (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
             (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
             C12686 * C47206 + C12687 * C48112) *
                C48462 +
            ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
             (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
             (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
             (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
                C48304) *
               C48491) *
              C255 +
          ((((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
              C7740 * C1262 - C48494 * C1266) *
                 C47225 +
             (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
              C7740 * C1267 - C48494 * C1274) *
                 C48439 +
             (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C47206 +
             (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48112) *
                C48462 +
            ((C10513 - C10514 + C10515 - C10516 + C10517 - C10518) * C47225 +
             (C10519 - C10520 + C10521 - C10522 + C10523 - C10524) * C48439 +
             (C12462 - C12463 + C12464 - C12465 + C12466 - C12467) * C47206 +
             (C12468 - C12469 + C12470 - C12471 + C12472 - C12473) * C48112) *
                C48304) *
               C779 +
           (((C10514 - C10513 + C10516 - C10515 + C10518 - C10517) * C47225 +
             (C10520 - C10519 + C10522 - C10521 + C10524 - C10523) * C48439 +
             (C12463 - C12462 + C12465 - C12464 + C12467 - C12466) * C47206 +
             (C12469 - C12468 + C12471 - C12470 + C12473 - C12472) * C48112) *
                C48462 +
            ((C10526 - C10525 + C10528 - C10527 + C10530 - C10529) * C47225 +
             (C10532 - C10531 + C10534 - C10533 + C10536 - C10535) * C48439 +
             (C7732 * C2326 - C7738 * C2318 + C7733 * C2327 - C7739 * C2319 +
              C48494 * C9913 - C7740 * C9912) *
                 C47206 +
             (C7732 * C2336 - C7738 * C2328 + C7733 * C2337 - C7739 * C2329 +
              C48494 * C9915 - C7740 * C9914) *
                 C48112) *
                C48304) *
               C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C3784 +
            (C48199 * C140 - C113 * C127) * C3778 + (C148 - C149) * C3785 +
            (C150 - C151) * C3779 + C168 * C3786 + C169 * C3780 + C170 * C3787 +
            C171 * C48498) *
               C48462 +
           ((C2798 - C2799) * C3784 + (C2800 - C2801) * C3778 + C2802 * C3785 +
            C2803 * C3779 + C2454 * C3786 + C2455 * C3780 + C4957 * C3787 +
            C4958 * C48498) *
               C48304) *
              C925 +
          (((C2799 - C2798) * C3784 + (C2801 - C2800) * C3778 + C2810 * C3785 +
            C2811 * C3779 + C2812 * C3786 + C2813 * C3780 + C5223 * C3787 +
            C5224 * C48498) *
               C48462 +
           ((C2805 - C2804) * C3784 + (C2807 - C2806) * C3778 + C2814 * C3785 +
            C2815 * C3779 + C2816 * C3786 + C2817 * C3780 +
            (C2464 - C2465) * C3787 + (C2466 - C2467) * C48498) *
               C48304) *
              C926 +
          ((C3662 * C3784 + C3663 * C3778 + C2808 * C3785 + C2809 * C3779 +
            C2468 * C3786 + C2469 * C3780 + (C2465 - C2464) * C3787 +
            (C2467 - C2466) * C48498) *
               C48462 +
           ((C3669 - C3668) * C3784 + (C3671 - C3670) * C3778 +
            (C2819 - C2818) * C3785 + (C2821 - C2820) * C3779 +
            (C2823 - C2822) * C3786 + (C2825 - C2824) * C3780 +
            (C48199 * C2791 - C113 * C2784) * C3787 +
            (C48199 * C2796 - C113 * C2792) * C48498) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C47225 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48439 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C47206 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48112) *
               C48462 +
           ((C10071 - C10072 + C10073 - C10074 + C10075 - C10076) * C47225 +
            (C10077 - C10078 + C10079 - C10080 + C10081 - C10082) * C48439 +
            C12684 * C47206 + C12685 * C48112) *
               C48304) *
              C925 +
          (((C10072 - C10071 + C10074 - C10073 + C10076 - C10075) * C47225 +
            (C10078 - C10077 + C10080 - C10079 + C10082 - C10081) * C48439 +
            C12686 * C47206 + C12687 * C48112) *
               C48462 +
           ((C10084 - C10083 + C10086 - C10085 + C10088 - C10087) * C47225 +
            (C10090 - C10089 + C10092 - C10091 + C10094 - C10093) * C48439 +
            (C10095 - C10096 + C10097 - C10098 + C10099 - C10100) * C47206 +
            (C10101 - C10102 + C10103 - C10104 + C10105 - C10106) * C48112) *
               C48304) *
              C926 +
          ((C10967 * C47225 + C10968 * C48439 +
            (C10096 - C10095 + C10098 - C10097 + C10100 - C10099) * C47206 +
            (C10102 - C10101 + C10104 - C10103 + C10106 - C10105) * C48112) *
               C48462 +
           ((C10954 - C10953 + C10956 - C10955 + C10958 - C10957) * C47225 +
            (C10960 - C10959 + C10962 - C10961 + C10964 - C10963) * C48439 +
            (C7732 * C2787 - C7738 * C2782 + C7733 * C3232 - C7739 * C3228 +
             C48494 * C10066 - C7740 * C10063) *
                C47206 +
            (C7732 * C2794 - C7738 * C2788 + C7733 * C3237 - C7739 * C3233 +
             C48494 * C10069 - C7740 * C10067) *
                C48112) *
               C48304) *
              C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C48171 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48217 * C48188 * C48171 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48199 * C138 - C113 * C125) * C118 +
           (C48199 * C146 - C113 * C139) * C106) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
           (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
           (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
           (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
           (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
           (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C1115 * C1067 + C1116 * C1061 +
           (C1096 - C1095 + C1098 - C1097 + C1100 - C1099) * C1068 +
           (C1102 - C1101 + C1104 - C1103 + C1106 - C1105) * C1062 +
           (C48529 * C134 - C1064 * C123 + C48517 * C273 - C1065 * C263 +
            C48494 * C588 - C1066 * C579) *
               C1069 +
           (C48529 * C144 - C1064 * C135 + C48517 * C281 - C1065 * C274 +
            C48494 * C594 - C1066 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C48171 * C110 +
          ((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
           (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
           (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
           (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
           (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
           (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
              C48217 * C48188 * C48171 * C111 +
          (C7789 * C7741 + C7790 * C48526 +
           (C7770 - C7769 + C7772 - C7771 + C7774 - C7773) * C7742 +
           (C7776 - C7775 + C7778 - C7777 + C7780 - C7779) * C48513 +
           (C7732 * C134 - C7738 * C123 + C7733 * C273 - C7739 * C263 +
            C48494 * C588 - C7740 * C579) *
               C7743 +
           (C7732 * C144 - C7738 * C135 + C7733 * C281 - C7739 * C274 +
            C48494 * C594 - C7740 * C589) *
               C48481) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C48171 * C110 +
          ((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
            C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
            C9006 * C1745 - C9000 * C1749) *
               C9007 +
           (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
            C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
            C9006 * C1750 - C9000 * C1754) *
               C48102) *
              C48217 * C48188 * C48171 * C111 +
          ((C8996 * C130 - C9002 * C121 + C8997 * C269 - C9003 * C261 +
            C8998 * C584 - C9004 * C577 + C8999 * C1270 - C9005 * C1264 +
            C9000 * C1751 - C9006 * C1746) *
               C9007 +
           (C8996 * C142 - C9002 * C131 + C8997 * C279 - C9003 * C270 +
            C8998 * C592 - C9004 * C585 + C8999 * C1276 - C9005 * C1271 +
            C9000 * C1755 - C9006 * C1752) *
               C48102) *
              C48217 * C48188 * C48171 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C255 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C255 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C255 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C255 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C255 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C255 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C381 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C381 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C257 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C48188 * C505 +
           ((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C48188 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48199 * C275 - C113 * C264) * C118 +
            (C48199 * C282 - C113 * C276) * C106) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C48188 * C505 +
           ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C48188 * C505 +
           ((C1280 - C1279 + C1282 - C1281 + C1284 - C1283) * C1067 +
            (C1286 - C1285 + C1288 - C1287 + C1290 - C1289) * C1061 +
            (C1292 - C1291 + C1294 - C1293 + C1296 - C1295) * C1068 +
            (C1298 - C1297 + C1300 - C1299 + C1302 - C1301) * C1062 +
            (C48529 * C271 - C1064 * C262 + C48517 * C586 - C1065 * C578 +
             C48494 * C1272 - C1066 * C1265) *
                C1069 +
            (C48529 * C280 - C1064 * C272 + C48517 * C593 - C1065 * C587 +
             C48494 * C1277 - C1066 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C48188 * C505 +
           ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C48188 * C505 +
           ((C7938 - C7937 + C7940 - C7939 + C7942 - C7941) * C7741 +
            (C7944 - C7943 + C7946 - C7945 + C7948 - C7947) * C48526 +
            (C7950 - C7949 + C7952 - C7951 + C7954 - C7953) * C7742 +
            (C7956 - C7955 + C7958 - C7957 + C7960 - C7959) * C48513 +
            (C7732 * C271 - C7738 * C262 + C7733 * C586 - C7739 * C578 +
             C48494 * C1272 - C7740 * C1265) *
                C7743 +
            (C7732 * C280 - C7738 * C272 + C7733 * C593 - C7739 * C587 +
             C48494 * C1277 - C7740 * C1273) *
                C48481) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C48188 * C48489) *
              C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C48188 * C505 +
           ((C8996 * C267 - C9002 * C260 + C8997 * C582 - C9003 * C576 +
             C8998 * C1268 - C9004 * C1263 + C8999 * C1749 - C9005 * C1745 +
             C9000 * C9094 - C9006 * C9091) *
                C9007 +
            (C8996 * C278 - C9002 * C268 + C8997 * C591 - C9003 * C583 +
             C8998 * C1275 - C9004 * C1269 + C8999 * C1754 - C9005 * C1750 +
             C9000 * C9097 - C9006 * C9095) *
                C48102) *
               C48217 * C48188 * C48489) *
              C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C48188 * C571 +
          ((C113 * C259 - C48199 * C265) * C114 +
           (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48217 * C48188 * C572 +
          ((C48199 * C580 - C113 * C575) * C114 +
           (C48199 * C590 - C113 * C581) * C102 +
           (C48199 * C582 - C113 * C576) * C115 +
           (C48199 * C591 - C113 * C583) * C103 +
           (C48199 * C584 - C113 * C577) * C116 +
           (C48199 * C592 - C113 * C585) * C104 +
           (C48199 * C586 - C113 * C578) * C117 +
           (C48199 * C593 - C113 * C587) * C105 +
           (C48199 * C588 - C113 * C579) * C118 +
           (C48199 * C594 - C113 * C589) * C106) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C48188 * C571 +
          ((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
            C1066 * C1262 - C48494 * C1266) *
               C1067 +
           (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
            C1066 * C1267 - C48494 * C1274) *
               C1061 +
           (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
           (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
           (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
           (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
              C48217 * C48188 * C572 +
          ((C48529 * C580 - C1064 * C575 + C48517 * C1266 - C1065 * C1262 +
            C48494 * C1747 - C1066 * C1744) *
               C1067 +
           (C48529 * C590 - C1064 * C581 + C48517 * C1274 - C1065 * C1267 +
            C48494 * C1753 - C1066 * C1748) *
               C1061 +
           (C48529 * C582 - C1064 * C576 + C48517 * C1268 - C1065 * C1263 +
            C48494 * C1749 - C1066 * C1745) *
               C1068 +
           (C48529 * C591 - C1064 * C583 + C48517 * C1275 - C1065 * C1269 +
            C48494 * C1754 - C1066 * C1750) *
               C1062 +
           (C48529 * C584 - C1064 * C577 + C48517 * C1270 - C1065 * C1264 +
            C48494 * C1751 - C1066 * C1746) *
               C1069 +
           (C48529 * C592 - C1064 * C585 + C48517 * C1276 - C1065 * C1271 +
            C48494 * C1755 - C1066 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C48188 * C571 +
          ((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
            C7740 * C1262 - C48494 * C1266) *
               C7741 +
           (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
            C7740 * C1267 - C48494 * C1274) *
               C48526 +
           (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
           (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
           (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
           (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
              C48217 * C48188 * C572 +
          ((C7732 * C580 - C7738 * C575 + C7733 * C1266 - C7739 * C1262 +
            C48494 * C1747 - C7740 * C1744) *
               C7741 +
           (C7732 * C590 - C7738 * C581 + C7733 * C1274 - C7739 * C1267 +
            C48494 * C1753 - C7740 * C1748) *
               C48526 +
           (C7732 * C582 - C7738 * C576 + C7733 * C1268 - C7739 * C1263 +
            C48494 * C1749 - C7740 * C1745) *
               C7742 +
           (C7732 * C591 - C7738 * C583 + C7733 * C1275 - C7739 * C1269 +
            C48494 * C1754 - C7740 * C1750) *
               C48513 +
           (C7732 * C584 - C7738 * C577 + C7733 * C1270 - C7739 * C1264 +
            C48494 * C1751 - C7740 * C1746) *
               C7743 +
           (C7732 * C592 - C7738 * C585 + C7733 * C1276 - C7739 * C1271 +
            C48494 * C1755 - C7740 * C1752) *
               C48481) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C48188 * C571 +
          ((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
            C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
            C9006 * C9090 - C9000 * C9092) *
               C9007 +
           (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
            C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
            C9006 * C9093 - C9000 * C9096) *
               C48102) *
              C48217 * C48188 * C572 +
          ((C8996 * C580 - C9002 * C575 + C8997 * C1266 - C9003 * C1262 +
            C8998 * C1747 - C9004 * C1744 + C8999 * C9092 - C9005 * C9090 +
            C9000 * C9333 - C9006 * C9332) *
               C9007 +
           (C8996 * C590 - C9002 * C581 + C8997 * C1274 - C9003 * C1267 +
            C8998 * C1753 - C9004 * C1748 + C8999 * C9096 - C9005 * C9093 +
            C9000 * C9335 - C9006 * C9334) *
               C48102) *
              C48217 * C48188 * C573) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C381 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C505 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C381 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C381 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C381 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C381 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C505 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C381 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C381 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C505 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C381 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48217 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48199 * C399 - C113 * C388) * C118 +
            (C48199 * C406 - C113 * C400) * C106) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C1072 - C1071 + C1074 - C1073 + C1076 - C1075) * C1067 +
            (C1078 - C1077 + C1080 - C1079 + C1082 - C1081) * C1061 +
            (C1084 - C1083 + C1086 - C1085 + C1088 - C1087) * C1068 +
            (C1090 - C1089 + C1092 - C1091 + C1094 - C1093) * C1062 +
            (C1095 - C1096 + C1097 - C1098 + C1099 - C1100) * C1069 +
            (C1101 - C1102 + C1103 - C1104 + C1105 - C1106) * C48481) *
               C48217 * C779 +
           ((C1466 - C1465 + C1468 - C1467 + C1470 - C1469) * C1067 +
            (C1472 - C1471 + C1474 - C1473 + C1476 - C1475) * C1061 +
            (C1478 - C1477 + C1480 - C1479 + C1482 - C1481) * C1068 +
            (C1484 - C1483 + C1486 - C1485 + C1488 - C1487) * C1062 +
            (C48529 * C395 - C1064 * C386 + C48517 * C688 - C1065 * C680 +
             C48494 * C1458 - C1066 * C1451) *
                C1069 +
            (C48529 * C404 - C1064 * C396 + C48517 * C695 - C1065 * C689 +
             C48494 * C1463 - C1066 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C7746 - C7745 + C7748 - C7747 + C7750 - C7749) * C7741 +
            (C7752 - C7751 + C7754 - C7753 + C7756 - C7755) * C48526 +
            (C7758 - C7757 + C7760 - C7759 + C7762 - C7761) * C7742 +
            (C7764 - C7763 + C7766 - C7765 + C7768 - C7767) * C48513 +
            (C7769 - C7770 + C7771 - C7772 + C7773 - C7774) * C7743 +
            (C7775 - C7776 + C7777 - C7778 + C7779 - C7780) * C48481) *
               C48217 * C779 +
           ((C8108 - C8107 + C8110 - C8109 + C8112 - C8111) * C7741 +
            (C8114 - C8113 + C8116 - C8115 + C8118 - C8117) * C48526 +
            (C8120 - C8119 + C8122 - C8121 + C8124 - C8123) * C7742 +
            (C8126 - C8125 + C8128 - C8127 + C8130 - C8129) * C48513 +
            (C7732 * C395 - C7738 * C386 + C7733 * C688 - C7739 * C680 +
             C48494 * C1458 - C7740 * C1451) *
                C7743 +
            (C7732 * C404 - C7738 * C396 + C7733 * C695 - C7739 * C689 +
             C48494 * C1463 - C7740 * C1459) *
                C48481) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C48171 * C507 +
          (((C9002 * C120 - C8996 * C128 + C9003 * C260 - C8997 * C267 +
             C9004 * C576 - C8998 * C582 + C9005 * C1263 - C8999 * C1268 +
             C9006 * C1745 - C9000 * C1749) *
                C9007 +
            (C9002 * C129 - C8996 * C141 + C9003 * C268 - C8997 * C278 +
             C9004 * C583 - C8998 * C591 + C9005 * C1269 - C8999 * C1275 +
             C9006 * C1750 - C9000 * C1754) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C391 - C9002 * C384 + C8997 * C684 - C9003 * C678 +
             C8998 * C1454 - C9004 * C1449 + C8999 * C1907 - C9005 * C1903 +
             C9000 * C9184 - C9006 * C9181) *
                C9007 +
            (C8996 * C402 - C9002 * C392 + C8997 * C693 - C9003 * C685 +
             C8998 * C1461 - C9004 * C1455 + C8999 * C1912 - C9005 * C1908 +
             C9000 * C9187 - C9006 * C9185) *
                C48102) *
               C48217 * C48491) *
              C48171 * C48487)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48199 * C126 - C113 * C119) * C114 +
            (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48217 * C779 +
           ((C113 * C383 - C48199 * C389) * C114 +
            (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48217 * C48491) *
              C255 +
          (((C113 * C259 - C48199 * C265) * C114 +
            (C113 * C266 - C48199 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48217 * C779 +
           ((C48199 * C682 - C113 * C677) * C114 +
            (C48199 * C692 - C113 * C683) * C102 +
            (C48199 * C684 - C113 * C678) * C115 +
            (C48199 * C693 - C113 * C685) * C103 +
            (C48199 * C686 - C113 * C679) * C116 +
            (C48199 * C694 - C113 * C687) * C104 +
            (C48199 * C688 - C113 * C680) * C117 +
            (C48199 * C695 - C113 * C689) * C105 +
            (C48199 * C690 - C113 * C681) * C118 +
            (C48199 * C696 - C113 * C691) * C106) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
             C48494 * C580 - C1066 * C575) *
                C1067 +
            (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
             C48494 * C590 - C1066 * C581) *
                C1061 +
            (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
            (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
            C1115 * C1069 + C1116 * C48481) *
               C48217 * C779 +
           ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
             C1066 * C1448 - C48494 * C1452) *
                C1067 +
            (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
             C1066 * C1453 - C48494 * C1460) *
                C1061 +
            (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
            (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
            (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
            (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C1064 * C259 - C48529 * C265 + C1065 * C575 - C48517 * C580 +
             C1066 * C1262 - C48494 * C1266) *
                C1067 +
            (C1064 * C266 - C48529 * C277 + C1065 * C581 - C48517 * C590 +
             C1066 * C1267 - C48494 * C1274) *
                C1061 +
            (C1279 - C1280 + C1281 - C1282 + C1283 - C1284) * C1068 +
            (C1285 - C1286 + C1287 - C1288 + C1289 - C1290) * C1062 +
            (C1291 - C1292 + C1293 - C1294 + C1295 - C1296) * C1069 +
            (C1297 - C1298 + C1299 - C1300 + C1301 - C1302) * C48481) *
               C48217 * C779 +
           ((C48529 * C682 - C1064 * C677 + C48517 * C1452 - C1065 * C1448 +
             C48494 * C1905 - C1066 * C1902) *
                C1067 +
            (C48529 * C692 - C1064 * C683 + C48517 * C1460 - C1065 * C1453 +
             C48494 * C1911 - C1066 * C1906) *
                C1061 +
            (C48529 * C684 - C1064 * C678 + C48517 * C1454 - C1065 * C1449 +
             C48494 * C1907 - C1066 * C1903) *
                C1068 +
            (C48529 * C693 - C1064 * C685 + C48517 * C1461 - C1065 * C1455 +
             C48494 * C1912 - C1066 * C1908) *
                C1062 +
            (C48529 * C686 - C1064 * C679 + C48517 * C1456 - C1065 * C1450 +
             C48494 * C1909 - C1066 * C1904) *
                C1069 +
            (C48529 * C694 - C1064 * C687 + C48517 * C1462 - C1065 * C1457 +
             C48494 * C1913 - C1066 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
             C48494 * C580 - C7740 * C575) *
                C7741 +
            (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
             C48494 * C590 - C7740 * C581) *
                C48526 +
            (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
            (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
            C7789 * C7743 + C7790 * C48481) *
               C48217 * C779 +
           ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
             C7740 * C1448 - C48494 * C1452) *
                C7741 +
            (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
             C7740 * C1453 - C48494 * C1460) *
                C48526 +
            (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
            (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
            (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
            (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
               C48217 * C48491) *
              C255 +
          (((C7738 * C259 - C7732 * C265 + C7739 * C575 - C7733 * C580 +
             C7740 * C1262 - C48494 * C1266) *
                C7741 +
            (C7738 * C266 - C7732 * C277 + C7739 * C581 - C7733 * C590 +
             C7740 * C1267 - C48494 * C1274) *
                C48526 +
            (C7937 - C7938 + C7939 - C7940 + C7941 - C7942) * C7742 +
            (C7943 - C7944 + C7945 - C7946 + C7947 - C7948) * C48513 +
            (C7949 - C7950 + C7951 - C7952 + C7953 - C7954) * C7743 +
            (C7955 - C7956 + C7957 - C7958 + C7959 - C7960) * C48481) *
               C48217 * C779 +
           ((C7732 * C682 - C7738 * C677 + C7733 * C1452 - C7739 * C1448 +
             C48494 * C1905 - C7740 * C1902) *
                C7741 +
            (C7732 * C692 - C7738 * C683 + C7733 * C1460 - C7739 * C1453 +
             C48494 * C1911 - C7740 * C1906) *
                C48526 +
            (C7732 * C684 - C7738 * C678 + C7733 * C1454 - C7739 * C1449 +
             C48494 * C1907 - C7740 * C1903) *
                C7742 +
            (C7732 * C693 - C7738 * C685 + C7733 * C1461 - C7739 * C1455 +
             C48494 * C1912 - C7740 * C1908) *
                C48513 +
            (C7732 * C686 - C7738 * C679 + C7733 * C1456 - C7739 * C1450 +
             C48494 * C1909 - C7740 * C1904) *
                C7743 +
            (C7732 * C694 - C7738 * C687 + C7733 * C1462 - C7739 * C1457 +
             C48494 * C1913 - C7740 * C1910) *
                C48481) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
             C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
             C9000 * C1747 - C9006 * C1744) *
                C9007 +
            (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
             C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
             C9000 * C1753 - C9006 * C1748) *
                C48102) *
               C48217 * C779 +
           ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
             C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
             C9006 * C9180 - C9000 * C9182) *
                C9007 +
            (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
             C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
             C9006 * C9183 - C9000 * C9186) *
                C48102) *
               C48217 * C48491) *
              C255 +
          (((C9002 * C259 - C8996 * C265 + C9003 * C575 - C8997 * C580 +
             C9004 * C1262 - C8998 * C1266 + C9005 * C1744 - C8999 * C1747 +
             C9006 * C9090 - C9000 * C9092) *
                C9007 +
            (C9002 * C266 - C8996 * C277 + C9003 * C581 - C8997 * C590 +
             C9004 * C1267 - C8998 * C1274 + C9005 * C1748 - C8999 * C1753 +
             C9006 * C9093 - C9000 * C9096) *
                C48102) *
               C48217 * C779 +
           ((C8996 * C682 - C9002 * C677 + C8997 * C1452 - C9003 * C1448 +
             C8998 * C1905 - C9004 * C1902 + C8999 * C9182 - C9005 * C9180 +
             C9000 * C9419 - C9006 * C9418) *
                C9007 +
            (C8996 * C692 - C9002 * C683 + C8997 * C1460 - C9003 * C1453 +
             C8998 * C1911 - C9004 * C1906 + C8999 * C9186 - C9005 * C9183 +
             C9000 * C9421 - C9006 * C9420) *
                C48102) *
               C48217 * C48491) *
              C48489) *
         C48137) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48199 * C126 - C113 * C119) * C114 +
           (C48199 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48217 * C925 +
          ((C113 * C383 - C48199 * C389) * C114 +
           (C113 * C390 - C48199 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48217 * C926 +
          ((C48199 * C933 - C113 * C928) * C114 +
           (C48199 * C943 - C113 * C934) * C102 +
           (C48199 * C935 - C113 * C929) * C115 +
           (C48199 * C944 - C113 * C936) * C103 +
           (C48199 * C937 - C113 * C930) * C116 +
           (C48199 * C945 - C113 * C938) * C104 +
           (C48199 * C939 - C113 * C931) * C117 +
           (C48199 * C946 - C113 * C940) * C105 +
           (C48199 * C941 - C113 * C932) * C118 +
           (C48199 * C947 - C113 * C942) * C106) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48529 * C126 - C1064 * C119 + C48517 * C265 - C1065 * C259 +
            C48494 * C580 - C1066 * C575) *
               C1067 +
           (C48529 * C140 - C1064 * C127 + C48517 * C277 - C1065 * C266 +
            C48494 * C590 - C1066 * C581) *
               C1061 +
           (C1071 - C1072 + C1073 - C1074 + C1075 - C1076) * C1068 +
           (C1077 - C1078 + C1079 - C1080 + C1081 - C1082) * C1062 +
           C1115 * C1069 + C1116 * C48481) *
              C48217 * C925 +
          ((C1064 * C383 - C48529 * C389 + C1065 * C677 - C48517 * C682 +
            C1066 * C1448 - C48494 * C1452) *
               C1067 +
           (C1064 * C390 - C48529 * C401 + C1065 * C683 - C48517 * C692 +
            C1066 * C1453 - C48494 * C1460) *
               C1061 +
           (C1465 - C1466 + C1467 - C1468 + C1469 - C1470) * C1068 +
           (C1471 - C1472 + C1473 - C1474 + C1475 - C1476) * C1062 +
           (C1477 - C1478 + C1479 - C1480 + C1481 - C1482) * C1069 +
           (C1483 - C1484 + C1485 - C1486 + C1487 - C1488) * C48481) *
              C48217 * C926 +
          ((C48529 * C933 - C1064 * C928 + C48517 * C2322 - C1065 * C2316 +
            C48494 * C2323 - C1066 * C2317) *
               C1067 +
           (C48529 * C943 - C1064 * C934 + C48517 * C2334 - C1065 * C2324 +
            C48494 * C2335 - C1066 * C2325) *
               C1061 +
           (C48529 * C935 - C1064 * C929 + C48517 * C2326 - C1065 * C2318 +
            C48494 * C2327 - C1066 * C2319) *
               C1068 +
           (C48529 * C944 - C1064 * C936 + C48517 * C2336 - C1065 * C2328 +
            C48494 * C2337 - C1066 * C2329) *
               C1062 +
           (C48529 * C937 - C1064 * C930 + C48517 * C2330 - C1065 * C2320 +
            C48494 * C2331 - C1066 * C2321) *
               C1069 +
           (C48529 * C945 - C1064 * C938 + C48517 * C2338 - C1065 * C2332 +
            C48494 * C2339 - C1066 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7732 * C126 - C7738 * C119 + C7733 * C265 - C7739 * C259 +
            C48494 * C580 - C7740 * C575) *
               C7741 +
           (C7732 * C140 - C7738 * C127 + C7733 * C277 - C7739 * C266 +
            C48494 * C590 - C7740 * C581) *
               C48526 +
           (C7745 - C7746 + C7747 - C7748 + C7749 - C7750) * C7742 +
           (C7751 - C7752 + C7753 - C7754 + C7755 - C7756) * C48513 +
           C7789 * C7743 + C7790 * C48481) *
              C48217 * C925 +
          ((C7738 * C383 - C7732 * C389 + C7739 * C677 - C7733 * C682 +
            C7740 * C1448 - C48494 * C1452) *
               C7741 +
           (C7738 * C390 - C7732 * C401 + C7739 * C683 - C7733 * C692 +
            C7740 * C1453 - C48494 * C1460) *
               C48526 +
           (C8107 - C8108 + C8109 - C8110 + C8111 - C8112) * C7742 +
           (C8113 - C8114 + C8115 - C8116 + C8117 - C8118) * C48513 +
           (C8119 - C8120 + C8121 - C8122 + C8123 - C8124) * C7743 +
           (C8125 - C8126 + C8127 - C8128 + C8129 - C8130) * C48481) *
              C48217 * C926 +
          ((C7732 * C933 - C7738 * C928 + C7733 * C2322 - C7739 * C2316 +
            C48494 * C2323 - C7740 * C2317) *
               C7741 +
           (C7732 * C943 - C7738 * C934 + C7733 * C2334 - C7739 * C2324 +
            C48494 * C2335 - C7740 * C2325) *
               C48526 +
           (C7732 * C935 - C7738 * C929 + C7733 * C2326 - C7739 * C2318 +
            C48494 * C2327 - C7740 * C2319) *
               C7742 +
           (C7732 * C944 - C7738 * C936 + C7733 * C2336 - C7739 * C2328 +
            C48494 * C2337 - C7740 * C2329) *
               C48513 +
           (C7732 * C937 - C7738 * C930 + C7733 * C2330 - C7739 * C2320 +
            C48494 * C2331 - C7740 * C2321) *
               C7743 +
           (C7732 * C945 - C7738 * C938 + C7733 * C2338 - C7739 * C2332 +
            C48494 * C2339 - C7740 * C2333) *
               C48481) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C8996 * C126 - C9002 * C119 + C8997 * C265 - C9003 * C259 +
            C8998 * C580 - C9004 * C575 + C8999 * C1266 - C9005 * C1262 +
            C9000 * C1747 - C9006 * C1744) *
               C9007 +
           (C8996 * C140 - C9002 * C127 + C8997 * C277 - C9003 * C266 +
            C8998 * C590 - C9004 * C581 + C8999 * C1274 - C9005 * C1267 +
            C9000 * C1753 - C9006 * C1748) *
               C48102) *
              C48217 * C925 +
          ((C9002 * C383 - C8996 * C389 + C9003 * C677 - C8997 * C682 +
            C9004 * C1448 - C8998 * C1452 + C9005 * C1902 - C8999 * C1905 +
            C9006 * C9180 - C9000 * C9182) *
               C9007 +
           (C9002 * C390 - C8996 * C401 + C9003 * C683 - C8997 * C692 +
            C9004 * C1453 - C8998 * C1460 + C9005 * C1906 - C8999 * C1911 +
            C9006 * C9183 - C9000 * C9186) *
               C48102) *
              C48217 * C926 +
          ((C8996 * C933 - C9002 * C928 + C8997 * C2322 - C9003 * C2316 +
            C8998 * C2323 - C9004 * C2317 + C8999 * C9650 - C9005 * C9648 +
            C9000 * C9651 - C9006 * C9649) *
               C9007 +
           (C8996 * C943 - C9002 * C934 + C8997 * C2334 - C9003 * C2324 +
            C8998 * C2335 - C9004 * C2325 + C8999 * C9654 - C9005 * C9652 +
            C9000 * C9655 - C9006 * C9653) *
               C48102) *
              C48217 * C927) *
         C48171 * C48137) /
            (p * q * std::sqrt(p + q));
}
