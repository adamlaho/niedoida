/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_xz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_13(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47184 = 0 * ae;
    const double C47183 = ae * be;
    const double C47182 = 0 * be;
    const double C47181 = 0 * be;
    const double C47180 = ae + be;
    const double C47179 = 0 * be;
    const double C47178 = xA - xB;
    const double C47239 = 0 * be;
    const double C47264 = 0 * be;
    const double C47263 = zA - zB;
    const double C47319 = 0 * ae;
    const double C47314 = 0 * be;
    const double C47313 = 0 * be;
    const double C47364 = 0 * be;
    const double C47424 = xP - xQ;
    const double C47423 = zP - zQ;
    const double C47422 = p + q;
    const double C47421 = p * q;
    const double C47429 = bs[3];
    const double C47439 = bs[4];
    const double C47448 = bs[5];
    const double C47462 = bs[6];
    const double C47484 = bs[7];
    const double C47554 = yP - yQ;
    const double C47802 = bs[2];
    const double C119 = bs[0];
    const double C48244 = ce + de;
    const double C48243 = ce * de;
    const double C48242 = xC - xD;
    const double C48257 = yC - yD;
    const double C48266 = zC - zD;
    const double C48313 = yA - yB;
    const double C47191 = C47184 / C47180;
    const double C47188 = C47182 / C47180;
    const double C47186 = 2 * C47180;
    const double C47185 = std::pow(C47180, 2);
    const double C47190 = C47183 * C47178;
    const double C47189 = C47178 * C47182;
    const double C47187 = C47178 * C47181;
    const double C48210 = C47178 * be;
    const double C48209 = C47178 * ae;
    const double C48208 = std::pow(C47178, 2);
    const double C47240 = C47239 / C47180;
    const double C47315 = C47264 / C47180;
    const double C47265 = C47183 * C47263;
    const double C47316 = C47263 * C47264;
    const double C48325 = std::pow(C47263, 2);
    const double C48408 = C47263 * be;
    const double C48406 = C47263 * ae;
    const double C47326 = C47319 / C47180;
    const double C47321 = C47263 * C47314;
    const double C47365 = C47364 / C47180;
    const double C47449 = std::pow(C47424, 2);
    const double C47515 = C47424 * ae;
    const double C47431 = C47423 * be;
    const double C47430 = C47424 * C47423;
    const double C47647 = std::pow(C47423, 2);
    const double C47425 = 2 * C47421;
    const double C47603 = std::pow(C47554, 2);
    const double C48254 = 2 * C48244;
    const double C48563 = std::pow(C48244, 2);
    const double C48245 = std::pow(C48242, 2);
    const double C48562 = C48242 * de;
    const double C48561 = C48242 * ce;
    const double C48279 = std::pow(C48257, 2);
    const double C48567 = C48257 * de;
    const double C48565 = C48257 * ce;
    const double C48296 = std::pow(C48266, 2);
    const double C48568 = C48266 * de;
    const double C48566 = C48266 * ce;
    const double C48314 = std::pow(C48313, 2);
    const double C48368 = C48313 * be;
    const double C48366 = C48313 * ae;
    const double C48222 = std::pow(C47186, -1);
    const double C48556 = std::pow(C47186, -2);
    const double C47192 = 2 * C47185;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (zP - zQ) * ae * be) /
                        C47185;
    const double C48560 = C47185 * C47186;
    const double C48559 = 4 * C47185;
    const double C47194 = C47189 / C47180;
    const double C47193 = C47187 / C47180;
    const double C48549 = std::pow(C48209, 2);
    const double C48211 = C48208 * C47183;
    const double C47324 = C47316 / C47180;
    const double C48326 = C48325 * C47183;
    const double C48571 = std::pow(C48406, 2);
    const double C47327 = C47321 / C47180;
    const double C47518 = C47439 * C47515;
    const double C47522 = C47448 * C47515;
    const double C47532 = C47462 * C47515;
    const double C47560 = C47429 * C47515;
    const double C47580 = C47484 * C47515;
    const double C47434 = C47429 * C47431;
    const double C47441 = C47439 * C47431;
    const double C47451 = C47448 * C47431;
    const double C47466 = C47462 * C47431;
    const double C47490 = C47484 * C47431;
    const double C47433 = C47430 * ae;
    const double C47426 = C47425 / C47422;
    const double C126 = (-(bs[1] * C47431 * C47425) / C47422) / C47180;
    const double C127 = (-(bs[1] * C47515 * C47425) / C47422) / C47180;
    const double C120 = -(C47424 * bs[1] * C47425) / C47422;
    const double C259 = -(C47554 * bs[1] * C47425) / C47422;
    const double C383 = -(C47423 * bs[1] * C47425) / C47422;
    const double C48564 = std::pow(C48254, -1);
    const double C48598 = 2 * C48563;
    const double C48246 = C48245 * C48243;
    const double C48280 = C48279 * C48243;
    const double C48297 = C48296 * C48243;
    const double C48315 = C48314 * C47183;
    const double C48569 = std::pow(C48366, 2);
    const double C47201 = C47182 / C47192;
    const double C47198 = C47181 / C47192;
    const double C47197 = C47179 / C47192;
    const double C47318 = C47264 / C47192;
    const double C47323 = C47314 / C47192;
    const double C47322 = C47313 / C47192;
    const double C48596 = 4 * C48560;
    const double C48595 = C47180 * C48559;
    const double C47199 = 0 - C47194;
    const double C47196 = 0 - C47193;
    const double C48212 = C48211 / C47180;
    const double C47328 = 0 - C47324;
    const double C48327 = C48326 / C47180;
    const double C47331 = 0 - C47327;
    const double C47435 = C47433 * be;
    const double C47428 = -C47426;
    const double C47438 = std::pow(C47426, 4);
    const double C47461 = std::pow(C47426, 6);
    const double C141 =
        (ae * std::pow(C47426, 2) * bs[2] * C47423 * be +
         C47424 * std::pow(-C47426, 3) * bs[3] * C47424 * C47423 * ae * be) /
        C47185;
    const double C47801 = std::pow(C47426, 2);
    const double C128 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47431) / C47180;
    const double C129 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47515) / C47180 -
        (ae * bs[1] * C47425) / (C47422 * C47180);
    const double C48247 = C48246 / C48244;
    const double C48281 = C48280 / C48244;
    const double C48298 = C48297 / C48244;
    const double C48316 = C48315 / C47180;
    const double C47204 = C47199 * ae;
    const double C47203 = C47196 * ae;
    const double C48213 = -C48212;
    const double C47332 = C47328 * ae;
    const double C48328 = -C48327;
    const double C47335 = C47331 * ae;
    const double C47440 = C47439 * C47435;
    const double C47450 = C47448 * C47435;
    const double C47464 = C47462 * C47435;
    const double C47488 = C47484 * C47435;
    const double C47432 = std::pow(C47428, 3);
    const double C47447 = std::pow(C47428, 5);
    const double C47483 = std::pow(C47428, 7);
    const double C47443 = C47438 * C47441;
    const double C47519 = C47439 * C47438;
    const double C47520 = C47438 * C47518;
    const double C47469 = C47461 * C47466;
    const double C47535 = C47462 * C47461;
    const double C47536 = C47461 * C47532;
    const double C47803 = C47802 * C47801;
    const double C265 = (C47554 * C47801 * C47802 * C47431) / C47180;
    const double C266 = (C47554 * C47801 * C47802 * C47515) / C47180;
    const double C389 = (C47423 * C47801 * C47802 * C47431) / C47180 -
                        (be * bs[1] * C47425) / (C47422 * C47180);
    const double C390 = (C47423 * C47801 * C47802 * C47515) / C47180;
    const double C48248 = -C48247;
    const double C48282 = -C48281;
    const double C48299 = -C48298;
    const double C48317 = -C48316;
    const double C47208 = C47204 / C47180;
    const double C47207 = C47203 / C47180;
    const double C48214 = std::exp(C48213);
    const double C47336 = C47332 / C47180;
    const double C48329 = std::exp(C48328);
    const double C47339 = C47335 / C47180;
    const double C47442 = C47438 * C47440;
    const double C47468 = C47461 * C47464;
    const double C47436 = C47432 * C47434;
    const double C47516 = C47429 * C47432;
    const double C47561 = C47432 * C47560;
    const double C277 = ((yP - yQ) * C47432 * C47429 * C47435) / C47185;
    const double C401 = (be * std::pow(C47426, 2) * bs[2] * C47424 * ae +
                         C47423 * C47432 * C47429 * C47435) /
                        C47185;
    const double C47453 = C47447 * C47451;
    const double C47452 = C47447 * C47450;
    const double C47525 = C47448 * C47447;
    const double C47526 = C47447 * C47522;
    const double C47493 = C47483 * C47490;
    const double C47492 = C47483 * C47488;
    const double C47585 = C47483 * C47580;
    const double C47446 = ae * C47443;
    const double C47445 = C47424 * C47443;
    const double C47936 = C47554 * C47443;
    const double C47948 = C47423 * C47443;
    const double C47524 = C47424 * C47519;
    const double C47523 = C47519 * ae;
    const double C47809 = C47519 * C47449;
    const double C47913 = C47519 * C47603;
    const double C47937 = C47554 * C47519;
    const double C47951 = C47519 * C47647;
    const double C48053 = C47423 * C47519;
    const double C48052 = C47519 * be;
    const double C47563 = C47424 * C47520;
    const double C47614 = C47554 * C47520;
    const double C47645 = be * C47520;
    const double C47644 = C47423 * C47520;
    const double C47471 = C47469 * C47449;
    const double C47482 = ae * C47469;
    const double C47481 = C47424 * C47469;
    const double C47985 = C47469 * C47603;
    const double C48081 = C47554 * C47469;
    const double C48099 = C47423 * C47469;
    const double C47538 = C47535 * C47449;
    const double C47582 = C47424 * C47535;
    const double C47581 = C47535 * ae;
    const double C48003 = C47535 * C47603;
    const double C48084 = C47554 * C47535;
    const double C48103 = C47535 * C47647;
    const double C47540 = C47424 * C47536;
    const double C47681 = C47536 * C47603;
    const double C47689 = C47554 * C47536;
    const double C47733 = C47536 * C47647;
    const double C47777 = be * C47536;
    const double C47776 = C47423 * C47536;
    const double C121 = C47803 * C47449 - (bs[1] * C47425) / C47422;
    const double C260 = C47554 * C47424 * C47803;
    const double C384 = C47423 * C47424 * C47803;
    const double C575 = C47803 * C47603 - (bs[1] * C47425) / C47422;
    const double C677 = C47423 * C47554 * C47803;
    const double C928 = C47803 * C47647 - (bs[1] * C47425) / C47422;
    const double C48249 = std::exp(C48248);
    const double C48283 = std::exp(C48282);
    const double C48300 = std::exp(C48299);
    const double C48318 = std::exp(C48317);
    const double C47212 = C47208 - C47198;
    const double C47211 = C47207 - C47197;
    const double C47195 = C47190 * C48214;
    const double C48216 = C48214 * C48209;
    const double C48215 = C48214 / C47186;
    const double C48224 = C48222 * C48214;
    const double C48552 = C48214 * C48210;
    const double C48593 = C48556 * C48214;
    const double C48587 = C48214 * C48549;
    const double C47340 = C47336 - C47323;
    const double C150 = C48329 * C141;
    const double C148 = C48329 * C128;
    const double C1246 = C48329 * C265;
    const double C47266 = C47265 * C48329;
    const double C113 = -(2 * ae * be * (zA - zB) * C48329) / (ae + be);
    const double C48407 = C48329 / C47186;
    const double C48409 = C48329 * C48406;
    const double C48416 = C48222 * C48329;
    const double C48581 = C48329 * C48408;
    const double C48609 = C48556 * C48329;
    const double C48607 = C48329 * C48571;
    const double C47343 = C47339 - C47322;
    const double C590 =
        (C47432 * C47429 * C47435 + C47442 * std::pow(yP - yQ, 2)) / C47185;
    const double C692 =
        (be * C47554 * C47432 * C47429 * C47515 + C47423 * C47554 * C47442) /
        C47185;
    const double C47470 = C47424 * C47468;
    const double C47666 = C47468 * C47603;
    const double C47674 = C47554 * C47468;
    const double C47732 = C47423 * C47468;
    const double C142 = (C47432 * C47429 * C47435 + ae * C47424 * C47436 +
                         C47424 * (ae * C47436 + C47424 * std::pow(C47426, 4) *
                                                     bs[4] * C47435)) /
                        C47185;
    const double C143 =
        (2 * (ae * C47436 + C47424 * C47442) +
         ae * (C47436 + C47443 * std::pow(C47424, 2)) +
         C47424 * (C47442 + ae * C47424 * C47443 +
                   C47424 * (ae * C47443 +
                             C47424 * std::pow(C47428, 5) * bs[5] * C47435))) /
        C47185;
    const double C278 = ((yP - yQ) * (ae * C47436 + C47424 * C47442)) / C47185;
    const double C402 = (be * (C47424 * C47432 * C47429 * C47424 * ae +
                               bs[2] * std::pow(C47426, 2) * ae) +
                         C47423 * (ae * C47436 + C47424 * C47442)) /
                        C47185;
    const double C130 =
        (std::pow(C47426, 2) * bs[2] * C47431 + C47436 * C47449) / C47180;
    const double C132 =
        (2 * C47424 * C47436 + C47424 * (C47436 + C47443 * C47449)) / C47180;
    const double C267 = (C47554 * C47424 * C47436) / C47180;
    const double C269 = (C47554 * (C47436 + C47443 * C47449)) / C47180;
    const double C391 =
        (C47423 * C47424 * C47436 + C47424 * C47803 * be) / C47180;
    const double C580 = (C47801 * C47802 * C47431 + C47436 * C47603) / C47180;
    const double C682 =
        (C47423 * C47554 * C47436 + C47554 * C47803 * be) / C47180;
    const double C933 =
        (C47801 * C47802 * C47431 + C47423 * (C47423 * C47436 + C47803 * be) +
         C47423 * C47803 * be) /
        C47180;
    const double C1233 =
        (2 * C47554 * C47436 + C47554 * (C47436 + C47443 * C47603)) / C47180;
    const double C47564 = C47516 * ae;
    const double C47808 = C47424 * C47516;
    const double C47904 = C47554 * C47516;
    const double C47950 = C47423 * C47516;
    const double C47949 = C47516 * be;
    const double C393 = (C47423 * (C47436 + C47443 * C47449) +
                         (C47803 + C47516 * C47449) * be) /
                        C47180;
    const double C1423 = (C47423 * (C47436 + C47443 * C47603) +
                          (C47803 + C47516 * C47603) * be) /
                         C47180;
    const double C2814 =
        (2 * (C47423 * C47436 + C47803 * be) +
         C47423 * (C47436 + C47423 * (C47423 * C47443 + C47516 * be) +
                   C47423 * C47516 * be) +
         (C47803 + C47516 * C47647) * be) /
        C47180;
    const double C122 =
        2 * C47424 * C47803 + C47424 * (C47803 + C47516 * C47449);
    const double C261 = C47554 * (C47803 + C47516 * C47449);
    const double C385 = C47423 * (C47803 + C47516 * C47449);
    const double C1229 =
        2 * C47554 * C47803 + C47554 * (C47803 + C47516 * C47603);
    const double C1419 = C47423 * (C47803 + C47516 * C47603);
    const double C2810 =
        2 * C47423 * C47803 + C47423 * (C47803 + C47516 * C47647);
    const double C943 = (C47432 * C47429 * C47435 + be * C47423 * C47561 +
                         C47423 * (be * C47561 + C47423 * C47442)) /
                        C47185;
    const double C131 =
        (C47801 * C47802 * C47515 + C47424 * (C47424 * C47561 + C47803 * ae) +
         C47424 * C47803 * ae) /
        C47180;
    const double C268 = (C47554 * (C47424 * C47561 + C47803 * ae)) / C47180;
    const double C392 = (C47423 * (C47424 * C47561 + C47803 * ae)) / C47180;
    const double C581 = (C47801 * C47802 * C47515 + C47561 * C47603) / C47180;
    const double C683 = (C47423 * C47554 * C47561) / C47180;
    const double C934 = (C47801 * C47802 * C47515 + C47561 * C47647) / C47180;
    const double C1234 =
        (2 * C47554 * C47561 + C47554 * (C47561 + C47520 * C47603)) / C47180;
    const double C1424 = (C47423 * (C47561 + C47520 * C47603)) / C47180;
    const double C2815 =
        (2 * C47423 * C47561 + C47423 * (C47561 + C47520 * C47647)) / C47180;
    const double C1248 = C48329 * C277;
    const double C47455 = C47453 * C47449;
    const double C47460 = ae * C47453;
    const double C47459 = C47424 * C47453;
    const double C47972 = C47453 * C47603;
    const double C47984 = C47554 * C47453;
    const double C48051 = C47423 * C47453;
    const double C1710 =
        (3 * (C47436 + C47443 * C47603) +
         C47554 * (2 * C47554 * C47443 + C47554 * (C47443 + C47453 * C47603))) /
        C47180;
    const double C1885 =
        (C47423 * (2 * C47554 * C47443 + C47554 * (C47443 + C47453 * C47603)) +
         (2 * C47554 * C47516 + C47554 * (C47516 + C47519 * C47603)) * be) /
        C47180;
    const double C47454 = C47424 * C47452;
    const double C47635 = C47554 * C47452;
    const double C47646 = C47423 * C47452;
    const double C1241 = (2 * C47554 * C47442 +
                          C47554 * (C47442 + C47452 * std::pow(C47554, 2))) /
                         C47185;
    const double C1431 = (be * (C47561 + C47520 * C47603) +
                          C47423 * (C47442 + C47452 * C47603)) /
                         C47185;
    const double C1716 =
        (3 * (C47442 + C47452 * C47603) +
         C47554 * (2 * C47554 * C47452 + C47554 * (C47452 + C47468 * C47603))) /
        C47185;
    const double C2822 = (2 * (be * C47561 + C47423 * C47442) +
                          be * (C47561 + C47520 * std::pow(C47423, 2)) +
                          C47423 * (C47442 + be * C47423 * C47520 +
                                    C47423 * (be * C47520 + C47423 * C47452))) /
                         C47185;
    const double C47527 = C47525 * C47449;
    const double C47534 = C47424 * C47525;
    const double C47533 = C47525 * ae;
    const double C47992 = C47525 * C47603;
    const double C48002 = C47554 * C47525;
    const double C48054 = C47525 * C47647;
    const double C48101 = C47423 * C47525;
    const double C48100 = C47525 * be;
    const double C47528 = C47424 * C47526;
    const double C47620 = C47526 * C47603;
    const double C47636 = C47554 * C47526;
    const double C47649 = C47526 * C47647;
    const double C47731 = be * C47526;
    const double C47730 = C47423 * C47526;
    const double C1891 =
        (be * (2 * C47554 * C47520 + C47554 * (C47520 + C47526 * C47603)) +
         C47423 * (2 * C47554 * C47452 + C47554 * (C47452 + C47468 * C47603))) /
        C47185;
    const double C47495 = C47493 * C47449;
    const double C47494 = C47424 * C47492;
    const double C47675 = C47492 * C47603;
    const double C47760 = C47554 * C47492;
    const double C47778 = C47423 * C47492;
    const double C47587 = C47424 * C47585;
    const double C47690 = C47585 * C47603;
    const double C47761 = C47554 * C47585;
    const double C47780 = C47585 * C47647;
    const double C582 = (C47424 * C47436 + C47445 * C47603) / C47180;
    const double C47568 = C47524 * ae;
    const double C47813 = 2 * C47524;
    const double C47907 = C47554 * C47524;
    const double C47958 = C47423 * C47524;
    const double C47957 = C47524 * be;
    const double C47810 = C47516 + C47809;
    const double C47914 = C47516 + C47913;
    const double C47996 = 2 * C47937;
    const double C48027 = C47423 * C47937;
    const double C48026 = C47937 * be;
    const double C47953 = C47516 + C47951;
    const double C48058 = 2 * C48053;
    const double C48056 = C48053 * be;
    const double C2322 = (C47554 * C47442 + be * C47423 * C47614 +
                          C47423 * (be * C47614 + C47423 * C47554 * C47452)) /
                         C47185;
    const double C2311 = (C47554 * C47561 + C47614 * C47647) / C47180;
    const double C47473 = C47453 + C47471;
    const double C47489 = 2 * C47481;
    const double C47487 = ae * C47481;
    const double C47976 = C47481 * C47603;
    const double C48041 = C47554 * C47481;
    const double C48066 = C47423 * C47481;
    const double C47987 = C47453 + C47985;
    const double C48085 = C47423 * C48081;
    const double C47541 = C47525 + C47538;
    const double C47586 = C47582 * ae;
    const double C48013 = C47582 * C47603;
    const double C48044 = C47554 * C47582;
    const double C48069 = C47582 * C47647;
    const double C48005 = C47525 + C48003;
    const double C48087 = C48084 * C47647;
    const double C48107 = C47525 + C48103;
    const double C47682 = C47526 + C47681;
    const double C47691 = 2 * C47689;
    const double C47710 = C47689 * C47647;
    const double C47759 = be * C47689;
    const double C47758 = C47423 * C47689;
    const double C47737 = C47526 + C47733;
    const double C47784 = 2 * C47776;
    const double C47782 = be * C47776;
    const double C48599 = C48564 * C48249;
    const double C48597 = C48249 * C48561;
    const double C257 = -(C48249 * C48562) / C48244;
    const double C48601 = C48564 * C48283;
    const double C48600 = C48283 * C48565;
    const double C505 = -(C48283 * C48567) / C48244;
    const double C48603 = C48564 * C48300;
    const double C48602 = C48300 * C48566;
    const double C779 = -(C48300 * C48568) / C48244;
    const double C48367 = C48318 / C47186;
    const double C48369 = C48318 * C48366;
    const double C48376 = C48222 * C48318;
    const double C48575 = C48318 * C48368;
    const double C48606 = C48556 * C48318;
    const double C48604 = C48318 * C48569;
    const double C47217 = C47212 / C47186;
    const double C47216 = C47178 * C47212;
    const double C47215 = C47211 + C47188;
    const double C47202 = C47195 / C47185;
    const double C47200 = 2 * C47195;
    const double C48217 = C48216 * C48210;
    const double C48223 = C48216 / C47192;
    const double C48553 = C48222 * C48216;
    const double C48551 = C48216 / C47180;
    const double C1058 = (C48214 * std::pow(C48210, 2)) / C47185 + C48215;
    const double C48225 = C48224 * C48210;
    const double C48557 = C48209 * C48224;
    const double C48555 = 2 * C48224;
    const double C48610 = C48224 / C48559;
    const double C106 = C48224 / C48596;
    const double C25911 = C48224 / C47186;
    const double C48589 = C48552 / C47180;
    const double C1059 = (-2 * C48222 * C48552) / C47180;
    const double C48623 = C48587 / C47185;
    const double C47345 = C47340 / C47186;
    const double C47344 = C47263 * C47340;
    const double C47298 = 2 * C47266;
    const double C47320 = C47266 / C47185;
    const double C2443 =
        ((0 * ae) / C47180 - C47266 / C47185) / C47186 + (0 * ae) / C47180;
    const double C4870 =
        ((C48329 - (C47263 * 2 * C47266) / C47180) * ae) / C47180 -
        C47264 / C47192;
    const double C4871 = (0 * ae) / C47180 - C47266 / C47185;
    const double C153 = C113 * C121;
    const double C151 = C113 * C129;
    const double C149 = C113 * C120;
    const double C284 = C113 * C260;
    const double C408 = C113 * C384;
    const double C1253 = C113 * C575;
    const double C1249 = C113 * C266;
    const double C1247 = C113 * C259;
    const double C1895 = C113 * C677;
    const double C14888 = (C48329 * std::pow(C48408, 2)) / C47185 + C48407;
    const double C48410 = C48409 * C48408;
    const double C48415 = C48409 / C47192;
    const double C48574 = C48409 / C47180;
    const double C48572 = C48222 * C48409;
    const double C2442 =
        (((C48329 - (C47263 * 2 * C47266) / C47180) * ae) / C47180 -
         C47264 / C47192) /
            C47186 +
        ((C47263 * ((0 * ae) / C47180 - C47266 / C47185) + C48416) * ae) /
            C47180;
    const double C48417 = C48416 * C48408;
    const double C48585 = C48406 * C48416;
    const double C48584 = 2 * C48416;
    const double C48622 = C48416 / C48559;
    const double C17441 = C48416 / C48596;
    const double C36005 = C48416 / C47186;
    const double C48618 = C48581 / C47180;
    const double C14889 = (-2 * C48222 * C48581) / C47180;
    const double C48630 = C48607 / C47185;
    const double C47349 = C47343 + C47315;
    const double C1254 = C48329 * C590;
    const double C1898 = C48329 * C692;
    const double C6293 = C48416 * C692;
    const double C31769 = C48416 * C692;
    const double C47667 = C47452 + C47666;
    const double C47676 = 2 * C47674;
    const double C47709 = C47423 * C47674;
    const double C154 = C48329 * C142;
    const double C158 = C48329 * C143;
    const double C287 = C48329 * C278;
    const double C411 = C48329 * C402;
    const double C4879 = C48416 * C402;
    const double C30345 = C48416 * C402;
    const double C152 = C48329 * C130;
    const double C156 = C48329 * C132;
    const double C285 = C48329 * C267;
    const double C289 = C48329 * C269;
    const double C409 = C48329 * C391;
    const double C4875 = C48416 * C391;
    const double C30341 = C48416 * C391;
    const double C1252 = C48329 * C580;
    const double C1896 = C48329 * C682;
    const double C6289 = C48416 * C682;
    const double C31765 = C48416 * C682;
    const double C1727 = C48329 * C1233;
    const double C47565 = C47563 + C47564;
    const double C684 =
        (C47423 * C47554 * C47445 + C47554 * C47808 * be) / C47180;
    const double C935 =
        (C47424 * C47436 + C47423 * (C47423 * C47445 + C47808 * be) +
         C47423 * C47808 * be) /
        C47180;
    const double C576 = C47424 * C47803 + C47808 * C47603;
    const double C678 = C47423 * C47554 * C47808;
    const double C929 = C47424 * C47803 + C47808 * C47647;
    const double C1230 =
        2 * C47554 * C47808 + C47554 * (C47808 + C47524 * C47603);
    const double C1420 = C47423 * (C47808 + C47524 * C47603);
    const double C2811 =
        2 * C47423 * C47808 + C47423 * (C47808 + C47524 * C47647);
    const double C2310 =
        (C47554 * C47436 + C47423 * (C47423 * C47554 * C47443 + C47904 * be) +
         C47423 * C47904 * be) /
        C47180;
    const double C3255 =
        (2 * (C47423 * C47936 + C47904 * be) +
         C47423 * (C47936 + C47423 * (C47423 * C47554 * C47453 + C47937 * be) +
                   C47423 * C47937 * be) +
         (C47904 + C47937 * C47647) * be) /
        C47180;
    const double C2304 = C47554 * C47803 + C47904 * C47647;
    const double C3252 =
        2 * C47423 * C47904 + C47423 * (C47904 + C47937 * C47647);
    const double C47952 = C47948 + C47949;
    const double C413 = C48329 * C393;
    const double C4883 = C48416 * C393;
    const double C30349 = C48416 * C393;
    const double C1900 = C48329 * C1423;
    const double C6882 = C48416 * C1423;
    const double C31777 = C48416 * C1423;
    const double C157 = C113 * C122;
    const double C288 = C113 * C261;
    const double C412 = C113 * C385;
    const double C1726 = C113 * C1229;
    const double C1899 = C113 * C1419;
    const double C155 = C113 * C131;
    const double C286 = C113 * C268;
    const double C410 = C113 * C392;
    const double C1255 = C113 * C581;
    const double C1897 = C113 * C683;
    const double C1728 = C113 * C1234;
    const double C1901 = C113 * C1424;
    const double C47457 = C47443 + C47455;
    const double C47472 = C47460 + C47470;
    const double C47465 = 2 * C47459;
    const double C47463 = ae * C47459;
    const double C47940 = C47554 * C47459;
    const double C47956 = C47423 * C47459;
    const double C1235 =
        (2 * C47554 * C47445 + C47554 * (C47445 + C47459 * C47603)) / C47180;
    const double C1425 = (C47423 * (C47445 + C47459 * C47603) +
                          (C47808 + C47524 * C47603) * be) /
                         C47180;
    const double C1712 =
        (3 * (C47445 + C47459 * C47603) +
         C47554 * (2 * C47554 * C47459 + C47554 * (C47459 + C47481 * C47603))) /
        C47180;
    const double C2816 =
        (2 * (C47423 * C47445 + C47808 * be) +
         C47423 * (C47445 + C47423 * (C47423 * C47459 + C47524 * be) +
                   C47423 * C47524 * be) +
         (C47808 + C47524 * C47647) * be) /
        C47180;
    const double C47973 = C47443 + C47972;
    const double C47986 = 2 * C47984;
    const double C48025 = C47423 * C47984;
    const double C48055 = C48051 + C48052;
    const double C9008 = C48329 * C1710;
    const double C9358 = C48329 * C1885;
    const double C12929 = C48416 * C1885;
    const double C32370 = C48416 * C1885;
    const double C47456 = C47446 + C47454;
    const double C47648 = C47645 + C47646;
    const double C1729 = C48329 * C1241;
    const double C1902 = C48329 * C1431;
    const double C6886 = C48416 * C1431;
    const double C31781 = C48416 * C1431;
    const double C9010 = C48329 * C1716;
    const double C47529 = C47519 + C47527;
    const double C47539 = 2 * C47534;
    const double C47537 = C47534 * ae;
    const double C47917 = C47534 * C47603;
    const double C47941 = C47554 * C47534;
    const double C47959 = C47534 * C47647;
    const double C48068 = C47423 * C47534;
    const double C48067 = C47534 * be;
    const double C1887 =
        (C47423 * (2 * C47554 * C47459 + C47554 * (C47459 + C47481 * C47603)) +
         (2 * C47554 * C47524 + C47554 * (C47524 + C47534 * C47603)) * be) /
        C47180;
    const double C47542 = C47540 + C47533;
    const double C47993 = C47519 + C47992;
    const double C48004 = 2 * C48002;
    const double C48028 = C48002 * C47647;
    const double C48083 = C47423 * C48002;
    const double C48082 = C48002 * be;
    const double C48057 = C47519 + C48054;
    const double C48108 = 2 * C48101;
    const double C48106 = C48101 * be;
    const double C48105 = C48099 + C48100;
    const double C47530 = C47528 + C47523;
    const double C47621 = C47520 + C47620;
    const double C47684 = 2 * C47636;
    const double C47708 = be * C47636;
    const double C47707 = C47423 * C47636;
    const double C3261 =
        (2 * (be * C47614 + C47423 * C47635) +
         be * (C47614 + C47636 * std::pow(C47423, 2)) +
         C47423 * (C47635 + be * C47423 * C47636 +
                   C47423 * (be * C47636 + C47423 * C47554 * C47468))) /
        C47185;
    const double C3256 =
        (2 * C47423 * C47614 + C47423 * (C47614 + C47636 * C47647)) / C47180;
    const double C47650 = C47520 + C47649;
    const double C47735 = C47731 + C47732;
    const double C47736 = 2 * C47730;
    const double C47734 = be * C47730;
    const double C9360 = C48329 * C1891;
    const double C12933 = C48416 * C1891;
    const double C32374 = C48416 * C1891;
    const double C47497 = C47469 + C47495;
    const double C47496 = C47482 + C47494;
    const double C47677 = C47468 + C47675;
    const double C47763 = C47423 * C47760;
    const double C47783 = C47777 + C47778;
    const double C47588 = C47587 + C47581;
    const double C47692 = C47536 + C47690;
    const double C47765 = C47761 * C47647;
    const double C47785 = C47536 + C47780;
    const double C1070 = C48329 * C582;
    const double C2312 =
        (C47554 * C47445 + C47423 * (C47423 * C47554 * C47459 + C47907 * be) +
         C47423 * C47907 * be) /
        C47180;
    const double C2305 = C47554 * C47808 + C47907 * C47647;
    const double C123 = 3 * (C47803 + C47516 * C47449) +
                        C47424 * (2 * C47808 + C47424 * C47810);
    const double C262 = C47554 * (2 * C47808 + C47424 * C47810);
    const double C386 = C47423 * (2 * C47808 + C47424 * C47810);
    const double C577 = C47803 + C47516 * C47449 + C47810 * C47603;
    const double C679 = C47423 * C47554 * C47810;
    const double C930 = C47803 + C47516 * C47449 + C47810 * C47647;
    const double C2316 =
        (C47436 + C47443 * C47603 +
         C47423 * (C47423 * (C47443 + C47453 * C47603) + C47914 * be) +
         C47423 * C47914 * be) /
        C47180;
    const double C1707 = 3 * (C47803 + C47516 * C47603) +
                         C47554 * (2 * C47904 + C47554 * C47914);
    const double C1882 = C47423 * (2 * C47904 + C47554 * C47914);
    const double C2307 = C47803 + C47516 * C47603 + C47914 * C47647;
    const double C3666 = 3 * (C47803 + C47516 * C47647) +
                         C47423 * (2 * C47950 + C47423 * C47953);
    const double C7088 = C48416 * C2322;
    const double C9869 = C48609 * C2322;
    const double C16351 = C48609 * C2322;
    const double C32583 = C48416 * C2322;
    const double C47475 = C47424 * C47473;
    const double C47485 = 3 * C47473;
    const double C47480 = ae * C47473;
    const double C47944 = C47554 * C47473;
    const double C47964 = C47423 * C47473;
    const double C47491 = C47468 + C47487;
    const double C47977 = C47459 + C47976;
    const double C48045 = C47423 * C48041;
    const double C47988 = C47554 * C47987;
    const double C48033 = C47423 * C47987;
    const double C47543 = C47424 * C47541;
    const double C47583 = C47541 * ae;
    const double C47921 = C47541 * C47603;
    const double C47945 = C47554 * C47541;
    const double C47967 = C47541 * C47647;
    const double C48014 = C47534 + C48013;
    const double C48046 = C48044 * C47647;
    const double C48072 = C47534 + C48069;
    const double C48006 = C47554 * C48005;
    const double C48036 = C48005 * C47647;
    const double C48090 = C48002 + C48087;
    const double C48110 = C47423 * C48107;
    const double C47685 = C47554 * C47682;
    const double C47688 = 3 * C47682;
    const double C47715 = be * C47682;
    const double C47714 = C47423 * C47682;
    const double C47712 = C47636 + C47710;
    const double C47764 = 2 * C47758;
    const double C47762 = be * C47758;
    const double C47740 = C47423 * C47737;
    const double C47779 = 3 * C47737;
    const double C47775 = be * C47737;
    const double C47786 = C47468 + C47782;
    const double C112 = C48599 / C48254;
    const double C110 = C48249 / C48254 - (C48597 * C48562) / C48563;
    const double C111 = C48597 / C48598 - (C48599 * C48562) / C48244;
    const double C507 = C48597 / C48244;
    const double C573 = C48601 / C48254;
    const double C255 = C48600 / C48244;
    const double C571 = C48283 / C48254 - (C48600 * C48567) / C48563;
    const double C572 = C48600 / C48598 - (C48601 * C48567) / C48244;
    const double C927 = C48603 / C48254;
    const double C381 = C48602 / C48244;
    const double C925 = C48300 / C48254 - (C48602 * C48568) / C48563;
    const double C926 = C48602 / C48598 - (C48603 * C48568) / C48244;
    const double C7735 = (C48318 * std::pow(C48368, 2)) / C47185 + C48367;
    const double C48370 = C48369 * C48368;
    const double C48375 = C48369 / C47192;
    const double C48573 = C48369 / C47180;
    const double C48570 = C48222 * C48369;
    const double C48377 = C48376 * C48368;
    const double C48579 = C48366 * C48376;
    const double C48578 = 2 * C48376;
    const double C48616 = C48376 / C48559;
    const double C8915 = C48376 / C48596;
    const double C25914 = C48376 / C47186;
    const double C48612 = C48575 / C47180;
    const double C7736 = (-2 * C48222 * C48575) / C47180;
    const double C48628 = C48604 / C47185;
    const double C47221 = C47216 + 0;
    const double C47220 = C47215 / C47186;
    const double C47206 = C47191 - C47202;
    const double C47205 = C47178 * C47200;
    const double C1066 =
        ((-C47200 / C47180) / C47186 - (0 * be) / C47180) / C47186 -
        (0 * be) / C47180;
    const double C8916 = -C47200 / C47180;
    const double C23174 = (-C47200 / C47180) / C47186 - (0 * be) / C47180;
    const double C48218 = C48217 / C47185;
    const double C48590 = 2 * C48553;
    const double C48226 = C48225 / C47180;
    const double C48594 = C48557 / C47192;
    const double C48624 = C48551 - C48589;
    const double C23167 = -C48589;
    const double C48638 = C48623 + C48215;
    const double C47350 = C47344 + 0;
    const double C47317 = C47263 * C47298;
    const double C14892 =
        ((-C47264 / C47180) / C47186 -
         ((C48329 - (C47263 * C47298) / C47180) * be) / C47180) /
            C47186 -
        ((C47263 * ((-C47298 / C47180) / C47186 - (0 * be) / C47180) + C48416) *
         be) /
            C47180;
    const double C14893 =
        ((-C47298 / C47180) / C47186 - (0 * be) / C47180) / C47186 -
        (0 * be) / C47180;
    const double C30337 = (-C47298 / C47180) / C47186 - (0 * be) / C47180;
    const double C47330 = C47326 - C47320;
    const double C9870 = C2443 * C2311;
    const double C4890 = C4870 * C122;
    const double C4886 = C4870 * C131;
    const double C4882 = C4870 * C121;
    const double C4878 = C4870 * C129;
    const double C4874 = C4870 * C120;
    const double C5055 = C4870 * C261;
    const double C5051 = C4870 * C268;
    const double C5047 = C4870 * C260;
    const double C5209 = C4870 * C385;
    const double C5205 = C4870 * C392;
    const double C5201 = C4870 * C384;
    const double C6292 = C4870 * C266;
    const double C6288 = C4870 * C259;
    const double C6883 = C4870 * C581;
    const double C6879 = C4870 * C575;
    const double C7085 = C4870 * C683;
    const double C7081 = C4870 * C677;
    const double C12930 = C4870 * C1234;
    const double C12926 = C4870 * C1229;
    const double C13139 = C4870 * C1424;
    const double C13135 = C4870 * C1419;
    const double C4884 = C4871 * C385;
    const double C4880 = C4871 * C392;
    const double C4876 = C4871 * C384;
    const double C6294 = C4871 * C683;
    const double C6290 = C4871 * C677;
    const double C6885 = C4871 * C1424;
    const double C6881 = C4871 * C1419;
    const double C7087 = C4871 * C2311;
    const double C14926 = C14888 * C143;
    const double C14920 = C14888 * C132;
    const double C14913 = C14888 * C142;
    const double C14907 = C14888 * C130;
    const double C14901 = C14888 * C141;
    const double C14895 = C14888 * C128;
    const double C15100 = C14888 * C269;
    const double C15094 = C14888 * C278;
    const double C15088 = C14888 * C267;
    const double C15270 = C14888 * C393;
    const double C15264 = C14888 * C402;
    const double C15258 = C14888 * C391;
    const double C16366 = C14888 * C582;
    const double C16359 = C14888 * C590;
    const double C16353 = C14888 * C580;
    const double C16347 = C14888 * C277;
    const double C16341 = C14888 * C265;
    const double C16792 = C14888 * C1241;
    const double C16786 = C14888 * C1233;
    const double C16969 = C14888 * C1431;
    const double C16963 = C14888 * C1423;
    const double C16957 = C14888 * C692;
    const double C16951 = C14888 * C682;
    const double C48411 = C48410 / C47185;
    const double C4893 = C48574 * C143;
    const double C4889 = C48574 * C132;
    const double C4885 = C48574 * C142;
    const double C4881 = C48574 * C130;
    const double C4877 = C48574 * C141;
    const double C4873 = C48574 * C128;
    const double C5056 = C48574 * C269;
    const double C5052 = C48574 * C278;
    const double C5048 = C48574 * C267;
    const double C5210 = C48574 * C393;
    const double C5206 = C48574 * C402;
    const double C5202 = C48574 * C391;
    const double C6308 = C48574 * C582;
    const double C6291 = C48574 * C277;
    const double C6287 = C48574 * C265;
    const double C6884 = C48574 * C590;
    const double C6880 = C48574 * C580;
    const double C7086 = C48574 * C692;
    const double C7082 = C48574 * C682;
    const double C12931 = C48574 * C1241;
    const double C12927 = C48574 * C1233;
    const double C13140 = C48574 * C1431;
    const double C13136 = C48574 * C1423;
    const double C14274 = C48574 * C1716;
    const double C14270 = C48574 * C1710;
    const double C14418 = C48574 * C1891;
    const double C14414 = C48574 * C1885;
    const double C2441 =
        (((0 - (C47263 * C47264) / C47180) * ae) / C47180 - (0 * be) / C47192) /
            C47186 +
        ((C47263 * (((C48329 - (C47263 * 2 * C47266) / C47180) * ae) / C47180 -
                    C47264 / C47192) +
          C48574) *
         ae) /
            C47180 +
        (0 * ae) / C47180 - C47266 / C47185;
    const double C48608 = 2 * C48572;
    const double C2460 = C2442 * C385;
    const double C2454 = C2442 * C392;
    const double C2448 = C2442 * C384;
    const double C9880 = C2442 * C1424;
    const double C9874 = C2442 * C1419;
    const double C9868 = C2442 * C683;
    const double C9862 = C2442 * C677;
    const double C10488 = C2442 * C2311;
    const double C48418 = C48417 / C47180;
    const double C48621 = C48585 / C47192;
    const double C37550 = C36005 * C2322;
    const double C48635 = C48574 - C48618;
    const double C30334 = -C48618;
    const double C14909 = C14889 * C393;
    const double C14903 = C14889 * C402;
    const double C14897 = C14889 * C391;
    const double C16361 = C14889 * C1431;
    const double C16355 = C14889 * C1423;
    const double C16349 = C14889 * C692;
    const double C16343 = C14889 * C682;
    const double C16794 = C14889 * C1891;
    const double C16788 = C14889 * C1885;
    const double C16959 = C14889 * C2322;
    const double C48642 = C48630 + C48407;
    const double C47353 = C47349 / C47186;
    const double C9005 =
        (4 * (2 * C47635 + C47554 * C47667) +
         C47554 *
             (3 * C47667 + C47554 * (2 * C47554 * C47468 +
                                     C47554 * (C47468 + C47492 * C47603)))) /
        C47185;
    const double C168 = C152 - C153;
    const double C1258 = C284 - C285;
    const double C1250 = C285 - C284;
    const double C1720 = C1252 - C1253;
    const double C133 =
        (2 * (C47424 * C47561 + C47803 * ae) +
         C47424 * (C47561 + C47424 * C47565 + C47424 * C47516 * ae) +
         (C47803 + C47516 * C47449) * ae) /
        C47180;
    const double C270 =
        (C47554 * (C47561 + C47424 * C47565 + C47808 * ae)) / C47180;
    const double C394 =
        (C47423 * (C47561 + C47424 * C47565 + C47808 * ae)) / C47180;
    const double C583 =
        (C47424 * C47561 + C47803 * ae + C47565 * C47603) / C47180;
    const double C685 = (C47423 * C47554 * C47565) / C47180;
    const double C936 =
        (C47424 * C47561 + C47803 * ae + C47565 * C47647) / C47180;
    const double C1437 = C48329 * C684;
    const double C5050 = C48416 * C684;
    const double C6524 = C48574 * C684;
    const double C15090 = C14889 * C684;
    const double C18639 = C14888 * C684;
    const double C30516 = C48416 * C684;
    const double C2449 = C48609 * C935;
    const double C5204 = C48416 * C935;
    const double C14899 = C48609 * C935;
    const double C15260 = C14889 * C935;
    const double C30670 = C48416 * C935;
    const double C36014 = C36005 * C935;
    const double C1071 = C113 * C576;
    const double C6307 = C4870 * C576;
    const double C1436 = C113 * C678;
    const double C2643 = C2442 * C678;
    const double C5049 = C4871 * C678;
    const double C6523 = C4870 * C678;
    const double C2450 = C2443 * C929;
    const double C2829 = C2442 * C929;
    const double C5203 = C4871 * C929;
    const double C1266 = C113 * C1230;
    const double C12366 = C4870 * C1230;
    const double C1444 = C113 * C1420;
    const double C6309 = C4871 * C1420;
    const double C9885 = C2442 * C1420;
    const double C12572 = C4870 * C1420;
    const double C2831 = C2443 * C2811;
    const double C7084 = C48416 * C2310;
    const double C9863 = C48609 * C2310;
    const double C16345 = C48609 * C2310;
    const double C16953 = C14889 * C2310;
    const double C32579 = C48416 * C2310;
    const double C37544 = C36005 * C2310;
    const double C10485 = C48609 * C3255;
    const double C16955 = C48609 * C3255;
    const double C21098 = C48622 * C3255;
    const double C38341 = C36005 * C3255;
    const double C41820 = C48622 * C3255;
    const double C7083 = C4871 * C2304;
    const double C9864 = C2443 * C2304;
    const double C10482 = C2442 * C2304;
    const double C10484 = C2443 * C3252;
    const double C3669 =
        (3 * (C47436 + C47423 * C47952 + C47950 * be) +
         C47423 * (2 * C47952 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47519 * be) +
                             C47423 * C47519 * be) +
                   C47953 * be) +
         (2 * C47950 + C47423 * C47953) * be) /
        C47180;
    const double C170 = C156 - C157;
    const double C1068 = C289 - C288;
    const double C1260 = C288 - C289;
    const double C9256 = C1727 - C1726;
    const double C169 = C154 - C155;
    const double C1259 = C286 - C287;
    const double C1251 = C287 - C286;
    const double C1721 = C1254 - C1255;
    const double C134 = (3 * (C47436 + C47443 * C47449) +
                         C47424 * (2 * C47445 + C47424 * C47457)) /
                        C47180;
    const double C271 = (C47554 * (2 * C47445 + C47424 * C47457)) / C47180;
    const double C395 = (C47423 * (2 * C47445 + C47424 * C47457) +
                         (2 * C47808 + C47424 * C47810) * be) /
                        C47180;
    const double C584 = (C47436 + C47443 * C47449 + C47457 * C47603) / C47180;
    const double C686 =
        (C47423 * C47554 * C47457 + C47554 * C47810 * be) / C47180;
    const double C937 =
        (C47436 + C47443 * C47449 + C47423 * (C47423 * C47457 + C47810 * be) +
         C47423 * C47810 * be) /
        C47180;
    const double C1237 =
        (2 * C47554 * C47457 + C47554 * (C47457 + C47473 * C47603)) / C47180;
    const double C47474 = C47424 * C47472;
    const double C47479 = 2 * C47472;
    const double C47638 = C47554 * C47472;
    const double C47654 = C47423 * C47472;
    const double C47467 = C47452 + C47463;
    const double C47960 = C47956 + C47957;
    const double C1267 = C48329 * C1235;
    const double C12367 = C48574 * C1235;
    const double C1445 = C48329 * C1425;
    const double C6310 = C48416 * C1425;
    const double C12573 = C48574 * C1425;
    const double C16368 = C14889 * C1425;
    const double C31555 = C48416 * C1425;
    const double C9013 = C48329 * C1712;
    const double C2832 = C48609 * C2816;
    const double C15262 = C48609 * C2816;
    const double C19830 = C48622 * C2816;
    const double C33238 = C48622 * C2816;
    const double C36377 = C36005 * C2816;
    const double C9001 =
        (4 * (2 * C47936 + C47554 * C47973) +
         C47554 *
             (3 * C47973 + C47554 * (2 * C47554 * C47453 +
                                     C47554 * (C47453 + C47469 * C47603)))) /
        C47180;
    const double C9099 =
        (C47423 *
             (3 * C47973 + C47554 * (2 * C47554 * C47453 +
                                     C47554 * (C47453 + C47469 * C47603))) +
         (3 * C47914 +
          C47554 * (2 * C47937 + C47554 * (C47519 + C47525 * C47603))) *
             be) /
        C47180;
    const double C48029 = C48025 + C48026;
    const double C48059 = C47423 * C48055;
    const double C48098 = 2 * C48055;
    const double C144 =
        (3 * (C47442 + ae * C47445 + C47424 * C47456) +
         ae * (2 * C47445 + C47424 * C47457) +
         C47424 *
             (2 * C47456 + ae * C47457 +
              C47424 * (C47452 + ae * C47424 * C47453 +
                        C47424 * (ae * C47453 + C47424 * std::pow(C47426, 6) *
                                                    bs[6] * C47435)))) /
        C47185;
    const double C279 =
        ((yP - yQ) * (C47442 + ae * C47445 + C47424 * C47456)) / C47185;
    const double C403 =
        (be * (C47432 * C47429 * C47515 +
               C47424 * (C47424 * C47438 * C47439 * C47515 + C47516 * ae) +
               C47424 * C47516 * ae) +
         C47423 * (C47442 + ae * C47445 + C47424 * C47456)) /
        C47185;
    const double C591 =
        (ae * C47436 + C47424 * C47442 + C47456 * std::pow(yP - yQ, 2)) /
        C47185;
    const double C693 = (be * C47554 * (C47424 * C47520 + C47516 * ae) +
                         C47423 * C47554 * C47456) /
                        C47185;
    const double C944 = (ae * C47436 + C47424 * C47442 + be * C47423 * C47565 +
                         C47423 * (be * C47565 + C47423 * C47456)) /
                        C47185;
    const double C1242 = (2 * C47554 * C47456 +
                          C47554 * (C47456 + C47472 * std::pow(C47554, 2))) /
                         C47185;
    const double C9257 = C1729 - C1728;
    const double C47574 = C47529 * ae;
    const double C47814 = C47424 * C47529;
    const double C47818 = 3 * C47529;
    const double C47910 = C47554 * C47529;
    const double C47966 = C47423 * C47529;
    const double C47965 = C47529 * be;
    const double C1427 = (C47423 * (C47457 + C47473 * C47603) +
                          (C47810 + C47529 * C47603) * be) /
                         C47180;
    const double C2818 =
        (2 * (C47423 * C47457 + C47810 * be) +
         C47423 * (C47457 + C47423 * (C47423 * C47473 + C47529 * be) +
                   C47423 * C47529 * be) +
         (C47810 + C47529 * C47647) * be) /
        C47180;
    const double C1231 =
        2 * C47554 * C47810 + C47554 * (C47810 + C47529 * C47603);
    const double C1421 = C47423 * (C47810 + C47529 * C47603);
    const double C2812 =
        2 * C47423 * C47810 + C47423 * (C47810 + C47529 * C47647);
    const double C47918 = C47524 + C47917;
    const double C48012 = 2 * C47941;
    const double C48043 = C47423 * C47941;
    const double C48042 = C47941 * be;
    const double C3257 =
        (2 * (C47423 * C47940 + C47907 * be) +
         C47423 * (C47940 + C47423 * (C47423 * C47554 * C47481 + C47941 * be) +
                   C47423 * C47941 * be) +
         (C47907 + C47941 * C47647) * be) /
        C47180;
    const double C3253 =
        2 * C47423 * C47907 + C47423 * (C47907 + C47941 * C47647);
    const double C47961 = C47524 + C47959;
    const double C48073 = 2 * C48068;
    const double C48071 = C48068 * be;
    const double C48070 = C48066 + C48067;
    const double C11285 = C48329 * C1887;
    const double C12369 = C48416 * C1887;
    const double C31798 = C48416 * C1887;
    const double C47544 = C47424 * C47542;
    const double C47579 = 2 * C47542;
    const double C47623 = C47542 * C47603;
    const double C47639 = C47554 * C47542;
    const double C47655 = C47542 * C47647;
    const double C47745 = be * C47542;
    const double C47744 = C47423 * C47542;
    const double C47997 = C47554 * C47993;
    const double C48001 = 3 * C47993;
    const double C48035 = C47423 * C47993;
    const double C48034 = C47993 * be;
    const double C10042 =
        (2 * (C47423 * C47973 + C47914 * be) +
         C47423 * (C47973 + C47423 * (C47423 * C47987 + C47993 * be) +
                   C47423 * C47993 * be) +
         (C47914 + C47993 * C47647) * be) /
        C47180;
    const double C10040 =
        2 * C47423 * C47914 + C47423 * (C47914 + C47993 * C47647);
    const double C48030 = C47937 + C48028;
    const double C48088 = 2 * C48083;
    const double C48086 = C48083 * be;
    const double C48089 = C48085 + C48082;
    const double C48060 = C47423 * C48057;
    const double C48104 = 3 * C48057;
    const double C48102 = C48057 * be;
    const double C48109 = C47423 * C48105;
    const double C47567 = C47424 * C47530;
    const double C47572 = 2 * C47530;
    const double C47616 = C47554 * C47530;
    const double C47653 = be * C47530;
    const double C47652 = C47423 * C47530;
    const double C1432 = (be * (C47565 + C47530 * C47603) +
                          C47423 * (C47456 + C47472 * C47603)) /
                         C47185;
    const double C2823 = (2 * (be * C47565 + C47423 * C47456) +
                          be * (C47565 + C47530 * std::pow(C47423, 2)) +
                          C47423 * (C47456 + be * C47423 * C47530 +
                                    C47423 * (be * C47530 + C47423 * C47472))) /
                         C47185;
    const double C1236 =
        (2 * C47554 * C47565 + C47554 * (C47565 + C47530 * C47603)) / C47180;
    const double C1426 = (C47423 * (C47565 + C47530 * C47603)) / C47180;
    const double C2817 =
        (2 * C47423 * C47565 + C47423 * (C47565 + C47530 * C47647)) / C47180;
    const double C2325 =
        (C47442 + C47452 * C47603 + be * C47423 * C47621 +
         C47423 * (be * C47621 + C47423 * (C47452 + C47468 * C47603))) /
        C47185;
    const double C9103 =
        (be * (3 * C47621 +
               C47554 * (2 * C47636 + C47554 * (C47526 + C47536 * C47603))) +
         C47423 *
             (3 * C47667 + C47554 * (2 * C47554 * C47468 +
                                     C47554 * (C47468 + C47492 * C47603)))) /
        C47185;
    const double C1711 = (3 * (C47561 + C47520 * C47603) +
                          C47554 * (2 * C47614 + C47554 * C47621)) /
                         C47180;
    const double C1886 = (C47423 * (2 * C47614 + C47554 * C47621)) / C47180;
    const double C2317 = (C47561 + C47520 * C47603 + C47621 * C47647) / C47180;
    const double C10043 =
        (2 * C47423 * C47621 + C47423 * (C47621 + C47682 * C47647)) / C47180;
    const double C47711 = C47708 + C47709;
    const double C10491 = C48609 * C3261;
    const double C16961 = C48609 * C3261;
    const double C21106 = C48622 * C3261;
    const double C38347 = C36005 * C3261;
    const double C41828 = C48622 * C3261;
    const double C10490 = C2443 * C3256;
    const double C3675 =
        (3 * (C47442 + be * C47644 + C47423 * C47648) +
         be * (2 * C47644 + C47423 * C47650) +
         C47423 * (2 * C47648 + be * C47650 +
                   C47423 * (C47452 + be * C47423 * C47526 +
                             C47423 * (be * C47526 + C47423 * C47468)))) /
        C47185;
    const double C3670 = (3 * (C47561 + C47520 * C47647) +
                          C47423 * (2 * C47644 + C47423 * C47650)) /
                         C47180;
    const double C47739 = C47423 * C47735;
    const double C47774 = 2 * C47735;
    const double C47738 = C47452 + C47734;
    const double C47499 = C47424 * C47497;
    const double C1714 =
        (3 * (C47457 + C47473 * C47603) +
         C47554 * (2 * C47554 * C47473 + C47554 * (C47473 + C47497 * C47603))) /
        C47180;
    const double C1889 =
        (C47423 * (2 * C47554 * C47473 + C47554 * (C47473 + C47497 * C47603)) +
         (2 * C47554 * C47529 + C47554 * (C47529 + C47541 * C47603)) * be) /
        C47180;
    const double C47498 = C47424 * C47496;
    const double C47669 = C47496 * C47603;
    const double C47723 = C47554 * C47496;
    const double C47746 = C47423 * C47496;
    const double C1717 =
        (3 * (C47456 + C47472 * C47603) +
         C47554 * (2 * C47554 * C47472 + C47554 * (C47472 + C47496 * C47603))) /
        C47185;
    const double C1892 =
        (be * (2 * C47554 * C47530 + C47554 * (C47530 + C47542 * C47603)) +
         C47423 * (2 * C47554 * C47472 + C47554 * (C47472 + C47496 * C47603))) /
        C47185;
    const double C47678 = C47554 * C47677;
    const double C47716 = C47423 * C47677;
    const double C10046 =
        (2 * (be * C47621 + C47423 * C47667) + be * (C47621 + C47682 * C47647) +
         C47423 * (C47667 + be * C47423 * C47682 +
                   C47423 * (be * C47682 + C47423 * C47677))) /
        C47185;
    const double C47767 = C47759 + C47763;
    const double C47787 = C47423 * C47783;
    const double C47589 = C47424 * C47588;
    const double C47699 = C47588 * C47603;
    const double C47724 = C47554 * C47588;
    const double C47747 = C47588 * C47647;
    const double C47693 = C47554 * C47692;
    const double C47717 = C47692 * C47647;
    const double C47768 = C47689 + C47765;
    const double C47788 = C47423 * C47785;
    const double C2646 = C48609 * C2312;
    const double C6526 = C48416 * C2312;
    const double C15092 = C48609 * C2312;
    const double C18641 = C14889 * C2312;
    const double C32008 = C48416 * C2312;
    const double C36207 = C36005 * C2312;
    const double C2645 = C2443 * C2305;
    const double C6525 = C4871 * C2305;
    const double C24722 = C2442 * C2305;
    const double C161 = C113 * C123;
    const double C4897 = C4870 * C123;
    const double C292 = C113 * C262;
    const double C5063 = C4870 * C262;
    const double C416 = C113 * C386;
    const double C2471 = C2442 * C386;
    const double C4892 = C4871 * C386;
    const double C5217 = C4870 * C386;
    const double C1075 = C113 * C577;
    const double C6315 = C4870 * C577;
    const double C1440 = C113 * C679;
    const double C2655 = C2442 * C679;
    const double C5057 = C4871 * C679;
    const double C6531 = C4870 * C679;
    const double C2462 = C2443 * C930;
    const double C2841 = C2442 * C930;
    const double C5211 = C4871 * C930;
    const double C9875 = C48609 * C2316;
    const double C13138 = C48416 * C2316;
    const double C16357 = C48609 * C2316;
    const double C16965 = C14889 * C2316;
    const double C32587 = C48416 * C2316;
    const double C38135 = C36005 * C2316;
    const double C9009 = C113 * C1707;
    const double C14269 = C4870 * C1707;
    const double C9357 = C113 * C1882;
    const double C10313 = C2442 * C1882;
    const double C12928 = C4871 * C1882;
    const double C14413 = C4870 * C1882;
    const double C9876 = C2443 * C2307;
    const double C10494 = C2442 * C2307;
    const double C13137 = C4871 * C2307;
    const double C47477 = C47465 + C47475;
    const double C9003 =
        (4 * (2 * C47940 + C47554 * C47977) +
         C47554 * (3 * C47977 +
                   C47554 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603)))) /
        C47180;
    const double C47989 = C47986 + C47988;
    const double C47545 = C47539 + C47543;
    const double C47922 = C47529 + C47921;
    const double C47969 = C47529 + C47967;
    const double C48015 = C47554 * C48014;
    const double C48048 = C47941 + C48046;
    const double C48075 = C47423 * C48072;
    const double C48007 = C48004 + C48006;
    const double C48038 = C47993 + C48036;
    const double C48092 = C47423 * C48090;
    const double C48112 = C48108 + C48110;
    const double C47686 = C47684 + C47685;
    const double C10908 = (3 * (C47614 + C47636 * C47647) +
                           C47423 * (2 * C47707 + C47423 * C47712)) /
                          C47180;
    const double C47766 = C47674 + C47762;
    const double C47742 = C47736 + C47740;
    const double C48371 = C48370 / C47185;
    const double C48605 = 2 * C48570;
    const double C48378 = C48377 / C47180;
    const double C48615 = C48579 / C47192;
    const double C48632 = C48573 - C48612;
    const double C22087 = -C48612;
    const double C48641 = C48628 + C48367;
    const double C47224 = C47221 * be;
    const double C47210 = C47178 * C47206;
    const double C47238 = C47206 / C47186;
    const double C47209 = C47205 / C47180;
    const double C48219 = C48215 - C48218;
    const double C48625 = C48590 / C47180;
    const double C48227 = C48223 - C48226;
    const double C48639 = C48624 / C47186;
    const double C47354 = C47350 * be;
    const double C47325 = C47317 / C47180;
    const double C14921 = C14892 * C386;
    const double C14910 = C14892 * C385;
    const double C14904 = C14892 * C392;
    const double C14898 = C14892 * C384;
    const double C15101 = C14892 * C679;
    const double C15089 = C14892 * C678;
    const double C15271 = C14892 * C930;
    const double C15259 = C14892 * C929;
    const double C16367 = C14892 * C1420;
    const double C16362 = C14892 * C1424;
    const double C16356 = C14892 * C1419;
    const double C16350 = C14892 * C683;
    const double C16344 = C14892 * C677;
    const double C16787 = C14892 * C1882;
    const double C16964 = C14892 * C2307;
    const double C16958 = C14892 * C2311;
    const double C16952 = C14892 * C2304;
    const double C18640 = C14892 * C2305;
    const double C14912 = C14893 * C930;
    const double C14900 = C14893 * C929;
    const double C15091 = C14893 * C2305;
    const double C15261 = C14893 * C2811;
    const double C16358 = C14893 * C2307;
    const double C16352 = C14893 * C2311;
    const double C16346 = C14893 * C2304;
    const double C16960 = C14893 * C3256;
    const double C16954 = C14893 * C3252;
    const double C30358 = C30337 * C386;
    const double C30350 = C30337 * C385;
    const double C30346 = C30337 * C392;
    const double C30342 = C30337 * C384;
    const double C30523 = C30337 * C679;
    const double C30515 = C30337 * C678;
    const double C30677 = C30337 * C930;
    const double C30669 = C30337 * C929;
    const double C31556 = C30337 * C1420;
    const double C31782 = C30337 * C1424;
    const double C31778 = C30337 * C1419;
    const double C31770 = C30337 * C683;
    const double C31766 = C30337 * C677;
    const double C32007 = C30337 * C2305;
    const double C32369 = C30337 * C1882;
    const double C32586 = C30337 * C2307;
    const double C32582 = C30337 * C2311;
    const double C32578 = C30337 * C2304;
    const double C47334 = C47263 * C47330;
    const double C47363 = C47330 / C47186;
    const double C4906 = C4883 - C4884;
    const double C12923 = C6886 - C6885;
    const double C12921 = C6882 - C6881;
    const double C48412 = C48407 - C48411;
    const double C4909 = C4889 - C4890;
    const double C4907 = C4885 - C4886;
    const double C4905 = C4881 - C4882;
    const double C6087 = C5056 - C5055;
    const double C6303 = C5055 - C5056;
    const double C6301 = C5051 - C5052;
    const double C6297 = C5052 - C5051;
    const double C6299 = C5047 - C5048;
    const double C6295 = C5048 - C5047;
    const double C12922 = C6884 - C6883;
    const double C12920 = C6880 - C6879;
    const double C14267 = C12931 - C12930;
    const double C14265 = C12927 - C12926;
    const double C2469 = C2441 * C122;
    const double C2464 = C2441 * C131;
    const double C2458 = C2441 * C121;
    const double C2452 = C2441 * C129;
    const double C2446 = C2441 * C120;
    const double C2653 = C2441 * C261;
    const double C2647 = C2441 * C268;
    const double C2641 = C2441 * C260;
    const double C2839 = C2441 * C385;
    const double C2833 = C2441 * C392;
    const double C2827 = C2441 * C384;
    const double C9883 = C2441 * C576;
    const double C9878 = C2441 * C581;
    const double C9872 = C2441 * C575;
    const double C9866 = C2441 * C266;
    const double C9860 = C2441 * C259;
    const double C10317 = C2441 * C1234;
    const double C10311 = C2441 * C1229;
    const double C10498 = C2441 * C1424;
    const double C10492 = C2441 * C1419;
    const double C10486 = C2441 * C683;
    const double C10480 = C2441 * C677;
    const double C24720 = C2441 * C678;
    const double C48631 = C48608 / C47180;
    const double C48419 = C48415 - C48418;
    const double C48645 = C48635 / C47186;
    const double C30359 = C30334 * C143;
    const double C30355 = C30334 * C132;
    const double C30351 = C30334 * C142;
    const double C30347 = C30334 * C130;
    const double C30343 = C30334 * C141;
    const double C30339 = C30334 * C128;
    const double C30522 = C30334 * C269;
    const double C30518 = C30334 * C278;
    const double C30514 = C30334 * C267;
    const double C30676 = C30334 * C393;
    const double C30672 = C30334 * C402;
    const double C30668 = C30334 * C391;
    const double C31553 = C30334 * C582;
    const double C31796 = C30334 * C1235;
    const double C31779 = C30334 * C590;
    const double C31775 = C30334 * C580;
    const double C31767 = C30334 * C277;
    const double C31763 = C30334 * C265;
    const double C32014 = C30334 * C1425;
    const double C32006 = C30334 * C684;
    const double C32372 = C30334 * C1241;
    const double C32368 = C30334 * C1233;
    const double C32589 = C30334 * C1431;
    const double C32585 = C30334 * C1423;
    const double C32581 = C30334 * C692;
    const double C32577 = C30334 * C682;
    const double C41081 = C30334 * C1716;
    const double C41077 = C30334 * C1710;
    const double C41225 = C30334 * C1891;
    const double C41221 = C30334 * C1885;
    const double C14891 =
        ((-(0 * be) / C47180) / C47186 -
         ((0 - (C47263 * C47264) / C47180) * be) / C47180) /
            C47186 -
        ((C47263 * ((-C47264 / C47180) / C47186 -
                    ((C48329 - (C47263 * C47298) / C47180) * be) / C47180) +
          C30334) *
         be) /
            C47180 +
        (-C47298 / C47180) / C47186 - (0 * be) / C47180;
    const double C2476 = C48642 * C143;
    const double C2470 = C48642 * C132;
    const double C2463 = C48642 * C142;
    const double C2457 = C48642 * C130;
    const double C2451 = C48642 * C141;
    const double C2445 = C48642 * C128;
    const double C2654 = C48642 * C269;
    const double C2648 = C48642 * C278;
    const double C2642 = C48642 * C267;
    const double C2840 = C48642 * C393;
    const double C2834 = C48642 * C402;
    const double C2828 = C48642 * C391;
    const double C9884 = C48642 * C582;
    const double C9877 = C48642 * C590;
    const double C9871 = C48642 * C580;
    const double C9865 = C48642 * C277;
    const double C9859 = C48642 * C265;
    const double C10318 = C48642 * C1241;
    const double C10312 = C48642 * C1233;
    const double C10499 = C48642 * C1431;
    const double C10493 = C48642 * C1423;
    const double C10487 = C48642 * C692;
    const double C10481 = C48642 * C682;
    const double C24721 = C48642 * C684;
    const double C9263 = C48329 * C9005;
    const double C9254 = C1720 * C8916;
    const double C159 = C113 * C133;
    const double C2475 = C2441 * C133;
    const double C4894 = C4870 * C133;
    const double C290 = C113 * C270;
    const double C2659 = C2441 * C270;
    const double C5059 = C4870 * C270;
    const double C414 = C113 * C394;
    const double C2466 = C2442 * C394;
    const double C2845 = C2441 * C394;
    const double C4888 = C4871 * C394;
    const double C5213 = C4870 * C394;
    const double C14916 = C14892 * C394;
    const double C30354 = C30337 * C394;
    const double C1073 = C113 * C583;
    const double C6311 = C4870 * C583;
    const double C9889 = C2441 * C583;
    const double C1438 = C113 * C685;
    const double C2649 = C2442 * C685;
    const double C5053 = C4871 * C685;
    const double C6527 = C4870 * C685;
    const double C15095 = C14892 * C685;
    const double C24726 = C2441 * C685;
    const double C30519 = C30337 * C685;
    const double C2456 = C2443 * C936;
    const double C2835 = C2442 * C936;
    const double C5207 = C4871 * C936;
    const double C14906 = C14893 * C936;
    const double C15265 = C14892 * C936;
    const double C30673 = C30337 * C936;
    const double C1262 = C1071 - C1070;
    const double C1256 = C1070 - C1071;
    const double C12362 = C6307 - C6308;
    const double C12358 = C6308 - C6307;
    const double C6300 = C5049 - C5050;
    const double C6296 = C5050 - C5049;
    const double C9265 = C9256 * C8916;
    const double C1731 = C1721 * C1058;
    const double C8291 = C1721 * C48638;
    const double C9255 = C1721 * C48214;
    const double C11517 = C1721 * C48551;
    const double C23665 = C1721 * C23167;
    const double C160 = C48329 * C134;
    const double C4898 = C48574 * C134;
    const double C30364 = C30334 * C134;
    const double C293 = C48329 * C271;
    const double C5064 = C48574 * C271;
    const double C30530 = C30334 * C271;
    const double C417 = C48329 * C395;
    const double C4891 = C48416 * C395;
    const double C5218 = C48574 * C395;
    const double C14922 = C14889 * C395;
    const double C30357 = C48416 * C395;
    const double C30684 = C30334 * C395;
    const double C1074 = C48329 * C584;
    const double C6316 = C48574 * C584;
    const double C31562 = C30334 * C584;
    const double C1441 = C48329 * C686;
    const double C5058 = C48416 * C686;
    const double C6532 = C48574 * C686;
    const double C15102 = C14889 * C686;
    const double C30524 = C48416 * C686;
    const double C34819 = C30334 * C686;
    const double C2461 = C48609 * C937;
    const double C5212 = C48416 * C937;
    const double C14911 = C48609 * C937;
    const double C15272 = C14889 * C937;
    const double C30678 = C48416 * C937;
    const double C36026 = C36005 * C937;
    const double C1271 = C48329 * C1237;
    const double C47486 = C47479 + C47480;
    const double C47476 = C47467 + C47474;
    const double C11152 = C1266 - C1267;
    const double C11150 = C1267 - C1266;
    const double C12363 = C6309 - C6310;
    const double C12359 = C6310 - C6309;
    const double C9261 = C48329 * C9001;
    const double C9362 = C48329 * C9099;
    const double C14272 = C48416 * C9099;
    const double C41079 = C48416 * C9099;
    const double C48061 = C47443 + C48059;
    const double C162 = C48329 * C144;
    const double C4902 = C48574 * C144;
    const double C30368 = C30334 * C144;
    const double C291 = C48329 * C279;
    const double C2660 = C48642 * C279;
    const double C5060 = C48574 * C279;
    const double C15106 = C14888 * C279;
    const double C30526 = C30334 * C279;
    const double C415 = C48329 * C403;
    const double C2846 = C48642 * C403;
    const double C4887 = C48416 * C403;
    const double C5214 = C48574 * C403;
    const double C14915 = C14889 * C403;
    const double C15276 = C14888 * C403;
    const double C30353 = C48416 * C403;
    const double C30680 = C30334 * C403;
    const double C1072 = C48329 * C591;
    const double C6312 = C48574 * C591;
    const double C9890 = C48642 * C591;
    const double C16372 = C14888 * C591;
    const double C31557 = C30334 * C591;
    const double C1439 = C48329 * C693;
    const double C5054 = C48416 * C693;
    const double C6528 = C48574 * C693;
    const double C15096 = C14889 * C693;
    const double C18645 = C14888 * C693;
    const double C24727 = C48642 * C693;
    const double C30520 = C48416 * C693;
    const double C32010 = C30334 * C693;
    const double C2455 = C48609 * C944;
    const double C5208 = C48416 * C944;
    const double C14905 = C48609 * C944;
    const double C15266 = C14889 * C944;
    const double C30674 = C48416 * C944;
    const double C36020 = C36005 * C944;
    const double C1269 = C48329 * C1242;
    const double C12371 = C48574 * C1242;
    const double C31800 = C30334 * C1242;
    const double C9266 = C9257 * C48214;
    const double C11521 = C9257 * C48551;
    const double C23669 = C9257 * C23167;
    const double C47815 = C47813 + C47814;
    const double C2314 =
        (C47554 * C47457 + C47423 * (C47423 * C47554 * C47473 + C47910 * be) +
         C47423 * C47910 * be) /
        C47180;
    const double C3259 =
        (2 * (C47423 * C47944 + C47910 * be) +
         C47423 * (C47944 + C47423 * (C47423 * C47554 * C47497 + C47945 * be) +
                   C47423 * C47945 * be) +
         (C47910 + C47945 * C47647) * be) /
        C47180;
    const double C2306 = C47554 * C47810 + C47910 * C47647;
    const double C3254 =
        2 * C47423 * C47910 + C47423 * (C47910 + C47945 * C47647);
    const double C47968 = C47964 + C47965;
    const double C1449 = C48329 * C1427;
    const double C6318 = C48416 * C1427;
    const double C31564 = C48416 * C1427;
    const double C2844 = C48609 * C2818;
    const double C15274 = C48609 * C2818;
    const double C19847 = C48622 * C2818;
    const double C33255 = C48622 * C2818;
    const double C36389 = C36005 * C2818;
    const double C1270 = C113 * C1231;
    const double C1448 = C113 * C1421;
    const double C6317 = C4871 * C1421;
    const double C31563 = C30337 * C1421;
    const double C2843 = C2443 * C2812;
    const double C15273 = C14893 * C2812;
    const double C2318 =
        (C47445 + C47459 * C47603 +
         C47423 * (C47423 * (C47459 + C47481 * C47603) + C47918 * be) +
         C47423 * C47918 * be) /
        C47180;
    const double C9101 =
        (C47423 * (3 * C47977 +
                   C47554 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603))) +
         (3 * C47918 +
          C47554 * (2 * C47941 + C47554 * (C47534 + C47582 * C47603))) *
             be) /
        C47180;
    const double C10044 =
        (2 * (C47423 * C47977 + C47918 * be) +
         C47423 * (C47977 +
                   C47423 * (C47423 * (C47481 + C47424 * C47493 * C47603) +
                             C48014 * be) +
                   C47423 * C48014 * be) +
         (C47918 + C48014 * C47647) * be) /
        C47180;
    const double C1708 = 3 * (C47808 + C47524 * C47603) +
                         C47554 * (2 * C47907 + C47554 * C47918);
    const double C1883 = C47423 * (2 * C47907 + C47554 * C47918);
    const double C2308 = C47808 + C47524 * C47603 + C47918 * C47647;
    const double C10041 =
        2 * C47423 * C47918 + C47423 * (C47918 + C48014 * C47647);
    const double C48047 = C48045 + C48042;
    const double C18643 = C48609 * C3257;
    const double C19993 = C48622 * C3257;
    const double C24725 = C48609 * C3257;
    const double C33401 = C48622 * C3257;
    const double C37783 = C36005 * C3257;
    const double C18642 = C14893 * C3253;
    const double C24724 = C2443 * C3253;
    const double C3671 =
        (3 * (C47445 + C47423 * C47960 + C47958 * be) +
         C47423 * (2 * C47960 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47534 * be) +
                             C47423 * C47534 * be) +
                   C47961 * be) +
         (2 * C47958 + C47423 * C47961) * be) /
        C47180;
    const double C3667 = 3 * (C47808 + C47524 * C47647) +
                         C47423 * (2 * C47958 + C47423 * C47961);
    const double C48074 = C47423 * C48070;
    const double C47546 = C47526 + C47544;
    const double C47624 = C47530 + C47623;
    const double C47698 = 2 * C47639;
    const double C47722 = be * C47639;
    const double C47721 = C47423 * C47639;
    const double C47657 = C47530 + C47655;
    const double C47750 = 2 * C47744;
    const double C47748 = be * C47744;
    const double C47998 = C47996 + C47997;
    const double C48037 = C48033 + C48034;
    const double C10497 = C48609 * C10042;
    const double C16967 = C48609 * C10042;
    const double C21473 = C48622 * C10042;
    const double C42195 = C48622 * C10042;
    const double C46753 = C36005 * C10042;
    const double C10496 = C2443 * C10040;
    const double C16966 = C14893 * C10040;
    const double C10907 =
        (3 * (C47936 + C47423 * C48029 + C48027 * be) +
         C47423 * (2 * C48029 +
                   C47423 * (C47984 +
                             C47423 * (C47423 * C47554 * C47469 + C48002 * be) +
                             C47423 * C48002 * be) +
                   C48030 * be) +
         (2 * C48027 + C47423 * C48030) * be) /
        C47180;
    const double C10905 = 3 * (C47904 + C47937 * C47647) +
                          C47423 * (2 * C48027 + C47423 * C48030);
    const double C48091 = C47423 * C48089;
    const double C48062 = C48058 + C48060;
    const double C48111 = C47453 + C48109;
    const double C47569 = C47520 + C47567;
    const double C2323 = (C47554 * C47456 + be * C47423 * C47616 +
                          C47423 * (be * C47616 + C47423 * C47554 * C47472)) /
                         C47185;
    const double C3262 =
        (2 * (be * C47616 + C47423 * C47638) +
         be * (C47616 + C47639 * std::pow(C47423, 2)) +
         C47423 * (C47638 + be * C47423 * C47639 +
                   C47423 * (be * C47639 + C47423 * C47554 * C47496))) /
        C47185;
    const double C2313 = (C47554 * C47565 + C47616 * C47647) / C47180;
    const double C3258 =
        (2 * C47423 * C47616 + C47423 * (C47616 + C47639 * C47647)) / C47180;
    const double C47656 = C47653 + C47654;
    const double C1447 = C48329 * C1432;
    const double C6314 = C48416 * C1432;
    const double C12577 = C48574 * C1432;
    const double C16374 = C14889 * C1432;
    const double C31559 = C48416 * C1432;
    const double C32018 = C30334 * C1432;
    const double C2838 = C48609 * C2823;
    const double C15268 = C48609 * C2823;
    const double C19838 = C48622 * C2823;
    const double C33246 = C48622 * C2823;
    const double C36383 = C36005 * C2823;
    const double C1268 = C113 * C1236;
    const double C12370 = C4870 * C1236;
    const double C1446 = C113 * C1426;
    const double C6313 = C4871 * C1426;
    const double C9891 = C2442 * C1426;
    const double C12576 = C4870 * C1426;
    const double C16373 = C14892 * C1426;
    const double C31560 = C30337 * C1426;
    const double C2837 = C2443 * C2817;
    const double C15267 = C14893 * C2817;
    const double C9881 = C48609 * C2325;
    const double C13142 = C48416 * C2325;
    const double C16363 = C48609 * C2325;
    const double C16971 = C14889 * C2325;
    const double C32591 = C48416 * C2325;
    const double C38141 = C36005 * C2325;
    const double C9364 = C48329 * C9103;
    const double C14276 = C48416 * C9103;
    const double C41083 = C48416 * C9103;
    const double C9011 = C113 * C1711;
    const double C14273 = C4870 * C1711;
    const double C9359 = C113 * C1886;
    const double C10319 = C2442 * C1886;
    const double C12932 = C4871 * C1886;
    const double C14417 = C4870 * C1886;
    const double C16793 = C14892 * C1886;
    const double C32373 = C30337 * C1886;
    const double C9882 = C2443 * C2317;
    const double C10500 = C2442 * C2317;
    const double C13141 = C4871 * C2317;
    const double C16364 = C14893 * C2317;
    const double C16970 = C14892 * C2317;
    const double C32590 = C30337 * C2317;
    const double C10502 = C2443 * C10043;
    const double C16972 = C14893 * C10043;
    const double C10911 =
        (3 * (C47635 + be * C47707 + C47423 * C47711) +
         be * (2 * C47707 + C47423 * C47712) +
         C47423 *
             (2 * C47711 + be * C47712 +
              C47423 * (C47674 + be * C47423 * C47689 +
                        C47423 * (be * C47689 + C47423 * C47554 * C47492)))) /
        C47185;
    const double C47781 = C47774 + C47775;
    const double C47741 = C47738 + C47739;
    const double C47501 = C47489 + C47499;
    const double C47500 = C47491 + C47498;
    const double C47670 = C47472 + C47669;
    const double C47725 = C47423 * C47723;
    const double C47749 = C47745 + C47746;
    const double C9015 = C48329 * C1717;
    const double C11287 = C48329 * C1892;
    const double C12373 = C48416 * C1892;
    const double C31802 = C48416 * C1892;
    const double C47679 = C47676 + C47678;
    const double C47718 = C47715 + C47716;
    const double C10503 = C48609 * C10046;
    const double C16973 = C48609 * C10046;
    const double C21481 = C48622 * C10046;
    const double C42203 = C48622 * C10046;
    const double C46759 = C36005 * C10046;
    const double C47769 = C47423 * C47767;
    const double C47789 = C47786 + C47787;
    const double C47590 = C47536 + C47589;
    const double C47700 = C47542 + C47699;
    const double C47726 = C47724 * C47647;
    const double C47751 = C47542 + C47747;
    const double C47694 = C47691 + C47693;
    const double C47719 = C47682 + C47717;
    const double C47770 = C47423 * C47768;
    const double C47790 = C47784 + C47788;
    const double C24514 = C2645 - C2646;
    const double C24508 = C2646 - C2645;
    const double C9258 = C9008 - C9009;
    const double C14266 = C12929 - C12928;
    const double C10307 = C9875 - C9876;
    const double C136 = (4 * (2 * C47445 + C47424 * C47457) +
                         C47424 * (3 * C47457 + C47424 * C47477)) /
                        C47180;
    const double C273 = (C47554 * (3 * C47457 + C47424 * C47477)) / C47180;
    const double C586 =
        (2 * C47445 + C47424 * C47457 + C47477 * C47603) / C47180;
    const double C9250 =
        (5 * (3 * C47973 + C47554 * C47989) +
         C47554 * (4 * C47989 +
                   C47554 * (3 * C47987 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603))))) /
        C47180;
    const double C9353 =
        (C47423 * (4 * C47989 +
                   C47554 * (3 * C47987 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603)))) +
         (4 * (2 * C47937 + C47554 * C47993) +
          C47554 *
              (3 * C47993 + C47554 * (2 * C47554 * C47525 +
                                      C47554 * (C47525 + C47535 * C47603)))) *
             be) /
        C47180;
    const double C47584 = C47545 * ae;
    const double C47819 = C47424 * C47545;
    const double C47925 = C47554 * C47545;
    const double C2320 =
        (C47457 + C47473 * C47603 +
         C47423 * (C47423 * (C47473 + C47497 * C47603) + C47922 * be) +
         C47423 * C47922 * be) /
        C47180;
    const double C1709 = 3 * (C47810 + C47529 * C47603) +
                         C47554 * (2 * C47910 + C47554 * C47922);
    const double C1884 = C47423 * (2 * C47910 + C47554 * C47922);
    const double C2309 = C47810 + C47529 * C47603 + C47922 * C47647;
    const double C3668 = 3 * (C47810 + C47529 * C47647) +
                         C47423 * (2 * C47966 + C47423 * C47969);
    const double C48016 = C48012 + C48015;
    const double C17529 = 3 * (C47907 + C47941 * C47647) +
                          C47423 * (2 * C48043 + C47423 * C48048);
    const double C48077 = C48073 + C48075;
    const double C48008 = C47554 * C48007;
    const double C10906 = 3 * (C47914 + C47993 * C47647) +
                          C47423 * (2 * C48035 + C47423 * C48038);
    const double C48094 = C48088 + C48092;
    const double C48114 = C47423 * C48112;
    const double C9002 = (4 * (2 * C47614 + C47554 * C47621) +
                          C47554 * (3 * C47621 + C47554 * C47686)) /
                         C47180;
    const double C9100 = (C47423 * (3 * C47621 + C47554 * C47686)) / C47180;
    const double C9593 =
        (2 * C47614 + C47554 * C47621 + C47686 * C47647) / C47180;
    const double C17618 = (4 * (2 * C47644 + C47423 * C47650) +
                           C47423 * (3 * C47650 + C47423 * C47742)) /
                          C47180;
    const double C48372 = C48367 - C48371;
    const double C48629 = C48605 / C47180;
    const double C48379 = C48375 - C48378;
    const double C48643 = C48632 / C47186;
    const double C47226 = C47224 / C47180;
    const double C47214 = C47210 + C48224;
    const double C47241 = C47238 - C47240;
    const double C7740 = C47238 + (0 * ae) / C47180;
    const double C47213 = C48214 - C47209;
    const double C26468 = C1721 * C48219;
    const double C48550 = C48219 * C48209;
    const double C48592 = C48555 + C48219;
    const double C48558 = C48227 / C47186;
    const double C48554 = C48227 * C48209;
    const double C3776 = C48639 - (C48219 * C48210) / C47180;
    const double C47356 = C47354 / C47180;
    const double C47329 = C48329 - C47325;
    const double C14932 = C14909 - C14910;
    const double C18431 = C15089 - C15090;
    const double C18425 = C15090 - C15089;
    const double C16783 = C16361 - C16362;
    const double C16780 = C16355 - C16356;
    const double C18432 = C15091 - C15092;
    const double C18426 = C15092 - C15091;
    const double C16781 = C16357 - C16358;
    const double C30372 = C30349 - C30350;
    const double C31788 = C30515 - C30516;
    const double C31772 = C30516 - C30515;
    const double C31792 = C31556 - C31555;
    const double C31784 = C31555 - C31556;
    const double C32364 = C31781 - C31782;
    const double C32362 = C31777 - C31778;
    const double C41073 = C32370 - C32369;
    const double C47338 = C47334 + C48416;
    const double C47366 = C47363 - C47365;
    const double C36041 = C48412 * C143;
    const double C36035 = C48412 * C132;
    const double C36028 = C48412 * C142;
    const double C36022 = C48412 * C130;
    const double C36016 = C48412 * C141;
    const double C36010 = C48412 * C128;
    const double C36221 = C48412 * C279;
    const double C36215 = C48412 * C269;
    const double C36209 = C48412 * C278;
    const double C36203 = C48412 * C267;
    const double C36391 = C48412 * C403;
    const double C36385 = C48412 * C393;
    const double C36379 = C48412 * C402;
    const double C36373 = C48412 * C391;
    const double C37571 = C48412 * C591;
    const double C37565 = C48412 * C582;
    const double C37546 = C48412 * C277;
    const double C37540 = C48412 * C265;
    const double C37785 = C48412 * C693;
    const double C37779 = C48412 * C684;
    const double C38137 = C48412 * C590;
    const double C38131 = C48412 * C580;
    const double C38343 = C48412 * C692;
    const double C38337 = C48412 * C682;
    const double C46590 = C48412 * C1241;
    const double C46584 = C48412 * C1233;
    const double C46755 = C48412 * C1431;
    const double C46749 = C48412 * C1423;
    const double C48582 = C48412 * C48406;
    const double C48620 = C48584 + C48412;
    const double C4913 = C4905 + C4906;
    const double C12935 = C12922 + C12923;
    const double C12934 = C12920 + C12921;
    const double C2472 = C48631 * C395;
    const double C2465 = C48631 * C403;
    const double C2459 = C48631 * C393;
    const double C2453 = C48631 * C402;
    const double C2447 = C48631 * C391;
    const double C2656 = C48631 * C686;
    const double C2650 = C48631 * C693;
    const double C2644 = C48631 * C684;
    const double C2842 = C48631 * C937;
    const double C2836 = C48631 * C944;
    const double C2830 = C48631 * C935;
    const double C9892 = C48631 * C1432;
    const double C9886 = C48631 * C1425;
    const double C9879 = C48631 * C1431;
    const double C9873 = C48631 * C1423;
    const double C9867 = C48631 * C692;
    const double C9861 = C48631 * C682;
    const double C10320 = C48631 * C1891;
    const double C10314 = C48631 * C1885;
    const double C10501 = C48631 * C2325;
    const double C10495 = C48631 * C2316;
    const double C10489 = C48631 * C2322;
    const double C10483 = C48631 * C2310;
    const double C24723 = C48631 * C2312;
    const double C36037 = C48419 * C395;
    const double C36030 = C48419 * C403;
    const double C36024 = C48419 * C393;
    const double C36018 = C48419 * C402;
    const double C36012 = C48419 * C391;
    const double C36217 = C48419 * C686;
    const double C36211 = C48419 * C693;
    const double C36205 = C48419 * C684;
    const double C36387 = C48419 * C937;
    const double C36381 = C48419 * C944;
    const double C36375 = C48419 * C935;
    const double C37573 = C48419 * C1432;
    const double C37567 = C48419 * C1425;
    const double C37548 = C48419 * C692;
    const double C37542 = C48419 * C682;
    const double C37781 = C48419 * C2312;
    const double C38139 = C48419 * C1431;
    const double C38133 = C48419 * C1423;
    const double C38345 = C48419 * C2322;
    const double C38339 = C48419 * C2310;
    const double C46592 = C48419 * C1891;
    const double C46586 = C48419 * C1885;
    const double C46757 = C48419 * C2325;
    const double C46751 = C48419 * C2316;
    const double C48586 = C48419 / C47186;
    const double C48583 = C48419 * C48406;
    const double C19815 = C48645 - (C48412 * C48408) / C47180;
    const double C14925 = C14891 * C133;
    const double C14919 = C14891 * C122;
    const double C14914 = C14891 * C131;
    const double C14908 = C14891 * C121;
    const double C14902 = C14891 * C129;
    const double C14896 = C14891 * C120;
    const double C15105 = C14891 * C270;
    const double C15099 = C14891 * C261;
    const double C15093 = C14891 * C268;
    const double C15087 = C14891 * C260;
    const double C15275 = C14891 * C394;
    const double C15269 = C14891 * C385;
    const double C15263 = C14891 * C392;
    const double C15257 = C14891 * C384;
    const double C16371 = C14891 * C583;
    const double C16365 = C14891 * C576;
    const double C16360 = C14891 * C581;
    const double C16354 = C14891 * C575;
    const double C16348 = C14891 * C266;
    const double C16342 = C14891 * C259;
    const double C16791 = C14891 * C1234;
    const double C16785 = C14891 * C1229;
    const double C16968 = C14891 * C1424;
    const double C16962 = C14891 * C1419;
    const double C16956 = C14891 * C683;
    const double C16950 = C14891 * C677;
    const double C18644 = C14891 * C685;
    const double C18638 = C14891 * C678;
    const double C2484 = C2463 - C2464;
    const double C2481 = C2457 - C2458;
    const double C24515 = C2647 - C2648;
    const double C24509 = C2648 - C2647;
    const double C24512 = C2641 - C2642;
    const double C24506 = C2642 - C2641;
    const double C10308 = C9877 - C9878;
    const double C10305 = C9871 - C9872;
    const double C171 = C158 - C159;
    const double C4911 = C4893 - C4894;
    const double C11518 = C1256 * C47206;
    const double C23666 = C1256 * C23174;
    const double C6325 = C6299 + C6300;
    const double C6323 = C6295 + C6296;
    const double C9264 = C9254 + C9255;
    const double C172 = C160 - C161;
    const double C3787 = C293 - C292;
    const double C3919 = C292 - C293;
    const double C4910 = C4891 - C4892;
    const double C30376 = C30357 - C30358;
    const double C1082 = C1074 - C1075;
    const double C1264 = C1075 - C1074;
    const double C6088 = C5058 - C5057;
    const double C6304 = C5057 - C5058;
    const double C34419 = C30524 - C30523;
    const double C34619 = C30523 - C30524;
    const double C2483 = C2461 - C2462;
    const double C14933 = C14911 - C14912;
    const double C145 =
        (4 * (2 * C47456 + ae * C47457 + C47424 * C47476) +
         ae * (3 * C47457 + C47424 * C47477) +
         C47424 * (3 * C47476 + ae * C47477 +
                   C47424 * (2 * C47472 + ae * C47473 +
                             C47424 * (C47468 + ae * C47424 * C47469 +
                                       C47424 * (ae * C47469 +
                                                 C47424 * std::pow(C47428, 7) *
                                                     bs[7] * C47435))))) /
        C47185;
    const double C280 =
        ((yP - yQ) * (2 * C47456 + ae * C47457 + C47424 * C47476)) / C47185;
    const double C404 =
        (be * (2 * (C47424 * C47520 + C47516 * ae) +
               C47424 *
                   (C47520 +
                    C47424 * (C47424 * C47447 * C47448 * C47515 + C47519 * ae) +
                    C47424 * C47519 * ae) +
               (C47516 + C47519 * C47449) * ae) +
         C47423 * (2 * C47456 + ae * C47457 + C47424 * C47476)) /
        C47185;
    const double C592 = (C47442 + ae * C47445 + C47424 * C47456 +
                         C47476 * std::pow(yP - yQ, 2)) /
                        C47185;
    const double C694 =
        (be * C47554 * (C47520 + C47424 * C47530 + C47524 * ae) +
         C47423 * C47554 * C47476) /
        C47185;
    const double C11522 = C11150 * C47206;
    const double C23670 = C11150 * C23174;
    const double C12376 = C12362 + C12363;
    const double C12374 = C12358 + C12359;
    const double C48063 = C48061 + C48056;
    const double C1069 = C291 - C290;
    const double C1261 = C290 - C291;
    const double C6089 = C5060 - C5059;
    const double C6305 = C5059 - C5060;
    const double C4908 = C4887 - C4888;
    const double C14935 = C14915 - C14916;
    const double C30374 = C30353 - C30354;
    const double C1263 = C1073 - C1072;
    const double C1257 = C1072 - C1073;
    const double C12364 = C6311 - C6312;
    const double C12360 = C6312 - C6311;
    const double C6302 = C5053 - C5054;
    const double C6298 = C5054 - C5053;
    const double C18434 = C15095 - C15096;
    const double C18428 = C15096 - C15095;
    const double C31790 = C30519 - C30520;
    const double C31774 = C30520 - C30519;
    const double C9269 = C9265 + C9266;
    const double C397 = (C47423 * (3 * C47457 + C47424 * C47477) +
                         (3 * C47810 + C47424 * C47815) * be) /
                        C47180;
    const double C688 =
        (C47423 * C47554 * C47477 + C47554 * C47815 * be) / C47180;
    const double C939 =
        (2 * C47445 + C47424 * C47457 +
         C47423 * (C47423 * C47477 + C47815 * be) + C47423 * C47815 * be) /
        C47180;
    const double C124 = 4 * (2 * C47808 + C47424 * C47810) +
                        C47424 * (3 * C47810 + C47424 * C47815);
    const double C263 = C47554 * (3 * C47810 + C47424 * C47815);
    const double C387 = C47423 * (3 * C47810 + C47424 * C47815);
    const double C578 = 2 * C47808 + C47424 * C47810 + C47815 * C47603;
    const double C680 = C47423 * C47554 * C47815;
    const double C931 = 2 * C47808 + C47424 * C47810 + C47815 * C47647;
    const double C1232 =
        2 * C47554 * C47815 + C47554 * (C47815 + C47545 * C47603);
    const double C1422 = C47423 * (C47815 + C47545 * C47603);
    const double C2813 =
        2 * C47423 * C47815 + C47423 * (C47815 + C47545 * C47647);
    const double C2658 = C48609 * C2314;
    const double C6534 = C48416 * C2314;
    const double C15104 = C48609 * C2314;
    const double C34821 = C48416 * C2314;
    const double C36219 = C36005 * C2314;
    const double C2657 = C2443 * C2306;
    const double C6533 = C4871 * C2306;
    const double C15103 = C14893 * C2306;
    const double C34820 = C30337 * C2306;
    const double C3673 =
        (3 * (C47457 + C47423 * C47968 + C47966 * be) +
         C47423 * (2 * C47968 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47541 * be) +
                             C47423 * C47541 * be) +
                   C47969 * be) +
         (2 * C47966 + C47423 * C47969) * be) /
        C47180;
    const double C9888 = C48609 * C2318;
    const double C12575 = C48416 * C2318;
    const double C16370 = C48609 * C2318;
    const double C32016 = C48416 * C2318;
    const double C37569 = C36005 * C2318;
    const double C9012 = C113 * C1708;
    const double C11284 = C113 * C1883;
    const double C12368 = C4871 * C1883;
    const double C31797 = C30337 * C1883;
    const double C9887 = C2443 * C2308;
    const double C12574 = C4871 * C2308;
    const double C16369 = C14893 * C2308;
    const double C32015 = C30337 * C2308;
    const double C17530 =
        (3 * (C47940 + C47423 * C48047 + C48043 * be) +
         C47423 * (2 * C48047 +
                   C47423 * (C48041 +
                             C47423 * (C47423 * C47554 * C47424 * C47493 +
                                       C48044 * be) +
                             C47423 * C48044 * be) +
                   C48048 * be) +
         (2 * C48043 + C47423 * C48048) * be) /
        C47180;
    const double C20139 = C48622 * C3671;
    const double C33547 = C48622 * C3671;
    const double C48076 = C47459 + C48074;
    const double C47547 = C47546 + C47537;
    const double C2326 =
        (C47456 + C47472 * C47603 + be * C47423 * C47624 +
         C47423 * (be * C47624 + C47423 * (C47472 + C47496 * C47603))) /
        C47185;
    const double C1713 = (3 * (C47565 + C47530 * C47603) +
                          C47554 * (2 * C47616 + C47554 * C47624)) /
                         C47180;
    const double C1888 = (C47423 * (2 * C47616 + C47554 * C47624)) / C47180;
    const double C2319 = (C47565 + C47530 * C47603 + C47624 * C47647) / C47180;
    const double C3672 = (3 * (C47565 + C47530 * C47647) +
                          C47423 * (2 * C47652 + C47423 * C47657)) /
                         C47180;
    const double C47752 = C47472 + C47748;
    const double C9592 =
        (2 * C47936 + C47554 * C47973 +
         C47423 * (C47423 * C47989 + C47998 * be) + C47423 * C47998 * be) /
        C47180;
    const double C10476 =
        (2 * (C47423 * C47989 + C47998 * be) +
         C47423 * (C47989 +
                   C47423 * (C47423 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603)) +
                             C48007 * be) +
                   C47423 * C48007 * be) +
         (C47998 + C48007 * C47647) * be) /
        C47180;
    const double C8999 = 4 * (2 * C47904 + C47554 * C47914) +
                         C47554 * (3 * C47914 + C47554 * C47998);
    const double C9097 = C47423 * (3 * C47914 + C47554 * C47998);
    const double C9590 = 2 * C47904 + C47554 * C47914 + C47998 * C47647;
    const double C10475 =
        2 * C47423 * C47998 + C47423 * (C47998 + C48007 * C47647);
    const double C10909 =
        (3 * (C47973 + C47423 * C48037 + C48035 * be) +
         C47423 * (2 * C48037 +
                   C47423 * (C47987 +
                             C47423 * (C47423 * (C47469 + C47493 * C47603) +
                                       C48005 * be) +
                             C47423 * C48005 * be) +
                   C48038 * be) +
         (2 * C48035 + C47423 * C48038) * be) /
        C47180;
    const double C21619 = C48622 * C10907;
    const double C42341 = C48622 * C10907;
    const double C48093 = C47984 + C48091;
    const double C17615 = 4 * (2 * C47950 + C47423 * C47953) +
                          C47423 * (3 * C47953 + C47423 * C48062);
    const double C48113 = C48111 + C48106;
    const double C47570 = C47569 + C47568;
    const double C2652 = C48609 * C2323;
    const double C6530 = C48416 * C2323;
    const double C15098 = C48609 * C2323;
    const double C18647 = C14889 * C2323;
    const double C24729 = C48631 * C2323;
    const double C32012 = C48416 * C2323;
    const double C36213 = C36005 * C2323;
    const double C37787 = C48419 * C2323;
    const double C18649 = C48609 * C3262;
    const double C20001 = C48622 * C3262;
    const double C24731 = C48609 * C3262;
    const double C33409 = C48622 * C3262;
    const double C37789 = C36005 * C3262;
    const double C2651 = C2443 * C2313;
    const double C6529 = C4871 * C2313;
    const double C15097 = C14893 * C2313;
    const double C18646 = C14892 * C2313;
    const double C24728 = C2442 * C2313;
    const double C32011 = C30337 * C2313;
    const double C18648 = C14893 * C3258;
    const double C24730 = C2443 * C3258;
    const double C3676 =
        (3 * (C47456 + be * C47652 + C47423 * C47656) +
         be * (2 * C47652 + C47423 * C47657) +
         C47423 * (2 * C47656 + be * C47657 +
                   C47423 * (C47472 + be * C47423 * C47542 +
                             C47423 * (be * C47542 + C47423 * C47496)))) /
        C47185;
    const double C11153 = C1268 - C1269;
    const double C11151 = C1269 - C1268;
    const double C12365 = C6313 - C6314;
    const double C12361 = C6314 - C6313;
    const double C31794 = C31560 - C31559;
    const double C31786 = C31559 - C31560;
    const double C9259 = C9010 - C9011;
    const double C14268 = C12933 - C12932;
    const double C41075 = C32374 - C32373;
    const double C10310 = C9881 - C9882;
    const double C16784 = C16363 - C16364;
    const double C21627 = C48622 * C10911;
    const double C42349 = C48622 * C10911;
    const double C17621 =
        (4 * (2 * C47648 + be * C47650 + C47423 * C47741) +
         be * (3 * C47650 + C47423 * C47742) +
         C47423 *
             (3 * C47741 + be * C47742 +
              C47423 * (2 * C47735 + be * C47737 +
                        C47423 * (C47468 + be * C47423 * C47536 +
                                  C47423 * (be * C47536 + C47423 * C47492))))) /
        C47185;
    const double C47503 = C47424 * C47501;
    const double C1239 =
        (2 * C47554 * C47477 + C47554 * (C47477 + C47501 * C47603)) / C47180;
    const double C1429 = (C47423 * (C47477 + C47501 * C47603) +
                          (C47815 + C47545 * C47603) * be) /
                         C47180;
    const double C2820 =
        (2 * (C47423 * C47477 + C47815 * be) +
         C47423 * (C47477 + C47423 * (C47423 * C47501 + C47545 * be) +
                   C47423 * C47545 * be) +
         (C47815 + C47545 * C47647) * be) /
        C47180;
    const double C47502 = C47424 * C47500;
    const double C47641 = C47554 * C47500;
    const double C47661 = C47423 * C47500;
    const double C1243 = (2 * C47554 * C47476 +
                          C47554 * (C47476 + C47500 * std::pow(C47554, 2))) /
                         C47185;
    const double C1718 =
        (3 * (C47476 + C47500 * C47603) +
         C47554 * (2 * C47554 * C47500 +
                   C47554 * (C47500 + (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47185;
    const double C9006 =
        (4 * (2 * C47638 + C47554 * C47670) +
         C47554 * (3 * C47670 +
                   C47554 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47185;
    const double C9104 =
        (be * (3 * C47624 +
               C47554 * (2 * C47639 + C47554 * (C47542 + C47588 * C47603))) +
         C47423 * (3 * C47670 +
                   C47554 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47185;
    const double C47727 = C47722 + C47725;
    const double C47753 = C47423 * C47749;
    const double C9252 =
        (5 * (3 * C47667 + C47554 * C47679) +
         C47554 * (4 * C47679 +
                   C47554 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47185;
    const double C9355 =
        (be * (4 * (2 * C47636 + C47554 * C47682) +
               C47554 * (3 * C47682 +
                         C47554 * (2 * C47554 * C47536 +
                                   C47554 * (C47536 + C47585 * C47603)))) +
         C47423 * (4 * C47679 +
                   C47554 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47185;
    const double C9596 = (2 * C47635 + C47554 * C47667 + be * C47423 * C47686 +
                          C47423 * (be * C47686 + C47423 * C47679)) /
                         C47185;
    const double C47771 = C47766 + C47769;
    const double C47791 = C47423 * C47789;
    const double C47591 = C47590 + C47586;
    const double C47701 = C47554 * C47700;
    const double C10047 =
        (2 * (be * C47624 + C47423 * C47670) + be * (C47624 + C47700 * C47647) +
         C47423 * (C47670 + be * C47423 * C47700 +
                   C47423 * (be * C47700 +
                             C47423 * (C47496 + (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47185;
    const double C10045 =
        (2 * C47423 * C47624 + C47423 * (C47624 + C47700 * C47647)) / C47180;
    const double C47728 = C47639 + C47726;
    const double C47754 = C47423 * C47751;
    const double C47695 = C47554 * C47694;
    const double C10478 =
        (2 * (be * C47686 + C47423 * C47679) + be * (C47686 + C47694 * C47647) +
         C47423 * (C47679 + be * C47423 * C47694 +
                   C47423 * (be * C47694 +
                             C47423 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47185;
    const double C10477 =
        (2 * C47423 * C47686 + C47423 * (C47686 + C47694 * C47647)) / C47180;
    const double C10912 =
        (3 * (C47667 + be * C47714 + C47423 * C47718) +
         be * (2 * C47714 + C47423 * C47719) +
         C47423 * (2 * C47718 + be * C47719 +
                   C47423 * (C47677 + be * C47423 * C47692 +
                             C47423 * (be * C47692 +
                                       C47423 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47185;
    const double C10910 = (3 * (C47621 + C47682 * C47647) +
                           C47423 * (2 * C47714 + C47423 * C47719)) /
                          C47180;
    const double C47772 = C47764 + C47770;
    const double C47792 = C47423 * C47790;
    const double C9267 = C9258 * C8916;
    const double C14278 = C14265 + C14266;
    const double C165 = C48329 * C136;
    const double C297 = C48329 * C273;
    const double C1079 = C48329 * C586;
    const double C47820 = C47818 + C47819;
    const double C2637 =
        (C47554 * C47477 + C47423 * (C47423 * C47554 * C47501 + C47925 * be) +
         C47423 * C47925 * be) /
        C47180;
    const double C2636 = C47554 * C47815 + C47925 * C47647;
    const double C9855 =
        (2 * C47940 + C47554 * C47977 +
         C47423 * (C47423 * (2 * C47554 * C47481 +
                             C47554 * (C47481 + C47424 * C47493 * C47603)) +
                   C48016 * be) +
         C47423 * C48016 * be) /
        C47180;
    const double C9000 = 4 * (2 * C47907 + C47554 * C47918) +
                         C47554 * (3 * C47918 + C47554 * C48016);
    const double C9098 = C47423 * (3 * C47918 + C47554 * C48016);
    const double C9854 = 2 * C47907 + C47554 * C47918 + C48016 * C47647;
    const double C17616 = 4 * (2 * C47958 + C47423 * C47961) +
                          C47423 * (3 * C47961 + C47423 * C48077);
    const double C48009 = C48001 + C48008;
    const double C17849 = 4 * (2 * C48027 + C47423 * C48030) +
                          C47423 * (3 * C48030 + C47423 * C48094);
    const double C48116 = C48104 + C48114;
    const double C9262 = C113 * C9002;
    const double C9363 = C113 * C9100;
    const double C14275 = C4871 * C9100;
    const double C41082 = C30337 * C9100;
    const double C10321 = C2443 * C9593;
    const double C14419 = C4871 * C9593;
    const double C16795 = C14893 * C9593;
    const double C41226 = C30337 * C9593;
    const double C48576 = C48372 * C48366;
    const double C48614 = C48578 + C48372;
    const double C48580 = C48379 / C47186;
    const double C48577 = C48379 * C48366;
    const double C11013 = C48643 - (C48372 * C48368) / C47180;
    const double C47229 = C47220 - C47226;
    const double C47219 = C47214 * be;
    const double C118 =
        (C47241 / C47186 + (0 * ae) / C47180) / C47186 - (0 * be) / C47180;
    const double C3785 = C47241 / C47186 - (0 * be) / C47180;
    const double C22092 = C47241 / C47186 + (0 * ae) / C47180;
    const double C47218 = C47213 * ae;
    const double C1064 =
        ((-C47181 / C47180) / C47186 - (C47199 * be) / C47180) / C47186 -
        ((C47178 * ((-C47188) / C47186 - (C47213 * be) / C47180) + C23167) *
         be) /
            C47180 +
        (-C47200 / C47180) / C47186 - (0 * be) / C47180;
    const double C1065 =
        ((-C47188) / C47186 - (C47213 * be) / C47180) / C47186 -
        ((C47178 * ((-C47200 / C47180) / C47186 - (0 * be) / C47180) + C48224) *
         be) /
            C47180;
    const double C23173 = (-C47188) / C47186 - (C47213 * be) / C47180;
    const double C48588 = C48550 / C47180;
    const double C48626 = C48592 / C47186;
    const double C48627 = C48594 + C48558;
    const double C3778 = C48558 - C48225 / C47192;
    const double C48591 = C48554 / C47180;
    const double C47358 = C47353 - C47356;
    const double C47333 = C47329 * ae;
    const double C30336 = (-C47315) / C47186 - (C47329 * be) / C47180;
    const double C47342 = C47338 * be;
    const double C36027 = C47366 * C930;
    const double C36021 = C47366 * C936;
    const double C36015 = C47366 * C929;
    const double C36218 = C47366 * C2306;
    const double C36212 = C47366 * C2313;
    const double C36206 = C47366 * C2305;
    const double C36388 = C47366 * C2812;
    const double C36382 = C47366 * C2817;
    const double C36376 = C47366 * C2811;
    const double C37568 = C47366 * C2308;
    const double C37551 = C47366 * C2311;
    const double C37545 = C47366 * C2304;
    const double C37788 = C47366 * C3258;
    const double C37782 = C47366 * C3253;
    const double C38140 = C47366 * C2317;
    const double C38134 = C47366 * C2307;
    const double C38346 = C47366 * C3256;
    const double C38340 = C47366 * C3252;
    const double C46593 = C47366 * C9593;
    const double C46758 = C47366 * C10043;
    const double C46752 = C47366 * C10040;
    const double C17446 =
        (C47366 / C47186 + (0 * ae) / C47180) / C47186 - (0 * be) / C47180;
    const double C19822 = C47366 / C47186 - (0 * be) / C47180;
    const double C33230 = C47366 / C47186 + (0 * ae) / C47180;
    const double C48617 = C48582 / C47180;
    const double C48636 = C48620 / C47186;
    const double C12937 = C12935 * C48551;
    const double C14264 = C12935 * C48214;
    const double C29503 = C12935 * C23167;
    const double C14263 = C12934 * C8916;
    const double C2485 = C2465 - C2466;
    const double C2482 = C2459 - C2460;
    const double C24516 = C2649 - C2650;
    const double C24510 = C2650 - C2649;
    const double C24513 = C2643 - C2644;
    const double C24507 = C2644 - C2643;
    const double C10309 = C9879 - C9880;
    const double C10306 = C9873 - C9874;
    const double C48637 = C48621 + C48586;
    const double C19817 = C48586 - C48417 / C47192;
    const double C48619 = C48583 / C47180;
    const double C19849 = C19815 * C142;
    const double C19841 = C19815 * C130;
    const double C19832 = C19815 * C141;
    const double C19824 = C19815 * C128;
    const double C19995 = C19815 * C278;
    const double C19987 = C19815 * C267;
    const double C20141 = C19815 * C402;
    const double C20133 = C19815 * C391;
    const double C21100 = C19815 * C277;
    const double C21092 = C19815 * C265;
    const double C21475 = C19815 * C590;
    const double C21467 = C19815 * C580;
    const double C21621 = C19815 * C692;
    const double C21613 = C19815 * C682;
    const double C14934 = C14913 - C14914;
    const double C14931 = C14907 - C14908;
    const double C18433 = C15093 - C15094;
    const double C18427 = C15094 - C15093;
    const double C18430 = C15087 - C15088;
    const double C18424 = C15088 - C15087;
    const double C16782 = C16359 - C16360;
    const double C16779 = C16353 - C16354;
    const double C4915 = C4909 + C4910;
    const double C1724 = C1082 * C1066;
    const double C8294 = C1082 * C7740;
    const double C26471 = C1082 * C47241;
    const double C6091 = C6087 + C6088;
    const double C6327 = C6303 + C6304;
    const double C167 = C48329 * C145;
    const double C295 = C48329 * C280;
    const double C5068 = C48574 * C280;
    const double C30534 = C30334 * C280;
    const double C419 = C48329 * C404;
    const double C2478 = C48631 * C404;
    const double C4895 = C48416 * C404;
    const double C5222 = C48574 * C404;
    const double C14928 = C14889 * C404;
    const double C30361 = C48416 * C404;
    const double C30688 = C30334 * C404;
    const double C36043 = C48419 * C404;
    const double C1076 = C48329 * C592;
    const double C6320 = C48574 * C592;
    const double C31566 = C30334 * C592;
    const double C1443 = C48329 * C694;
    const double C2662 = C48631 * C694;
    const double C5062 = C48416 * C694;
    const double C6536 = C48574 * C694;
    const double C15108 = C14889 * C694;
    const double C30528 = C48416 * C694;
    const double C34823 = C30334 * C694;
    const double C36223 = C48419 * C694;
    const double C12924 = C12374 * C47206;
    const double C29504 = C12374 * C23174;
    const double C17617 =
        (4 * (2 * C47952 + C47423 * C48063 + C47953 * be) +
         C47423 *
             (3 * C48063 +
              C47423 *
                  (2 * C48055 +
                   C47423 * (C47453 + C47423 * (C47423 * C47469 + C47525 * be) +
                             C47423 * C47525 * be) +
                   C48057 * be) +
              C48062 * be) +
         (3 * C47953 + C47423 * C48062) * be) /
        C47180;
    const double C4914 = C4907 + C4908;
    const double C1723 = C1257 * C1059;
    const double C8293 = C1257 * C48625;
    const double C11519 = C1257 * C48224;
    const double C23667 = C1257 * C48224;
    const double C26470 = C1257 * C48227;
    const double C6326 = C6301 + C6302;
    const double C6324 = C6297 + C6298;
    const double C421 = C48329 * C397;
    const double C4900 = C48416 * C397;
    const double C30366 = C48416 * C397;
    const double C4052 = C48329 * C688;
    const double C5066 = C48416 * C688;
    const double C30532 = C48416 * C688;
    const double C2474 = C48609 * C939;
    const double C5220 = C48416 * C939;
    const double C14924 = C48609 * C939;
    const double C30686 = C48416 * C939;
    const double C36039 = C36005 * C939;
    const double C164 = C113 * C124;
    const double C296 = C113 * C263;
    const double C420 = C113 * C387;
    const double C4899 = C4871 * C387;
    const double C30365 = C30337 * C387;
    const double C1078 = C113 * C578;
    const double C4051 = C113 * C680;
    const double C5065 = C4871 * C680;
    const double C30531 = C30337 * C680;
    const double C2473 = C2443 * C931;
    const double C5219 = C4871 * C931;
    const double C14923 = C14893 * C931;
    const double C30685 = C30337 * C931;
    const double C36038 = C47366 * C931;
    const double C48078 = C48076 + C48071;
    const double C47573 = C47424 * C47547;
    const double C47578 = 3 * C47547;
    const double C47618 = C47554 * C47547;
    const double C47660 = be * C47547;
    const double C47659 = C47423 * C47547;
    const double C696 =
        (be * C47554 *
             (3 * C47547 +
              C47424 * (2 * C47542 +
                        C47424 * (C47536 +
                                  C47424 * (C47424 * C47483 * C47484 * C47515 +
                                            C47535 * ae) +
                                  C47424 * C47535 * ae) +
                        C47541 * ae) +
              C47545 * ae) +
         C47423 * C47554 *
             (3 * C47500 + ae * C47501 +
              C47424 * (2 * C47496 + ae * C47497 +
                        C47424 * (C47492 + ae * C47424 * C47493 +
                                  C47424 * (ae * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47185;
    const double C9894 = C48609 * C2326;
    const double C12579 = C48416 * C2326;
    const double C16376 = C48609 * C2326;
    const double C32020 = C48416 * C2326;
    const double C37575 = C36005 * C2326;
    const double C9014 = C113 * C1713;
    const double C11286 = C113 * C1888;
    const double C12372 = C4871 * C1888;
    const double C31801 = C30337 * C1888;
    const double C9893 = C2443 * C2319;
    const double C12578 = C4871 * C2319;
    const double C16375 = C14893 * C2319;
    const double C32019 = C30337 * C2319;
    const double C37574 = C47366 * C2319;
    const double C10316 = C48609 * C9592;
    const double C14416 = C48416 * C9592;
    const double C16790 = C48609 * C9592;
    const double C41223 = C48416 * C9592;
    const double C46588 = C36005 * C9592;
    const double C9260 = C113 * C8999;
    const double C9361 = C113 * C9097;
    const double C14271 = C4871 * C9097;
    const double C41078 = C30337 * C9097;
    const double C10315 = C2443 * C9590;
    const double C14415 = C4871 * C9590;
    const double C16789 = C14893 * C9590;
    const double C41222 = C30337 * C9590;
    const double C46587 = C47366 * C9590;
    const double C48095 = C48093 + C48086;
    const double C48115 = C47423 * C48113;
    const double C945 =
        (C47442 + ae * C47445 + C47424 * C47456 + be * C47423 * C47570 +
         C47423 * (be * C47570 + C47423 * C47476)) /
        C47185;
    const double C1433 = (be * (C47570 + C47547 * C47603) +
                          C47423 * (C47476 + C47500 * C47603)) /
                         C47185;
    const double C2824 = (2 * (be * C47570 + C47423 * C47476) +
                          be * (C47570 + C47547 * std::pow(C47423, 2)) +
                          C47423 * (C47476 + be * C47423 * C47547 +
                                    C47423 * (be * C47547 + C47423 * C47500))) /
                         C47185;
    const double C135 = (3 * (C47561 + C47424 * C47565 + C47808 * ae) +
                         C47424 * (2 * C47565 + C47424 * C47570 + C47810 * ae) +
                         (2 * C47808 + C47424 * C47810) * ae) /
                        C47180;
    const double C272 =
        (C47554 * (2 * C47565 + C47424 * C47570 + C47810 * ae)) / C47180;
    const double C396 =
        (C47423 * (2 * C47565 + C47424 * C47570 + C47810 * ae)) / C47180;
    const double C585 =
        (C47561 + C47424 * C47565 + C47808 * ae + C47570 * C47603) / C47180;
    const double C687 = (C47423 * C47554 * C47570) / C47180;
    const double C938 =
        (C47561 + C47424 * C47565 + C47808 * ae + C47570 * C47647) / C47180;
    const double C1238 =
        (2 * C47554 * C47570 + C47554 * (C47570 + C47547 * C47603)) / C47180;
    const double C1428 = (C47423 * (C47570 + C47547 * C47603)) / C47180;
    const double C2819 =
        (2 * C47423 * C47570 + C47423 * (C47570 + C47547 * C47647)) / C47180;
    const double C24517 = C2651 - C2652;
    const double C24511 = C2652 - C2651;
    const double C18435 = C15097 - C15098;
    const double C18429 = C15098 - C15097;
    const double C20147 = C48622 * C3676;
    const double C33555 = C48622 * C3676;
    const double C11523 = C11151 * C48224;
    const double C23671 = C11151 * C48224;
    const double C12377 = C12364 + C12365;
    const double C12375 = C12360 + C12361;
    const double C9268 = C9259 * C48214;
    const double C14279 = C14267 + C14268;
    const double C47505 = C47485 + C47503;
    const double C47504 = C47486 + C47502;
    const double C1273 = C48329 * C1243;
    const double C47755 = C47752 + C47753;
    const double C10322 = C48609 * C9596;
    const double C14420 = C48416 * C9596;
    const double C16796 = C48609 * C9596;
    const double C41227 = C48416 * C9596;
    const double C46594 = C36005 * C9596;
    const double C47793 = C47781 + C47791;
    const double C47592 = C47424 * C47591;
    const double C47626 = C47591 * C47603;
    const double C47642 = C47554 * C47591;
    const double C47662 = C47591 * C47647;
    const double C1893 =
        (be * (2 * C47554 * C47547 + C47554 * (C47547 + C47591 * C47603)) +
         C47423 * (2 * C47554 * C47500 +
                   C47554 * (C47500 + (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47185;
    const double C47702 = C47698 + C47701;
    const double C17532 =
        (3 * (C47638 + be * C47721 + C47423 * C47727) +
         be * (2 * C47721 + C47423 * C47728) +
         C47423 * (2 * C47727 + be * C47728 +
                   C47423 * (C47723 + be * C47423 * C47724 +
                             C47423 * (be * C47724 +
                                       C47423 * C47554 *
                                           (ae * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47185;
    const double C17531 = (3 * (C47616 + C47639 * C47647) +
                           C47423 * (2 * C47721 + C47423 * C47728)) /
                          C47180;
    const double C47756 = C47750 + C47754;
    const double C47696 = C47688 + C47695;
    const double C17852 =
        (4 * (2 * C47711 + be * C47712 + C47423 * C47771) +
         be * (3 * C47712 + C47423 * C47772) +
         C47423 * (3 * C47771 + be * C47772 +
                   C47423 * (2 * C47767 + be * C47768 +
                             C47423 * (C47760 + be * C47423 * C47761 +
                                       C47423 * (be * C47761 +
                                                 C47423 * C47554 *
                                                     std::pow(C47426, 8) *
                                                     bs[8] * C47435))))) /
        C47185;
    const double C17851 = (4 * (2 * C47707 + C47423 * C47712) +
                           C47423 * (3 * C47712 + C47423 * C47772)) /
                          C47180;
    const double C47794 = C47779 + C47792;
    const double C14280 = C14278 * C8916;
    const double C125 = 5 * (3 * C47810 + C47424 * C47815) +
                        C47424 * (4 * C47815 + C47424 * C47820);
    const double C264 = C47554 * (4 * C47815 + C47424 * C47820);
    const double C388 = C47423 * (4 * C47815 + C47424 * C47820);
    const double C579 = 3 * C47810 + C47424 * C47815 + C47820 * C47603;
    const double C681 = C47423 * C47554 * C47820;
    const double C932 = 3 * C47810 + C47424 * C47815 + C47820 * C47647;
    const double C9594 =
        (3 * C47973 + C47554 * C47989 +
         C47423 * (C47423 * (3 * C47987 +
                             C47554 * (2 * C47554 * C47469 +
                                       C47554 * (C47469 + C47493 * C47603))) +
                   C48009 * be) +
         C47423 * C48009 * be) /
        C47180;
    const double C9249 = 5 * (3 * C47914 + C47554 * C47998) +
                         C47554 * (4 * C47998 + C47554 * C48009);
    const double C9352 = C47423 * (4 * C47998 + C47554 * C48009);
    const double C9591 = 3 * C47914 + C47554 * C47998 + C48009 * C47647;
    const double C18079 = 5 * (3 * C47953 + C47423 * C48062) +
                          C47423 * (4 * C48062 + C47423 * C48116);
    const double C48611 = C48576 / C47180;
    const double C48633 = C48614 / C47186;
    const double C48634 = C48615 + C48580;
    const double C11015 = C48580 - C48377 / C47192;
    const double C48613 = C48577 / C47180;
    const double C47223 = C47219 / C47180;
    const double C47222 = C47218 / C47180;
    const double C1730 = C1720 * C1064;
    const double C1722 = C1256 * C1065;
    const double C23668 = C9256 * C23173;
    const double C23664 = C1720 * C23173;
    const double C29502 = C12934 * C23173;
    const double C48647 = C48588 + C48639;
    const double C3777 = C48626 - (C48227 * C48210) / C47180;
    const double C105 = C48627 / C47186 - C48225 / C48595;
    const double C48640 = C48591 + C48626;
    const double C47337 = C47333 / C47180;
    const double C30363 = C30336 * C123;
    const double C30360 = C30336 * C133;
    const double C30356 = C30336 * C122;
    const double C30352 = C30336 * C131;
    const double C30348 = C30336 * C121;
    const double C30344 = C30336 * C129;
    const double C30340 = C30336 * C120;
    const double C30529 = C30336 * C262;
    const double C30525 = C30336 * C270;
    const double C30521 = C30336 * C261;
    const double C30517 = C30336 * C268;
    const double C30513 = C30336 * C260;
    const double C30683 = C30336 * C386;
    const double C30679 = C30336 * C394;
    const double C30675 = C30336 * C385;
    const double C30671 = C30336 * C392;
    const double C30667 = C30336 * C384;
    const double C31561 = C30336 * C577;
    const double C31558 = C30336 * C583;
    const double C31554 = C30336 * C576;
    const double C31799 = C30336 * C1236;
    const double C31795 = C30336 * C1230;
    const double C31780 = C30336 * C581;
    const double C31776 = C30336 * C575;
    const double C31768 = C30336 * C266;
    const double C31764 = C30336 * C259;
    const double C32017 = C30336 * C1426;
    const double C32013 = C30336 * C1420;
    const double C32009 = C30336 * C685;
    const double C32005 = C30336 * C678;
    const double C32371 = C30336 * C1234;
    const double C32367 = C30336 * C1229;
    const double C32588 = C30336 * C1424;
    const double C32584 = C30336 * C1419;
    const double C32580 = C30336 * C683;
    const double C32576 = C30336 * C677;
    const double C34818 = C30336 * C679;
    const double C41080 = C30336 * C1711;
    const double C41076 = C30336 * C1707;
    const double C41224 = C30336 * C1886;
    const double C41220 = C30336 * C1882;
    const double C47348 = C47342 / C47180;
    const double C36048 = C36026 - C36027;
    const double C37563 = C36212 - C36213;
    const double C37557 = C36213 - C36212;
    const double C37560 = C36206 - C36207;
    const double C37554 = C36207 - C36206;
    const double C46582 = C38141 - C38140;
    const double C46579 = C38135 - C38134;
    const double C19846 = C19822 * C2812;
    const double C19839 = C19822 * C2817;
    const double C19831 = C19822 * C2811;
    const double C20000 = C19822 * C3258;
    const double C19992 = C19822 * C3253;
    const double C20146 = C19822 * C3672;
    const double C20138 = C19822 * C3667;
    const double C21107 = C19822 * C3256;
    const double C21099 = C19822 * C3252;
    const double C21480 = C19822 * C10043;
    const double C21472 = C19822 * C10040;
    const double C21626 = C19822 * C10908;
    const double C21618 = C19822 * C10905;
    const double C33254 = C33230 * C2812;
    const double C33247 = C33230 * C2817;
    const double C33239 = C33230 * C2811;
    const double C33408 = C33230 * C3258;
    const double C33400 = C33230 * C3253;
    const double C33554 = C33230 * C3672;
    const double C33546 = C33230 * C3667;
    const double C41829 = C33230 * C3256;
    const double C41821 = C33230 * C3252;
    const double C42202 = C33230 * C10043;
    const double C42194 = C33230 * C10040;
    const double C42348 = C33230 * C10908;
    const double C42340 = C33230 * C10905;
    const double C48649 = C48617 + C48645;
    const double C19816 = C48636 - (C48419 * C48408) / C47180;
    const double C14277 = C14263 + C14264;
    const double C2488 = C2484 + C2485;
    const double C2487 = C2481 + C2482;
    const double C24521 = C24515 + C24516;
    const double C24519 = C24509 + C24510;
    const double C24520 = C24512 + C24513;
    const double C24518 = C24506 + C24507;
    const double C10324 = C10308 + C10309;
    const double C10323 = C10305 + C10306;
    const double C33253 = C48637 * C937;
    const double C33244 = C48637 * C944;
    const double C33236 = C48637 * C935;
    const double C33407 = C48637 * C2323;
    const double C33399 = C48637 * C2312;
    const double C33553 = C48637 * C2823;
    const double C33545 = C48637 * C2816;
    const double C41826 = C48637 * C2322;
    const double C41818 = C48637 * C2310;
    const double C42201 = C48637 * C2325;
    const double C42193 = C48637 * C2316;
    const double C42347 = C48637 * C3261;
    const double C42339 = C48637 * C3255;
    const double C17440 = C48637 / C47186 - C48417 / C48595;
    const double C19845 = C19817 * C937;
    const double C19836 = C19817 * C944;
    const double C19828 = C19817 * C935;
    const double C19999 = C19817 * C2323;
    const double C19991 = C19817 * C2312;
    const double C20145 = C19817 * C2823;
    const double C20137 = C19817 * C2816;
    const double C21104 = C19817 * C2322;
    const double C21096 = C19817 * C2310;
    const double C21479 = C19817 * C2325;
    const double C21471 = C19817 * C2316;
    const double C21625 = C19817 * C3261;
    const double C21617 = C19817 * C3255;
    const double C48646 = C48619 + C48636;
    const double C14938 = C14934 + C14935;
    const double C14937 = C14931 + C14932;
    const double C18439 = C18433 + C18434;
    const double C18437 = C18427 + C18428;
    const double C18438 = C18430 + C18431;
    const double C18436 = C18424 + C18425;
    const double C16798 = C16782 + C16783;
    const double C16797 = C16779 + C16780;
    const double C17619 =
        (4 * (2 * C47960 + C47423 * C48078 + C47961 * be) +
         C47423 * (3 * C48078 +
                   C47423 * (2 * C48070 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47582 * be) +
                                       C47423 * C47582 * be) +
                             C48072 * be) +
                   C48077 * be) +
         (3 * C47961 + C47423 * C48077) * be) /
        C47180;
    const double C47575 = C47572 + C47573;
    const double C2324 = (C47554 * C47476 + be * C47423 * C47618 +
                          C47423 * (be * C47618 + C47423 * C47554 * C47500)) /
                         C47185;
    const double C2315 = (C47554 * C47570 + C47618 * C47647) / C47180;
    const double C47663 = C47660 + C47661;
    const double C17850 =
        (4 * (2 * C48029 + C47423 * C48095 + C48030 * be) +
         C47423 * (3 * C48095 +
                   C47423 * (2 * C48089 +
                             C47423 * (C48081 +
                                       C47423 * (C47423 * C47554 * C47493 +
                                                 C48084 * be) +
                                       C47423 * C48084 * be) +
                             C48090 * be) +
                   C48094 * be) +
         (3 * C48030 + C47423 * C48094) * be) /
        C47180;
    const double C48117 = C48098 + C48115;
    const double C2467 = C48609 * C945;
    const double C2848 = C48631 * C945;
    const double C5216 = C48416 * C945;
    const double C14917 = C48609 * C945;
    const double C15278 = C14889 * C945;
    const double C19853 = C19817 * C945;
    const double C30682 = C48416 * C945;
    const double C33261 = C48637 * C945;
    const double C36032 = C36005 * C945;
    const double C36393 = C48419 * C945;
    const double C1451 = C48329 * C1433;
    const double C6322 = C48416 * C1433;
    const double C31568 = C48416 * C1433;
    const double C2850 = C48609 * C2824;
    const double C15280 = C48609 * C2824;
    const double C19855 = C48622 * C2824;
    const double C33263 = C48622 * C2824;
    const double C36395 = C36005 * C2824;
    const double C163 = C113 * C135;
    const double C4901 = C4870 * C135;
    const double C30367 = C30336 * C135;
    const double C294 = C113 * C272;
    const double C5067 = C4870 * C272;
    const double C30533 = C30336 * C272;
    const double C418 = C113 * C396;
    const double C2477 = C2442 * C396;
    const double C4896 = C4871 * C396;
    const double C5221 = C4870 * C396;
    const double C14927 = C14892 * C396;
    const double C30362 = C30337 * C396;
    const double C30687 = C30336 * C396;
    const double C1077 = C113 * C585;
    const double C6319 = C4870 * C585;
    const double C31565 = C30336 * C585;
    const double C1442 = C113 * C687;
    const double C2661 = C2442 * C687;
    const double C5061 = C4871 * C687;
    const double C6535 = C4870 * C687;
    const double C15107 = C14892 * C687;
    const double C30527 = C30337 * C687;
    const double C34822 = C30336 * C687;
    const double C2468 = C2443 * C938;
    const double C2847 = C2442 * C938;
    const double C5215 = C4871 * C938;
    const double C14918 = C14893 * C938;
    const double C15277 = C14892 * C938;
    const double C30681 = C30337 * C938;
    const double C36033 = C47366 * C938;
    const double C1272 = C113 * C1238;
    const double C1450 = C113 * C1428;
    const double C6321 = C4871 * C1428;
    const double C31567 = C30337 * C1428;
    const double C2849 = C2443 * C2819;
    const double C15279 = C14893 * C2819;
    const double C19854 = C19822 * C2819;
    const double C33262 = C33230 * C2819;
    const double C36394 = C47366 * C2819;
    const double C12925 = C12375 * C48224;
    const double C29505 = C12375 * C48224;
    const double C9270 = C9267 + C9268;
    const double C14281 = C14279 * C48214;
    const double C138 = (5 * (3 * C47457 + C47424 * C47477) +
                         C47424 * (4 * C47477 + C47424 * C47505)) /
                        C47180;
    const double C275 = (C47554 * (4 * C47477 + C47424 * C47505)) / C47180;
    const double C399 = (C47423 * (4 * C47477 + C47424 * C47505) +
                         (4 * C47815 + C47424 * C47820) * be) /
                        C47180;
    const double C588 =
        (3 * C47457 + C47424 * C47477 + C47505 * C47603) / C47180;
    const double C690 =
        (C47423 * C47554 * C47505 + C47554 * C47820 * be) / C47180;
    const double C941 =
        (3 * C47457 + C47424 * C47477 +
         C47423 * (C47423 * C47505 + C47820 * be) + C47423 * C47820 * be) /
        C47180;
    const double C146 =
        (5 * (3 * C47476 + ae * C47477 + C47424 * C47504) +
         ae * (4 * C47477 + C47424 * C47505) +
         C47424 *
             (4 * C47504 + ae * C47505 +
              C47424 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C281 =
        ((yP - yQ) * (3 * C47476 + ae * C47477 + C47424 * C47504)) / C47185;
    const double C282 =
        ((yP - yQ) *
         (4 * C47504 + ae * C47505 +
          C47424 * (3 * C47500 + ae * C47501 +
                    C47424 * (2 * C47496 + ae * C47497 +
                              C47424 * (C47492 + ae * C47424 * C47493 +
                                        C47424 * (ae * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47185;
    const double C405 =
        (be * (3 * (C47520 + C47424 * C47530 + C47524 * ae) +
               C47424 * (2 * C47530 +
                         C47424 * (C47526 +
                                   C47424 * (C47424 * C47461 * C47462 * C47515 +
                                             C47525 * ae) +
                                   C47424 * C47525 * ae) +
                         C47529 * ae) +
               (2 * C47524 + C47424 * C47529) * ae) +
         C47423 * (3 * C47476 + ae * C47477 + C47424 * C47504)) /
        C47185;
    const double C406 =
        (be * (4 * (2 * C47530 + C47424 * C47547 + C47529 * ae) +
               C47424 * (3 * C47547 +
                         C47424 * (2 * C47542 +
                                   C47424 * (C47536 +
                                             C47424 * (C47424 * C47483 *
                                                           C47484 * C47515 +
                                                       C47535 * ae) +
                                             C47424 * C47535 * ae) +
                                   C47541 * ae) +
                         C47545 * ae) +
               (3 * C47529 + C47424 * C47545) * ae) +
         C47423 *
             (4 * C47504 + ae * C47505 +
              C47424 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C593 = (2 * C47456 + ae * C47457 + C47424 * C47476 +
                         C47504 * std::pow(yP - yQ, 2)) /
                        C47185;
    const double C594 =
        (3 * C47476 + ae * C47477 + C47424 * C47504 +
         (3 * C47500 + ae * C47501 +
          C47424 *
              (2 * C47496 + ae * C47497 +
               C47424 * (C47492 + ae * C47424 * C47493 +
                         C47424 * (ae * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(yP - yQ, 2)) /
        C47185;
    const double C695 =
        (be * C47554 * (2 * C47530 + C47424 * C47547 + C47529 * ae) +
         C47423 * C47554 * C47504) /
        C47185;
    const double C1244 =
        (2 * C47554 * C47504 +
         C47554 * (C47504 + (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                std::pow(C47554, 2))) /
        C47185;
    const double C47593 = C47579 + C47592;
    const double C47627 = C47547 + C47626;
    const double C3263 =
        (2 * (be * C47618 + C47423 * C47641) +
         be * (C47618 + C47642 * std::pow(C47423, 2)) +
         C47423 * (C47641 + be * C47423 * C47642 +
                   C47423 * (be * C47642 +
                             C47423 * C47554 *
                                 (C47492 + ae * C47424 * C47493 +
                                  C47424 * (ae * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47185;
    const double C3260 =
        (2 * C47423 * C47618 + C47423 * (C47618 + C47642 * C47647)) / C47180;
    const double C47664 = C47547 + C47662;
    const double C9857 =
        (2 * C47638 + C47554 * C47670 + be * C47423 * C47702 +
         C47423 * (be * C47702 +
                   C47423 * (2 * C47554 * C47496 +
                             C47554 * (C47496 + (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47603)))) /
        C47185;
    const double C9004 = (4 * (2 * C47616 + C47554 * C47624) +
                          C47554 * (3 * C47624 + C47554 * C47702)) /
                         C47180;
    const double C9102 = (C47423 * (3 * C47624 + C47554 * C47702)) / C47180;
    const double C9856 =
        (2 * C47616 + C47554 * C47624 + C47702 * C47647) / C47180;
    const double C17622 =
        (4 * (2 * C47656 + be * C47657 + C47423 * C47755) +
         be * (3 * C47657 + C47423 * C47756) +
         C47423 *
             (3 * C47755 + be * C47756 +
              C47423 *
                  (2 * C47749 + be * C47751 +
                   C47423 * (C47496 + be * C47423 * C47588 +
                             C47423 * (be * C47588 +
                                       C47423 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C17620 = (4 * (2 * C47652 + C47423 * C47657) +
                           C47423 * (3 * C47657 + C47423 * C47756)) /
                          C47180;
    const double C9597 =
        (3 * C47667 + C47554 * C47679 + be * C47423 * C47696 +
         C47423 * (be * C47696 +
                   C47423 * (3 * C47677 +
                             C47554 * (2 * C47554 * C47492 +
                                       C47554 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47603))))) /
        C47185;
    const double C9251 = (5 * (3 * C47621 + C47554 * C47686) +
                          C47554 * (4 * C47686 + C47554 * C47696)) /
                         C47180;
    const double C9354 = (C47423 * (4 * C47686 + C47554 * C47696)) / C47180;
    const double C9595 =
        (3 * C47621 + C47554 * C47686 + C47696 * C47647) / C47180;
    const double C18082 =
        (5 * (3 * C47741 + be * C47742 + C47423 * C47793) +
         be * (4 * C47742 + C47423 * C47794) +
         C47423 *
             (4 * C47793 + be * C47794 +
              C47423 *
                  (3 * C47789 + be * C47790 +
                   C47423 * (2 * C47783 + be * C47785 +
                             C47423 * (C47492 + be * C47423 * C47585 +
                                       C47423 * (be * C47585 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C18081 = (5 * (3 * C47650 + C47423 * C47742) +
                           C47423 * (4 * C47742 + C47423 * C47794)) /
                          C47180;
    const double C48648 = C48611 + C48643;
    const double C11014 = C48633 - (C48379 * C48368) / C47180;
    const double C8914 = C48634 / C47186 - C48377 / C48595;
    const double C48644 = C48613 + C48633;
    const double C47225 = C47222 - C47201;
    const double C1732 = C1730 + C1731;
    const double C23673 = C23668 + C23669;
    const double C23672 = C23664 + C23665;
    const double C29506 = C29502 + C29503;
    const double C102 =
        (C48638 + 2 * C48219) / C47186 - (C48647 * C48210) / C47180;
    const double C103 =
        (C48625 + 2 * C48227 + C48647) / C47186 - (C48640 * C48210) / C47180;
    const double C104 = (C48593 + C48224 / C47180 + C48640) / C47186 -
                        (C48627 * C48210) / C47180;
    const double C47341 = C47337 - C47318;
    const double C30377 = C30359 - C30360;
    const double C30375 = C30355 - C30356;
    const double C30373 = C30351 - C30352;
    const double C30371 = C30347 - C30348;
    const double C34420 = C30526 - C30525;
    const double C34620 = C30525 - C30526;
    const double C34418 = C30522 - C30521;
    const double C34618 = C30521 - C30522;
    const double C31789 = C30517 - C30518;
    const double C31773 = C30518 - C30517;
    const double C31787 = C30513 - C30514;
    const double C31771 = C30514 - C30513;
    const double C31793 = C31558 - C31557;
    const double C31785 = C31557 - C31558;
    const double C31791 = C31554 - C31553;
    const double C31783 = C31553 - C31554;
    const double C32363 = C31779 - C31780;
    const double C32361 = C31775 - C31776;
    const double C41074 = C32372 - C32371;
    const double C41072 = C32368 - C32367;
    const double C33257 = C48649 * C142;
    const double C33249 = C48649 * C130;
    const double C33240 = C48649 * C141;
    const double C33232 = C48649 * C128;
    const double C33403 = C48649 * C278;
    const double C33395 = C48649 * C267;
    const double C33549 = C48649 * C402;
    const double C33541 = C48649 * C391;
    const double C41822 = C48649 * C277;
    const double C41814 = C48649 * C265;
    const double C42197 = C48649 * C590;
    const double C42189 = C48649 * C580;
    const double C42343 = C48649 * C692;
    const double C42335 = C48649 * C682;
    const double C17437 =
        (C48642 + 2 * C48412) / C47186 - (C48649 * C48408) / C47180;
    const double C19851 = C19816 * C403;
    const double C19843 = C19816 * C393;
    const double C19834 = C19816 * C402;
    const double C19826 = C19816 * C391;
    const double C19997 = C19816 * C693;
    const double C19989 = C19816 * C684;
    const double C20143 = C19816 * C944;
    const double C20135 = C19816 * C935;
    const double C21102 = C19816 * C692;
    const double C21094 = C19816 * C682;
    const double C21477 = C19816 * C1431;
    const double C21469 = C19816 * C1423;
    const double C21623 = C19816 * C2322;
    const double C21615 = C19816 * C2310;
    const double C2489 = C2487 + C2483;
    const double C24525 = C24521 + C24517;
    const double C24523 = C24519 + C24511;
    const double C24524 = C24520 + C24514;
    const double C24522 = C24518 + C24508;
    const double C10326 = C10324 + C10310;
    const double C10325 = C10323 + C10307;
    const double C33259 = C48646 * C403;
    const double C33251 = C48646 * C393;
    const double C33242 = C48646 * C402;
    const double C33234 = C48646 * C391;
    const double C33405 = C48646 * C693;
    const double C33397 = C48646 * C684;
    const double C33551 = C48646 * C944;
    const double C33543 = C48646 * C935;
    const double C41824 = C48646 * C692;
    const double C41816 = C48646 * C682;
    const double C42199 = C48646 * C1431;
    const double C42191 = C48646 * C1423;
    const double C42345 = C48646 * C2322;
    const double C42337 = C48646 * C2310;
    const double C17438 =
        (C48631 + 2 * C48419 + C48649) / C47186 - (C48646 * C48408) / C47180;
    const double C17439 = (C48609 + C48416 / C47180 + C48646) / C47186 -
                          (C48637 * C48408) / C47180;
    const double C14939 = C14937 + C14933;
    const double C18443 = C18439 + C18435;
    const double C18441 = C18437 + C18429;
    const double C18442 = C18438 + C18432;
    const double C18440 = C18436 + C18426;
    const double C16800 = C16798 + C16784;
    const double C16799 = C16797 + C16781;
    const double C47576 = C47575 + C47574;
    const double C2664 = C48609 * C2324;
    const double C6538 = C48416 * C2324;
    const double C15110 = C48609 * C2324;
    const double C34825 = C48416 * C2324;
    const double C36225 = C36005 * C2324;
    const double C2663 = C2443 * C2315;
    const double C6537 = C4871 * C2315;
    const double C15109 = C14893 * C2315;
    const double C34824 = C30337 * C2315;
    const double C36224 = C47366 * C2315;
    const double C48118 = C48117 + C48102;
    const double C173 = C162 - C163;
    const double C3788 = C295 - C294;
    const double C3920 = C294 - C295;
    const double C4912 = C4895 - C4896;
    const double C30378 = C30361 - C30362;
    const double C1083 = C1076 - C1077;
    const double C1265 = C1077 - C1076;
    const double C6090 = C5062 - C5061;
    const double C6306 = C5061 - C5062;
    const double C34421 = C30528 - C30527;
    const double C34621 = C30527 - C30528;
    const double C2486 = C2467 - C2468;
    const double C14936 = C14917 - C14918;
    const double C36051 = C36032 - C36033;
    const double C14282 = C14280 + C14281;
    const double C299 = C48329 * C281;
    const double C423 = C48329 * C405;
    const double C4904 = C48416 * C405;
    const double C30370 = C48416 * C405;
    const double C1081 = C48329 * C593;
    const double C4054 = C48329 * C695;
    const double C5070 = C48416 * C695;
    const double C30536 = C48416 * C695;
    const double C47594 = C47593 + C47583;
    const double C2327 =
        (C47476 + C47500 * C47603 + be * C47423 * C47627 +
         C47423 * (be * C47627 +
                   C47423 * (C47500 + (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47603))) /
        C47185;
    const double C1715 = (3 * (C47570 + C47547 * C47603) +
                          C47554 * (2 * C47618 + C47554 * C47627)) /
                         C47180;
    const double C1890 = (C47423 * (2 * C47618 + C47554 * C47627)) / C47180;
    const double C2321 = (C47570 + C47547 * C47603 + C47627 * C47647) / C47180;
    const double C3677 =
        (3 * (C47476 + be * C47659 + C47423 * C47663) +
         be * (2 * C47659 + C47423 * C47664) +
         C47423 *
             (2 * C47663 + be * C47664 +
              C47423 *
                  (C47500 + be * C47423 * C47591 +
                   C47423 * (be * C47591 +
                             C47423 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C3674 = (3 * (C47570 + C47547 * C47647) +
                          C47423 * (2 * C47659 + C47423 * C47664)) /
                         C47180;
    const double C8911 =
        (C48641 + 2 * C48372) / C47186 - (C48648 * C48368) / C47180;
    const double C8912 =
        (C48629 + 2 * C48379 + C48648) / C47186 - (C48644 * C48368) / C47180;
    const double C8913 = (C48606 + C48376 / C47180 + C48644) / C47186 -
                         (C48634 * C48368) / C47180;
    const double C11520 = C9256 * C47225;
    const double C11516 = C1720 * C47225;
    const double C12936 = C12934 * C47225;
    const double C47228 = C47225 / C47186;
    const double C47227 = C47178 * C47225;
    const double C1733 = C1732 + C1722;
    const double C23675 = C23673 + C23670;
    const double C23674 = C23672 + C23666;
    const double C29507 = C29506 + C29504;
    const double C47347 = C47341 / C47186;
    const double C47346 = C47263 * C47341;
    const double C30381 = C30375 + C30376;
    const double C30380 = C30373 + C30374;
    const double C30379 = C30371 + C30372;
    const double C34422 = C34418 + C34419;
    const double C34622 = C34618 + C34619;
    const double C31808 = C31789 + C31790;
    const double C31804 = C31773 + C31774;
    const double C31807 = C31787 + C31788;
    const double C31803 = C31771 + C31772;
    const double C31810 = C31793 + C31794;
    const double C31806 = C31785 + C31786;
    const double C31809 = C31791 + C31792;
    const double C31805 = C31783 + C31784;
    const double C32376 = C32363 + C32364;
    const double C32375 = C32361 + C32362;
    const double C41086 = C41074 + C41075;
    const double C41085 = C41072 + C41073;
    const double C10328 = C10326 * C48214;
    const double C10327 = C10325 * C8916;
    const double C16802 = C16800 * C48214;
    const double C16801 = C16799 * C8916;
    const double C946 =
        (2 * C47456 + ae * C47457 + C47424 * C47476 + be * C47423 * C47576 +
         C47423 * (be * C47576 + C47423 * C47504)) /
        C47185;
    const double C137 = (4 * (2 * C47565 + C47424 * C47570 + C47810 * ae) +
                         C47424 * (3 * C47570 + C47424 * C47576 + C47815 * ae) +
                         (3 * C47810 + C47424 * C47815) * ae) /
                        C47180;
    const double C274 =
        (C47554 * (3 * C47570 + C47424 * C47576 + C47815 * ae)) / C47180;
    const double C398 =
        (C47423 * (3 * C47570 + C47424 * C47576 + C47815 * ae)) / C47180;
    const double C587 =
        (2 * C47565 + C47424 * C47570 + C47810 * ae + C47576 * C47603) / C47180;
    const double C689 = (C47423 * C47554 * C47576) / C47180;
    const double C940 =
        (2 * C47565 + C47424 * C47570 + C47810 * ae + C47576 * C47647) / C47180;
    const double C18080 =
        (5 * (3 * C48063 + C47423 * C48118 + C48062 * be) +
         C47423 * (4 * C48118 +
                   C47423 * (3 * C48113 +
                             C47423 * (2 * C48105 +
                                       C47423 * (C47469 +
                                                 C47423 * (C47423 * C47493 +
                                                           C47535 * be) +
                                                 C47423 * C47535 * be) +
                                       C48107 * be) +
                             C48112 * be) +
                   C48116 * be) +
         (4 * C48062 + C47423 * C48116) * be) /
        C47180;
    const double C4916 = C4911 + C4912;
    const double C30382 = C30377 + C30378;
    const double C1725 = C1083 * C48593;
    const double C8295 = C1083 * C48593;
    const double C26472 = C1083 * C25911;
    const double C6092 = C6089 + C6090;
    const double C6328 = C6305 + C6306;
    const double C34423 = C34420 + C34421;
    const double C34623 = C34620 + C34621;
    const double C2490 = C2488 + C2486;
    const double C14940 = C14938 + C14936;
    const double C47595 = C47424 * C47594;
    const double C47629 = C47554 * C47594;
    const double C1434 =
        (be * (C47576 + C47594 * C47603) +
         C47423 * (C47504 + (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47603)) /
        C47185;
    const double C2825 =
        (2 * (be * C47576 + C47423 * C47504) +
         be * (C47576 + C47594 * std::pow(C47423, 2)) +
         C47423 *
             (C47504 + be * C47423 * C47594 +
              C47423 *
                  (be * C47594 +
                   C47423 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C1240 =
        (2 * C47554 * C47576 + C47554 * (C47576 + C47594 * C47603)) / C47180;
    const double C1430 = (C47423 * (C47576 + C47594 * C47603)) / C47180;
    const double C2821 =
        (2 * C47423 * C47576 + C47423 * (C47576 + C47594 * C47647)) / C47180;
    const double C11525 = C11520 + C11521;
    const double C11524 = C11516 + C11517;
    const double C12938 = C12936 + C12937;
    const double C47231 = C47228 - C47223;
    const double C7739 = C47228 + (C47214 * ae) / C47180;
    const double C47230 = C47227 + C48551;
    const double C1734 = C1733 + C1723;
    const double C23677 = C23675 + C23671;
    const double C23676 = C23674 + C23667;
    const double C29508 = C29507 + C29505;
    const double C47352 = C47347 - C47348;
    const double C47351 = C47346 + C48574;
    const double C32366 = C31806 * C48224;
    const double C43585 = C31806 * C48224;
    const double C32365 = C31805 * C23174;
    const double C43584 = C31805 * C47206;
    const double C32378 = C32376 * C23167;
    const double C41071 = C32376 * C48214;
    const double C43583 = C32376 * C48551;
    const double C32377 = C32375 * C23173;
    const double C41070 = C32375 * C8916;
    const double C43582 = C32375 * C47225;
    const double C41088 = C41086 * C48214;
    const double C41087 = C41085 * C8916;
    const double C10329 = C10327 + C10328;
    const double C16803 = C16801 + C16802;
    const double C2480 = C48609 * C946;
    const double C5224 = C48416 * C946;
    const double C14930 = C48609 * C946;
    const double C30690 = C48416 * C946;
    const double C36045 = C36005 * C946;
    const double C166 = C113 * C137;
    const double C298 = C113 * C274;
    const double C422 = C113 * C398;
    const double C4903 = C4871 * C398;
    const double C30369 = C30337 * C398;
    const double C1080 = C113 * C587;
    const double C4053 = C113 * C689;
    const double C5069 = C4871 * C689;
    const double C30535 = C30337 * C689;
    const double C2479 = C2443 * C940;
    const double C5223 = C4871 * C940;
    const double C14929 = C14893 * C940;
    const double C30689 = C30337 * C940;
    const double C36044 = C47366 * C940;
    const double C47596 = C47578 + C47595;
    const double C2639 =
        (C47554 * C47504 + be * C47423 * C47629 +
         C47423 * (be * C47629 +
                   C47423 * C47554 *
                       (2 * C47496 + ae * C47497 +
                        C47424 * (C47492 + ae * C47424 * C47493 +
                                  C47424 * (ae * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47185;
    const double C2638 = (C47554 * C47576 + C47629 * C47647) / C47180;
    const double C11527 = C11525 + C11522;
    const double C11526 = C11524 + C11518;
    const double C12939 = C12938 + C12924;
    const double C26469 = C1256 * C47231;
    const double C117 =
        (C47231 / C47186 + ((C47178 * C47241 + C25911) * ae) / C47180) /
            C47186 -
        ((C47178 * (C47241 / C47186 + (0 * ae) / C47180) + C48610) * be) /
            C47180;
    const double C3784 =
        C47231 / C47186 - ((C47178 * C47241 + C25911) * be) / C47180;
    const double C22091 =
        C47231 / C47186 + ((C47178 * C47241 + C25911) * ae) / C47180;
    const double C8292 = C1256 * C7739;
    const double C47232 = C47230 * be;
    const double C7738 = C47217 + (C47230 * ae) / C47180 + C47206;
    const double C1735 = C1734 + C1724;
    const double C36042 = C47352 * C396;
    const double C36036 = C47352 * C386;
    const double C36031 = C47352 * C394;
    const double C36025 = C47352 * C385;
    const double C36019 = C47352 * C392;
    const double C36013 = C47352 * C384;
    const double C36222 = C47352 * C687;
    const double C36216 = C47352 * C679;
    const double C36210 = C47352 * C685;
    const double C36204 = C47352 * C678;
    const double C36392 = C47352 * C938;
    const double C36386 = C47352 * C930;
    const double C36380 = C47352 * C936;
    const double C36374 = C47352 * C929;
    const double C37572 = C47352 * C1426;
    const double C37566 = C47352 * C1420;
    const double C37549 = C47352 * C683;
    const double C37543 = C47352 * C677;
    const double C37786 = C47352 * C2313;
    const double C37780 = C47352 * C2305;
    const double C38138 = C47352 * C1424;
    const double C38132 = C47352 * C1419;
    const double C38344 = C47352 * C2311;
    const double C38338 = C47352 * C2304;
    const double C46591 = C47352 * C1886;
    const double C46585 = C47352 * C1882;
    const double C46756 = C47352 * C2317;
    const double C46750 = C47352 * C2307;
    const double C17445 =
        (C47352 / C47186 + ((C47263 * C47366 + C36005) * ae) / C47180) /
            C47186 -
        ((C47263 * (C47366 / C47186 + (0 * ae) / C47180) + C48622) * be) /
            C47180;
    const double C19821 =
        C47352 / C47186 - ((C47263 * C47366 + C36005) * be) / C47180;
    const double C33229 =
        C47352 / C47186 + ((C47263 * C47366 + C36005) * ae) / C47180;
    const double C47355 = C47351 * be;
    const double C32379 = C32377 + C32378;
    const double C41084 = C41070 + C41071;
    const double C43586 = C43582 + C43583;
    const double C41089 = C41087 + C41088;
    const double C47597 = C47596 + C47584;
    const double C11529 = C11527 + C11523;
    const double C11528 = C11526 + C11519;
    const double C12940 = C12939 + C12925;
    const double C47233 = C47232 / C47180;
    const double C8290 = C1720 * C7738;
    const double C1736 = C1735 + C1725;
    const double C36050 = C36030 - C36031;
    const double C36047 = C36024 - C36025;
    const double C37562 = C36210 - C36211;
    const double C37556 = C36211 - C36210;
    const double C37559 = C36204 - C36205;
    const double C37553 = C36205 - C36204;
    const double C46581 = C38139 - C38138;
    const double C46578 = C38133 - C38132;
    const double C19852 = C19821 * C938;
    const double C19844 = C19821 * C930;
    const double C19837 = C19821 * C936;
    const double C19829 = C19821 * C929;
    const double C19998 = C19821 * C2313;
    const double C19990 = C19821 * C2305;
    const double C20144 = C19821 * C2817;
    const double C20136 = C19821 * C2811;
    const double C21105 = C19821 * C2311;
    const double C21097 = C19821 * C2304;
    const double C21478 = C19821 * C2317;
    const double C21470 = C19821 * C2307;
    const double C21624 = C19821 * C3256;
    const double C21616 = C19821 * C3252;
    const double C33260 = C33229 * C938;
    const double C33252 = C33229 * C930;
    const double C33245 = C33229 * C936;
    const double C33237 = C33229 * C929;
    const double C33406 = C33229 * C2313;
    const double C33398 = C33229 * C2305;
    const double C33552 = C33229 * C2817;
    const double C33544 = C33229 * C2811;
    const double C41827 = C33229 * C2311;
    const double C41819 = C33229 * C2304;
    const double C42200 = C33229 * C2317;
    const double C42192 = C33229 * C2307;
    const double C42346 = C33229 * C3256;
    const double C42338 = C33229 * C3252;
    const double C47357 = C47355 / C47180;
    const double C32380 = C32379 + C32365;
    const double C43587 = C43586 + C43584;
    const double C947 =
        (3 * C47476 + ae * C47477 + C47424 * C47504 + be * C47423 * C47597 +
         C47423 *
             (be * C47597 +
              C47423 *
                  (3 * C47500 + ae * C47501 +
                   C47424 * (2 * C47496 + ae * C47497 +
                             C47424 * (C47492 + ae * C47424 * C47493 +
                                       C47424 * (ae * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47185;
    const double C139 = (5 * (3 * C47570 + C47424 * C47576 + C47815 * ae) +
                         C47424 * (4 * C47576 + C47424 * C47597 + C47820 * ae) +
                         (4 * C47815 + C47424 * C47820) * ae) /
                        C47180;
    const double C276 =
        (C47554 * (4 * C47576 + C47424 * C47597 + C47820 * ae)) / C47180;
    const double C400 =
        (C47423 * (4 * C47576 + C47424 * C47597 + C47820 * ae)) / C47180;
    const double C589 =
        (3 * C47570 + C47424 * C47576 + C47815 * ae + C47597 * C47603) / C47180;
    const double C691 = (C47423 * C47554 * C47597) / C47180;
    const double C942 =
        (3 * C47570 + C47424 * C47576 + C47815 * ae + C47597 * C47647) / C47180;
    const double C47234 = C47217 - C47233;
    const double C8296 = C8290 + C8291;
    const double C47359 = C47345 - C47357;
    const double C32381 = C32380 + C32366;
    const double C43588 = C43587 + C43585;
    const double C47235 = C47234 + C47206;
    const double C8297 = C8296 + C8292;
    const double C47360 = C47359 + C47330;
    const double C26467 = C1720 * C47235;
    const double C114 =
        (((((0 - (C47178 * C47179) / C47180) * ae) / C47180 -
           (0 * be) / C47192 + (2 * C47181) / C47180) /
              C47186 -
          ((C47178 * C47215 + 0) * be) / C47180 + C47198 - C47208) /
             C47186 +
         ((C47178 * C47229 + 0) * ae) / C47180) /
            C47186 -
        ((C47178 * (C47229 / C47186 +
                    ((C47178 * C47235 + C48219) * ae) / C47180 + C47231) +
          C48647) *
         be) /
            C47180 +
        C47235 / C47186 + ((C47178 * C47231 + C48227) * ae) / C47180 +
        2 * (C47206 / C47186 - (0 * be) / C47180);
    const double C115 =
        (C47229 / C47186 + ((C47178 * C47235 + C48219) * ae) / C47180 +
         C47231) /
            C47186 -
        ((C47178 * (C47235 / C47186 +
                    ((C47178 * C47231 + C48227) * ae) / C47180 + 2 * C47241) +
          C48640) *
         be) /
            C47180 +
        2 * (C47231 / C47186 + ((C47178 * C47241 + C25911) * ae) / C47180);
    const double C116 =
        (C47235 / C47186 + ((C47178 * C47231 + C48227) * ae) / C47180 +
         2 * C47241) /
            C47186 -
        ((C47178 *
              (C47231 / C47186 + ((C47178 * C47241 + C25911) * ae) / C47180) +
          C48627) *
         be) /
            C47180 +
        3 * (C47241 / C47186 + (0 * ae) / C47180);
    const double C3782 =
        C47229 / C47186 - ((C47178 * C47235 + C48219) * be) / C47180 + C47231;
    const double C3783 = C47235 / C47186 -
                         ((C47178 * C47231 + C48227) * be) / C47180 +
                         2 * C47241;
    const double C22089 =
        C47229 / C47186 + ((C47178 * C47235 + C48219) * ae) / C47180 + C47231;
    const double C22090 = C47235 / C47186 +
                          ((C47178 * C47231 + C48227) * ae) / C47180 +
                          2 * C47241;
    const double C8298 = C8297 + C8293;
    const double C36040 = C47360 * C133;
    const double C36034 = C47360 * C122;
    const double C36029 = C47360 * C131;
    const double C36023 = C47360 * C121;
    const double C36017 = C47360 * C129;
    const double C36011 = C47360 * C120;
    const double C36220 = C47360 * C270;
    const double C36214 = C47360 * C261;
    const double C36208 = C47360 * C268;
    const double C36202 = C47360 * C260;
    const double C36390 = C47360 * C394;
    const double C36384 = C47360 * C385;
    const double C36378 = C47360 * C392;
    const double C36372 = C47360 * C384;
    const double C37570 = C47360 * C583;
    const double C37564 = C47360 * C576;
    const double C37547 = C47360 * C266;
    const double C37541 = C47360 * C259;
    const double C37784 = C47360 * C685;
    const double C37778 = C47360 * C678;
    const double C38136 = C47360 * C581;
    const double C38130 = C47360 * C575;
    const double C38342 = C47360 * C683;
    const double C38336 = C47360 * C677;
    const double C46589 = C47360 * C1234;
    const double C46583 = C47360 * C1229;
    const double C46754 = C47360 * C1424;
    const double C46748 = C47360 * C1419;
    const double C17442 =
        (((((0 - (C47263 * C47313) / C47180) * ae) / C47180 -
           (0 * be) / C47192 + (2 * C47314) / C47180) /
              C47186 -
          ((C47263 * C47349 + 0) * be) / C47180 + C47323 - C47336) /
             C47186 +
         ((C47263 * C47358 + 0) * ae) / C47180) /
            C47186 -
        ((C47263 * (C47358 / C47186 +
                    ((C47263 * C47360 + C48412) * ae) / C47180 + C47352) +
          C48649) *
         be) /
            C47180 +
        C47360 / C47186 + ((C47263 * C47352 + C48419) * ae) / C47180 +
        2 * (C47330 / C47186 - (0 * be) / C47180);
    const double C17443 =
        (C47358 / C47186 + ((C47263 * C47360 + C48412) * ae) / C47180 +
         C47352) /
            C47186 -
        ((C47263 * (C47360 / C47186 +
                    ((C47263 * C47352 + C48419) * ae) / C47180 + 2 * C47366) +
          C48646) *
         be) /
            C47180 +
        2 * (C47352 / C47186 + ((C47263 * C47366 + C36005) * ae) / C47180);
    const double C17444 =
        (C47360 / C47186 + ((C47263 * C47352 + C48419) * ae) / C47180 +
         2 * C47366) /
            C47186 -
        ((C47263 *
              (C47352 / C47186 + ((C47263 * C47366 + C36005) * ae) / C47180) +
          C48637) *
         be) /
            C47180 +
        3 * (C47366 / C47186 + (0 * ae) / C47180);
    const double C19819 =
        C47358 / C47186 - ((C47263 * C47360 + C48412) * be) / C47180 + C47352;
    const double C19820 = C47360 / C47186 -
                          ((C47263 * C47352 + C48419) * be) / C47180 +
                          2 * C47366;
    const double C33227 =
        C47358 / C47186 + ((C47263 * C47360 + C48412) * ae) / C47180 + C47352;
    const double C33228 = C47360 / C47186 +
                          ((C47263 * C47352 + C48419) * ae) / C47180 +
                          2 * C47366;
    const double C26473 = C26467 + C26468;
    const double C8299 = C8298 + C8294;
    const double C36049 = C36028 - C36029;
    const double C36046 = C36022 - C36023;
    const double C37561 = C36208 - C36209;
    const double C37555 = C36209 - C36208;
    const double C37558 = C36202 - C36203;
    const double C37552 = C36203 - C36202;
    const double C46580 = C38137 - C38136;
    const double C46577 = C38131 - C38130;
    const double C19848 = C19819 * C131;
    const double C19840 = C19819 * C121;
    const double C19833 = C19819 * C129;
    const double C19825 = C19819 * C120;
    const double C19994 = C19819 * C268;
    const double C19986 = C19819 * C260;
    const double C20140 = C19819 * C392;
    const double C20132 = C19819 * C384;
    const double C21101 = C19819 * C266;
    const double C21093 = C19819 * C259;
    const double C21474 = C19819 * C581;
    const double C21466 = C19819 * C575;
    const double C21620 = C19819 * C683;
    const double C21612 = C19819 * C677;
    const double C19850 = C19820 * C394;
    const double C19842 = C19820 * C385;
    const double C19835 = C19820 * C392;
    const double C19827 = C19820 * C384;
    const double C19996 = C19820 * C685;
    const double C19988 = C19820 * C678;
    const double C20142 = C19820 * C936;
    const double C20134 = C19820 * C929;
    const double C21103 = C19820 * C683;
    const double C21095 = C19820 * C677;
    const double C21476 = C19820 * C1424;
    const double C21468 = C19820 * C1419;
    const double C21622 = C19820 * C2311;
    const double C21614 = C19820 * C2304;
    const double C33256 = C33227 * C131;
    const double C33248 = C33227 * C121;
    const double C33241 = C33227 * C129;
    const double C33233 = C33227 * C120;
    const double C33402 = C33227 * C268;
    const double C33394 = C33227 * C260;
    const double C33548 = C33227 * C392;
    const double C33540 = C33227 * C384;
    const double C41823 = C33227 * C266;
    const double C41815 = C33227 * C259;
    const double C42196 = C33227 * C581;
    const double C42188 = C33227 * C575;
    const double C42342 = C33227 * C683;
    const double C42334 = C33227 * C677;
    const double C33258 = C33228 * C394;
    const double C33250 = C33228 * C385;
    const double C33243 = C33228 * C392;
    const double C33235 = C33228 * C384;
    const double C33404 = C33228 * C685;
    const double C33396 = C33228 * C678;
    const double C33550 = C33228 * C936;
    const double C33542 = C33228 * C929;
    const double C41825 = C33228 * C683;
    const double C41817 = C33228 * C677;
    const double C42198 = C33228 * C1424;
    const double C42190 = C33228 * C1419;
    const double C42344 = C33228 * C2311;
    const double C42336 = C33228 * C2304;
    const double C26474 = C26473 + C26469;
    const double C8300 = C8299 + C8295;
    const double C36053 = C36049 + C36050;
    const double C36052 = C36046 + C36047;
    const double C37579 = C37561 + C37562;
    const double C37577 = C37555 + C37556;
    const double C37578 = C37558 + C37559;
    const double C37576 = C37552 + C37553;
    const double C46596 = C46580 + C46581;
    const double C46595 = C46577 + C46578;
    const double C26475 = C26474 + C26470;
    const double C36055 = C36053 + C36051;
    const double C36054 = C36052 + C36048;
    const double C37583 = C37579 + C37563;
    const double C37581 = C37577 + C37557;
    const double C37582 = C37578 + C37560;
    const double C37580 = C37576 + C37554;
    const double C46598 = C46596 + C46582;
    const double C46597 = C46595 + C46579;
    const double C26476 = C26475 + C26471;
    const double C46600 = C46598 * C48214;
    const double C46599 = C46597 * C8916;
    const double C26477 = C26476 + C26472;
    const double C46601 = C46599 + C46600;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47235 +
            (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
            (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
               C48372 +
           ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
            C1250 * C47231 + C1251 * C48227 + C1068 * C47241 + C1069 * C25911) *
               C48379 +
           (C1720 * C47235 + C1721 * C48219 + C1256 * C47231 + C1257 * C48227 +
            C1082 * C47241 + C1083 * C25911) *
               C25914) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C47235 + (C151 - C150) * C48219 +
            (C153 - C152) * C47231 + (C155 - C154) * C48227 +
            (C157 - C156) * C47241 + (C159 - C158) * C25911) *
               C48372 +
           (C1258 * C47235 + C1259 * C48219 + C1260 * C47231 + C1261 * C48227 +
            C3919 * C47241 + C3920 * C25911) *
               C48379 +
           (C1262 * C47235 + C1263 * C48219 + C1264 * C47231 + C1265 * C48227 +
            (C1078 - C1079) * C47241 + (C1080 - C1081) * C25911) *
               C25914) *
              C48300 * C48283 * C111 +
          ((C168 * C47235 + C169 * C48219 + C170 * C47231 + C171 * C48227 +
            C172 * C47241 + C173 * C25911) *
               C48372 +
           (C1068 * C47235 + C1069 * C48219 + C3787 * C47231 + C3788 * C48227 +
            (C297 - C296) * C47241 + (C299 - C298) * C25911) *
               C48379 +
           (C1082 * C47235 + C1083 * C48219 + (C1079 - C1078) * C47231 +
            (C1081 - C1080) * C48227 + (C48329 * C588 - C113 * C579) * C47241 +
            (C48329 * C594 - C113 * C589) * C25911) *
               C25914) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            (C1720 * C47235 + C1721 * C48219 + C1256 * C47231 + C1257 * C48227 +
             C1082 * C47241 + C1083 * C25911) *
                C25914) *
               C48300 * C255 +
           (((C1247 - C1246) * C47235 + (C1249 - C1248) * C48219 +
             C1258 * C47231 + C1259 * C48227 + C1260 * C47241 +
             C1261 * C25911) *
                C48372 +
            ((C1253 - C1252) * C47235 + (C1255 - C1254) * C48219 +
             C1262 * C47231 + C1263 * C48227 + C1264 * C47241 +
             C1265 * C25911) *
                C48379 +
            ((C1726 - C1727) * C47235 + (C1728 - C1729) * C48219 +
             C11152 * C47231 + C11153 * C48227 + (C1270 - C1271) * C47241 +
             (C1272 - C1273) * C25911) *
                C25914) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48219 +
             (C153 - C152) * C47231 + (C155 - C154) * C48227 +
             (C157 - C156) * C47241 + (C159 - C158) * C25911) *
                C48372 +
            (C1258 * C47235 + C1259 * C48219 + C1260 * C47231 + C1261 * C48227 +
             C3919 * C47241 + C3920 * C25911) *
                C48379 +
            (C1262 * C47235 + C1263 * C48219 + C1264 * C47231 + C1265 * C48227 +
             (C1078 - C1079) * C47241 + (C1080 - C1081) * C25911) *
                C25914) *
               C48300 * C255 +
           ((C1250 * C47235 + C1251 * C48219 + C1068 * C47231 + C1069 * C48227 +
             C3787 * C47241 + C3788 * C25911) *
                C48372 +
            (C1256 * C47235 + C1257 * C48219 + C1082 * C47231 + C1083 * C48227 +
             (C1079 - C1078) * C47241 + (C1081 - C1080) * C25911) *
                C48379 +
            (C11150 * C47235 + C11151 * C48219 + (C1271 - C1270) * C47231 +
             (C1273 - C1272) * C48227 +
             (C48329 * C1239 - C113 * C1232) * C47241 +
             (C48329 * C1244 - C113 * C1240) * C25911) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            (C1720 * C47235 + C1721 * C48219 + C1256 * C47231 + C1257 * C48227 +
             C1082 * C47241 + C1083 * C25911) *
                C25914) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47235 +
             (C113 * C390 - C48329 * C401) * C48219 + (C408 - C409) * C47231 +
             (C410 - C411) * C48227 + (C412 - C413) * C47241 +
             (C414 - C415) * C25911) *
                C48372 +
            ((C1895 - C1896) * C47235 + (C1897 - C1898) * C48219 +
             (C1436 - C1437) * C47231 + (C1438 - C1439) * C48227 +
             (C1440 - C1441) * C47241 + (C1442 - C1443) * C25911) *
                C48379 +
            ((C1899 - C1900) * C47235 + (C1901 - C1902) * C48219 +
             (C1444 - C1445) * C47231 + (C1446 - C1447) * C48227 +
             (C1448 - C1449) * C47241 + (C1450 - C1451) * C25911) *
                C25914) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48219 +
             (C153 - C152) * C47231 + (C155 - C154) * C48227 +
             (C157 - C156) * C47241 + (C159 - C158) * C25911) *
                C48372 +
            (C1258 * C47235 + C1259 * C48219 + C1260 * C47231 + C1261 * C48227 +
             C3919 * C47241 + C3920 * C25911) *
                C48379 +
            (C1262 * C47235 + C1263 * C48219 + C1264 * C47231 + C1265 * C48227 +
             (C1078 - C1079) * C47241 + (C1080 - C1081) * C25911) *
                C25914) *
               C381 +
           (((C409 - C408) * C47235 + (C411 - C410) * C48219 +
             (C413 - C412) * C47231 + (C415 - C414) * C48227 +
             (C417 - C416) * C47241 + (C419 - C418) * C25911) *
                C48372 +
            ((C1437 - C1436) * C47235 + (C1439 - C1438) * C48219 +
             (C1441 - C1440) * C47231 + (C1443 - C1442) * C48227 +
             (C4052 - C4051) * C47241 + (C4054 - C4053) * C25911) *
                C48379 +
            ((C1445 - C1444) * C47235 + (C1447 - C1446) * C48219 +
             (C1449 - C1448) * C47231 + (C1451 - C1450) * C48227 +
             (C48329 * C1429 - C113 * C1422) * C47241 +
             (C48329 * C1434 - C113 * C1430) * C25911) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            (C1720 * C47235 + C1721 * C48219 + C1256 * C47231 + C1257 * C48227 +
             C1082 * C47241 + C1083 * C25911) *
                C25914) *
               C48300 * C505 +
           (((C1247 - C1246) * C47235 + (C1249 - C1248) * C48219 +
             C1258 * C47231 + C1259 * C48227 + C1260 * C47241 +
             C1261 * C25911) *
                C48372 +
            ((C1253 - C1252) * C47235 + (C1255 - C1254) * C48219 +
             C1262 * C47231 + C1263 * C48227 + C1264 * C47241 +
             C1265 * C25911) *
                C48379 +
            ((C1726 - C1727) * C47235 + (C1728 - C1729) * C48219 +
             C11152 * C47231 + C11153 * C48227 + (C1270 - C1271) * C47241 +
             (C1272 - C1273) * C25911) *
                C25914) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48219 +
             (C153 - C152) * C47231 + (C155 - C154) * C48227 +
             (C157 - C156) * C47241 + (C159 - C158) * C25911) *
                C48372 +
            (C1258 * C47235 + C1259 * C48219 + C1260 * C47231 + C1261 * C48227 +
             C3919 * C47241 + C3920 * C25911) *
                C48379 +
            (C1262 * C47235 + C1263 * C48219 + C1264 * C47231 + C1265 * C48227 +
             (C1078 - C1079) * C47241 + (C1080 - C1081) * C25911) *
                C25914) *
               C48300 * C505 +
           ((C1250 * C47235 + C1251 * C48219 + C1068 * C47231 + C1069 * C48227 +
             C3787 * C47241 + C3788 * C25911) *
                C48372 +
            (C1256 * C47235 + C1257 * C48219 + C1082 * C47231 + C1083 * C48227 +
             (C1079 - C1078) * C47241 + (C1081 - C1080) * C25911) *
                C48379 +
            (C11150 * C47235 + C11151 * C48219 + (C1271 - C1270) * C47231 +
             (C1273 - C1272) * C48227 +
             (C48329 * C1239 - C113 * C1232) * C47241 +
             (C48329 * C1244 - C113 * C1240) * C25911) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47235 +
            (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
            (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
               C48372 +
           ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
            C1250 * C47231 + C1251 * C48227 + C1068 * C47241 + C1069 * C25911) *
               C48379 +
           C26477 * C25914) *
              C48300 * C571 +
          (((C1247 - C1246) * C47235 + (C1249 - C1248) * C48219 +
            C1258 * C47231 + C1259 * C48227 + C1260 * C47241 + C1261 * C25911) *
               C48372 +
           ((C1253 - C1252) * C47235 + (C1255 - C1254) * C48219 +
            C1262 * C47231 + C1263 * C48227 + C1264 * C47241 + C1265 * C25911) *
               C48379 +
           ((C1726 - C1727) * C47235 + (C1728 - C1729) * C48219 +
            C11152 * C47231 + C11153 * C48227 + (C1270 - C1271) * C47241 +
            (C1272 - C1273) * C25911) *
               C25914) *
              C48300 * C572 +
          (C26477 * C48372 +
           (C9256 * C47235 + C9257 * C48219 + C11150 * C47231 +
            C11151 * C48227 + (C1271 - C1270) * C47241 +
            (C1273 - C1272) * C25911) *
               C48379 +
           (C9258 * C47235 + C9259 * C48219 + (C9013 - C9012) * C47231 +
            (C9015 - C9014) * C48227 +
            (C48329 * C1714 - C113 * C1709) * C47241 +
            (C48329 * C1718 - C113 * C1715) * C25911) *
               C25914) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            C26477 * C25914) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47235 +
             (C113 * C390 - C48329 * C401) * C48219 + (C408 - C409) * C47231 +
             (C410 - C411) * C48227 + (C412 - C413) * C47241 +
             (C414 - C415) * C25911) *
                C48372 +
            ((C1895 - C1896) * C47235 + (C1897 - C1898) * C48219 +
             (C1436 - C1437) * C47231 + (C1438 - C1439) * C48227 +
             (C1440 - C1441) * C47241 + (C1442 - C1443) * C25911) *
                C48379 +
            ((C1899 - C1900) * C47235 + (C1901 - C1902) * C48219 +
             (C1444 - C1445) * C47231 + (C1446 - C1447) * C48227 +
             (C1448 - C1449) * C47241 + (C1450 - C1451) * C25911) *
                C25914) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C47235 + (C1249 - C1248) * C48219 +
             C1258 * C47231 + C1259 * C48227 + C1260 * C47241 +
             C1261 * C25911) *
                C48372 +
            ((C1253 - C1252) * C47235 + (C1255 - C1254) * C48219 +
             C1262 * C47231 + C1263 * C48227 + C1264 * C47241 +
             C1265 * C25911) *
                C48379 +
            ((C1726 - C1727) * C47235 + (C1728 - C1729) * C48219 +
             C11152 * C47231 + C11153 * C48227 + (C1270 - C1271) * C47241 +
             (C1272 - C1273) * C25911) *
                C25914) *
               C381 +
           (((C1896 - C1895) * C47235 + (C1898 - C1897) * C48219 +
             (C1437 - C1436) * C47231 + (C1439 - C1438) * C48227 +
             (C1441 - C1440) * C47241 + (C1443 - C1442) * C25911) *
                C48372 +
            ((C1900 - C1899) * C47235 + (C1902 - C1901) * C48219 +
             (C1445 - C1444) * C47231 + (C1447 - C1446) * C48227 +
             (C1449 - C1448) * C47241 + (C1451 - C1450) * C25911) *
                C48379 +
            ((C9358 - C9357) * C47235 + (C9360 - C9359) * C48219 +
             (C11285 - C11284) * C47231 + (C11287 - C11286) * C48227 +
             (C48329 * C1889 - C113 * C1884) * C47241 +
             (C48329 * C1893 - C113 * C1890) * C25911) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            C26477 * C25914) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47235 +
             (C113 * C390 - C48329 * C401) * C48219 + (C408 - C409) * C47231 +
             (C410 - C411) * C48227 + (C412 - C413) * C47241 +
             (C414 - C415) * C25911) *
                C48372 +
            ((C1895 - C1896) * C47235 + (C1897 - C1898) * C48219 +
             (C1436 - C1437) * C47231 + (C1438 - C1439) * C48227 +
             (C1440 - C1441) * C47241 + (C1442 - C1443) * C25911) *
                C48379 +
            ((C1899 - C1900) * C47235 + (C1901 - C1902) * C48219 +
             (C1444 - C1445) * C47231 + (C1446 - C1447) * C48227 +
             (C1448 - C1449) * C47241 + (C1450 - C1451) * C25911) *
                C25914) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C47235 + (C151 - C150) * C48219 +
             (C153 - C152) * C47231 + (C155 - C154) * C48227 +
             (C157 - C156) * C47241 + (C159 - C158) * C25911) *
                C48372 +
            (C1258 * C47235 + C1259 * C48219 + C1260 * C47231 + C1261 * C48227 +
             C3919 * C47241 + C3920 * C25911) *
                C48379 +
            (C1262 * C47235 + C1263 * C48219 + C1264 * C47231 + C1265 * C48227 +
             (C1078 - C1079) * C47241 + (C1080 - C1081) * C25911) *
                C25914) *
               C779 +
           (((C409 - C408) * C47235 + (C411 - C410) * C48219 +
             (C413 - C412) * C47231 + (C415 - C414) * C48227 +
             (C417 - C416) * C47241 + (C419 - C418) * C25911) *
                C48372 +
            ((C1437 - C1436) * C47235 + (C1439 - C1438) * C48219 +
             (C1441 - C1440) * C47231 + (C1443 - C1442) * C48227 +
             (C4052 - C4051) * C47241 + (C4054 - C4053) * C25911) *
                C48379 +
            ((C1445 - C1444) * C47235 + (C1447 - C1446) * C48219 +
             (C1449 - C1448) * C47231 + (C1451 - C1450) * C48227 +
             (C48329 * C1429 - C113 * C1422) * C47241 +
             (C48329 * C1434 - C113 * C1430) * C25911) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47235 +
             (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
             (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
                C48372 +
            ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
             C1250 * C47231 + C1251 * C48227 + C1068 * C47241 +
             C1069 * C25911) *
                C48379 +
            C26477 * C25914) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47235 +
             (C113 * C390 - C48329 * C401) * C48219 + (C408 - C409) * C47231 +
             (C410 - C411) * C48227 + (C412 - C413) * C47241 +
             (C414 - C415) * C25911) *
                C48372 +
            ((C1895 - C1896) * C47235 + (C1897 - C1898) * C48219 +
             (C1436 - C1437) * C47231 + (C1438 - C1439) * C48227 +
             (C1440 - C1441) * C47241 + (C1442 - C1443) * C25911) *
                C48379 +
            ((C1899 - C1900) * C47235 + (C1901 - C1902) * C48219 +
             (C1444 - C1445) * C47231 + (C1446 - C1447) * C48227 +
             (C1448 - C1449) * C47241 + (C1450 - C1451) * C25911) *
                C25914) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C47235 + (C1249 - C1248) * C48219 +
             C1258 * C47231 + C1259 * C48227 + C1260 * C47241 +
             C1261 * C25911) *
                C48372 +
            ((C1253 - C1252) * C47235 + (C1255 - C1254) * C48219 +
             C1262 * C47231 + C1263 * C48227 + C1264 * C47241 +
             C1265 * C25911) *
                C48379 +
            ((C1726 - C1727) * C47235 + (C1728 - C1729) * C48219 +
             C11152 * C47231 + C11153 * C48227 + (C1270 - C1271) * C47241 +
             (C1272 - C1273) * C25911) *
                C25914) *
               C779 +
           (((C1896 - C1895) * C47235 + (C1898 - C1897) * C48219 +
             (C1437 - C1436) * C47231 + (C1439 - C1438) * C48227 +
             (C1441 - C1440) * C47241 + (C1443 - C1442) * C25911) *
                C48372 +
            ((C1900 - C1899) * C47235 + (C1902 - C1901) * C48219 +
             (C1445 - C1444) * C47231 + (C1447 - C1446) * C48227 +
             (C1449 - C1448) * C47241 + (C1451 - C1450) * C25911) *
                C48379 +
            ((C9358 - C9357) * C47235 + (C9360 - C9359) * C48219 +
             (C11285 - C11284) * C47231 + (C11287 - C11286) * C48227 +
             (C48329 * C1889 - C113 * C1884) * C47241 +
             (C48329 * C1893 - C113 * C1890) * C25911) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47235 +
            (C48329 * C140 - C113 * C127) * C48219 + (C148 - C149) * C47231 +
            (C150 - C151) * C48227 + C168 * C47241 + C169 * C25911) *
               C48372 +
           ((C1246 - C1247) * C47235 + (C1248 - C1249) * C48219 +
            C1250 * C47231 + C1251 * C48227 + C1068 * C47241 + C1069 * C25911) *
               C48379 +
           C26477 * C25914) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C47235 +
            (C113 * C390 - C48329 * C401) * C48219 + (C408 - C409) * C47231 +
            (C410 - C411) * C48227 + (C412 - C413) * C47241 +
            (C414 - C415) * C25911) *
               C48372 +
           ((C1895 - C1896) * C47235 + (C1897 - C1898) * C48219 +
            (C1436 - C1437) * C47231 + (C1438 - C1439) * C48227 +
            (C1440 - C1441) * C47241 + (C1442 - C1443) * C25911) *
               C48379 +
           ((C1899 - C1900) * C47235 + (C1901 - C1902) * C48219 +
            (C1444 - C1445) * C47231 + (C1446 - C1447) * C48227 +
            (C1448 - C1449) * C47241 + (C1450 - C1451) * C25911) *
               C25914) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C47235 +
            (C48329 * C943 - C113 * C934) * C48219 +
            (C48329 * C935 - C113 * C929) * C47231 +
            (C48329 * C944 - C113 * C936) * C48227 +
            (C48329 * C937 - C113 * C930) * C47241 +
            (C48329 * C945 - C113 * C938) * C25911) *
               C48372 +
           ((C48329 * C2310 - C113 * C2304) * C47235 +
            (C48329 * C2322 - C113 * C2311) * C48219 +
            (C48329 * C2312 - C113 * C2305) * C47231 +
            (C48329 * C2323 - C113 * C2313) * C48227 +
            (C48329 * C2314 - C113 * C2306) * C47241 +
            (C48329 * C2324 - C113 * C2315) * C25911) *
               C48379 +
           ((C48329 * C2316 - C113 * C2307) * C47235 +
            (C48329 * C2325 - C113 * C2317) * C48219 +
            (C48329 * C2318 - C113 * C2308) * C47231 +
            (C48329 * C2326 - C113 * C2319) * C48227 +
            (C48329 * C2320 - C113 * C2309) * C47241 +
            (C48329 * C2327 - C113 * C2321) * C25911) *
               C25914) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C23173 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C23167 +
            (C4873 - C4874 + C4875 - C4876) * C23174 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C48372 +
           ((C6287 - C6288 + C6289 - C6290) * C23173 +
            (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
            C6324 * C48224) *
               C48379 +
           (C12934 * C23173 + C12935 * C23167 + C12374 * C23174 +
            C12375 * C48224) *
               C25914) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C23173 +
            (C4878 - C4877 + C4880 - C4879) * C23167 +
            (C4882 - C4881 + C4884 - C4883) * C23174 +
            (C4886 - C4885 + C4888 - C4887) * C48224) *
               C48372 +
           (C6325 * C23173 + C6326 * C23167 + C6327 * C23174 + C6328 * C48224) *
               C48379 +
           (C12376 * C23173 + C12377 * C23167 +
            (C6315 - C6316 + C6317 - C6318) * C23174 +
            (C6319 - C6320 + C6321 - C6322) * C48224) *
               C25914) *
              C48300 * C48283 * C111 +
          ((C4913 * C23173 + C4914 * C23167 + C4915 * C23174 + C4916 * C48224) *
               C48372 +
           (C6091 * C23173 + C6092 * C23167 +
            (C5064 - C5063 + C5066 - C5065) * C23174 +
            (C5068 - C5067 + C5070 - C5069) * C48224) *
               C48379 +
           ((C6316 - C6315 + C6318 - C6317) * C23173 +
            (C6320 - C6319 + C6322 - C6321) * C23167 +
            (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                C23174 +
            (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                C48224) *
               C25914) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            (C12934 * C23173 + C12935 * C23167 + C12374 * C23174 +
             C12375 * C48224) *
                C25914) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C23173 +
             (C6292 - C6291 + C6294 - C6293) * C23167 + C6325 * C23174 +
             C6326 * C48224) *
                C48372 +
            ((C6879 - C6880 + C6881 - C6882) * C23173 +
             (C6883 - C6884 + C6885 - C6886) * C23167 + C12376 * C23174 +
             C12377 * C48224) *
                C48379 +
            ((C12926 - C12927 + C12928 - C12929) * C23173 +
             (C12930 - C12931 + C12932 - C12933) * C23167 +
             (C12366 - C12367 + C12368 - C12369) * C23174 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C25914) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C23173 +
             (C4878 - C4877 + C4880 - C4879) * C23167 +
             (C4882 - C4881 + C4884 - C4883) * C23174 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C48372 +
            (C6325 * C23173 + C6326 * C23167 + C6327 * C23174 +
             C6328 * C48224) *
                C48379 +
            (C12376 * C23173 + C12377 * C23167 +
             (C6315 - C6316 + C6317 - C6318) * C23174 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C25914) *
               C48300 * C255 +
           ((C6323 * C23173 + C6324 * C23167 + C6091 * C23174 +
             C6092 * C48224) *
                C48372 +
            (C12374 * C23173 + C12375 * C23167 +
             (C6316 - C6315 + C6318 - C6317) * C23174 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C48379 +
            ((C12367 - C12366 + C12369 - C12368) * C23173 +
             (C12371 - C12370 + C12373 - C12372) * C23167 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C23174 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            (C12934 * C23173 + C12935 * C23167 + C12374 * C23174 +
             C12375 * C48224) *
                C25914) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C23173 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C23167 +
             (C5201 - C5202 + C5203 - C5204) * C23174 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C48372 +
            ((C7081 - C7082 + C7083 - C7084) * C23173 +
             (C7085 - C7086 + C7087 - C7088) * C23167 +
             (C6523 - C6524 + C6525 - C6526) * C23174 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C48379 +
            ((C13135 - C13136 + C13137 - C13138) * C23173 +
             (C13139 - C13140 + C13141 - C13142) * C23167 +
             (C12572 - C12573 + C12574 - C12575) * C23174 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C25914) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C23173 +
             (C4878 - C4877 + C4880 - C4879) * C23167 +
             (C4882 - C4881 + C4884 - C4883) * C23174 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C48372 +
            (C6325 * C23173 + C6326 * C23167 + C6327 * C23174 +
             C6328 * C48224) *
                C48379 +
            (C12376 * C23173 + C12377 * C23167 +
             (C6315 - C6316 + C6317 - C6318) * C23174 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C25914) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C23173 +
             (C5206 - C5205 + C5208 - C5207) * C23167 +
             (C5210 - C5209 + C5212 - C5211) * C23174 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C48372 +
            ((C6524 - C6523 + C6526 - C6525) * C23173 +
             (C6528 - C6527 + C6530 - C6529) * C23167 +
             (C6532 - C6531 + C6534 - C6533) * C23174 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C48379 +
            ((C12573 - C12572 + C12575 - C12574) * C23173 +
             (C12577 - C12576 + C12579 - C12578) * C23167 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C23174 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            (C12934 * C23173 + C12935 * C23167 + C12374 * C23174 +
             C12375 * C48224) *
                C25914) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C23173 +
             (C6292 - C6291 + C6294 - C6293) * C23167 + C6325 * C23174 +
             C6326 * C48224) *
                C48372 +
            ((C6879 - C6880 + C6881 - C6882) * C23173 +
             (C6883 - C6884 + C6885 - C6886) * C23167 + C12376 * C23174 +
             C12377 * C48224) *
                C48379 +
            ((C12926 - C12927 + C12928 - C12929) * C23173 +
             (C12930 - C12931 + C12932 - C12933) * C23167 +
             (C12366 - C12367 + C12368 - C12369) * C23174 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C25914) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C23173 +
             (C4878 - C4877 + C4880 - C4879) * C23167 +
             (C4882 - C4881 + C4884 - C4883) * C23174 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C48372 +
            (C6325 * C23173 + C6326 * C23167 + C6327 * C23174 +
             C6328 * C48224) *
                C48379 +
            (C12376 * C23173 + C12377 * C23167 +
             (C6315 - C6316 + C6317 - C6318) * C23174 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C25914) *
               C48300 * C505 +
           ((C6323 * C23173 + C6324 * C23167 + C6091 * C23174 +
             C6092 * C48224) *
                C48372 +
            (C12374 * C23173 + C12375 * C23167 +
             (C6316 - C6315 + C6318 - C6317) * C23174 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C48379 +
            ((C12367 - C12366 + C12369 - C12368) * C23173 +
             (C12371 - C12370 + C12373 - C12372) * C23167 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C23174 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C23173 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C23167 +
            (C4873 - C4874 + C4875 - C4876) * C23174 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C48372 +
           ((C6287 - C6288 + C6289 - C6290) * C23173 +
            (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
            C6324 * C48224) *
               C48379 +
           C29508 * C25914) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C23173 +
            (C6292 - C6291 + C6294 - C6293) * C23167 + C6325 * C23174 +
            C6326 * C48224) *
               C48372 +
           ((C6879 - C6880 + C6881 - C6882) * C23173 +
            (C6883 - C6884 + C6885 - C6886) * C23167 + C12376 * C23174 +
            C12377 * C48224) *
               C48379 +
           ((C12926 - C12927 + C12928 - C12929) * C23173 +
            (C12930 - C12931 + C12932 - C12933) * C23167 +
            (C12366 - C12367 + C12368 - C12369) * C23174 +
            (C12370 - C12371 + C12372 - C12373) * C48224) *
               C25914) *
              C48300 * C572 +
          (C29508 * C48372 +
           (C14278 * C23173 + C14279 * C23167 +
            (C12367 - C12366 + C12369 - C12368) * C23174 +
            (C12371 - C12370 + C12373 - C12372) * C48224) *
               C48379 +
           ((C14270 - C14269 + C14272 - C14271) * C23173 +
            (C14274 - C14273 + C14276 - C14275) * C23167 +
            (C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                C23174 +
            (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                C48224) *
               C25914) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            C29508 * C25914) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C23173 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C23167 +
             (C5201 - C5202 + C5203 - C5204) * C23174 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C48372 +
            ((C7081 - C7082 + C7083 - C7084) * C23173 +
             (C7085 - C7086 + C7087 - C7088) * C23167 +
             (C6523 - C6524 + C6525 - C6526) * C23174 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C48379 +
            ((C13135 - C13136 + C13137 - C13138) * C23173 +
             (C13139 - C13140 + C13141 - C13142) * C23167 +
             (C12572 - C12573 + C12574 - C12575) * C23174 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C25914) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C23173 +
             (C6292 - C6291 + C6294 - C6293) * C23167 + C6325 * C23174 +
             C6326 * C48224) *
                C48372 +
            ((C6879 - C6880 + C6881 - C6882) * C23173 +
             (C6883 - C6884 + C6885 - C6886) * C23167 + C12376 * C23174 +
             C12377 * C48224) *
                C48379 +
            ((C12926 - C12927 + C12928 - C12929) * C23173 +
             (C12930 - C12931 + C12932 - C12933) * C23167 +
             (C12366 - C12367 + C12368 - C12369) * C23174 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C25914) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C23173 +
             (C7086 - C7085 + C7088 - C7087) * C23167 +
             (C6524 - C6523 + C6526 - C6525) * C23174 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C48372 +
            ((C13136 - C13135 + C13138 - C13137) * C23173 +
             (C13140 - C13139 + C13142 - C13141) * C23167 +
             (C12573 - C12572 + C12575 - C12574) * C23174 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C48379 +
            ((C14414 - C14413 + C14416 - C14415) * C23173 +
             (C14418 - C14417 + C14420 - C14419) * C23167 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C23174 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            C29508 * C25914) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C23173 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C23167 +
             (C5201 - C5202 + C5203 - C5204) * C23174 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C48372 +
            ((C7081 - C7082 + C7083 - C7084) * C23173 +
             (C7085 - C7086 + C7087 - C7088) * C23167 +
             (C6523 - C6524 + C6525 - C6526) * C23174 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C48379 +
            ((C13135 - C13136 + C13137 - C13138) * C23173 +
             (C13139 - C13140 + C13141 - C13142) * C23167 +
             (C12572 - C12573 + C12574 - C12575) * C23174 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C25914) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C23173 +
             (C4878 - C4877 + C4880 - C4879) * C23167 +
             (C4882 - C4881 + C4884 - C4883) * C23174 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C48372 +
            (C6325 * C23173 + C6326 * C23167 + C6327 * C23174 +
             C6328 * C48224) *
                C48379 +
            (C12376 * C23173 + C12377 * C23167 +
             (C6315 - C6316 + C6317 - C6318) * C23174 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C25914) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C23173 +
             (C5206 - C5205 + C5208 - C5207) * C23167 +
             (C5210 - C5209 + C5212 - C5211) * C23174 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C48372 +
            ((C6524 - C6523 + C6526 - C6525) * C23173 +
             (C6528 - C6527 + C6530 - C6529) * C23167 +
             (C6532 - C6531 + C6534 - C6533) * C23174 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C48379 +
            ((C12573 - C12572 + C12575 - C12574) * C23173 +
             (C12577 - C12576 + C12579 - C12578) * C23167 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C23174 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C23173 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C23167 +
             (C4873 - C4874 + C4875 - C4876) * C23174 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C48372 +
            ((C6287 - C6288 + C6289 - C6290) * C23173 +
             (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
             C6324 * C48224) *
                C48379 +
            C29508 * C25914) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C23173 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C23167 +
             (C5201 - C5202 + C5203 - C5204) * C23174 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C48372 +
            ((C7081 - C7082 + C7083 - C7084) * C23173 +
             (C7085 - C7086 + C7087 - C7088) * C23167 +
             (C6523 - C6524 + C6525 - C6526) * C23174 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C48379 +
            ((C13135 - C13136 + C13137 - C13138) * C23173 +
             (C13139 - C13140 + C13141 - C13142) * C23167 +
             (C12572 - C12573 + C12574 - C12575) * C23174 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C25914) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C23173 +
             (C6292 - C6291 + C6294 - C6293) * C23167 + C6325 * C23174 +
             C6326 * C48224) *
                C48372 +
            ((C6879 - C6880 + C6881 - C6882) * C23173 +
             (C6883 - C6884 + C6885 - C6886) * C23167 + C12376 * C23174 +
             C12377 * C48224) *
                C48379 +
            ((C12926 - C12927 + C12928 - C12929) * C23173 +
             (C12930 - C12931 + C12932 - C12933) * C23167 +
             (C12366 - C12367 + C12368 - C12369) * C23174 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C25914) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C23173 +
             (C7086 - C7085 + C7088 - C7087) * C23167 +
             (C6524 - C6523 + C6526 - C6525) * C23174 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C48372 +
            ((C13136 - C13135 + C13138 - C13137) * C23173 +
             (C13140 - C13139 + C13142 - C13141) * C23167 +
             (C12573 - C12572 + C12575 - C12574) * C23174 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C48379 +
            ((C14414 - C14413 + C14416 - C14415) * C23173 +
             (C14418 - C14417 + C14420 - C14419) * C23167 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C23174 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C23173 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C23167 +
            (C4873 - C4874 + C4875 - C4876) * C23174 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C48372 +
           ((C6287 - C6288 + C6289 - C6290) * C23173 +
            (C6291 - C6292 + C6293 - C6294) * C23167 + C6323 * C23174 +
            C6324 * C48224) *
               C48379 +
           C29508 * C25914) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C23173 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C23167 +
            (C5201 - C5202 + C5203 - C5204) * C23174 +
            (C5205 - C5206 + C5207 - C5208) * C48224) *
               C48372 +
           ((C7081 - C7082 + C7083 - C7084) * C23173 +
            (C7085 - C7086 + C7087 - C7088) * C23167 +
            (C6523 - C6524 + C6525 - C6526) * C23174 +
            (C6527 - C6528 + C6529 - C6530) * C48224) *
               C48379 +
           ((C13135 - C13136 + C13137 - C13138) * C23173 +
            (C13139 - C13140 + C13141 - C13142) * C23167 +
            (C12572 - C12573 + C12574 - C12575) * C23174 +
            (C12576 - C12577 + C12578 - C12579) * C48224) *
               C25914) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C23173 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C23167 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C23174 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C48224) *
               C48372 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C23173 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C23167 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C23174 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C48224) *
               C48379 +
           ((C48574 * C2316 - C4870 * C2307 + C48416 * C10042 -
             C4871 * C10040) *
                C23173 +
            (C48574 * C2325 - C4870 * C2317 + C48416 * C10046 -
             C4871 * C10043) *
                C23167 +
            (C48574 * C2318 - C4870 * C2308 + C48416 * C10044 -
             C4871 * C10041) *
                C23174 +
            (C48574 * C2326 - C4870 * C2319 + C48416 * C10047 -
             C4871 * C10045) *
                C48224) *
               C25914) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 + C1257 * C48224) *
               C48634 +
           (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
            C11151 * C48224) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C23173 + (C151 - C150) * C23167 +
            (C153 - C152) * C23174 + (C155 - C154) * C48224) *
               C48648 +
           (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 + C1261 * C48224) *
               C48644 +
           (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 + C1265 * C48224) *
               C48634 +
           (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
            (C1272 - C1273) * C48224) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C168 * C23173 + C169 * C23167 + C170 * C23174 + C171 * C48224) *
               C48648 +
           (C1068 * C23173 + C1069 * C23167 + C3787 * C23174 + C3788 * C48224) *
               C48644 +
           (C1082 * C23173 + C1083 * C23167 + (C1079 - C1078) * C23174 +
            (C1081 - C1080) * C48224) *
               C48634 +
           ((C1271 - C1270) * C23173 + (C1273 - C1272) * C23167 +
            (C48329 * C1239 - C113 * C1232) * C23174 +
            (C48329 * C1244 - C113 * C1240) * C48224) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C22089 + (C151 - C150) * C48647 +
            (C153 - C152) * C22090 + (C155 - C154) * C48640 +
            (C157 - C156) * C22091 + (C159 - C158) * C48627 +
            (C161 - C160) * C22092 + (C163 - C162) * C48610) *
               C22087 +
           (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
            C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
            (C298 - C299) * C48610) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C168 * C22089 + C169 * C48647 + C170 * C22090 + C171 * C48640 +
            C172 * C22091 + C173 * C48627 + (C165 - C164) * C22092 +
            (C167 - C166) * C48610) *
               C22087 +
           (C1068 * C22089 + C1069 * C48647 + C3787 * C22090 + C3788 * C48640 +
            (C297 - C296) * C22091 + (C299 - C298) * C48627 +
            (C48329 * C275 - C113 * C264) * C22092 +
            (C48329 * C282 - C113 * C276) * C48610) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C23173 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C23167 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
               C22087 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
            (C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C23174 +
            (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C48224) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C23173 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C23167 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C23174 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C48224) *
               C22087 +
           ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C23173 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C23167 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C23174 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48224) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C2489 * C23173 + C2490 * C23167 +
            (C2470 - C2469 + C2472 - C2471 + C2474 - C2473) * C23174 +
            (C2476 - C2475 + C2478 - C2477 + C2480 - C2479) * C48224) *
               C22087 +
           ((C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C23173 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C23167 +
            (C48642 * C271 - C2441 * C262 + C48631 * C688 - C2442 * C680 +
             C48609 * C2637 - C2443 * C2636) *
                C23174 +
            (C48642 * C280 - C2441 * C272 + C48631 * C695 - C2442 * C689 +
             C48609 * C2639 - C2443 * C2638) *
                C48224) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C48300 * C255 +
           (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C255 +
           ((C1250 * C23173 + C1251 * C23167 + C1068 * C23174 +
             C1069 * C48224) *
                C48648 +
            (C1256 * C23173 + C1257 * C23167 + C1082 * C23174 +
             C1083 * C48224) *
                C48644 +
            (C11150 * C23173 + C11151 * C23167 + (C1271 - C1270) * C23174 +
             (C1273 - C1272) * C48224) *
                C48634 +
            ((C9013 - C9012) * C23173 + (C9015 - C9014) * C23167 +
             (C48329 * C1714 - C113 * C1709) * C23174 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C48300 * C255 +
           (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C255 +
           ((C1250 * C22089 + C1251 * C48647 + C1068 * C22090 + C1069 * C48640 +
             C3787 * C22091 + C3788 * C48627 + (C297 - C296) * C22092 +
             (C299 - C298) * C48610) *
                C22087 +
            (C1256 * C22089 + C1257 * C48647 + C1082 * C22090 + C1083 * C48640 +
             (C1079 - C1078) * C22091 + (C1081 - C1080) * C48627 +
             (C48329 * C588 - C113 * C579) * C22092 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C48300 * C255 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C23173 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C23167 +
             C24524 * C23174 + C24525 * C48224) *
                C22087 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C23173 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C23167 +
             (C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C23174 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48224) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C23173 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C23167 +
             (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C23174 +
             (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C48224) *
                C22087 +
            (C24524 * C23173 + C24525 * C23167 +
             (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C23174 +
             (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48224) *
                C48376) *
               C48300 * C255 +
           ((C24522 * C23173 + C24523 * C23167 +
             (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C23174 +
             (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C48224) *
                C22087 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C23173 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C23167 +
             (C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
              C48609 * C2320 - C2443 * C2309) *
                 C23174 +
             (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
              C48609 * C2327 - C2443 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C381 +
           (((C409 - C408) * C23173 + (C411 - C410) * C23167 +
             (C413 - C412) * C23174 + (C415 - C414) * C48224) *
                C48648 +
            ((C1437 - C1436) * C23173 + (C1439 - C1438) * C23167 +
             (C1441 - C1440) * C23174 + (C1443 - C1442) * C48224) *
                C48644 +
            ((C1445 - C1444) * C23173 + (C1447 - C1446) * C23167 +
             (C1449 - C1448) * C23174 + (C1451 - C1450) * C48224) *
                C48634 +
            ((C11285 - C11284) * C23173 + (C11287 - C11286) * C23167 +
             (C48329 * C1889 - C113 * C1884) * C23174 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C381 +
           (((C409 - C408) * C22089 + (C411 - C410) * C48647 +
             (C413 - C412) * C22090 + (C415 - C414) * C48640 +
             (C417 - C416) * C22091 + (C419 - C418) * C48627 +
             (C421 - C420) * C22092 + (C423 - C422) * C48610) *
                C22087 +
            ((C1437 - C1436) * C22089 + (C1439 - C1438) * C48647 +
             (C1441 - C1440) * C22090 + (C1443 - C1442) * C48640 +
             (C4052 - C4051) * C22091 + (C4054 - C4053) * C48627 +
             (C48329 * C690 - C113 * C681) * C22092 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C23173 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C23167 +
             (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C23174 +
             (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C48224) *
                C22087 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C23173 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C23167 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C23174 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48224) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C23173 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C23167 +
             (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C23174 +
             (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C48224) *
                C22087 +
            (C24524 * C23173 + C24525 * C23167 +
             (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C23174 +
             (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48224) *
                C48376) *
               C381 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C23173 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C23167 +
             (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C23174 +
             (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C48224) *
                C22087 +
            ((C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C23173 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C23167 +
             (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
              C48609 * C3259 - C2443 * C3254) *
                 C23174 +
             (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
              C48609 * C3263 - C2443 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C48300 * C505 +
           (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C505 +
           ((C1250 * C23173 + C1251 * C23167 + C1068 * C23174 +
             C1069 * C48224) *
                C48648 +
            (C1256 * C23173 + C1257 * C23167 + C1082 * C23174 +
             C1083 * C48224) *
                C48644 +
            (C11150 * C23173 + C11151 * C23167 + (C1271 - C1270) * C23174 +
             (C1273 - C1272) * C48224) *
                C48634 +
            ((C9013 - C9012) * C23173 + (C9015 - C9014) * C23167 +
             (C48329 * C1714 - C113 * C1709) * C23174 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C48300 * C505 +
           (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C505 +
           ((C1250 * C22089 + C1251 * C48647 + C1068 * C22090 + C1069 * C48640 +
             C3787 * C22091 + C3788 * C48627 + (C297 - C296) * C22092 +
             (C299 - C298) * C48610) *
                C22087 +
            (C1256 * C22089 + C1257 * C48647 + C1082 * C22090 + C1083 * C48640 +
             (C1079 - C1078) * C22091 + (C1081 - C1080) * C48627 +
             (C48329 * C588 - C113 * C579) * C22092 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C48300 * C505 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C23173 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C23167 +
             C24524 * C23174 + C24525 * C48224) *
                C22087 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C23173 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C23167 +
             (C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C23174 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48224) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C23173 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C23167 +
             (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C23174 +
             (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C48224) *
                C22087 +
            (C24524 * C23173 + C24525 * C23167 +
             (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C23174 +
             (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48224) *
                C48376) *
               C48300 * C505 +
           ((C24522 * C23173 + C24523 * C23167 +
             (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C23174 +
             (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C48224) *
                C22087 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C23173 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C23167 +
             (C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
              C48609 * C2320 - C2443 * C2309) *
                 C23174 +
             (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
              C48609 * C2327 - C2443 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           C23676 * C48634 + C23677 * C48616) *
              C48300 * C571 +
          (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
            C1258 * C23174 + C1259 * C48224) *
               C48648 +
           ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
            C1262 * C23174 + C1263 * C48224) *
               C48644 +
           ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
            C11152 * C23174 + C11153 * C48224) *
               C48634 +
           ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
            (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
               C48616) *
              C48300 * C572 +
          (C23676 * C48648 + C23677 * C48644 +
           (C9258 * C23173 + C9259 * C23167 + (C9013 - C9012) * C23174 +
            (C9015 - C9014) * C48224) *
               C48634 +
           ((C9261 - C9260) * C23173 + (C9263 - C9262) * C23167 +
            (C48329 * C9003 - C113 * C9000) * C23174 +
            (C48329 * C9006 - C113 * C9004) * C48224) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C48300 * C571 +
          (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
            C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
            C3919 * C22092 + C3920 * C48610) *
               C22087 +
           ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
            C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
            (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
               C48376) *
              C48300 * C572 +
          ((C1720 * C22089 + C1721 * C48647 + C1256 * C22090 + C1257 * C48640 +
            C1082 * C22091 + C1083 * C48627 + (C1079 - C1078) * C22092 +
            (C1081 - C1080) * C48610) *
               C22087 +
           (C9256 * C22089 + C9257 * C48647 + C11150 * C22090 +
            C11151 * C48640 + (C1271 - C1270) * C22091 +
            (C1273 - C1272) * C48627 +
            (C48329 * C1239 - C113 * C1232) * C22092 +
            (C48329 * C1244 - C113 * C1240) * C48610) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C23173 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C23167 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
               C22087 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
            C24522 * C23174 + C24523 * C48224) *
               C48376) *
              C48300 * C571 +
          (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C23173 +
            (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C23167 +
            C24524 * C23174 + C24525 * C48224) *
               C22087 +
           ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C23173 +
            (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C23167 +
            (C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C23174 +
            (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48224) *
               C48376) *
              C48300 * C572 +
          ((C10325 * C23173 + C10326 * C23167 +
            (C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C23174 +
            (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C48224) *
               C22087 +
           ((C10312 - C10311 + C10314 - C10313 + C10316 - C10315) * C23173 +
            (C10318 - C10317 + C10320 - C10319 + C10322 - C10321) * C23167 +
            (C48642 * C1235 - C2441 * C1230 + C48631 * C1887 - C2442 * C1883 +
             C48609 * C9855 - C2443 * C9854) *
                C23174 +
            (C48642 * C1242 - C2441 * C1236 + C48631 * C1892 - C2442 * C1888 +
             C48609 * C9857 - C2443 * C9856) *
                C48224) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C381 +
           (((C1896 - C1895) * C23173 + (C1898 - C1897) * C23167 +
             (C1437 - C1436) * C23174 + (C1439 - C1438) * C48224) *
                C48648 +
            ((C1900 - C1899) * C23173 + (C1902 - C1901) * C23167 +
             (C1445 - C1444) * C23174 + (C1447 - C1446) * C48224) *
                C48644 +
            ((C9358 - C9357) * C23173 + (C9360 - C9359) * C23167 +
             (C11285 - C11284) * C23174 + (C11287 - C11286) * C48224) *
                C48634 +
            ((C9362 - C9361) * C23173 + (C9364 - C9363) * C23167 +
             (C48329 * C9101 - C113 * C9098) * C23174 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C381 +
           (((C1896 - C1895) * C22089 + (C1898 - C1897) * C48647 +
             (C1437 - C1436) * C22090 + (C1439 - C1438) * C48640 +
             (C1441 - C1440) * C22091 + (C1443 - C1442) * C48627 +
             (C4052 - C4051) * C22092 + (C4054 - C4053) * C48610) *
                C22087 +
            ((C1900 - C1899) * C22089 + (C1902 - C1901) * C48647 +
             (C1445 - C1444) * C22090 + (C1447 - C1446) * C48640 +
             (C1449 - C1448) * C22091 + (C1451 - C1450) * C48627 +
             (C48329 * C1429 - C113 * C1422) * C22092 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C23173 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C23167 +
             (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C23174 +
             (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C48224) *
                C22087 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C23173 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C23167 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C23174 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48224) *
                C48376) *
               C48603) *
              C505 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C23173 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C23167 +
             C24524 * C23174 + C24525 * C48224) *
                C22087 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C23173 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C23167 +
             (C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C23174 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48224) *
                C48376) *
               C381 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C23173 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C23167 +
             (C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C23174 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C48224) *
                C22087 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C23173 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C23167 +
             (C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C23174 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C779 +
           (((C409 - C408) * C23173 + (C411 - C410) * C23167 +
             (C413 - C412) * C23174 + (C415 - C414) * C48224) *
                C48648 +
            ((C1437 - C1436) * C23173 + (C1439 - C1438) * C23167 +
             (C1441 - C1440) * C23174 + (C1443 - C1442) * C48224) *
                C48644 +
            ((C1445 - C1444) * C23173 + (C1447 - C1446) * C23167 +
             (C1449 - C1448) * C23174 + (C1451 - C1450) * C48224) *
                C48634 +
            ((C11285 - C11284) * C23173 + (C11287 - C11286) * C23167 +
             (C48329 * C1889 - C113 * C1884) * C23174 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C779 +
           (((C409 - C408) * C22089 + (C411 - C410) * C48647 +
             (C413 - C412) * C22090 + (C415 - C414) * C48640 +
             (C417 - C416) * C22091 + (C419 - C418) * C48627 +
             (C421 - C420) * C22092 + (C423 - C422) * C48610) *
                C22087 +
            ((C1437 - C1436) * C22089 + (C1439 - C1438) * C48647 +
             (C1441 - C1440) * C22090 + (C1443 - C1442) * C48640 +
             (C4052 - C4051) * C22091 + (C4054 - C4053) * C48627 +
             (C48329 * C690 - C113 * C681) * C22092 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C23173 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C23167 +
             (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C23174 +
             (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C48224) *
                C22087 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C23173 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C23167 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C23174 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48224) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C23173 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C23167 +
             (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C23174 +
             (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C48224) *
                C22087 +
            (C24524 * C23173 + C24525 * C23167 +
             (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C23174 +
             (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48224) *
                C48376) *
               C779 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C23173 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C23167 +
             (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C23174 +
             (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C48224) *
                C22087 +
            ((C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C23173 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C23167 +
             (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
              C48609 * C3259 - C2443 * C3254) *
                 C23174 +
             (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
              C48609 * C3263 - C2443 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C779 +
           (((C1896 - C1895) * C23173 + (C1898 - C1897) * C23167 +
             (C1437 - C1436) * C23174 + (C1439 - C1438) * C48224) *
                C48648 +
            ((C1900 - C1899) * C23173 + (C1902 - C1901) * C23167 +
             (C1445 - C1444) * C23174 + (C1447 - C1446) * C48224) *
                C48644 +
            ((C9358 - C9357) * C23173 + (C9360 - C9359) * C23167 +
             (C11285 - C11284) * C23174 + (C11287 - C11286) * C48224) *
                C48634 +
            ((C9362 - C9361) * C23173 + (C9364 - C9363) * C23167 +
             (C48329 * C9101 - C113 * C9098) * C23174 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C779 +
           (((C1896 - C1895) * C22089 + (C1898 - C1897) * C48647 +
             (C1437 - C1436) * C22090 + (C1439 - C1438) * C48640 +
             (C1441 - C1440) * C22091 + (C1443 - C1442) * C48627 +
             (C4052 - C4051) * C22092 + (C4054 - C4053) * C48610) *
                C22087 +
            ((C1900 - C1899) * C22089 + (C1902 - C1901) * C48647 +
             (C1445 - C1444) * C22090 + (C1447 - C1446) * C48640 +
             (C1449 - C1448) * C22091 + (C1451 - C1450) * C48627 +
             (C48329 * C1429 - C113 * C1422) * C22092 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C23173 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C23167 +
             (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
             (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
                C22087 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
             C24522 * C23174 + C24523 * C48224) *
                C48376) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C23173 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C23167 +
             (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C23174 +
             (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C48224) *
                C22087 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C23173 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C23167 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C23174 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48224) *
                C48376) *
               C48603) *
              C255 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C23173 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C23167 +
             C24524 * C23174 + C24525 * C48224) *
                C22087 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C23173 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C23167 +
             (C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C23174 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48224) *
                C48376) *
               C779 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C23173 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C23167 +
             (C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C23174 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C48224) *
                C22087 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C23173 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C23167 +
             (C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C23174 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           C23676 * C48634 + C23677 * C48616) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C23173 +
            (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
            (C410 - C411) * C48224) *
               C48648 +
           ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
            (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
               C48644 +
           ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
            (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
               C48634 +
           ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
            (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
               C48616) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C23173 +
            (C48329 * C943 - C113 * C934) * C23167 +
            (C48329 * C935 - C113 * C929) * C23174 +
            (C48329 * C944 - C113 * C936) * C48224) *
               C48648 +
           ((C48329 * C2310 - C113 * C2304) * C23173 +
            (C48329 * C2322 - C113 * C2311) * C23167 +
            (C48329 * C2312 - C113 * C2305) * C23174 +
            (C48329 * C2323 - C113 * C2313) * C48224) *
               C48644 +
           ((C48329 * C2316 - C113 * C2307) * C23173 +
            (C48329 * C2325 - C113 * C2317) * C23167 +
            (C48329 * C2318 - C113 * C2308) * C23174 +
            (C48329 * C2326 - C113 * C2319) * C48224) *
               C48634 +
           ((C48329 * C9592 - C113 * C9590) * C23173 +
            (C48329 * C9596 - C113 * C9593) * C23167 +
            (C48329 * C9855 - C113 * C9854) * C23174 +
            (C48329 * C9857 - C113 * C9856) * C48224) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C22089 +
            (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
            (C410 - C411) * C48640 + (C412 - C413) * C22091 +
            (C414 - C415) * C48627 + (C416 - C417) * C22092 +
            (C418 - C419) * C48610) *
               C22087 +
           ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
            (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
            (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
            (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
               C48376) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C22089 +
            (C48329 * C943 - C113 * C934) * C48647 +
            (C48329 * C935 - C113 * C929) * C22090 +
            (C48329 * C944 - C113 * C936) * C48640 +
            (C48329 * C937 - C113 * C930) * C22091 +
            (C48329 * C945 - C113 * C938) * C48627 +
            (C48329 * C939 - C113 * C931) * C22092 +
            (C48329 * C946 - C113 * C940) * C48610) *
               C22087 +
           ((C48329 * C2310 - C113 * C2304) * C22089 +
            (C48329 * C2322 - C113 * C2311) * C48647 +
            (C48329 * C2312 - C113 * C2305) * C22090 +
            (C48329 * C2323 - C113 * C2313) * C48640 +
            (C48329 * C2314 - C113 * C2306) * C22091 +
            (C48329 * C2324 - C113 * C2315) * C48627 +
            (C48329 * C2637 - C113 * C2636) * C22092 +
            (C48329 * C2639 - C113 * C2638) * C48610) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C23173 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C23167 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C23174 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C48224) *
               C22087 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C23173 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C23167 +
            C24522 * C23174 + C24523 * C48224) *
               C48376) *
              C925 +
          (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C23173 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C23167 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C23174 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C48224) *
               C22087 +
           ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C23173 +
            (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C23167 +
            (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C23174 +
            (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48224) *
               C48376) *
              C926 +
          (((C48642 * C933 - C2441 * C928 + C48631 * C2814 - C2442 * C2810 +
             C48609 * C3669 - C2443 * C3666) *
                C23173 +
            (C48642 * C943 - C2441 * C934 + C48631 * C2822 - C2442 * C2815 +
             C48609 * C3675 - C2443 * C3670) *
                C23167 +
            (C48642 * C935 - C2441 * C929 + C48631 * C2816 - C2442 * C2811 +
             C48609 * C3671 - C2443 * C3667) *
                C23174 +
            (C48642 * C944 - C2441 * C936 + C48631 * C2823 - C2442 * C2817 +
             C48609 * C3676 - C2443 * C3672) *
                C48224) *
               C22087 +
           ((C48642 * C2310 - C2441 * C2304 + C48631 * C3255 - C2442 * C3252 +
             C48609 * C10907 - C2443 * C10905) *
                C23173 +
            (C48642 * C2322 - C2441 * C2311 + C48631 * C3261 - C2442 * C3256 +
             C48609 * C10911 - C2443 * C10908) *
                C23167 +
            (C48642 * C2312 - C2441 * C2305 + C48631 * C3257 - C2442 * C3253 +
             C48609 * C17530 - C2443 * C17529) *
                C23174 +
            (C48642 * C2323 - C2441 * C2313 + C48631 * C3262 - C2442 * C3258 +
             C48609 * C17532 - C2443 * C17531) *
                C48224) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47235 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48219 +
            (C4873 - C4874 + C4875 - C4876) * C47231 +
            (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
            C4914 * C25911) *
               C22087 +
           ((C6287 - C6288 + C6289 - C6290) * C47235 +
            (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
            C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C47235 +
            (C4878 - C4877 + C4880 - C4879) * C48219 +
            (C4882 - C4881 + C4884 - C4883) * C47231 +
            (C4886 - C4885 + C4888 - C4887) * C48227 +
            (C4890 - C4889 + C4892 - C4891) * C47241 +
            (C4894 - C4893 + C4896 - C4895) * C25911) *
               C22087 +
           (C6325 * C47235 + C6326 * C48219 + C6327 * C47231 + C6328 * C48227 +
            (C5063 - C5064 + C5065 - C5066) * C47241 +
            (C5067 - C5068 + C5069 - C5070) * C25911) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C4913 * C47235 + C4914 * C48219 + C4915 * C47231 + C4916 * C48227 +
            (C4898 - C4897 + C4900 - C4899) * C47241 +
            (C4902 - C4901 + C4904 - C4903) * C25911) *
               C22087 +
           (C6091 * C47235 + C6092 * C48219 +
            (C5064 - C5063 + C5066 - C5065) * C47231 +
            (C5068 - C5067 + C5070 - C5069) * C48227 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C47241 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C25911) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48219 + C6325 * C47231 +
             C6326 * C48227 + C6327 * C47241 + C6328 * C25911) *
                C22087 +
            ((C6879 - C6880 + C6881 - C6882) * C47235 +
             (C6883 - C6884 + C6885 - C6886) * C48219 + C12376 * C47231 +
             C12377 * C48227 + (C6315 - C6316 + C6317 - C6318) * C47241 +
             (C6319 - C6320 + C6321 - C6322) * C25911) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47235 +
             (C4878 - C4877 + C4880 - C4879) * C48219 +
             (C4882 - C4881 + C4884 - C4883) * C47231 +
             (C4886 - C4885 + C4888 - C4887) * C48227 +
             (C4890 - C4889 + C4892 - C4891) * C47241 +
             (C4894 - C4893 + C4896 - C4895) * C25911) *
                C22087 +
            (C6325 * C47235 + C6326 * C48219 + C6327 * C47231 + C6328 * C48227 +
             (C5063 - C5064 + C5065 - C5066) * C47241 +
             (C5067 - C5068 + C5069 - C5070) * C25911) *
                C48376) *
               C48300 * C255 +
           ((C6323 * C47235 + C6324 * C48219 + C6091 * C47231 + C6092 * C48227 +
             (C5064 - C5063 + C5066 - C5065) * C47241 +
             (C5068 - C5067 + C5070 - C5069) * C25911) *
                C22087 +
            (C12374 * C47235 + C12375 * C48219 +
             (C6316 - C6315 + C6318 - C6317) * C47231 +
             (C6320 - C6319 + C6322 - C6321) * C48227 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C47241 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C25911) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47235 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48219 +
             (C5201 - C5202 + C5203 - C5204) * C47231 +
             (C5205 - C5206 + C5207 - C5208) * C48227 +
             (C5209 - C5210 + C5211 - C5212) * C47241 +
             (C5213 - C5214 + C5215 - C5216) * C25911) *
                C22087 +
            ((C7081 - C7082 + C7083 - C7084) * C47235 +
             (C7085 - C7086 + C7087 - C7088) * C48219 +
             (C6523 - C6524 + C6525 - C6526) * C47231 +
             (C6527 - C6528 + C6529 - C6530) * C48227 +
             (C6531 - C6532 + C6533 - C6534) * C47241 +
             (C6535 - C6536 + C6537 - C6538) * C25911) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47235 +
             (C4878 - C4877 + C4880 - C4879) * C48219 +
             (C4882 - C4881 + C4884 - C4883) * C47231 +
             (C4886 - C4885 + C4888 - C4887) * C48227 +
             (C4890 - C4889 + C4892 - C4891) * C47241 +
             (C4894 - C4893 + C4896 - C4895) * C25911) *
                C22087 +
            (C6325 * C47235 + C6326 * C48219 + C6327 * C47231 + C6328 * C48227 +
             (C5063 - C5064 + C5065 - C5066) * C47241 +
             (C5067 - C5068 + C5069 - C5070) * C25911) *
                C48376) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C47235 +
             (C5206 - C5205 + C5208 - C5207) * C48219 +
             (C5210 - C5209 + C5212 - C5211) * C47231 +
             (C5214 - C5213 + C5216 - C5215) * C48227 +
             (C5218 - C5217 + C5220 - C5219) * C47241 +
             (C5222 - C5221 + C5224 - C5223) * C25911) *
                C22087 +
            ((C6524 - C6523 + C6526 - C6525) * C47235 +
             (C6528 - C6527 + C6530 - C6529) * C48219 +
             (C6532 - C6531 + C6534 - C6533) * C47231 +
             (C6536 - C6535 + C6538 - C6537) * C48227 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C47241 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C25911) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48219 + C6325 * C47231 +
             C6326 * C48227 + C6327 * C47241 + C6328 * C25911) *
                C22087 +
            ((C6879 - C6880 + C6881 - C6882) * C47235 +
             (C6883 - C6884 + C6885 - C6886) * C48219 + C12376 * C47231 +
             C12377 * C48227 + (C6315 - C6316 + C6317 - C6318) * C47241 +
             (C6319 - C6320 + C6321 - C6322) * C25911) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47235 +
             (C4878 - C4877 + C4880 - C4879) * C48219 +
             (C4882 - C4881 + C4884 - C4883) * C47231 +
             (C4886 - C4885 + C4888 - C4887) * C48227 +
             (C4890 - C4889 + C4892 - C4891) * C47241 +
             (C4894 - C4893 + C4896 - C4895) * C25911) *
                C22087 +
            (C6325 * C47235 + C6326 * C48219 + C6327 * C47231 + C6328 * C48227 +
             (C5063 - C5064 + C5065 - C5066) * C47241 +
             (C5067 - C5068 + C5069 - C5070) * C25911) *
                C48376) *
               C48300 * C505 +
           ((C6323 * C47235 + C6324 * C48219 + C6091 * C47231 + C6092 * C48227 +
             (C5064 - C5063 + C5066 - C5065) * C47241 +
             (C5068 - C5067 + C5070 - C5069) * C25911) *
                C22087 +
            (C12374 * C47235 + C12375 * C48219 +
             (C6316 - C6315 + C6318 - C6317) * C47231 +
             (C6320 - C6319 + C6322 - C6321) * C48227 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C47241 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C25911) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47235 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48219 +
            (C4873 - C4874 + C4875 - C4876) * C47231 +
            (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
            C4914 * C25911) *
               C22087 +
           ((C6287 - C6288 + C6289 - C6290) * C47235 +
            (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
            C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
               C48376) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C47235 +
            (C6292 - C6291 + C6294 - C6293) * C48219 + C6325 * C47231 +
            C6326 * C48227 + C6327 * C47241 + C6328 * C25911) *
               C22087 +
           ((C6879 - C6880 + C6881 - C6882) * C47235 +
            (C6883 - C6884 + C6885 - C6886) * C48219 + C12376 * C47231 +
            C12377 * C48227 + (C6315 - C6316 + C6317 - C6318) * C47241 +
            (C6319 - C6320 + C6321 - C6322) * C25911) *
               C48376) *
              C48300 * C572 +
          ((C12934 * C47235 + C12935 * C48219 + C12374 * C47231 +
            C12375 * C48227 + (C6316 - C6315 + C6318 - C6317) * C47241 +
            (C6320 - C6319 + C6322 - C6321) * C25911) *
               C22087 +
           (C14278 * C47235 + C14279 * C48219 +
            (C12367 - C12366 + C12369 - C12368) * C47231 +
            (C12371 - C12370 + C12373 - C12372) * C48227 +
            (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                C47241 +
            (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                C25911) *
               C48376) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47235 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48219 +
             (C5201 - C5202 + C5203 - C5204) * C47231 +
             (C5205 - C5206 + C5207 - C5208) * C48227 +
             (C5209 - C5210 + C5211 - C5212) * C47241 +
             (C5213 - C5214 + C5215 - C5216) * C25911) *
                C22087 +
            ((C7081 - C7082 + C7083 - C7084) * C47235 +
             (C7085 - C7086 + C7087 - C7088) * C48219 +
             (C6523 - C6524 + C6525 - C6526) * C47231 +
             (C6527 - C6528 + C6529 - C6530) * C48227 +
             (C6531 - C6532 + C6533 - C6534) * C47241 +
             (C6535 - C6536 + C6537 - C6538) * C25911) *
                C48376) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48219 + C6325 * C47231 +
             C6326 * C48227 + C6327 * C47241 + C6328 * C25911) *
                C22087 +
            ((C6879 - C6880 + C6881 - C6882) * C47235 +
             (C6883 - C6884 + C6885 - C6886) * C48219 + C12376 * C47231 +
             C12377 * C48227 + (C6315 - C6316 + C6317 - C6318) * C47241 +
             (C6319 - C6320 + C6321 - C6322) * C25911) *
                C48376) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C47235 +
             (C7086 - C7085 + C7088 - C7087) * C48219 +
             (C6524 - C6523 + C6526 - C6525) * C47231 +
             (C6528 - C6527 + C6530 - C6529) * C48227 +
             (C6532 - C6531 + C6534 - C6533) * C47241 +
             (C6536 - C6535 + C6538 - C6537) * C25911) *
                C22087 +
            ((C13136 - C13135 + C13138 - C13137) * C47235 +
             (C13140 - C13139 + C13142 - C13141) * C48219 +
             (C12573 - C12572 + C12575 - C12574) * C47231 +
             (C12577 - C12576 + C12579 - C12578) * C48227 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47241 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C25911) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47235 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48219 +
             (C5201 - C5202 + C5203 - C5204) * C47231 +
             (C5205 - C5206 + C5207 - C5208) * C48227 +
             (C5209 - C5210 + C5211 - C5212) * C47241 +
             (C5213 - C5214 + C5215 - C5216) * C25911) *
                C22087 +
            ((C7081 - C7082 + C7083 - C7084) * C47235 +
             (C7085 - C7086 + C7087 - C7088) * C48219 +
             (C6523 - C6524 + C6525 - C6526) * C47231 +
             (C6527 - C6528 + C6529 - C6530) * C48227 +
             (C6531 - C6532 + C6533 - C6534) * C47241 +
             (C6535 - C6536 + C6537 - C6538) * C25911) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47235 +
             (C4878 - C4877 + C4880 - C4879) * C48219 +
             (C4882 - C4881 + C4884 - C4883) * C47231 +
             (C4886 - C4885 + C4888 - C4887) * C48227 +
             (C4890 - C4889 + C4892 - C4891) * C47241 +
             (C4894 - C4893 + C4896 - C4895) * C25911) *
                C22087 +
            (C6325 * C47235 + C6326 * C48219 + C6327 * C47231 + C6328 * C48227 +
             (C5063 - C5064 + C5065 - C5066) * C47241 +
             (C5067 - C5068 + C5069 - C5070) * C25911) *
                C48376) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C47235 +
             (C5206 - C5205 + C5208 - C5207) * C48219 +
             (C5210 - C5209 + C5212 - C5211) * C47231 +
             (C5214 - C5213 + C5216 - C5215) * C48227 +
             (C5218 - C5217 + C5220 - C5219) * C47241 +
             (C5222 - C5221 + C5224 - C5223) * C25911) *
                C22087 +
            ((C6524 - C6523 + C6526 - C6525) * C47235 +
             (C6528 - C6527 + C6530 - C6529) * C48219 +
             (C6532 - C6531 + C6534 - C6533) * C47231 +
             (C6536 - C6535 + C6538 - C6537) * C48227 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C47241 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C25911) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47235 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48219 +
             (C4873 - C4874 + C4875 - C4876) * C47231 +
             (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
             C4914 * C25911) *
                C22087 +
            ((C6287 - C6288 + C6289 - C6290) * C47235 +
             (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
             C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47235 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48219 +
             (C5201 - C5202 + C5203 - C5204) * C47231 +
             (C5205 - C5206 + C5207 - C5208) * C48227 +
             (C5209 - C5210 + C5211 - C5212) * C47241 +
             (C5213 - C5214 + C5215 - C5216) * C25911) *
                C22087 +
            ((C7081 - C7082 + C7083 - C7084) * C47235 +
             (C7085 - C7086 + C7087 - C7088) * C48219 +
             (C6523 - C6524 + C6525 - C6526) * C47231 +
             (C6527 - C6528 + C6529 - C6530) * C48227 +
             (C6531 - C6532 + C6533 - C6534) * C47241 +
             (C6535 - C6536 + C6537 - C6538) * C25911) *
                C48376) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C47235 +
             (C6292 - C6291 + C6294 - C6293) * C48219 + C6325 * C47231 +
             C6326 * C48227 + C6327 * C47241 + C6328 * C25911) *
                C22087 +
            ((C6879 - C6880 + C6881 - C6882) * C47235 +
             (C6883 - C6884 + C6885 - C6886) * C48219 + C12376 * C47231 +
             C12377 * C48227 + (C6315 - C6316 + C6317 - C6318) * C47241 +
             (C6319 - C6320 + C6321 - C6322) * C25911) *
                C48376) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C47235 +
             (C7086 - C7085 + C7088 - C7087) * C48219 +
             (C6524 - C6523 + C6526 - C6525) * C47231 +
             (C6528 - C6527 + C6530 - C6529) * C48227 +
             (C6532 - C6531 + C6534 - C6533) * C47241 +
             (C6536 - C6535 + C6538 - C6537) * C25911) *
                C22087 +
            ((C13136 - C13135 + C13138 - C13137) * C47235 +
             (C13140 - C13139 + C13142 - C13141) * C48219 +
             (C12573 - C12572 + C12575 - C12574) * C47231 +
             (C12577 - C12576 + C12579 - C12578) * C48227 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47241 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C25911) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47235 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48219 +
            (C4873 - C4874 + C4875 - C4876) * C47231 +
            (C4877 - C4878 + C4879 - C4880) * C48227 + C4913 * C47241 +
            C4914 * C25911) *
               C22087 +
           ((C6287 - C6288 + C6289 - C6290) * C47235 +
            (C6291 - C6292 + C6293 - C6294) * C48219 + C6323 * C47231 +
            C6324 * C48227 + C6091 * C47241 + C6092 * C25911) *
               C48376) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C47235 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C48219 +
            (C5201 - C5202 + C5203 - C5204) * C47231 +
            (C5205 - C5206 + C5207 - C5208) * C48227 +
            (C5209 - C5210 + C5211 - C5212) * C47241 +
            (C5213 - C5214 + C5215 - C5216) * C25911) *
               C22087 +
           ((C7081 - C7082 + C7083 - C7084) * C47235 +
            (C7085 - C7086 + C7087 - C7088) * C48219 +
            (C6523 - C6524 + C6525 - C6526) * C47231 +
            (C6527 - C6528 + C6529 - C6530) * C48227 +
            (C6531 - C6532 + C6533 - C6534) * C47241 +
            (C6535 - C6536 + C6537 - C6538) * C25911) *
               C48376) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C47235 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C48219 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C47231 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C48227 +
            (C48574 * C937 - C4870 * C930 + C48416 * C2818 - C4871 * C2812) *
                C47241 +
            (C48574 * C945 - C4870 * C938 + C48416 * C2824 - C4871 * C2819) *
                C25911) *
               C22087 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C47235 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C48219 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C47231 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C48227 +
            (C48574 * C2314 - C4870 * C2306 + C48416 * C3259 - C4871 * C3254) *
                C47241 +
            (C48574 * C2324 - C4870 * C2315 + C48416 * C3263 - C4871 * C3260) *
                C25911) *
               C48376) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C22089 + (C151 - C150) * C48647 +
            (C153 - C152) * C22090 + (C155 - C154) * C48640 +
            (C157 - C156) * C22091 + (C159 - C158) * C48627 +
            (C161 - C160) * C22092 + (C163 - C162) * C48610) *
               C22087 +
           (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
            C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
            (C298 - C299) * C48610) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C168 * C22089 + C169 * C48647 + C170 * C22090 + C171 * C48640 +
            C172 * C22091 + C173 * C48627 + (C165 - C164) * C22092 +
            (C167 - C166) * C48610) *
               C22087 +
           (C1068 * C22089 + C1069 * C48647 + C3787 * C22090 + C3788 * C48640 +
            (C297 - C296) * C22091 + (C299 - C298) * C48627 +
            (C48329 * C275 - C113 * C264) * C22092 +
            (C48329 * C282 - C113 * C276) * C48610) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 + C1257 * C48224) *
               C48634 +
           (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
            C11151 * C48224) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C23173 + (C151 - C150) * C23167 +
            (C153 - C152) * C23174 + (C155 - C154) * C48224) *
               C48648 +
           (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 + C1261 * C48224) *
               C48644 +
           (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 + C1265 * C48224) *
               C48634 +
           (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
            (C1272 - C1273) * C48224) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C168 * C23173 + C169 * C23167 + C170 * C23174 + C171 * C48224) *
               C48648 +
           (C1068 * C23173 + C1069 * C23167 + C3787 * C23174 + C3788 * C48224) *
               C48644 +
           (C1082 * C23173 + C1083 * C23167 + (C1079 - C1078) * C23174 +
            (C1081 - C1080) * C48224) *
               C48634 +
           ((C1271 - C1270) * C23173 + (C1273 - C1272) * C23167 +
            (C48329 * C1239 - C113 * C1232) * C23174 +
            (C48329 * C1244 - C113 * C1240) * C48224) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C48300 * C255 +
           (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C255 +
           ((C1250 * C22089 + C1251 * C48647 + C1068 * C22090 + C1069 * C48640 +
             C3787 * C22091 + C3788 * C48627 + (C297 - C296) * C22092 +
             (C299 - C298) * C48610) *
                C22087 +
            (C1256 * C22089 + C1257 * C48647 + C1082 * C22090 + C1083 * C48640 +
             (C1079 - C1078) * C22091 + (C1081 - C1080) * C48627 +
             (C48329 * C588 - C113 * C579) * C22092 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C48300 * C255 +
           (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C255 +
           ((C1250 * C23173 + C1251 * C23167 + C1068 * C23174 +
             C1069 * C48224) *
                C48648 +
            (C1256 * C23173 + C1257 * C23167 + C1082 * C23174 +
             C1083 * C48224) *
                C48644 +
            (C11150 * C23173 + C11151 * C23167 + (C1271 - C1270) * C23174 +
             (C1273 - C1272) * C48224) *
                C48634 +
            ((C9013 - C9012) * C23173 + (C9015 - C9014) * C23167 +
             (C48329 * C1714 - C113 * C1709) * C23174 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C381 +
           (((C409 - C408) * C22089 + (C411 - C410) * C48647 +
             (C413 - C412) * C22090 + (C415 - C414) * C48640 +
             (C417 - C416) * C22091 + (C419 - C418) * C48627 +
             (C421 - C420) * C22092 + (C423 - C422) * C48610) *
                C22087 +
            ((C1437 - C1436) * C22089 + (C1439 - C1438) * C48647 +
             (C1441 - C1440) * C22090 + (C1443 - C1442) * C48640 +
             (C4052 - C4051) * C22091 + (C4054 - C4053) * C48627 +
             (C48329 * C690 - C113 * C681) * C22092 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C381 +
           (((C409 - C408) * C23173 + (C411 - C410) * C23167 +
             (C413 - C412) * C23174 + (C415 - C414) * C48224) *
                C48648 +
            ((C1437 - C1436) * C23173 + (C1439 - C1438) * C23167 +
             (C1441 - C1440) * C23174 + (C1443 - C1442) * C48224) *
                C48644 +
            ((C1445 - C1444) * C23173 + (C1447 - C1446) * C23167 +
             (C1449 - C1448) * C23174 + (C1451 - C1450) * C48224) *
                C48634 +
            ((C11285 - C11284) * C23173 + (C11287 - C11286) * C23167 +
             (C48329 * C1889 - C113 * C1884) * C23174 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C48300 * C505 +
           (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C505 +
           ((C1250 * C22089 + C1251 * C48647 + C1068 * C22090 + C1069 * C48640 +
             C3787 * C22091 + C3788 * C48627 + (C297 - C296) * C22092 +
             (C299 - C298) * C48610) *
                C22087 +
            (C1256 * C22089 + C1257 * C48647 + C1082 * C22090 + C1083 * C48640 +
             (C1079 - C1078) * C22091 + (C1081 - C1080) * C48627 +
             (C48329 * C588 - C113 * C579) * C22092 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            (C1720 * C23173 + C1721 * C23167 + C1256 * C23174 +
             C1257 * C48224) *
                C48634 +
            (C9256 * C23173 + C9257 * C23167 + C11150 * C23174 +
             C11151 * C48224) *
                C48616) *
               C48300 * C505 +
           (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C505 +
           ((C1250 * C23173 + C1251 * C23167 + C1068 * C23174 +
             C1069 * C48224) *
                C48648 +
            (C1256 * C23173 + C1257 * C23167 + C1082 * C23174 +
             C1083 * C48224) *
                C48644 +
            (C11150 * C23173 + C11151 * C23167 + (C1271 - C1270) * C23174 +
             (C1273 - C1272) * C48224) *
                C48634 +
            ((C9013 - C9012) * C23173 + (C9015 - C9014) * C23167 +
             (C48329 * C1714 - C113 * C1709) * C23174 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C48300 * C571 +
          (((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
            C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
            C3919 * C22092 + C3920 * C48610) *
               C22087 +
           ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
            C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
            (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
               C48376) *
              C48300 * C572 +
          ((C1720 * C22089 + C1721 * C48647 + C1256 * C22090 + C1257 * C48640 +
            C1082 * C22091 + C1083 * C48627 + (C1079 - C1078) * C22092 +
            (C1081 - C1080) * C48610) *
               C22087 +
           (C9256 * C22089 + C9257 * C48647 + C11150 * C22090 +
            C11151 * C48640 + (C1271 - C1270) * C22091 +
            (C1273 - C1272) * C48627 +
            (C48329 * C1239 - C113 * C1232) * C22092 +
            (C48329 * C1244 - C113 * C1240) * C48610) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           C23676 * C48634 + C23677 * C48616) *
              C48300 * C571 +
          (((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
            C1258 * C23174 + C1259 * C48224) *
               C48648 +
           ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
            C1262 * C23174 + C1263 * C48224) *
               C48644 +
           ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
            C11152 * C23174 + C11153 * C48224) *
               C48634 +
           ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
            (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
               C48616) *
              C48300 * C572 +
          (C23676 * C48648 + C23677 * C48644 +
           (C9258 * C23173 + C9259 * C23167 + (C9013 - C9012) * C23174 +
            (C9015 - C9014) * C48224) *
               C48634 +
           ((C9261 - C9260) * C23173 + (C9263 - C9262) * C23167 +
            (C48329 * C9003 - C113 * C9000) * C23174 +
            (C48329 * C9006 - C113 * C9004) * C48224) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C381 +
           (((C1896 - C1895) * C22089 + (C1898 - C1897) * C48647 +
             (C1437 - C1436) * C22090 + (C1439 - C1438) * C48640 +
             (C1441 - C1440) * C22091 + (C1443 - C1442) * C48627 +
             (C4052 - C4051) * C22092 + (C4054 - C4053) * C48610) *
                C22087 +
            ((C1900 - C1899) * C22089 + (C1902 - C1901) * C48647 +
             (C1445 - C1444) * C22090 + (C1447 - C1446) * C48640 +
             (C1449 - C1448) * C22091 + (C1451 - C1450) * C48627 +
             (C48329 * C1429 - C113 * C1422) * C22092 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C381 +
           (((C1896 - C1895) * C23173 + (C1898 - C1897) * C23167 +
             (C1437 - C1436) * C23174 + (C1439 - C1438) * C48224) *
                C48648 +
            ((C1900 - C1899) * C23173 + (C1902 - C1901) * C23167 +
             (C1445 - C1444) * C23174 + (C1447 - C1446) * C48224) *
                C48644 +
            ((C9358 - C9357) * C23173 + (C9360 - C9359) * C23167 +
             (C11285 - C11284) * C23174 + (C11287 - C11286) * C48224) *
                C48634 +
            ((C9362 - C9361) * C23173 + (C9364 - C9363) * C23167 +
             (C48329 * C9101 - C113 * C9098) * C23174 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C22089 + (C151 - C150) * C48647 +
             (C153 - C152) * C22090 + (C155 - C154) * C48640 +
             (C157 - C156) * C22091 + (C159 - C158) * C48627 +
             (C161 - C160) * C22092 + (C163 - C162) * C48610) *
                C22087 +
            (C1258 * C22089 + C1259 * C48647 + C1260 * C22090 + C1261 * C48640 +
             C3919 * C22091 + C3920 * C48627 + (C296 - C297) * C22092 +
             (C298 - C299) * C48610) *
                C48376) *
               C779 +
           (((C409 - C408) * C22089 + (C411 - C410) * C48647 +
             (C413 - C412) * C22090 + (C415 - C414) * C48640 +
             (C417 - C416) * C22091 + (C419 - C418) * C48627 +
             (C421 - C420) * C22092 + (C423 - C422) * C48610) *
                C22087 +
            ((C1437 - C1436) * C22089 + (C1439 - C1438) * C48647 +
             (C1441 - C1440) * C22090 + (C1443 - C1442) * C48640 +
             (C4052 - C4051) * C22091 + (C4054 - C4053) * C48627 +
             (C48329 * C690 - C113 * C681) * C22092 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C23173 + (C151 - C150) * C23167 +
             (C153 - C152) * C23174 + (C155 - C154) * C48224) *
                C48648 +
            (C1258 * C23173 + C1259 * C23167 + C1260 * C23174 +
             C1261 * C48224) *
                C48644 +
            (C1262 * C23173 + C1263 * C23167 + C1264 * C23174 +
             C1265 * C48224) *
                C48634 +
            (C11152 * C23173 + C11153 * C23167 + (C1270 - C1271) * C23174 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C779 +
           (((C409 - C408) * C23173 + (C411 - C410) * C23167 +
             (C413 - C412) * C23174 + (C415 - C414) * C48224) *
                C48648 +
            ((C1437 - C1436) * C23173 + (C1439 - C1438) * C23167 +
             (C1441 - C1440) * C23174 + (C1443 - C1442) * C48224) *
                C48644 +
            ((C1445 - C1444) * C23173 + (C1447 - C1446) * C23167 +
             (C1449 - C1448) * C23174 + (C1451 - C1450) * C48224) *
                C48634 +
            ((C11285 - C11284) * C23173 + (C11287 - C11286) * C23167 +
             (C48329 * C1889 - C113 * C1884) * C23174 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C22089 +
             (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
             (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
             C170 * C22092 + C171 * C48610) *
                C22087 +
            ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
             C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
             C3787 * C22092 + C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C22089 +
             (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
             (C410 - C411) * C48640 + (C412 - C413) * C22091 +
             (C414 - C415) * C48627 + (C416 - C417) * C22092 +
             (C418 - C419) * C48610) *
                C22087 +
            ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
             (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
             (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
             (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C22089 + (C1249 - C1248) * C48647 +
             C1258 * C22090 + C1259 * C48640 + C1260 * C22091 + C1261 * C48627 +
             C3919 * C22092 + C3920 * C48610) *
                C22087 +
            ((C1253 - C1252) * C22089 + (C1255 - C1254) * C48647 +
             C1262 * C22090 + C1263 * C48640 + C1264 * C22091 + C1265 * C48627 +
             (C1078 - C1079) * C22092 + (C1080 - C1081) * C48610) *
                C48376) *
               C779 +
           (((C1896 - C1895) * C22089 + (C1898 - C1897) * C48647 +
             (C1437 - C1436) * C22090 + (C1439 - C1438) * C48640 +
             (C1441 - C1440) * C22091 + (C1443 - C1442) * C48627 +
             (C4052 - C4051) * C22092 + (C4054 - C4053) * C48610) *
                C22087 +
            ((C1900 - C1899) * C22089 + (C1902 - C1901) * C48647 +
             (C1445 - C1444) * C22090 + (C1447 - C1446) * C48640 +
             (C1449 - C1448) * C22091 + (C1451 - C1450) * C48627 +
             (C48329 * C1429 - C113 * C1422) * C22092 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C23173 +
             (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
             (C150 - C151) * C48224) *
                C48648 +
            ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
             C1250 * C23174 + C1251 * C48224) *
                C48644 +
            C23676 * C48634 + C23677 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C23173 +
             (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
             (C410 - C411) * C48224) *
                C48648 +
            ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
             (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
                C48644 +
            ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
             (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
                C48634 +
            ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
             (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C23173 + (C1249 - C1248) * C23167 +
             C1258 * C23174 + C1259 * C48224) *
                C48648 +
            ((C1253 - C1252) * C23173 + (C1255 - C1254) * C23167 +
             C1262 * C23174 + C1263 * C48224) *
                C48644 +
            ((C1726 - C1727) * C23173 + (C1728 - C1729) * C23167 +
             C11152 * C23174 + C11153 * C48224) *
                C48634 +
            ((C9009 - C9008) * C23173 + (C9011 - C9010) * C23167 +
             (C9012 - C9013) * C23174 + (C9014 - C9015) * C48224) *
                C48616) *
               C779 +
           (((C1896 - C1895) * C23173 + (C1898 - C1897) * C23167 +
             (C1437 - C1436) * C23174 + (C1439 - C1438) * C48224) *
                C48648 +
            ((C1900 - C1899) * C23173 + (C1902 - C1901) * C23167 +
             (C1445 - C1444) * C23174 + (C1447 - C1446) * C48224) *
                C48644 +
            ((C9358 - C9357) * C23173 + (C9360 - C9359) * C23167 +
             (C11285 - C11284) * C23174 + (C11287 - C11286) * C48224) *
                C48634 +
            ((C9362 - C9361) * C23173 + (C9364 - C9363) * C23167 +
             (C48329 * C9101 - C113 * C9098) * C23174 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C22089 +
            (C48329 * C140 - C113 * C127) * C48647 + (C148 - C149) * C22090 +
            (C150 - C151) * C48640 + C168 * C22091 + C169 * C48627 +
            C170 * C22092 + C171 * C48610) *
               C22087 +
           ((C1246 - C1247) * C22089 + (C1248 - C1249) * C48647 +
            C1250 * C22090 + C1251 * C48640 + C1068 * C22091 + C1069 * C48627 +
            C3787 * C22092 + C3788 * C48610) *
               C48376) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C22089 +
            (C113 * C390 - C48329 * C401) * C48647 + (C408 - C409) * C22090 +
            (C410 - C411) * C48640 + (C412 - C413) * C22091 +
            (C414 - C415) * C48627 + (C416 - C417) * C22092 +
            (C418 - C419) * C48610) *
               C22087 +
           ((C1895 - C1896) * C22089 + (C1897 - C1898) * C48647 +
            (C1436 - C1437) * C22090 + (C1438 - C1439) * C48640 +
            (C1440 - C1441) * C22091 + (C1442 - C1443) * C48627 +
            (C4051 - C4052) * C22092 + (C4053 - C4054) * C48610) *
               C48376) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C22089 +
            (C48329 * C943 - C113 * C934) * C48647 +
            (C48329 * C935 - C113 * C929) * C22090 +
            (C48329 * C944 - C113 * C936) * C48640 +
            (C48329 * C937 - C113 * C930) * C22091 +
            (C48329 * C945 - C113 * C938) * C48627 +
            (C48329 * C939 - C113 * C931) * C22092 +
            (C48329 * C946 - C113 * C940) * C48610) *
               C22087 +
           ((C48329 * C2310 - C113 * C2304) * C22089 +
            (C48329 * C2322 - C113 * C2311) * C48647 +
            (C48329 * C2312 - C113 * C2305) * C22090 +
            (C48329 * C2323 - C113 * C2313) * C48640 +
            (C48329 * C2314 - C113 * C2306) * C22091 +
            (C48329 * C2324 - C113 * C2315) * C48627 +
            (C48329 * C2637 - C113 * C2636) * C22092 +
            (C48329 * C2639 - C113 * C2638) * C48610) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C23173 +
            (C48329 * C140 - C113 * C127) * C23167 + (C148 - C149) * C23174 +
            (C150 - C151) * C48224) *
               C48648 +
           ((C1246 - C1247) * C23173 + (C1248 - C1249) * C23167 +
            C1250 * C23174 + C1251 * C48224) *
               C48644 +
           C23676 * C48634 + C23677 * C48616) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C23173 +
            (C113 * C390 - C48329 * C401) * C23167 + (C408 - C409) * C23174 +
            (C410 - C411) * C48224) *
               C48648 +
           ((C1895 - C1896) * C23173 + (C1897 - C1898) * C23167 +
            (C1436 - C1437) * C23174 + (C1438 - C1439) * C48224) *
               C48644 +
           ((C1899 - C1900) * C23173 + (C1901 - C1902) * C23167 +
            (C1444 - C1445) * C23174 + (C1446 - C1447) * C48224) *
               C48634 +
           ((C9357 - C9358) * C23173 + (C9359 - C9360) * C23167 +
            (C11284 - C11285) * C23174 + (C11286 - C11287) * C48224) *
               C48616) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C23173 +
            (C48329 * C943 - C113 * C934) * C23167 +
            (C48329 * C935 - C113 * C929) * C23174 +
            (C48329 * C944 - C113 * C936) * C48224) *
               C48648 +
           ((C48329 * C2310 - C113 * C2304) * C23173 +
            (C48329 * C2322 - C113 * C2311) * C23167 +
            (C48329 * C2312 - C113 * C2305) * C23174 +
            (C48329 * C2323 - C113 * C2313) * C48224) *
               C48644 +
           ((C48329 * C2316 - C113 * C2307) * C23173 +
            (C48329 * C2325 - C113 * C2317) * C23167 +
            (C48329 * C2318 - C113 * C2308) * C23174 +
            (C48329 * C2326 - C113 * C2319) * C48224) *
               C48634 +
           ((C48329 * C9592 - C113 * C9590) * C23173 +
            (C48329 * C9596 - C113 * C9593) * C23167 +
            (C48329 * C9855 - C113 * C9854) * C23174 +
            (C48329 * C9857 - C113 * C9856) * C48224) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47225 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48551 +
            (C30339 - C30340 + C30341 - C30342) * C47206 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48372 +
           ((C31763 - C31764 + C31765 - C31766) * C47225 +
            (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
            C31804 * C48224) *
               C48379 +
           (C32375 * C47225 + C32376 * C48551 + C31805 * C47206 +
            C31806 * C48224) *
               C25914) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C47225 +
            (C30344 - C30343 + C30346 - C30345) * C48551 +
            (C30348 - C30347 + C30350 - C30349) * C47206 +
            (C30352 - C30351 + C30354 - C30353) * C48224) *
               C48372 +
           (C31807 * C47225 + C31808 * C48551 + C34622 * C47206 +
            C34623 * C48224) *
               C48379 +
           (C31809 * C47225 + C31810 * C48551 +
            (C31561 - C31562 + C31563 - C31564) * C47206 +
            (C31565 - C31566 + C31567 - C31568) * C48224) *
               C25914) *
              C48300 * C48283 * C111 +
          ((C30379 * C47225 + C30380 * C48551 + C30381 * C47206 +
            C30382 * C48224) *
               C48372 +
           (C34422 * C47225 + C34423 * C48551 +
            (C30530 - C30529 + C30532 - C30531) * C47206 +
            (C30534 - C30533 + C30536 - C30535) * C48224) *
               C48379 +
           ((C31562 - C31561 + C31564 - C31563) * C47225 +
            (C31566 - C31565 + C31568 - C31567) * C48551 +
            (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                C47206 +
            (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                C48224) *
               C25914) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            (C32375 * C47225 + C32376 * C48551 + C31805 * C47206 +
             C31806 * C48224) *
                C25914) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C47225 +
             (C31768 - C31767 + C31770 - C31769) * C48551 + C31807 * C47206 +
             C31808 * C48224) *
                C48372 +
            ((C31776 - C31775 + C31778 - C31777) * C47225 +
             (C31780 - C31779 + C31782 - C31781) * C48551 + C31809 * C47206 +
             C31810 * C48224) *
                C48379 +
            ((C32367 - C32368 + C32369 - C32370) * C47225 +
             (C32371 - C32372 + C32373 - C32374) * C48551 +
             (C31795 - C31796 + C31797 - C31798) * C47206 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C25914) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C47225 +
             (C30344 - C30343 + C30346 - C30345) * C48551 +
             (C30348 - C30347 + C30350 - C30349) * C47206 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48372 +
            (C31807 * C47225 + C31808 * C48551 + C34622 * C47206 +
             C34623 * C48224) *
                C48379 +
            (C31809 * C47225 + C31810 * C48551 +
             (C31561 - C31562 + C31563 - C31564) * C47206 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C25914) *
               C48300 * C255 +
           ((C31803 * C47225 + C31804 * C48551 + C34422 * C47206 +
             C34423 * C48224) *
                C48372 +
            (C31805 * C47225 + C31806 * C48551 +
             (C31562 - C31561 + C31564 - C31563) * C47206 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48379 +
            ((C31796 - C31795 + C31798 - C31797) * C47225 +
             (C31800 - C31799 + C31802 - C31801) * C48551 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C47206 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            (C32375 * C47225 + C32376 * C48551 + C31805 * C47206 +
             C31806 * C48224) *
                C25914) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47225 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48551 +
             (C30667 - C30668 + C30669 - C30670) * C47206 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48372 +
            ((C32576 - C32577 + C32578 - C32579) * C47225 +
             (C32580 - C32581 + C32582 - C32583) * C48551 +
             (C32005 - C32006 + C32007 - C32008) * C47206 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48379 +
            ((C32584 - C32585 + C32586 - C32587) * C47225 +
             (C32588 - C32589 + C32590 - C32591) * C48551 +
             (C32013 - C32014 + C32015 - C32016) * C47206 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C25914) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C47225 +
             (C30344 - C30343 + C30346 - C30345) * C48551 +
             (C30348 - C30347 + C30350 - C30349) * C47206 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48372 +
            (C31807 * C47225 + C31808 * C48551 + C34622 * C47206 +
             C34623 * C48224) *
                C48379 +
            (C31809 * C47225 + C31810 * C48551 +
             (C31561 - C31562 + C31563 - C31564) * C47206 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C25914) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C47225 +
             (C30672 - C30671 + C30674 - C30673) * C48551 +
             (C30676 - C30675 + C30678 - C30677) * C47206 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48372 +
            ((C32006 - C32005 + C32008 - C32007) * C47225 +
             (C32010 - C32009 + C32012 - C32011) * C48551 +
             (C34819 - C34818 + C34821 - C34820) * C47206 +
             (C34823 - C34822 + C34825 - C34824) * C48224) *
                C48379 +
            ((C32014 - C32013 + C32016 - C32015) * C47225 +
             (C32018 - C32017 + C32020 - C32019) * C48551 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C47206 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            (C32375 * C47225 + C32376 * C48551 + C31805 * C47206 +
             C31806 * C48224) *
                C25914) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C47225 +
             (C31768 - C31767 + C31770 - C31769) * C48551 + C31807 * C47206 +
             C31808 * C48224) *
                C48372 +
            ((C31776 - C31775 + C31778 - C31777) * C47225 +
             (C31780 - C31779 + C31782 - C31781) * C48551 + C31809 * C47206 +
             C31810 * C48224) *
                C48379 +
            ((C32367 - C32368 + C32369 - C32370) * C47225 +
             (C32371 - C32372 + C32373 - C32374) * C48551 +
             (C31795 - C31796 + C31797 - C31798) * C47206 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C25914) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C47225 +
             (C30344 - C30343 + C30346 - C30345) * C48551 +
             (C30348 - C30347 + C30350 - C30349) * C47206 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48372 +
            (C31807 * C47225 + C31808 * C48551 + C34622 * C47206 +
             C34623 * C48224) *
                C48379 +
            (C31809 * C47225 + C31810 * C48551 +
             (C31561 - C31562 + C31563 - C31564) * C47206 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C25914) *
               C48300 * C505 +
           ((C31803 * C47225 + C31804 * C48551 + C34422 * C47206 +
             C34423 * C48224) *
                C48372 +
            (C31805 * C47225 + C31806 * C48551 +
             (C31562 - C31561 + C31564 - C31563) * C47206 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48379 +
            ((C31796 - C31795 + C31798 - C31797) * C47225 +
             (C31800 - C31799 + C31802 - C31801) * C48551 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C47206 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47225 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48551 +
            (C30339 - C30340 + C30341 - C30342) * C47206 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48372 +
           ((C31763 - C31764 + C31765 - C31766) * C47225 +
            (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
            C31804 * C48224) *
               C48379 +
           C43588 * C25914) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C47225 +
            (C31768 - C31767 + C31770 - C31769) * C48551 + C31807 * C47206 +
            C31808 * C48224) *
               C48372 +
           ((C31776 - C31775 + C31778 - C31777) * C47225 +
            (C31780 - C31779 + C31782 - C31781) * C48551 + C31809 * C47206 +
            C31810 * C48224) *
               C48379 +
           ((C32367 - C32368 + C32369 - C32370) * C47225 +
            (C32371 - C32372 + C32373 - C32374) * C48551 +
            (C31795 - C31796 + C31797 - C31798) * C47206 +
            (C31799 - C31800 + C31801 - C31802) * C48224) *
               C25914) *
              C48300 * C572 +
          (C43588 * C48372 +
           (C41085 * C47225 + C41086 * C48551 +
            (C31796 - C31795 + C31798 - C31797) * C47206 +
            (C31800 - C31799 + C31802 - C31801) * C48224) *
               C48379 +
           ((C41077 - C41076 + C41079 - C41078) * C47225 +
            (C41081 - C41080 + C41083 - C41082) * C48551 +
            (C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
             C30337 * C9098) *
                C47206 +
            (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
             C30337 * C9102) *
                C48224) *
               C25914) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            C43588 * C25914) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47225 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48551 +
             (C30667 - C30668 + C30669 - C30670) * C47206 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48372 +
            ((C32576 - C32577 + C32578 - C32579) * C47225 +
             (C32580 - C32581 + C32582 - C32583) * C48551 +
             (C32005 - C32006 + C32007 - C32008) * C47206 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48379 +
            ((C32584 - C32585 + C32586 - C32587) * C47225 +
             (C32588 - C32589 + C32590 - C32591) * C48551 +
             (C32013 - C32014 + C32015 - C32016) * C47206 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C25914) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C47225 +
             (C31768 - C31767 + C31770 - C31769) * C48551 + C31807 * C47206 +
             C31808 * C48224) *
                C48372 +
            ((C31776 - C31775 + C31778 - C31777) * C47225 +
             (C31780 - C31779 + C31782 - C31781) * C48551 + C31809 * C47206 +
             C31810 * C48224) *
                C48379 +
            ((C32367 - C32368 + C32369 - C32370) * C47225 +
             (C32371 - C32372 + C32373 - C32374) * C48551 +
             (C31795 - C31796 + C31797 - C31798) * C47206 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C25914) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C47225 +
             (C32581 - C32580 + C32583 - C32582) * C48551 +
             (C32006 - C32005 + C32008 - C32007) * C47206 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48372 +
            ((C32585 - C32584 + C32587 - C32586) * C47225 +
             (C32589 - C32588 + C32591 - C32590) * C48551 +
             (C32014 - C32013 + C32016 - C32015) * C47206 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48379 +
            ((C41221 - C41220 + C41223 - C41222) * C47225 +
             (C41225 - C41224 + C41227 - C41226) * C48551 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C47206 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            C43588 * C25914) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47225 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48551 +
             (C30667 - C30668 + C30669 - C30670) * C47206 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48372 +
            ((C32576 - C32577 + C32578 - C32579) * C47225 +
             (C32580 - C32581 + C32582 - C32583) * C48551 +
             (C32005 - C32006 + C32007 - C32008) * C47206 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48379 +
            ((C32584 - C32585 + C32586 - C32587) * C47225 +
             (C32588 - C32589 + C32590 - C32591) * C48551 +
             (C32013 - C32014 + C32015 - C32016) * C47206 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C25914) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C47225 +
             (C30344 - C30343 + C30346 - C30345) * C48551 +
             (C30348 - C30347 + C30350 - C30349) * C47206 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48372 +
            (C31807 * C47225 + C31808 * C48551 + C34622 * C47206 +
             C34623 * C48224) *
                C48379 +
            (C31809 * C47225 + C31810 * C48551 +
             (C31561 - C31562 + C31563 - C31564) * C47206 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C25914) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C47225 +
             (C30672 - C30671 + C30674 - C30673) * C48551 +
             (C30676 - C30675 + C30678 - C30677) * C47206 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48372 +
            ((C32006 - C32005 + C32008 - C32007) * C47225 +
             (C32010 - C32009 + C32012 - C32011) * C48551 +
             (C34819 - C34818 + C34821 - C34820) * C47206 +
             (C34823 - C34822 + C34825 - C34824) * C48224) *
                C48379 +
            ((C32014 - C32013 + C32016 - C32015) * C47225 +
             (C32018 - C32017 + C32020 - C32019) * C48551 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C47206 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47225 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48551 +
             (C30339 - C30340 + C30341 - C30342) * C47206 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48372 +
            ((C31763 - C31764 + C31765 - C31766) * C47225 +
             (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
             C31804 * C48224) *
                C48379 +
            C43588 * C25914) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47225 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48551 +
             (C30667 - C30668 + C30669 - C30670) * C47206 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48372 +
            ((C32576 - C32577 + C32578 - C32579) * C47225 +
             (C32580 - C32581 + C32582 - C32583) * C48551 +
             (C32005 - C32006 + C32007 - C32008) * C47206 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48379 +
            ((C32584 - C32585 + C32586 - C32587) * C47225 +
             (C32588 - C32589 + C32590 - C32591) * C48551 +
             (C32013 - C32014 + C32015 - C32016) * C47206 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C25914) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C47225 +
             (C31768 - C31767 + C31770 - C31769) * C48551 + C31807 * C47206 +
             C31808 * C48224) *
                C48372 +
            ((C31776 - C31775 + C31778 - C31777) * C47225 +
             (C31780 - C31779 + C31782 - C31781) * C48551 + C31809 * C47206 +
             C31810 * C48224) *
                C48379 +
            ((C32367 - C32368 + C32369 - C32370) * C47225 +
             (C32371 - C32372 + C32373 - C32374) * C48551 +
             (C31795 - C31796 + C31797 - C31798) * C47206 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C25914) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C47225 +
             (C32581 - C32580 + C32583 - C32582) * C48551 +
             (C32006 - C32005 + C32008 - C32007) * C47206 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48372 +
            ((C32585 - C32584 + C32587 - C32586) * C47225 +
             (C32589 - C32588 + C32591 - C32590) * C48551 +
             (C32014 - C32013 + C32016 - C32015) * C47206 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48379 +
            ((C41221 - C41220 + C41223 - C41222) * C47225 +
             (C41225 - C41224 + C41227 - C41226) * C48551 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C47206 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47225 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48551 +
            (C30339 - C30340 + C30341 - C30342) * C47206 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48372 +
           ((C31763 - C31764 + C31765 - C31766) * C47225 +
            (C31767 - C31768 + C31769 - C31770) * C48551 + C31803 * C47206 +
            C31804 * C48224) *
               C48379 +
           C43588 * C25914) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C47225 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48551 +
            (C30667 - C30668 + C30669 - C30670) * C47206 +
            (C30671 - C30672 + C30673 - C30674) * C48224) *
               C48372 +
           ((C32576 - C32577 + C32578 - C32579) * C47225 +
            (C32580 - C32581 + C32582 - C32583) * C48551 +
            (C32005 - C32006 + C32007 - C32008) * C47206 +
            (C32009 - C32010 + C32011 - C32012) * C48224) *
               C48379 +
           ((C32584 - C32585 + C32586 - C32587) * C47225 +
            (C32588 - C32589 + C32590 - C32591) * C48551 +
            (C32013 - C32014 + C32015 - C32016) * C47206 +
            (C32017 - C32018 + C32019 - C32020) * C48224) *
               C25914) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C47225 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48551 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C47206 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48224) *
               C48372 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C47225 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48551 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C47206 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48224) *
               C48379 +
           ((C30334 * C2316 - C30336 * C2307 + C48416 * C10042 -
             C30337 * C10040) *
                C47225 +
            (C30334 * C2325 - C30336 * C2317 + C48416 * C10046 -
             C30337 * C10043) *
                C48551 +
            (C30334 * C2318 - C30336 * C2308 + C48416 * C10044 -
             C30337 * C10041) *
                C47206 +
            (C30334 * C2326 - C30336 * C2319 + C48416 * C10047 -
             C30337 * C10045) *
                C48224) *
               C25914) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C8916 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48214) *
               C48372 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
               C48379 +
           ((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C8916 +
            (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C48214) *
               C25914) *
              C48300 * C48283 * C110 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C8916 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48214) *
               C48372 +
           (C37582 * C8916 + C37583 * C48214) * C48379 +
           ((C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C8916 +
            (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48214) *
               C25914) *
              C48300 * C48283 * C111 +
          ((C36054 * C8916 + C36055 * C48214) * C48372 +
           ((C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C8916 +
            (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48214) *
               C48379 +
           ((C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
             C36005 * C2320 - C47366 * C2309) *
                C8916 +
            (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
             C36005 * C2327 - C47366 * C2321) *
                C48214) *
               C25914) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            ((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C8916 +
             (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C48214) *
                C25914) *
               C48300 * C255 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C8916 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48214) *
                C48372 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C8916 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48214) *
                C48379 +
            ((C47360 * C1229 - C48412 * C1233 + C47352 * C1882 -
              C48419 * C1885 + C47366 * C9590 - C36005 * C9592) *
                 C8916 +
             (C47360 * C1234 - C48412 * C1241 + C47352 * C1886 -
              C48419 * C1891 + C47366 * C9593 - C36005 * C9596) *
                 C48214) *
                C25914) *
               C48300 * C48601) *
              C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C8916 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48214) *
                C48372 +
            (C37582 * C8916 + C37583 * C48214) * C48379 +
            ((C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C8916 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48214) *
                C25914) *
               C48300 * C255 +
           ((C37580 * C8916 + C37581 * C48214) * C48372 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C8916 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48214) *
                C48379 +
            ((C48412 * C1235 - C47360 * C1230 + C48419 * C1887 -
              C47352 * C1883 + C36005 * C9855 - C47366 * C9854) *
                 C8916 +
             (C48412 * C1242 - C47360 * C1236 + C48419 * C1892 -
              C47352 * C1888 + C36005 * C9857 - C47366 * C9856) *
                 C48214) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            ((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C8916 +
             (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C48214) *
                C25914) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C8916 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48214) *
                C48372 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C8916 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48214) *
                C48379 +
            ((C47360 * C1419 - C48412 * C1423 + C47352 * C2307 -
              C48419 * C2316 + C47366 * C10040 - C36005 * C10042) *
                 C8916 +
             (C47360 * C1424 - C48412 * C1431 + C47352 * C2317 -
              C48419 * C2325 + C47366 * C10043 - C36005 * C10046) *
                 C48214) *
                C25914) *
               C48603) *
              C48283 * C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C8916 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48214) *
                C48372 +
            (C37582 * C8916 + C37583 * C48214) * C48379 +
            ((C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C8916 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48214) *
                C25914) *
               C381 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C8916 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48214) *
                C48372 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C8916 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48214) *
                C48379 +
            ((C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C8916 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48214) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            ((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C8916 +
             (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C48214) *
                C25914) *
               C48300 * C505 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C8916 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48214) *
                C48372 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C8916 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48214) *
                C48379 +
            ((C47360 * C1229 - C48412 * C1233 + C47352 * C1882 -
              C48419 * C1885 + C47366 * C9590 - C36005 * C9592) *
                 C8916 +
             (C47360 * C1234 - C48412 * C1241 + C47352 * C1886 -
              C48419 * C1891 + C47366 * C9593 - C36005 * C9596) *
                 C48214) *
                C25914) *
               C48300 * C48601) *
              C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C8916 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48214) *
                C48372 +
            (C37582 * C8916 + C37583 * C48214) * C48379 +
            ((C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C8916 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48214) *
                C25914) *
               C48300 * C505 +
           ((C37580 * C8916 + C37581 * C48214) * C48372 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C8916 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48214) *
                C48379 +
            ((C48412 * C1235 - C47360 * C1230 + C48419 * C1887 -
              C47352 * C1883 + C36005 * C9855 - C47366 * C9854) *
                 C8916 +
             (C48412 * C1242 - C47360 * C1236 + C48419 * C1892 -
              C47352 * C1888 + C36005 * C9857 - C47366 * C9856) *
                 C48214) *
                C25914) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C8916 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48214) *
               C48372 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
               C48379 +
           C46601 * C25914) *
              C48300 * C571 +
          (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C8916 +
            (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48214) *
               C48372 +
           ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C8916 +
            (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48214) *
               C48379 +
           ((C46583 - C46584 + C46585 - C46586 + C46587 - C46588) * C8916 +
            (C46589 - C46590 + C46591 - C46592 + C46593 - C46594) * C48214) *
               C25914) *
              C48300 * C572 +
          (C46601 * C48372 +
           ((C46584 - C46583 + C46586 - C46585 + C46588 - C46587) * C8916 +
            (C46590 - C46589 + C46592 - C46591 + C46594 - C46593) * C48214) *
               C48379 +
           ((C48412 * C1710 - C47360 * C1707 + C48419 * C9099 - C47352 * C9097 +
             C36005 * C9594 - C47366 * C9591) *
                C8916 +
            (C48412 * C1716 - C47360 * C1711 + C48419 * C9103 - C47352 * C9100 +
             C36005 * C9597 - C47366 * C9595) *
                C48214) *
               C25914) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            C46601 * C25914) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C8916 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48214) *
                C48372 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C8916 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48214) *
                C48379 +
            ((C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C8916 +
             (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C48214) *
                C25914) *
               C48603) *
              C505 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C8916 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48214) *
                C48372 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C8916 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48214) *
                C48379 +
            ((C46583 - C46584 + C46585 - C46586 + C46587 - C46588) * C8916 +
             (C46589 - C46590 + C46591 - C46592 + C46593 - C46594) * C48214) *
                C25914) *
               C381 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C8916 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C48214) *
                C48372 +
            ((C46749 - C46748 + C46751 - C46750 + C46753 - C46752) * C8916 +
             (C46755 - C46754 + C46757 - C46756 + C46759 - C46758) * C48214) *
                C48379 +
            ((C48412 * C1885 - C47360 * C1882 + C48419 * C9592 -
              C47352 * C9590 + C36005 * C10476 - C47366 * C10475) *
                 C8916 +
             (C48412 * C1891 - C47360 * C1886 + C48419 * C9596 -
              C47352 * C9593 + C36005 * C10478 - C47366 * C10477) *
                 C48214) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            C46601 * C25914) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C8916 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48214) *
                C48372 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C8916 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48214) *
                C48379 +
            ((C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C8916 +
             (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C48214) *
                C25914) *
               C48603) *
              C48283 * C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C8916 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48214) *
                C48372 +
            (C37582 * C8916 + C37583 * C48214) * C48379 +
            ((C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C8916 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48214) *
                C25914) *
               C779 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C8916 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48214) *
                C48372 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C8916 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48214) *
                C48379 +
            ((C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C8916 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48214) *
                C25914) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C8916 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48214) *
                C48372 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
                C48379 +
            C46601 * C25914) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C8916 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48214) *
                C48372 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C8916 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48214) *
                C48379 +
            ((C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C8916 +
             (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C48214) *
                C25914) *
               C48603) *
              C255 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C8916 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48214) *
                C48372 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C8916 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48214) *
                C48379 +
            ((C46583 - C46584 + C46585 - C46586 + C46587 - C46588) * C8916 +
             (C46589 - C46590 + C46591 - C46592 + C46593 - C46594) * C48214) *
                C25914) *
               C779 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C8916 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C48214) *
                C48372 +
            ((C46749 - C46748 + C46751 - C46750 + C46753 - C46752) * C8916 +
             (C46755 - C46754 + C46757 - C46756 + C46759 - C46758) * C48214) *
                C48379 +
            ((C48412 * C1885 - C47360 * C1882 + C48419 * C9592 -
              C47352 * C9590 + C36005 * C10476 - C47366 * C10475) *
                 C8916 +
             (C48412 * C1891 - C47360 * C1886 + C48419 * C9596 -
              C47352 * C9593 + C36005 * C10478 - C47366 * C10477) *
                 C48214) *
                C25914) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C8916 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48214) *
               C48372 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C8916 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48214) *
               C48379 +
           C46601 * C25914) *
              C925 +
          (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C8916 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48214) *
               C48372 +
           ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C8916 +
            (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48214) *
               C48379 +
           ((C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C8916 +
            (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C48214) *
               C25914) *
              C926 +
          (((C48412 * C933 - C47360 * C928 + C48419 * C2814 - C47352 * C2810 +
             C36005 * C3669 - C47366 * C3666) *
                C8916 +
            (C48412 * C943 - C47360 * C934 + C48419 * C2822 - C47352 * C2815 +
             C36005 * C3675 - C47366 * C3670) *
                C48214) *
               C48372 +
           ((C48412 * C2310 - C47360 * C2304 + C48419 * C3255 - C47352 * C3252 +
             C36005 * C10907 - C47366 * C10905) *
                C8916 +
            (C48412 * C2322 - C47360 * C2311 + C48419 * C3261 - C47352 * C3256 +
             C36005 * C10911 - C47366 * C10908) *
                C48214) *
               C48379 +
           ((C48412 * C2316 - C47360 * C2307 + C48419 * C10042 -
             C47352 * C10040 + C36005 * C10909 - C47366 * C10906) *
                C8916 +
            (C48412 * C2325 - C47360 * C2317 + C48419 * C10046 -
             C47352 * C10043 + C36005 * C10912 - C47366 * C10910) *
                C48214) *
               C25914) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           (C32375 * C8916 + C32376 * C48214) * C48634 +
           ((C32368 - C32367 + C32370 - C32369) * C8916 +
            (C32372 - C32371 + C32374 - C32373) * C48214) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C8916 +
            (C30344 - C30343 + C30346 - C30345) * C48214) *
               C48648 +
           (C31807 * C8916 + C31808 * C48214) * C48644 +
           (C31809 * C8916 + C31810 * C48214) * C48634 +
           ((C31795 - C31796 + C31797 - C31798) * C8916 +
            (C31799 - C31800 + C31801 - C31802) * C48214) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C30379 * C8916 + C30380 * C48214) * C48648 +
           (C34422 * C8916 + C34423 * C48214) * C48644 +
           ((C31562 - C31561 + C31564 - C31563) * C8916 +
            (C31566 - C31565 + C31568 - C31567) * C48214) *
               C48634 +
           ((C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
             C30337 * C1884) *
                C8916 +
            (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
             C30337 * C1890) *
                C48214) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C7738 +
            (C30344 - C30343 + C30346 - C30345) * C48638 +
            (C30348 - C30347 + C30350 - C30349) * C7739 +
            (C30352 - C30351 + C30354 - C30353) * C48625 +
            (C30356 - C30355 + C30358 - C30357) * C7740 +
            (C30360 - C30359 + C30362 - C30361) * C48593) *
               C22087 +
           (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
            C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
            (C30533 - C30534 + C30535 - C30536) * C48593) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C30379 * C7738 + C30380 * C48638 + C30381 * C7739 +
            C30382 * C48625 + (C30364 - C30363 + C30366 - C30365) * C7740 +
            (C30368 - C30367 + C30370 - C30369) * C48593) *
               C22087 +
           (C34422 * C7738 + C34423 * C48638 +
            (C30530 - C30529 + C30532 - C30531) * C7739 +
            (C30534 - C30533 + C30536 - C30535) * C48625 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C7740 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48593) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C8916 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C48214) *
               C22087 +
           ((C48649 * C265 - C33227 * C259 + C48646 * C682 - C33228 * C677 +
             C48637 * C2310 - C33229 * C2304 + C48622 * C3255 -
             C33230 * C3252) *
                C8916 +
            (C48649 * C277 - C33227 * C266 + C48646 * C692 - C33228 * C683 +
             C48637 * C2322 - C33229 * C2311 + C48622 * C3261 -
             C33230 * C3256) *
                C48214) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
             C33238) *
                C8916 +
            (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
             C33246) *
                C48214) *
               C22087 +
           ((C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
             C33401) *
                C8916 +
            (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
             C33409) *
                C48214) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C33249 - C33248 + C33251 - C33250 + C33253 - C33252 + C33255 -
             C33254) *
                C8916 +
            (C33257 - C33256 + C33259 - C33258 + C33261 - C33260 + C33263 -
             C33262) *
                C48214) *
               C22087 +
           ((C48649 * C269 - C33227 * C261 + C48646 * C686 - C33228 * C679 +
             C48637 * C2314 - C33229 * C2306 + C48622 * C3259 -
             C33230 * C3254) *
                C8916 +
            (C48649 * C279 - C33227 * C270 + C48646 * C694 - C33228 * C687 +
             C48637 * C2324 - C33229 * C2315 + C48622 * C3263 -
             C33230 * C3260) *
                C48214) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C30336 * C1707 - C30334 * C1710 + C30337 * C9097 -
              C48416 * C9099) *
                 C8916 +
             (C30336 * C1711 - C30334 * C1716 + C30337 * C9100 -
              C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C48300 * C255 +
           ((C31803 * C8916 + C31804 * C48214) * C48648 +
            (C31805 * C8916 + C31806 * C48214) * C48644 +
            ((C31796 - C31795 + C31798 - C31797) * C8916 +
             (C31800 - C31799 + C31802 - C31801) * C48214) *
                C48634 +
            ((C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
              C30337 * C9098) *
                 C8916 +
             (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
              C30337 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C48300 * C255 +
           ((C31803 * C7738 + C31804 * C48638 + C34422 * C7739 +
             C34423 * C48625 + (C30530 - C30529 + C30532 - C30531) * C7740 +
             (C30534 - C30533 + C30536 - C30535) * C48593) *
                C22087 +
            (C31805 * C7738 + C31806 * C48638 +
             (C31562 - C31561 + C31564 - C31563) * C7739 +
             (C31566 - C31565 + C31568 - C31567) * C48625 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C7740 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C48300 * C255 +
           (((C41815 - C41814 + C41817 - C41816 + C41819 - C41818 + C41821 -
              C41820) *
                 C8916 +
             (C41823 - C41822 + C41825 - C41824 + C41827 - C41826 + C41829 -
              C41828) *
                 C48214) *
                C22087 +
            ((C33227 * C575 - C48649 * C580 + C33228 * C1419 - C48646 * C1423 +
              C33229 * C2307 - C48637 * C2316 + C33230 * C10040 -
              C48622 * C10042) *
                 C8916 +
             (C33227 * C581 - C48649 * C590 + C33228 * C1424 - C48646 * C1431 +
              C33229 * C2317 - C48637 * C2325 + C33230 * C10043 -
              C48622 * C10046) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
              C33238) *
                 C8916 +
             (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
              C33246) *
                 C48214) *
                C22087 +
            ((C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
              C33401) *
                 C8916 +
             (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
              C33409) *
                 C48214) *
                C48376) *
               C48300 * C255 +
           (((C33395 - C33394 + C33397 - C33396 + C33399 - C33398 + C33401 -
              C33400) *
                 C8916 +
             (C33403 - C33402 + C33405 - C33404 + C33407 - C33406 + C33409 -
              C33408) *
                 C48214) *
                C22087 +
            ((C48649 * C582 - C33227 * C576 + C48646 * C1425 - C33228 * C1420 +
              C48637 * C2318 - C33229 * C2308 + C48622 * C10044 -
              C33230 * C10041) *
                 C8916 +
             (C48649 * C591 - C33227 * C583 + C48646 * C1432 - C33228 * C1426 +
              C48637 * C2326 - C33229 * C2319 + C48622 * C10047 -
              C33230 * C10045) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C30336 * C1882 - C30334 * C1885 + C30337 * C9590 -
              C48416 * C9592) *
                 C8916 +
             (C30336 * C1886 - C30334 * C1891 + C30337 * C9593 -
              C48416 * C9596) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C8916 +
             (C30672 - C30671 + C30674 - C30673) * C48214) *
                C48648 +
            ((C32006 - C32005 + C32008 - C32007) * C8916 +
             (C32010 - C32009 + C32012 - C32011) * C48214) *
                C48644 +
            ((C32014 - C32013 + C32016 - C32015) * C8916 +
             (C32018 - C32017 + C32020 - C32019) * C48214) *
                C48634 +
            ((C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C8916 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C7738 +
             (C30672 - C30671 + C30674 - C30673) * C48638 +
             (C30676 - C30675 + C30678 - C30677) * C7739 +
             (C30680 - C30679 + C30682 - C30681) * C48625 +
             (C30684 - C30683 + C30686 - C30685) * C7740 +
             (C30688 - C30687 + C30690 - C30689) * C48593) *
                C22087 +
            ((C32006 - C32005 + C32008 - C32007) * C7738 +
             (C32010 - C32009 + C32012 - C32011) * C48638 +
             (C34819 - C34818 + C34821 - C34820) * C7739 +
             (C34823 - C34822 + C34825 - C34824) * C48625 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C7740 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C381 +
           (((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
              C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
              C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C22087 +
            ((C33227 * C677 - C48649 * C682 + C33228 * C2304 - C48646 * C2310 +
              C33229 * C3252 - C48637 * C3255 + C33230 * C10905 -
              C48622 * C10907) *
                 C8916 +
             (C33227 * C683 - C48649 * C692 + C33228 * C2311 - C48646 * C2322 +
              C33229 * C3256 - C48637 * C3261 + C33230 * C10908 -
              C48622 * C10911) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
              C33238) *
                 C8916 +
             (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
              C33246) *
                 C48214) *
                C22087 +
            ((C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
              C33401) *
                 C8916 +
             (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
              C33409) *
                 C48214) *
                C48376) *
               C381 +
           (((C33541 - C33540 + C33543 - C33542 + C33545 - C33544 + C33547 -
              C33546) *
                 C8916 +
             (C33549 - C33548 + C33551 - C33550 + C33553 - C33552 + C33555 -
              C33554) *
                 C48214) *
                C22087 +
            ((C48649 * C684 - C33227 * C678 + C48646 * C2312 - C33228 * C2305 +
              C48637 * C3257 - C33229 * C3253 + C48622 * C17530 -
              C33230 * C17529) *
                 C8916 +
             (C48649 * C693 - C33227 * C685 + C48646 * C2323 - C33228 * C2313 +
              C48637 * C3262 - C33229 * C3258 + C48622 * C17532 -
              C33230 * C17531) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C30336 * C1707 - C30334 * C1710 + C30337 * C9097 -
              C48416 * C9099) *
                 C8916 +
             (C30336 * C1711 - C30334 * C1716 + C30337 * C9100 -
              C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C48300 * C505 +
           ((C31803 * C8916 + C31804 * C48214) * C48648 +
            (C31805 * C8916 + C31806 * C48214) * C48644 +
            ((C31796 - C31795 + C31798 - C31797) * C8916 +
             (C31800 - C31799 + C31802 - C31801) * C48214) *
                C48634 +
            ((C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
              C30337 * C9098) *
                 C8916 +
             (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
              C30337 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C48300 * C505 +
           ((C31803 * C7738 + C31804 * C48638 + C34422 * C7739 +
             C34423 * C48625 + (C30530 - C30529 + C30532 - C30531) * C7740 +
             (C30534 - C30533 + C30536 - C30535) * C48593) *
                C22087 +
            (C31805 * C7738 + C31806 * C48638 +
             (C31562 - C31561 + C31564 - C31563) * C7739 +
             (C31566 - C31565 + C31568 - C31567) * C48625 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C7740 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C48300 * C505 +
           (((C41815 - C41814 + C41817 - C41816 + C41819 - C41818 + C41821 -
              C41820) *
                 C8916 +
             (C41823 - C41822 + C41825 - C41824 + C41827 - C41826 + C41829 -
              C41828) *
                 C48214) *
                C22087 +
            ((C33227 * C575 - C48649 * C580 + C33228 * C1419 - C48646 * C1423 +
              C33229 * C2307 - C48637 * C2316 + C33230 * C10040 -
              C48622 * C10042) *
                 C8916 +
             (C33227 * C581 - C48649 * C590 + C33228 * C1424 - C48646 * C1431 +
              C33229 * C2317 - C48637 * C2325 + C33230 * C10043 -
              C48622 * C10046) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
              C33238) *
                 C8916 +
             (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
              C33246) *
                 C48214) *
                C22087 +
            ((C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
              C33401) *
                 C8916 +
             (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
              C33409) *
                 C48214) *
                C48376) *
               C48300 * C505 +
           (((C33395 - C33394 + C33397 - C33396 + C33399 - C33398 + C33401 -
              C33400) *
                 C8916 +
             (C33403 - C33402 + C33405 - C33404 + C33407 - C33406 + C33409 -
              C33408) *
                 C48214) *
                C22087 +
            ((C48649 * C582 - C33227 * C576 + C48646 * C1425 - C33228 * C1420 +
              C48637 * C2318 - C33229 * C2308 + C48622 * C10044 -
              C33230 * C10041) *
                 C8916 +
             (C48649 * C591 - C33227 * C583 + C48646 * C1432 - C33228 * C1426 +
              C48637 * C2326 - C33229 * C2319 + C48622 * C10047 -
              C33230 * C10045) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           C41084 * C48634 + C41089 * C48616) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C8916 +
            (C31768 - C31767 + C31770 - C31769) * C48214) *
               C48648 +
           ((C31776 - C31775 + C31778 - C31777) * C8916 +
            (C31780 - C31779 + C31782 - C31781) * C48214) *
               C48644 +
           ((C32367 - C32368 + C32369 - C32370) * C8916 +
            (C32371 - C32372 + C32373 - C32374) * C48214) *
               C48634 +
           ((C41076 - C41077 + C41078 - C41079) * C8916 +
            (C41080 - C41081 + C41082 - C41083) * C48214) *
               C48616) *
              C48300 * C572 +
          (C41084 * C48648 + C41089 * C48644 +
           ((C41077 - C41076 + C41079 - C41078) * C8916 +
            (C41081 - C41080 + C41083 - C41082) * C48214) *
               C48634 +
           ((C30334 * C9001 - C30336 * C8999 + C48416 * C9353 -
             C30337 * C9352) *
                C8916 +
            (C30334 * C9005 - C30336 * C9002 + C48416 * C9355 -
             C30337 * C9354) *
                C48214) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C7738 +
            (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
            C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
               C22087 +
           ((C31776 - C31775 + C31778 - C31777) * C7738 +
            (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
            C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
            (C31565 - C31566 + C31567 - C31568) * C48593) *
               C48376) *
              C48300 * C572 +
          ((C32375 * C7738 + C32376 * C48638 + C31805 * C7739 +
            C31806 * C48625 + (C31562 - C31561 + C31564 - C31563) * C7740 +
            (C31566 - C31565 + C31568 - C31567) * C48593) *
               C22087 +
           ((C32368 - C32367 + C32370 - C32369) * C7738 +
            (C32372 - C32371 + C32374 - C32373) * C48638 +
            (C31796 - C31795 + C31798 - C31797) * C7739 +
            (C31800 - C31799 + C31802 - C31801) * C48625 +
            (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
             C30337 * C1884) *
                C7740 +
            (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
             C30337 * C1890) *
                C48593) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C8916 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C48214) *
               C22087 +
           ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
             C41821) *
                C8916 +
            (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
             C41829) *
                C48214) *
               C48376) *
              C48300 * C571 +
          (((C41815 - C41814 + C41817 - C41816 + C41819 - C41818 + C41821 -
             C41820) *
                C8916 +
            (C41823 - C41822 + C41825 - C41824 + C41827 - C41826 + C41829 -
             C41828) *
                C48214) *
               C22087 +
           ((C42188 - C42189 + C42190 - C42191 + C42192 - C42193 + C42194 -
             C42195) *
                C8916 +
            (C42196 - C42197 + C42198 - C42199 + C42200 - C42201 + C42202 -
             C42203) *
                C48214) *
               C48376) *
              C48300 * C572 +
          (((C42189 - C42188 + C42191 - C42190 + C42193 - C42192 + C42195 -
             C42194) *
                C8916 +
            (C42197 - C42196 + C42199 - C42198 + C42201 - C42200 + C42203 -
             C42202) *
                C48214) *
               C22087 +
           ((C48649 * C1233 - C33227 * C1229 + C48646 * C1885 - C33228 * C1882 +
             C48637 * C9592 - C33229 * C9590 + C48622 * C10476 -
             C33230 * C10475) *
                C8916 +
            (C48649 * C1241 - C33227 * C1234 + C48646 * C1891 - C33228 * C1886 +
             C48637 * C9596 - C33229 * C9593 + C48622 * C10478 -
             C33230 * C10477) *
                C48214) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C41076 - C41077 + C41078 - C41079) * C8916 +
             (C41080 - C41081 + C41082 - C41083) * C48214) *
                C48616) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C8916 +
             (C32581 - C32580 + C32583 - C32582) * C48214) *
                C48648 +
            ((C32585 - C32584 + C32587 - C32586) * C8916 +
             (C32589 - C32588 + C32591 - C32590) * C48214) *
                C48644 +
            ((C41221 - C41220 + C41223 - C41222) * C8916 +
             (C41225 - C41224 + C41227 - C41226) * C48214) *
                C48634 +
            ((C30334 * C9099 - C30336 * C9097 + C48416 * C9594 -
              C30337 * C9591) *
                 C8916 +
             (C30334 * C9103 - C30336 * C9100 + C48416 * C9597 -
              C30337 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C7738 +
             (C32581 - C32580 + C32583 - C32582) * C48638 +
             (C32006 - C32005 + C32008 - C32007) * C7739 +
             (C32010 - C32009 + C32012 - C32011) * C48625 +
             (C34819 - C34818 + C34821 - C34820) * C7740 +
             (C34823 - C34822 + C34825 - C34824) * C48593) *
                C22087 +
            ((C32585 - C32584 + C32587 - C32586) * C7738 +
             (C32589 - C32588 + C32591 - C32590) * C48638 +
             (C32014 - C32013 + C32016 - C32015) * C7739 +
             (C32018 - C32017 + C32020 - C32019) * C48625 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C7740 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C381 +
           (((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
              C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
              C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C22087 +
            ((C42334 - C42335 + C42336 - C42337 + C42338 - C42339 + C42340 -
              C42341) *
                 C8916 +
             (C42342 - C42343 + C42344 - C42345 + C42346 - C42347 + C42348 -
              C42349) *
                 C48214) *
                C48376) *
               C48603) *
              C505 +
          ((((C41815 - C41814 + C41817 - C41816 + C41819 - C41818 + C41821 -
              C41820) *
                 C8916 +
             (C41823 - C41822 + C41825 - C41824 + C41827 - C41826 + C41829 -
              C41828) *
                 C48214) *
                C22087 +
            ((C42188 - C42189 + C42190 - C42191 + C42192 - C42193 + C42194 -
              C42195) *
                 C8916 +
             (C42196 - C42197 + C42198 - C42199 + C42200 - C42201 + C42202 -
              C42203) *
                 C48214) *
                C48376) *
               C381 +
           (((C42335 - C42334 + C42337 - C42336 + C42339 - C42338 + C42341 -
              C42340) *
                 C8916 +
             (C42343 - C42342 + C42345 - C42344 + C42347 - C42346 + C42349 -
              C42348) *
                 C48214) *
                C22087 +
            ((C48649 * C1423 - C33227 * C1419 + C48646 * C2316 -
              C33228 * C2307 + C48637 * C10042 - C33229 * C10040 +
              C48622 * C10909 - C33230 * C10906) *
                 C8916 +
             (C48649 * C1431 - C33227 * C1424 + C48646 * C2325 -
              C33228 * C2317 + C48637 * C10046 - C33229 * C10043 +
              C48622 * C10912 - C33230 * C10910) *
                 C48214) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C8916 +
             (C30672 - C30671 + C30674 - C30673) * C48214) *
                C48648 +
            ((C32006 - C32005 + C32008 - C32007) * C8916 +
             (C32010 - C32009 + C32012 - C32011) * C48214) *
                C48644 +
            ((C32014 - C32013 + C32016 - C32015) * C8916 +
             (C32018 - C32017 + C32020 - C32019) * C48214) *
                C48634 +
            ((C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C8916 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C7738 +
             (C30672 - C30671 + C30674 - C30673) * C48638 +
             (C30676 - C30675 + C30678 - C30677) * C7739 +
             (C30680 - C30679 + C30682 - C30681) * C48625 +
             (C30684 - C30683 + C30686 - C30685) * C7740 +
             (C30688 - C30687 + C30690 - C30689) * C48593) *
                C22087 +
            ((C32006 - C32005 + C32008 - C32007) * C7738 +
             (C32010 - C32009 + C32012 - C32011) * C48638 +
             (C34819 - C34818 + C34821 - C34820) * C7739 +
             (C34823 - C34822 + C34825 - C34824) * C48625 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C7740 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C779 +
           (((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
              C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
              C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C22087 +
            ((C42334 - C42335 + C42336 - C42337 + C42338 - C42339 + C42340 -
              C42341) *
                 C8916 +
             (C42342 - C42343 + C42344 - C42345 + C42346 - C42347 + C42348 -
              C42349) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
              C33238) *
                 C8916 +
             (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
              C33246) *
                 C48214) *
                C22087 +
            ((C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
              C33401) *
                 C8916 +
             (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
              C33409) *
                 C48214) *
                C48376) *
               C779 +
           (((C33541 - C33540 + C33543 - C33542 + C33545 - C33544 + C33547 -
              C33546) *
                 C8916 +
             (C33549 - C33548 + C33551 - C33550 + C33553 - C33552 + C33555 -
              C33554) *
                 C48214) *
                C22087 +
            ((C48649 * C684 - C33227 * C678 + C48646 * C2312 - C33228 * C2305 +
              C48637 * C3257 - C33229 * C3253 + C48622 * C17530 -
              C33230 * C17529) *
                 C8916 +
             (C48649 * C693 - C33227 * C685 + C48646 * C2323 - C33228 * C2313 +
              C48637 * C3262 - C33229 * C3258 + C48622 * C17532 -
              C33230 * C17531) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C41076 - C41077 + C41078 - C41079) * C8916 +
             (C41080 - C41081 + C41082 - C41083) * C48214) *
                C48616) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C8916 +
             (C32581 - C32580 + C32583 - C32582) * C48214) *
                C48648 +
            ((C32585 - C32584 + C32587 - C32586) * C8916 +
             (C32589 - C32588 + C32591 - C32590) * C48214) *
                C48644 +
            ((C41221 - C41220 + C41223 - C41222) * C8916 +
             (C41225 - C41224 + C41227 - C41226) * C48214) *
                C48634 +
            ((C30334 * C9099 - C30336 * C9097 + C48416 * C9594 -
              C30337 * C9591) *
                 C8916 +
             (C30334 * C9103 - C30336 * C9100 + C48416 * C9597 -
              C30337 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C7738 +
             (C32581 - C32580 + C32583 - C32582) * C48638 +
             (C32006 - C32005 + C32008 - C32007) * C7739 +
             (C32010 - C32009 + C32012 - C32011) * C48625 +
             (C34819 - C34818 + C34821 - C34820) * C7740 +
             (C34823 - C34822 + C34825 - C34824) * C48593) *
                C22087 +
            ((C32585 - C32584 + C32587 - C32586) * C7738 +
             (C32589 - C32588 + C32591 - C32590) * C48638 +
             (C32014 - C32013 + C32016 - C32015) * C7739 +
             (C32018 - C32017 + C32020 - C32019) * C48625 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C7740 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
              C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                 C8916 +
             (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
              C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                 C48214) *
                C22087 +
            ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
              C41821) *
                 C8916 +
             (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
              C41829) *
                 C48214) *
                C48376) *
               C779 +
           (((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
              C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
              C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C22087 +
            ((C42334 - C42335 + C42336 - C42337 + C42338 - C42339 + C42340 -
              C42341) *
                 C8916 +
             (C42342 - C42343 + C42344 - C42345 + C42346 - C42347 + C42348 -
              C42349) *
                 C48214) *
                C48376) *
               C48603) *
              C255 +
          ((((C41815 - C41814 + C41817 - C41816 + C41819 - C41818 + C41821 -
              C41820) *
                 C8916 +
             (C41823 - C41822 + C41825 - C41824 + C41827 - C41826 + C41829 -
              C41828) *
                 C48214) *
                C22087 +
            ((C42188 - C42189 + C42190 - C42191 + C42192 - C42193 + C42194 -
              C42195) *
                 C8916 +
             (C42196 - C42197 + C42198 - C42199 + C42200 - C42201 + C42202 -
              C42203) *
                 C48214) *
                C48376) *
               C779 +
           (((C42335 - C42334 + C42337 - C42336 + C42339 - C42338 + C42341 -
              C42340) *
                 C8916 +
             (C42343 - C42342 + C42345 - C42344 + C42347 - C42346 + C42349 -
              C42348) *
                 C48214) *
                C22087 +
            ((C48649 * C1423 - C33227 * C1419 + C48646 * C2316 -
              C33228 * C2307 + C48637 * C10042 - C33229 * C10040 +
              C48622 * C10909 - C33230 * C10906) *
                 C8916 +
             (C48649 * C1431 - C33227 * C1424 + C48646 * C2325 -
              C33228 * C2317 + C48637 * C10046 - C33229 * C10043 +
              C48622 * C10912 - C33230 * C10910) *
                 C48214) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           C41084 * C48634 + C41089 * C48616) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C8916 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48214) *
               C48648 +
           ((C32576 - C32577 + C32578 - C32579) * C8916 +
            (C32580 - C32581 + C32582 - C32583) * C48214) *
               C48644 +
           ((C32584 - C32585 + C32586 - C32587) * C8916 +
            (C32588 - C32589 + C32590 - C32591) * C48214) *
               C48634 +
           ((C41220 - C41221 + C41222 - C41223) * C8916 +
            (C41224 - C41225 + C41226 - C41227) * C48214) *
               C48616) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C8916 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48214) *
               C48648 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C8916 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48214) *
               C48644 +
           ((C30334 * C2316 - C30336 * C2307 + C48416 * C10042 -
             C30337 * C10040) *
                C8916 +
            (C30334 * C2325 - C30336 * C2317 + C48416 * C10046 -
             C30337 * C10043) *
                C48214) *
               C48634 +
           ((C30334 * C9592 - C30336 * C9590 + C48416 * C10476 -
             C30337 * C10475) *
                C8916 +
            (C30334 * C9596 - C30336 * C9593 + C48416 * C10478 -
             C30337 * C10477) *
                C48214) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C7738 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48638 +
            (C30667 - C30668 + C30669 - C30670) * C7739 +
            (C30671 - C30672 + C30673 - C30674) * C48625 +
            (C30675 - C30676 + C30677 - C30678) * C7740 +
            (C30679 - C30680 + C30681 - C30682) * C48593) *
               C22087 +
           ((C32576 - C32577 + C32578 - C32579) * C7738 +
            (C32580 - C32581 + C32582 - C32583) * C48638 +
            (C32005 - C32006 + C32007 - C32008) * C7739 +
            (C32009 - C32010 + C32011 - C32012) * C48625 +
            (C34818 - C34819 + C34820 - C34821) * C7740 +
            (C34822 - C34823 + C34824 - C34825) * C48593) *
               C48376) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C7738 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48638 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C7739 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48625 +
            (C30334 * C937 - C30336 * C930 + C48416 * C2818 - C30337 * C2812) *
                C7740 +
            (C30334 * C945 - C30336 * C938 + C48416 * C2824 - C30337 * C2819) *
                C48593) *
               C22087 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C7738 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48638 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C7739 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48625 +
            (C30334 * C2314 - C30336 * C2306 + C48416 * C3259 -
             C30337 * C3254) *
                C7740 +
            (C30334 * C2324 - C30336 * C2315 + C48416 * C3263 -
             C30337 * C3260) *
                C48593) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C8916 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C48214) *
               C22087 +
           ((C41814 - C41815 + C41816 - C41817 + C41818 - C41819 + C41820 -
             C41821) *
                C8916 +
            (C41822 - C41823 + C41824 - C41825 + C41826 - C41827 + C41828 -
             C41829) *
                C48214) *
               C48376) *
              C925 +
          (((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
             C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
             C48622 * C3669) *
                C8916 +
            (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
             C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
             C48622 * C3675) *
                C48214) *
               C22087 +
           ((C42334 - C42335 + C42336 - C42337 + C42338 - C42339 + C42340 -
             C42341) *
                C8916 +
            (C42342 - C42343 + C42344 - C42345 + C42346 - C42347 + C42348 -
             C42349) *
                C48214) *
               C48376) *
              C926 +
          (((C48649 * C933 - C33227 * C928 + C48646 * C2814 - C33228 * C2810 +
             C48637 * C3669 - C33229 * C3666 + C48622 * C17617 -
             C33230 * C17615) *
                C8916 +
            (C48649 * C943 - C33227 * C934 + C48646 * C2822 - C33228 * C2815 +
             C48637 * C3675 - C33229 * C3670 + C48622 * C17621 -
             C33230 * C17618) *
                C48214) *
               C22087 +
           ((C48649 * C2310 - C33227 * C2304 + C48646 * C3255 - C33228 * C3252 +
             C48637 * C10907 - C33229 * C10905 + C48622 * C17850 -
             C33230 * C17849) *
                C8916 +
            (C48649 * C2322 - C33227 * C2311 + C48646 * C3261 - C33228 * C3256 +
             C48637 * C10911 - C33229 * C10908 + C48622 * C17852 -
             C33230 * C17851) *
                C48214) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47225 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48551 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C22087 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
            C37580 * C47206 + C37581 * C48224) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47225 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48551 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47206 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
               C22087 +
           (C37582 * C47225 + C37583 * C48551 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47206 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C36054 * C47225 + C36055 * C48551 +
            (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C47206 +
            (C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C48224) *
               C22087 +
           ((C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C47225 +
            (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48551 +
            (C48412 * C271 - C47360 * C262 + C48419 * C688 - C47352 * C680 +
             C36005 * C2637 - C47366 * C2636) *
                C47206 +
            (C48412 * C280 - C47360 * C272 + C48419 * C695 - C47352 * C689 +
             C36005 * C2639 - C47366 * C2638) *
                C48224) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C48300 * C255 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C47225 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48551 +
             C37582 * C47206 + C37583 * C48224) *
                C22087 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C47225 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48551 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C47206 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47225 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48551 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47206 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C22087 +
            (C37582 * C47225 + C37583 * C48551 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47206 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C48300 * C255 +
           ((C37580 * C47225 + C37581 * C48551 +
             (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C47206 +
             (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48224) *
                C22087 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C47225 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48551 +
             (C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
              C36005 * C2320 - C47366 * C2309) *
                 C47206 +
             (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
              C36005 * C2327 - C47366 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C47225 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48551 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47206 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C22087 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C47225 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48551 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C47206 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47225 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48551 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47206 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C22087 +
            (C37582 * C47225 + C37583 * C48551 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47206 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C381 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C47225 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48551 +
             (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C47206 +
             (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48224) *
                C22087 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C47225 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48551 +
             (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
              C36005 * C3259 - C47366 * C3254) *
                 C47206 +
             (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
              C36005 * C3263 - C47366 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C48300 * C505 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C47225 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48551 +
             C37582 * C47206 + C37583 * C48224) *
                C22087 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C47225 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48551 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C47206 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47225 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48551 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47206 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C22087 +
            (C37582 * C47225 + C37583 * C48551 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47206 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C48300 * C505 +
           ((C37580 * C47225 + C37581 * C48551 +
             (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C47206 +
             (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48224) *
                C22087 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C47225 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48551 +
             (C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
              C36005 * C2320 - C47366 * C2309) *
                 C47206 +
             (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
              C36005 * C2327 - C47366 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47225 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48551 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C22087 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
            C37580 * C47206 + C37581 * C48224) *
               C48376) *
              C48300 * C571 +
          (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C47225 +
            (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48551 +
            C37582 * C47206 + C37583 * C48224) *
               C22087 +
           ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C47225 +
            (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48551 +
            (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C47206 +
            (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
               C48376) *
              C48300 * C572 +
          (((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C47225 +
            (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C48551 +
            (C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C47206 +
            (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48224) *
               C22087 +
           ((C48412 * C1233 - C47360 * C1229 + C48419 * C1885 - C47352 * C1882 +
             C36005 * C9592 - C47366 * C9590) *
                C47225 +
            (C48412 * C1241 - C47360 * C1234 + C48419 * C1891 - C47352 * C1886 +
             C36005 * C9596 - C47366 * C9593) *
                C48551 +
            (C48412 * C1235 - C47360 * C1230 + C48419 * C1887 - C47352 * C1883 +
             C36005 * C9855 - C47366 * C9854) *
                C47206 +
            (C48412 * C1242 - C47360 * C1236 + C48419 * C1892 - C47352 * C1888 +
             C36005 * C9857 - C47366 * C9856) *
                C48224) *
               C48376) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C47225 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48551 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47206 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C22087 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C47225 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48551 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C47206 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C505 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C47225 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48551 +
             C37582 * C47206 + C37583 * C48224) *
                C22087 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C47225 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48551 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C47206 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C381 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C47225 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C48551 +
             (C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C47206 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48224) *
                C22087 +
            ((C48412 * C1423 - C47360 * C1419 + C48419 * C2316 -
              C47352 * C2307 + C36005 * C10042 - C47366 * C10040) *
                 C47225 +
             (C48412 * C1431 - C47360 * C1424 + C48419 * C2325 -
              C47352 * C2317 + C36005 * C10046 - C47366 * C10043) *
                 C48551 +
             (C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C47206 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C47225 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48551 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47206 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C22087 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C47225 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48551 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C47206 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47225 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48551 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47206 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C22087 +
            (C37582 * C47225 + C37583 * C48551 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47206 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C779 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C47225 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48551 +
             (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C47206 +
             (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48224) *
                C22087 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C47225 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48551 +
             (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
              C36005 * C3259 - C47366 * C3254) *
                 C47206 +
             (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
              C36005 * C3263 - C47366 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C47225 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C48551 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C22087 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
             C37580 * C47206 + C37581 * C48224) *
                C48376) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C47225 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C48551 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47206 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C22087 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C47225 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48551 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C47206 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C255 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C47225 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C48551 +
             C37582 * C47206 + C37583 * C48224) *
                C22087 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C47225 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C48551 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C47206 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C779 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C47225 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C48551 +
             (C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C47206 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48224) *
                C22087 +
            ((C48412 * C1423 - C47360 * C1419 + C48419 * C2316 -
              C47352 * C2307 + C36005 * C10042 - C47366 * C10040) *
                 C47225 +
             (C48412 * C1431 - C47360 * C1424 + C48419 * C2325 -
              C47352 * C2317 + C36005 * C10046 - C47366 * C10043) *
                 C48551 +
             (C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C47206 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47225 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48551 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47206 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C22087 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C47225 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C48551 +
            C37580 * C47206 + C37581 * C48224) *
               C48376) *
              C925 +
          (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C47225 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48551 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47206 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
               C22087 +
           ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C47225 +
            (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C48551 +
            (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C47206 +
            (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
               C48376) *
              C926 +
          (((C48412 * C933 - C47360 * C928 + C48419 * C2814 - C47352 * C2810 +
             C36005 * C3669 - C47366 * C3666) *
                C47225 +
            (C48412 * C943 - C47360 * C934 + C48419 * C2822 - C47352 * C2815 +
             C36005 * C3675 - C47366 * C3670) *
                C48551 +
            (C48412 * C935 - C47360 * C929 + C48419 * C2816 - C47352 * C2811 +
             C36005 * C3671 - C47366 * C3667) *
                C47206 +
            (C48412 * C944 - C47360 * C936 + C48419 * C2823 - C47352 * C2817 +
             C36005 * C3676 - C47366 * C3672) *
                C48224) *
               C22087 +
           ((C48412 * C2310 - C47360 * C2304 + C48419 * C3255 - C47352 * C3252 +
             C36005 * C10907 - C47366 * C10905) *
                C47225 +
            (C48412 * C2322 - C47360 * C2311 + C48419 * C3261 - C47352 * C3256 +
             C36005 * C10911 - C47366 * C10908) *
                C48551 +
            (C48412 * C2312 - C47360 * C2305 + C48419 * C3257 - C47352 * C3253 +
             C36005 * C17530 - C47366 * C17529) *
                C47206 +
            (C48412 * C2323 - C47360 * C2313 + C48419 * C3262 - C47352 * C3258 +
             C36005 * C17532 - C47366 * C17531) *
                C48224) *
               C48376) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C7738 +
            (C30344 - C30343 + C30346 - C30345) * C48638 +
            (C30348 - C30347 + C30350 - C30349) * C7739 +
            (C30352 - C30351 + C30354 - C30353) * C48625 +
            (C30356 - C30355 + C30358 - C30357) * C7740 +
            (C30360 - C30359 + C30362 - C30361) * C48593) *
               C22087 +
           (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
            C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
            (C30533 - C30534 + C30535 - C30536) * C48593) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C30379 * C7738 + C30380 * C48638 + C30381 * C7739 +
            C30382 * C48625 + (C30364 - C30363 + C30366 - C30365) * C7740 +
            (C30368 - C30367 + C30370 - C30369) * C48593) *
               C22087 +
           (C34422 * C7738 + C34423 * C48638 +
            (C30530 - C30529 + C30532 - C30531) * C7739 +
            (C30534 - C30533 + C30536 - C30535) * C48625 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C7740 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48593) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           (C32375 * C8916 + C32376 * C48214) * C48634 +
           ((C32368 - C32367 + C32370 - C32369) * C8916 +
            (C32372 - C32371 + C32374 - C32373) * C48214) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C8916 +
            (C30344 - C30343 + C30346 - C30345) * C48214) *
               C48648 +
           (C31807 * C8916 + C31808 * C48214) * C48644 +
           (C31809 * C8916 + C31810 * C48214) * C48634 +
           ((C31795 - C31796 + C31797 - C31798) * C8916 +
            (C31799 - C31800 + C31801 - C31802) * C48214) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C30379 * C8916 + C30380 * C48214) * C48648 +
           (C34422 * C8916 + C34423 * C48214) * C48644 +
           ((C31562 - C31561 + C31564 - C31563) * C8916 +
            (C31566 - C31565 + C31568 - C31567) * C48214) *
               C48634 +
           ((C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
             C30337 * C1884) *
                C8916 +
            (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
             C30337 * C1890) *
                C48214) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C48300 * C255 +
           ((C31803 * C7738 + C31804 * C48638 + C34422 * C7739 +
             C34423 * C48625 + (C30530 - C30529 + C30532 - C30531) * C7740 +
             (C30534 - C30533 + C30536 - C30535) * C48593) *
                C22087 +
            (C31805 * C7738 + C31806 * C48638 +
             (C31562 - C31561 + C31564 - C31563) * C7739 +
             (C31566 - C31565 + C31568 - C31567) * C48625 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C7740 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C30336 * C1707 - C30334 * C1710 + C30337 * C9097 -
              C48416 * C9099) *
                 C8916 +
             (C30336 * C1711 - C30334 * C1716 + C30337 * C9100 -
              C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C48300 * C255 +
           ((C31803 * C8916 + C31804 * C48214) * C48648 +
            (C31805 * C8916 + C31806 * C48214) * C48644 +
            ((C31796 - C31795 + C31798 - C31797) * C8916 +
             (C31800 - C31799 + C31802 - C31801) * C48214) *
                C48634 +
            ((C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
              C30337 * C9098) *
                 C8916 +
             (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
              C30337 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C7738 +
             (C30672 - C30671 + C30674 - C30673) * C48638 +
             (C30676 - C30675 + C30678 - C30677) * C7739 +
             (C30680 - C30679 + C30682 - C30681) * C48625 +
             (C30684 - C30683 + C30686 - C30685) * C7740 +
             (C30688 - C30687 + C30690 - C30689) * C48593) *
                C22087 +
            ((C32006 - C32005 + C32008 - C32007) * C7738 +
             (C32010 - C32009 + C32012 - C32011) * C48638 +
             (C34819 - C34818 + C34821 - C34820) * C7739 +
             (C34823 - C34822 + C34825 - C34824) * C48625 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C7740 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C30336 * C1882 - C30334 * C1885 + C30337 * C9590 -
              C48416 * C9592) *
                 C8916 +
             (C30336 * C1886 - C30334 * C1891 + C30337 * C9593 -
              C48416 * C9596) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C8916 +
             (C30672 - C30671 + C30674 - C30673) * C48214) *
                C48648 +
            ((C32006 - C32005 + C32008 - C32007) * C8916 +
             (C32010 - C32009 + C32012 - C32011) * C48214) *
                C48644 +
            ((C32014 - C32013 + C32016 - C32015) * C8916 +
             (C32018 - C32017 + C32020 - C32019) * C48214) *
                C48634 +
            ((C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C8916 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C48300 * C505 +
           ((C31803 * C7738 + C31804 * C48638 + C34422 * C7739 +
             C34423 * C48625 + (C30530 - C30529 + C30532 - C30531) * C7740 +
             (C30534 - C30533 + C30536 - C30535) * C48593) *
                C22087 +
            (C31805 * C7738 + C31806 * C48638 +
             (C31562 - C31561 + C31564 - C31563) * C7739 +
             (C31566 - C31565 + C31568 - C31567) * C48625 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C7740 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            (C32375 * C8916 + C32376 * C48214) * C48634 +
            ((C32368 - C32367 + C32370 - C32369) * C8916 +
             (C32372 - C32371 + C32374 - C32373) * C48214) *
                C48616) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C30336 * C1707 - C30334 * C1710 + C30337 * C9097 -
              C48416 * C9099) *
                 C8916 +
             (C30336 * C1711 - C30334 * C1716 + C30337 * C9100 -
              C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C48300 * C505 +
           ((C31803 * C8916 + C31804 * C48214) * C48648 +
            (C31805 * C8916 + C31806 * C48214) * C48644 +
            ((C31796 - C31795 + C31798 - C31797) * C8916 +
             (C31800 - C31799 + C31802 - C31801) * C48214) *
                C48634 +
            ((C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
              C30337 * C9098) *
                 C8916 +
             (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
              C30337 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C7738 +
            (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
            C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
               C22087 +
           ((C31776 - C31775 + C31778 - C31777) * C7738 +
            (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
            C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
            (C31565 - C31566 + C31567 - C31568) * C48593) *
               C48376) *
              C48300 * C572 +
          ((C32375 * C7738 + C32376 * C48638 + C31805 * C7739 +
            C31806 * C48625 + (C31562 - C31561 + C31564 - C31563) * C7740 +
            (C31566 - C31565 + C31568 - C31567) * C48593) *
               C22087 +
           ((C32368 - C32367 + C32370 - C32369) * C7738 +
            (C32372 - C32371 + C32374 - C32373) * C48638 +
            (C31796 - C31795 + C31798 - C31797) * C7739 +
            (C31800 - C31799 + C31802 - C31801) * C48625 +
            (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
             C30337 * C1884) *
                C7740 +
            (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
             C30337 * C1890) *
                C48593) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           C41084 * C48634 + C41089 * C48616) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C8916 +
            (C31768 - C31767 + C31770 - C31769) * C48214) *
               C48648 +
           ((C31776 - C31775 + C31778 - C31777) * C8916 +
            (C31780 - C31779 + C31782 - C31781) * C48214) *
               C48644 +
           ((C32367 - C32368 + C32369 - C32370) * C8916 +
            (C32371 - C32372 + C32373 - C32374) * C48214) *
               C48634 +
           ((C41076 - C41077 + C41078 - C41079) * C8916 +
            (C41080 - C41081 + C41082 - C41083) * C48214) *
               C48616) *
              C48300 * C572 +
          (C41084 * C48648 + C41089 * C48644 +
           ((C41077 - C41076 + C41079 - C41078) * C8916 +
            (C41081 - C41080 + C41083 - C41082) * C48214) *
               C48634 +
           ((C30334 * C9001 - C30336 * C8999 + C48416 * C9353 -
             C30337 * C9352) *
                C8916 +
            (C30334 * C9005 - C30336 * C9002 + C48416 * C9355 -
             C30337 * C9354) *
                C48214) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C7738 +
             (C32581 - C32580 + C32583 - C32582) * C48638 +
             (C32006 - C32005 + C32008 - C32007) * C7739 +
             (C32010 - C32009 + C32012 - C32011) * C48625 +
             (C34819 - C34818 + C34821 - C34820) * C7740 +
             (C34823 - C34822 + C34825 - C34824) * C48593) *
                C22087 +
            ((C32585 - C32584 + C32587 - C32586) * C7738 +
             (C32589 - C32588 + C32591 - C32590) * C48638 +
             (C32014 - C32013 + C32016 - C32015) * C7739 +
             (C32018 - C32017 + C32020 - C32019) * C48625 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C7740 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C41076 - C41077 + C41078 - C41079) * C8916 +
             (C41080 - C41081 + C41082 - C41083) * C48214) *
                C48616) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C8916 +
             (C32581 - C32580 + C32583 - C32582) * C48214) *
                C48648 +
            ((C32585 - C32584 + C32587 - C32586) * C8916 +
             (C32589 - C32588 + C32591 - C32590) * C48214) *
                C48644 +
            ((C41221 - C41220 + C41223 - C41222) * C8916 +
             (C41225 - C41224 + C41227 - C41226) * C48214) *
                C48634 +
            ((C30334 * C9099 - C30336 * C9097 + C48416 * C9594 -
              C30337 * C9591) *
                 C8916 +
             (C30334 * C9103 - C30336 * C9100 + C48416 * C9597 -
              C30337 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C7738 +
             (C30344 - C30343 + C30346 - C30345) * C48638 +
             (C30348 - C30347 + C30350 - C30349) * C7739 +
             (C30352 - C30351 + C30354 - C30353) * C48625 +
             (C30356 - C30355 + C30358 - C30357) * C7740 +
             (C30360 - C30359 + C30362 - C30361) * C48593) *
                C22087 +
            (C31807 * C7738 + C31808 * C48638 + C34622 * C7739 +
             C34623 * C48625 + (C30529 - C30530 + C30531 - C30532) * C7740 +
             (C30533 - C30534 + C30535 - C30536) * C48593) *
                C48376) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C7738 +
             (C30672 - C30671 + C30674 - C30673) * C48638 +
             (C30676 - C30675 + C30678 - C30677) * C7739 +
             (C30680 - C30679 + C30682 - C30681) * C48625 +
             (C30684 - C30683 + C30686 - C30685) * C7740 +
             (C30688 - C30687 + C30690 - C30689) * C48593) *
                C22087 +
            ((C32006 - C32005 + C32008 - C32007) * C7738 +
             (C32010 - C32009 + C32012 - C32011) * C48638 +
             (C34819 - C34818 + C34821 - C34820) * C7739 +
             (C34823 - C34822 + C34825 - C34824) * C48625 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C7740 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C8916 +
             (C30344 - C30343 + C30346 - C30345) * C48214) *
                C48648 +
            (C31807 * C8916 + C31808 * C48214) * C48644 +
            (C31809 * C8916 + C31810 * C48214) * C48634 +
            ((C31795 - C31796 + C31797 - C31798) * C8916 +
             (C31799 - C31800 + C31801 - C31802) * C48214) *
                C48616) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C8916 +
             (C30672 - C30671 + C30674 - C30673) * C48214) *
                C48648 +
            ((C32006 - C32005 + C32008 - C32007) * C8916 +
             (C32010 - C32009 + C32012 - C32011) * C48214) *
                C48644 +
            ((C32014 - C32013 + C32016 - C32015) * C8916 +
             (C32018 - C32017 + C32020 - C32019) * C48214) *
                C48634 +
            ((C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C8916 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C7738 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48638 +
             (C30339 - C30340 + C30341 - C30342) * C7739 +
             (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
             C30380 * C48593) *
                C22087 +
            ((C31763 - C31764 + C31765 - C31766) * C7738 +
             (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
             C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C7738 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48638 +
             (C30667 - C30668 + C30669 - C30670) * C7739 +
             (C30671 - C30672 + C30673 - C30674) * C48625 +
             (C30675 - C30676 + C30677 - C30678) * C7740 +
             (C30679 - C30680 + C30681 - C30682) * C48593) *
                C22087 +
            ((C32576 - C32577 + C32578 - C32579) * C7738 +
             (C32580 - C32581 + C32582 - C32583) * C48638 +
             (C32005 - C32006 + C32007 - C32008) * C7739 +
             (C32009 - C32010 + C32011 - C32012) * C48625 +
             (C34818 - C34819 + C34820 - C34821) * C7740 +
             (C34822 - C34823 + C34824 - C34825) * C48593) *
                C48376) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C7738 +
             (C31768 - C31767 + C31770 - C31769) * C48638 + C31807 * C7739 +
             C31808 * C48625 + C34622 * C7740 + C34623 * C48593) *
                C22087 +
            ((C31776 - C31775 + C31778 - C31777) * C7738 +
             (C31780 - C31779 + C31782 - C31781) * C48638 + C31809 * C7739 +
             C31810 * C48625 + (C31561 - C31562 + C31563 - C31564) * C7740 +
             (C31565 - C31566 + C31567 - C31568) * C48593) *
                C48376) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C7738 +
             (C32581 - C32580 + C32583 - C32582) * C48638 +
             (C32006 - C32005 + C32008 - C32007) * C7739 +
             (C32010 - C32009 + C32012 - C32011) * C48625 +
             (C34819 - C34818 + C34821 - C34820) * C7740 +
             (C34823 - C34822 + C34825 - C34824) * C48593) *
                C22087 +
            ((C32585 - C32584 + C32587 - C32586) * C7738 +
             (C32589 - C32588 + C32591 - C32590) * C48638 +
             (C32014 - C32013 + C32016 - C32015) * C7739 +
             (C32018 - C32017 + C32020 - C32019) * C48625 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C7740 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C8916 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48214) *
                C48648 +
            ((C31763 - C31764 + C31765 - C31766) * C8916 +
             (C31767 - C31768 + C31769 - C31770) * C48214) *
                C48644 +
            C41084 * C48634 + C41089 * C48616) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C8916 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48214) *
                C48648 +
            ((C32576 - C32577 + C32578 - C32579) * C8916 +
             (C32580 - C32581 + C32582 - C32583) * C48214) *
                C48644 +
            ((C32584 - C32585 + C32586 - C32587) * C8916 +
             (C32588 - C32589 + C32590 - C32591) * C48214) *
                C48634 +
            ((C41220 - C41221 + C41222 - C41223) * C8916 +
             (C41224 - C41225 + C41226 - C41227) * C48214) *
                C48616) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C8916 +
             (C31768 - C31767 + C31770 - C31769) * C48214) *
                C48648 +
            ((C31776 - C31775 + C31778 - C31777) * C8916 +
             (C31780 - C31779 + C31782 - C31781) * C48214) *
                C48644 +
            ((C32367 - C32368 + C32369 - C32370) * C8916 +
             (C32371 - C32372 + C32373 - C32374) * C48214) *
                C48634 +
            ((C41076 - C41077 + C41078 - C41079) * C8916 +
             (C41080 - C41081 + C41082 - C41083) * C48214) *
                C48616) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C8916 +
             (C32581 - C32580 + C32583 - C32582) * C48214) *
                C48648 +
            ((C32585 - C32584 + C32587 - C32586) * C8916 +
             (C32589 - C32588 + C32591 - C32590) * C48214) *
                C48644 +
            ((C41221 - C41220 + C41223 - C41222) * C8916 +
             (C41225 - C41224 + C41227 - C41226) * C48214) *
                C48634 +
            ((C30334 * C9099 - C30336 * C9097 + C48416 * C9594 -
              C30337 * C9591) *
                 C8916 +
             (C30334 * C9103 - C30336 * C9100 + C48416 * C9597 -
              C30337 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C7738 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48638 +
            (C30339 - C30340 + C30341 - C30342) * C7739 +
            (C30343 - C30344 + C30345 - C30346) * C48625 + C30379 * C7740 +
            C30380 * C48593) *
               C22087 +
           ((C31763 - C31764 + C31765 - C31766) * C7738 +
            (C31767 - C31768 + C31769 - C31770) * C48638 + C31803 * C7739 +
            C31804 * C48625 + C34422 * C7740 + C34423 * C48593) *
               C48376) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C7738 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48638 +
            (C30667 - C30668 + C30669 - C30670) * C7739 +
            (C30671 - C30672 + C30673 - C30674) * C48625 +
            (C30675 - C30676 + C30677 - C30678) * C7740 +
            (C30679 - C30680 + C30681 - C30682) * C48593) *
               C22087 +
           ((C32576 - C32577 + C32578 - C32579) * C7738 +
            (C32580 - C32581 + C32582 - C32583) * C48638 +
            (C32005 - C32006 + C32007 - C32008) * C7739 +
            (C32009 - C32010 + C32011 - C32012) * C48625 +
            (C34818 - C34819 + C34820 - C34821) * C7740 +
            (C34822 - C34823 + C34824 - C34825) * C48593) *
               C48376) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C7738 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48638 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C7739 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48625 +
            (C30334 * C937 - C30336 * C930 + C48416 * C2818 - C30337 * C2812) *
                C7740 +
            (C30334 * C945 - C30336 * C938 + C48416 * C2824 - C30337 * C2819) *
                C48593) *
               C22087 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C7738 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48638 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C7739 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48625 +
            (C30334 * C2314 - C30336 * C2306 + C48416 * C3259 -
             C30337 * C3254) *
                C7740 +
            (C30334 * C2324 - C30336 * C2315 + C48416 * C3263 -
             C30337 * C3260) *
                C48593) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C8916 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48214) *
               C48648 +
           ((C31763 - C31764 + C31765 - C31766) * C8916 +
            (C31767 - C31768 + C31769 - C31770) * C48214) *
               C48644 +
           C41084 * C48634 + C41089 * C48616) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C8916 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48214) *
               C48648 +
           ((C32576 - C32577 + C32578 - C32579) * C8916 +
            (C32580 - C32581 + C32582 - C32583) * C48214) *
               C48644 +
           ((C32584 - C32585 + C32586 - C32587) * C8916 +
            (C32588 - C32589 + C32590 - C32591) * C48214) *
               C48634 +
           ((C41220 - C41221 + C41222 - C41223) * C8916 +
            (C41224 - C41225 + C41226 - C41227) * C48214) *
               C48616) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C8916 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48214) *
               C48648 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C8916 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48214) *
               C48644 +
           ((C30334 * C2316 - C30336 * C2307 + C48416 * C10042 -
             C30337 * C10040) *
                C8916 +
            (C30334 * C2325 - C30336 * C2317 + C48416 * C10046 -
             C30337 * C10043) *
                C48214) *
               C48634 +
           ((C30334 * C9592 - C30336 * C9590 + C48416 * C10476 -
             C30337 * C10475) *
                C8916 +
            (C30334 * C9596 - C30336 * C9593 + C48416 * C10478 -
             C30337 * C10477) *
                C48214) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 + C1257 * C48224) *
               C11015 +
           (C9256 * C47225 + C9257 * C48551 + (C1267 - C1266) * C47206 +
            (C1269 - C1268) * C48224) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C47225 + (C151 - C150) * C48551 +
            (C153 - C152) * C47206 + (C155 - C154) * C48224) *
               C11013 +
           (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 + C1261 * C48224) *
               C11014 +
           (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 + C1265 * C48224) *
               C11015 +
           ((C1266 - C1267) * C47225 + (C1268 - C1269) * C48551 +
            (C1270 - C1271) * C47206 + (C1272 - C1273) * C48224) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C168 * C47225 + C169 * C48551 + C170 * C47206 + C171 * C48224) *
               C11013 +
           (C1068 * C47225 + C1069 * C48551 + C3787 * C47206 + C3788 * C48224) *
               C11014 +
           (C1082 * C47225 + C1083 * C48551 + (C1079 - C1078) * C47206 +
            (C1081 - C1080) * C48224) *
               C11015 +
           ((C1271 - C1270) * C47225 + (C1273 - C1272) * C48551 +
            (C48329 * C1239 - C113 * C1232) * C47206 +
            (C48329 * C1244 - C113 * C1240) * C48224) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C3782 + (C151 - C150) * C3776 +
            (C153 - C152) * C3783 + (C155 - C154) * C3777 +
            (C157 - C156) * C3784 + (C159 - C158) * C3778 +
            (C161 - C160) * C3785 + (C163 - C162) * C48610) *
               C48573 +
           (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
            (C292 - C293) * C3784 + (C294 - C295) * C3778 +
            (C296 - C297) * C3785 + (C298 - C299) * C48610) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C168 * C3782 + C169 * C3776 + C170 * C3783 + C171 * C3777 +
            C172 * C3784 + C173 * C3778 + (C165 - C164) * C3785 +
            (C167 - C166) * C48610) *
               C48573 +
           (C1068 * C3782 + C1069 * C3776 + C3787 * C3783 + C3788 * C3777 +
            (C297 - C296) * C3784 + (C299 - C298) * C3778 +
            (C48329 * C275 - C113 * C264) * C3785 +
            (C48329 * C282 - C113 * C276) * C48610) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C47225 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48551 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
               C48573 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
            (C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C47206 +
            (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48224) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C47225 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48551 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C47206 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48224) *
               C48573 +
           ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C47225 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48551 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C47206 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48224) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C14939 * C47225 + C14940 * C48551 +
            (C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C47206 +
            (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48224) *
               C48573 +
           ((C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C47225 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48551 +
            (C14888 * C271 - C14891 * C262 + C14889 * C688 - C14892 * C680 +
             C48609 * C2637 - C14893 * C2636) *
                C47206 +
            (C14888 * C280 - C14891 * C272 + C14889 * C695 - C14892 * C689 +
             C48609 * C2639 - C14893 * C2638) *
                C48224) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C48300 * C255 +
           (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C255 +
           ((C1250 * C47225 + C1251 * C48551 + C1068 * C47206 +
             C1069 * C48224) *
                C11013 +
            (C1256 * C47225 + C1257 * C48551 + C1082 * C47206 +
             C1083 * C48224) *
                C11014 +
            (C11150 * C47225 + C11151 * C48551 + (C1271 - C1270) * C47206 +
             (C1273 - C1272) * C48224) *
                C11015 +
            ((C9013 - C9012) * C47225 + (C9015 - C9014) * C48551 +
             (C48329 * C1714 - C113 * C1709) * C47206 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C48300 * C255 +
           (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C255 +
           ((C1250 * C3782 + C1251 * C3776 + C1068 * C3783 + C1069 * C3777 +
             C3787 * C3784 + C3788 * C3778 + (C297 - C296) * C3785 +
             (C299 - C298) * C48610) *
                C48573 +
            (C1256 * C3782 + C1257 * C3776 + C1082 * C3783 + C1083 * C3777 +
             (C1079 - C1078) * C3784 + (C1081 - C1080) * C3778 +
             (C48329 * C588 - C113 * C579) * C3785 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C48300 * C255 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C47225 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48551 +
             C18442 * C47206 + C18443 * C48224) *
                C48573 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C47225 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48551 +
             (C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C47206 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48224) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C47225 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48551 +
             (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C47206 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48224) *
                C48573 +
            (C18442 * C47225 + C18443 * C48551 +
             (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C47206 +
             (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48224) *
                C48376) *
               C48300 * C255 +
           ((C18440 * C47225 + C18441 * C48551 +
             (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C47206 +
             (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48224) *
                C48573 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C47225 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48551 +
             (C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
              C48609 * C2320 - C14893 * C2309) *
                 C47206 +
             (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
              C48609 * C2327 - C14893 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C381 +
           (((C409 - C408) * C47225 + (C411 - C410) * C48551 +
             (C413 - C412) * C47206 + (C415 - C414) * C48224) *
                C11013 +
            ((C1437 - C1436) * C47225 + (C1439 - C1438) * C48551 +
             (C1441 - C1440) * C47206 + (C1443 - C1442) * C48224) *
                C11014 +
            ((C1445 - C1444) * C47225 + (C1447 - C1446) * C48551 +
             (C1449 - C1448) * C47206 + (C1451 - C1450) * C48224) *
                C11015 +
            ((C11285 - C11284) * C47225 + (C11287 - C11286) * C48551 +
             (C48329 * C1889 - C113 * C1884) * C47206 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C381 +
           (((C409 - C408) * C3782 + (C411 - C410) * C3776 +
             (C413 - C412) * C3783 + (C415 - C414) * C3777 +
             (C417 - C416) * C3784 + (C419 - C418) * C3778 +
             (C421 - C420) * C3785 + (C423 - C422) * C48610) *
                C48573 +
            ((C1437 - C1436) * C3782 + (C1439 - C1438) * C3776 +
             (C1441 - C1440) * C3783 + (C1443 - C1442) * C3777 +
             (C4052 - C4051) * C3784 + (C4054 - C4053) * C3778 +
             (C48329 * C690 - C113 * C681) * C3785 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C47225 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48551 +
             (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C47206 +
             (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48224) *
                C48573 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C47225 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48551 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C47206 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48224) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C47225 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48551 +
             (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C47206 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48224) *
                C48573 +
            (C18442 * C47225 + C18443 * C48551 +
             (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C47206 +
             (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48224) *
                C48376) *
               C381 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C47225 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48551 +
             (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C47206 +
             (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48224) *
                C48573 +
            ((C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C47225 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48551 +
             (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
              C48609 * C3259 - C14893 * C3254) *
                 C47206 +
             (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
              C48609 * C3263 - C14893 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C48300 * C505 +
           (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C505 +
           ((C1250 * C47225 + C1251 * C48551 + C1068 * C47206 +
             C1069 * C48224) *
                C11013 +
            (C1256 * C47225 + C1257 * C48551 + C1082 * C47206 +
             C1083 * C48224) *
                C11014 +
            (C11150 * C47225 + C11151 * C48551 + (C1271 - C1270) * C47206 +
             (C1273 - C1272) * C48224) *
                C11015 +
            ((C9013 - C9012) * C47225 + (C9015 - C9014) * C48551 +
             (C48329 * C1714 - C113 * C1709) * C47206 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C48300 * C505 +
           (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C505 +
           ((C1250 * C3782 + C1251 * C3776 + C1068 * C3783 + C1069 * C3777 +
             C3787 * C3784 + C3788 * C3778 + (C297 - C296) * C3785 +
             (C299 - C298) * C48610) *
                C48573 +
            (C1256 * C3782 + C1257 * C3776 + C1082 * C3783 + C1083 * C3777 +
             (C1079 - C1078) * C3784 + (C1081 - C1080) * C3778 +
             (C48329 * C588 - C113 * C579) * C3785 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C48300 * C505 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C47225 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48551 +
             C18442 * C47206 + C18443 * C48224) *
                C48573 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C47225 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48551 +
             (C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C47206 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48224) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C47225 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48551 +
             (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C47206 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48224) *
                C48573 +
            (C18442 * C47225 + C18443 * C48551 +
             (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C47206 +
             (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48224) *
                C48376) *
               C48300 * C505 +
           ((C18440 * C47225 + C18441 * C48551 +
             (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C47206 +
             (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48224) *
                C48573 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C47225 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48551 +
             (C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
              C48609 * C2320 - C14893 * C2309) *
                 C47206 +
             (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
              C48609 * C2327 - C14893 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           C11528 * C11015 + C11529 * C48616) *
              C48300 * C571 +
          (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
            C1258 * C47206 + C1259 * C48224) *
               C11013 +
           ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
            C1262 * C47206 + C1263 * C48224) *
               C11014 +
           ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
            C11152 * C47206 + C11153 * C48224) *
               C11015 +
           ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
            (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
               C48616) *
              C48300 * C572 +
          (C11528 * C11013 + C11529 * C11014 +
           (C9258 * C47225 + C9259 * C48551 + (C9013 - C9012) * C47206 +
            (C9015 - C9014) * C48224) *
               C11015 +
           ((C9261 - C9260) * C47225 + (C9263 - C9262) * C48551 +
            (C48329 * C9003 - C113 * C9000) * C47206 +
            (C48329 * C9006 - C113 * C9004) * C48224) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C48300 * C571 +
          (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
            C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
            C3920 * C48610) *
               C48573 +
           ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
            C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
            (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
               C48376) *
              C48300 * C572 +
          ((C1720 * C3782 + C1721 * C3776 + C1256 * C3783 + C1257 * C3777 +
            C1082 * C3784 + C1083 * C3778 + (C1079 - C1078) * C3785 +
            (C1081 - C1080) * C48610) *
               C48573 +
           ((C1727 - C1726) * C3782 + (C1729 - C1728) * C3776 +
            (C1267 - C1266) * C3783 + (C1269 - C1268) * C3777 +
            (C1271 - C1270) * C3784 + (C1273 - C1272) * C3778 +
            (C48329 * C1239 - C113 * C1232) * C3785 +
            (C48329 * C1244 - C113 * C1240) * C48610) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C47225 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48551 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
               C48573 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
            C18440 * C47206 + C18441 * C48224) *
               C48376) *
              C48300 * C571 +
          (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C47225 +
            (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48551 +
            C18442 * C47206 + C18443 * C48224) *
               C48573 +
           ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C47225 +
            (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48551 +
            (C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C47206 +
            (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48224) *
               C48376) *
              C48300 * C572 +
          ((C16799 * C47225 + C16800 * C48551 +
            (C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C47206 +
            (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48224) *
               C48573 +
           ((C16786 - C16785 + C16788 - C16787 + C16790 - C16789) * C47225 +
            (C16792 - C16791 + C16794 - C16793 + C16796 - C16795) * C48551 +
            (C14888 * C1235 - C14891 * C1230 + C14889 * C1887 - C14892 * C1883 +
             C48609 * C9855 - C14893 * C9854) *
                C47206 +
            (C14888 * C1242 - C14891 * C1236 + C14889 * C1892 - C14892 * C1888 +
             C48609 * C9857 - C14893 * C9856) *
                C48224) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C381 +
           (((C1896 - C1895) * C47225 + (C1898 - C1897) * C48551 +
             (C1437 - C1436) * C47206 + (C1439 - C1438) * C48224) *
                C11013 +
            ((C1900 - C1899) * C47225 + (C1902 - C1901) * C48551 +
             (C1445 - C1444) * C47206 + (C1447 - C1446) * C48224) *
                C11014 +
            ((C9358 - C9357) * C47225 + (C9360 - C9359) * C48551 +
             (C11285 - C11284) * C47206 + (C11287 - C11286) * C48224) *
                C11015 +
            ((C9362 - C9361) * C47225 + (C9364 - C9363) * C48551 +
             (C48329 * C9101 - C113 * C9098) * C47206 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C381 +
           (((C1896 - C1895) * C3782 + (C1898 - C1897) * C3776 +
             (C1437 - C1436) * C3783 + (C1439 - C1438) * C3777 +
             (C1441 - C1440) * C3784 + (C1443 - C1442) * C3778 +
             (C4052 - C4051) * C3785 + (C4054 - C4053) * C48610) *
                C48573 +
            ((C1900 - C1899) * C3782 + (C1902 - C1901) * C3776 +
             (C1445 - C1444) * C3783 + (C1447 - C1446) * C3777 +
             (C1449 - C1448) * C3784 + (C1451 - C1450) * C3778 +
             (C48329 * C1429 - C113 * C1422) * C3785 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C47225 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48551 +
             (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C47206 +
             (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48224) *
                C48573 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C47225 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48551 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C47206 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48224) *
                C48376) *
               C48603) *
              C505 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C47225 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48551 +
             C18442 * C47206 + C18443 * C48224) *
                C48573 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C47225 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48551 +
             (C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C47206 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48224) *
                C48376) *
               C381 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C47225 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48551 +
             (C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C47206 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48224) *
                C48573 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C47225 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48551 +
             (C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C47206 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C779 +
           (((C409 - C408) * C47225 + (C411 - C410) * C48551 +
             (C413 - C412) * C47206 + (C415 - C414) * C48224) *
                C11013 +
            ((C1437 - C1436) * C47225 + (C1439 - C1438) * C48551 +
             (C1441 - C1440) * C47206 + (C1443 - C1442) * C48224) *
                C11014 +
            ((C1445 - C1444) * C47225 + (C1447 - C1446) * C48551 +
             (C1449 - C1448) * C47206 + (C1451 - C1450) * C48224) *
                C11015 +
            ((C11285 - C11284) * C47225 + (C11287 - C11286) * C48551 +
             (C48329 * C1889 - C113 * C1884) * C47206 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C779 +
           (((C409 - C408) * C3782 + (C411 - C410) * C3776 +
             (C413 - C412) * C3783 + (C415 - C414) * C3777 +
             (C417 - C416) * C3784 + (C419 - C418) * C3778 +
             (C421 - C420) * C3785 + (C423 - C422) * C48610) *
                C48573 +
            ((C1437 - C1436) * C3782 + (C1439 - C1438) * C3776 +
             (C1441 - C1440) * C3783 + (C1443 - C1442) * C3777 +
             (C4052 - C4051) * C3784 + (C4054 - C4053) * C3778 +
             (C48329 * C690 - C113 * C681) * C3785 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C47225 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48551 +
             (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C47206 +
             (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48224) *
                C48573 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C47225 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48551 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C47206 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48224) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C47225 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48551 +
             (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C47206 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48224) *
                C48573 +
            (C18442 * C47225 + C18443 * C48551 +
             (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C47206 +
             (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48224) *
                C48376) *
               C779 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C47225 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48551 +
             (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C47206 +
             (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48224) *
                C48573 +
            ((C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C47225 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48551 +
             (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
              C48609 * C3259 - C14893 * C3254) *
                 C47206 +
             (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
              C48609 * C3263 - C14893 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C779 +
           (((C1896 - C1895) * C47225 + (C1898 - C1897) * C48551 +
             (C1437 - C1436) * C47206 + (C1439 - C1438) * C48224) *
                C11013 +
            ((C1900 - C1899) * C47225 + (C1902 - C1901) * C48551 +
             (C1445 - C1444) * C47206 + (C1447 - C1446) * C48224) *
                C11014 +
            ((C9358 - C9357) * C47225 + (C9360 - C9359) * C48551 +
             (C11285 - C11284) * C47206 + (C11287 - C11286) * C48224) *
                C11015 +
            ((C9362 - C9361) * C47225 + (C9364 - C9363) * C48551 +
             (C48329 * C9101 - C113 * C9098) * C47206 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C779 +
           (((C1896 - C1895) * C3782 + (C1898 - C1897) * C3776 +
             (C1437 - C1436) * C3783 + (C1439 - C1438) * C3777 +
             (C1441 - C1440) * C3784 + (C1443 - C1442) * C3778 +
             (C4052 - C4051) * C3785 + (C4054 - C4053) * C48610) *
                C48573 +
            ((C1900 - C1899) * C3782 + (C1902 - C1901) * C3776 +
             (C1445 - C1444) * C3783 + (C1447 - C1446) * C3777 +
             (C1449 - C1448) * C3784 + (C1451 - C1450) * C3778 +
             (C48329 * C1429 - C113 * C1422) * C3785 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C47225 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48551 +
             (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
                C48573 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
             C18440 * C47206 + C18441 * C48224) *
                C48376) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C47225 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48551 +
             (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C47206 +
             (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48224) *
                C48573 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C47225 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48551 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C47206 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48224) *
                C48376) *
               C48603) *
              C255 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C47225 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48551 +
             C18442 * C47206 + C18443 * C48224) *
                C48573 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C47225 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48551 +
             (C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C47206 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48224) *
                C48376) *
               C779 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C47225 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48551 +
             (C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C47206 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48224) *
                C48573 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C47225 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48551 +
             (C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C47206 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           C11528 * C11015 + C11529 * C48616) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C47225 +
            (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
            (C410 - C411) * C48224) *
               C11013 +
           ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
            (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
               C11014 +
           ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
            (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
               C11015 +
           ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
            (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
               C48616) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C47225 +
            (C48329 * C943 - C113 * C934) * C48551 +
            (C48329 * C935 - C113 * C929) * C47206 +
            (C48329 * C944 - C113 * C936) * C48224) *
               C11013 +
           ((C48329 * C2310 - C113 * C2304) * C47225 +
            (C48329 * C2322 - C113 * C2311) * C48551 +
            (C48329 * C2312 - C113 * C2305) * C47206 +
            (C48329 * C2323 - C113 * C2313) * C48224) *
               C11014 +
           ((C48329 * C2316 - C113 * C2307) * C47225 +
            (C48329 * C2325 - C113 * C2317) * C48551 +
            (C48329 * C2318 - C113 * C2308) * C47206 +
            (C48329 * C2326 - C113 * C2319) * C48224) *
               C11015 +
           ((C48329 * C9592 - C113 * C9590) * C47225 +
            (C48329 * C9596 - C113 * C9593) * C48551 +
            (C48329 * C9855 - C113 * C9854) * C47206 +
            (C48329 * C9857 - C113 * C9856) * C48224) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C3782 +
            (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
            (C410 - C411) * C3777 + (C412 - C413) * C3784 +
            (C414 - C415) * C3778 + (C416 - C417) * C3785 +
            (C418 - C419) * C48610) *
               C48573 +
           ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
            (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
            (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
            (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
               C48376) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C3782 +
            (C48329 * C943 - C113 * C934) * C3776 +
            (C48329 * C935 - C113 * C929) * C3783 +
            (C48329 * C944 - C113 * C936) * C3777 +
            (C48329 * C937 - C113 * C930) * C3784 +
            (C48329 * C945 - C113 * C938) * C3778 +
            (C48329 * C939 - C113 * C931) * C3785 +
            (C48329 * C946 - C113 * C940) * C48610) *
               C48573 +
           ((C48329 * C2310 - C113 * C2304) * C3782 +
            (C48329 * C2322 - C113 * C2311) * C3776 +
            (C48329 * C2312 - C113 * C2305) * C3783 +
            (C48329 * C2323 - C113 * C2313) * C3777 +
            (C48329 * C2314 - C113 * C2306) * C3784 +
            (C48329 * C2324 - C113 * C2315) * C3778 +
            (C48329 * C2637 - C113 * C2636) * C3785 +
            (C48329 * C2639 - C113 * C2638) * C48610) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C47225 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48551 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C47206 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48224) *
               C48573 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C47225 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48551 +
            C18440 * C47206 + C18441 * C48224) *
               C48376) *
              C925 +
          (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C47225 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48551 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C47206 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48224) *
               C48573 +
           ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C47225 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48551 +
            (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C47206 +
            (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48224) *
               C48376) *
              C926 +
          (((C14888 * C933 - C14891 * C928 + C14889 * C2814 - C14892 * C2810 +
             C48609 * C3669 - C14893 * C3666) *
                C47225 +
            (C14888 * C943 - C14891 * C934 + C14889 * C2822 - C14892 * C2815 +
             C48609 * C3675 - C14893 * C3670) *
                C48551 +
            (C14888 * C935 - C14891 * C929 + C14889 * C2816 - C14892 * C2811 +
             C48609 * C3671 - C14893 * C3667) *
                C47206 +
            (C14888 * C944 - C14891 * C936 + C14889 * C2823 - C14892 * C2817 +
             C48609 * C3676 - C14893 * C3672) *
                C48224) *
               C48573 +
           ((C14888 * C2310 - C14891 * C2304 + C14889 * C3255 - C14892 * C3252 +
             C48609 * C10907 - C14893 * C10905) *
                C47225 +
            (C14888 * C2322 - C14891 * C2311 + C14889 * C3261 - C14892 * C3256 +
             C48609 * C10911 - C14893 * C10908) *
                C48551 +
            (C14888 * C2312 - C14891 * C2305 + C14889 * C3257 - C14892 * C3253 +
             C48609 * C17530 - C14893 * C17529) *
                C47206 +
            (C14888 * C2323 - C14891 * C2313 + C14889 * C3262 - C14892 * C3258 +
             C48609 * C17532 - C14893 * C17531) *
                C48224) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           (C12934 * C8916 + C12935 * C48214) * C11015 +
           ((C12927 - C12926 + C12929 - C12928) * C8916 +
            (C12931 - C12930 + C12933 - C12932) * C48214) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C8916 +
            (C4878 - C4877 + C4880 - C4879) * C48214) *
               C11013 +
           (C6325 * C8916 + C6326 * C48214) * C11014 +
           (C12376 * C8916 + C12377 * C48214) * C11015 +
           ((C12366 - C12367 + C12368 - C12369) * C8916 +
            (C12370 - C12371 + C12372 - C12373) * C48214) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C4913 * C8916 + C4914 * C48214) * C11013 +
           (C6091 * C8916 + C6092 * C48214) * C11014 +
           ((C6316 - C6315 + C6318 - C6317) * C8916 +
            (C6320 - C6319 + C6322 - C6321) * C48214) *
               C11015 +
           ((C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                C8916 +
            (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                C48214) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C48574 * C265 - C4870 * C259 + C48416 * C682 - C4871 * C677) *
                C1064 +
            (C48574 * C277 - C4870 * C266 + C48416 * C692 - C4871 * C683) *
                C1058 +
            (C5048 - C5047 + C5050 - C5049) * C1065 +
            (C5052 - C5051 + C5054 - C5053) * C1059 + C6091 * C1066 +
            C6092 * C48593) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C1064 +
            (C4878 - C4877 + C4880 - C4879) * C1058 +
            (C4882 - C4881 + C4884 - C4883) * C1065 +
            (C4886 - C4885 + C4888 - C4887) * C1059 +
            (C4890 - C4889 + C4892 - C4891) * C1066 +
            (C4894 - C4893 + C4896 - C4895) * C48593) *
               C48573 +
           ((C5047 - C5048 + C5049 - C5050) * C1064 +
            (C5051 - C5052 + C5053 - C5054) * C1058 +
            (C5055 - C5056 + C5057 - C5058) * C1065 +
            (C5059 - C5060 + C5061 - C5062) * C1059 +
            (C5063 - C5064 + C5065 - C5066) * C1066 +
            (C5067 - C5068 + C5069 - C5070) * C48593) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C4913 * C1064 + C4914 * C1058 + C4915 * C1065 + C4916 * C1059 +
            (C4898 - C4897 + C4900 - C4899) * C1066 +
            (C4902 - C4901 + C4904 - C4903) * C48593) *
               C48573 +
           (C6091 * C1064 + C6092 * C1058 +
            (C5064 - C5063 + C5066 - C5065) * C1065 +
            (C5068 - C5067 + C5070 - C5069) * C1059 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C1066 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48593) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C8916 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48214) *
               C48573 +
           ((C19815 * C265 - C19819 * C259 + C19816 * C682 - C19820 * C677 +
             C19817 * C2310 - C19821 * C2304 + C48622 * C3255 -
             C19822 * C3252) *
                C8916 +
            (C19815 * C277 - C19819 * C266 + C19816 * C692 - C19820 * C683 +
             C19817 * C2322 - C19821 * C2311 + C48622 * C3261 -
             C19822 * C3256) *
                C48214) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C8916 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48214) *
               C48573 +
           ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C8916 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48214) *
               C48376) *
              C48300 * C48283 * C111 +
          (((C19841 - C19840 + C19843 - C19842 + C19845 - C19844 + C19847 -
             C19846) *
                C8916 +
            (C19849 - C19848 + C19851 - C19850 + C19853 - C19852 + C19855 -
             C19854) *
                C48214) *
               C48573 +
           ((C19815 * C269 - C19819 * C261 + C19816 * C686 - C19820 * C679 +
             C19817 * C2314 - C19821 * C2306 + C48622 * C3259 -
             C19822 * C3254) *
                C8916 +
            (C19815 * C279 - C19819 * C270 + C19816 * C694 - C19820 * C687 +
             C19817 * C2324 - C19821 * C2315 + C48622 * C3263 -
             C19822 * C3260) *
                C48214) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C4870 * C1707 - C48574 * C1710 + C4871 * C9097 - C48416 * C9099) *
                 C8916 +
             (C4870 * C1711 - C48574 * C1716 + C4871 * C9100 - C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C48300 * C255 +
           ((C6323 * C8916 + C6324 * C48214) * C11013 +
            (C12374 * C8916 + C12375 * C48214) * C11014 +
            ((C12367 - C12366 + C12369 - C12368) * C8916 +
             (C12371 - C12370 + C12373 - C12372) * C48214) *
                C11015 +
            ((C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                 C8916 +
             (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C4870 * C575 - C48574 * C580 + C4871 * C1419 - C48416 * C1423) *
                 C1064 +
             (C4870 * C581 - C48574 * C590 + C4871 * C1424 - C48416 * C1431) *
                 C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C48300 * C255 +
           ((C6323 * C1064 + C6324 * C1058 + C6091 * C1065 + C6092 * C1059 +
             (C5064 - C5063 + C5066 - C5065) * C1066 +
             (C5068 - C5067 + C5070 - C5069) * C48593) *
                C48573 +
            ((C6308 - C6307 + C6310 - C6309) * C1064 +
             (C6312 - C6311 + C6314 - C6313) * C1058 +
             (C6316 - C6315 + C6318 - C6317) * C1065 +
             (C6320 - C6319 + C6322 - C6321) * C1059 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C1066 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C48300 * C255 +
           (((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
              C21098) *
                 C8916 +
             (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
              C21106) *
                 C48214) *
                C48573 +
            ((C19819 * C575 - C19815 * C580 + C19820 * C1419 - C19816 * C1423 +
              C19821 * C2307 - C19817 * C2316 + C19822 * C10040 -
              C48622 * C10042) *
                 C8916 +
             (C19819 * C581 - C19815 * C590 + C19820 * C1424 - C19816 * C1431 +
              C19821 * C2317 - C19817 * C2325 + C19822 * C10043 -
              C48622 * C10046) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C8916 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48214) *
                C48573 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C8916 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48214) *
                C48376) *
               C48300 * C255 +
           (((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
              C19992) *
                 C8916 +
             (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
              C20000) *
                 C48214) *
                C48573 +
            ((C19815 * C582 - C19819 * C576 + C19816 * C1425 - C19820 * C1420 +
              C19817 * C2318 - C19821 * C2308 + C48622 * C10044 -
              C19822 * C10041) *
                 C8916 +
             (C19815 * C591 - C19819 * C583 + C19816 * C1432 - C19820 * C1426 +
              C19817 * C2326 - C19821 * C2319 + C48622 * C10047 -
              C19822 * C10045) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C4870 * C1882 - C48574 * C1885 + C4871 * C9590 - C48416 * C9592) *
                 C8916 +
             (C4870 * C1886 - C48574 * C1891 + C4871 * C9593 - C48416 * C9596) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C8916 +
             (C5206 - C5205 + C5208 - C5207) * C48214) *
                C11013 +
            ((C6524 - C6523 + C6526 - C6525) * C8916 +
             (C6528 - C6527 + C6530 - C6529) * C48214) *
                C11014 +
            ((C12573 - C12572 + C12575 - C12574) * C8916 +
             (C12577 - C12576 + C12579 - C12578) * C48214) *
                C11015 +
            ((C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C8916 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C4870 * C677 - C48574 * C682 + C4871 * C2304 - C48416 * C2310) *
                 C1064 +
             (C4870 * C683 - C48574 * C692 + C4871 * C2311 - C48416 * C2322) *
                 C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C1064 +
             (C5206 - C5205 + C5208 - C5207) * C1058 +
             (C5210 - C5209 + C5212 - C5211) * C1065 +
             (C5214 - C5213 + C5216 - C5215) * C1059 +
             (C5218 - C5217 + C5220 - C5219) * C1066 +
             (C5222 - C5221 + C5224 - C5223) * C48593) *
                C48573 +
            ((C6524 - C6523 + C6526 - C6525) * C1064 +
             (C6528 - C6527 + C6530 - C6529) * C1058 +
             (C6532 - C6531 + C6534 - C6533) * C1065 +
             (C6536 - C6535 + C6538 - C6537) * C1059 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C1066 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C381 +
           (((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
              C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
              C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C48573 +
            ((C19819 * C677 - C19815 * C682 + C19820 * C2304 - C19816 * C2310 +
              C19821 * C3252 - C19817 * C3255 + C19822 * C10905 -
              C48622 * C10907) *
                 C8916 +
             (C19819 * C683 - C19815 * C692 + C19820 * C2311 - C19816 * C2322 +
              C19821 * C3256 - C19817 * C3261 + C19822 * C10908 -
              C48622 * C10911) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C8916 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48214) *
                C48573 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C8916 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48214) *
                C48376) *
               C381 +
           (((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
              C20138) *
                 C8916 +
             (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
              C20146) *
                 C48214) *
                C48573 +
            ((C19815 * C684 - C19819 * C678 + C19816 * C2312 - C19820 * C2305 +
              C19817 * C3257 - C19821 * C3253 + C48622 * C17530 -
              C19822 * C17529) *
                 C8916 +
             (C19815 * C693 - C19819 * C685 + C19816 * C2323 - C19820 * C2313 +
              C19817 * C3262 - C19821 * C3258 + C48622 * C17532 -
              C19822 * C17531) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C4870 * C1707 - C48574 * C1710 + C4871 * C9097 - C48416 * C9099) *
                 C8916 +
             (C4870 * C1711 - C48574 * C1716 + C4871 * C9100 - C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C48300 * C505 +
           ((C6323 * C8916 + C6324 * C48214) * C11013 +
            (C12374 * C8916 + C12375 * C48214) * C11014 +
            ((C12367 - C12366 + C12369 - C12368) * C8916 +
             (C12371 - C12370 + C12373 - C12372) * C48214) *
                C11015 +
            ((C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                 C8916 +
             (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C4870 * C575 - C48574 * C580 + C4871 * C1419 - C48416 * C1423) *
                 C1064 +
             (C4870 * C581 - C48574 * C590 + C4871 * C1424 - C48416 * C1431) *
                 C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C48300 * C505 +
           ((C6323 * C1064 + C6324 * C1058 + C6091 * C1065 + C6092 * C1059 +
             (C5064 - C5063 + C5066 - C5065) * C1066 +
             (C5068 - C5067 + C5070 - C5069) * C48593) *
                C48573 +
            ((C6308 - C6307 + C6310 - C6309) * C1064 +
             (C6312 - C6311 + C6314 - C6313) * C1058 +
             (C6316 - C6315 + C6318 - C6317) * C1065 +
             (C6320 - C6319 + C6322 - C6321) * C1059 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C1066 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C48300 * C505 +
           (((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
              C21098) *
                 C8916 +
             (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
              C21106) *
                 C48214) *
                C48573 +
            ((C19819 * C575 - C19815 * C580 + C19820 * C1419 - C19816 * C1423 +
              C19821 * C2307 - C19817 * C2316 + C19822 * C10040 -
              C48622 * C10042) *
                 C8916 +
             (C19819 * C581 - C19815 * C590 + C19820 * C1424 - C19816 * C1431 +
              C19821 * C2317 - C19817 * C2325 + C19822 * C10043 -
              C48622 * C10046) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C8916 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48214) *
                C48573 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C8916 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48214) *
                C48376) *
               C48300 * C505 +
           (((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
              C19992) *
                 C8916 +
             (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
              C20000) *
                 C48214) *
                C48573 +
            ((C19815 * C582 - C19819 * C576 + C19816 * C1425 - C19820 * C1420 +
              C19817 * C2318 - C19821 * C2308 + C48622 * C10044 -
              C19822 * C10041) *
                 C8916 +
             (C19815 * C591 - C19819 * C583 + C19816 * C1432 - C19820 * C1426 +
              C19817 * C2326 - C19821 * C2319 + C48622 * C10047 -
              C19822 * C10045) *
                 C48214) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           C14277 * C11015 + C14282 * C48616) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C8916 +
            (C6292 - C6291 + C6294 - C6293) * C48214) *
               C11013 +
           ((C6879 - C6880 + C6881 - C6882) * C8916 +
            (C6883 - C6884 + C6885 - C6886) * C48214) *
               C11014 +
           ((C12926 - C12927 + C12928 - C12929) * C8916 +
            (C12930 - C12931 + C12932 - C12933) * C48214) *
               C11015 +
           ((C14269 - C14270 + C14271 - C14272) * C8916 +
            (C14273 - C14274 + C14275 - C14276) * C48214) *
               C48616) *
              C48300 * C572 +
          (C14277 * C11013 + C14282 * C11014 +
           ((C14270 - C14269 + C14272 - C14271) * C8916 +
            (C14274 - C14273 + C14276 - C14275) * C48214) *
               C11015 +
           ((C48574 * C9001 - C4870 * C8999 + C48416 * C9353 - C4871 * C9352) *
                C8916 +
            (C48574 * C9005 - C4870 * C9002 + C48416 * C9355 - C4871 * C9354) *
                C48214) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C6287 - C6288 + C6289 - C6290) * C1064 +
            (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
            C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
               C48376) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C1064 +
            (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
            C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
               C48573 +
           ((C6879 - C6880 + C6881 - C6882) * C1064 +
            (C6883 - C6884 + C6885 - C6886) * C1058 +
            (C6307 - C6308 + C6309 - C6310) * C1065 +
            (C6311 - C6312 + C6313 - C6314) * C1059 +
            (C6315 - C6316 + C6317 - C6318) * C1066 +
            (C6319 - C6320 + C6321 - C6322) * C48593) *
               C48376) *
              C48300 * C572 +
          (((C6880 - C6879 + C6882 - C6881) * C1064 +
            (C6884 - C6883 + C6886 - C6885) * C1058 +
            (C6308 - C6307 + C6310 - C6309) * C1065 +
            (C6312 - C6311 + C6314 - C6313) * C1059 +
            (C6316 - C6315 + C6318 - C6317) * C1066 +
            (C6320 - C6319 + C6322 - C6321) * C48593) *
               C48573 +
           ((C48574 * C1233 - C4870 * C1229 + C48416 * C1885 - C4871 * C1882) *
                C1064 +
            (C48574 * C1241 - C4870 * C1234 + C48416 * C1891 - C4871 * C1886) *
                C1058 +
            (C48574 * C1235 - C4870 * C1230 + C48416 * C1887 - C4871 * C1883) *
                C1065 +
            (C48574 * C1242 - C4870 * C1236 + C48416 * C1892 - C4871 * C1888) *
                C1059 +
            (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                C1066 +
            (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                C48593) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C8916 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48214) *
               C48573 +
           ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C8916 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48214) *
               C48376) *
              C48300 * C571 +
          (((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
             C21098) *
                C8916 +
            (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
             C21106) *
                C48214) *
               C48573 +
           ((C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
             C21473) *
                C8916 +
            (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
             C21481) *
                C48214) *
               C48376) *
              C48300 * C572 +
          (((C21467 - C21466 + C21469 - C21468 + C21471 - C21470 + C21473 -
             C21472) *
                C8916 +
            (C21475 - C21474 + C21477 - C21476 + C21479 - C21478 + C21481 -
             C21480) *
                C48214) *
               C48573 +
           ((C19815 * C1233 - C19819 * C1229 + C19816 * C1885 - C19820 * C1882 +
             C19817 * C9592 - C19821 * C9590 + C48622 * C10476 -
             C19822 * C10475) *
                C8916 +
            (C19815 * C1241 - C19819 * C1234 + C19816 * C1891 - C19820 * C1886 +
             C19817 * C9596 - C19821 * C9593 + C48622 * C10478 -
             C19822 * C10477) *
                C48214) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C14269 - C14270 + C14271 - C14272) * C8916 +
             (C14273 - C14274 + C14275 - C14276) * C48214) *
                C48616) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C8916 +
             (C7086 - C7085 + C7088 - C7087) * C48214) *
                C11013 +
            ((C13136 - C13135 + C13138 - C13137) * C8916 +
             (C13140 - C13139 + C13142 - C13141) * C48214) *
                C11014 +
            ((C14414 - C14413 + C14416 - C14415) * C8916 +
             (C14418 - C14417 + C14420 - C14419) * C48214) *
                C11015 +
            ((C48574 * C9099 - C4870 * C9097 + C48416 * C9594 - C4871 * C9591) *
                 C8916 +
             (C48574 * C9103 - C4870 * C9100 + C48416 * C9597 - C4871 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C6879 - C6880 + C6881 - C6882) * C1064 +
             (C6883 - C6884 + C6885 - C6886) * C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C1064 +
             (C7086 - C7085 + C7088 - C7087) * C1058 +
             (C6524 - C6523 + C6526 - C6525) * C1065 +
             (C6528 - C6527 + C6530 - C6529) * C1059 +
             (C6532 - C6531 + C6534 - C6533) * C1066 +
             (C6536 - C6535 + C6538 - C6537) * C48593) *
                C48573 +
            ((C48574 * C1423 - C4870 * C1419 + C48416 * C2316 - C4871 * C2307) *
                 C1064 +
             (C48574 * C1431 - C4870 * C1424 + C48416 * C2325 - C4871 * C2317) *
                 C1058 +
             (C48574 * C1425 - C4870 * C1420 + C48416 * C2318 - C4871 * C2308) *
                 C1065 +
             (C48574 * C1432 - C4870 * C1426 + C48416 * C2326 - C4871 * C2319) *
                 C1059 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C1066 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C381 +
           (((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
              C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
              C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C48573 +
            ((C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
              C21619) *
                 C8916 +
             (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
              C21627) *
                 C48214) *
                C48376) *
               C48603) *
              C505 +
          ((((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
              C21098) *
                 C8916 +
             (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
              C21106) *
                 C48214) *
                C48573 +
            ((C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
              C21473) *
                 C8916 +
             (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
              C21481) *
                 C48214) *
                C48376) *
               C381 +
           (((C21613 - C21612 + C21615 - C21614 + C21617 - C21616 + C21619 -
              C21618) *
                 C8916 +
             (C21621 - C21620 + C21623 - C21622 + C21625 - C21624 + C21627 -
              C21626) *
                 C48214) *
                C48573 +
            ((C19815 * C1423 - C19819 * C1419 + C19816 * C2316 -
              C19820 * C2307 + C19817 * C10042 - C19821 * C10040 +
              C48622 * C10909 - C19822 * C10906) *
                 C8916 +
             (C19815 * C1431 - C19819 * C1424 + C19816 * C2325 -
              C19820 * C2317 + C19817 * C10046 - C19821 * C10043 +
              C48622 * C10912 - C19822 * C10910) *
                 C48214) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C8916 +
             (C5206 - C5205 + C5208 - C5207) * C48214) *
                C11013 +
            ((C6524 - C6523 + C6526 - C6525) * C8916 +
             (C6528 - C6527 + C6530 - C6529) * C48214) *
                C11014 +
            ((C12573 - C12572 + C12575 - C12574) * C8916 +
             (C12577 - C12576 + C12579 - C12578) * C48214) *
                C11015 +
            ((C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C8916 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C1064 +
             (C5206 - C5205 + C5208 - C5207) * C1058 +
             (C5210 - C5209 + C5212 - C5211) * C1065 +
             (C5214 - C5213 + C5216 - C5215) * C1059 +
             (C5218 - C5217 + C5220 - C5219) * C1066 +
             (C5222 - C5221 + C5224 - C5223) * C48593) *
                C48573 +
            ((C6524 - C6523 + C6526 - C6525) * C1064 +
             (C6528 - C6527 + C6530 - C6529) * C1058 +
             (C6532 - C6531 + C6534 - C6533) * C1065 +
             (C6536 - C6535 + C6538 - C6537) * C1059 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C1066 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C779 +
           (((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
              C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
              C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C48573 +
            ((C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
              C21619) *
                 C8916 +
             (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
              C21627) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C8916 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48214) *
                C48573 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C8916 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48214) *
                C48376) *
               C779 +
           (((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
              C20138) *
                 C8916 +
             (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
              C20146) *
                 C48214) *
                C48573 +
            ((C19815 * C684 - C19819 * C678 + C19816 * C2312 - C19820 * C2305 +
              C19817 * C3257 - C19821 * C3253 + C48622 * C17530 -
              C19822 * C17529) *
                 C8916 +
             (C19815 * C693 - C19819 * C685 + C19816 * C2323 - C19820 * C2313 +
              C19817 * C3262 - C19821 * C3258 + C48622 * C17532 -
              C19822 * C17531) *
                 C48214) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C14269 - C14270 + C14271 - C14272) * C8916 +
             (C14273 - C14274 + C14275 - C14276) * C48214) *
                C48616) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C8916 +
             (C7086 - C7085 + C7088 - C7087) * C48214) *
                C11013 +
            ((C13136 - C13135 + C13138 - C13137) * C8916 +
             (C13140 - C13139 + C13142 - C13141) * C48214) *
                C11014 +
            ((C14414 - C14413 + C14416 - C14415) * C8916 +
             (C14418 - C14417 + C14420 - C14419) * C48214) *
                C11015 +
            ((C48574 * C9099 - C4870 * C9097 + C48416 * C9594 - C4871 * C9591) *
                 C8916 +
             (C48574 * C9103 - C4870 * C9100 + C48416 * C9597 - C4871 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C6879 - C6880 + C6881 - C6882) * C1064 +
             (C6883 - C6884 + C6885 - C6886) * C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C1064 +
             (C7086 - C7085 + C7088 - C7087) * C1058 +
             (C6524 - C6523 + C6526 - C6525) * C1065 +
             (C6528 - C6527 + C6530 - C6529) * C1059 +
             (C6532 - C6531 + C6534 - C6533) * C1066 +
             (C6536 - C6535 + C6538 - C6537) * C48593) *
                C48573 +
            ((C48574 * C1423 - C4870 * C1419 + C48416 * C2316 - C4871 * C2307) *
                 C1064 +
             (C48574 * C1431 - C4870 * C1424 + C48416 * C2325 - C4871 * C2317) *
                 C1058 +
             (C48574 * C1425 - C4870 * C1420 + C48416 * C2318 - C4871 * C2308) *
                 C1065 +
             (C48574 * C1432 - C4870 * C1426 + C48416 * C2326 - C4871 * C2319) *
                 C1059 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C1066 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
              C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                 C8916 +
             (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
              C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                 C48214) *
                C48573 +
            ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
              C21099) *
                 C8916 +
             (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
              C21107) *
                 C48214) *
                C48376) *
               C779 +
           (((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
              C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
              C48622 * C3669) *
                 C8916 +
             (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
              C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
              C48622 * C3675) *
                 C48214) *
                C48573 +
            ((C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
              C21619) *
                 C8916 +
             (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
              C21627) *
                 C48214) *
                C48376) *
               C48603) *
              C255 +
          ((((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
              C21098) *
                 C8916 +
             (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
              C21106) *
                 C48214) *
                C48573 +
            ((C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
              C21473) *
                 C8916 +
             (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
              C21481) *
                 C48214) *
                C48376) *
               C779 +
           (((C21613 - C21612 + C21615 - C21614 + C21617 - C21616 + C21619 -
              C21618) *
                 C8916 +
             (C21621 - C21620 + C21623 - C21622 + C21625 - C21624 + C21627 -
              C21626) *
                 C48214) *
                C48573 +
            ((C19815 * C1423 - C19819 * C1419 + C19816 * C2316 -
              C19820 * C2307 + C19817 * C10042 - C19821 * C10040 +
              C48622 * C10909 - C19822 * C10906) *
                 C8916 +
             (C19815 * C1431 - C19819 * C1424 + C19816 * C2325 -
              C19820 * C2317 + C19817 * C10046 - C19821 * C10043 +
              C48622 * C10912 - C19822 * C10910) *
                 C48214) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           C14277 * C11015 + C14282 * C48616) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C8916 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C48214) *
               C11013 +
           ((C7081 - C7082 + C7083 - C7084) * C8916 +
            (C7085 - C7086 + C7087 - C7088) * C48214) *
               C11014 +
           ((C13135 - C13136 + C13137 - C13138) * C8916 +
            (C13139 - C13140 + C13141 - C13142) * C48214) *
               C11015 +
           ((C14413 - C14414 + C14415 - C14416) * C8916 +
            (C14417 - C14418 + C14419 - C14420) * C48214) *
               C48616) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C8916 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C48214) *
               C11013 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C8916 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C48214) *
               C11014 +
           ((C48574 * C2316 - C4870 * C2307 + C48416 * C10042 -
             C4871 * C10040) *
                C8916 +
            (C48574 * C2325 - C4870 * C2317 + C48416 * C10046 -
             C4871 * C10043) *
                C48214) *
               C11015 +
           ((C48574 * C9592 - C4870 * C9590 + C48416 * C10476 -
             C4871 * C10475) *
                C8916 +
            (C48574 * C9596 - C4870 * C9593 + C48416 * C10478 -
             C4871 * C10477) *
                C48214) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C6287 - C6288 + C6289 - C6290) * C1064 +
            (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
            C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
               C48376) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C1064 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C1058 +
            (C5201 - C5202 + C5203 - C5204) * C1065 +
            (C5205 - C5206 + C5207 - C5208) * C1059 +
            (C5209 - C5210 + C5211 - C5212) * C1066 +
            (C5213 - C5214 + C5215 - C5216) * C48593) *
               C48573 +
           ((C7081 - C7082 + C7083 - C7084) * C1064 +
            (C7085 - C7086 + C7087 - C7088) * C1058 +
            (C6523 - C6524 + C6525 - C6526) * C1065 +
            (C6527 - C6528 + C6529 - C6530) * C1059 +
            (C6531 - C6532 + C6533 - C6534) * C1066 +
            (C6535 - C6536 + C6537 - C6538) * C48593) *
               C48376) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C1064 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C1058 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C1065 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C1059 +
            (C48574 * C937 - C4870 * C930 + C48416 * C2818 - C4871 * C2812) *
                C1066 +
            (C48574 * C945 - C4870 * C938 + C48416 * C2824 - C4871 * C2819) *
                C48593) *
               C48573 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C1064 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C1058 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C1065 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C1059 +
            (C48574 * C2314 - C4870 * C2306 + C48416 * C3259 - C4871 * C3254) *
                C1066 +
            (C48574 * C2324 - C4870 * C2315 + C48416 * C3263 - C4871 * C3260) *
                C48593) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C8916 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48214) *
               C48573 +
           ((C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C8916 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48214) *
               C48376) *
              C925 +
          (((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
             C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
             C48622 * C3669) *
                C8916 +
            (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
             C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
             C48622 * C3675) *
                C48214) *
               C48573 +
           ((C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
             C21619) *
                C8916 +
            (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
             C21627) *
                C48214) *
               C48376) *
              C926 +
          (((C19815 * C933 - C19819 * C928 + C19816 * C2814 - C19820 * C2810 +
             C19817 * C3669 - C19821 * C3666 + C48622 * C17617 -
             C19822 * C17615) *
                C8916 +
            (C19815 * C943 - C19819 * C934 + C19816 * C2822 - C19820 * C2815 +
             C19817 * C3675 - C19821 * C3670 + C48622 * C17621 -
             C19822 * C17618) *
                C48214) *
               C48573 +
           ((C19815 * C2310 - C19819 * C2304 + C19816 * C3255 - C19820 * C3252 +
             C19817 * C10907 - C19821 * C10905 + C48622 * C17850 -
             C19822 * C17849) *
                C8916 +
            (C19815 * C2322 - C19819 * C2311 + C19816 * C3261 - C19820 * C3256 +
             C19817 * C10911 - C19821 * C10908 + C48622 * C17852 -
             C19822 * C17851) *
                C48214) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48329 * C126 - C113 * C119) * C114 +
               (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48318 * C48300 * C48283 * C110 +
              ((C149 - C148) * C114 + (C151 - C150) * C102 +
               (C153 - C152) * C115 + (C155 - C154) * C103 +
               (C157 - C156) * C116 + (C159 - C158) * C104 +
               (C161 - C160) * C117 + (C163 - C162) * C105 +
               (C164 - C165) * C118 + (C166 - C167) * C106) *
                  C48318 * C48300 * C48283 * C111 +
              (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 +
               C172 * C116 + C173 * C104 + (C165 - C164) * C117 +
               (C167 - C166) * C105 + (C48329 * C138 - C113 * C125) * C118 +
               (C48329 * C146 - C113 * C139) * C106) *
                  C48318 * C48300 * C48283 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C1064 +
                (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                   C48641 +
               ((C48329 * C265 - C113 * C259) * C1064 +
                (C48329 * C277 - C113 * C266) * C1058 + (C285 - C284) * C1065 +
                (C287 - C286) * C1059 + C1068 * C1066 + C1069 * C48593) *
                   C48629 +
               ((C48329 * C580 - C113 * C575) * C1064 +
                (C48329 * C590 - C113 * C581) * C1058 +
                (C1070 - C1071) * C1065 + (C1072 - C1073) * C1059 +
                C1082 * C1066 + C1083 * C48593) *
                   C48606) *
                  C48300 * C48283 * C110 +
              (((C149 - C148) * C1064 + (C151 - C150) * C1058 +
                (C153 - C152) * C1065 + (C155 - C154) * C1059 +
                (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                   C48641 +
               ((C284 - C285) * C1064 + (C286 - C287) * C1058 +
                (C288 - C289) * C1065 + (C290 - C291) * C1059 +
                (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                   C48629 +
               ((C1071 - C1070) * C1064 + (C1073 - C1072) * C1058 +
                (C1075 - C1074) * C1065 + (C1077 - C1076) * C1059 +
                (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                   C48606) *
                  C48300 * C48283 * C111 +
              ((C168 * C1064 + C169 * C1058 + C170 * C1065 + C171 * C1059 +
                C172 * C1066 + C173 * C48593) *
                   C48641 +
               (C1068 * C1064 + C1069 * C1058 + (C293 - C292) * C1065 +
                (C295 - C294) * C1059 + (C297 - C296) * C1066 +
                (C299 - C298) * C48593) *
                   C48629 +
               (C1082 * C1064 + C1083 * C1058 + (C1079 - C1078) * C1065 +
                (C1081 - C1080) * C1059 +
                (C48329 * C588 - C113 * C579) * C1066 +
                (C48329 * C594 - C113 * C589) * C48593) *
                   C48606) *
                  C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C48300 * C48283 * C110 +
          ((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
           (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
           (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
           (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
           (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
           (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
              C48318 * C48300 * C48283 * C111 +
          (C2489 * C1064 + C2490 * C1058 +
           (C2470 - C2469 + C2472 - C2471 + C2474 - C2473) * C1065 +
           (C2476 - C2475 + C2478 - C2477 + C2480 - C2479) * C1059 +
           (C48642 * C134 - C2441 * C123 + C48631 * C397 - C2442 * C387 +
            C48609 * C941 - C2443 * C932) *
               C1066 +
           (C48642 * C144 - C2441 * C135 + C48631 * C405 - C2442 * C398 +
            C48609 * C947 - C2443 * C942) *
               C48593) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
            C1082 * C7740 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C7738 + (C151 - C150) * C48638 +
            (C153 - C152) * C7739 + (C155 - C154) * C48625 +
            (C157 - C156) * C7740 + (C159 - C158) * C48593) *
               C7735 +
           (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
            C3919 * C7740 + C3920 * C48593) *
               C7736 +
           (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
            (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C7738 + C169 * C48638 + C170 * C7739 + C171 * C48625 +
            C172 * C7740 + C173 * C48593) *
               C7735 +
           (C1068 * C7738 + C1069 * C48638 + C3787 * C7739 + C3788 * C48625 +
            (C297 - C296) * C7740 + (C299 - C298) * C48593) *
               C7736 +
           (C1082 * C7738 + C1083 * C48638 + (C1079 - C1078) * C7739 +
            (C1081 - C1080) * C48625 + (C48329 * C588 - C113 * C579) * C7740 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           (C1720 * C8916 + C1721 * C48214) * C8913 +
           ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
           ((C48329 * C1710 - C113 * C1707) * C8916 +
            (C48329 * C1716 - C113 * C1711) * C48214) *
               C8915) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
           (C1258 * C8916 + C1259 * C48214) * C8912 +
           (C1262 * C8916 + C1263 * C48214) * C8913 +
           ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
           ((C113 * C1708 - C48329 * C1712) * C8916 +
            (C113 * C1713 - C48329 * C1717) * C48214) *
               C8915) *
              C48300 * C48283 * C111 +
          ((C168 * C8916 + C169 * C48214) * C8911 +
           (C1068 * C8916 + C1069 * C48214) * C8912 +
           (C1082 * C8916 + C1083 * C48214) * C8913 +
           ((C1271 - C1270) * C8916 + (C1273 - C1272) * C48214) * C8914 +
           ((C48329 * C1714 - C113 * C1709) * C8916 +
            (C48329 * C1718 - C113 * C1715) * C48214) *
               C8915) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C48642 * C265 - C2441 * C259 + C48631 * C682 - C2442 * C677 +
             C48609 * C2310 - C2443 * C2304) *
                C8916 +
            (C48642 * C277 - C2441 * C266 + C48631 * C692 - C2442 * C683 +
             C48609 * C2322 - C2443 * C2311) *
                C48214) *
               C7736 +
           ((C48642 * C580 - C2441 * C575 + C48631 * C1423 - C2442 * C1419 +
             C48609 * C2316 - C2443 * C2307) *
                C8916 +
            (C48642 * C590 - C2441 * C581 + C48631 * C1431 - C2442 * C1424 +
             C48609 * C2325 - C2443 * C2317) *
                C48214) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
               C7735 +
           ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
               C7736 +
           ((C2441 * C576 - C48642 * C582 + C2442 * C1420 - C48631 * C1425 +
             C2443 * C2308 - C48609 * C2318) *
                C8916 +
            (C2441 * C583 - C48642 * C591 + C2442 * C1426 - C48631 * C1432 +
             C2443 * C2319 - C48609 * C2326) *
                C48214) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C2489 * C8916 + C2490 * C48214) * C7735 +
           ((C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C8916 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C48214) *
               C7736 +
           ((C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
             C48609 * C2320 - C2443 * C2309) *
                C8916 +
            (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
             C48609 * C2327 - C2443 * C2321) *
                C48214) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C48300 * C48283 * C110 +
          ((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
           (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
           (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
           (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
           (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
           (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
              C48318 * C48300 * C48283 * C111 +
          (C14939 * C7738 + C14940 * C48638 +
           (C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C7739 +
           (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48625 +
           (C14888 * C134 - C14891 * C123 + C14889 * C397 - C14892 * C387 +
            C48609 * C941 - C14893 * C932) *
               C7740 +
           (C14888 * C144 - C14891 * C135 + C14889 * C405 - C14892 * C398 +
            C48609 * C947 - C14893 * C942) *
               C48593) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C14888 * C265 - C14891 * C259 + C14889 * C682 - C14892 * C677 +
             C48609 * C2310 - C14893 * C2304) *
                C8916 +
            (C14888 * C277 - C14891 * C266 + C14889 * C692 - C14892 * C683 +
             C48609 * C2322 - C14893 * C2311) *
                C48214) *
               C48629 +
           ((C14888 * C580 - C14891 * C575 + C14889 * C1423 - C14892 * C1419 +
             C48609 * C2316 - C14893 * C2307) *
                C8916 +
            (C14888 * C590 - C14891 * C581 + C14889 * C1431 - C14892 * C1424 +
             C48609 * C2325 - C14893 * C2317) *
                C48214) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
               C48641 +
           ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
               C48629 +
           ((C14891 * C576 - C14888 * C582 + C14892 * C1420 - C14889 * C1425 +
             C14893 * C2308 - C48609 * C2318) *
                C8916 +
            (C14891 * C583 - C14888 * C591 + C14892 * C1426 - C14889 * C1432 +
             C14893 * C2319 - C48609 * C2326) *
                C48214) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C14939 * C8916 + C14940 * C48214) * C48641 +
           ((C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C8916 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48214) *
               C48629 +
           ((C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
             C48609 * C2320 - C14893 * C2309) *
                C8916 +
            (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
             C48609 * C2327 - C14893 * C2321) *
                C48214) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
            C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
            C17441 * C3669 - C17446 * C3666) *
               C8916 +
           (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
            C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
            C17441 * C3675 - C17446 * C3670) *
               C48214) *
              C48318 * C48300 * C48283 * C110 +
          ((C17442 * C120 - C17437 * C128 + C17443 * C384 - C17438 * C391 +
            C17444 * C929 - C17439 * C935 + C17445 * C2811 - C17440 * C2816 +
            C17446 * C3667 - C17441 * C3671) *
               C8916 +
           (C17442 * C129 - C17437 * C141 + C17443 * C392 - C17438 * C402 +
            C17444 * C936 - C17439 * C944 + C17445 * C2817 - C17440 * C2823 +
            C17446 * C3672 - C17441 * C3676) *
               C48214) *
              C48318 * C48300 * C48283 * C111 +
          ((C17437 * C130 - C17442 * C121 + C17438 * C393 - C17443 * C385 +
            C17439 * C937 - C17444 * C930 + C17440 * C2818 - C17445 * C2812 +
            C17441 * C3673 - C17446 * C3668) *
               C8916 +
           (C17437 * C142 - C17442 * C131 + C17438 * C403 - C17443 * C394 +
            C17439 * C945 - C17444 * C938 + C17440 * C2824 - C17445 * C2819 +
            C17441 * C3677 - C17446 * C3674) *
               C48214) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C48300 * C255 +
               ((C113 * C259 - C48329 * C265) * C114 +
                (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48318 * C48300 * C48601) *
                  C257 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48318 * C48300 * C255 +
               ((C285 - C284) * C114 + (C287 - C286) * C102 +
                (C289 - C288) * C115 + (C291 - C290) * C103 +
                (C293 - C292) * C116 + (C295 - C294) * C104 +
                (C297 - C296) * C117 + (C299 - C298) * C105 +
                (C48329 * C275 - C113 * C264) * C118 +
                (C48329 * C282 - C113 * C276) * C106) *
                   C48318 * C48300 * C48601) *
                  C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 +
                 C1256 * C1065 + C1257 * C1059 + C1082 * C1066 +
                 C1083 * C48593) *
                    C48606) *
                   C48300 * C255 +
               (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 +
                 C1258 * C1065 + C1259 * C1059 + C1260 * C1066 +
                 C1261 * C48593) *
                    C48641 +
                ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 +
                 C1262 * C1065 + C1263 * C1059 + C1264 * C1066 +
                 C1265 * C48593) *
                    C48629 +
                ((C113 * C1229 - C48329 * C1233) * C1064 +
                 (C113 * C1234 - C48329 * C1241) * C1058 +
                 (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
                 (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                    C48606) *
                   C48300 * C48601) *
                  C257 +
              ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
                 (C153 - C152) * C1065 + (C155 - C154) * C1059 +
                 (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                    C48641 +
                (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
                 (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                    C48629 +
                (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
                 (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                    C48606) *
                   C48300 * C255 +
               ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
                 (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                    C48641 +
                (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
                 (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                    C48629 +
                ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
                 (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
                 (C48329 * C1239 - C113 * C1232) * C1066 +
                 (C48329 * C1244 - C113 * C1240) * C48593) *
                    C48606) *
                   C48300 * C48601) *
                  C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C48300 * C255 +
           ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C48300 * C255 +
           ((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C1064 +
            (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C1058 +
            (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C1065 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C1059 +
            (C48642 * C271 - C2441 * C262 + C48631 * C688 - C2442 * C680 +
             C48609 * C2637 - C2443 * C2636) *
                C1066 +
            (C48642 * C280 - C2441 * C272 + C48631 * C695 - C2442 * C689 +
             C48609 * C2639 - C2443 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C255 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C255 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C2441 * C1229 - C48642 * C1233 + C2442 * C1882 - C48631 * C1885 +
              C2443 * C9590 - C48609 * C9592) *
                 C8916 +
             (C2441 * C1234 - C48642 * C1241 + C2442 * C1886 - C48631 * C1891 +
              C2443 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C8916 +
             (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C48214) *
                C7735 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C8916 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C48214) *
                C7736 +
            ((C48642 * C1235 - C2441 * C1230 + C48631 * C1887 - C2442 * C1883 +
              C48609 * C9855 - C2443 * C9854) *
                 C8916 +
             (C48642 * C1242 - C2441 * C1236 + C48631 * C1892 - C2442 * C1888 +
              C48609 * C9857 - C2443 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C48300 * C255 +
           ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C48300 * C255 +
           ((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C7738 +
            (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48638 +
            (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C7739 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48625 +
            (C14888 * C271 - C14891 * C262 + C14889 * C688 - C14892 * C680 +
             C48609 * C2637 - C14893 * C2636) *
                C7740 +
            (C14888 * C280 - C14891 * C272 + C14889 * C695 - C14892 * C689 +
             C48609 * C2639 - C14893 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C14891 * C1229 - C14888 * C1233 + C14892 * C1882 -
              C14889 * C1885 + C14893 * C9590 - C48609 * C9592) *
                 C8916 +
             (C14891 * C1234 - C14888 * C1241 + C14892 * C1886 -
              C14889 * C1891 + C14893 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C8916 +
             (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48214) *
                C48641 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C8916 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48214) *
                C48629 +
            ((C14888 * C1235 - C14891 * C1230 + C14889 * C1887 -
              C14892 * C1883 + C48609 * C9855 - C14893 * C9854) *
                 C8916 +
             (C14888 * C1242 - C14891 * C1236 + C14889 * C1892 -
              C14892 * C1888 + C48609 * C9857 - C14893 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C48300 * C255 +
           ((C17442 * C259 - C17437 * C265 + C17443 * C677 - C17438 * C682 +
             C17444 * C2304 - C17439 * C2310 + C17445 * C3252 - C17440 * C3255 +
             C17446 * C10905 - C17441 * C10907) *
                C8916 +
            (C17442 * C266 - C17437 * C277 + C17443 * C683 - C17438 * C692 +
             C17444 * C2311 - C17439 * C2322 + C17445 * C3256 - C17440 * C3261 +
             C17446 * C10908 - C17441 * C10911) *
                C48214) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C17442 * C120 - C17437 * C128 + C17443 * C384 - C17438 * C391 +
             C17444 * C929 - C17439 * C935 + C17445 * C2811 - C17440 * C2816 +
             C17446 * C3667 - C17441 * C3671) *
                C8916 +
            (C17442 * C129 - C17437 * C141 + C17443 * C392 - C17438 * C402 +
             C17444 * C936 - C17439 * C944 + C17445 * C2817 - C17440 * C2823 +
             C17446 * C3672 - C17441 * C3676) *
                C48214) *
               C48318 * C48300 * C255 +
           ((C17437 * C267 - C17442 * C260 + C17438 * C684 - C17443 * C678 +
             C17439 * C2312 - C17444 * C2305 + C17440 * C3257 - C17445 * C3253 +
             C17441 * C17530 - C17446 * C17529) *
                C8916 +
            (C17437 * C278 - C17442 * C268 + C17438 * C693 - C17443 * C685 +
             C17439 * C2323 - C17444 * C2313 + C17440 * C3262 - C17445 * C3258 +
             C17441 * C17532 - C17446 * C17531) *
                C48214) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C381 +
               ((C113 * C383 - C48329 * C389) * C114 +
                (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48318 * C48603) *
                  C48283 * C257 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48318 * C381 +
               ((C409 - C408) * C114 + (C411 - C410) * C102 +
                (C413 - C412) * C115 + (C415 - C414) * C103 +
                (C417 - C416) * C116 + (C419 - C418) * C104 +
                (C421 - C420) * C117 + (C423 - C422) * C105 +
                (C48329 * C399 - C113 * C388) * C118 +
                (C48329 * C406 - C113 * C400) * C106) *
                   C48318 * C48603) *
                  C48283 * C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 +
                 C1256 * C1065 + C1257 * C1059 + C1082 * C1066 +
                 C1083 * C48593) *
                    C48606) *
                   C381 +
               (((C113 * C383 - C48329 * C389) * C1064 +
                 (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
                 (C410 - C411) * C1059 + (C412 - C413) * C1066 +
                 (C414 - C415) * C48593) *
                    C48641 +
                ((C113 * C677 - C48329 * C682) * C1064 +
                 (C113 * C683 - C48329 * C692) * C1058 +
                 (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
                 (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                    C48629 +
                ((C113 * C1419 - C48329 * C1423) * C1064 +
                 (C113 * C1424 - C48329 * C1431) * C1058 +
                 (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
                 (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                    C48606) *
                   C48603) *
                  C48283 * C257 +
              ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
                 (C153 - C152) * C1065 + (C155 - C154) * C1059 +
                 (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                    C48641 +
                (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
                 (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                    C48629 +
                (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
                 (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                    C48606) *
                   C381 +
               (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
                 (C413 - C412) * C1065 + (C415 - C414) * C1059 +
                 (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                    C48641 +
                ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
                 (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
                 (C48329 * C688 - C113 * C680) * C1066 +
                 (C48329 * C695 - C113 * C689) * C48593) *
                    C48629 +
                ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
                 (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
                 (C48329 * C1429 - C113 * C1422) * C1066 +
                 (C48329 * C1434 - C113 * C1430) * C48593) *
                    C48606) *
                   C48603) *
                  C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C381 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C381 +
           ((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C1064 +
            (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C1058 +
            (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C1065 +
            (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C1059 +
            (C48642 * C395 - C2441 * C386 + C48631 * C939 - C2442 * C931 +
             C48609 * C2820 - C2443 * C2813) *
                C1066 +
            (C48642 * C404 - C2441 * C396 + C48631 * C946 - C2442 * C940 +
             C48609 * C2825 - C2443 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C113 * C1882 - C48329 * C1885) * C8916 +
             (C113 * C1886 - C48329 * C1891) * C48214) *
                C8914 +
            ((C113 * C9097 - C48329 * C9099) * C8916 +
             (C113 * C9100 - C48329 * C9103) * C48214) *
                C8915) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C381 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C2441 * C677 - C48642 * C682 + C2442 * C2304 - C48631 * C2310 +
              C2443 * C3252 - C48609 * C3255) *
                 C8916 +
             (C2441 * C683 - C48642 * C692 + C2442 * C2311 - C48631 * C2322 +
              C2443 * C3256 - C48609 * C3261) *
                 C48214) *
                C7736 +
            ((C2441 * C1419 - C48642 * C1423 + C2442 * C2307 - C48631 * C2316 +
              C2443 * C10040 - C48609 * C10042) *
                 C8916 +
             (C2441 * C1424 - C48642 * C1431 + C2442 * C2317 - C48631 * C2325 +
              C2443 * C10043 - C48609 * C10046) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C381 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C8916 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C48214) *
                C7735 +
            ((C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
              C48609 * C3257 - C2443 * C3253) *
                 C8916 +
             (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
              C48609 * C3262 - C2443 * C3258) *
                 C48214) *
                C7736 +
            ((C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C8916 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C381 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C381 +
           ((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C7738 +
            (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48638 +
            (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C7739 +
            (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48625 +
            (C14888 * C395 - C14891 * C386 + C14889 * C939 - C14892 * C931 +
             C48609 * C2820 - C14893 * C2813) *
                C7740 +
            (C14888 * C404 - C14891 * C396 + C14889 * C946 - C14892 * C940 +
             C48609 * C2825 - C14893 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C14891 * C677 - C14888 * C682 + C14892 * C2304 - C14889 * C2310 +
              C14893 * C3252 - C48609 * C3255) *
                 C8916 +
             (C14891 * C683 - C14888 * C692 + C14892 * C2311 - C14889 * C2322 +
              C14893 * C3256 - C48609 * C3261) *
                 C48214) *
                C48629 +
            ((C14891 * C1419 - C14888 * C1423 + C14892 * C2307 -
              C14889 * C2316 + C14893 * C10040 - C48609 * C10042) *
                 C8916 +
             (C14891 * C1424 - C14888 * C1431 + C14892 * C2317 -
              C14889 * C2325 + C14893 * C10043 - C48609 * C10046) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C381 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C8916 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48214) *
                C48641 +
            ((C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
              C48609 * C3257 - C14893 * C3253) *
                 C8916 +
             (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
              C48609 * C3262 - C14893 * C3258) *
                 C48214) *
                C48629 +
            ((C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C8916 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C381 +
           ((C17442 * C383 - C17437 * C389 + C17443 * C928 - C17438 * C933 +
             C17444 * C2810 - C17439 * C2814 + C17445 * C3666 - C17440 * C3669 +
             C17446 * C17615 - C17441 * C17617) *
                C8916 +
            (C17442 * C390 - C17437 * C401 + C17443 * C934 - C17438 * C943 +
             C17444 * C2815 - C17439 * C2822 + C17445 * C3670 - C17440 * C3675 +
             C17446 * C17618 - C17441 * C17621) *
                C48214) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C17442 * C120 - C17437 * C128 + C17443 * C384 - C17438 * C391 +
             C17444 * C929 - C17439 * C935 + C17445 * C2811 - C17440 * C2816 +
             C17446 * C3667 - C17441 * C3671) *
                C8916 +
            (C17442 * C129 - C17437 * C141 + C17443 * C392 - C17438 * C402 +
             C17444 * C936 - C17439 * C944 + C17445 * C2817 - C17440 * C2823 +
             C17446 * C3672 - C17441 * C3676) *
                C48214) *
               C48318 * C381 +
           ((C17437 * C391 - C17442 * C384 + C17438 * C935 - C17443 * C929 +
             C17439 * C2816 - C17444 * C2811 + C17440 * C3671 - C17445 * C3667 +
             C17441 * C17619 - C17446 * C17616) *
                C8916 +
            (C17437 * C402 - C17442 * C392 + C17438 * C944 - C17443 * C936 +
             C17439 * C2823 - C17444 * C2817 + C17440 * C3676 - C17445 * C3672 +
             C17441 * C17622 - C17446 * C17620) *
                C48214) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C48300 * C505 +
               ((C113 * C259 - C48329 * C265) * C114 +
                (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48318 * C48300 * C48601) *
                  C507 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48318 * C48300 * C505 +
               ((C285 - C284) * C114 + (C287 - C286) * C102 +
                (C289 - C288) * C115 + (C291 - C290) * C103 +
                (C293 - C292) * C116 + (C295 - C294) * C104 +
                (C297 - C296) * C117 + (C299 - C298) * C105 +
                (C48329 * C275 - C113 * C264) * C118 +
                (C48329 * C282 - C113 * C276) * C106) *
                   C48318 * C48300 * C48601) *
                  C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 +
                 C1256 * C1065 + C1257 * C1059 + C1082 * C1066 +
                 C1083 * C48593) *
                    C48606) *
                   C48300 * C505 +
               (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 +
                 C1258 * C1065 + C1259 * C1059 + C1260 * C1066 +
                 C1261 * C48593) *
                    C48641 +
                ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 +
                 C1262 * C1065 + C1263 * C1059 + C1264 * C1066 +
                 C1265 * C48593) *
                    C48629 +
                ((C113 * C1229 - C48329 * C1233) * C1064 +
                 (C113 * C1234 - C48329 * C1241) * C1058 +
                 (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
                 (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                    C48606) *
                   C48300 * C48601) *
                  C507 +
              ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
                 (C153 - C152) * C1065 + (C155 - C154) * C1059 +
                 (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                    C48641 +
                (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
                 (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                    C48629 +
                (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
                 (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                    C48606) *
                   C48300 * C505 +
               ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
                 (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                    C48641 +
                (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
                 (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                    C48629 +
                ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
                 (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
                 (C48329 * C1239 - C113 * C1232) * C1066 +
                 (C48329 * C1244 - C113 * C1240) * C48593) *
                    C48606) *
                   C48300 * C48601) *
                  C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C48300 * C505 +
           ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C48300 * C505 +
           ((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C1064 +
            (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C1058 +
            (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C1065 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C1059 +
            (C48642 * C271 - C2441 * C262 + C48631 * C688 - C2442 * C680 +
             C48609 * C2637 - C2443 * C2636) *
                C1066 +
            (C48642 * C280 - C2441 * C272 + C48631 * C695 - C2442 * C689 +
             C48609 * C2639 - C2443 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C505 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C505 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C2441 * C1229 - C48642 * C1233 + C2442 * C1882 - C48631 * C1885 +
              C2443 * C9590 - C48609 * C9592) *
                 C8916 +
             (C2441 * C1234 - C48642 * C1241 + C2442 * C1886 - C48631 * C1891 +
              C2443 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C8916 +
             (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C48214) *
                C7735 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C8916 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C48214) *
                C7736 +
            ((C48642 * C1235 - C2441 * C1230 + C48631 * C1887 - C2442 * C1883 +
              C48609 * C9855 - C2443 * C9854) *
                 C8916 +
             (C48642 * C1242 - C2441 * C1236 + C48631 * C1892 - C2442 * C1888 +
              C48609 * C9857 - C2443 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C48300 * C505 +
           ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C48300 * C505 +
           ((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C7738 +
            (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48638 +
            (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C7739 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48625 +
            (C14888 * C271 - C14891 * C262 + C14889 * C688 - C14892 * C680 +
             C48609 * C2637 - C14893 * C2636) *
                C7740 +
            (C14888 * C280 - C14891 * C272 + C14889 * C695 - C14892 * C689 +
             C48609 * C2639 - C14893 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C14891 * C1229 - C14888 * C1233 + C14892 * C1882 -
              C14889 * C1885 + C14893 * C9590 - C48609 * C9592) *
                 C8916 +
             (C14891 * C1234 - C14888 * C1241 + C14892 * C1886 -
              C14889 * C1891 + C14893 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C8916 +
             (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48214) *
                C48641 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C8916 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48214) *
                C48629 +
            ((C14888 * C1235 - C14891 * C1230 + C14889 * C1887 -
              C14892 * C1883 + C48609 * C9855 - C14893 * C9854) *
                 C8916 +
             (C14888 * C1242 - C14891 * C1236 + C14889 * C1892 -
              C14892 * C1888 + C48609 * C9857 - C14893 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C48300 * C505 +
           ((C17442 * C259 - C17437 * C265 + C17443 * C677 - C17438 * C682 +
             C17444 * C2304 - C17439 * C2310 + C17445 * C3252 - C17440 * C3255 +
             C17446 * C10905 - C17441 * C10907) *
                C8916 +
            (C17442 * C266 - C17437 * C277 + C17443 * C683 - C17438 * C692 +
             C17444 * C2311 - C17439 * C2322 + C17445 * C3256 - C17440 * C3261 +
             C17446 * C10908 - C17441 * C10911) *
                C48214) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C17442 * C120 - C17437 * C128 + C17443 * C384 - C17438 * C391 +
             C17444 * C929 - C17439 * C935 + C17445 * C2811 - C17440 * C2816 +
             C17446 * C3667 - C17441 * C3671) *
                C8916 +
            (C17442 * C129 - C17437 * C141 + C17443 * C392 - C17438 * C402 +
             C17444 * C936 - C17439 * C944 + C17445 * C2817 - C17440 * C2823 +
             C17446 * C3672 - C17441 * C3676) *
                C48214) *
               C48318 * C48300 * C505 +
           ((C17437 * C267 - C17442 * C260 + C17438 * C684 - C17443 * C678 +
             C17439 * C2312 - C17444 * C2305 + C17440 * C3257 - C17445 * C3253 +
             C17441 * C17530 - C17446 * C17529) *
                C8916 +
            (C17437 * C278 - C17442 * C268 + C17438 * C693 - C17443 * C685 +
             C17439 * C2323 - C17444 * C2313 + C17440 * C3262 - C17445 * C3258 +
             C17441 * C17532 - C17446 * C17531) *
                C48214) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48329 * C126 - C113 * C119) * C114 +
               (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48318 * C48300 * C571 +
              ((C113 * C259 - C48329 * C265) * C114 +
               (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
               (C286 - C287) * C103 + (C288 - C289) * C116 +
               (C290 - C291) * C104 + (C292 - C293) * C117 +
               (C294 - C295) * C105 + (C296 - C297) * C118 +
               (C298 - C299) * C106) *
                  C48318 * C48300 * C572 +
              ((C48329 * C580 - C113 * C575) * C114 +
               (C48329 * C590 - C113 * C581) * C102 +
               (C48329 * C582 - C113 * C576) * C115 +
               (C48329 * C591 - C113 * C583) * C103 +
               (C48329 * C584 - C113 * C577) * C116 +
               (C48329 * C592 - C113 * C585) * C104 +
               (C48329 * C586 - C113 * C578) * C117 +
               (C48329 * C593 - C113 * C587) * C105 +
               (C48329 * C588 - C113 * C579) * C118 +
               (C48329 * C594 - C113 * C589) * C106) *
                  C48318 * C48300 * C573) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C1064 +
                (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                   C48641 +
               ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                C1069 * C48593) *
                   C48629 +
               C1736 * C48606) *
                  C48300 * C571 +
              (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 +
                C1258 * C1065 + C1259 * C1059 + C1260 * C1066 +
                C1261 * C48593) *
                   C48641 +
               ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 +
                C1262 * C1065 + C1263 * C1059 + C1264 * C1066 +
                C1265 * C48593) *
                   C48629 +
               ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
                (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
                (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                   C48606) *
                  C48300 * C572 +
              (C1736 * C48641 +
               ((C1727 - C1726) * C1064 + (C1729 - C1728) * C1058 +
                (C1267 - C1266) * C1065 + (C1269 - C1268) * C1059 +
                (C1271 - C1270) * C1066 + (C1273 - C1272) * C48593) *
                   C48629 +
               ((C48329 * C1710 - C113 * C1707) * C1064 +
                (C48329 * C1716 - C113 * C1711) * C1058 +
                (C48329 * C1712 - C113 * C1708) * C1065 +
                (C48329 * C1717 - C113 * C1713) * C1059 +
                (C48329 * C1714 - C113 * C1709) * C1066 +
                (C48329 * C1718 - C113 * C1715) * C48593) *
                   C48606) *
                  C48300 * C573) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C48300 * C571 +
          ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
            C2443 * C2304 - C48609 * C2310) *
               C1064 +
           (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
            C2443 * C2311 - C48609 * C2322) *
               C1058 +
           (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
           (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
           (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
           (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
              C48318 * C48300 * C572 +
          ((C48642 * C580 - C2441 * C575 + C48631 * C1423 - C2442 * C1419 +
            C48609 * C2316 - C2443 * C2307) *
               C1064 +
           (C48642 * C590 - C2441 * C581 + C48631 * C1431 - C2442 * C1424 +
            C48609 * C2325 - C2443 * C2317) *
               C1058 +
           (C48642 * C582 - C2441 * C576 + C48631 * C1425 - C2442 * C1420 +
            C48609 * C2318 - C2443 * C2308) *
               C1065 +
           (C48642 * C591 - C2441 * C583 + C48631 * C1432 - C2442 * C1426 +
            C48609 * C2326 - C2443 * C2319) *
               C1059 +
           (C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
            C48609 * C2320 - C2443 * C2309) *
               C1066 +
           (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
            C48609 * C2327 - C2443 * C2321) *
               C48593) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 + C1258 * C7739 +
            C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
               C7735 +
           ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 + C1262 * C7739 +
            C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
               C7736 +
           ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
            (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
            (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C8300 * C7735 +
           ((C1727 - C1726) * C7738 + (C1729 - C1728) * C48638 +
            (C1267 - C1266) * C7739 + (C1269 - C1268) * C48625 +
            (C1271 - C1270) * C7740 + (C1273 - C1272) * C48593) *
               C7736 +
           ((C48329 * C1710 - C113 * C1707) * C7738 +
            (C48329 * C1716 - C113 * C1711) * C48638 +
            (C48329 * C1712 - C113 * C1708) * C7739 +
            (C48329 * C1717 - C113 * C1713) * C48625 +
            (C48329 * C1714 - C113 * C1709) * C7740 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C48300 * C571 +
          (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
           ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
           ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
           ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
           ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
              C48300 * C572 +
          (C9264 * C8911 + C9269 * C8912 + C9270 * C8913 +
           ((C9261 - C9260) * C8916 + (C9263 - C9262) * C48214) * C8914 +
           ((C48329 * C9250 - C113 * C9249) * C8916 +
            (C48329 * C9252 - C113 * C9251) * C48214) *
               C8915) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
               C7736 +
           C10329 * C48606) *
              C48300 * C571 +
          (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
            (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
               C7735 +
           ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
            (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
               C7736 +
           ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
            (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
               C48606) *
              C48300 * C572 +
          (C10329 * C7735 +
           ((C10312 - C10311 + C10314 - C10313 + C10316 - C10315) * C8916 +
            (C10318 - C10317 + C10320 - C10319 + C10322 - C10321) * C48214) *
               C7736 +
           ((C48642 * C1710 - C2441 * C1707 + C48631 * C9099 - C2442 * C9097 +
             C48609 * C9594 - C2443 * C9591) *
                C8916 +
            (C48642 * C1716 - C2441 * C1711 + C48631 * C9103 - C2442 * C9100 +
             C48609 * C9597 - C2443 * C9595) *
                C48214) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C48300 * C571 +
          ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
            C14893 * C2304 - C48609 * C2310) *
               C7738 +
           (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
            C14893 * C2311 - C48609 * C2322) *
               C48638 +
           (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
           (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
           (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
           (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
              C48318 * C48300 * C572 +
          ((C14888 * C580 - C14891 * C575 + C14889 * C1423 - C14892 * C1419 +
            C48609 * C2316 - C14893 * C2307) *
               C7738 +
           (C14888 * C590 - C14891 * C581 + C14889 * C1431 - C14892 * C1424 +
            C48609 * C2325 - C14893 * C2317) *
               C48638 +
           (C14888 * C582 - C14891 * C576 + C14889 * C1425 - C14892 * C1420 +
            C48609 * C2318 - C14893 * C2308) *
               C7739 +
           (C14888 * C591 - C14891 * C583 + C14889 * C1432 - C14892 * C1426 +
            C48609 * C2326 - C14893 * C2319) *
               C48625 +
           (C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
            C48609 * C2320 - C14893 * C2309) *
               C7740 +
           (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
            C48609 * C2327 - C14893 * C2321) *
               C48593) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
               C48629 +
           C16803 * C48606) *
              C48300 * C571 +
          (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
            (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
               C48641 +
           ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
            (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
               C48629 +
           ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
            (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
               C48606) *
              C48300 * C572 +
          (C16803 * C48641 +
           ((C16786 - C16785 + C16788 - C16787 + C16790 - C16789) * C8916 +
            (C16792 - C16791 + C16794 - C16793 + C16796 - C16795) * C48214) *
               C48629 +
           ((C14888 * C1710 - C14891 * C1707 + C14889 * C9099 - C14892 * C9097 +
             C48609 * C9594 - C14893 * C9591) *
                C8916 +
            (C14888 * C1716 - C14891 * C1711 + C14889 * C9103 - C14892 * C9100 +
             C48609 * C9597 - C14893 * C9595) *
                C48214) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
            C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
            C17441 * C3669 - C17446 * C3666) *
               C8916 +
           (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
            C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
            C17441 * C3675 - C17446 * C3670) *
               C48214) *
              C48318 * C48300 * C571 +
          ((C17442 * C259 - C17437 * C265 + C17443 * C677 - C17438 * C682 +
            C17444 * C2304 - C17439 * C2310 + C17445 * C3252 - C17440 * C3255 +
            C17446 * C10905 - C17441 * C10907) *
               C8916 +
           (C17442 * C266 - C17437 * C277 + C17443 * C683 - C17438 * C692 +
            C17444 * C2311 - C17439 * C2322 + C17445 * C3256 - C17440 * C3261 +
            C17446 * C10908 - C17441 * C10911) *
               C48214) *
              C48318 * C48300 * C572 +
          ((C17437 * C580 - C17442 * C575 + C17438 * C1423 - C17443 * C1419 +
            C17439 * C2316 - C17444 * C2307 + C17440 * C10042 -
            C17445 * C10040 + C17441 * C10909 - C17446 * C10906) *
               C8916 +
           (C17437 * C590 - C17442 * C581 + C17438 * C1431 - C17443 * C1424 +
            C17439 * C2325 - C17444 * C2317 + C17440 * C10046 -
            C17445 * C10043 + C17441 * C10912 - C17446 * C10910) *
               C48214) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C381 +
               ((C113 * C383 - C48329 * C389) * C114 +
                (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48318 * C48603) *
                  C505 +
              (((C113 * C259 - C48329 * C265) * C114 +
                (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48318 * C381 +
               ((C48329 * C682 - C113 * C677) * C114 +
                (C48329 * C692 - C113 * C683) * C102 +
                (C48329 * C684 - C113 * C678) * C115 +
                (C48329 * C693 - C113 * C685) * C103 +
                (C48329 * C686 - C113 * C679) * C116 +
                (C48329 * C694 - C113 * C687) * C104 +
                (C48329 * C688 - C113 * C680) * C117 +
                (C48329 * C695 - C113 * C689) * C105 +
                (C48329 * C690 - C113 * C681) * C118 +
                (C48329 * C696 - C113 * C691) * C106) *
                   C48318 * C48603) *
                  C48601) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                C1736 * C48606) *
                   C381 +
               (((C113 * C383 - C48329 * C389) * C1064 +
                 (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
                 (C410 - C411) * C1059 + (C412 - C413) * C1066 +
                 (C414 - C415) * C48593) *
                    C48641 +
                ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
                 (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
                 (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                    C48629 +
                ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
                 (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
                 (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                    C48606) *
                   C48603) *
                  C505 +
              ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 +
                 C1258 * C1065 + C1259 * C1059 + C1260 * C1066 +
                 C1261 * C48593) *
                    C48641 +
                ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 +
                 C1262 * C1065 + C1263 * C1059 + C1264 * C1066 +
                 C1265 * C48593) *
                    C48629 +
                ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
                 (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
                 (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                    C48606) *
                   C381 +
               (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
                 (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
                 (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                    C48641 +
                ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
                 (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
                 (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                    C48629 +
                ((C48329 * C1885 - C113 * C1882) * C1064 +
                 (C48329 * C1891 - C113 * C1886) * C1058 +
                 (C48329 * C1887 - C113 * C1883) * C1065 +
                 (C48329 * C1892 - C113 * C1888) * C1059 +
                 (C48329 * C1889 - C113 * C1884) * C1066 +
                 (C48329 * C1893 - C113 * C1890) * C48593) *
                    C48606) *
                   C48603) *
                  C48601) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C381 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C505 +
          (((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C381 +
           ((C48642 * C682 - C2441 * C677 + C48631 * C2310 - C2442 * C2304 +
             C48609 * C3255 - C2443 * C3252) *
                C1064 +
            (C48642 * C692 - C2441 * C683 + C48631 * C2322 - C2442 * C2311 +
             C48609 * C3261 - C2443 * C3256) *
                C1058 +
            (C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
             C48609 * C3257 - C2443 * C3253) *
                C1065 +
            (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
             C48609 * C3262 - C2443 * C3258) *
                C1059 +
            (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
             C48609 * C3259 - C2443 * C3254) *
                C1066 +
            (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
             C48609 * C3263 - C2443 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C381 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C505 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
             (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
                C48606) *
               C381 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C8916 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C48214) *
                C7735 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C8916 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C48214) *
                C7736 +
            ((C48642 * C1885 - C2441 * C1882 + C48631 * C9592 - C2442 * C9590 +
              C48609 * C10476 - C2443 * C10475) *
                 C8916 +
             (C48642 * C1891 - C2441 * C1886 + C48631 * C9596 - C2442 * C9593 +
              C48609 * C10478 - C2443 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C381 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C505 +
          (((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C381 +
           ((C14888 * C682 - C14891 * C677 + C14889 * C2310 - C14892 * C2304 +
             C48609 * C3255 - C14893 * C3252) *
                C7738 +
            (C14888 * C692 - C14891 * C683 + C14889 * C2322 - C14892 * C2311 +
             C48609 * C3261 - C14893 * C3256) *
                C48638 +
            (C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
             C48609 * C3257 - C14893 * C3253) *
                C7739 +
            (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
             C48609 * C3262 - C14893 * C3258) *
                C48625 +
            (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
             C48609 * C3259 - C14893 * C3254) *
                C7740 +
            (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
             C48609 * C3263 - C14893 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C505 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
             (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
                C48606) *
               C381 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C8916 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48214) *
                C48641 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C8916 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48214) *
                C48629 +
            ((C14888 * C1885 - C14891 * C1882 + C14889 * C9592 -
              C14892 * C9590 + C48609 * C10476 - C14893 * C10475) *
                 C8916 +
             (C14888 * C1891 - C14891 * C1886 + C14889 * C9596 -
              C14892 * C9593 + C48609 * C10478 - C14893 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C381 +
           ((C17442 * C383 - C17437 * C389 + C17443 * C928 - C17438 * C933 +
             C17444 * C2810 - C17439 * C2814 + C17445 * C3666 - C17440 * C3669 +
             C17446 * C17615 - C17441 * C17617) *
                C8916 +
            (C17442 * C390 - C17437 * C401 + C17443 * C934 - C17438 * C943 +
             C17444 * C2815 - C17439 * C2822 + C17445 * C3670 - C17440 * C3675 +
             C17446 * C17618 - C17441 * C17621) *
                C48214) *
               C48318 * C48603) *
              C505 +
          (((C17442 * C259 - C17437 * C265 + C17443 * C677 - C17438 * C682 +
             C17444 * C2304 - C17439 * C2310 + C17445 * C3252 - C17440 * C3255 +
             C17446 * C10905 - C17441 * C10907) *
                C8916 +
            (C17442 * C266 - C17437 * C277 + C17443 * C683 - C17438 * C692 +
             C17444 * C2311 - C17439 * C2322 + C17445 * C3256 - C17440 * C3261 +
             C17446 * C10908 - C17441 * C10911) *
                C48214) *
               C48318 * C381 +
           ((C17437 * C682 - C17442 * C677 + C17438 * C2310 - C17443 * C2304 +
             C17439 * C3255 - C17444 * C3252 + C17440 * C10907 -
             C17445 * C10905 + C17441 * C17850 - C17446 * C17849) *
                C8916 +
            (C17437 * C692 - C17442 * C683 + C17438 * C2322 - C17443 * C2311 +
             C17439 * C3261 - C17444 * C3256 + C17440 * C10911 -
             C17445 * C10908 + C17441 * C17852 - C17446 * C17851) *
                C48214) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C779 +
               ((C113 * C383 - C48329 * C389) * C114 +
                (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48318 * C48603) *
                  C48283 * C507 +
              (((C149 - C148) * C114 + (C151 - C150) * C102 +
                (C153 - C152) * C115 + (C155 - C154) * C103 +
                (C157 - C156) * C116 + (C159 - C158) * C104 +
                (C161 - C160) * C117 + (C163 - C162) * C105 +
                (C164 - C165) * C118 + (C166 - C167) * C106) *
                   C48318 * C779 +
               ((C409 - C408) * C114 + (C411 - C410) * C102 +
                (C413 - C412) * C115 + (C415 - C414) * C103 +
                (C417 - C416) * C116 + (C419 - C418) * C104 +
                (C421 - C420) * C117 + (C423 - C422) * C105 +
                (C48329 * C399 - C113 * C388) * C118 +
                (C48329 * C406 - C113 * C400) * C106) *
                   C48318 * C48603) *
                  C48283 * C48599) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                C1736 * C48606) *
                   C779 +
               (((C113 * C383 - C48329 * C389) * C1064 +
                 (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
                 (C410 - C411) * C1059 + (C412 - C413) * C1066 +
                 (C414 - C415) * C48593) *
                    C48641 +
                ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
                 (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
                 (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                    C48629 +
                ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
                 (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
                 (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                    C48606) *
                   C48603) *
                  C48283 * C507 +
              ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
                 (C153 - C152) * C1065 + (C155 - C154) * C1059 +
                 (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                    C48641 +
                (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
                 (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                    C48629 +
                (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
                 (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                    C48606) *
                   C779 +
               (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
                 (C413 - C412) * C1065 + (C415 - C414) * C1059 +
                 (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                    C48641 +
                ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
                 (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
                 (C48329 * C688 - C113 * C680) * C1066 +
                 (C48329 * C695 - C113 * C689) * C48593) *
                    C48629 +
                ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
                 (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
                 (C48329 * C1429 - C113 * C1422) * C1066 +
                 (C48329 * C1434 - C113 * C1430) * C48593) *
                    C48606) *
                   C48603) *
                  C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C779 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C779 +
           ((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C1064 +
            (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C1058 +
            (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C1065 +
            (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C1059 +
            (C48642 * C395 - C2441 * C386 + C48631 * C939 - C2442 * C931 +
             C48609 * C2820 - C2443 * C2813) *
                C1066 +
            (C48642 * C404 - C2441 * C396 + C48631 * C946 - C2442 * C940 +
             C48609 * C2825 - C2443 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C779 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C779 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C8916 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C48214) *
                C7735 +
            ((C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
              C48609 * C3257 - C2443 * C3253) *
                 C8916 +
             (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
              C48609 * C3262 - C2443 * C3258) *
                 C48214) *
                C7736 +
            ((C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C8916 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C779 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C779 +
           ((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C7738 +
            (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48638 +
            (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C7739 +
            (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48625 +
            (C14888 * C395 - C14891 * C386 + C14889 * C939 - C14892 * C931 +
             C48609 * C2820 - C14893 * C2813) *
                C7740 +
            (C14888 * C404 - C14891 * C396 + C14889 * C946 - C14892 * C940 +
             C48609 * C2825 - C14893 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C779 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C8916 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48214) *
                C48641 +
            ((C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
              C48609 * C3257 - C14893 * C3253) *
                 C8916 +
             (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
              C48609 * C3262 - C14893 * C3258) *
                 C48214) *
                C48629 +
            ((C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C8916 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C779 +
           ((C17442 * C383 - C17437 * C389 + C17443 * C928 - C17438 * C933 +
             C17444 * C2810 - C17439 * C2814 + C17445 * C3666 - C17440 * C3669 +
             C17446 * C17615 - C17441 * C17617) *
                C8916 +
            (C17442 * C390 - C17437 * C401 + C17443 * C934 - C17438 * C943 +
             C17444 * C2815 - C17439 * C2822 + C17445 * C3670 - C17440 * C3675 +
             C17446 * C17618 - C17441 * C17621) *
                C48214) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C17442 * C120 - C17437 * C128 + C17443 * C384 - C17438 * C391 +
             C17444 * C929 - C17439 * C935 + C17445 * C2811 - C17440 * C2816 +
             C17446 * C3667 - C17441 * C3671) *
                C8916 +
            (C17442 * C129 - C17437 * C141 + C17443 * C392 - C17438 * C402 +
             C17444 * C936 - C17439 * C944 + C17445 * C2817 - C17440 * C2823 +
             C17446 * C3672 - C17441 * C3676) *
                C48214) *
               C48318 * C779 +
           ((C17437 * C391 - C17442 * C384 + C17438 * C935 - C17443 * C929 +
             C17439 * C2816 - C17444 * C2811 + C17440 * C3671 - C17445 * C3667 +
             C17441 * C17619 - C17446 * C17616) *
                C8916 +
            (C17437 * C402 - C17442 * C392 + C17438 * C944 - C17443 * C936 +
             C17439 * C2823 - C17444 * C2817 + C17440 * C3676 - C17445 * C3672 +
             C17441 * C17622 - C17446 * C17620) *
                C48214) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C114 +
                (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
                (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
                C171 * C105 + C172 * C118 + C173 * C106) *
                   C48318 * C779 +
               ((C113 * C383 - C48329 * C389) * C114 +
                (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
                (C410 - C411) * C103 + (C412 - C413) * C116 +
                (C414 - C415) * C104 + (C416 - C417) * C117 +
                (C418 - C419) * C105 + (C420 - C421) * C118 +
                (C422 - C423) * C106) *
                   C48318 * C48603) *
                  C255 +
              (((C113 * C259 - C48329 * C265) * C114 +
                (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
                (C286 - C287) * C103 + (C288 - C289) * C116 +
                (C290 - C291) * C104 + (C292 - C293) * C117 +
                (C294 - C295) * C105 + (C296 - C297) * C118 +
                (C298 - C299) * C106) *
                   C48318 * C779 +
               ((C48329 * C682 - C113 * C677) * C114 +
                (C48329 * C692 - C113 * C683) * C102 +
                (C48329 * C684 - C113 * C678) * C115 +
                (C48329 * C693 - C113 * C685) * C103 +
                (C48329 * C686 - C113 * C679) * C116 +
                (C48329 * C694 - C113 * C687) * C104 +
                (C48329 * C688 - C113 * C680) * C117 +
                (C48329 * C695 - C113 * C689) * C105 +
                (C48329 * C690 - C113 * C681) * C118 +
                (C48329 * C696 - C113 * C691) * C106) *
                   C48318 * C48603) *
                  C48601) *
             C48249 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48329 * C126 - C113 * C119) * C1064 +
                 (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                 (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                    C48641 +
                ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                 C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                 C1069 * C48593) *
                    C48629 +
                C1736 * C48606) *
                   C779 +
               (((C113 * C383 - C48329 * C389) * C1064 +
                 (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
                 (C410 - C411) * C1059 + (C412 - C413) * C1066 +
                 (C414 - C415) * C48593) *
                    C48641 +
                ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
                 (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
                 (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                    C48629 +
                ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
                 (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
                 (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                    C48606) *
                   C48603) *
                  C255 +
              ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 +
                 C1258 * C1065 + C1259 * C1059 + C1260 * C1066 +
                 C1261 * C48593) *
                    C48641 +
                ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 +
                 C1262 * C1065 + C1263 * C1059 + C1264 * C1066 +
                 C1265 * C48593) *
                    C48629 +
                ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
                 (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
                 (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                    C48606) *
                   C779 +
               (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
                 (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
                 (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                    C48641 +
                ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
                 (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
                 (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                    C48629 +
                ((C48329 * C1885 - C113 * C1882) * C1064 +
                 (C48329 * C1891 - C113 * C1886) * C1058 +
                 (C48329 * C1887 - C113 * C1883) * C1065 +
                 (C48329 * C1892 - C113 * C1888) * C1059 +
                 (C48329 * C1889 - C113 * C1884) * C1066 +
                 (C48329 * C1893 - C113 * C1890) * C48593) *
                    C48606) *
                   C48603) *
                  C48601) *
             C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C779 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C255 +
          (((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C779 +
           ((C48642 * C682 - C2441 * C677 + C48631 * C2310 - C2442 * C2304 +
             C48609 * C3255 - C2443 * C3252) *
                C1064 +
            (C48642 * C692 - C2441 * C683 + C48631 * C2322 - C2442 * C2311 +
             C48609 * C3261 - C2443 * C3256) *
                C1058 +
            (C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
             C48609 * C3257 - C2443 * C3253) *
                C1065 +
            (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
             C48609 * C3262 - C2443 * C3258) *
                C1059 +
            (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
             C48609 * C3259 - C2443 * C3254) *
                C1066 +
            (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
             C48609 * C3263 - C2443 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C779 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C255 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
             (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
                C48606) *
               C779 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C8916 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C48214) *
                C7735 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C8916 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C48214) *
                C7736 +
            ((C48642 * C1885 - C2441 * C1882 + C48631 * C9592 - C2442 * C9590 +
              C48609 * C10476 - C2443 * C10475) *
                 C8916 +
             (C48642 * C1891 - C2441 * C1886 + C48631 * C9596 - C2442 * C9593 +
              C48609 * C10478 - C2443 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C779 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C255 +
          (((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C779 +
           ((C14888 * C682 - C14891 * C677 + C14889 * C2310 - C14892 * C2304 +
             C48609 * C3255 - C14893 * C3252) *
                C7738 +
            (C14888 * C692 - C14891 * C683 + C14889 * C2322 - C14892 * C2311 +
             C48609 * C3261 - C14893 * C3256) *
                C48638 +
            (C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
             C48609 * C3257 - C14893 * C3253) *
                C7739 +
            (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
             C48609 * C3262 - C14893 * C3258) *
                C48625 +
            (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
             C48609 * C3259 - C14893 * C3254) *
                C7740 +
            (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
             C48609 * C3263 - C14893 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C255 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
             (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
                C48606) *
               C779 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C8916 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48214) *
                C48641 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C8916 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48214) *
                C48629 +
            ((C14888 * C1885 - C14891 * C1882 + C14889 * C9592 -
              C14892 * C9590 + C48609 * C10476 - C14893 * C10475) *
                 C8916 +
             (C14888 * C1891 - C14891 * C1886 + C14889 * C9596 -
              C14892 * C9593 + C48609 * C10478 - C14893 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
             C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
             C17441 * C3669 - C17446 * C3666) *
                C8916 +
            (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
             C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
             C17441 * C3675 - C17446 * C3670) *
                C48214) *
               C48318 * C779 +
           ((C17442 * C383 - C17437 * C389 + C17443 * C928 - C17438 * C933 +
             C17444 * C2810 - C17439 * C2814 + C17445 * C3666 - C17440 * C3669 +
             C17446 * C17615 - C17441 * C17617) *
                C8916 +
            (C17442 * C390 - C17437 * C401 + C17443 * C934 - C17438 * C943 +
             C17444 * C2815 - C17439 * C2822 + C17445 * C3670 - C17440 * C3675 +
             C17446 * C17618 - C17441 * C17621) *
                C48214) *
               C48318 * C48603) *
              C255 +
          (((C17442 * C259 - C17437 * C265 + C17443 * C677 - C17438 * C682 +
             C17444 * C2304 - C17439 * C2310 + C17445 * C3252 - C17440 * C3255 +
             C17446 * C10905 - C17441 * C10907) *
                C8916 +
            (C17442 * C266 - C17437 * C277 + C17443 * C683 - C17438 * C692 +
             C17444 * C2311 - C17439 * C2322 + C17445 * C3256 - C17440 * C3261 +
             C17446 * C10908 - C17441 * C10911) *
                C48214) *
               C48318 * C779 +
           ((C17437 * C682 - C17442 * C677 + C17438 * C2310 - C17443 * C2304 +
             C17439 * C3255 - C17444 * C3252 + C17440 * C10907 -
             C17445 * C10905 + C17441 * C17850 - C17446 * C17849) *
                C8916 +
            (C17437 * C692 - C17442 * C683 + C17438 * C2322 - C17443 * C2311 +
             C17439 * C3261 - C17444 * C3256 + C17440 * C10911 -
             C17445 * C10908 + C17441 * C17852 - C17446 * C17851) *
                C48214) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C48329 * C126 - C113 * C119) * C114 +
               (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
               (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
               C171 * C105 + C172 * C118 + C173 * C106) *
                  C48318 * C925 +
              ((C113 * C383 - C48329 * C389) * C114 +
               (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
               (C410 - C411) * C103 + (C412 - C413) * C116 +
               (C414 - C415) * C104 + (C416 - C417) * C117 +
               (C418 - C419) * C105 + (C420 - C421) * C118 +
               (C422 - C423) * C106) *
                  C48318 * C926 +
              ((C48329 * C933 - C113 * C928) * C114 +
               (C48329 * C943 - C113 * C934) * C102 +
               (C48329 * C935 - C113 * C929) * C115 +
               (C48329 * C944 - C113 * C936) * C103 +
               (C48329 * C937 - C113 * C930) * C116 +
               (C48329 * C945 - C113 * C938) * C104 +
               (C48329 * C939 - C113 * C931) * C117 +
               (C48329 * C946 - C113 * C940) * C105 +
               (C48329 * C941 - C113 * C932) * C118 +
               (C48329 * C947 - C113 * C942) * C106) *
                  C48318 * C927) *
             C48283 * C48249 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48329 * C126 - C113 * C119) * C1064 +
                (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
                (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                   C48641 +
               ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 +
                C1250 * C1065 + C1251 * C1059 + C1068 * C1066 +
                C1069 * C48593) *
                   C48629 +
               C1736 * C48606) *
                  C925 +
              (((C113 * C383 - C48329 * C389) * C1064 +
                (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
                (C410 - C411) * C1059 + (C412 - C413) * C1066 +
                (C414 - C415) * C48593) *
                   C48641 +
               ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
                (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
                (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                   C48629 +
               ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
                (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
                (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                   C48606) *
                  C926 +
              (((C48329 * C933 - C113 * C928) * C1064 +
                (C48329 * C943 - C113 * C934) * C1058 +
                (C48329 * C935 - C113 * C929) * C1065 +
                (C48329 * C944 - C113 * C936) * C1059 +
                (C48329 * C937 - C113 * C930) * C1066 +
                (C48329 * C945 - C113 * C938) * C48593) *
                   C48641 +
               ((C48329 * C2310 - C113 * C2304) * C1064 +
                (C48329 * C2322 - C113 * C2311) * C1058 +
                (C48329 * C2312 - C113 * C2305) * C1065 +
                (C48329 * C2323 - C113 * C2313) * C1059 +
                (C48329 * C2314 - C113 * C2306) * C1066 +
                (C48329 * C2324 - C113 * C2315) * C48593) *
                   C48629 +
               ((C48329 * C2316 - C113 * C2307) * C1064 +
                (C48329 * C2325 - C113 * C2317) * C1058 +
                (C48329 * C2318 - C113 * C2308) * C1065 +
                (C48329 * C2326 - C113 * C2319) * C1059 +
                (C48329 * C2320 - C113 * C2309) * C1066 +
                (C48329 * C2327 - C113 * C2321) * C48593) *
                   C48606) *
                  C927) *
             C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C925 +
          ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
            C2443 * C2810 - C48609 * C2814) *
               C1064 +
           (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
            C2443 * C2815 - C48609 * C2822) *
               C1058 +
           (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
           (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
           (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
           (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
              C48318 * C926 +
          ((C48642 * C933 - C2441 * C928 + C48631 * C2814 - C2442 * C2810 +
            C48609 * C3669 - C2443 * C3666) *
               C1064 +
           (C48642 * C943 - C2441 * C934 + C48631 * C2822 - C2442 * C2815 +
            C48609 * C3675 - C2443 * C3670) *
               C1058 +
           (C48642 * C935 - C2441 * C929 + C48631 * C2816 - C2442 * C2811 +
            C48609 * C3671 - C2443 * C3667) *
               C1065 +
           (C48642 * C944 - C2441 * C936 + C48631 * C2823 - C2442 * C2817 +
            C48609 * C3676 - C2443 * C3672) *
               C1059 +
           (C48642 * C937 - C2441 * C930 + C48631 * C2818 - C2442 * C2812 +
            C48609 * C3673 - C2443 * C3668) *
               C1066 +
           (C48642 * C945 - C2441 * C938 + C48631 * C2824 - C2442 * C2819 +
            C48609 * C3677 - C2443 * C3674) *
               C48593) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C7738 +
            (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
            (C410 - C411) * C48625 + (C412 - C413) * C7740 +
            (C414 - C415) * C48593) *
               C7735 +
           ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
            (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
            (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
               C7736 +
           ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
            (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
            (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C7738 +
            (C48329 * C943 - C113 * C934) * C48638 +
            (C48329 * C935 - C113 * C929) * C7739 +
            (C48329 * C944 - C113 * C936) * C48625 +
            (C48329 * C937 - C113 * C930) * C7740 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C7735 +
           ((C48329 * C2310 - C113 * C2304) * C7738 +
            (C48329 * C2322 - C113 * C2311) * C48638 +
            (C48329 * C2312 - C113 * C2305) * C7739 +
            (C48329 * C2323 - C113 * C2313) * C48625 +
            (C48329 * C2314 - C113 * C2306) * C7740 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C7736 +
           ((C48329 * C2316 - C113 * C2307) * C7738 +
            (C48329 * C2325 - C113 * C2317) * C48638 +
            (C48329 * C2318 - C113 * C2308) * C7739 +
            (C48329 * C2326 - C113 * C2319) * C48625 +
            (C48329 * C2320 - C113 * C2309) * C7740 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C8916 +
            (C113 * C390 - C48329 * C401) * C48214) *
               C8911 +
           ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
           ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
           ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
           ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C8916 +
            (C48329 * C943 - C113 * C934) * C48214) *
               C8911 +
           ((C48329 * C2310 - C113 * C2304) * C8916 +
            (C48329 * C2322 - C113 * C2311) * C48214) *
               C8912 +
           ((C48329 * C2316 - C113 * C2307) * C8916 +
            (C48329 * C2325 - C113 * C2317) * C48214) *
               C8913 +
           ((C48329 * C9592 - C113 * C9590) * C8916 +
            (C48329 * C9596 - C113 * C9593) * C48214) *
               C8914 +
           ((C48329 * C9594 - C113 * C9591) * C8916 +
            (C48329 * C9597 - C113 * C9595) * C48214) *
               C8915) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
               C7736 +
           C10329 * C48606) *
              C925 +
          (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C8916 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C48214) *
               C7735 +
           ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
            (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
               C7736 +
           ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
            (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
               C48606) *
              C926 +
          (((C48642 * C933 - C2441 * C928 + C48631 * C2814 - C2442 * C2810 +
             C48609 * C3669 - C2443 * C3666) *
                C8916 +
            (C48642 * C943 - C2441 * C934 + C48631 * C2822 - C2442 * C2815 +
             C48609 * C3675 - C2443 * C3670) *
                C48214) *
               C7735 +
           ((C48642 * C2310 - C2441 * C2304 + C48631 * C3255 - C2442 * C3252 +
             C48609 * C10907 - C2443 * C10905) *
                C8916 +
            (C48642 * C2322 - C2441 * C2311 + C48631 * C3261 - C2442 * C3256 +
             C48609 * C10911 - C2443 * C10908) *
                C48214) *
               C7736 +
           ((C48642 * C2316 - C2441 * C2307 + C48631 * C10042 - C2442 * C10040 +
             C48609 * C10909 - C2443 * C10906) *
                C8916 +
            (C48642 * C2325 - C2441 * C2317 + C48631 * C10046 - C2442 * C10043 +
             C48609 * C10912 - C2443 * C10910) *
                C48214) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C925 +
          ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
            C14893 * C2810 - C48609 * C2814) *
               C7738 +
           (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
            C14893 * C2815 - C48609 * C2822) *
               C48638 +
           (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
           (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
           (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
           (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
              C48318 * C926 +
          ((C14888 * C933 - C14891 * C928 + C14889 * C2814 - C14892 * C2810 +
            C48609 * C3669 - C14893 * C3666) *
               C7738 +
           (C14888 * C943 - C14891 * C934 + C14889 * C2822 - C14892 * C2815 +
            C48609 * C3675 - C14893 * C3670) *
               C48638 +
           (C14888 * C935 - C14891 * C929 + C14889 * C2816 - C14892 * C2811 +
            C48609 * C3671 - C14893 * C3667) *
               C7739 +
           (C14888 * C944 - C14891 * C936 + C14889 * C2823 - C14892 * C2817 +
            C48609 * C3676 - C14893 * C3672) *
               C48625 +
           (C14888 * C937 - C14891 * C930 + C14889 * C2818 - C14892 * C2812 +
            C48609 * C3673 - C14893 * C3668) *
               C7740 +
           (C14888 * C945 - C14891 * C938 + C14889 * C2824 - C14892 * C2819 +
            C48609 * C3677 - C14893 * C3674) *
               C48593) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
               C48629 +
           C16803 * C48606) *
              C925 +
          (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C8916 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48214) *
               C48641 +
           ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
               C48629 +
           ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
               C48606) *
              C926 +
          (((C14888 * C933 - C14891 * C928 + C14889 * C2814 - C14892 * C2810 +
             C48609 * C3669 - C14893 * C3666) *
                C8916 +
            (C14888 * C943 - C14891 * C934 + C14889 * C2822 - C14892 * C2815 +
             C48609 * C3675 - C14893 * C3670) *
                C48214) *
               C48641 +
           ((C14888 * C2310 - C14891 * C2304 + C14889 * C3255 - C14892 * C3252 +
             C48609 * C10907 - C14893 * C10905) *
                C8916 +
            (C14888 * C2322 - C14891 * C2311 + C14889 * C3261 - C14892 * C3256 +
             C48609 * C10911 - C14893 * C10908) *
                C48214) *
               C48629 +
           ((C14888 * C2316 - C14891 * C2307 + C14889 * C10042 -
             C14892 * C10040 + C48609 * C10909 - C14893 * C10906) *
                C8916 +
            (C14888 * C2325 - C14891 * C2317 + C14889 * C10046 -
             C14892 * C10043 + C48609 * C10912 - C14893 * C10910) *
                C48214) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C126 - C17442 * C119 + C17438 * C389 - C17443 * C383 +
            C17439 * C933 - C17444 * C928 + C17440 * C2814 - C17445 * C2810 +
            C17441 * C3669 - C17446 * C3666) *
               C8916 +
           (C17437 * C140 - C17442 * C127 + C17438 * C401 - C17443 * C390 +
            C17439 * C943 - C17444 * C934 + C17440 * C2822 - C17445 * C2815 +
            C17441 * C3675 - C17446 * C3670) *
               C48214) *
              C48318 * C925 +
          ((C17442 * C383 - C17437 * C389 + C17443 * C928 - C17438 * C933 +
            C17444 * C2810 - C17439 * C2814 + C17445 * C3666 - C17440 * C3669 +
            C17446 * C17615 - C17441 * C17617) *
               C8916 +
           (C17442 * C390 - C17437 * C401 + C17443 * C934 - C17438 * C943 +
            C17444 * C2815 - C17439 * C2822 + C17445 * C3670 - C17440 * C3675 +
            C17446 * C17618 - C17441 * C17621) *
               C48214) *
              C48318 * C926 +
          ((C17437 * C933 - C17442 * C928 + C17438 * C2814 - C17443 * C2810 +
            C17439 * C3669 - C17444 * C3666 + C17440 * C17617 -
            C17445 * C17615 + C17441 * C18080 - C17446 * C18079) *
               C8916 +
           (C17437 * C943 - C17442 * C934 + C17438 * C2822 - C17443 * C2815 +
            C17439 * C3675 - C17444 * C3670 + C17440 * C17621 -
            C17445 * C17618 + C17441 * C18082 - C17446 * C18081) *
               C48214) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           ((C6880 - C6879 + C6882 - C6881) * C47225 +
            (C6884 - C6883 + C6886 - C6885) * C48551 +
            (C6308 - C6307 + C6310 - C6309) * C47206 +
            (C6312 - C6311 + C6314 - C6313) * C48224) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C47225 +
            (C4878 - C4877 + C4880 - C4879) * C48551 +
            (C4882 - C4881 + C4884 - C4883) * C47206 +
            (C4886 - C4885 + C4888 - C4887) * C48224) *
               C7735 +
           (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 + C6328 * C48224) *
               C7736 +
           ((C6307 - C6308 + C6309 - C6310) * C47225 +
            (C6311 - C6312 + C6313 - C6314) * C48551 +
            (C6315 - C6316 + C6317 - C6318) * C47206 +
            (C6319 - C6320 + C6321 - C6322) * C48224) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C4913 * C47225 + C4914 * C48551 + C4915 * C47206 + C4916 * C48224) *
               C7735 +
           (C6091 * C47225 + C6092 * C48551 +
            (C5064 - C5063 + C5066 - C5065) * C47206 +
            (C5068 - C5067 + C5070 - C5069) * C48224) *
               C7736 +
           ((C6316 - C6315 + C6318 - C6317) * C47225 +
            (C6320 - C6319 + C6322 - C6321) * C48551 +
            (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                C47206 +
            (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                C48224) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C48300 * C48283 * C110 +
          ((C4874 - C4873 + C4876 - C4875) * C3782 +
           (C4878 - C4877 + C4880 - C4879) * C3776 +
           (C4882 - C4881 + C4884 - C4883) * C3783 +
           (C4886 - C4885 + C4888 - C4887) * C3777 +
           (C4890 - C4889 + C4892 - C4891) * C3784 +
           (C4894 - C4893 + C4896 - C4895) * C3778 +
           (C4897 - C4898 + C4899 - C4900) * C3785 +
           (C4901 - C4902 + C4903 - C4904) * C48610) *
              C48318 * C48300 * C48283 * C111 +
          (C4913 * C3782 + C4914 * C3776 + C4915 * C3783 + C4916 * C3777 +
           (C4898 - C4897 + C4900 - C4899) * C3784 +
           (C4902 - C4901 + C4904 - C4903) * C3778 +
           (C48574 * C136 - C4870 * C124 + C48416 * C399 - C4871 * C388) *
               C3785 +
           (C48574 * C145 - C4870 * C137 + C48416 * C406 - C4871 * C400) *
               C48610) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
            C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
               C47225 +
           (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
            C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
               C48551 +
           (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
            C19831) *
               C47206 +
           (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
            C19839) *
               C48224) *
              C48318 * C48300 * C48283 * C110 +
          ((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
            C19830) *
               C47225 +
           (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
            C19838) *
               C48551 +
           (C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
            C19847) *
               C47206 +
           (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
            C19855) *
               C48224) *
              C48318 * C48300 * C48283 * C111 +
          ((C19841 - C19840 + C19843 - C19842 + C19845 - C19844 + C19847 -
            C19846) *
               C47225 +
           (C19849 - C19848 + C19851 - C19850 + C19853 - C19852 + C19855 -
            C19854) *
               C48551 +
           (C19815 * C132 - C19819 * C122 + C19816 * C395 - C19820 * C386 +
            C19817 * C939 - C19821 * C931 + C48622 * C2820 - C19822 * C2813) *
               C47206 +
           (C19815 * C143 - C19819 * C133 + C19816 * C404 - C19820 * C396 +
            C19817 * C946 - C19821 * C940 + C48622 * C2825 - C19822 * C2821) *
               C48224) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C4870 * C1229 - C48574 * C1233 + C4871 * C1882 - C48416 * C1885) *
                 C47225 +
             (C4870 * C1234 - C48574 * C1241 + C4871 * C1886 - C48416 * C1891) *
                 C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C48300 * C255 +
           ((C6323 * C47225 + C6324 * C48551 + C6091 * C47206 +
             C6092 * C48224) *
                C7735 +
            (C12374 * C47225 + C12375 * C48551 +
             (C6316 - C6315 + C6318 - C6317) * C47206 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C7736 +
            ((C12367 - C12366 + C12369 - C12368) * C47225 +
             (C12371 - C12370 + C12373 - C12372) * C48551 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C47206 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C48300 * C255 +
           ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C48300 * C255 +
           ((C5048 - C5047 + C5050 - C5049) * C3782 +
            (C5052 - C5051 + C5054 - C5053) * C3776 +
            (C5056 - C5055 + C5058 - C5057) * C3783 +
            (C5060 - C5059 + C5062 - C5061) * C3777 +
            (C5064 - C5063 + C5066 - C5065) * C3784 +
            (C5068 - C5067 + C5070 - C5069) * C3778 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C3785 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C48300 * C255 +
           ((C19819 * C259 - C19815 * C265 + C19820 * C677 - C19816 * C682 +
             C19821 * C2304 - C19817 * C2310 + C19822 * C3252 -
             C48622 * C3255) *
                C47225 +
            (C19819 * C266 - C19815 * C277 + C19820 * C683 - C19816 * C692 +
             C19821 * C2311 - C19817 * C2322 + C19822 * C3256 -
             C48622 * C3261) *
                C48551 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C47206 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48224) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C47225 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48551 +
            (C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
             C19847) *
                C47206 +
            (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
             C19855) *
                C48224) *
               C48318 * C48300 * C255 +
           ((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
             C19992) *
                C47225 +
            (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
             C20000) *
                C48551 +
            (C19815 * C269 - C19819 * C261 + C19816 * C686 - C19820 * C679 +
             C19817 * C2314 - C19821 * C2306 + C48622 * C3259 -
             C19822 * C3254) *
                C47206 +
            (C19815 * C279 - C19819 * C270 + C19816 * C694 - C19820 * C687 +
             C19817 * C2324 - C19821 * C2315 + C48622 * C3263 -
             C19822 * C3260) *
                C48224) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C4870 * C1419 - C48574 * C1423 + C4871 * C2307 - C48416 * C2316) *
                 C47225 +
             (C4870 * C1424 - C48574 * C1431 + C4871 * C2317 - C48416 * C2325) *
                 C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C47225 +
             (C5206 - C5205 + C5208 - C5207) * C48551 +
             (C5210 - C5209 + C5212 - C5211) * C47206 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C7735 +
            ((C6524 - C6523 + C6526 - C6525) * C47225 +
             (C6528 - C6527 + C6530 - C6529) * C48551 +
             (C6532 - C6531 + C6534 - C6533) * C47206 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C7736 +
            ((C12573 - C12572 + C12575 - C12574) * C47225 +
             (C12577 - C12576 + C12579 - C12578) * C48551 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47206 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C381 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C381 +
           ((C5202 - C5201 + C5204 - C5203) * C3782 +
            (C5206 - C5205 + C5208 - C5207) * C3776 +
            (C5210 - C5209 + C5212 - C5211) * C3783 +
            (C5214 - C5213 + C5216 - C5215) * C3777 +
            (C5218 - C5217 + C5220 - C5219) * C3784 +
            (C5222 - C5221 + C5224 - C5223) * C3778 +
            (C48574 * C397 - C4870 * C387 + C48416 * C941 - C4871 * C932) *
                C3785 +
            (C48574 * C405 - C4870 * C398 + C48416 * C947 - C4871 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C381 +
           ((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
             C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
             C48622 * C3669) *
                C47225 +
            (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
             C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
             C48622 * C3675) *
                C48551 +
            (C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
             C20139) *
                C47206 +
            (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
             C20147) *
                C48224) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C47225 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48551 +
            (C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
             C19847) *
                C47206 +
            (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
             C19855) *
                C48224) *
               C48318 * C381 +
           ((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
             C20138) *
                C47225 +
            (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
             C20146) *
                C48551 +
            (C19815 * C393 - C19819 * C385 + C19816 * C937 - C19820 * C930 +
             C19817 * C2818 - C19821 * C2812 + C48622 * C3673 -
             C19822 * C3668) *
                C47206 +
            (C19815 * C403 - C19819 * C394 + C19816 * C945 - C19820 * C938 +
             C19817 * C2824 - C19821 * C2819 + C48622 * C3677 -
             C19822 * C3674) *
                C48224) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C4870 * C1229 - C48574 * C1233 + C4871 * C1882 - C48416 * C1885) *
                 C47225 +
             (C4870 * C1234 - C48574 * C1241 + C4871 * C1886 - C48416 * C1891) *
                 C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C48300 * C505 +
           ((C6323 * C47225 + C6324 * C48551 + C6091 * C47206 +
             C6092 * C48224) *
                C7735 +
            (C12374 * C47225 + C12375 * C48551 +
             (C6316 - C6315 + C6318 - C6317) * C47206 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C7736 +
            ((C12367 - C12366 + C12369 - C12368) * C47225 +
             (C12371 - C12370 + C12373 - C12372) * C48551 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C47206 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C48300 * C505 +
           ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C48300 * C505 +
           ((C5048 - C5047 + C5050 - C5049) * C3782 +
            (C5052 - C5051 + C5054 - C5053) * C3776 +
            (C5056 - C5055 + C5058 - C5057) * C3783 +
            (C5060 - C5059 + C5062 - C5061) * C3777 +
            (C5064 - C5063 + C5066 - C5065) * C3784 +
            (C5068 - C5067 + C5070 - C5069) * C3778 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C3785 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C48300 * C505 +
           ((C19819 * C259 - C19815 * C265 + C19820 * C677 - C19816 * C682 +
             C19821 * C2304 - C19817 * C2310 + C19822 * C3252 -
             C48622 * C3255) *
                C47225 +
            (C19819 * C266 - C19815 * C277 + C19820 * C683 - C19816 * C692 +
             C19821 * C2311 - C19817 * C2322 + C19822 * C3256 -
             C48622 * C3261) *
                C48551 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C47206 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48224) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C47225 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48551 +
            (C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
             C19847) *
                C47206 +
            (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
             C19855) *
                C48224) *
               C48318 * C48300 * C505 +
           ((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
             C19992) *
                C47225 +
            (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
             C20000) *
                C48551 +
            (C19815 * C269 - C19819 * C261 + C19816 * C686 - C19820 * C679 +
             C19817 * C2314 - C19821 * C2306 + C48622 * C3259 -
             C19822 * C3254) *
                C47206 +
            (C19815 * C279 - C19819 * C270 + C19816 * C694 - C19820 * C687 +
             C19817 * C2324 - C19821 * C2315 + C48622 * C3263 -
             C19822 * C3260) *
                C48224) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           C12940 * C48606) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C47225 +
            (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
            C6326 * C48224) *
               C7735 +
           ((C6879 - C6880 + C6881 - C6882) * C47225 +
            (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
            C12377 * C48224) *
               C7736 +
           ((C12926 - C12927 + C12928 - C12929) * C47225 +
            (C12930 - C12931 + C12932 - C12933) * C48551 +
            (C12366 - C12367 + C12368 - C12369) * C47206 +
            (C12370 - C12371 + C12372 - C12373) * C48224) *
               C48606) *
              C48300 * C572 +
          (C12940 * C7735 +
           ((C12927 - C12926 + C12929 - C12928) * C47225 +
            (C12931 - C12930 + C12933 - C12932) * C48551 +
            (C12367 - C12366 + C12369 - C12368) * C47206 +
            (C12371 - C12370 + C12373 - C12372) * C48224) *
               C7736 +
           ((C48574 * C1710 - C4870 * C1707 + C48416 * C9099 - C4871 * C9097) *
                C47225 +
            (C48574 * C1716 - C4870 * C1711 + C48416 * C9103 - C4871 * C9100) *
                C48551 +
            (C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                C47206 +
            (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                C48224) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C48300 * C571 +
          ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
               C3782 +
           (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
               C3776 +
           (C5047 - C5048 + C5049 - C5050) * C3783 +
           (C5051 - C5052 + C5053 - C5054) * C3777 +
           (C5055 - C5056 + C5057 - C5058) * C3784 +
           (C5059 - C5060 + C5061 - C5062) * C3778 +
           (C5063 - C5064 + C5065 - C5066) * C3785 +
           (C5067 - C5068 + C5069 - C5070) * C48610) *
              C48318 * C48300 * C572 +
          ((C48574 * C580 - C4870 * C575 + C48416 * C1423 - C4871 * C1419) *
               C3782 +
           (C48574 * C590 - C4870 * C581 + C48416 * C1431 - C4871 * C1424) *
               C3776 +
           (C48574 * C582 - C4870 * C576 + C48416 * C1425 - C4871 * C1420) *
               C3783 +
           (C48574 * C591 - C4870 * C583 + C48416 * C1432 - C4871 * C1426) *
               C3777 +
           (C48574 * C584 - C4870 * C577 + C48416 * C1427 - C4871 * C1421) *
               C3784 +
           (C48574 * C592 - C4870 * C585 + C48416 * C1433 - C4871 * C1428) *
               C3778 +
           (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
               C3785 +
           (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
               C48610) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
            C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
               C47225 +
           (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
            C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
               C48551 +
           (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
            C19831) *
               C47206 +
           (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
            C19839) *
               C48224) *
              C48318 * C48300 * C571 +
          ((C19819 * C259 - C19815 * C265 + C19820 * C677 - C19816 * C682 +
            C19821 * C2304 - C19817 * C2310 + C19822 * C3252 - C48622 * C3255) *
               C47225 +
           (C19819 * C266 - C19815 * C277 + C19820 * C683 - C19816 * C692 +
            C19821 * C2311 - C19817 * C2322 + C19822 * C3256 - C48622 * C3261) *
               C48551 +
           (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
            C19993) *
               C47206 +
           (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
            C20001) *
               C48224) *
              C48318 * C48300 * C572 +
          ((C19815 * C580 - C19819 * C575 + C19816 * C1423 - C19820 * C1419 +
            C19817 * C2316 - C19821 * C2307 + C48622 * C10042 -
            C19822 * C10040) *
               C47225 +
           (C19815 * C590 - C19819 * C581 + C19816 * C1431 - C19820 * C1424 +
            C19817 * C2325 - C19821 * C2317 + C48622 * C10046 -
            C19822 * C10043) *
               C48551 +
           (C19815 * C582 - C19819 * C576 + C19816 * C1425 - C19820 * C1420 +
            C19817 * C2318 - C19821 * C2308 + C48622 * C10044 -
            C19822 * C10041) *
               C47206 +
           (C19815 * C591 - C19819 * C583 + C19816 * C1432 - C19820 * C1426 +
            C19817 * C2326 - C19821 * C2319 + C48622 * C10047 -
            C19822 * C10045) *
               C48224) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C12926 - C12927 + C12928 - C12929) * C47225 +
             (C12930 - C12931 + C12932 - C12933) * C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C47225 +
             (C7086 - C7085 + C7088 - C7087) * C48551 +
             (C6524 - C6523 + C6526 - C6525) * C47206 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C7735 +
            ((C13136 - C13135 + C13138 - C13137) * C47225 +
             (C13140 - C13139 + C13142 - C13141) * C48551 +
             (C12573 - C12572 + C12575 - C12574) * C47206 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C7736 +
            ((C48574 * C1885 - C4870 * C1882 + C48416 * C9592 - C4871 * C9590) *
                 C47225 +
             (C48574 * C1891 - C4870 * C1886 + C48416 * C9596 - C4871 * C9593) *
                 C48551 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C47206 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C381 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C505 +
          (((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C381 +
           ((C48574 * C682 - C4870 * C677 + C48416 * C2310 - C4871 * C2304) *
                C3782 +
            (C48574 * C692 - C4870 * C683 + C48416 * C2322 - C4871 * C2311) *
                C3776 +
            (C48574 * C684 - C4870 * C678 + C48416 * C2312 - C4871 * C2305) *
                C3783 +
            (C48574 * C693 - C4870 * C685 + C48416 * C2323 - C4871 * C2313) *
                C3777 +
            (C48574 * C686 - C4870 * C679 + C48416 * C2314 - C4871 * C2306) *
                C3784 +
            (C48574 * C694 - C4870 * C687 + C48416 * C2324 - C4871 * C2315) *
                C3778 +
            (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                C3785 +
            (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C381 +
           ((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
             C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
             C48622 * C3669) *
                C47225 +
            (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
             C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
             C48622 * C3675) *
                C48551 +
            (C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
             C20139) *
                C47206 +
            (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
             C20147) *
                C48224) *
               C48318 * C48603) *
              C505 +
          (((C19819 * C259 - C19815 * C265 + C19820 * C677 - C19816 * C682 +
             C19821 * C2304 - C19817 * C2310 + C19822 * C3252 -
             C48622 * C3255) *
                C47225 +
            (C19819 * C266 - C19815 * C277 + C19820 * C683 - C19816 * C692 +
             C19821 * C2311 - C19817 * C2322 + C19822 * C3256 -
             C48622 * C3261) *
                C48551 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C47206 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48224) *
               C48318 * C381 +
           ((C19815 * C682 - C19819 * C677 + C19816 * C2310 - C19820 * C2304 +
             C19817 * C3255 - C19821 * C3252 + C48622 * C10907 -
             C19822 * C10905) *
                C47225 +
            (C19815 * C692 - C19819 * C683 + C19816 * C2322 - C19820 * C2311 +
             C19817 * C3261 - C19821 * C3256 + C48622 * C10911 -
             C19822 * C10908) *
                C48551 +
            (C19815 * C684 - C19819 * C678 + C19816 * C2312 - C19820 * C2305 +
             C19817 * C3257 - C19821 * C3253 + C48622 * C17530 -
             C19822 * C17529) *
                C47206 +
            (C19815 * C693 - C19819 * C685 + C19816 * C2323 - C19820 * C2313 +
             C19817 * C3262 - C19821 * C3258 + C48622 * C17532 -
             C19822 * C17531) *
                C48224) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C47225 +
             (C5206 - C5205 + C5208 - C5207) * C48551 +
             (C5210 - C5209 + C5212 - C5211) * C47206 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C7735 +
            ((C6524 - C6523 + C6526 - C6525) * C47225 +
             (C6528 - C6527 + C6530 - C6529) * C48551 +
             (C6532 - C6531 + C6534 - C6533) * C47206 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C7736 +
            ((C12573 - C12572 + C12575 - C12574) * C47225 +
             (C12577 - C12576 + C12579 - C12578) * C48551 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47206 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C779 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C779 +
           ((C5202 - C5201 + C5204 - C5203) * C3782 +
            (C5206 - C5205 + C5208 - C5207) * C3776 +
            (C5210 - C5209 + C5212 - C5211) * C3783 +
            (C5214 - C5213 + C5216 - C5215) * C3777 +
            (C5218 - C5217 + C5220 - C5219) * C3784 +
            (C5222 - C5221 + C5224 - C5223) * C3778 +
            (C48574 * C397 - C4870 * C387 + C48416 * C941 - C4871 * C932) *
                C3785 +
            (C48574 * C405 - C4870 * C398 + C48416 * C947 - C4871 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C779 +
           ((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
             C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
             C48622 * C3669) *
                C47225 +
            (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
             C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
             C48622 * C3675) *
                C48551 +
            (C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
             C20139) *
                C47206 +
            (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
             C20147) *
                C48224) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C47225 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48551 +
            (C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
             C19847) *
                C47206 +
            (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
             C19855) *
                C48224) *
               C48318 * C779 +
           ((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
             C20138) *
                C47225 +
            (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
             C20146) *
                C48551 +
            (C19815 * C393 - C19819 * C385 + C19816 * C937 - C19820 * C930 +
             C19817 * C2818 - C19821 * C2812 + C48622 * C3673 -
             C19822 * C3668) *
                C47206 +
            (C19815 * C403 - C19819 * C394 + C19816 * C945 - C19820 * C938 +
             C19817 * C2824 - C19821 * C2819 + C48622 * C3677 -
             C19822 * C3674) *
                C48224) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C12926 - C12927 + C12928 - C12929) * C47225 +
             (C12930 - C12931 + C12932 - C12933) * C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C47225 +
             (C7086 - C7085 + C7088 - C7087) * C48551 +
             (C6524 - C6523 + C6526 - C6525) * C47206 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C7735 +
            ((C13136 - C13135 + C13138 - C13137) * C47225 +
             (C13140 - C13139 + C13142 - C13141) * C48551 +
             (C12573 - C12572 + C12575 - C12574) * C47206 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C7736 +
            ((C48574 * C1885 - C4870 * C1882 + C48416 * C9592 - C4871 * C9590) *
                 C47225 +
             (C48574 * C1891 - C4870 * C1886 + C48416 * C9596 - C4871 * C9593) *
                 C48551 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C47206 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C779 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C255 +
          (((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C779 +
           ((C48574 * C682 - C4870 * C677 + C48416 * C2310 - C4871 * C2304) *
                C3782 +
            (C48574 * C692 - C4870 * C683 + C48416 * C2322 - C4871 * C2311) *
                C3776 +
            (C48574 * C684 - C4870 * C678 + C48416 * C2312 - C4871 * C2305) *
                C3783 +
            (C48574 * C693 - C4870 * C685 + C48416 * C2323 - C4871 * C2313) *
                C3777 +
            (C48574 * C686 - C4870 * C679 + C48416 * C2314 - C4871 * C2306) *
                C3784 +
            (C48574 * C694 - C4870 * C687 + C48416 * C2324 - C4871 * C2315) *
                C3778 +
            (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                C3785 +
            (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
             C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
                C47225 +
            (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
             C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
                C48551 +
            (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C47206 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48224) *
               C48318 * C779 +
           ((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
             C19821 * C2810 - C19817 * C2814 + C19822 * C3666 -
             C48622 * C3669) *
                C47225 +
            (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
             C19821 * C2815 - C19817 * C2822 + C19822 * C3670 -
             C48622 * C3675) *
                C48551 +
            (C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
             C20139) *
                C47206 +
            (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
             C20147) *
                C48224) *
               C48318 * C48603) *
              C255 +
          (((C19819 * C259 - C19815 * C265 + C19820 * C677 - C19816 * C682 +
             C19821 * C2304 - C19817 * C2310 + C19822 * C3252 -
             C48622 * C3255) *
                C47225 +
            (C19819 * C266 - C19815 * C277 + C19820 * C683 - C19816 * C692 +
             C19821 * C2311 - C19817 * C2322 + C19822 * C3256 -
             C48622 * C3261) *
                C48551 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C47206 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48224) *
               C48318 * C779 +
           ((C19815 * C682 - C19819 * C677 + C19816 * C2310 - C19820 * C2304 +
             C19817 * C3255 - C19821 * C3252 + C48622 * C10907 -
             C19822 * C10905) *
                C47225 +
            (C19815 * C692 - C19819 * C683 + C19816 * C2322 - C19820 * C2311 +
             C19817 * C3261 - C19821 * C3256 + C48622 * C10911 -
             C19822 * C10908) *
                C48551 +
            (C19815 * C684 - C19819 * C678 + C19816 * C2312 - C19820 * C2305 +
             C19817 * C3257 - C19821 * C3253 + C48622 * C17530 -
             C19822 * C17529) *
                C47206 +
            (C19815 * C693 - C19819 * C685 + C19816 * C2323 - C19820 * C2313 +
             C19817 * C3262 - C19821 * C3258 + C48622 * C17532 -
             C19822 * C17531) *
                C48224) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           C12940 * C48606) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C47225 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C48551 +
            (C5201 - C5202 + C5203 - C5204) * C47206 +
            (C5205 - C5206 + C5207 - C5208) * C48224) *
               C7735 +
           ((C7081 - C7082 + C7083 - C7084) * C47225 +
            (C7085 - C7086 + C7087 - C7088) * C48551 +
            (C6523 - C6524 + C6525 - C6526) * C47206 +
            (C6527 - C6528 + C6529 - C6530) * C48224) *
               C7736 +
           ((C13135 - C13136 + C13137 - C13138) * C47225 +
            (C13139 - C13140 + C13141 - C13142) * C48551 +
            (C12572 - C12573 + C12574 - C12575) * C47206 +
            (C12576 - C12577 + C12578 - C12579) * C48224) *
               C48606) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C47225 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C48551 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C47206 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C48224) *
               C7735 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C47225 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C48551 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C47206 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C48224) *
               C7736 +
           ((C48574 * C2316 - C4870 * C2307 + C48416 * C10042 -
             C4871 * C10040) *
                C47225 +
            (C48574 * C2325 - C4870 * C2317 + C48416 * C10046 -
             C4871 * C10043) *
                C48551 +
            (C48574 * C2318 - C4870 * C2308 + C48416 * C10044 -
             C4871 * C10041) *
                C47206 +
            (C48574 * C2326 - C4870 * C2319 + C48416 * C10047 -
             C4871 * C10045) *
                C48224) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C925 +
          ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
               C3782 +
           (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
               C3776 +
           (C5201 - C5202 + C5203 - C5204) * C3783 +
           (C5205 - C5206 + C5207 - C5208) * C3777 +
           (C5209 - C5210 + C5211 - C5212) * C3784 +
           (C5213 - C5214 + C5215 - C5216) * C3778 +
           (C5217 - C5218 + C5219 - C5220) * C3785 +
           (C5221 - C5222 + C5223 - C5224) * C48610) *
              C48318 * C926 +
          ((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
               C3782 +
           (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
               C3776 +
           (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
               C3783 +
           (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
               C3777 +
           (C48574 * C937 - C4870 * C930 + C48416 * C2818 - C4871 * C2812) *
               C3784 +
           (C48574 * C945 - C4870 * C938 + C48416 * C2824 - C4871 * C2819) *
               C3778 +
           (C48574 * C939 - C4870 * C931 + C48416 * C2820 - C4871 * C2813) *
               C3785 +
           (C48574 * C946 - C4870 * C940 + C48416 * C2825 - C4871 * C2821) *
               C48610) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C126 - C19819 * C119 + C19816 * C389 - C19820 * C383 +
            C19817 * C933 - C19821 * C928 + C48622 * C2814 - C19822 * C2810) *
               C47225 +
           (C19815 * C140 - C19819 * C127 + C19816 * C401 - C19820 * C390 +
            C19817 * C943 - C19821 * C934 + C48622 * C2822 - C19822 * C2815) *
               C48551 +
           (C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
            C19831) *
               C47206 +
           (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
            C19839) *
               C48224) *
              C48318 * C925 +
          ((C19819 * C383 - C19815 * C389 + C19820 * C928 - C19816 * C933 +
            C19821 * C2810 - C19817 * C2814 + C19822 * C3666 - C48622 * C3669) *
               C47225 +
           (C19819 * C390 - C19815 * C401 + C19820 * C934 - C19816 * C943 +
            C19821 * C2815 - C19817 * C2822 + C19822 * C3670 - C48622 * C3675) *
               C48551 +
           (C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
            C20139) *
               C47206 +
           (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
            C20147) *
               C48224) *
              C48318 * C926 +
          ((C19815 * C933 - C19819 * C928 + C19816 * C2814 - C19820 * C2810 +
            C19817 * C3669 - C19821 * C3666 + C48622 * C17617 -
            C19822 * C17615) *
               C47225 +
           (C19815 * C943 - C19819 * C934 + C19816 * C2822 - C19820 * C2815 +
            C19817 * C3675 - C19821 * C3670 + C48622 * C17621 -
            C19822 * C17618) *
               C48551 +
           (C19815 * C935 - C19819 * C929 + C19816 * C2816 - C19820 * C2811 +
            C19817 * C3671 - C19821 * C3667 + C48622 * C17619 -
            C19822 * C17616) *
               C47206 +
           (C19815 * C944 - C19819 * C936 + C19816 * C2823 - C19820 * C2817 +
            C19817 * C3676 - C19821 * C3672 + C48622 * C17622 -
            C19822 * C17620) *
               C48224) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C48329 * C265 - C113 * C259) * C1064 +
            (C48329 * C277 - C113 * C266) * C1058 + (C285 - C284) * C1065 +
            (C287 - C286) * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           ((C48329 * C580 - C113 * C575) * C1064 +
            (C48329 * C590 - C113 * C581) * C1058 + (C1070 - C1071) * C1065 +
            (C1072 - C1073) * C1059 + C1082 * C1066 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C1064 + (C151 - C150) * C1058 +
            (C153 - C152) * C1065 + (C155 - C154) * C1059 +
            (C157 - C156) * C1066 + (C159 - C158) * C48593) *
               C48641 +
           ((C284 - C285) * C1064 + (C286 - C287) * C1058 +
            (C288 - C289) * C1065 + (C290 - C291) * C1059 +
            (C292 - C293) * C1066 + (C294 - C295) * C48593) *
               C48629 +
           ((C1071 - C1070) * C1064 + (C1073 - C1072) * C1058 +
            (C1075 - C1074) * C1065 + (C1077 - C1076) * C1059 +
            (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C1064 + C169 * C1058 + C170 * C1065 + C171 * C1059 +
            C172 * C1066 + C173 * C48593) *
               C48641 +
           (C1068 * C1064 + C1069 * C1058 + (C293 - C292) * C1065 +
            (C295 - C294) * C1059 + (C297 - C296) * C1066 +
            (C299 - C298) * C48593) *
               C48629 +
           (C1082 * C1064 + C1083 * C1058 + (C1079 - C1078) * C1065 +
            (C1081 - C1080) * C1059 + (C48329 * C588 - C113 * C579) * C1066 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C48283 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48318 * C48300 * C48283 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48329 * C138 - C113 * C125) * C118 +
           (C48329 * C146 - C113 * C139) * C106) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
            C1082 * C7740 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C7738 + (C151 - C150) * C48638 +
            (C153 - C152) * C7739 + (C155 - C154) * C48625 +
            (C157 - C156) * C7740 + (C159 - C158) * C48593) *
               C7735 +
           (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
            C3919 * C7740 + C3920 * C48593) *
               C7736 +
           (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
            (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C7738 + C169 * C48638 + C170 * C7739 + C171 * C48625 +
            C172 * C7740 + C173 * C48593) *
               C7735 +
           (C1068 * C7738 + C1069 * C48638 + C3787 * C7739 + C3788 * C48625 +
            (C297 - C296) * C7740 + (C299 - C298) * C48593) *
               C7736 +
           (C1082 * C7738 + C1083 * C48638 + (C1079 - C1078) * C7739 +
            (C1081 - C1080) * C48625 + (C48329 * C588 - C113 * C579) * C7740 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           (C1720 * C8916 + C1721 * C48214) * C8913 +
           ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
           ((C48329 * C1710 - C113 * C1707) * C8916 +
            (C48329 * C1716 - C113 * C1711) * C48214) *
               C8915) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
           (C1258 * C8916 + C1259 * C48214) * C8912 +
           (C1262 * C8916 + C1263 * C48214) * C8913 +
           ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
           ((C113 * C1708 - C48329 * C1712) * C8916 +
            (C113 * C1713 - C48329 * C1717) * C48214) *
               C8915) *
              C48300 * C48283 * C111 +
          ((C168 * C8916 + C169 * C48214) * C8911 +
           (C1068 * C8916 + C1069 * C48214) * C8912 +
           (C1082 * C8916 + C1083 * C48214) * C8913 +
           ((C1271 - C1270) * C8916 + (C1273 - C1272) * C48214) * C8914 +
           ((C48329 * C1714 - C113 * C1709) * C8916 +
            (C48329 * C1718 - C113 * C1715) * C48214) *
               C8915) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C48300 * C48283 * C110 +
          ((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
           (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
           (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
           (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
           (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
           (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
              C48318 * C48300 * C48283 * C111 +
          (C14939 * C7738 + C14940 * C48638 +
           (C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C7739 +
           (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48625 +
           (C14888 * C134 - C14891 * C123 + C14889 * C397 - C14892 * C387 +
            C48609 * C941 - C14893 * C932) *
               C7740 +
           (C14888 * C144 - C14891 * C135 + C14889 * C405 - C14892 * C398 +
            C48609 * C947 - C14893 * C942) *
               C48593) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C14888 * C265 - C14891 * C259 + C14889 * C682 - C14892 * C677 +
             C48609 * C2310 - C14893 * C2304) *
                C8916 +
            (C14888 * C277 - C14891 * C266 + C14889 * C692 - C14892 * C683 +
             C48609 * C2322 - C14893 * C2311) *
                C48214) *
               C48629 +
           ((C14888 * C580 - C14891 * C575 + C14889 * C1423 - C14892 * C1419 +
             C48609 * C2316 - C14893 * C2307) *
                C8916 +
            (C14888 * C590 - C14891 * C581 + C14889 * C1431 - C14892 * C1424 +
             C48609 * C2325 - C14893 * C2317) *
                C48214) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
               C48641 +
           ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
               C48629 +
           ((C14891 * C576 - C14888 * C582 + C14892 * C1420 - C14889 * C1425 +
             C14893 * C2308 - C48609 * C2318) *
                C8916 +
            (C14891 * C583 - C14888 * C591 + C14892 * C1426 - C14889 * C1432 +
             C14893 * C2319 - C48609 * C2326) *
                C48214) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C14939 * C8916 + C14940 * C48214) * C48641 +
           ((C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C8916 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48214) *
               C48629 +
           ((C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
             C48609 * C2320 - C14893 * C2309) *
                C8916 +
            (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
             C48609 * C2327 - C14893 * C2321) *
                C48214) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C255 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C255 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C255 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C48300 * C255 +
           ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C48300 * C255 +
           ((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C7738 +
            (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48638 +
            (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C7739 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48625 +
            (C14888 * C271 - C14891 * C262 + C14889 * C688 - C14892 * C680 +
             C48609 * C2637 - C14893 * C2636) *
                C7740 +
            (C14888 * C280 - C14891 * C272 + C14889 * C695 - C14892 * C689 +
             C48609 * C2639 - C14893 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C14891 * C1229 - C14888 * C1233 + C14892 * C1882 -
              C14889 * C1885 + C14893 * C9590 - C48609 * C9592) *
                 C8916 +
             (C14891 * C1234 - C14888 * C1241 + C14892 * C1886 -
              C14889 * C1891 + C14893 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C8916 +
             (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48214) *
                C48641 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C8916 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48214) *
                C48629 +
            ((C14888 * C1235 - C14891 * C1230 + C14889 * C1887 -
              C14892 * C1883 + C48609 * C9855 - C14893 * C9854) *
                 C8916 +
             (C14888 * C1242 - C14891 * C1236 + C14889 * C1892 -
              C14892 * C1888 + C48609 * C9857 - C14893 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C113 * C677 - C48329 * C682) * C1064 +
             (C113 * C683 - C48329 * C692) * C1058 + (C1436 - C1437) * C1065 +
             (C1438 - C1439) * C1059 + (C1440 - C1441) * C1066 +
             (C1442 - C1443) * C48593) *
                C48629 +
            ((C113 * C1419 - C48329 * C1423) * C1064 +
             (C113 * C1424 - C48329 * C1431) * C1058 + (C1444 - C1445) * C1065 +
             (C1446 - C1447) * C1059 + (C1448 - C1449) * C1066 +
             (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C113 * C1882 - C48329 * C1885) * C8916 +
             (C113 * C1886 - C48329 * C1891) * C48214) *
                C8914 +
            ((C113 * C9097 - C48329 * C9099) * C8916 +
             (C113 * C9100 - C48329 * C9103) * C48214) *
                C8915) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C381 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C381 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C381 +
           ((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C7738 +
            (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48638 +
            (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C7739 +
            (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48625 +
            (C14888 * C395 - C14891 * C386 + C14889 * C939 - C14892 * C931 +
             C48609 * C2820 - C14893 * C2813) *
                C7740 +
            (C14888 * C404 - C14891 * C396 + C14889 * C946 - C14892 * C940 +
             C48609 * C2825 - C14893 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C14891 * C677 - C14888 * C682 + C14892 * C2304 - C14889 * C2310 +
              C14893 * C3252 - C48609 * C3255) *
                 C8916 +
             (C14891 * C683 - C14888 * C692 + C14892 * C2311 - C14889 * C2322 +
              C14893 * C3256 - C48609 * C3261) *
                 C48214) *
                C48629 +
            ((C14891 * C1419 - C14888 * C1423 + C14892 * C2307 -
              C14889 * C2316 + C14893 * C10040 - C48609 * C10042) *
                 C8916 +
             (C14891 * C1424 - C14888 * C1431 + C14892 * C2317 -
              C14889 * C2325 + C14893 * C10043 - C48609 * C10046) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C381 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C8916 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48214) *
                C48641 +
            ((C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
              C48609 * C3257 - C14893 * C3253) *
                 C8916 +
             (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
              C48609 * C3262 - C14893 * C3258) *
                 C48214) *
                C48629 +
            ((C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C8916 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C505 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C505 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C505 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C48300 * C505 +
           ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C48300 * C505 +
           ((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C7738 +
            (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48638 +
            (C15100 - C15099 + C15102 - C15101 + C15104 - C15103) * C7739 +
            (C15106 - C15105 + C15108 - C15107 + C15110 - C15109) * C48625 +
            (C14888 * C271 - C14891 * C262 + C14889 * C688 - C14892 * C680 +
             C48609 * C2637 - C14893 * C2636) *
                C7740 +
            (C14888 * C280 - C14891 * C272 + C14889 * C695 - C14892 * C689 +
             C48609 * C2639 - C14893 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            ((C16353 - C16354 + C16355 - C16356 + C16357 - C16358) * C8916 +
             (C16359 - C16360 + C16361 - C16362 + C16363 - C16364) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C14891 * C1229 - C14888 * C1233 + C14892 * C1882 -
              C14889 * C1885 + C14893 * C9590 - C48609 * C9592) *
                 C8916 +
             (C14891 * C1234 - C14888 * C1241 + C14892 * C1886 -
              C14889 * C1891 + C14893 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C15088 - C15087 + C15090 - C15089 + C15092 - C15091) * C8916 +
             (C15094 - C15093 + C15096 - C15095 + C15098 - C15097) * C48214) *
                C48641 +
            ((C16366 - C16365 + C16368 - C16367 + C16370 - C16369) * C8916 +
             (C16372 - C16371 + C16374 - C16373 + C16376 - C16375) * C48214) *
                C48629 +
            ((C14888 * C1235 - C14891 * C1230 + C14889 * C1887 -
              C14892 * C1883 + C48609 * C9855 - C14893 * C9854) *
                 C8916 +
             (C14888 * C1242 - C14891 * C1236 + C14889 * C1892 -
              C14892 * C1888 + C48609 * C9857 - C14893 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
            C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
               C48641 +
           ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
            C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
               C48629 +
           ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
            (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
            (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C1736 * C48641 +
           ((C1727 - C1726) * C1064 + (C1729 - C1728) * C1058 +
            (C1267 - C1266) * C1065 + (C1269 - C1268) * C1059 +
            (C1271 - C1270) * C1066 + (C1273 - C1272) * C48593) *
               C48629 +
           ((C48329 * C1710 - C113 * C1707) * C1064 +
            (C48329 * C1716 - C113 * C1711) * C1058 +
            (C48329 * C1712 - C113 * C1708) * C1065 +
            (C48329 * C1717 - C113 * C1713) * C1059 +
            (C48329 * C1714 - C113 * C1709) * C1066 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C571 +
          ((C113 * C259 - C48329 * C265) * C114 +
           (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48318 * C48300 * C572 +
          ((C48329 * C580 - C113 * C575) * C114 +
           (C48329 * C590 - C113 * C581) * C102 +
           (C48329 * C582 - C113 * C576) * C115 +
           (C48329 * C591 - C113 * C583) * C103 +
           (C48329 * C584 - C113 * C577) * C116 +
           (C48329 * C592 - C113 * C585) * C104 +
           (C48329 * C586 - C113 * C578) * C117 +
           (C48329 * C593 - C113 * C587) * C105 +
           (C48329 * C588 - C113 * C579) * C118 +
           (C48329 * C594 - C113 * C589) * C106) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 + C1258 * C7739 +
            C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
               C7735 +
           ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 + C1262 * C7739 +
            C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
               C7736 +
           ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
            (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
            (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C8300 * C7735 +
           ((C1727 - C1726) * C7738 + (C1729 - C1728) * C48638 +
            (C1267 - C1266) * C7739 + (C1269 - C1268) * C48625 +
            (C1271 - C1270) * C7740 + (C1273 - C1272) * C48593) *
               C7736 +
           ((C48329 * C1710 - C113 * C1707) * C7738 +
            (C48329 * C1716 - C113 * C1711) * C48638 +
            (C48329 * C1712 - C113 * C1708) * C7739 +
            (C48329 * C1717 - C113 * C1713) * C48625 +
            (C48329 * C1714 - C113 * C1709) * C7740 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C48300 * C571 +
          (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
           ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
           ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
           ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
           ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
              C48300 * C572 +
          (C9264 * C8911 + C9269 * C8912 + C9270 * C8913 +
           ((C9261 - C9260) * C8916 + (C9263 - C9262) * C48214) * C8914 +
           ((C48329 * C9250 - C113 * C9249) * C8916 +
            (C48329 * C9252 - C113 * C9251) * C48214) *
               C8915) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C48300 * C571 +
          ((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
            C14893 * C2304 - C48609 * C2310) *
               C7738 +
           (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
            C14893 * C2311 - C48609 * C2322) *
               C48638 +
           (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
           (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
           (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
           (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
              C48318 * C48300 * C572 +
          ((C14888 * C580 - C14891 * C575 + C14889 * C1423 - C14892 * C1419 +
            C48609 * C2316 - C14893 * C2307) *
               C7738 +
           (C14888 * C590 - C14891 * C581 + C14889 * C1431 - C14892 * C1424 +
            C48609 * C2325 - C14893 * C2317) *
               C48638 +
           (C14888 * C582 - C14891 * C576 + C14889 * C1425 - C14892 * C1420 +
            C48609 * C2318 - C14893 * C2308) *
               C7739 +
           (C14888 * C591 - C14891 * C583 + C14889 * C1432 - C14892 * C1426 +
            C48609 * C2326 - C14893 * C2319) *
               C48625 +
           (C14888 * C584 - C14891 * C577 + C14889 * C1427 - C14892 * C1421 +
            C48609 * C2320 - C14893 * C2309) *
               C7740 +
           (C14888 * C592 - C14891 * C585 + C14889 * C1433 - C14892 * C1428 +
            C48609 * C2327 - C14893 * C2321) *
               C48593) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
               C48629 +
           C16803 * C48606) *
              C48300 * C571 +
          (((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
            (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
               C48641 +
           ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
            (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
               C48629 +
           ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
            (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
               C48606) *
              C48300 * C572 +
          (C16803 * C48641 +
           ((C16786 - C16785 + C16788 - C16787 + C16790 - C16789) * C8916 +
            (C16792 - C16791 + C16794 - C16793 + C16796 - C16795) * C48214) *
               C48629 +
           ((C14888 * C1710 - C14891 * C1707 + C14889 * C9099 - C14892 * C9097 +
             C48609 * C9594 - C14893 * C9591) *
                C8916 +
            (C14888 * C1716 - C14891 * C1711 + C14889 * C9103 - C14892 * C9100 +
             C48609 * C9597 - C14893 * C9595) *
                C48214) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C505 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C381 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C381 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C381 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C505 +
          (((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C381 +
           ((C14888 * C682 - C14891 * C677 + C14889 * C2310 - C14892 * C2304 +
             C48609 * C3255 - C14893 * C3252) *
                C7738 +
            (C14888 * C692 - C14891 * C683 + C14889 * C2322 - C14892 * C2311 +
             C48609 * C3261 - C14893 * C3256) *
                C48638 +
            (C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
             C48609 * C3257 - C14893 * C3253) *
                C7739 +
            (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
             C48609 * C3262 - C14893 * C3258) *
                C48625 +
            (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
             C48609 * C3259 - C14893 * C3254) *
                C7740 +
            (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
             C48609 * C3263 - C14893 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C381 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C505 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
             (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
                C48606) *
               C381 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C8916 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48214) *
                C48641 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C8916 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48214) *
                C48629 +
            ((C14888 * C1885 - C14891 * C1882 + C14889 * C9592 -
              C14892 * C9590 + C48609 * C10476 - C14893 * C10475) *
                 C8916 +
             (C14888 * C1891 - C14891 * C1886 + C14889 * C9596 -
              C14892 * C9593 + C48609 * C10478 - C14893 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C779 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C779 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C7738 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48638 +
            (C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C7739 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48625 +
            (C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C7740 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48593) *
               C48318 * C779 +
           ((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C7738 +
            (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48638 +
            (C15270 - C15269 + C15272 - C15271 + C15274 - C15273) * C7739 +
            (C15276 - C15275 + C15278 - C15277 + C15280 - C15279) * C48625 +
            (C14888 * C395 - C14891 * C386 + C14889 * C939 - C14892 * C931 +
             C48609 * C2820 - C14893 * C2813) *
                C7740 +
            (C14888 * C404 - C14891 * C396 + C14889 * C946 - C14892 * C940 +
             C48609 * C2825 - C14893 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C8916 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48214) *
                C48641 +
            ((C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C8916 +
             (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48214) *
                C48629 +
            ((C16365 - C16366 + C16367 - C16368 + C16369 - C16370) * C8916 +
             (C16371 - C16372 + C16373 - C16374 + C16375 - C16376) * C48214) *
                C48606) *
               C779 +
           (((C15258 - C15257 + C15260 - C15259 + C15262 - C15261) * C8916 +
             (C15264 - C15263 + C15266 - C15265 + C15268 - C15267) * C48214) *
                C48641 +
            ((C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
              C48609 * C3257 - C14893 * C3253) *
                 C8916 +
             (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
              C48609 * C3262 - C14893 * C3258) *
                 C48214) *
                C48629 +
            ((C14888 * C1425 - C14891 * C1420 + C14889 * C2318 -
              C14892 * C2308 + C48609 * C10044 - C14893 * C10041) *
                 C8916 +
             (C14888 * C1432 - C14891 * C1426 + C14889 * C2326 -
              C14892 * C2319 + C48609 * C10047 - C14893 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C255 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C779 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C779 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C7738 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48638 +
            (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
            C14939 * C7740 + C14940 * C48593) *
               C48318 * C779 +
           ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C7738 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48638 +
            (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
            (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
            (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
            (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
               C48318 * C48603) *
              C255 +
          (((C14891 * C259 - C14888 * C265 + C14892 * C677 - C14889 * C682 +
             C14893 * C2304 - C48609 * C2310) *
                C7738 +
            (C14891 * C266 - C14888 * C277 + C14892 * C683 - C14889 * C692 +
             C14893 * C2311 - C48609 * C2322) *
                C48638 +
            (C15087 - C15088 + C15089 - C15090 + C15091 - C15092) * C7739 +
            (C15093 - C15094 + C15095 - C15096 + C15097 - C15098) * C48625 +
            (C15099 - C15100 + C15101 - C15102 + C15103 - C15104) * C7740 +
            (C15105 - C15106 + C15107 - C15108 + C15109 - C15110) * C48593) *
               C48318 * C779 +
           ((C14888 * C682 - C14891 * C677 + C14889 * C2310 - C14892 * C2304 +
             C48609 * C3255 - C14893 * C3252) *
                C7738 +
            (C14888 * C692 - C14891 * C683 + C14889 * C2322 - C14892 * C2311 +
             C48609 * C3261 - C14893 * C3256) *
                C48638 +
            (C14888 * C684 - C14891 * C678 + C14889 * C2312 - C14892 * C2305 +
             C48609 * C3257 - C14893 * C3253) *
                C7739 +
            (C14888 * C693 - C14891 * C685 + C14889 * C2323 - C14892 * C2313 +
             C48609 * C3262 - C14893 * C3258) *
                C48625 +
            (C14888 * C686 - C14891 * C679 + C14889 * C2314 - C14892 * C2306 +
             C48609 * C3259 - C14893 * C3254) *
                C7740 +
            (C14888 * C694 - C14891 * C687 + C14889 * C2324 - C14892 * C2315 +
             C48609 * C3263 - C14893 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
              C48609 * C933 - C14893 * C928) *
                 C8916 +
             (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
              C48609 * C943 - C14893 * C934) *
                 C48214) *
                C48641 +
            ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
             (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
                C48629 +
            C16803 * C48606) *
               C779 +
           (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
              C14893 * C2810 - C48609 * C2814) *
                 C8916 +
             (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
              C14893 * C2815 - C48609 * C2822) *
                 C48214) *
                C48641 +
            ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
                C48629 +
            ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
             (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
                C48606) *
               C48603) *
              C255 +
          ((((C16342 - C16341 + C16344 - C16343 + C16346 - C16345) * C8916 +
             (C16348 - C16347 + C16350 - C16349 + C16352 - C16351) * C48214) *
                C48641 +
            ((C16354 - C16353 + C16356 - C16355 + C16358 - C16357) * C8916 +
             (C16360 - C16359 + C16362 - C16361 + C16364 - C16363) * C48214) *
                C48629 +
            ((C16785 - C16786 + C16787 - C16788 + C16789 - C16790) * C8916 +
             (C16791 - C16792 + C16793 - C16794 + C16795 - C16796) * C48214) *
                C48606) *
               C779 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C8916 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48214) *
                C48641 +
            ((C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C8916 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48214) *
                C48629 +
            ((C14888 * C1885 - C14891 * C1882 + C14889 * C9592 -
              C14892 * C9590 + C48609 * C10476 - C14893 * C10475) *
                 C8916 +
             (C14888 * C1891 - C14891 * C1886 + C14889 * C9596 -
              C14892 * C9593 + C48609 * C10478 - C14893 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C1064 +
            (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
            (C410 - C411) * C1059 + (C412 - C413) * C1066 +
            (C414 - C415) * C48593) *
               C48641 +
           ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
            (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
            (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
               C48629 +
           ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
            (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
            (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C1064 +
            (C48329 * C943 - C113 * C934) * C1058 +
            (C48329 * C935 - C113 * C929) * C1065 +
            (C48329 * C944 - C113 * C936) * C1059 +
            (C48329 * C937 - C113 * C930) * C1066 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C48641 +
           ((C48329 * C2310 - C113 * C2304) * C1064 +
            (C48329 * C2322 - C113 * C2311) * C1058 +
            (C48329 * C2312 - C113 * C2305) * C1065 +
            (C48329 * C2323 - C113 * C2313) * C1059 +
            (C48329 * C2314 - C113 * C2306) * C1066 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C48629 +
           ((C48329 * C2316 - C113 * C2307) * C1064 +
            (C48329 * C2325 - C113 * C2317) * C1058 +
            (C48329 * C2318 - C113 * C2308) * C1065 +
            (C48329 * C2326 - C113 * C2319) * C1059 +
            (C48329 * C2320 - C113 * C2309) * C1066 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C925 +
          ((C113 * C383 - C48329 * C389) * C114 +
           (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48318 * C926 +
          ((C48329 * C933 - C113 * C928) * C114 +
           (C48329 * C943 - C113 * C934) * C102 +
           (C48329 * C935 - C113 * C929) * C115 +
           (C48329 * C944 - C113 * C936) * C103 +
           (C48329 * C937 - C113 * C930) * C116 +
           (C48329 * C945 - C113 * C938) * C104 +
           (C48329 * C939 - C113 * C931) * C117 +
           (C48329 * C946 - C113 * C940) * C105 +
           (C48329 * C941 - C113 * C932) * C118 +
           (C48329 * C947 - C113 * C942) * C106) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C7738 +
            (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
            (C410 - C411) * C48625 + (C412 - C413) * C7740 +
            (C414 - C415) * C48593) *
               C7735 +
           ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
            (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
            (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
               C7736 +
           ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
            (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
            (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C7738 +
            (C48329 * C943 - C113 * C934) * C48638 +
            (C48329 * C935 - C113 * C929) * C7739 +
            (C48329 * C944 - C113 * C936) * C48625 +
            (C48329 * C937 - C113 * C930) * C7740 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C7735 +
           ((C48329 * C2310 - C113 * C2304) * C7738 +
            (C48329 * C2322 - C113 * C2311) * C48638 +
            (C48329 * C2312 - C113 * C2305) * C7739 +
            (C48329 * C2323 - C113 * C2313) * C48625 +
            (C48329 * C2314 - C113 * C2306) * C7740 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C7736 +
           ((C48329 * C2316 - C113 * C2307) * C7738 +
            (C48329 * C2325 - C113 * C2317) * C48638 +
            (C48329 * C2318 - C113 * C2308) * C7739 +
            (C48329 * C2326 - C113 * C2319) * C48625 +
            (C48329 * C2320 - C113 * C2309) * C7740 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C8916 +
            (C113 * C390 - C48329 * C401) * C48214) *
               C8911 +
           ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
           ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
           ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
           ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C8916 +
            (C48329 * C943 - C113 * C934) * C48214) *
               C8911 +
           ((C48329 * C2310 - C113 * C2304) * C8916 +
            (C48329 * C2322 - C113 * C2311) * C48214) *
               C8912 +
           ((C48329 * C2316 - C113 * C2307) * C8916 +
            (C48329 * C2325 - C113 * C2317) * C48214) *
               C8913 +
           ((C48329 * C9592 - C113 * C9590) * C8916 +
            (C48329 * C9596 - C113 * C9593) * C48214) *
               C8914 +
           ((C48329 * C9594 - C113 * C9591) * C8916 +
            (C48329 * C9597 - C113 * C9595) * C48214) *
               C8915) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
            C48609 * C933 - C14893 * C928) *
               C7738 +
           (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
            C48609 * C943 - C14893 * C934) *
               C48638 +
           (C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C7739 +
           (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48625 +
           C14939 * C7740 + C14940 * C48593) *
              C48318 * C925 +
          ((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
            C14893 * C2810 - C48609 * C2814) *
               C7738 +
           (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
            C14893 * C2815 - C48609 * C2822) *
               C48638 +
           (C15257 - C15258 + C15259 - C15260 + C15261 - C15262) * C7739 +
           (C15263 - C15264 + C15265 - C15266 + C15267 - C15268) * C48625 +
           (C15269 - C15270 + C15271 - C15272 + C15273 - C15274) * C7740 +
           (C15275 - C15276 + C15277 - C15278 + C15279 - C15280) * C48593) *
              C48318 * C926 +
          ((C14888 * C933 - C14891 * C928 + C14889 * C2814 - C14892 * C2810 +
            C48609 * C3669 - C14893 * C3666) *
               C7738 +
           (C14888 * C943 - C14891 * C934 + C14889 * C2822 - C14892 * C2815 +
            C48609 * C3675 - C14893 * C3670) *
               C48638 +
           (C14888 * C935 - C14891 * C929 + C14889 * C2816 - C14892 * C2811 +
            C48609 * C3671 - C14893 * C3667) *
               C7739 +
           (C14888 * C944 - C14891 * C936 + C14889 * C2823 - C14892 * C2817 +
            C48609 * C3676 - C14893 * C3672) *
               C48625 +
           (C14888 * C937 - C14891 * C930 + C14889 * C2818 - C14892 * C2812 +
            C48609 * C3673 - C14893 * C3668) *
               C7740 +
           (C14888 * C945 - C14891 * C938 + C14889 * C2824 - C14892 * C2819 +
            C48609 * C3677 - C14893 * C3674) *
               C48593) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C126 - C14891 * C119 + C14889 * C389 - C14892 * C383 +
             C48609 * C933 - C14893 * C928) *
                C8916 +
            (C14888 * C140 - C14891 * C127 + C14889 * C401 - C14892 * C390 +
             C48609 * C943 - C14893 * C934) *
                C48214) *
               C48641 +
           ((C16341 - C16342 + C16343 - C16344 + C16345 - C16346) * C8916 +
            (C16347 - C16348 + C16349 - C16350 + C16351 - C16352) * C48214) *
               C48629 +
           C16803 * C48606) *
              C925 +
          (((C14891 * C383 - C14888 * C389 + C14892 * C928 - C14889 * C933 +
             C14893 * C2810 - C48609 * C2814) *
                C8916 +
            (C14891 * C390 - C14888 * C401 + C14892 * C934 - C14889 * C943 +
             C14893 * C2815 - C48609 * C2822) *
                C48214) *
               C48641 +
           ((C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C8916 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48214) *
               C48629 +
           ((C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C8916 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48214) *
               C48606) *
              C926 +
          (((C14888 * C933 - C14891 * C928 + C14889 * C2814 - C14892 * C2810 +
             C48609 * C3669 - C14893 * C3666) *
                C8916 +
            (C14888 * C943 - C14891 * C934 + C14889 * C2822 - C14892 * C2815 +
             C48609 * C3675 - C14893 * C3670) *
                C48214) *
               C48641 +
           ((C14888 * C2310 - C14891 * C2304 + C14889 * C3255 - C14892 * C3252 +
             C48609 * C10907 - C14893 * C10905) *
                C8916 +
            (C14888 * C2322 - C14891 * C2311 + C14889 * C3261 - C14892 * C3256 +
             C48609 * C10911 - C14893 * C10908) *
                C48214) *
               C48629 +
           ((C14888 * C2316 - C14891 * C2307 + C14889 * C10042 -
             C14892 * C10040 + C48609 * C10909 - C14893 * C10906) *
                C8916 +
            (C14888 * C2325 - C14891 * C2317 + C14889 * C10046 -
             C14892 * C10043 + C48609 * C10912 - C14893 * C10910) *
                C48214) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47235 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48219 +
            (C30339 - C30340 + C30341 - C30342) * C47231 +
            (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
            C30380 * C25911) *
               C48573 +
           ((C31763 - C31764 + C31765 - C31766) * C47235 +
            (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
            C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C47235 +
            (C30344 - C30343 + C30346 - C30345) * C48219 +
            (C30348 - C30347 + C30350 - C30349) * C47231 +
            (C30352 - C30351 + C30354 - C30353) * C48227 +
            (C30356 - C30355 + C30358 - C30357) * C47241 +
            (C30360 - C30359 + C30362 - C30361) * C25911) *
               C48573 +
           (C31807 * C47235 + C31808 * C48219 +
            (C30521 - C30522 + C30523 - C30524) * C47231 +
            (C30525 - C30526 + C30527 - C30528) * C48227 +
            (C30529 - C30530 + C30531 - C30532) * C47241 +
            (C30533 - C30534 + C30535 - C30536) * C25911) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C30379 * C47235 + C30380 * C48219 + C30381 * C47231 +
            C30382 * C48227 + (C30364 - C30363 + C30366 - C30365) * C47241 +
            (C30368 - C30367 + C30370 - C30369) * C25911) *
               C48573 +
           (C34422 * C47235 + C34423 * C48219 +
            (C30530 - C30529 + C30532 - C30531) * C47231 +
            (C30534 - C30533 + C30536 - C30535) * C48227 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C47241 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C25911) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C47235 +
             (C31768 - C31767 + C31770 - C31769) * C48219 + C31807 * C47231 +
             C31808 * C48227 + C34622 * C47241 + C34623 * C25911) *
                C48573 +
            ((C31776 - C31775 + C31778 - C31777) * C47235 +
             (C31780 - C31779 + C31782 - C31781) * C48219 + C31809 * C47231 +
             C31810 * C48227 + (C31561 - C31562 + C31563 - C31564) * C47241 +
             (C31565 - C31566 + C31567 - C31568) * C25911) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C47235 +
             (C30344 - C30343 + C30346 - C30345) * C48219 +
             (C30348 - C30347 + C30350 - C30349) * C47231 +
             (C30352 - C30351 + C30354 - C30353) * C48227 +
             (C30356 - C30355 + C30358 - C30357) * C47241 +
             (C30360 - C30359 + C30362 - C30361) * C25911) *
                C48573 +
            (C31807 * C47235 + C31808 * C48219 + C34622 * C47231 +
             C34623 * C48227 + (C30529 - C30530 + C30531 - C30532) * C47241 +
             (C30533 - C30534 + C30535 - C30536) * C25911) *
                C48376) *
               C48300 * C255 +
           ((C31803 * C47235 + C31804 * C48219 + C34422 * C47231 +
             C34423 * C48227 + (C30530 - C30529 + C30532 - C30531) * C47241 +
             (C30534 - C30533 + C30536 - C30535) * C25911) *
                C48573 +
            (C31805 * C47235 + C31806 * C48219 +
             (C31562 - C31561 + C31564 - C31563) * C47231 +
             (C31566 - C31565 + C31568 - C31567) * C48227 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C47241 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C25911) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47235 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48219 +
             (C30667 - C30668 + C30669 - C30670) * C47231 +
             (C30671 - C30672 + C30673 - C30674) * C48227 +
             (C30675 - C30676 + C30677 - C30678) * C47241 +
             (C30679 - C30680 + C30681 - C30682) * C25911) *
                C48573 +
            ((C32576 - C32577 + C32578 - C32579) * C47235 +
             (C32580 - C32581 + C32582 - C32583) * C48219 +
             (C32005 - C32006 + C32007 - C32008) * C47231 +
             (C32009 - C32010 + C32011 - C32012) * C48227 +
             (C34818 - C34819 + C34820 - C34821) * C47241 +
             (C34822 - C34823 + C34824 - C34825) * C25911) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C47235 +
             (C30344 - C30343 + C30346 - C30345) * C48219 +
             (C30348 - C30347 + C30350 - C30349) * C47231 +
             (C30352 - C30351 + C30354 - C30353) * C48227 +
             (C30356 - C30355 + C30358 - C30357) * C47241 +
             (C30360 - C30359 + C30362 - C30361) * C25911) *
                C48573 +
            (C31807 * C47235 + C31808 * C48219 + C34622 * C47231 +
             C34623 * C48227 + (C30529 - C30530 + C30531 - C30532) * C47241 +
             (C30533 - C30534 + C30535 - C30536) * C25911) *
                C48376) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C47235 +
             (C30672 - C30671 + C30674 - C30673) * C48219 +
             (C30676 - C30675 + C30678 - C30677) * C47231 +
             (C30680 - C30679 + C30682 - C30681) * C48227 +
             (C30684 - C30683 + C30686 - C30685) * C47241 +
             (C30688 - C30687 + C30690 - C30689) * C25911) *
                C48573 +
            ((C32006 - C32005 + C32008 - C32007) * C47235 +
             (C32010 - C32009 + C32012 - C32011) * C48219 +
             (C34819 - C34818 + C34821 - C34820) * C47231 +
             (C34823 - C34822 + C34825 - C34824) * C48227 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C47241 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C25911) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C47235 +
             (C31768 - C31767 + C31770 - C31769) * C48219 + C31807 * C47231 +
             C31808 * C48227 + C34622 * C47241 + C34623 * C25911) *
                C48573 +
            ((C31776 - C31775 + C31778 - C31777) * C47235 +
             (C31780 - C31779 + C31782 - C31781) * C48219 + C31809 * C47231 +
             C31810 * C48227 + (C31561 - C31562 + C31563 - C31564) * C47241 +
             (C31565 - C31566 + C31567 - C31568) * C25911) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C47235 +
             (C30344 - C30343 + C30346 - C30345) * C48219 +
             (C30348 - C30347 + C30350 - C30349) * C47231 +
             (C30352 - C30351 + C30354 - C30353) * C48227 +
             (C30356 - C30355 + C30358 - C30357) * C47241 +
             (C30360 - C30359 + C30362 - C30361) * C25911) *
                C48573 +
            (C31807 * C47235 + C31808 * C48219 + C34622 * C47231 +
             C34623 * C48227 + (C30529 - C30530 + C30531 - C30532) * C47241 +
             (C30533 - C30534 + C30535 - C30536) * C25911) *
                C48376) *
               C48300 * C505 +
           ((C31803 * C47235 + C31804 * C48219 + C34422 * C47231 +
             C34423 * C48227 + (C30530 - C30529 + C30532 - C30531) * C47241 +
             (C30534 - C30533 + C30536 - C30535) * C25911) *
                C48573 +
            (C31805 * C47235 + C31806 * C48219 +
             (C31562 - C31561 + C31564 - C31563) * C47231 +
             (C31566 - C31565 + C31568 - C31567) * C48227 +
             (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                 C47241 +
             (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                 C25911) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47235 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48219 +
            (C30339 - C30340 + C30341 - C30342) * C47231 +
            (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
            C30380 * C25911) *
               C48573 +
           ((C31763 - C31764 + C31765 - C31766) * C47235 +
            (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
            C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
               C48376) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C47235 +
            (C31768 - C31767 + C31770 - C31769) * C48219 + C31807 * C47231 +
            C31808 * C48227 + C34622 * C47241 + C34623 * C25911) *
               C48573 +
           ((C31776 - C31775 + C31778 - C31777) * C47235 +
            (C31780 - C31779 + C31782 - C31781) * C48219 + C31809 * C47231 +
            C31810 * C48227 + (C31561 - C31562 + C31563 - C31564) * C47241 +
            (C31565 - C31566 + C31567 - C31568) * C25911) *
               C48376) *
              C48300 * C572 +
          ((C32375 * C47235 + C32376 * C48219 + C31805 * C47231 +
            C31806 * C48227 + (C31562 - C31561 + C31564 - C31563) * C47241 +
            (C31566 - C31565 + C31568 - C31567) * C25911) *
               C48573 +
           ((C32368 - C32367 + C32370 - C32369) * C47235 +
            (C32372 - C32371 + C32374 - C32373) * C48219 +
            (C31796 - C31795 + C31798 - C31797) * C47231 +
            (C31800 - C31799 + C31802 - C31801) * C48227 +
            (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
             C30337 * C1884) *
                C47241 +
            (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
             C30337 * C1890) *
                C25911) *
               C48376) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47235 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48219 +
             (C30667 - C30668 + C30669 - C30670) * C47231 +
             (C30671 - C30672 + C30673 - C30674) * C48227 +
             (C30675 - C30676 + C30677 - C30678) * C47241 +
             (C30679 - C30680 + C30681 - C30682) * C25911) *
                C48573 +
            ((C32576 - C32577 + C32578 - C32579) * C47235 +
             (C32580 - C32581 + C32582 - C32583) * C48219 +
             (C32005 - C32006 + C32007 - C32008) * C47231 +
             (C32009 - C32010 + C32011 - C32012) * C48227 +
             (C34818 - C34819 + C34820 - C34821) * C47241 +
             (C34822 - C34823 + C34824 - C34825) * C25911) *
                C48376) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C47235 +
             (C31768 - C31767 + C31770 - C31769) * C48219 + C31807 * C47231 +
             C31808 * C48227 + C34622 * C47241 + C34623 * C25911) *
                C48573 +
            ((C31776 - C31775 + C31778 - C31777) * C47235 +
             (C31780 - C31779 + C31782 - C31781) * C48219 + C31809 * C47231 +
             C31810 * C48227 + (C31561 - C31562 + C31563 - C31564) * C47241 +
             (C31565 - C31566 + C31567 - C31568) * C25911) *
                C48376) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C47235 +
             (C32581 - C32580 + C32583 - C32582) * C48219 +
             (C32006 - C32005 + C32008 - C32007) * C47231 +
             (C32010 - C32009 + C32012 - C32011) * C48227 +
             (C34819 - C34818 + C34821 - C34820) * C47241 +
             (C34823 - C34822 + C34825 - C34824) * C25911) *
                C48573 +
            ((C32585 - C32584 + C32587 - C32586) * C47235 +
             (C32589 - C32588 + C32591 - C32590) * C48219 +
             (C32014 - C32013 + C32016 - C32015) * C47231 +
             (C32018 - C32017 + C32020 - C32019) * C48227 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C47241 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C25911) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47235 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48219 +
             (C30667 - C30668 + C30669 - C30670) * C47231 +
             (C30671 - C30672 + C30673 - C30674) * C48227 +
             (C30675 - C30676 + C30677 - C30678) * C47241 +
             (C30679 - C30680 + C30681 - C30682) * C25911) *
                C48573 +
            ((C32576 - C32577 + C32578 - C32579) * C47235 +
             (C32580 - C32581 + C32582 - C32583) * C48219 +
             (C32005 - C32006 + C32007 - C32008) * C47231 +
             (C32009 - C32010 + C32011 - C32012) * C48227 +
             (C34818 - C34819 + C34820 - C34821) * C47241 +
             (C34822 - C34823 + C34824 - C34825) * C25911) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C47235 +
             (C30344 - C30343 + C30346 - C30345) * C48219 +
             (C30348 - C30347 + C30350 - C30349) * C47231 +
             (C30352 - C30351 + C30354 - C30353) * C48227 +
             (C30356 - C30355 + C30358 - C30357) * C47241 +
             (C30360 - C30359 + C30362 - C30361) * C25911) *
                C48573 +
            (C31807 * C47235 + C31808 * C48219 + C34622 * C47231 +
             C34623 * C48227 + (C30529 - C30530 + C30531 - C30532) * C47241 +
             (C30533 - C30534 + C30535 - C30536) * C25911) *
                C48376) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C47235 +
             (C30672 - C30671 + C30674 - C30673) * C48219 +
             (C30676 - C30675 + C30678 - C30677) * C47231 +
             (C30680 - C30679 + C30682 - C30681) * C48227 +
             (C30684 - C30683 + C30686 - C30685) * C47241 +
             (C30688 - C30687 + C30690 - C30689) * C25911) *
                C48573 +
            ((C32006 - C32005 + C32008 - C32007) * C47235 +
             (C32010 - C32009 + C32012 - C32011) * C48219 +
             (C34819 - C34818 + C34821 - C34820) * C47231 +
             (C34823 - C34822 + C34825 - C34824) * C48227 +
             (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                 C47241 +
             (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                 C25911) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C47235 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C48219 +
             (C30339 - C30340 + C30341 - C30342) * C47231 +
             (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
             C30380 * C25911) *
                C48573 +
            ((C31763 - C31764 + C31765 - C31766) * C47235 +
             (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
             C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
                C48376) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C47235 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C48219 +
             (C30667 - C30668 + C30669 - C30670) * C47231 +
             (C30671 - C30672 + C30673 - C30674) * C48227 +
             (C30675 - C30676 + C30677 - C30678) * C47241 +
             (C30679 - C30680 + C30681 - C30682) * C25911) *
                C48573 +
            ((C32576 - C32577 + C32578 - C32579) * C47235 +
             (C32580 - C32581 + C32582 - C32583) * C48219 +
             (C32005 - C32006 + C32007 - C32008) * C47231 +
             (C32009 - C32010 + C32011 - C32012) * C48227 +
             (C34818 - C34819 + C34820 - C34821) * C47241 +
             (C34822 - C34823 + C34824 - C34825) * C25911) *
                C48376) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C47235 +
             (C31768 - C31767 + C31770 - C31769) * C48219 + C31807 * C47231 +
             C31808 * C48227 + C34622 * C47241 + C34623 * C25911) *
                C48573 +
            ((C31776 - C31775 + C31778 - C31777) * C47235 +
             (C31780 - C31779 + C31782 - C31781) * C48219 + C31809 * C47231 +
             C31810 * C48227 + (C31561 - C31562 + C31563 - C31564) * C47241 +
             (C31565 - C31566 + C31567 - C31568) * C25911) *
                C48376) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C47235 +
             (C32581 - C32580 + C32583 - C32582) * C48219 +
             (C32006 - C32005 + C32008 - C32007) * C47231 +
             (C32010 - C32009 + C32012 - C32011) * C48227 +
             (C34819 - C34818 + C34821 - C34820) * C47241 +
             (C34823 - C34822 + C34825 - C34824) * C25911) *
                C48573 +
            ((C32585 - C32584 + C32587 - C32586) * C47235 +
             (C32589 - C32588 + C32591 - C32590) * C48219 +
             (C32014 - C32013 + C32016 - C32015) * C47231 +
             (C32018 - C32017 + C32020 - C32019) * C48227 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C47241 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C25911) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C47235 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48219 +
            (C30339 - C30340 + C30341 - C30342) * C47231 +
            (C30343 - C30344 + C30345 - C30346) * C48227 + C30379 * C47241 +
            C30380 * C25911) *
               C48573 +
           ((C31763 - C31764 + C31765 - C31766) * C47235 +
            (C31767 - C31768 + C31769 - C31770) * C48219 + C31803 * C47231 +
            C31804 * C48227 + C34422 * C47241 + C34423 * C25911) *
               C48376) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C47235 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48219 +
            (C30667 - C30668 + C30669 - C30670) * C47231 +
            (C30671 - C30672 + C30673 - C30674) * C48227 +
            (C30675 - C30676 + C30677 - C30678) * C47241 +
            (C30679 - C30680 + C30681 - C30682) * C25911) *
               C48573 +
           ((C32576 - C32577 + C32578 - C32579) * C47235 +
            (C32580 - C32581 + C32582 - C32583) * C48219 +
            (C32005 - C32006 + C32007 - C32008) * C47231 +
            (C32009 - C32010 + C32011 - C32012) * C48227 +
            (C34818 - C34819 + C34820 - C34821) * C47241 +
            (C34822 - C34823 + C34824 - C34825) * C25911) *
               C48376) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C47235 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C48219 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C47231 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48227 +
            (C30334 * C937 - C30336 * C930 + C48416 * C2818 - C30337 * C2812) *
                C47241 +
            (C30334 * C945 - C30336 * C938 + C48416 * C2824 - C30337 * C2819) *
                C25911) *
               C48573 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C47235 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C48219 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C47231 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48227 +
            (C30334 * C2314 - C30336 * C2306 + C48416 * C3259 -
             C30337 * C3254) *
                C47241 +
            (C30334 * C2324 - C30336 * C2315 + C48416 * C3263 -
             C30337 * C3260) *
                C25911) *
               C48376) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C23173 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C23167 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C48573 +
           ((C48412 * C265 - C47360 * C259 + C48419 * C682 - C47352 * C677 +
             C36005 * C2310 - C47366 * C2304) *
                C23173 +
            (C48412 * C277 - C47360 * C266 + C48419 * C692 - C47352 * C683 +
             C36005 * C2322 - C47366 * C2311) *
                C23167 +
            (C36203 - C36202 + C36205 - C36204 + C36207 - C36206) * C23174 +
            (C36209 - C36208 + C36211 - C36210 + C36213 - C36212) * C48224) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C23173 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C23167 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C23174 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
               C48573 +
           ((C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C23173 +
            (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C23167 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C23174 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C36054 * C23173 + C36055 * C23167 +
            (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C23174 +
            (C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C48224) *
               C48573 +
           ((C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C23173 +
            (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C23167 +
            (C48412 * C271 - C47360 * C262 + C48419 * C688 - C47352 * C680 +
             C36005 * C2637 - C47366 * C2636) *
                C23174 +
            (C48412 * C280 - C47360 * C272 + C48419 * C695 - C47352 * C689 +
             C36005 * C2639 - C47366 * C2638) *
                C48224) *
               C48376) *
              C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C48300 * C255 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C23173 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C23167 +
             C37582 * C23174 + C37583 * C48224) *
                C48573 +
            ((C47360 * C575 - C48412 * C580 + C47352 * C1419 - C48419 * C1423 +
              C47366 * C2307 - C36005 * C2316) *
                 C23173 +
             (C47360 * C581 - C48412 * C590 + C47352 * C1424 - C48419 * C1431 +
              C47366 * C2317 - C36005 * C2325) *
                 C23167 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C23174 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C23173 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C23167 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C23174 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C48573 +
            (C37582 * C23173 + C37583 * C23167 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C23174 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C48300 * C255 +
           ((C37580 * C23173 + C37581 * C23167 +
             (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C23174 +
             (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48224) *
                C48573 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C23173 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C23167 +
             (C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
              C36005 * C2320 - C47366 * C2309) *
                 C23174 +
             (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
              C36005 * C2327 - C47366 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C23173 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C23167 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C23174 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C48573 +
            ((C47360 * C677 - C48412 * C682 + C47352 * C2304 - C48419 * C2310 +
              C47366 * C3252 - C36005 * C3255) *
                 C23173 +
             (C47360 * C683 - C48412 * C692 + C47352 * C2311 - C48419 * C2322 +
              C47366 * C3256 - C36005 * C3261) *
                 C23167 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C23174 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C23173 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C23167 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C23174 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C48573 +
            (C37582 * C23173 + C37583 * C23167 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C23174 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C381 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C23173 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C23167 +
             (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C23174 +
             (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48224) *
                C48573 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C23173 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C23167 +
             (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
              C36005 * C3259 - C47366 * C3254) *
                 C23174 +
             (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
              C36005 * C3263 - C47366 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C48300 * C505 +
           (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C23173 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C23167 +
             C37582 * C23174 + C37583 * C48224) *
                C48573 +
            ((C47360 * C575 - C48412 * C580 + C47352 * C1419 - C48419 * C1423 +
              C47366 * C2307 - C36005 * C2316) *
                 C23173 +
             (C47360 * C581 - C48412 * C590 + C47352 * C1424 - C48419 * C1431 +
              C47366 * C2317 - C36005 * C2325) *
                 C23167 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C23174 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C23173 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C23167 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C23174 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C48573 +
            (C37582 * C23173 + C37583 * C23167 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C23174 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C48300 * C505 +
           ((C37580 * C23173 + C37581 * C23167 +
             (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C23174 +
             (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48224) *
                C48573 +
            ((C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C23173 +
             (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C23167 +
             (C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
              C36005 * C2320 - C47366 * C2309) *
                 C23174 +
             (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
              C36005 * C2327 - C47366 * C2321) *
                 C48224) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C23173 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C23167 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C48573 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
            C37580 * C23174 + C37581 * C48224) *
               C48376) *
              C48300 * C571 +
          (((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C23173 +
            (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C23167 +
            C37582 * C23174 + C37583 * C48224) *
               C48573 +
           ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C23173 +
            (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C23167 +
            (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C23174 +
            (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
               C48376) *
              C48300 * C572 +
          (((C38131 - C38130 + C38133 - C38132 + C38135 - C38134) * C23173 +
            (C38137 - C38136 + C38139 - C38138 + C38141 - C38140) * C23167 +
            (C37565 - C37564 + C37567 - C37566 + C37569 - C37568) * C23174 +
            (C37571 - C37570 + C37573 - C37572 + C37575 - C37574) * C48224) *
               C48573 +
           ((C48412 * C1233 - C47360 * C1229 + C48419 * C1885 - C47352 * C1882 +
             C36005 * C9592 - C47366 * C9590) *
                C23173 +
            (C48412 * C1241 - C47360 * C1234 + C48419 * C1891 - C47352 * C1886 +
             C36005 * C9596 - C47366 * C9593) *
                C23167 +
            (C48412 * C1235 - C47360 * C1230 + C48419 * C1887 - C47352 * C1883 +
             C36005 * C9855 - C47366 * C9854) *
                C23174 +
            (C48412 * C1242 - C47360 * C1236 + C48419 * C1892 - C47352 * C1888 +
             C36005 * C9857 - C47366 * C9856) *
                C48224) *
               C48376) *
              C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C381 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C23173 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C23167 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C23174 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C48573 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C23173 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C23167 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C23174 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C505 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C23173 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C23167 +
             C37582 * C23174 + C37583 * C48224) *
                C48573 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C23173 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C23167 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C23174 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C381 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C23173 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C23167 +
             (C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C23174 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48224) *
                C48573 +
            ((C48412 * C1423 - C47360 * C1419 + C48419 * C2316 -
              C47352 * C2307 + C36005 * C10042 - C47366 * C10040) *
                 C23173 +
             (C48412 * C1431 - C47360 * C1424 + C48419 * C2325 -
              C47352 * C2317 + C36005 * C10046 - C47366 * C10043) *
                 C23167 +
             (C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C23174 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C23173 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C23167 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C23174 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C48573 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C23173 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C23167 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C23174 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C23173 +
             (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C23167 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C23174 +
             (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48224) *
                C48573 +
            (C37582 * C23173 + C37583 * C23167 +
             (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C23174 +
             (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C48224) *
                C48376) *
               C779 +
           (((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C23173 +
             (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C23167 +
             (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C23174 +
             (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48224) *
                C48573 +
            ((C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C23173 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C23167 +
             (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
              C36005 * C3259 - C47366 * C3254) *
                 C23174 +
             (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
              C36005 * C3263 - C47366 * C3260) *
                 C48224) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
              C36005 * C933 - C47366 * C928) *
                 C23173 +
             (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
              C36005 * C943 - C47366 * C934) *
                 C23167 +
             (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
             (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
                C48573 +
            ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
             (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
             C37580 * C23174 + C37581 * C48224) *
                C48376) *
               C779 +
           (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
              C47366 * C2810 - C36005 * C2814) *
                 C23173 +
             (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
              C47366 * C2815 - C36005 * C2822) *
                 C23167 +
             (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C23174 +
             (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
                C48573 +
            ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C23173 +
             (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C23167 +
             (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C23174 +
             (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
                C48376) *
               C48603) *
              C255 +
          ((((C37541 - C37540 + C37543 - C37542 + C37545 - C37544) * C23173 +
             (C37547 - C37546 + C37549 - C37548 + C37551 - C37550) * C23167 +
             C37582 * C23174 + C37583 * C48224) *
                C48573 +
            ((C38130 - C38131 + C38132 - C38133 + C38134 - C38135) * C23173 +
             (C38136 - C38137 + C38138 - C38139 + C38140 - C38141) * C23167 +
             (C37564 - C37565 + C37566 - C37567 + C37568 - C37569) * C23174 +
             (C37570 - C37571 + C37572 - C37573 + C37574 - C37575) * C48224) *
                C48376) *
               C779 +
           (((C38337 - C38336 + C38339 - C38338 + C38341 - C38340) * C23173 +
             (C38343 - C38342 + C38345 - C38344 + C38347 - C38346) * C23167 +
             (C37779 - C37778 + C37781 - C37780 + C37783 - C37782) * C23174 +
             (C37785 - C37784 + C37787 - C37786 + C37789 - C37788) * C48224) *
                C48573 +
            ((C48412 * C1423 - C47360 * C1419 + C48419 * C2316 -
              C47352 * C2307 + C36005 * C10042 - C47366 * C10040) *
                 C23173 +
             (C48412 * C1431 - C47360 * C1424 + C48419 * C2325 -
              C47352 * C2317 + C36005 * C10046 - C47366 * C10043) *
                 C23167 +
             (C48412 * C1425 - C47360 * C1420 + C48419 * C2318 -
              C47352 * C2308 + C36005 * C10044 - C47366 * C10041) *
                 C23174 +
             (C48412 * C1432 - C47360 * C1426 + C48419 * C2326 -
              C47352 * C2319 + C36005 * C10047 - C47366 * C10045) *
                 C48224) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C23173 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C23167 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C23174 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48224) *
               C48573 +
           ((C37540 - C37541 + C37542 - C37543 + C37544 - C37545) * C23173 +
            (C37546 - C37547 + C37548 - C37549 + C37550 - C37551) * C23167 +
            C37580 * C23174 + C37581 * C48224) *
               C48376) *
              C925 +
          (((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C23173 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C23167 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C23174 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48224) *
               C48573 +
           ((C38336 - C38337 + C38338 - C38339 + C38340 - C38341) * C23173 +
            (C38342 - C38343 + C38344 - C38345 + C38346 - C38347) * C23167 +
            (C37778 - C37779 + C37780 - C37781 + C37782 - C37783) * C23174 +
            (C37784 - C37785 + C37786 - C37787 + C37788 - C37789) * C48224) *
               C48376) *
              C926 +
          (((C48412 * C933 - C47360 * C928 + C48419 * C2814 - C47352 * C2810 +
             C36005 * C3669 - C47366 * C3666) *
                C23173 +
            (C48412 * C943 - C47360 * C934 + C48419 * C2822 - C47352 * C2815 +
             C36005 * C3675 - C47366 * C3670) *
                C23167 +
            (C48412 * C935 - C47360 * C929 + C48419 * C2816 - C47352 * C2811 +
             C36005 * C3671 - C47366 * C3667) *
                C23174 +
            (C48412 * C944 - C47360 * C936 + C48419 * C2823 - C47352 * C2817 +
             C36005 * C3676 - C47366 * C3672) *
                C48224) *
               C48573 +
           ((C48412 * C2310 - C47360 * C2304 + C48419 * C3255 - C47352 * C3252 +
             C36005 * C10907 - C47366 * C10905) *
                C23173 +
            (C48412 * C2322 - C47360 * C2311 + C48419 * C3261 - C47352 * C3256 +
             C36005 * C10911 - C47366 * C10908) *
                C23167 +
            (C48412 * C2312 - C47360 * C2305 + C48419 * C3257 - C47352 * C3253 +
             C36005 * C17530 - C47366 * C17529) *
                C23174 +
            (C48412 * C2323 - C47360 * C2313 + C48419 * C3262 - C47352 * C3258 +
             C36005 * C17532 - C47366 * C17531) *
                C48224) *
               C48376) *
              C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C30334 * C265 - C30336 * C259 + C48416 * C682 - C30337 * C677) *
                C23173 +
            (C30334 * C277 - C30336 * C266 + C48416 * C692 - C30337 * C683) *
                C23167 +
            (C30514 - C30513 + C30516 - C30515) * C23174 +
            (C30518 - C30517 + C30520 - C30519) * C48224) *
               C48629 +
           ((C30334 * C580 - C30336 * C575 + C48416 * C1423 - C30337 * C1419) *
                C23173 +
            (C30334 * C590 - C30336 * C581 + C48416 * C1431 - C30337 * C1424) *
                C23167 +
            (C31553 - C31554 + C31555 - C31556) * C23174 +
            (C31557 - C31558 + C31559 - C31560) * C48224) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C23173 +
            (C30344 - C30343 + C30346 - C30345) * C23167 +
            (C30348 - C30347 + C30350 - C30349) * C23174 +
            (C30352 - C30351 + C30354 - C30353) * C48224) *
               C48641 +
           ((C30513 - C30514 + C30515 - C30516) * C23173 +
            (C30517 - C30518 + C30519 - C30520) * C23167 +
            (C30521 - C30522 + C30523 - C30524) * C23174 +
            (C30525 - C30526 + C30527 - C30528) * C48224) *
               C48629 +
           ((C31554 - C31553 + C31556 - C31555) * C23173 +
            (C31558 - C31557 + C31560 - C31559) * C23167 +
            (C31561 - C31562 + C31563 - C31564) * C23174 +
            (C31565 - C31566 + C31567 - C31568) * C48224) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C30379 * C23173 + C30380 * C23167 + C30381 * C23174 +
            C30382 * C48224) *
               C48641 +
           ((C30522 - C30521 + C30524 - C30523) * C23173 +
            (C30526 - C30525 + C30528 - C30527) * C23167 +
            (C30530 - C30529 + C30532 - C30531) * C23174 +
            (C30534 - C30533 + C30536 - C30535) * C48224) *
               C48629 +
           ((C31562 - C31561 + C31564 - C31563) * C23173 +
            (C31566 - C31565 + C31568 - C31567) * C23167 +
            (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                C23174 +
            (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                C48224) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C48300 * C48283 * C110 +
          ((C30340 - C30339 + C30342 - C30341) * C22089 +
           (C30344 - C30343 + C30346 - C30345) * C48647 +
           (C30348 - C30347 + C30350 - C30349) * C22090 +
           (C30352 - C30351 + C30354 - C30353) * C48640 +
           (C30356 - C30355 + C30358 - C30357) * C22091 +
           (C30360 - C30359 + C30362 - C30361) * C48627 +
           (C30363 - C30364 + C30365 - C30366) * C22092 +
           (C30367 - C30368 + C30369 - C30370) * C48610) *
              C48318 * C48300 * C48283 * C111 +
          (C30379 * C22089 + C30380 * C48647 + C30381 * C22090 +
           C30382 * C48640 + (C30364 - C30363 + C30366 - C30365) * C22091 +
           (C30368 - C30367 + C30370 - C30369) * C48627 +
           (C30334 * C136 - C30336 * C124 + C48416 * C399 - C30337 * C388) *
               C22092 +
           (C30334 * C145 - C30336 * C137 + C48416 * C406 - C30337 * C400) *
               C48610) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
            C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
               C23173 +
           (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
            C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
               C23167 +
           (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
            C33239) *
               C23174 +
           (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
            C33247) *
               C48224) *
              C48318 * C48300 * C48283 * C110 +
          ((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
            C33238) *
               C23173 +
           (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
            C33246) *
               C23167 +
           (C33248 - C33249 + C33250 - C33251 + C33252 - C33253 + C33254 -
            C33255) *
               C23174 +
           (C33256 - C33257 + C33258 - C33259 + C33260 - C33261 + C33262 -
            C33263) *
               C48224) *
              C48318 * C48300 * C48283 * C111 +
          ((C33249 - C33248 + C33251 - C33250 + C33253 - C33252 + C33255 -
            C33254) *
               C23173 +
           (C33257 - C33256 + C33259 - C33258 + C33261 - C33260 + C33263 -
            C33262) *
               C23167 +
           (C48649 * C132 - C33227 * C122 + C48646 * C395 - C33228 * C386 +
            C48637 * C939 - C33229 * C931 + C48622 * C2820 - C33230 * C2813) *
               C23174 +
           (C48649 * C143 - C33227 * C133 + C48646 * C404 - C33228 * C396 +
            C48637 * C946 - C33229 * C940 + C48622 * C2825 - C33230 * C2821) *
               C48224) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C30336 * C1229 - C30334 * C1233 + C30337 * C1882 -
              C48416 * C1885) *
                 C23173 +
             (C30336 * C1234 - C30334 * C1241 + C30337 * C1886 -
              C48416 * C1891) *
                 C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C48300 * C255 +
           ((C31803 * C23173 + C31804 * C23167 +
             (C30522 - C30521 + C30524 - C30523) * C23174 +
             (C30526 - C30525 + C30528 - C30527) * C48224) *
                C48641 +
            (C31805 * C23173 + C31806 * C23167 +
             (C31562 - C31561 + C31564 - C31563) * C23174 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48629 +
            ((C31796 - C31795 + C31798 - C31797) * C23173 +
             (C31800 - C31799 + C31802 - C31801) * C23167 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C23174 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C48300 * C255 +
           ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C48300 * C255 +
           ((C30514 - C30513 + C30516 - C30515) * C22089 +
            (C30518 - C30517 + C30520 - C30519) * C48647 +
            (C30522 - C30521 + C30524 - C30523) * C22090 +
            (C30526 - C30525 + C30528 - C30527) * C48640 +
            (C30530 - C30529 + C30532 - C30531) * C22091 +
            (C30534 - C30533 + C30536 - C30535) * C48627 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C22092 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C48300 * C255 +
           ((C33227 * C259 - C48649 * C265 + C33228 * C677 - C48646 * C682 +
             C33229 * C2304 - C48637 * C2310 + C33230 * C3252 -
             C48622 * C3255) *
                C23173 +
            (C33227 * C266 - C48649 * C277 + C33228 * C683 - C48646 * C692 +
             C33229 * C2311 - C48637 * C2322 + C33230 * C3256 -
             C48622 * C3261) *
                C23167 +
            (C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
             C33401) *
                C23174 +
            (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
             C33409) *
                C48224) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
             C33238) *
                C23173 +
            (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
             C33246) *
                C23167 +
            (C33248 - C33249 + C33250 - C33251 + C33252 - C33253 + C33254 -
             C33255) *
                C23174 +
            (C33256 - C33257 + C33258 - C33259 + C33260 - C33261 + C33262 -
             C33263) *
                C48224) *
               C48318 * C48300 * C255 +
           ((C33395 - C33394 + C33397 - C33396 + C33399 - C33398 + C33401 -
             C33400) *
                C23173 +
            (C33403 - C33402 + C33405 - C33404 + C33407 - C33406 + C33409 -
             C33408) *
                C23167 +
            (C48649 * C269 - C33227 * C261 + C48646 * C686 - C33228 * C679 +
             C48637 * C2314 - C33229 * C2306 + C48622 * C3259 -
             C33230 * C3254) *
                C23174 +
            (C48649 * C279 - C33227 * C270 + C48646 * C694 - C33228 * C687 +
             C48637 * C2324 - C33229 * C2315 + C48622 * C3263 -
             C33230 * C3260) *
                C48224) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C30336 * C677 - C30334 * C682 + C30337 * C2304 - C48416 * C2310) *
                 C23173 +
             (C30336 * C683 - C30334 * C692 + C30337 * C2311 - C48416 * C2322) *
                 C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C30336 * C1419 - C30334 * C1423 + C30337 * C2307 -
              C48416 * C2316) *
                 C23173 +
             (C30336 * C1424 - C30334 * C1431 + C30337 * C2317 -
              C48416 * C2325) *
                 C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C23173 +
             (C30672 - C30671 + C30674 - C30673) * C23167 +
             (C30676 - C30675 + C30678 - C30677) * C23174 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48641 +
            ((C32006 - C32005 + C32008 - C32007) * C23173 +
             (C32010 - C32009 + C32012 - C32011) * C23167 +
             (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                 C23174 +
             (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                 C48224) *
                C48629 +
            ((C32014 - C32013 + C32016 - C32015) * C23173 +
             (C32018 - C32017 + C32020 - C32019) * C23167 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C23174 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C381 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C381 +
           ((C30668 - C30667 + C30670 - C30669) * C22089 +
            (C30672 - C30671 + C30674 - C30673) * C48647 +
            (C30676 - C30675 + C30678 - C30677) * C22090 +
            (C30680 - C30679 + C30682 - C30681) * C48640 +
            (C30684 - C30683 + C30686 - C30685) * C22091 +
            (C30688 - C30687 + C30690 - C30689) * C48627 +
            (C30334 * C397 - C30336 * C387 + C48416 * C941 - C30337 * C932) *
                C22092 +
            (C30334 * C405 - C30336 * C398 + C48416 * C947 - C30337 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C381 +
           ((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
             C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
             C48622 * C3669) *
                C23173 +
            (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
             C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
             C48622 * C3675) *
                C23167 +
            (C33540 - C33541 + C33542 - C33543 + C33544 - C33545 + C33546 -
             C33547) *
                C23174 +
            (C33548 - C33549 + C33550 - C33551 + C33552 - C33553 + C33554 -
             C33555) *
                C48224) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
             C33238) *
                C23173 +
            (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
             C33246) *
                C23167 +
            (C33248 - C33249 + C33250 - C33251 + C33252 - C33253 + C33254 -
             C33255) *
                C23174 +
            (C33256 - C33257 + C33258 - C33259 + C33260 - C33261 + C33262 -
             C33263) *
                C48224) *
               C48318 * C381 +
           ((C33541 - C33540 + C33543 - C33542 + C33545 - C33544 + C33547 -
             C33546) *
                C23173 +
            (C33549 - C33548 + C33551 - C33550 + C33553 - C33552 + C33555 -
             C33554) *
                C23167 +
            (C48649 * C393 - C33227 * C385 + C48646 * C937 - C33228 * C930 +
             C48637 * C2818 - C33229 * C2812 + C48622 * C3673 -
             C33230 * C3668) *
                C23174 +
            (C48649 * C403 - C33227 * C394 + C48646 * C945 - C33228 * C938 +
             C48637 * C2824 - C33229 * C2819 + C48622 * C3677 -
             C33230 * C3674) *
                C48224) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C30336 * C1229 - C30334 * C1233 + C30337 * C1882 -
              C48416 * C1885) *
                 C23173 +
             (C30336 * C1234 - C30334 * C1241 + C30337 * C1886 -
              C48416 * C1891) *
                 C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C48300 * C505 +
           ((C31803 * C23173 + C31804 * C23167 +
             (C30522 - C30521 + C30524 - C30523) * C23174 +
             (C30526 - C30525 + C30528 - C30527) * C48224) *
                C48641 +
            (C31805 * C23173 + C31806 * C23167 +
             (C31562 - C31561 + C31564 - C31563) * C23174 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48629 +
            ((C31796 - C31795 + C31798 - C31797) * C23173 +
             (C31800 - C31799 + C31802 - C31801) * C23167 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C23174 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C48300 * C505 +
           ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C48300 * C505 +
           ((C30514 - C30513 + C30516 - C30515) * C22089 +
            (C30518 - C30517 + C30520 - C30519) * C48647 +
            (C30522 - C30521 + C30524 - C30523) * C22090 +
            (C30526 - C30525 + C30528 - C30527) * C48640 +
            (C30530 - C30529 + C30532 - C30531) * C22091 +
            (C30534 - C30533 + C30536 - C30535) * C48627 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C22092 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C48300 * C505 +
           ((C33227 * C259 - C48649 * C265 + C33228 * C677 - C48646 * C682 +
             C33229 * C2304 - C48637 * C2310 + C33230 * C3252 -
             C48622 * C3255) *
                C23173 +
            (C33227 * C266 - C48649 * C277 + C33228 * C683 - C48646 * C692 +
             C33229 * C2311 - C48637 * C2322 + C33230 * C3256 -
             C48622 * C3261) *
                C23167 +
            (C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
             C33401) *
                C23174 +
            (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
             C33409) *
                C48224) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
             C33238) *
                C23173 +
            (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
             C33246) *
                C23167 +
            (C33248 - C33249 + C33250 - C33251 + C33252 - C33253 + C33254 -
             C33255) *
                C23174 +
            (C33256 - C33257 + C33258 - C33259 + C33260 - C33261 + C33262 -
             C33263) *
                C48224) *
               C48318 * C48300 * C505 +
           ((C33395 - C33394 + C33397 - C33396 + C33399 - C33398 + C33401 -
             C33400) *
                C23173 +
            (C33403 - C33402 + C33405 - C33404 + C33407 - C33406 + C33409 -
             C33408) *
                C23167 +
            (C48649 * C269 - C33227 * C261 + C48646 * C686 - C33228 * C679 +
             C48637 * C2314 - C33229 * C2306 + C48622 * C3259 -
             C33230 * C3254) *
                C23174 +
            (C48649 * C279 - C33227 * C270 + C48646 * C694 - C33228 * C687 +
             C48637 * C2324 - C33229 * C2315 + C48622 * C3263 -
             C33230 * C3260) *
                C48224) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C31763 - C31764 + C31765 - C31766) * C23173 +
            (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
            C31804 * C48224) *
               C48629 +
           C32381 * C48606) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C23173 +
            (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
            C31808 * C48224) *
               C48641 +
           ((C31776 - C31775 + C31778 - C31777) * C23173 +
            (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
            C31810 * C48224) *
               C48629 +
           ((C32367 - C32368 + C32369 - C32370) * C23173 +
            (C32371 - C32372 + C32373 - C32374) * C23167 +
            (C31795 - C31796 + C31797 - C31798) * C23174 +
            (C31799 - C31800 + C31801 - C31802) * C48224) *
               C48606) *
              C48300 * C572 +
          (C32381 * C48641 +
           ((C32368 - C32367 + C32370 - C32369) * C23173 +
            (C32372 - C32371 + C32374 - C32373) * C23167 +
            (C31796 - C31795 + C31798 - C31797) * C23174 +
            (C31800 - C31799 + C31802 - C31801) * C48224) *
               C48629 +
           ((C30334 * C1710 - C30336 * C1707 + C48416 * C9099 -
             C30337 * C9097) *
                C23173 +
            (C30334 * C1716 - C30336 * C1711 + C48416 * C9103 -
             C30337 * C9100) *
                C23167 +
            (C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
             C30337 * C9098) *
                C23174 +
            (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
             C30337 * C9102) *
                C48224) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C48300 * C571 +
          ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
               C22089 +
           (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
               C48647 +
           (C30513 - C30514 + C30515 - C30516) * C22090 +
           (C30517 - C30518 + C30519 - C30520) * C48640 +
           (C30521 - C30522 + C30523 - C30524) * C22091 +
           (C30525 - C30526 + C30527 - C30528) * C48627 +
           (C30529 - C30530 + C30531 - C30532) * C22092 +
           (C30533 - C30534 + C30535 - C30536) * C48610) *
              C48318 * C48300 * C572 +
          ((C30334 * C580 - C30336 * C575 + C48416 * C1423 - C30337 * C1419) *
               C22089 +
           (C30334 * C590 - C30336 * C581 + C48416 * C1431 - C30337 * C1424) *
               C48647 +
           (C30334 * C582 - C30336 * C576 + C48416 * C1425 - C30337 * C1420) *
               C22090 +
           (C30334 * C591 - C30336 * C583 + C48416 * C1432 - C30337 * C1426) *
               C48640 +
           (C30334 * C584 - C30336 * C577 + C48416 * C1427 - C30337 * C1421) *
               C22091 +
           (C30334 * C592 - C30336 * C585 + C48416 * C1433 - C30337 * C1428) *
               C48627 +
           (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
               C22092 +
           (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
               C48610) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
            C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
               C23173 +
           (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
            C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
               C23167 +
           (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
            C33239) *
               C23174 +
           (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
            C33247) *
               C48224) *
              C48318 * C48300 * C571 +
          ((C33227 * C259 - C48649 * C265 + C33228 * C677 - C48646 * C682 +
            C33229 * C2304 - C48637 * C2310 + C33230 * C3252 - C48622 * C3255) *
               C23173 +
           (C33227 * C266 - C48649 * C277 + C33228 * C683 - C48646 * C692 +
            C33229 * C2311 - C48637 * C2322 + C33230 * C3256 - C48622 * C3261) *
               C23167 +
           (C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
            C33401) *
               C23174 +
           (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
            C33409) *
               C48224) *
              C48318 * C48300 * C572 +
          ((C48649 * C580 - C33227 * C575 + C48646 * C1423 - C33228 * C1419 +
            C48637 * C2316 - C33229 * C2307 + C48622 * C10042 -
            C33230 * C10040) *
               C23173 +
           (C48649 * C590 - C33227 * C581 + C48646 * C1431 - C33228 * C1424 +
            C48637 * C2325 - C33229 * C2317 + C48622 * C10046 -
            C33230 * C10043) *
               C23167 +
           (C48649 * C582 - C33227 * C576 + C48646 * C1425 - C33228 * C1420 +
            C48637 * C2318 - C33229 * C2308 + C48622 * C10044 -
            C33230 * C10041) *
               C23174 +
           (C48649 * C591 - C33227 * C583 + C48646 * C1432 - C33228 * C1426 +
            C48637 * C2326 - C33229 * C2319 + C48622 * C10047 -
            C33230 * C10045) *
               C48224) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C32367 - C32368 + C32369 - C32370) * C23173 +
             (C32371 - C32372 + C32373 - C32374) * C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C23173 +
             (C32581 - C32580 + C32583 - C32582) * C23167 +
             (C32006 - C32005 + C32008 - C32007) * C23174 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48641 +
            ((C32585 - C32584 + C32587 - C32586) * C23173 +
             (C32589 - C32588 + C32591 - C32590) * C23167 +
             (C32014 - C32013 + C32016 - C32015) * C23174 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48629 +
            ((C30334 * C1885 - C30336 * C1882 + C48416 * C9592 -
              C30337 * C9590) *
                 C23173 +
             (C30334 * C1891 - C30336 * C1886 + C48416 * C9596 -
              C30337 * C9593) *
                 C23167 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C23174 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C381 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C505 +
          (((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C381 +
           ((C30334 * C682 - C30336 * C677 + C48416 * C2310 - C30337 * C2304) *
                C22089 +
            (C30334 * C692 - C30336 * C683 + C48416 * C2322 - C30337 * C2311) *
                C48647 +
            (C30334 * C684 - C30336 * C678 + C48416 * C2312 - C30337 * C2305) *
                C22090 +
            (C30334 * C693 - C30336 * C685 + C48416 * C2323 - C30337 * C2313) *
                C48640 +
            (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                C22091 +
            (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                C48627 +
            (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                C22092 +
            (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C381 +
           ((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
             C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
             C48622 * C3669) *
                C23173 +
            (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
             C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
             C48622 * C3675) *
                C23167 +
            (C33540 - C33541 + C33542 - C33543 + C33544 - C33545 + C33546 -
             C33547) *
                C23174 +
            (C33548 - C33549 + C33550 - C33551 + C33552 - C33553 + C33554 -
             C33555) *
                C48224) *
               C48318 * C48603) *
              C505 +
          (((C33227 * C259 - C48649 * C265 + C33228 * C677 - C48646 * C682 +
             C33229 * C2304 - C48637 * C2310 + C33230 * C3252 -
             C48622 * C3255) *
                C23173 +
            (C33227 * C266 - C48649 * C277 + C33228 * C683 - C48646 * C692 +
             C33229 * C2311 - C48637 * C2322 + C33230 * C3256 -
             C48622 * C3261) *
                C23167 +
            (C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
             C33401) *
                C23174 +
            (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
             C33409) *
                C48224) *
               C48318 * C381 +
           ((C48649 * C682 - C33227 * C677 + C48646 * C2310 - C33228 * C2304 +
             C48637 * C3255 - C33229 * C3252 + C48622 * C10907 -
             C33230 * C10905) *
                C23173 +
            (C48649 * C692 - C33227 * C683 + C48646 * C2322 - C33228 * C2311 +
             C48637 * C3261 - C33229 * C3256 + C48622 * C10911 -
             C33230 * C10908) *
                C23167 +
            (C48649 * C684 - C33227 * C678 + C48646 * C2312 - C33228 * C2305 +
             C48637 * C3257 - C33229 * C3253 + C48622 * C17530 -
             C33230 * C17529) *
                C23174 +
            (C48649 * C693 - C33227 * C685 + C48646 * C2323 - C33228 * C2313 +
             C48637 * C3262 - C33229 * C3258 + C48622 * C17532 -
             C33230 * C17531) *
                C48224) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C23173 +
             (C30672 - C30671 + C30674 - C30673) * C23167 +
             (C30676 - C30675 + C30678 - C30677) * C23174 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48641 +
            ((C32006 - C32005 + C32008 - C32007) * C23173 +
             (C32010 - C32009 + C32012 - C32011) * C23167 +
             (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                 C23174 +
             (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                 C48224) *
                C48629 +
            ((C32014 - C32013 + C32016 - C32015) * C23173 +
             (C32018 - C32017 + C32020 - C32019) * C23167 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C23174 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C779 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C779 +
           ((C30668 - C30667 + C30670 - C30669) * C22089 +
            (C30672 - C30671 + C30674 - C30673) * C48647 +
            (C30676 - C30675 + C30678 - C30677) * C22090 +
            (C30680 - C30679 + C30682 - C30681) * C48640 +
            (C30684 - C30683 + C30686 - C30685) * C22091 +
            (C30688 - C30687 + C30690 - C30689) * C48627 +
            (C30334 * C397 - C30336 * C387 + C48416 * C941 - C30337 * C932) *
                C22092 +
            (C30334 * C405 - C30336 * C398 + C48416 * C947 - C30337 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C779 +
           ((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
             C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
             C48622 * C3669) *
                C23173 +
            (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
             C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
             C48622 * C3675) *
                C23167 +
            (C33540 - C33541 + C33542 - C33543 + C33544 - C33545 + C33546 -
             C33547) *
                C23174 +
            (C33548 - C33549 + C33550 - C33551 + C33552 - C33553 + C33554 -
             C33555) *
                C48224) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C33233 - C33232 + C33235 - C33234 + C33237 - C33236 + C33239 -
             C33238) *
                C23173 +
            (C33241 - C33240 + C33243 - C33242 + C33245 - C33244 + C33247 -
             C33246) *
                C23167 +
            (C33248 - C33249 + C33250 - C33251 + C33252 - C33253 + C33254 -
             C33255) *
                C23174 +
            (C33256 - C33257 + C33258 - C33259 + C33260 - C33261 + C33262 -
             C33263) *
                C48224) *
               C48318 * C779 +
           ((C33541 - C33540 + C33543 - C33542 + C33545 - C33544 + C33547 -
             C33546) *
                C23173 +
            (C33549 - C33548 + C33551 - C33550 + C33553 - C33552 + C33555 -
             C33554) *
                C23167 +
            (C48649 * C393 - C33227 * C385 + C48646 * C937 - C33228 * C930 +
             C48637 * C2818 - C33229 * C2812 + C48622 * C3673 -
             C33230 * C3668) *
                C23174 +
            (C48649 * C403 - C33227 * C394 + C48646 * C945 - C33228 * C938 +
             C48637 * C2824 - C33229 * C2819 + C48622 * C3677 -
             C33230 * C3674) *
                C48224) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C32367 - C32368 + C32369 - C32370) * C23173 +
             (C32371 - C32372 + C32373 - C32374) * C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C23173 +
             (C32581 - C32580 + C32583 - C32582) * C23167 +
             (C32006 - C32005 + C32008 - C32007) * C23174 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48641 +
            ((C32585 - C32584 + C32587 - C32586) * C23173 +
             (C32589 - C32588 + C32591 - C32590) * C23167 +
             (C32014 - C32013 + C32016 - C32015) * C23174 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48629 +
            ((C30334 * C1885 - C30336 * C1882 + C48416 * C9592 -
              C30337 * C9590) *
                 C23173 +
             (C30334 * C1891 - C30336 * C1886 + C48416 * C9596 -
              C30337 * C9593) *
                 C23167 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C23174 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C779 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C255 +
          (((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C779 +
           ((C30334 * C682 - C30336 * C677 + C48416 * C2310 - C30337 * C2304) *
                C22089 +
            (C30334 * C692 - C30336 * C683 + C48416 * C2322 - C30337 * C2311) *
                C48647 +
            (C30334 * C684 - C30336 * C678 + C48416 * C2312 - C30337 * C2305) *
                C22090 +
            (C30334 * C693 - C30336 * C685 + C48416 * C2323 - C30337 * C2313) *
                C48640 +
            (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                C22091 +
            (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                C48627 +
            (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                C22092 +
            (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
             C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
                C23173 +
            (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
             C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
                C23167 +
            (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
             C33239) *
                C23174 +
            (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
             C33247) *
                C48224) *
               C48318 * C779 +
           ((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
             C33229 * C2810 - C48637 * C2814 + C33230 * C3666 -
             C48622 * C3669) *
                C23173 +
            (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
             C33229 * C2815 - C48637 * C2822 + C33230 * C3670 -
             C48622 * C3675) *
                C23167 +
            (C33540 - C33541 + C33542 - C33543 + C33544 - C33545 + C33546 -
             C33547) *
                C23174 +
            (C33548 - C33549 + C33550 - C33551 + C33552 - C33553 + C33554 -
             C33555) *
                C48224) *
               C48318 * C48603) *
              C255 +
          (((C33227 * C259 - C48649 * C265 + C33228 * C677 - C48646 * C682 +
             C33229 * C2304 - C48637 * C2310 + C33230 * C3252 -
             C48622 * C3255) *
                C23173 +
            (C33227 * C266 - C48649 * C277 + C33228 * C683 - C48646 * C692 +
             C33229 * C2311 - C48637 * C2322 + C33230 * C3256 -
             C48622 * C3261) *
                C23167 +
            (C33394 - C33395 + C33396 - C33397 + C33398 - C33399 + C33400 -
             C33401) *
                C23174 +
            (C33402 - C33403 + C33404 - C33405 + C33406 - C33407 + C33408 -
             C33409) *
                C48224) *
               C48318 * C779 +
           ((C48649 * C682 - C33227 * C677 + C48646 * C2310 - C33228 * C2304 +
             C48637 * C3255 - C33229 * C3252 + C48622 * C10907 -
             C33230 * C10905) *
                C23173 +
            (C48649 * C692 - C33227 * C683 + C48646 * C2322 - C33228 * C2311 +
             C48637 * C3261 - C33229 * C3256 + C48622 * C10911 -
             C33230 * C10908) *
                C23167 +
            (C48649 * C684 - C33227 * C678 + C48646 * C2312 - C33228 * C2305 +
             C48637 * C3257 - C33229 * C3253 + C48622 * C17530 -
             C33230 * C17529) *
                C23174 +
            (C48649 * C693 - C33227 * C685 + C48646 * C2323 - C33228 * C2313 +
             C48637 * C3262 - C33229 * C3258 + C48622 * C17532 -
             C33230 * C17531) *
                C48224) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C31763 - C31764 + C31765 - C31766) * C23173 +
            (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
            C31804 * C48224) *
               C48629 +
           C32381 * C48606) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C23173 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C23167 +
            (C30667 - C30668 + C30669 - C30670) * C23174 +
            (C30671 - C30672 + C30673 - C30674) * C48224) *
               C48641 +
           ((C32576 - C32577 + C32578 - C32579) * C23173 +
            (C32580 - C32581 + C32582 - C32583) * C23167 +
            (C32005 - C32006 + C32007 - C32008) * C23174 +
            (C32009 - C32010 + C32011 - C32012) * C48224) *
               C48629 +
           ((C32584 - C32585 + C32586 - C32587) * C23173 +
            (C32588 - C32589 + C32590 - C32591) * C23167 +
            (C32013 - C32014 + C32015 - C32016) * C23174 +
            (C32017 - C32018 + C32019 - C32020) * C48224) *
               C48606) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C23173 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C23167 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C23174 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48224) *
               C48641 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C23173 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C23167 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C23174 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48224) *
               C48629 +
           ((C30334 * C2316 - C30336 * C2307 + C48416 * C10042 -
             C30337 * C10040) *
                C23173 +
            (C30334 * C2325 - C30336 * C2317 + C48416 * C10046 -
             C30337 * C10043) *
                C23167 +
            (C30334 * C2318 - C30336 * C2308 + C48416 * C10044 -
             C30337 * C10041) *
                C23174 +
            (C30334 * C2326 - C30336 * C2319 + C48416 * C10047 -
             C30337 * C10045) *
                C48224) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C925 +
          ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
               C22089 +
           (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
               C48647 +
           (C30667 - C30668 + C30669 - C30670) * C22090 +
           (C30671 - C30672 + C30673 - C30674) * C48640 +
           (C30675 - C30676 + C30677 - C30678) * C22091 +
           (C30679 - C30680 + C30681 - C30682) * C48627 +
           (C30683 - C30684 + C30685 - C30686) * C22092 +
           (C30687 - C30688 + C30689 - C30690) * C48610) *
              C48318 * C926 +
          ((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
               C22089 +
           (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
               C48647 +
           (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
               C22090 +
           (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
               C48640 +
           (C30334 * C937 - C30336 * C930 + C48416 * C2818 - C30337 * C2812) *
               C22091 +
           (C30334 * C945 - C30336 * C938 + C48416 * C2824 - C30337 * C2819) *
               C48627 +
           (C30334 * C939 - C30336 * C931 + C48416 * C2820 - C30337 * C2813) *
               C22092 +
           (C30334 * C946 - C30336 * C940 + C48416 * C2825 - C30337 * C2821) *
               C48610) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48649 * C126 - C33227 * C119 + C48646 * C389 - C33228 * C383 +
            C48637 * C933 - C33229 * C928 + C48622 * C2814 - C33230 * C2810) *
               C23173 +
           (C48649 * C140 - C33227 * C127 + C48646 * C401 - C33228 * C390 +
            C48637 * C943 - C33229 * C934 + C48622 * C2822 - C33230 * C2815) *
               C23167 +
           (C33232 - C33233 + C33234 - C33235 + C33236 - C33237 + C33238 -
            C33239) *
               C23174 +
           (C33240 - C33241 + C33242 - C33243 + C33244 - C33245 + C33246 -
            C33247) *
               C48224) *
              C48318 * C925 +
          ((C33227 * C383 - C48649 * C389 + C33228 * C928 - C48646 * C933 +
            C33229 * C2810 - C48637 * C2814 + C33230 * C3666 - C48622 * C3669) *
               C23173 +
           (C33227 * C390 - C48649 * C401 + C33228 * C934 - C48646 * C943 +
            C33229 * C2815 - C48637 * C2822 + C33230 * C3670 - C48622 * C3675) *
               C23167 +
           (C33540 - C33541 + C33542 - C33543 + C33544 - C33545 + C33546 -
            C33547) *
               C23174 +
           (C33548 - C33549 + C33550 - C33551 + C33552 - C33553 + C33554 -
            C33555) *
               C48224) *
              C48318 * C926 +
          ((C48649 * C933 - C33227 * C928 + C48646 * C2814 - C33228 * C2810 +
            C48637 * C3669 - C33229 * C3666 + C48622 * C17617 -
            C33230 * C17615) *
               C23173 +
           (C48649 * C943 - C33227 * C934 + C48646 * C2822 - C33228 * C2815 +
            C48637 * C3675 - C33229 * C3670 + C48622 * C17621 -
            C33230 * C17618) *
               C23167 +
           (C48649 * C935 - C33227 * C929 + C48646 * C2816 - C33228 * C2811 +
            C48637 * C3671 - C33229 * C3667 + C48622 * C17619 -
            C33230 * C17616) *
               C23174 +
           (C48649 * C944 - C33227 * C936 + C48646 * C2823 - C33228 * C2817 +
            C48637 * C3676 - C33229 * C3672 + C48622 * C17622 -
            C33230 * C17620) *
               C48224) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
            C36005 * C933 - C47366 * C928) *
               C47235 +
           (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
            C36005 * C943 - C47366 * C934) *
               C48219 +
           (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
           (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
           C36054 * C47241 + C36055 * C25911) *
              C48318 * C48300 * C48283 * C110 +
          ((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47235 +
           (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48219 +
           (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47231 +
           (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48227 +
           (C36034 - C36035 + C36036 - C36037 + C36038 - C36039) * C47241 +
           (C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C25911) *
              C48318 * C48300 * C48283 * C111 +
          (C36054 * C47235 + C36055 * C48219 +
           (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C47231 +
           (C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C48227 +
           (C48412 * C134 - C47360 * C123 + C48419 * C397 - C47352 * C387 +
            C36005 * C941 - C47366 * C932) *
               C47241 +
           (C48412 * C144 - C47360 * C135 + C48419 * C405 - C47352 * C398 +
            C36005 * C947 - C47366 * C942) *
               C25911) *
              C48318 * C48300 * C48283 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C48300 * C255 +
           ((C47360 * C259 - C48412 * C265 + C47352 * C677 - C48419 * C682 +
             C47366 * C2304 - C36005 * C2310) *
                C47235 +
            (C47360 * C266 - C48412 * C277 + C47352 * C683 - C48419 * C692 +
             C47366 * C2311 - C36005 * C2322) *
                C48219 +
            (C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C47231 +
            (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C48227 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47241 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C25911) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47235 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48219 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47231 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48227 +
            (C36034 - C36035 + C36036 - C36037 + C36038 - C36039) * C47241 +
            (C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C25911) *
               C48318 * C48300 * C255 +
           ((C36203 - C36202 + C36205 - C36204 + C36207 - C36206) * C47235 +
            (C36209 - C36208 + C36211 - C36210 + C36213 - C36212) * C48219 +
            (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C47231 +
            (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48227 +
            (C48412 * C271 - C47360 * C262 + C48419 * C688 - C47352 * C680 +
             C36005 * C2637 - C47366 * C2636) *
                C47241 +
            (C48412 * C280 - C47360 * C272 + C48419 * C695 - C47352 * C689 +
             C36005 * C2639 - C47366 * C2638) *
                C25911) *
               C48318 * C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C381 +
           ((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C47235 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48219 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47231 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48227 +
            (C36384 - C36385 + C36386 - C36387 + C36388 - C36389) * C47241 +
            (C36390 - C36391 + C36392 - C36393 + C36394 - C36395) * C25911) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47235 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48219 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47231 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48227 +
            (C36034 - C36035 + C36036 - C36037 + C36038 - C36039) * C47241 +
            (C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C25911) *
               C48318 * C381 +
           ((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C47235 +
            (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48219 +
            (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C47231 +
            (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48227 +
            (C48412 * C395 - C47360 * C386 + C48419 * C939 - C47352 * C931 +
             C36005 * C2820 - C47366 * C2813) *
                C47241 +
            (C48412 * C404 - C47360 * C396 + C48419 * C946 - C47352 * C940 +
             C36005 * C2825 - C47366 * C2821) *
                C25911) *
               C48318 * C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C48300 * C505 +
           ((C47360 * C259 - C48412 * C265 + C47352 * C677 - C48419 * C682 +
             C47366 * C2304 - C36005 * C2310) *
                C47235 +
            (C47360 * C266 - C48412 * C277 + C47352 * C683 - C48419 * C692 +
             C47366 * C2311 - C36005 * C2322) *
                C48219 +
            (C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C47231 +
            (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C48227 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47241 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C25911) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47235 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48219 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47231 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48227 +
            (C36034 - C36035 + C36036 - C36037 + C36038 - C36039) * C47241 +
            (C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C25911) *
               C48318 * C48300 * C505 +
           ((C36203 - C36202 + C36205 - C36204 + C36207 - C36206) * C47235 +
            (C36209 - C36208 + C36211 - C36210 + C36213 - C36212) * C48219 +
            (C36215 - C36214 + C36217 - C36216 + C36219 - C36218) * C47231 +
            (C36221 - C36220 + C36223 - C36222 + C36225 - C36224) * C48227 +
            (C48412 * C271 - C47360 * C262 + C48419 * C688 - C47352 * C680 +
             C36005 * C2637 - C47366 * C2636) *
                C47241 +
            (C48412 * C280 - C47360 * C272 + C48419 * C695 - C47352 * C689 +
             C36005 * C2639 - C47366 * C2638) *
                C25911) *
               C48318 * C48300 * C48601) *
              C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
            C36005 * C933 - C47366 * C928) *
               C47235 +
           (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
            C36005 * C943 - C47366 * C934) *
               C48219 +
           (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
           (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
           C36054 * C47241 + C36055 * C25911) *
              C48318 * C48300 * C571 +
          ((C47360 * C259 - C48412 * C265 + C47352 * C677 - C48419 * C682 +
            C47366 * C2304 - C36005 * C2310) *
               C47235 +
           (C47360 * C266 - C48412 * C277 + C47352 * C683 - C48419 * C692 +
            C47366 * C2311 - C36005 * C2322) *
               C48219 +
           (C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C47231 +
           (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C48227 +
           (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47241 +
           (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C25911) *
              C48318 * C48300 * C572 +
          ((C48412 * C580 - C47360 * C575 + C48419 * C1423 - C47352 * C1419 +
            C36005 * C2316 - C47366 * C2307) *
               C47235 +
           (C48412 * C590 - C47360 * C581 + C48419 * C1431 - C47352 * C1424 +
            C36005 * C2325 - C47366 * C2317) *
               C48219 +
           (C48412 * C582 - C47360 * C576 + C48419 * C1425 - C47352 * C1420 +
            C36005 * C2318 - C47366 * C2308) *
               C47231 +
           (C48412 * C591 - C47360 * C583 + C48419 * C1432 - C47352 * C1426 +
            C36005 * C2326 - C47366 * C2319) *
               C48227 +
           (C48412 * C584 - C47360 * C577 + C48419 * C1427 - C47352 * C1421 +
            C36005 * C2320 - C47366 * C2309) *
               C47241 +
           (C48412 * C592 - C47360 * C585 + C48419 * C1433 - C47352 * C1428 +
            C36005 * C2327 - C47366 * C2321) *
               C25911) *
              C48318 * C48300 * C573) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C381 +
           ((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C47235 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48219 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47231 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48227 +
            (C36384 - C36385 + C36386 - C36387 + C36388 - C36389) * C47241 +
            (C36390 - C36391 + C36392 - C36393 + C36394 - C36395) * C25911) *
               C48318 * C48603) *
              C505 +
          (((C47360 * C259 - C48412 * C265 + C47352 * C677 - C48419 * C682 +
             C47366 * C2304 - C36005 * C2310) *
                C47235 +
            (C47360 * C266 - C48412 * C277 + C47352 * C683 - C48419 * C692 +
             C47366 * C2311 - C36005 * C2322) *
                C48219 +
            (C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C47231 +
            (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C48227 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47241 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C25911) *
               C48318 * C381 +
           ((C48412 * C682 - C47360 * C677 + C48419 * C2310 - C47352 * C2304 +
             C36005 * C3255 - C47366 * C3252) *
                C47235 +
            (C48412 * C692 - C47360 * C683 + C48419 * C2322 - C47352 * C2311 +
             C36005 * C3261 - C47366 * C3256) *
                C48219 +
            (C48412 * C684 - C47360 * C678 + C48419 * C2312 - C47352 * C2305 +
             C36005 * C3257 - C47366 * C3253) *
                C47231 +
            (C48412 * C693 - C47360 * C685 + C48419 * C2323 - C47352 * C2313 +
             C36005 * C3262 - C47366 * C3258) *
                C48227 +
            (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
             C36005 * C3259 - C47366 * C3254) *
                C47241 +
            (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
             C36005 * C3263 - C47366 * C3260) *
                C25911) *
               C48318 * C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C779 +
           ((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C47235 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48219 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47231 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48227 +
            (C36384 - C36385 + C36386 - C36387 + C36388 - C36389) * C47241 +
            (C36390 - C36391 + C36392 - C36393 + C36394 - C36395) * C25911) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C36011 - C36010 + C36013 - C36012 + C36015 - C36014) * C47235 +
            (C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C48219 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C47231 +
            (C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C48227 +
            (C36034 - C36035 + C36036 - C36037 + C36038 - C36039) * C47241 +
            (C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C25911) *
               C48318 * C779 +
           ((C36373 - C36372 + C36375 - C36374 + C36377 - C36376) * C47235 +
            (C36379 - C36378 + C36381 - C36380 + C36383 - C36382) * C48219 +
            (C36385 - C36384 + C36387 - C36386 + C36389 - C36388) * C47231 +
            (C36391 - C36390 + C36393 - C36392 + C36395 - C36394) * C48227 +
            (C48412 * C395 - C47360 * C386 + C48419 * C939 - C47352 * C931 +
             C36005 * C2820 - C47366 * C2813) *
                C47241 +
            (C48412 * C404 - C47360 * C396 + C48419 * C946 - C47352 * C940 +
             C36005 * C2825 - C47366 * C2821) *
                C25911) *
               C48318 * C48603) *
              C48283 * C48599)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
             C36005 * C933 - C47366 * C928) *
                C47235 +
            (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
             C36005 * C943 - C47366 * C934) *
                C48219 +
            (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
            (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
            C36054 * C47241 + C36055 * C25911) *
               C48318 * C779 +
           ((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
             C47366 * C2810 - C36005 * C2814) *
                C47235 +
            (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
             C47366 * C2815 - C36005 * C2822) *
                C48219 +
            (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47231 +
            (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48227 +
            (C36384 - C36385 + C36386 - C36387 + C36388 - C36389) * C47241 +
            (C36390 - C36391 + C36392 - C36393 + C36394 - C36395) * C25911) *
               C48318 * C48603) *
              C255 +
          (((C47360 * C259 - C48412 * C265 + C47352 * C677 - C48419 * C682 +
             C47366 * C2304 - C36005 * C2310) *
                C47235 +
            (C47360 * C266 - C48412 * C277 + C47352 * C683 - C48419 * C692 +
             C47366 * C2311 - C36005 * C2322) *
                C48219 +
            (C36202 - C36203 + C36204 - C36205 + C36206 - C36207) * C47231 +
            (C36208 - C36209 + C36210 - C36211 + C36212 - C36213) * C48227 +
            (C36214 - C36215 + C36216 - C36217 + C36218 - C36219) * C47241 +
            (C36220 - C36221 + C36222 - C36223 + C36224 - C36225) * C25911) *
               C48318 * C779 +
           ((C48412 * C682 - C47360 * C677 + C48419 * C2310 - C47352 * C2304 +
             C36005 * C3255 - C47366 * C3252) *
                C47235 +
            (C48412 * C692 - C47360 * C683 + C48419 * C2322 - C47352 * C2311 +
             C36005 * C3261 - C47366 * C3256) *
                C48219 +
            (C48412 * C684 - C47360 * C678 + C48419 * C2312 - C47352 * C2305 +
             C36005 * C3257 - C47366 * C3253) *
                C47231 +
            (C48412 * C693 - C47360 * C685 + C48419 * C2323 - C47352 * C2313 +
             C36005 * C3262 - C47366 * C3258) *
                C48227 +
            (C48412 * C686 - C47360 * C679 + C48419 * C2314 - C47352 * C2306 +
             C36005 * C3259 - C47366 * C3254) *
                C47241 +
            (C48412 * C694 - C47360 * C687 + C48419 * C2324 - C47352 * C2315 +
             C36005 * C3263 - C47366 * C3260) *
                C25911) *
               C48318 * C48603) *
              C48601) *
         C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48412 * C126 - C47360 * C119 + C48419 * C389 - C47352 * C383 +
            C36005 * C933 - C47366 * C928) *
               C47235 +
           (C48412 * C140 - C47360 * C127 + C48419 * C401 - C47352 * C390 +
            C36005 * C943 - C47366 * C934) *
               C48219 +
           (C36010 - C36011 + C36012 - C36013 + C36014 - C36015) * C47231 +
           (C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C48227 +
           C36054 * C47241 + C36055 * C25911) *
              C48318 * C925 +
          ((C47360 * C383 - C48412 * C389 + C47352 * C928 - C48419 * C933 +
            C47366 * C2810 - C36005 * C2814) *
               C47235 +
           (C47360 * C390 - C48412 * C401 + C47352 * C934 - C48419 * C943 +
            C47366 * C2815 - C36005 * C2822) *
               C48219 +
           (C36372 - C36373 + C36374 - C36375 + C36376 - C36377) * C47231 +
           (C36378 - C36379 + C36380 - C36381 + C36382 - C36383) * C48227 +
           (C36384 - C36385 + C36386 - C36387 + C36388 - C36389) * C47241 +
           (C36390 - C36391 + C36392 - C36393 + C36394 - C36395) * C25911) *
              C48318 * C926 +
          ((C48412 * C933 - C47360 * C928 + C48419 * C2814 - C47352 * C2810 +
            C36005 * C3669 - C47366 * C3666) *
               C47235 +
           (C48412 * C943 - C47360 * C934 + C48419 * C2822 - C47352 * C2815 +
            C36005 * C3675 - C47366 * C3670) *
               C48219 +
           (C48412 * C935 - C47360 * C929 + C48419 * C2816 - C47352 * C2811 +
            C36005 * C3671 - C47366 * C3667) *
               C47231 +
           (C48412 * C944 - C47360 * C936 + C48419 * C2823 - C47352 * C2817 +
            C36005 * C3676 - C47366 * C3672) *
               C48227 +
           (C48412 * C937 - C47360 * C930 + C48419 * C2818 - C47352 * C2812 +
            C36005 * C3673 - C47366 * C3668) *
               C47241 +
           (C48412 * C945 - C47360 * C938 + C48419 * C2824 - C47352 * C2819 +
            C36005 * C3677 - C47366 * C3674) *
               C25911) *
              C48318 * C927) *
         C48283 * C48249) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C48300 * C48283 * C110 +
          ((C30340 - C30339 + C30342 - C30341) * C22089 +
           (C30344 - C30343 + C30346 - C30345) * C48647 +
           (C30348 - C30347 + C30350 - C30349) * C22090 +
           (C30352 - C30351 + C30354 - C30353) * C48640 +
           (C30356 - C30355 + C30358 - C30357) * C22091 +
           (C30360 - C30359 + C30362 - C30361) * C48627 +
           (C30363 - C30364 + C30365 - C30366) * C22092 +
           (C30367 - C30368 + C30369 - C30370) * C48610) *
              C48318 * C48300 * C48283 * C111 +
          (C30379 * C22089 + C30380 * C48647 + C30381 * C22090 +
           C30382 * C48640 + (C30364 - C30363 + C30366 - C30365) * C22091 +
           (C30368 - C30367 + C30370 - C30369) * C48627 +
           (C30334 * C136 - C30336 * C124 + C48416 * C399 - C30337 * C388) *
               C22092 +
           (C30334 * C145 - C30336 * C137 + C48416 * C406 - C30337 * C400) *
               C48610) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C30334 * C265 - C30336 * C259 + C48416 * C682 - C30337 * C677) *
                C23173 +
            (C30334 * C277 - C30336 * C266 + C48416 * C692 - C30337 * C683) *
                C23167 +
            (C30514 - C30513 + C30516 - C30515) * C23174 +
            (C30518 - C30517 + C30520 - C30519) * C48224) *
               C48629 +
           ((C30334 * C580 - C30336 * C575 + C48416 * C1423 - C30337 * C1419) *
                C23173 +
            (C30334 * C590 - C30336 * C581 + C48416 * C1431 - C30337 * C1424) *
                C23167 +
            (C31553 - C31554 + C31555 - C31556) * C23174 +
            (C31557 - C31558 + C31559 - C31560) * C48224) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C23173 +
            (C30344 - C30343 + C30346 - C30345) * C23167 +
            (C30348 - C30347 + C30350 - C30349) * C23174 +
            (C30352 - C30351 + C30354 - C30353) * C48224) *
               C48641 +
           ((C30513 - C30514 + C30515 - C30516) * C23173 +
            (C30517 - C30518 + C30519 - C30520) * C23167 +
            (C30521 - C30522 + C30523 - C30524) * C23174 +
            (C30525 - C30526 + C30527 - C30528) * C48224) *
               C48629 +
           ((C31554 - C31553 + C31556 - C31555) * C23173 +
            (C31558 - C31557 + C31560 - C31559) * C23167 +
            (C31561 - C31562 + C31563 - C31564) * C23174 +
            (C31565 - C31566 + C31567 - C31568) * C48224) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C30379 * C23173 + C30380 * C23167 + C30381 * C23174 +
            C30382 * C48224) *
               C48641 +
           ((C30522 - C30521 + C30524 - C30523) * C23173 +
            (C30526 - C30525 + C30528 - C30527) * C23167 +
            (C30530 - C30529 + C30532 - C30531) * C23174 +
            (C30534 - C30533 + C30536 - C30535) * C48224) *
               C48629 +
           ((C31562 - C31561 + C31564 - C31563) * C23173 +
            (C31566 - C31565 + C31568 - C31567) * C23167 +
            (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
                C23174 +
            (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
                C48224) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C48300 * C255 +
           ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C48300 * C255 +
           ((C30514 - C30513 + C30516 - C30515) * C22089 +
            (C30518 - C30517 + C30520 - C30519) * C48647 +
            (C30522 - C30521 + C30524 - C30523) * C22090 +
            (C30526 - C30525 + C30528 - C30527) * C48640 +
            (C30530 - C30529 + C30532 - C30531) * C22091 +
            (C30534 - C30533 + C30536 - C30535) * C48627 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C22092 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C48300 * C255 +
           (((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C30336 * C1229 - C30334 * C1233 + C30337 * C1882 -
              C48416 * C1885) *
                 C23173 +
             (C30336 * C1234 - C30334 * C1241 + C30337 * C1886 -
              C48416 * C1891) *
                 C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C48300 * C255 +
           ((C31803 * C23173 + C31804 * C23167 +
             (C30522 - C30521 + C30524 - C30523) * C23174 +
             (C30526 - C30525 + C30528 - C30527) * C48224) *
                C48641 +
            (C31805 * C23173 + C31806 * C23167 +
             (C31562 - C31561 + C31564 - C31563) * C23174 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48629 +
            ((C31796 - C31795 + C31798 - C31797) * C23173 +
             (C31800 - C31799 + C31802 - C31801) * C23167 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C23174 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C381 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C381 +
           ((C30668 - C30667 + C30670 - C30669) * C22089 +
            (C30672 - C30671 + C30674 - C30673) * C48647 +
            (C30676 - C30675 + C30678 - C30677) * C22090 +
            (C30680 - C30679 + C30682 - C30681) * C48640 +
            (C30684 - C30683 + C30686 - C30685) * C22091 +
            (C30688 - C30687 + C30690 - C30689) * C48627 +
            (C30334 * C397 - C30336 * C387 + C48416 * C941 - C30337 * C932) *
                C22092 +
            (C30334 * C405 - C30336 * C398 + C48416 * C947 - C30337 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C30336 * C677 - C30334 * C682 + C30337 * C2304 - C48416 * C2310) *
                 C23173 +
             (C30336 * C683 - C30334 * C692 + C30337 * C2311 - C48416 * C2322) *
                 C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C30336 * C1419 - C30334 * C1423 + C30337 * C2307 -
              C48416 * C2316) *
                 C23173 +
             (C30336 * C1424 - C30334 * C1431 + C30337 * C2317 -
              C48416 * C2325) *
                 C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C381 +
           (((C30668 - C30667 + C30670 - C30669) * C23173 +
             (C30672 - C30671 + C30674 - C30673) * C23167 +
             (C30676 - C30675 + C30678 - C30677) * C23174 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48641 +
            ((C32006 - C32005 + C32008 - C32007) * C23173 +
             (C32010 - C32009 + C32012 - C32011) * C23167 +
             (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                 C23174 +
             (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                 C48224) *
                C48629 +
            ((C32014 - C32013 + C32016 - C32015) * C23173 +
             (C32018 - C32017 + C32020 - C32019) * C23167 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C23174 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C48300 * C505 +
           ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C48300 * C505 +
           ((C30514 - C30513 + C30516 - C30515) * C22089 +
            (C30518 - C30517 + C30520 - C30519) * C48647 +
            (C30522 - C30521 + C30524 - C30523) * C22090 +
            (C30526 - C30525 + C30528 - C30527) * C48640 +
            (C30530 - C30529 + C30532 - C30531) * C22091 +
            (C30534 - C30533 + C30536 - C30535) * C48627 +
            (C30334 * C273 - C30336 * C263 + C48416 * C690 - C30337 * C681) *
                C22092 +
            (C30334 * C281 - C30336 * C274 + C48416 * C696 - C30337 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            ((C31775 - C31776 + C31777 - C31778) * C23173 +
             (C31779 - C31780 + C31781 - C31782) * C23167 + C31805 * C23174 +
             C31806 * C48224) *
                C48606) *
               C48300 * C505 +
           (((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C30336 * C1229 - C30334 * C1233 + C30337 * C1882 -
              C48416 * C1885) *
                 C23173 +
             (C30336 * C1234 - C30334 * C1241 + C30337 * C1886 -
              C48416 * C1891) *
                 C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C48300 * C505 +
           ((C31803 * C23173 + C31804 * C23167 +
             (C30522 - C30521 + C30524 - C30523) * C23174 +
             (C30526 - C30525 + C30528 - C30527) * C48224) *
                C48641 +
            (C31805 * C23173 + C31806 * C23167 +
             (C31562 - C31561 + C31564 - C31563) * C23174 +
             (C31566 - C31565 + C31568 - C31567) * C48224) *
                C48629 +
            ((C31796 - C31795 + C31798 - C31797) * C23173 +
             (C31800 - C31799 + C31802 - C31801) * C23167 +
             (C30334 * C1237 - C30336 * C1231 + C48416 * C1889 -
              C30337 * C1884) *
                 C23174 +
             (C30334 * C1243 - C30336 * C1238 + C48416 * C1893 -
              C30337 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C48300 * C571 +
          ((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
               C22089 +
           (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
               C48647 +
           (C30513 - C30514 + C30515 - C30516) * C22090 +
           (C30517 - C30518 + C30519 - C30520) * C48640 +
           (C30521 - C30522 + C30523 - C30524) * C22091 +
           (C30525 - C30526 + C30527 - C30528) * C48627 +
           (C30529 - C30530 + C30531 - C30532) * C22092 +
           (C30533 - C30534 + C30535 - C30536) * C48610) *
              C48318 * C48300 * C572 +
          ((C30334 * C580 - C30336 * C575 + C48416 * C1423 - C30337 * C1419) *
               C22089 +
           (C30334 * C590 - C30336 * C581 + C48416 * C1431 - C30337 * C1424) *
               C48647 +
           (C30334 * C582 - C30336 * C576 + C48416 * C1425 - C30337 * C1420) *
               C22090 +
           (C30334 * C591 - C30336 * C583 + C48416 * C1432 - C30337 * C1426) *
               C48640 +
           (C30334 * C584 - C30336 * C577 + C48416 * C1427 - C30337 * C1421) *
               C22091 +
           (C30334 * C592 - C30336 * C585 + C48416 * C1433 - C30337 * C1428) *
               C48627 +
           (C30334 * C586 - C30336 * C578 + C48416 * C1429 - C30337 * C1422) *
               C22092 +
           (C30334 * C593 - C30336 * C587 + C48416 * C1434 - C30337 * C1430) *
               C48610) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C31763 - C31764 + C31765 - C31766) * C23173 +
            (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
            C31804 * C48224) *
               C48629 +
           C32381 * C48606) *
              C48300 * C571 +
          (((C31764 - C31763 + C31766 - C31765) * C23173 +
            (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
            C31808 * C48224) *
               C48641 +
           ((C31776 - C31775 + C31778 - C31777) * C23173 +
            (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
            C31810 * C48224) *
               C48629 +
           ((C32367 - C32368 + C32369 - C32370) * C23173 +
            (C32371 - C32372 + C32373 - C32374) * C23167 +
            (C31795 - C31796 + C31797 - C31798) * C23174 +
            (C31799 - C31800 + C31801 - C31802) * C48224) *
               C48606) *
              C48300 * C572 +
          (C32381 * C48641 +
           ((C32368 - C32367 + C32370 - C32369) * C23173 +
            (C32372 - C32371 + C32374 - C32373) * C23167 +
            (C31796 - C31795 + C31798 - C31797) * C23174 +
            (C31800 - C31799 + C31802 - C31801) * C48224) *
               C48629 +
           ((C30334 * C1710 - C30336 * C1707 + C48416 * C9099 -
             C30337 * C9097) *
                C23173 +
            (C30334 * C1716 - C30336 * C1711 + C48416 * C9103 -
             C30337 * C9100) *
                C23167 +
            (C30334 * C1712 - C30336 * C1708 + C48416 * C9101 -
             C30337 * C9098) *
                C23174 +
            (C30334 * C1717 - C30336 * C1713 + C48416 * C9104 -
             C30337 * C9102) *
                C48224) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C381 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C505 +
          (((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C381 +
           ((C30334 * C682 - C30336 * C677 + C48416 * C2310 - C30337 * C2304) *
                C22089 +
            (C30334 * C692 - C30336 * C683 + C48416 * C2322 - C30337 * C2311) *
                C48647 +
            (C30334 * C684 - C30336 * C678 + C48416 * C2312 - C30337 * C2305) *
                C22090 +
            (C30334 * C693 - C30336 * C685 + C48416 * C2323 - C30337 * C2313) *
                C48640 +
            (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                C22091 +
            (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                C48627 +
            (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                C22092 +
            (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C381 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C505 +
          ((((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C32367 - C32368 + C32369 - C32370) * C23173 +
             (C32371 - C32372 + C32373 - C32374) * C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C381 +
           (((C32577 - C32576 + C32579 - C32578) * C23173 +
             (C32581 - C32580 + C32583 - C32582) * C23167 +
             (C32006 - C32005 + C32008 - C32007) * C23174 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48641 +
            ((C32585 - C32584 + C32587 - C32586) * C23173 +
             (C32589 - C32588 + C32591 - C32590) * C23167 +
             (C32014 - C32013 + C32016 - C32015) * C23174 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48629 +
            ((C30334 * C1885 - C30336 * C1882 + C48416 * C9592 -
              C30337 * C9590) *
                 C23173 +
             (C30334 * C1891 - C30336 * C1886 + C48416 * C9596 -
              C30337 * C9593) *
                 C23167 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C23174 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C779 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C48647 +
            (C30348 - C30347 + C30350 - C30349) * C22090 +
            (C30352 - C30351 + C30354 - C30353) * C48640 +
            (C30356 - C30355 + C30358 - C30357) * C22091 +
            (C30360 - C30359 + C30362 - C30361) * C48627 +
            (C30363 - C30364 + C30365 - C30366) * C22092 +
            (C30367 - C30368 + C30369 - C30370) * C48610) *
               C48318 * C779 +
           ((C30668 - C30667 + C30670 - C30669) * C22089 +
            (C30672 - C30671 + C30674 - C30673) * C48647 +
            (C30676 - C30675 + C30678 - C30677) * C22090 +
            (C30680 - C30679 + C30682 - C30681) * C48640 +
            (C30684 - C30683 + C30686 - C30685) * C22091 +
            (C30688 - C30687 + C30690 - C30689) * C48627 +
            (C30334 * C397 - C30336 * C387 + C48416 * C941 - C30337 * C932) *
                C22092 +
            (C30334 * C405 - C30336 * C398 + C48416 * C947 - C30337 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C30340 - C30339 + C30342 - C30341) * C23173 +
             (C30344 - C30343 + C30346 - C30345) * C23167 +
             (C30348 - C30347 + C30350 - C30349) * C23174 +
             (C30352 - C30351 + C30354 - C30353) * C48224) *
                C48641 +
            (C31807 * C23173 + C31808 * C23167 +
             (C30521 - C30522 + C30523 - C30524) * C23174 +
             (C30525 - C30526 + C30527 - C30528) * C48224) *
                C48629 +
            (C31809 * C23173 + C31810 * C23167 +
             (C31561 - C31562 + C31563 - C31564) * C23174 +
             (C31565 - C31566 + C31567 - C31568) * C48224) *
                C48606) *
               C779 +
           (((C30668 - C30667 + C30670 - C30669) * C23173 +
             (C30672 - C30671 + C30674 - C30673) * C23167 +
             (C30676 - C30675 + C30678 - C30677) * C23174 +
             (C30680 - C30679 + C30682 - C30681) * C48224) *
                C48641 +
            ((C32006 - C32005 + C32008 - C32007) * C23173 +
             (C32010 - C32009 + C32012 - C32011) * C23167 +
             (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                 C23174 +
             (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                 C48224) *
                C48629 +
            ((C32014 - C32013 + C32016 - C32015) * C23173 +
             (C32018 - C32017 + C32020 - C32019) * C23167 +
             (C30334 * C1427 - C30336 * C1421 + C48416 * C2320 -
              C30337 * C2309) *
                 C23174 +
             (C30334 * C1433 - C30336 * C1428 + C48416 * C2327 -
              C30337 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C22089 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C48647 +
            (C30339 - C30340 + C30341 - C30342) * C22090 +
            (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
            C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
               C48318 * C779 +
           ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C22089 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C48647 +
            (C30667 - C30668 + C30669 - C30670) * C22090 +
            (C30671 - C30672 + C30673 - C30674) * C48640 +
            (C30675 - C30676 + C30677 - C30678) * C22091 +
            (C30679 - C30680 + C30681 - C30682) * C48627 +
            (C30683 - C30684 + C30685 - C30686) * C22092 +
            (C30687 - C30688 + C30689 - C30690) * C48610) *
               C48318 * C48603) *
              C255 +
          (((C30336 * C259 - C30334 * C265 + C30337 * C677 - C48416 * C682) *
                C22089 +
            (C30336 * C266 - C30334 * C277 + C30337 * C683 - C48416 * C692) *
                C48647 +
            (C30513 - C30514 + C30515 - C30516) * C22090 +
            (C30517 - C30518 + C30519 - C30520) * C48640 +
            (C30521 - C30522 + C30523 - C30524) * C22091 +
            (C30525 - C30526 + C30527 - C30528) * C48627 +
            (C30529 - C30530 + C30531 - C30532) * C22092 +
            (C30533 - C30534 + C30535 - C30536) * C48610) *
               C48318 * C779 +
           ((C30334 * C682 - C30336 * C677 + C48416 * C2310 - C30337 * C2304) *
                C22089 +
            (C30334 * C692 - C30336 * C683 + C48416 * C2322 - C30337 * C2311) *
                C48647 +
            (C30334 * C684 - C30336 * C678 + C48416 * C2312 - C30337 * C2305) *
                C22090 +
            (C30334 * C693 - C30336 * C685 + C48416 * C2323 - C30337 * C2313) *
                C48640 +
            (C30334 * C686 - C30336 * C679 + C48416 * C2314 - C30337 * C2306) *
                C22091 +
            (C30334 * C694 - C30336 * C687 + C48416 * C2324 - C30337 * C2315) *
                C48627 +
            (C30334 * C688 - C30336 * C680 + C48416 * C2637 - C30337 * C2636) *
                C22092 +
            (C30334 * C695 - C30336 * C689 + C48416 * C2639 - C30337 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                 C23173 +
             (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                 C23167 +
             (C30339 - C30340 + C30341 - C30342) * C23174 +
             (C30343 - C30344 + C30345 - C30346) * C48224) *
                C48641 +
            ((C31763 - C31764 + C31765 - C31766) * C23173 +
             (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
             C31804 * C48224) *
                C48629 +
            C32381 * C48606) *
               C779 +
           (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                 C23173 +
             (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                 C23167 +
             (C30667 - C30668 + C30669 - C30670) * C23174 +
             (C30671 - C30672 + C30673 - C30674) * C48224) *
                C48641 +
            ((C32576 - C32577 + C32578 - C32579) * C23173 +
             (C32580 - C32581 + C32582 - C32583) * C23167 +
             (C32005 - C32006 + C32007 - C32008) * C23174 +
             (C32009 - C32010 + C32011 - C32012) * C48224) *
                C48629 +
            ((C32584 - C32585 + C32586 - C32587) * C23173 +
             (C32588 - C32589 + C32590 - C32591) * C23167 +
             (C32013 - C32014 + C32015 - C32016) * C23174 +
             (C32017 - C32018 + C32019 - C32020) * C48224) *
                C48606) *
               C48603) *
              C255 +
          ((((C31764 - C31763 + C31766 - C31765) * C23173 +
             (C31768 - C31767 + C31770 - C31769) * C23167 + C31807 * C23174 +
             C31808 * C48224) *
                C48641 +
            ((C31776 - C31775 + C31778 - C31777) * C23173 +
             (C31780 - C31779 + C31782 - C31781) * C23167 + C31809 * C23174 +
             C31810 * C48224) *
                C48629 +
            ((C32367 - C32368 + C32369 - C32370) * C23173 +
             (C32371 - C32372 + C32373 - C32374) * C23167 +
             (C31795 - C31796 + C31797 - C31798) * C23174 +
             (C31799 - C31800 + C31801 - C31802) * C48224) *
                C48606) *
               C779 +
           (((C32577 - C32576 + C32579 - C32578) * C23173 +
             (C32581 - C32580 + C32583 - C32582) * C23167 +
             (C32006 - C32005 + C32008 - C32007) * C23174 +
             (C32010 - C32009 + C32012 - C32011) * C48224) *
                C48641 +
            ((C32585 - C32584 + C32587 - C32586) * C23173 +
             (C32589 - C32588 + C32591 - C32590) * C23167 +
             (C32014 - C32013 + C32016 - C32015) * C23174 +
             (C32018 - C32017 + C32020 - C32019) * C48224) *
                C48629 +
            ((C30334 * C1885 - C30336 * C1882 + C48416 * C9592 -
              C30337 * C9590) *
                 C23173 +
             (C30334 * C1891 - C30336 * C1886 + C48416 * C9596 -
              C30337 * C9593) *
                 C23167 +
             (C30334 * C1887 - C30336 * C1883 + C48416 * C9855 -
              C30337 * C9854) *
                 C23174 +
             (C30334 * C1892 - C30336 * C1888 + C48416 * C9857 -
              C30337 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
               C22089 +
           (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
               C48647 +
           (C30339 - C30340 + C30341 - C30342) * C22090 +
           (C30343 - C30344 + C30345 - C30346) * C48640 + C30379 * C22091 +
           C30380 * C48627 + C30381 * C22092 + C30382 * C48610) *
              C48318 * C925 +
          ((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
               C22089 +
           (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
               C48647 +
           (C30667 - C30668 + C30669 - C30670) * C22090 +
           (C30671 - C30672 + C30673 - C30674) * C48640 +
           (C30675 - C30676 + C30677 - C30678) * C22091 +
           (C30679 - C30680 + C30681 - C30682) * C48627 +
           (C30683 - C30684 + C30685 - C30686) * C22092 +
           (C30687 - C30688 + C30689 - C30690) * C48610) *
              C48318 * C926 +
          ((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
               C22089 +
           (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
               C48647 +
           (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
               C22090 +
           (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
               C48640 +
           (C30334 * C937 - C30336 * C930 + C48416 * C2818 - C30337 * C2812) *
               C22091 +
           (C30334 * C945 - C30336 * C938 + C48416 * C2824 - C30337 * C2819) *
               C48627 +
           (C30334 * C939 - C30336 * C931 + C48416 * C2820 - C30337 * C2813) *
               C22092 +
           (C30334 * C946 - C30336 * C940 + C48416 * C2825 - C30337 * C2821) *
               C48610) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C126 - C30336 * C119 + C48416 * C389 - C30337 * C383) *
                C23173 +
            (C30334 * C140 - C30336 * C127 + C48416 * C401 - C30337 * C390) *
                C23167 +
            (C30339 - C30340 + C30341 - C30342) * C23174 +
            (C30343 - C30344 + C30345 - C30346) * C48224) *
               C48641 +
           ((C31763 - C31764 + C31765 - C31766) * C23173 +
            (C31767 - C31768 + C31769 - C31770) * C23167 + C31803 * C23174 +
            C31804 * C48224) *
               C48629 +
           C32381 * C48606) *
              C925 +
          (((C30336 * C383 - C30334 * C389 + C30337 * C928 - C48416 * C933) *
                C23173 +
            (C30336 * C390 - C30334 * C401 + C30337 * C934 - C48416 * C943) *
                C23167 +
            (C30667 - C30668 + C30669 - C30670) * C23174 +
            (C30671 - C30672 + C30673 - C30674) * C48224) *
               C48641 +
           ((C32576 - C32577 + C32578 - C32579) * C23173 +
            (C32580 - C32581 + C32582 - C32583) * C23167 +
            (C32005 - C32006 + C32007 - C32008) * C23174 +
            (C32009 - C32010 + C32011 - C32012) * C48224) *
               C48629 +
           ((C32584 - C32585 + C32586 - C32587) * C23173 +
            (C32588 - C32589 + C32590 - C32591) * C23167 +
            (C32013 - C32014 + C32015 - C32016) * C23174 +
            (C32017 - C32018 + C32019 - C32020) * C48224) *
               C48606) *
              C926 +
          (((C30334 * C933 - C30336 * C928 + C48416 * C2814 - C30337 * C2810) *
                C23173 +
            (C30334 * C943 - C30336 * C934 + C48416 * C2822 - C30337 * C2815) *
                C23167 +
            (C30334 * C935 - C30336 * C929 + C48416 * C2816 - C30337 * C2811) *
                C23174 +
            (C30334 * C944 - C30336 * C936 + C48416 * C2823 - C30337 * C2817) *
                C48224) *
               C48641 +
           ((C30334 * C2310 - C30336 * C2304 + C48416 * C3255 -
             C30337 * C3252) *
                C23173 +
            (C30334 * C2322 - C30336 * C2311 + C48416 * C3261 -
             C30337 * C3256) *
                C23167 +
            (C30334 * C2312 - C30336 * C2305 + C48416 * C3257 -
             C30337 * C3253) *
                C23174 +
            (C30334 * C2323 - C30336 * C2313 + C48416 * C3262 -
             C30337 * C3258) *
                C48224) *
               C48629 +
           ((C30334 * C2316 - C30336 * C2307 + C48416 * C10042 -
             C30337 * C10040) *
                C23173 +
            (C30334 * C2325 - C30336 * C2317 + C48416 * C10046 -
             C30337 * C10043) *
                C23167 +
            (C30334 * C2318 - C30336 * C2308 + C48416 * C10044 -
             C30337 * C10041) *
                C23174 +
            (C30334 * C2326 - C30336 * C2319 + C48416 * C10047 -
             C30337 * C10045) *
                C48224) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C3782 + (C151 - C150) * C3776 +
            (C153 - C152) * C3783 + (C155 - C154) * C3777 +
            (C157 - C156) * C3784 + (C159 - C158) * C3778 +
            (C161 - C160) * C3785 + (C163 - C162) * C48610) *
               C48573 +
           (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
            (C292 - C293) * C3784 + (C294 - C295) * C3778 +
            (C296 - C297) * C3785 + (C298 - C299) * C48610) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C168 * C3782 + C169 * C3776 + C170 * C3783 + C171 * C3777 +
            C172 * C3784 + C173 * C3778 + (C165 - C164) * C3785 +
            (C167 - C166) * C48610) *
               C48573 +
           (C1068 * C3782 + C1069 * C3776 + C3787 * C3783 + C3788 * C3777 +
            (C297 - C296) * C3784 + (C299 - C298) * C3778 +
            (C48329 * C275 - C113 * C264) * C3785 +
            (C48329 * C282 - C113 * C276) * C48610) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 + C1257 * C48224) *
               C11015 +
           (C9256 * C47225 + C9257 * C48551 + (C1267 - C1266) * C47206 +
            (C1269 - C1268) * C48224) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C47225 + (C151 - C150) * C48551 +
            (C153 - C152) * C47206 + (C155 - C154) * C48224) *
               C11013 +
           (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 + C1261 * C48224) *
               C11014 +
           (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 + C1265 * C48224) *
               C11015 +
           ((C1266 - C1267) * C47225 + (C1268 - C1269) * C48551 +
            (C1270 - C1271) * C47206 + (C1272 - C1273) * C48224) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C168 * C47225 + C169 * C48551 + C170 * C47206 + C171 * C48224) *
               C11013 +
           (C1068 * C47225 + C1069 * C48551 + C3787 * C47206 + C3788 * C48224) *
               C11014 +
           (C1082 * C47225 + C1083 * C48551 + (C1079 - C1078) * C47206 +
            (C1081 - C1080) * C48224) *
               C11015 +
           ((C1271 - C1270) * C47225 + (C1273 - C1272) * C48551 +
            (C48329 * C1239 - C113 * C1232) * C47206 +
            (C48329 * C1244 - C113 * C1240) * C48224) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C48300 * C255 +
           (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C255 +
           ((C1250 * C3782 + C1251 * C3776 + C1068 * C3783 + C1069 * C3777 +
             C3787 * C3784 + C3788 * C3778 + (C297 - C296) * C3785 +
             (C299 - C298) * C48610) *
                C48573 +
            (C1256 * C3782 + C1257 * C3776 + C1082 * C3783 + C1083 * C3777 +
             (C1079 - C1078) * C3784 + (C1081 - C1080) * C3778 +
             (C48329 * C588 - C113 * C579) * C3785 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C48300 * C255 +
           (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C255 +
           ((C1250 * C47225 + C1251 * C48551 + C1068 * C47206 +
             C1069 * C48224) *
                C11013 +
            (C1256 * C47225 + C1257 * C48551 + C1082 * C47206 +
             C1083 * C48224) *
                C11014 +
            (C11150 * C47225 + C11151 * C48551 + (C1271 - C1270) * C47206 +
             (C1273 - C1272) * C48224) *
                C11015 +
            ((C9013 - C9012) * C47225 + (C9015 - C9014) * C48551 +
             (C48329 * C1714 - C113 * C1709) * C47206 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C381 +
           (((C409 - C408) * C3782 + (C411 - C410) * C3776 +
             (C413 - C412) * C3783 + (C415 - C414) * C3777 +
             (C417 - C416) * C3784 + (C419 - C418) * C3778 +
             (C421 - C420) * C3785 + (C423 - C422) * C48610) *
                C48573 +
            ((C1437 - C1436) * C3782 + (C1439 - C1438) * C3776 +
             (C1441 - C1440) * C3783 + (C1443 - C1442) * C3777 +
             (C4052 - C4051) * C3784 + (C4054 - C4053) * C3778 +
             (C48329 * C690 - C113 * C681) * C3785 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C381 +
           (((C409 - C408) * C47225 + (C411 - C410) * C48551 +
             (C413 - C412) * C47206 + (C415 - C414) * C48224) *
                C11013 +
            ((C1437 - C1436) * C47225 + (C1439 - C1438) * C48551 +
             (C1441 - C1440) * C47206 + (C1443 - C1442) * C48224) *
                C11014 +
            ((C1445 - C1444) * C47225 + (C1447 - C1446) * C48551 +
             (C1449 - C1448) * C47206 + (C1451 - C1450) * C48224) *
                C11015 +
            ((C11285 - C11284) * C47225 + (C11287 - C11286) * C48551 +
             (C48329 * C1889 - C113 * C1884) * C47206 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C48300 * C505 +
           (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C48300 * C505 +
           ((C1250 * C3782 + C1251 * C3776 + C1068 * C3783 + C1069 * C3777 +
             C3787 * C3784 + C3788 * C3778 + (C297 - C296) * C3785 +
             (C299 - C298) * C48610) *
                C48573 +
            (C1256 * C3782 + C1257 * C3776 + C1082 * C3783 + C1083 * C3777 +
             (C1079 - C1078) * C3784 + (C1081 - C1080) * C3778 +
             (C48329 * C588 - C113 * C579) * C3785 +
             (C48329 * C594 - C113 * C589) * C48610) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            (C1720 * C47225 + C1721 * C48551 + C1256 * C47206 +
             C1257 * C48224) *
                C11015 +
            (C9256 * C47225 + C9257 * C48551 + C11150 * C47206 +
             C11151 * C48224) *
                C48616) *
               C48300 * C505 +
           (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C48300 * C505 +
           ((C1250 * C47225 + C1251 * C48551 + C1068 * C47206 +
             C1069 * C48224) *
                C11013 +
            (C1256 * C47225 + C1257 * C48551 + C1082 * C47206 +
             C1083 * C48224) *
                C11014 +
            (C11150 * C47225 + C11151 * C48551 + (C1271 - C1270) * C47206 +
             (C1273 - C1272) * C48224) *
                C11015 +
            ((C9013 - C9012) * C47225 + (C9015 - C9014) * C48551 +
             (C48329 * C1714 - C113 * C1709) * C47206 +
             (C48329 * C1718 - C113 * C1715) * C48224) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C48300 * C571 +
          (((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
            C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
            C3920 * C48610) *
               C48573 +
           ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
            C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
            (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
               C48376) *
              C48300 * C572 +
          ((C1720 * C3782 + C1721 * C3776 + C1256 * C3783 + C1257 * C3777 +
            C1082 * C3784 + C1083 * C3778 + (C1079 - C1078) * C3785 +
            (C1081 - C1080) * C48610) *
               C48573 +
           ((C1727 - C1726) * C3782 + (C1729 - C1728) * C3776 +
            (C1267 - C1266) * C3783 + (C1269 - C1268) * C3777 +
            (C1271 - C1270) * C3784 + (C1273 - C1272) * C3778 +
            (C48329 * C1239 - C113 * C1232) * C3785 +
            (C48329 * C1244 - C113 * C1240) * C48610) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           C11528 * C11015 + C11529 * C48616) *
              C48300 * C571 +
          (((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
            C1258 * C47206 + C1259 * C48224) *
               C11013 +
           ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
            C1262 * C47206 + C1263 * C48224) *
               C11014 +
           ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
            C11152 * C47206 + C11153 * C48224) *
               C11015 +
           ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
            (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
               C48616) *
              C48300 * C572 +
          (C11528 * C11013 + C11529 * C11014 +
           (C9258 * C47225 + C9259 * C48551 + (C9013 - C9012) * C47206 +
            (C9015 - C9014) * C48224) *
               C11015 +
           ((C9261 - C9260) * C47225 + (C9263 - C9262) * C48551 +
            (C48329 * C9003 - C113 * C9000) * C47206 +
            (C48329 * C9006 - C113 * C9004) * C48224) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C381 +
           (((C1896 - C1895) * C3782 + (C1898 - C1897) * C3776 +
             (C1437 - C1436) * C3783 + (C1439 - C1438) * C3777 +
             (C1441 - C1440) * C3784 + (C1443 - C1442) * C3778 +
             (C4052 - C4051) * C3785 + (C4054 - C4053) * C48610) *
                C48573 +
            ((C1900 - C1899) * C3782 + (C1902 - C1901) * C3776 +
             (C1445 - C1444) * C3783 + (C1447 - C1446) * C3777 +
             (C1449 - C1448) * C3784 + (C1451 - C1450) * C3778 +
             (C48329 * C1429 - C113 * C1422) * C3785 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C381 +
           (((C1896 - C1895) * C47225 + (C1898 - C1897) * C48551 +
             (C1437 - C1436) * C47206 + (C1439 - C1438) * C48224) *
                C11013 +
            ((C1900 - C1899) * C47225 + (C1902 - C1901) * C48551 +
             (C1445 - C1444) * C47206 + (C1447 - C1446) * C48224) *
                C11014 +
            ((C9358 - C9357) * C47225 + (C9360 - C9359) * C48551 +
             (C11285 - C11284) * C47206 + (C11287 - C11286) * C48224) *
                C11015 +
            ((C9362 - C9361) * C47225 + (C9364 - C9363) * C48551 +
             (C48329 * C9101 - C113 * C9098) * C47206 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C3782 + (C151 - C150) * C3776 +
             (C153 - C152) * C3783 + (C155 - C154) * C3777 +
             (C157 - C156) * C3784 + (C159 - C158) * C3778 +
             (C161 - C160) * C3785 + (C163 - C162) * C48610) *
                C48573 +
            (C1258 * C3782 + C1259 * C3776 + C1260 * C3783 + C1261 * C3777 +
             C3919 * C3784 + C3920 * C3778 + (C296 - C297) * C3785 +
             (C298 - C299) * C48610) *
                C48376) *
               C779 +
           (((C409 - C408) * C3782 + (C411 - C410) * C3776 +
             (C413 - C412) * C3783 + (C415 - C414) * C3777 +
             (C417 - C416) * C3784 + (C419 - C418) * C3778 +
             (C421 - C420) * C3785 + (C423 - C422) * C48610) *
                C48573 +
            ((C1437 - C1436) * C3782 + (C1439 - C1438) * C3776 +
             (C1441 - C1440) * C3783 + (C1443 - C1442) * C3777 +
             (C4052 - C4051) * C3784 + (C4054 - C4053) * C3778 +
             (C48329 * C690 - C113 * C681) * C3785 +
             (C48329 * C696 - C113 * C691) * C48610) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C47225 + (C151 - C150) * C48551 +
             (C153 - C152) * C47206 + (C155 - C154) * C48224) *
                C11013 +
            (C1258 * C47225 + C1259 * C48551 + C1260 * C47206 +
             C1261 * C48224) *
                C11014 +
            (C1262 * C47225 + C1263 * C48551 + C1264 * C47206 +
             C1265 * C48224) *
                C11015 +
            (C11152 * C47225 + C11153 * C48551 + (C1270 - C1271) * C47206 +
             (C1272 - C1273) * C48224) *
                C48616) *
               C779 +
           (((C409 - C408) * C47225 + (C411 - C410) * C48551 +
             (C413 - C412) * C47206 + (C415 - C414) * C48224) *
                C11013 +
            ((C1437 - C1436) * C47225 + (C1439 - C1438) * C48551 +
             (C1441 - C1440) * C47206 + (C1443 - C1442) * C48224) *
                C11014 +
            ((C1445 - C1444) * C47225 + (C1447 - C1446) * C48551 +
             (C1449 - C1448) * C47206 + (C1451 - C1450) * C48224) *
                C11015 +
            ((C11285 - C11284) * C47225 + (C11287 - C11286) * C48551 +
             (C48329 * C1889 - C113 * C1884) * C47206 +
             (C48329 * C1893 - C113 * C1890) * C48224) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C3782 +
             (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
             (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 +
             C170 * C3785 + C171 * C48610) *
                C48573 +
            ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
             C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
             C3788 * C48610) *
                C48376) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C3782 +
             (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
             (C410 - C411) * C3777 + (C412 - C413) * C3784 +
             (C414 - C415) * C3778 + (C416 - C417) * C3785 +
             (C418 - C419) * C48610) *
                C48573 +
            ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
             (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
             (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
             (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
                C48376) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C3782 + (C1249 - C1248) * C3776 + C1258 * C3783 +
             C1259 * C3777 + C1260 * C3784 + C1261 * C3778 + C3919 * C3785 +
             C3920 * C48610) *
                C48573 +
            ((C1253 - C1252) * C3782 + (C1255 - C1254) * C3776 + C1262 * C3783 +
             C1263 * C3777 + C1264 * C3784 + C1265 * C3778 +
             (C1078 - C1079) * C3785 + (C1080 - C1081) * C48610) *
                C48376) *
               C779 +
           (((C1896 - C1895) * C3782 + (C1898 - C1897) * C3776 +
             (C1437 - C1436) * C3783 + (C1439 - C1438) * C3777 +
             (C1441 - C1440) * C3784 + (C1443 - C1442) * C3778 +
             (C4052 - C4051) * C3785 + (C4054 - C4053) * C48610) *
                C48573 +
            ((C1900 - C1899) * C3782 + (C1902 - C1901) * C3776 +
             (C1445 - C1444) * C3783 + (C1447 - C1446) * C3777 +
             (C1449 - C1448) * C3784 + (C1451 - C1450) * C3778 +
             (C48329 * C1429 - C113 * C1422) * C3785 +
             (C48329 * C1434 - C113 * C1430) * C48610) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C47225 +
             (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
             (C150 - C151) * C48224) *
                C11013 +
            ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
             C1250 * C47206 + C1251 * C48224) *
                C11014 +
            C11528 * C11015 + C11529 * C48616) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C47225 +
             (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
             (C410 - C411) * C48224) *
                C11013 +
            ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
             (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
                C11014 +
            ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
             (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
                C11015 +
            ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
             (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
                C48616) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C47225 + (C1249 - C1248) * C48551 +
             C1258 * C47206 + C1259 * C48224) *
                C11013 +
            ((C1253 - C1252) * C47225 + (C1255 - C1254) * C48551 +
             C1262 * C47206 + C1263 * C48224) *
                C11014 +
            ((C1726 - C1727) * C47225 + (C1728 - C1729) * C48551 +
             C11152 * C47206 + C11153 * C48224) *
                C11015 +
            ((C9009 - C9008) * C47225 + (C9011 - C9010) * C48551 +
             (C9012 - C9013) * C47206 + (C9014 - C9015) * C48224) *
                C48616) *
               C779 +
           (((C1896 - C1895) * C47225 + (C1898 - C1897) * C48551 +
             (C1437 - C1436) * C47206 + (C1439 - C1438) * C48224) *
                C11013 +
            ((C1900 - C1899) * C47225 + (C1902 - C1901) * C48551 +
             (C1445 - C1444) * C47206 + (C1447 - C1446) * C48224) *
                C11014 +
            ((C9358 - C9357) * C47225 + (C9360 - C9359) * C48551 +
             (C11285 - C11284) * C47206 + (C11287 - C11286) * C48224) *
                C11015 +
            ((C9362 - C9361) * C47225 + (C9364 - C9363) * C48551 +
             (C48329 * C9101 - C113 * C9098) * C47206 +
             (C48329 * C9104 - C113 * C9102) * C48224) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C3782 +
            (C48329 * C140 - C113 * C127) * C3776 + (C148 - C149) * C3783 +
            (C150 - C151) * C3777 + C168 * C3784 + C169 * C3778 + C170 * C3785 +
            C171 * C48610) *
               C48573 +
           ((C1246 - C1247) * C3782 + (C1248 - C1249) * C3776 + C1250 * C3783 +
            C1251 * C3777 + C1068 * C3784 + C1069 * C3778 + C3787 * C3785 +
            C3788 * C48610) *
               C48376) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C3782 +
            (C113 * C390 - C48329 * C401) * C3776 + (C408 - C409) * C3783 +
            (C410 - C411) * C3777 + (C412 - C413) * C3784 +
            (C414 - C415) * C3778 + (C416 - C417) * C3785 +
            (C418 - C419) * C48610) *
               C48573 +
           ((C1895 - C1896) * C3782 + (C1897 - C1898) * C3776 +
            (C1436 - C1437) * C3783 + (C1438 - C1439) * C3777 +
            (C1440 - C1441) * C3784 + (C1442 - C1443) * C3778 +
            (C4051 - C4052) * C3785 + (C4053 - C4054) * C48610) *
               C48376) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C3782 +
            (C48329 * C943 - C113 * C934) * C3776 +
            (C48329 * C935 - C113 * C929) * C3783 +
            (C48329 * C944 - C113 * C936) * C3777 +
            (C48329 * C937 - C113 * C930) * C3784 +
            (C48329 * C945 - C113 * C938) * C3778 +
            (C48329 * C939 - C113 * C931) * C3785 +
            (C48329 * C946 - C113 * C940) * C48610) *
               C48573 +
           ((C48329 * C2310 - C113 * C2304) * C3782 +
            (C48329 * C2322 - C113 * C2311) * C3776 +
            (C48329 * C2312 - C113 * C2305) * C3783 +
            (C48329 * C2323 - C113 * C2313) * C3777 +
            (C48329 * C2314 - C113 * C2306) * C3784 +
            (C48329 * C2324 - C113 * C2315) * C3778 +
            (C48329 * C2637 - C113 * C2636) * C3785 +
            (C48329 * C2639 - C113 * C2638) * C48610) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C47225 +
            (C48329 * C140 - C113 * C127) * C48551 + (C148 - C149) * C47206 +
            (C150 - C151) * C48224) *
               C11013 +
           ((C1246 - C1247) * C47225 + (C1248 - C1249) * C48551 +
            C1250 * C47206 + C1251 * C48224) *
               C11014 +
           C11528 * C11015 + C11529 * C48616) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C47225 +
            (C113 * C390 - C48329 * C401) * C48551 + (C408 - C409) * C47206 +
            (C410 - C411) * C48224) *
               C11013 +
           ((C1895 - C1896) * C47225 + (C1897 - C1898) * C48551 +
            (C1436 - C1437) * C47206 + (C1438 - C1439) * C48224) *
               C11014 +
           ((C1899 - C1900) * C47225 + (C1901 - C1902) * C48551 +
            (C1444 - C1445) * C47206 + (C1446 - C1447) * C48224) *
               C11015 +
           ((C9357 - C9358) * C47225 + (C9359 - C9360) * C48551 +
            (C11284 - C11285) * C47206 + (C11286 - C11287) * C48224) *
               C48616) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C47225 +
            (C48329 * C943 - C113 * C934) * C48551 +
            (C48329 * C935 - C113 * C929) * C47206 +
            (C48329 * C944 - C113 * C936) * C48224) *
               C11013 +
           ((C48329 * C2310 - C113 * C2304) * C47225 +
            (C48329 * C2322 - C113 * C2311) * C48551 +
            (C48329 * C2312 - C113 * C2305) * C47206 +
            (C48329 * C2323 - C113 * C2313) * C48224) *
               C11014 +
           ((C48329 * C2316 - C113 * C2307) * C47225 +
            (C48329 * C2325 - C113 * C2317) * C48551 +
            (C48329 * C2318 - C113 * C2308) * C47206 +
            (C48329 * C2326 - C113 * C2319) * C48224) *
               C11015 +
           ((C48329 * C9592 - C113 * C9590) * C47225 +
            (C48329 * C9596 - C113 * C9593) * C48551 +
            (C48329 * C9855 - C113 * C9854) * C47206 +
            (C48329 * C9857 - C113 * C9856) * C48224) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C48574 * C265 - C4870 * C259 + C48416 * C682 - C4871 * C677) *
                C1064 +
            (C48574 * C277 - C4870 * C266 + C48416 * C692 - C4871 * C683) *
                C1058 +
            (C5048 - C5047 + C5050 - C5049) * C1065 +
            (C5052 - C5051 + C5054 - C5053) * C1059 + C6091 * C1066 +
            C6092 * C48593) *
               C48376) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C1064 +
            (C4878 - C4877 + C4880 - C4879) * C1058 +
            (C4882 - C4881 + C4884 - C4883) * C1065 +
            (C4886 - C4885 + C4888 - C4887) * C1059 +
            (C4890 - C4889 + C4892 - C4891) * C1066 +
            (C4894 - C4893 + C4896 - C4895) * C48593) *
               C48573 +
           ((C5047 - C5048 + C5049 - C5050) * C1064 +
            (C5051 - C5052 + C5053 - C5054) * C1058 +
            (C5055 - C5056 + C5057 - C5058) * C1065 +
            (C5059 - C5060 + C5061 - C5062) * C1059 +
            (C5063 - C5064 + C5065 - C5066) * C1066 +
            (C5067 - C5068 + C5069 - C5070) * C48593) *
               C48376) *
              C48300 * C48283 * C111 +
          ((C4913 * C1064 + C4914 * C1058 + C4915 * C1065 + C4916 * C1059 +
            (C4898 - C4897 + C4900 - C4899) * C1066 +
            (C4902 - C4901 + C4904 - C4903) * C48593) *
               C48573 +
           (C6091 * C1064 + C6092 * C1058 +
            (C5064 - C5063 + C5066 - C5065) * C1065 +
            (C5068 - C5067 + C5070 - C5069) * C1059 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C1066 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48593) *
               C48376) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           (C12934 * C8916 + C12935 * C48214) * C11015 +
           ((C12927 - C12926 + C12929 - C12928) * C8916 +
            (C12931 - C12930 + C12933 - C12932) * C48214) *
               C48616) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C8916 +
            (C4878 - C4877 + C4880 - C4879) * C48214) *
               C11013 +
           (C6325 * C8916 + C6326 * C48214) * C11014 +
           (C12376 * C8916 + C12377 * C48214) * C11015 +
           ((C12366 - C12367 + C12368 - C12369) * C8916 +
            (C12370 - C12371 + C12372 - C12373) * C48214) *
               C48616) *
              C48300 * C48283 * C111 +
          ((C4913 * C8916 + C4914 * C48214) * C11013 +
           (C6091 * C8916 + C6092 * C48214) * C11014 +
           ((C6316 - C6315 + C6318 - C6317) * C8916 +
            (C6320 - C6319 + C6322 - C6321) * C48214) *
               C11015 +
           ((C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                C8916 +
            (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                C48214) *
               C48616) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C4870 * C575 - C48574 * C580 + C4871 * C1419 - C48416 * C1423) *
                 C1064 +
             (C4870 * C581 - C48574 * C590 + C4871 * C1424 - C48416 * C1431) *
                 C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C48300 * C255 +
           ((C6323 * C1064 + C6324 * C1058 + C6091 * C1065 + C6092 * C1059 +
             (C5064 - C5063 + C5066 - C5065) * C1066 +
             (C5068 - C5067 + C5070 - C5069) * C48593) *
                C48573 +
            ((C6308 - C6307 + C6310 - C6309) * C1064 +
             (C6312 - C6311 + C6314 - C6313) * C1058 +
             (C6316 - C6315 + C6318 - C6317) * C1065 +
             (C6320 - C6319 + C6322 - C6321) * C1059 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C1066 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C4870 * C1707 - C48574 * C1710 + C4871 * C9097 - C48416 * C9099) *
                 C8916 +
             (C4870 * C1711 - C48574 * C1716 + C4871 * C9100 - C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C48300 * C255 +
           ((C6323 * C8916 + C6324 * C48214) * C11013 +
            (C12374 * C8916 + C12375 * C48214) * C11014 +
            ((C12367 - C12366 + C12369 - C12368) * C8916 +
             (C12371 - C12370 + C12373 - C12372) * C48214) *
                C11015 +
            ((C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                 C8916 +
             (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C4870 * C677 - C48574 * C682 + C4871 * C2304 - C48416 * C2310) *
                 C1064 +
             (C4870 * C683 - C48574 * C692 + C4871 * C2311 - C48416 * C2322) *
                 C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C1064 +
             (C5206 - C5205 + C5208 - C5207) * C1058 +
             (C5210 - C5209 + C5212 - C5211) * C1065 +
             (C5214 - C5213 + C5216 - C5215) * C1059 +
             (C5218 - C5217 + C5220 - C5219) * C1066 +
             (C5222 - C5221 + C5224 - C5223) * C48593) *
                C48573 +
            ((C6524 - C6523 + C6526 - C6525) * C1064 +
             (C6528 - C6527 + C6530 - C6529) * C1058 +
             (C6532 - C6531 + C6534 - C6533) * C1065 +
             (C6536 - C6535 + C6538 - C6537) * C1059 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C1066 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C4870 * C1882 - C48574 * C1885 + C4871 * C9590 - C48416 * C9592) *
                 C8916 +
             (C4870 * C1886 - C48574 * C1891 + C4871 * C9593 - C48416 * C9596) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C8916 +
             (C5206 - C5205 + C5208 - C5207) * C48214) *
                C11013 +
            ((C6524 - C6523 + C6526 - C6525) * C8916 +
             (C6528 - C6527 + C6530 - C6529) * C48214) *
                C11014 +
            ((C12573 - C12572 + C12575 - C12574) * C8916 +
             (C12577 - C12576 + C12579 - C12578) * C48214) *
                C11015 +
            ((C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C8916 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C4870 * C575 - C48574 * C580 + C4871 * C1419 - C48416 * C1423) *
                 C1064 +
             (C4870 * C581 - C48574 * C590 + C4871 * C1424 - C48416 * C1431) *
                 C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C48300 * C505 +
           ((C6323 * C1064 + C6324 * C1058 + C6091 * C1065 + C6092 * C1059 +
             (C5064 - C5063 + C5066 - C5065) * C1066 +
             (C5068 - C5067 + C5070 - C5069) * C48593) *
                C48573 +
            ((C6308 - C6307 + C6310 - C6309) * C1064 +
             (C6312 - C6311 + C6314 - C6313) * C1058 +
             (C6316 - C6315 + C6318 - C6317) * C1065 +
             (C6320 - C6319 + C6322 - C6321) * C1059 +
             (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                 C1066 +
             (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                 C48593) *
                C48376) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            (C12934 * C8916 + C12935 * C48214) * C11015 +
            ((C12927 - C12926 + C12929 - C12928) * C8916 +
             (C12931 - C12930 + C12933 - C12932) * C48214) *
                C48616) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C4870 * C1707 - C48574 * C1710 + C4871 * C9097 - C48416 * C9099) *
                 C8916 +
             (C4870 * C1711 - C48574 * C1716 + C4871 * C9100 - C48416 * C9103) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C48300 * C505 +
           ((C6323 * C8916 + C6324 * C48214) * C11013 +
            (C12374 * C8916 + C12375 * C48214) * C11014 +
            ((C12367 - C12366 + C12369 - C12368) * C8916 +
             (C12371 - C12370 + C12373 - C12372) * C48214) *
                C11015 +
            ((C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                 C8916 +
             (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                 C48214) *
                C48616) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C6287 - C6288 + C6289 - C6290) * C1064 +
            (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
            C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
               C48376) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C1064 +
            (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
            C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
               C48573 +
           ((C6879 - C6880 + C6881 - C6882) * C1064 +
            (C6883 - C6884 + C6885 - C6886) * C1058 +
            (C6307 - C6308 + C6309 - C6310) * C1065 +
            (C6311 - C6312 + C6313 - C6314) * C1059 +
            (C6315 - C6316 + C6317 - C6318) * C1066 +
            (C6319 - C6320 + C6321 - C6322) * C48593) *
               C48376) *
              C48300 * C572 +
          (((C6880 - C6879 + C6882 - C6881) * C1064 +
            (C6884 - C6883 + C6886 - C6885) * C1058 +
            (C6308 - C6307 + C6310 - C6309) * C1065 +
            (C6312 - C6311 + C6314 - C6313) * C1059 +
            (C6316 - C6315 + C6318 - C6317) * C1066 +
            (C6320 - C6319 + C6322 - C6321) * C48593) *
               C48573 +
           ((C48574 * C1233 - C4870 * C1229 + C48416 * C1885 - C4871 * C1882) *
                C1064 +
            (C48574 * C1241 - C4870 * C1234 + C48416 * C1891 - C4871 * C1886) *
                C1058 +
            (C48574 * C1235 - C4870 * C1230 + C48416 * C1887 - C4871 * C1883) *
                C1065 +
            (C48574 * C1242 - C4870 * C1236 + C48416 * C1892 - C4871 * C1888) *
                C1059 +
            (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                C1066 +
            (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                C48593) *
               C48376) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           C14277 * C11015 + C14282 * C48616) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C8916 +
            (C6292 - C6291 + C6294 - C6293) * C48214) *
               C11013 +
           ((C6879 - C6880 + C6881 - C6882) * C8916 +
            (C6883 - C6884 + C6885 - C6886) * C48214) *
               C11014 +
           ((C12926 - C12927 + C12928 - C12929) * C8916 +
            (C12930 - C12931 + C12932 - C12933) * C48214) *
               C11015 +
           ((C14269 - C14270 + C14271 - C14272) * C8916 +
            (C14273 - C14274 + C14275 - C14276) * C48214) *
               C48616) *
              C48300 * C572 +
          (C14277 * C11013 + C14282 * C11014 +
           ((C14270 - C14269 + C14272 - C14271) * C8916 +
            (C14274 - C14273 + C14276 - C14275) * C48214) *
               C11015 +
           ((C48574 * C9001 - C4870 * C8999 + C48416 * C9353 - C4871 * C9352) *
                C8916 +
            (C48574 * C9005 - C4870 * C9002 + C48416 * C9355 - C4871 * C9354) *
                C48214) *
               C48616) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C6879 - C6880 + C6881 - C6882) * C1064 +
             (C6883 - C6884 + C6885 - C6886) * C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C1064 +
             (C7086 - C7085 + C7088 - C7087) * C1058 +
             (C6524 - C6523 + C6526 - C6525) * C1065 +
             (C6528 - C6527 + C6530 - C6529) * C1059 +
             (C6532 - C6531 + C6534 - C6533) * C1066 +
             (C6536 - C6535 + C6538 - C6537) * C48593) *
                C48573 +
            ((C48574 * C1423 - C4870 * C1419 + C48416 * C2316 - C4871 * C2307) *
                 C1064 +
             (C48574 * C1431 - C4870 * C1424 + C48416 * C2325 - C4871 * C2317) *
                 C1058 +
             (C48574 * C1425 - C4870 * C1420 + C48416 * C2318 - C4871 * C2308) *
                 C1065 +
             (C48574 * C1432 - C4870 * C1426 + C48416 * C2326 - C4871 * C2319) *
                 C1059 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C1066 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C14269 - C14270 + C14271 - C14272) * C8916 +
             (C14273 - C14274 + C14275 - C14276) * C48214) *
                C48616) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C8916 +
             (C7086 - C7085 + C7088 - C7087) * C48214) *
                C11013 +
            ((C13136 - C13135 + C13138 - C13137) * C8916 +
             (C13140 - C13139 + C13142 - C13141) * C48214) *
                C11014 +
            ((C14414 - C14413 + C14416 - C14415) * C8916 +
             (C14418 - C14417 + C14420 - C14419) * C48214) *
                C11015 +
            ((C48574 * C9099 - C4870 * C9097 + C48416 * C9594 - C4871 * C9591) *
                 C8916 +
             (C48574 * C9103 - C4870 * C9100 + C48416 * C9597 - C4871 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C1064 +
             (C4878 - C4877 + C4880 - C4879) * C1058 +
             (C4882 - C4881 + C4884 - C4883) * C1065 +
             (C4886 - C4885 + C4888 - C4887) * C1059 +
             (C4890 - C4889 + C4892 - C4891) * C1066 +
             (C4894 - C4893 + C4896 - C4895) * C48593) *
                C48573 +
            (C6325 * C1064 + C6326 * C1058 + C6327 * C1065 + C6328 * C1059 +
             (C5063 - C5064 + C5065 - C5066) * C1066 +
             (C5067 - C5068 + C5069 - C5070) * C48593) *
                C48376) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C1064 +
             (C5206 - C5205 + C5208 - C5207) * C1058 +
             (C5210 - C5209 + C5212 - C5211) * C1065 +
             (C5214 - C5213 + C5216 - C5215) * C1059 +
             (C5218 - C5217 + C5220 - C5219) * C1066 +
             (C5222 - C5221 + C5224 - C5223) * C48593) *
                C48573 +
            ((C6524 - C6523 + C6526 - C6525) * C1064 +
             (C6528 - C6527 + C6530 - C6529) * C1058 +
             (C6532 - C6531 + C6534 - C6533) * C1065 +
             (C6536 - C6535 + C6538 - C6537) * C1059 +
             (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                 C1066 +
             (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                 C48593) *
                C48376) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C8916 +
             (C4878 - C4877 + C4880 - C4879) * C48214) *
                C11013 +
            (C6325 * C8916 + C6326 * C48214) * C11014 +
            (C12376 * C8916 + C12377 * C48214) * C11015 +
            ((C12366 - C12367 + C12368 - C12369) * C8916 +
             (C12370 - C12371 + C12372 - C12373) * C48214) *
                C48616) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C8916 +
             (C5206 - C5205 + C5208 - C5207) * C48214) *
                C11013 +
            ((C6524 - C6523 + C6526 - C6525) * C8916 +
             (C6528 - C6527 + C6530 - C6529) * C48214) *
                C11014 +
            ((C12573 - C12572 + C12575 - C12574) * C8916 +
             (C12577 - C12576 + C12579 - C12578) * C48214) *
                C11015 +
            ((C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C8916 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48214) *
                C48616) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C1064 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C1058 +
             (C4873 - C4874 + C4875 - C4876) * C1065 +
             (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
             C4914 * C48593) *
                C48573 +
            ((C6287 - C6288 + C6289 - C6290) * C1064 +
             (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
             C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
                C48376) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C1064 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C1058 +
             (C5201 - C5202 + C5203 - C5204) * C1065 +
             (C5205 - C5206 + C5207 - C5208) * C1059 +
             (C5209 - C5210 + C5211 - C5212) * C1066 +
             (C5213 - C5214 + C5215 - C5216) * C48593) *
                C48573 +
            ((C7081 - C7082 + C7083 - C7084) * C1064 +
             (C7085 - C7086 + C7087 - C7088) * C1058 +
             (C6523 - C6524 + C6525 - C6526) * C1065 +
             (C6527 - C6528 + C6529 - C6530) * C1059 +
             (C6531 - C6532 + C6533 - C6534) * C1066 +
             (C6535 - C6536 + C6537 - C6538) * C48593) *
                C48376) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C1064 +
             (C6292 - C6291 + C6294 - C6293) * C1058 + C6325 * C1065 +
             C6326 * C1059 + C6327 * C1066 + C6328 * C48593) *
                C48573 +
            ((C6879 - C6880 + C6881 - C6882) * C1064 +
             (C6883 - C6884 + C6885 - C6886) * C1058 +
             (C6307 - C6308 + C6309 - C6310) * C1065 +
             (C6311 - C6312 + C6313 - C6314) * C1059 +
             (C6315 - C6316 + C6317 - C6318) * C1066 +
             (C6319 - C6320 + C6321 - C6322) * C48593) *
                C48376) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C1064 +
             (C7086 - C7085 + C7088 - C7087) * C1058 +
             (C6524 - C6523 + C6526 - C6525) * C1065 +
             (C6528 - C6527 + C6530 - C6529) * C1059 +
             (C6532 - C6531 + C6534 - C6533) * C1066 +
             (C6536 - C6535 + C6538 - C6537) * C48593) *
                C48573 +
            ((C48574 * C1423 - C4870 * C1419 + C48416 * C2316 - C4871 * C2307) *
                 C1064 +
             (C48574 * C1431 - C4870 * C1424 + C48416 * C2325 - C4871 * C2317) *
                 C1058 +
             (C48574 * C1425 - C4870 * C1420 + C48416 * C2318 - C4871 * C2308) *
                 C1065 +
             (C48574 * C1432 - C4870 * C1426 + C48416 * C2326 - C4871 * C2319) *
                 C1059 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C1066 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48593) *
                C48376) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C8916 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48214) *
                C11013 +
            ((C6287 - C6288 + C6289 - C6290) * C8916 +
             (C6291 - C6292 + C6293 - C6294) * C48214) *
                C11014 +
            C14277 * C11015 + C14282 * C48616) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C8916 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48214) *
                C11013 +
            ((C7081 - C7082 + C7083 - C7084) * C8916 +
             (C7085 - C7086 + C7087 - C7088) * C48214) *
                C11014 +
            ((C13135 - C13136 + C13137 - C13138) * C8916 +
             (C13139 - C13140 + C13141 - C13142) * C48214) *
                C11015 +
            ((C14413 - C14414 + C14415 - C14416) * C8916 +
             (C14417 - C14418 + C14419 - C14420) * C48214) *
                C48616) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C8916 +
             (C6292 - C6291 + C6294 - C6293) * C48214) *
                C11013 +
            ((C6879 - C6880 + C6881 - C6882) * C8916 +
             (C6883 - C6884 + C6885 - C6886) * C48214) *
                C11014 +
            ((C12926 - C12927 + C12928 - C12929) * C8916 +
             (C12930 - C12931 + C12932 - C12933) * C48214) *
                C11015 +
            ((C14269 - C14270 + C14271 - C14272) * C8916 +
             (C14273 - C14274 + C14275 - C14276) * C48214) *
                C48616) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C8916 +
             (C7086 - C7085 + C7088 - C7087) * C48214) *
                C11013 +
            ((C13136 - C13135 + C13138 - C13137) * C8916 +
             (C13140 - C13139 + C13142 - C13141) * C48214) *
                C11014 +
            ((C14414 - C14413 + C14416 - C14415) * C8916 +
             (C14418 - C14417 + C14420 - C14419) * C48214) *
                C11015 +
            ((C48574 * C9099 - C4870 * C9097 + C48416 * C9594 - C4871 * C9591) *
                 C8916 +
             (C48574 * C9103 - C4870 * C9100 + C48416 * C9597 - C4871 * C9595) *
                 C48214) *
                C48616) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C1064 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C1058 +
            (C4873 - C4874 + C4875 - C4876) * C1065 +
            (C4877 - C4878 + C4879 - C4880) * C1059 + C4913 * C1066 +
            C4914 * C48593) *
               C48573 +
           ((C6287 - C6288 + C6289 - C6290) * C1064 +
            (C6291 - C6292 + C6293 - C6294) * C1058 + C6323 * C1065 +
            C6324 * C1059 + C6091 * C1066 + C6092 * C48593) *
               C48376) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C1064 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C1058 +
            (C5201 - C5202 + C5203 - C5204) * C1065 +
            (C5205 - C5206 + C5207 - C5208) * C1059 +
            (C5209 - C5210 + C5211 - C5212) * C1066 +
            (C5213 - C5214 + C5215 - C5216) * C48593) *
               C48573 +
           ((C7081 - C7082 + C7083 - C7084) * C1064 +
            (C7085 - C7086 + C7087 - C7088) * C1058 +
            (C6523 - C6524 + C6525 - C6526) * C1065 +
            (C6527 - C6528 + C6529 - C6530) * C1059 +
            (C6531 - C6532 + C6533 - C6534) * C1066 +
            (C6535 - C6536 + C6537 - C6538) * C48593) *
               C48376) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C1064 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C1058 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C1065 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C1059 +
            (C48574 * C937 - C4870 * C930 + C48416 * C2818 - C4871 * C2812) *
                C1066 +
            (C48574 * C945 - C4870 * C938 + C48416 * C2824 - C4871 * C2819) *
                C48593) *
               C48573 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C1064 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C1058 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C1065 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C1059 +
            (C48574 * C2314 - C4870 * C2306 + C48416 * C3259 - C4871 * C3254) *
                C1066 +
            (C48574 * C2324 - C4870 * C2315 + C48416 * C3263 - C4871 * C3260) *
                C48593) *
               C48376) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C8916 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48214) *
               C11013 +
           ((C6287 - C6288 + C6289 - C6290) * C8916 +
            (C6291 - C6292 + C6293 - C6294) * C48214) *
               C11014 +
           C14277 * C11015 + C14282 * C48616) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C8916 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C48214) *
               C11013 +
           ((C7081 - C7082 + C7083 - C7084) * C8916 +
            (C7085 - C7086 + C7087 - C7088) * C48214) *
               C11014 +
           ((C13135 - C13136 + C13137 - C13138) * C8916 +
            (C13139 - C13140 + C13141 - C13142) * C48214) *
               C11015 +
           ((C14413 - C14414 + C14415 - C14416) * C8916 +
            (C14417 - C14418 + C14419 - C14420) * C48214) *
               C48616) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C8916 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C48214) *
               C11013 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C8916 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C48214) *
               C11014 +
           ((C48574 * C2316 - C4870 * C2307 + C48416 * C10042 -
             C4871 * C10040) *
                C8916 +
            (C48574 * C2325 - C4870 * C2317 + C48416 * C10046 -
             C4871 * C10043) *
                C48214) *
               C11015 +
           ((C48574 * C9592 - C4870 * C9590 + C48416 * C10476 -
             C4871 * C10475) *
                C8916 +
            (C48574 * C9596 - C4870 * C9593 + C48416 * C10478 -
             C4871 * C10477) *
                C48214) *
               C48616) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C48329 * C265 - C113 * C259) * C1064 +
            (C48329 * C277 - C113 * C266) * C1058 + (C285 - C284) * C1065 +
            (C287 - C286) * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           ((C48329 * C580 - C113 * C575) * C1064 +
            (C48329 * C590 - C113 * C581) * C1058 + (C1070 - C1071) * C1065 +
            (C1072 - C1073) * C1059 + C1082 * C1066 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C1064 + (C151 - C150) * C1058 +
            (C153 - C152) * C1065 + (C155 - C154) * C1059 +
            (C157 - C156) * C1066 + (C159 - C158) * C48593) *
               C48641 +
           ((C284 - C285) * C1064 + (C286 - C287) * C1058 +
            (C288 - C289) * C1065 + (C290 - C291) * C1059 +
            (C292 - C293) * C1066 + (C294 - C295) * C48593) *
               C48629 +
           ((C1071 - C1070) * C1064 + (C1073 - C1072) * C1058 +
            (C1075 - C1074) * C1065 + (C1077 - C1076) * C1059 +
            (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C1064 + C169 * C1058 + C170 * C1065 + C171 * C1059 +
            C172 * C1066 + C173 * C48593) *
               C48641 +
           (C1068 * C1064 + C1069 * C1058 + (C293 - C292) * C1065 +
            (C295 - C294) * C1059 + (C297 - C296) * C1066 +
            (C299 - C298) * C48593) *
               C48629 +
           (C1082 * C1064 + C1083 * C1058 + (C1079 - C1078) * C1065 +
            (C1081 - C1080) * C1059 + (C48329 * C588 - C113 * C579) * C1066 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C48283 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48318 * C48300 * C48283 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48329 * C138 - C113 * C125) * C118 +
           (C48329 * C146 - C113 * C139) * C106) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C48300 * C48283 * C110 +
          ((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
           (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
           (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
           (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
           (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
           (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
              C48318 * C48300 * C48283 * C111 +
          (C2489 * C1064 + C2490 * C1058 +
           (C2470 - C2469 + C2472 - C2471 + C2474 - C2473) * C1065 +
           (C2476 - C2475 + C2478 - C2477 + C2480 - C2479) * C1059 +
           (C48642 * C134 - C2441 * C123 + C48631 * C397 - C2442 * C387 +
            C48609 * C941 - C2443 * C932) *
               C1066 +
           (C48642 * C144 - C2441 * C135 + C48631 * C405 - C2442 * C398 +
            C48609 * C947 - C2443 * C942) *
               C48593) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
            C1082 * C7740 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C7738 + (C151 - C150) * C48638 +
            (C153 - C152) * C7739 + (C155 - C154) * C48625 +
            (C157 - C156) * C7740 + (C159 - C158) * C48593) *
               C7735 +
           (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
            C3919 * C7740 + C3920 * C48593) *
               C7736 +
           (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
            (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C7738 + C169 * C48638 + C170 * C7739 + C171 * C48625 +
            C172 * C7740 + C173 * C48593) *
               C7735 +
           (C1068 * C7738 + C1069 * C48638 + C3787 * C7739 + C3788 * C48625 +
            (C297 - C296) * C7740 + (C299 - C298) * C48593) *
               C7736 +
           (C1082 * C7738 + C1083 * C48638 + (C1079 - C1078) * C7739 +
            (C1081 - C1080) * C48625 + (C48329 * C588 - C113 * C579) * C7740 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           (C1720 * C8916 + C1721 * C48214) * C8913 +
           ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
           ((C48329 * C1710 - C113 * C1707) * C8916 +
            (C48329 * C1716 - C113 * C1711) * C48214) *
               C8915) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
           (C1258 * C8916 + C1259 * C48214) * C8912 +
           (C1262 * C8916 + C1263 * C48214) * C8913 +
           ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
           ((C113 * C1708 - C48329 * C1712) * C8916 +
            (C113 * C1713 - C48329 * C1717) * C48214) *
               C8915) *
              C48300 * C48283 * C111 +
          ((C168 * C8916 + C169 * C48214) * C8911 +
           (C1068 * C8916 + C1069 * C48214) * C8912 +
           (C1082 * C8916 + C1083 * C48214) * C8913 +
           ((C1271 - C1270) * C8916 + (C1273 - C1272) * C48214) * C8914 +
           ((C48329 * C1714 - C113 * C1709) * C8916 +
            (C48329 * C1718 - C113 * C1715) * C48214) *
               C8915) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C48642 * C265 - C2441 * C259 + C48631 * C682 - C2442 * C677 +
             C48609 * C2310 - C2443 * C2304) *
                C8916 +
            (C48642 * C277 - C2441 * C266 + C48631 * C692 - C2442 * C683 +
             C48609 * C2322 - C2443 * C2311) *
                C48214) *
               C7736 +
           ((C48642 * C580 - C2441 * C575 + C48631 * C1423 - C2442 * C1419 +
             C48609 * C2316 - C2443 * C2307) *
                C8916 +
            (C48642 * C590 - C2441 * C581 + C48631 * C1431 - C2442 * C1424 +
             C48609 * C2325 - C2443 * C2317) *
                C48214) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
               C7735 +
           ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
               C7736 +
           ((C2441 * C576 - C48642 * C582 + C2442 * C1420 - C48631 * C1425 +
             C2443 * C2308 - C48609 * C2318) *
                C8916 +
            (C2441 * C583 - C48642 * C591 + C2442 * C1426 - C48631 * C1432 +
             C2443 * C2319 - C48609 * C2326) *
                C48214) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C2489 * C8916 + C2490 * C48214) * C7735 +
           ((C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C8916 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C48214) *
               C7736 +
           ((C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
             C48609 * C2320 - C2443 * C2309) *
                C8916 +
            (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
             C48609 * C2327 - C2443 * C2321) *
                C48214) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C255 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C48300 * C255 +
           ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C48300 * C255 +
           ((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C1064 +
            (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C1058 +
            (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C1065 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C1059 +
            (C48642 * C271 - C2441 * C262 + C48631 * C688 - C2442 * C680 +
             C48609 * C2637 - C2443 * C2636) *
                C1066 +
            (C48642 * C280 - C2441 * C272 + C48631 * C695 - C2442 * C689 +
             C48609 * C2639 - C2443 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C255 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C255 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C2441 * C1229 - C48642 * C1233 + C2442 * C1882 - C48631 * C1885 +
              C2443 * C9590 - C48609 * C9592) *
                 C8916 +
             (C2441 * C1234 - C48642 * C1241 + C2442 * C1886 - C48631 * C1891 +
              C2443 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C48300 * C255 +
           (((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C8916 +
             (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C48214) *
                C7735 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C8916 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C48214) *
                C7736 +
            ((C48642 * C1235 - C2441 * C1230 + C48631 * C1887 - C2442 * C1883 +
              C48609 * C9855 - C2443 * C9854) *
                 C8916 +
             (C48642 * C1242 - C2441 * C1236 + C48631 * C1892 - C2442 * C1888 +
              C48609 * C9857 - C2443 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C113 * C677 - C48329 * C682) * C1064 +
             (C113 * C683 - C48329 * C692) * C1058 + (C1436 - C1437) * C1065 +
             (C1438 - C1439) * C1059 + (C1440 - C1441) * C1066 +
             (C1442 - C1443) * C48593) *
                C48629 +
            ((C113 * C1419 - C48329 * C1423) * C1064 +
             (C113 * C1424 - C48329 * C1431) * C1058 + (C1444 - C1445) * C1065 +
             (C1446 - C1447) * C1059 + (C1448 - C1449) * C1066 +
             (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C381 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C381 +
           ((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C1064 +
            (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C1058 +
            (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C1065 +
            (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C1059 +
            (C48642 * C395 - C2441 * C386 + C48631 * C939 - C2442 * C931 +
             C48609 * C2820 - C2443 * C2813) *
                C1066 +
            (C48642 * C404 - C2441 * C396 + C48631 * C946 - C2442 * C940 +
             C48609 * C2825 - C2443 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C113 * C1882 - C48329 * C1885) * C8916 +
             (C113 * C1886 - C48329 * C1891) * C48214) *
                C8914 +
            ((C113 * C9097 - C48329 * C9099) * C8916 +
             (C113 * C9100 - C48329 * C9103) * C48214) *
                C8915) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C381 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C2441 * C677 - C48642 * C682 + C2442 * C2304 - C48631 * C2310 +
              C2443 * C3252 - C48609 * C3255) *
                 C8916 +
             (C2441 * C683 - C48642 * C692 + C2442 * C2311 - C48631 * C2322 +
              C2443 * C3256 - C48609 * C3261) *
                 C48214) *
                C7736 +
            ((C2441 * C1419 - C48642 * C1423 + C2442 * C2307 - C48631 * C2316 +
              C2443 * C10040 - C48609 * C10042) *
                 C8916 +
             (C2441 * C1424 - C48642 * C1431 + C2442 * C2317 - C48631 * C2325 +
              C2443 * C10043 - C48609 * C10046) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C381 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C8916 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C48214) *
                C7735 +
            ((C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
              C48609 * C3257 - C2443 * C3253) *
                 C8916 +
             (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
              C48609 * C3262 - C2443 * C3258) *
                 C48214) *
                C7736 +
            ((C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C8916 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C505 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C48300 * C505 +
           ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C48300 * C505 +
           ((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C1064 +
            (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C1058 +
            (C2654 - C2653 + C2656 - C2655 + C2658 - C2657) * C1065 +
            (C2660 - C2659 + C2662 - C2661 + C2664 - C2663) * C1059 +
            (C48642 * C271 - C2441 * C262 + C48631 * C688 - C2442 * C680 +
             C48609 * C2637 - C2443 * C2636) *
                C1066 +
            (C48642 * C280 - C2441 * C272 + C48631 * C695 - C2442 * C689 +
             C48609 * C2639 - C2443 * C2638) *
                C48593) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C505 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C505 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            ((C9871 - C9872 + C9873 - C9874 + C9875 - C9876) * C8916 +
             (C9877 - C9878 + C9879 - C9880 + C9881 - C9882) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C2441 * C1229 - C48642 * C1233 + C2442 * C1882 - C48631 * C1885 +
              C2443 * C9590 - C48609 * C9592) *
                 C8916 +
             (C2441 * C1234 - C48642 * C1241 + C2442 * C1886 - C48631 * C1891 +
              C2443 * C9593 - C48609 * C9596) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C48300 * C505 +
           (((C2642 - C2641 + C2644 - C2643 + C2646 - C2645) * C8916 +
             (C2648 - C2647 + C2650 - C2649 + C2652 - C2651) * C48214) *
                C7735 +
            ((C9884 - C9883 + C9886 - C9885 + C9888 - C9887) * C8916 +
             (C9890 - C9889 + C9892 - C9891 + C9894 - C9893) * C48214) *
                C7736 +
            ((C48642 * C1235 - C2441 * C1230 + C48631 * C1887 - C2442 * C1883 +
              C48609 * C9855 - C2443 * C9854) *
                 C8916 +
             (C48642 * C1242 - C2441 * C1236 + C48631 * C1892 - C2442 * C1888 +
              C48609 * C9857 - C2443 * C9856) *
                 C48214) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
            C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
               C48641 +
           ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
            C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
               C48629 +
           ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
            (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
            (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C1736 * C48641 +
           ((C1727 - C1726) * C1064 + (C1729 - C1728) * C1058 +
            (C1267 - C1266) * C1065 + (C1269 - C1268) * C1059 +
            (C1271 - C1270) * C1066 + (C1273 - C1272) * C48593) *
               C48629 +
           ((C48329 * C1710 - C113 * C1707) * C1064 +
            (C48329 * C1716 - C113 * C1711) * C1058 +
            (C48329 * C1712 - C113 * C1708) * C1065 +
            (C48329 * C1717 - C113 * C1713) * C1059 +
            (C48329 * C1714 - C113 * C1709) * C1066 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C571 +
          ((C113 * C259 - C48329 * C265) * C114 +
           (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48318 * C48300 * C572 +
          ((C48329 * C580 - C113 * C575) * C114 +
           (C48329 * C590 - C113 * C581) * C102 +
           (C48329 * C582 - C113 * C576) * C115 +
           (C48329 * C591 - C113 * C583) * C103 +
           (C48329 * C584 - C113 * C577) * C116 +
           (C48329 * C592 - C113 * C585) * C104 +
           (C48329 * C586 - C113 * C578) * C117 +
           (C48329 * C593 - C113 * C587) * C105 +
           (C48329 * C588 - C113 * C579) * C118 +
           (C48329 * C594 - C113 * C589) * C106) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C48300 * C571 +
          ((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
            C2443 * C2304 - C48609 * C2310) *
               C1064 +
           (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
            C2443 * C2311 - C48609 * C2322) *
               C1058 +
           (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
           (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
           (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
           (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
              C48318 * C48300 * C572 +
          ((C48642 * C580 - C2441 * C575 + C48631 * C1423 - C2442 * C1419 +
            C48609 * C2316 - C2443 * C2307) *
               C1064 +
           (C48642 * C590 - C2441 * C581 + C48631 * C1431 - C2442 * C1424 +
            C48609 * C2325 - C2443 * C2317) *
               C1058 +
           (C48642 * C582 - C2441 * C576 + C48631 * C1425 - C2442 * C1420 +
            C48609 * C2318 - C2443 * C2308) *
               C1065 +
           (C48642 * C591 - C2441 * C583 + C48631 * C1432 - C2442 * C1426 +
            C48609 * C2326 - C2443 * C2319) *
               C1059 +
           (C48642 * C584 - C2441 * C577 + C48631 * C1427 - C2442 * C1421 +
            C48609 * C2320 - C2443 * C2309) *
               C1066 +
           (C48642 * C592 - C2441 * C585 + C48631 * C1433 - C2442 * C1428 +
            C48609 * C2327 - C2443 * C2321) *
               C48593) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 + C1258 * C7739 +
            C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
               C7735 +
           ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 + C1262 * C7739 +
            C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
               C7736 +
           ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
            (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
            (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C8300 * C7735 +
           ((C1727 - C1726) * C7738 + (C1729 - C1728) * C48638 +
            (C1267 - C1266) * C7739 + (C1269 - C1268) * C48625 +
            (C1271 - C1270) * C7740 + (C1273 - C1272) * C48593) *
               C7736 +
           ((C48329 * C1710 - C113 * C1707) * C7738 +
            (C48329 * C1716 - C113 * C1711) * C48638 +
            (C48329 * C1712 - C113 * C1708) * C7739 +
            (C48329 * C1717 - C113 * C1713) * C48625 +
            (C48329 * C1714 - C113 * C1709) * C7740 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C48300 * C571 +
          (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
           ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
           ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
           ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
           ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
              C48300 * C572 +
          (C9264 * C8911 + C9269 * C8912 + C9270 * C8913 +
           ((C9261 - C9260) * C8916 + (C9263 - C9262) * C48214) * C8914 +
           ((C48329 * C9250 - C113 * C9249) * C8916 +
            (C48329 * C9252 - C113 * C9251) * C48214) *
               C8915) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
               C7736 +
           C10329 * C48606) *
              C48300 * C571 +
          (((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
            (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
               C7735 +
           ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
            (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
               C7736 +
           ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
            (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
               C48606) *
              C48300 * C572 +
          (C10329 * C7735 +
           ((C10312 - C10311 + C10314 - C10313 + C10316 - C10315) * C8916 +
            (C10318 - C10317 + C10320 - C10319 + C10322 - C10321) * C48214) *
               C7736 +
           ((C48642 * C1710 - C2441 * C1707 + C48631 * C9099 - C2442 * C9097 +
             C48609 * C9594 - C2443 * C9591) *
                C8916 +
            (C48642 * C1716 - C2441 * C1711 + C48631 * C9103 - C2442 * C9100 +
             C48609 * C9597 - C2443 * C9595) *
                C48214) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C505 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C381 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C381 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C505 +
          (((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C381 +
           ((C48642 * C682 - C2441 * C677 + C48631 * C2310 - C2442 * C2304 +
             C48609 * C3255 - C2443 * C3252) *
                C1064 +
            (C48642 * C692 - C2441 * C683 + C48631 * C2322 - C2442 * C2311 +
             C48609 * C3261 - C2443 * C3256) *
                C1058 +
            (C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
             C48609 * C3257 - C2443 * C3253) *
                C1065 +
            (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
             C48609 * C3262 - C2443 * C3258) *
                C1059 +
            (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
             C48609 * C3259 - C2443 * C3254) *
                C1066 +
            (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
             C48609 * C3263 - C2443 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C381 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C381 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C505 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
             (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
                C48606) *
               C381 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C8916 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C48214) *
                C7735 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C8916 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C48214) *
                C7736 +
            ((C48642 * C1885 - C2441 * C1882 + C48631 * C9592 - C2442 * C9590 +
              C48609 * C10476 - C2443 * C10475) *
                 C8916 +
             (C48642 * C1891 - C2441 * C1886 + C48631 * C9596 - C2442 * C9593 +
              C48609 * C10478 - C2443 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C779 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C1064 +
            (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C1058 +
            (C2458 - C2457 + C2460 - C2459 + C2462 - C2461) * C1065 +
            (C2464 - C2463 + C2466 - C2465 + C2468 - C2467) * C1059 +
            (C2469 - C2470 + C2471 - C2472 + C2473 - C2474) * C1066 +
            (C2475 - C2476 + C2477 - C2478 + C2479 - C2480) * C48593) *
               C48318 * C779 +
           ((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C1064 +
            (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C1058 +
            (C2840 - C2839 + C2842 - C2841 + C2844 - C2843) * C1065 +
            (C2846 - C2845 + C2848 - C2847 + C2850 - C2849) * C1059 +
            (C48642 * C395 - C2441 * C386 + C48631 * C939 - C2442 * C931 +
             C48609 * C2820 - C2443 * C2813) *
                C1066 +
            (C48642 * C404 - C2441 * C396 + C48631 * C946 - C2442 * C940 +
             C48609 * C2825 - C2443 * C2821) *
                C48593) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C779 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C2446 - C2445 + C2448 - C2447 + C2450 - C2449) * C8916 +
             (C2452 - C2451 + C2454 - C2453 + C2456 - C2455) * C48214) *
                C7735 +
            ((C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C8916 +
             (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C48214) *
                C7736 +
            ((C9883 - C9884 + C9885 - C9886 + C9887 - C9888) * C8916 +
             (C9889 - C9890 + C9891 - C9892 + C9893 - C9894) * C48214) *
                C48606) *
               C779 +
           (((C2828 - C2827 + C2830 - C2829 + C2832 - C2831) * C8916 +
             (C2834 - C2833 + C2836 - C2835 + C2838 - C2837) * C48214) *
                C7735 +
            ((C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
              C48609 * C3257 - C2443 * C3253) *
                 C8916 +
             (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
              C48609 * C3262 - C2443 * C3258) *
                 C48214) *
                C7736 +
            ((C48642 * C1425 - C2441 * C1420 + C48631 * C2318 - C2442 * C2308 +
              C48609 * C10044 - C2443 * C10041) *
                 C8916 +
             (C48642 * C1432 - C2441 * C1426 + C48631 * C2326 - C2442 * C2319 +
              C48609 * C10047 - C2443 * C10045) *
                 C48214) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C255 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C779 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C1064 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C1058 +
            (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
            (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
            C2489 * C1066 + C2490 * C48593) *
               C48318 * C779 +
           ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C1064 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C1058 +
            (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
            (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
            (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
            (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
               C48318 * C48603) *
              C255 +
          (((C2441 * C259 - C48642 * C265 + C2442 * C677 - C48631 * C682 +
             C2443 * C2304 - C48609 * C2310) *
                C1064 +
            (C2441 * C266 - C48642 * C277 + C2442 * C683 - C48631 * C692 +
             C2443 * C2311 - C48609 * C2322) *
                C1058 +
            (C2641 - C2642 + C2643 - C2644 + C2645 - C2646) * C1065 +
            (C2647 - C2648 + C2649 - C2650 + C2651 - C2652) * C1059 +
            (C2653 - C2654 + C2655 - C2656 + C2657 - C2658) * C1066 +
            (C2659 - C2660 + C2661 - C2662 + C2663 - C2664) * C48593) *
               C48318 * C779 +
           ((C48642 * C682 - C2441 * C677 + C48631 * C2310 - C2442 * C2304 +
             C48609 * C3255 - C2443 * C3252) *
                C1064 +
            (C48642 * C692 - C2441 * C683 + C48631 * C2322 - C2442 * C2311 +
             C48609 * C3261 - C2443 * C3256) *
                C1058 +
            (C48642 * C684 - C2441 * C678 + C48631 * C2312 - C2442 * C2305 +
             C48609 * C3257 - C2443 * C3253) *
                C1065 +
            (C48642 * C693 - C2441 * C685 + C48631 * C2323 - C2442 * C2313 +
             C48609 * C3262 - C2443 * C3258) *
                C1059 +
            (C48642 * C686 - C2441 * C679 + C48631 * C2314 - C2442 * C2306 +
             C48609 * C3259 - C2443 * C3254) *
                C1066 +
            (C48642 * C694 - C2441 * C687 + C48631 * C2324 - C2442 * C2315 +
             C48609 * C3263 - C2443 * C3260) *
                C48593) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C779 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
              C48609 * C933 - C2443 * C928) *
                 C8916 +
             (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
              C48609 * C943 - C2443 * C934) *
                 C48214) *
                C7735 +
            ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
             (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
                C7736 +
            C10329 * C48606) *
               C779 +
           (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
              C2443 * C2810 - C48609 * C2814) *
                 C8916 +
             (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
              C2443 * C2815 - C48609 * C2822) *
                 C48214) *
                C7735 +
            ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
             (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
                C7736 +
            ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
             (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
                C48606) *
               C48603) *
              C255 +
          ((((C9860 - C9859 + C9862 - C9861 + C9864 - C9863) * C8916 +
             (C9866 - C9865 + C9868 - C9867 + C9870 - C9869) * C48214) *
                C7735 +
            ((C9872 - C9871 + C9874 - C9873 + C9876 - C9875) * C8916 +
             (C9878 - C9877 + C9880 - C9879 + C9882 - C9881) * C48214) *
                C7736 +
            ((C10311 - C10312 + C10313 - C10314 + C10315 - C10316) * C8916 +
             (C10317 - C10318 + C10319 - C10320 + C10321 - C10322) * C48214) *
                C48606) *
               C779 +
           (((C10481 - C10480 + C10483 - C10482 + C10485 - C10484) * C8916 +
             (C10487 - C10486 + C10489 - C10488 + C10491 - C10490) * C48214) *
                C7735 +
            ((C10493 - C10492 + C10495 - C10494 + C10497 - C10496) * C8916 +
             (C10499 - C10498 + C10501 - C10500 + C10503 - C10502) * C48214) *
                C7736 +
            ((C48642 * C1885 - C2441 * C1882 + C48631 * C9592 - C2442 * C9590 +
              C48609 * C10476 - C2443 * C10475) *
                 C8916 +
             (C48642 * C1891 - C2441 * C1886 + C48631 * C9596 - C2442 * C9593 +
              C48609 * C10478 - C2443 * C10477) *
                 C48214) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C1064 +
            (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
            (C410 - C411) * C1059 + (C412 - C413) * C1066 +
            (C414 - C415) * C48593) *
               C48641 +
           ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
            (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
            (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
               C48629 +
           ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
            (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
            (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C1064 +
            (C48329 * C943 - C113 * C934) * C1058 +
            (C48329 * C935 - C113 * C929) * C1065 +
            (C48329 * C944 - C113 * C936) * C1059 +
            (C48329 * C937 - C113 * C930) * C1066 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C48641 +
           ((C48329 * C2310 - C113 * C2304) * C1064 +
            (C48329 * C2322 - C113 * C2311) * C1058 +
            (C48329 * C2312 - C113 * C2305) * C1065 +
            (C48329 * C2323 - C113 * C2313) * C1059 +
            (C48329 * C2314 - C113 * C2306) * C1066 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C48629 +
           ((C48329 * C2316 - C113 * C2307) * C1064 +
            (C48329 * C2325 - C113 * C2317) * C1058 +
            (C48329 * C2318 - C113 * C2308) * C1065 +
            (C48329 * C2326 - C113 * C2319) * C1059 +
            (C48329 * C2320 - C113 * C2309) * C1066 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C925 +
          ((C113 * C383 - C48329 * C389) * C114 +
           (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48318 * C926 +
          ((C48329 * C933 - C113 * C928) * C114 +
           (C48329 * C943 - C113 * C934) * C102 +
           (C48329 * C935 - C113 * C929) * C115 +
           (C48329 * C944 - C113 * C936) * C103 +
           (C48329 * C937 - C113 * C930) * C116 +
           (C48329 * C945 - C113 * C938) * C104 +
           (C48329 * C939 - C113 * C931) * C117 +
           (C48329 * C946 - C113 * C940) * C105 +
           (C48329 * C941 - C113 * C932) * C118 +
           (C48329 * C947 - C113 * C942) * C106) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
            C48609 * C933 - C2443 * C928) *
               C1064 +
           (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
            C48609 * C943 - C2443 * C934) *
               C1058 +
           (C2445 - C2446 + C2447 - C2448 + C2449 - C2450) * C1065 +
           (C2451 - C2452 + C2453 - C2454 + C2455 - C2456) * C1059 +
           C2489 * C1066 + C2490 * C48593) *
              C48318 * C925 +
          ((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
            C2443 * C2810 - C48609 * C2814) *
               C1064 +
           (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
            C2443 * C2815 - C48609 * C2822) *
               C1058 +
           (C2827 - C2828 + C2829 - C2830 + C2831 - C2832) * C1065 +
           (C2833 - C2834 + C2835 - C2836 + C2837 - C2838) * C1059 +
           (C2839 - C2840 + C2841 - C2842 + C2843 - C2844) * C1066 +
           (C2845 - C2846 + C2847 - C2848 + C2849 - C2850) * C48593) *
              C48318 * C926 +
          ((C48642 * C933 - C2441 * C928 + C48631 * C2814 - C2442 * C2810 +
            C48609 * C3669 - C2443 * C3666) *
               C1064 +
           (C48642 * C943 - C2441 * C934 + C48631 * C2822 - C2442 * C2815 +
            C48609 * C3675 - C2443 * C3670) *
               C1058 +
           (C48642 * C935 - C2441 * C929 + C48631 * C2816 - C2442 * C2811 +
            C48609 * C3671 - C2443 * C3667) *
               C1065 +
           (C48642 * C944 - C2441 * C936 + C48631 * C2823 - C2442 * C2817 +
            C48609 * C3676 - C2443 * C3672) *
               C1059 +
           (C48642 * C937 - C2441 * C930 + C48631 * C2818 - C2442 * C2812 +
            C48609 * C3673 - C2443 * C3668) *
               C1066 +
           (C48642 * C945 - C2441 * C938 + C48631 * C2824 - C2442 * C2819 +
            C48609 * C3677 - C2443 * C3674) *
               C48593) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C7738 +
            (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
            (C410 - C411) * C48625 + (C412 - C413) * C7740 +
            (C414 - C415) * C48593) *
               C7735 +
           ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
            (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
            (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
               C7736 +
           ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
            (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
            (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C7738 +
            (C48329 * C943 - C113 * C934) * C48638 +
            (C48329 * C935 - C113 * C929) * C7739 +
            (C48329 * C944 - C113 * C936) * C48625 +
            (C48329 * C937 - C113 * C930) * C7740 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C7735 +
           ((C48329 * C2310 - C113 * C2304) * C7738 +
            (C48329 * C2322 - C113 * C2311) * C48638 +
            (C48329 * C2312 - C113 * C2305) * C7739 +
            (C48329 * C2323 - C113 * C2313) * C48625 +
            (C48329 * C2314 - C113 * C2306) * C7740 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C7736 +
           ((C48329 * C2316 - C113 * C2307) * C7738 +
            (C48329 * C2325 - C113 * C2317) * C48638 +
            (C48329 * C2318 - C113 * C2308) * C7739 +
            (C48329 * C2326 - C113 * C2319) * C48625 +
            (C48329 * C2320 - C113 * C2309) * C7740 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C8916 +
            (C113 * C390 - C48329 * C401) * C48214) *
               C8911 +
           ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
           ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
           ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
           ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C8916 +
            (C48329 * C943 - C113 * C934) * C48214) *
               C8911 +
           ((C48329 * C2310 - C113 * C2304) * C8916 +
            (C48329 * C2322 - C113 * C2311) * C48214) *
               C8912 +
           ((C48329 * C2316 - C113 * C2307) * C8916 +
            (C48329 * C2325 - C113 * C2317) * C48214) *
               C8913 +
           ((C48329 * C9592 - C113 * C9590) * C8916 +
            (C48329 * C9596 - C113 * C9593) * C48214) *
               C8914 +
           ((C48329 * C9594 - C113 * C9591) * C8916 +
            (C48329 * C9597 - C113 * C9595) * C48214) *
               C8915) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48642 * C126 - C2441 * C119 + C48631 * C389 - C2442 * C383 +
             C48609 * C933 - C2443 * C928) *
                C8916 +
            (C48642 * C140 - C2441 * C127 + C48631 * C401 - C2442 * C390 +
             C48609 * C943 - C2443 * C934) *
                C48214) *
               C7735 +
           ((C9859 - C9860 + C9861 - C9862 + C9863 - C9864) * C8916 +
            (C9865 - C9866 + C9867 - C9868 + C9869 - C9870) * C48214) *
               C7736 +
           C10329 * C48606) *
              C925 +
          (((C2441 * C383 - C48642 * C389 + C2442 * C928 - C48631 * C933 +
             C2443 * C2810 - C48609 * C2814) *
                C8916 +
            (C2441 * C390 - C48642 * C401 + C2442 * C934 - C48631 * C943 +
             C2443 * C2815 - C48609 * C2822) *
                C48214) *
               C7735 +
           ((C10480 - C10481 + C10482 - C10483 + C10484 - C10485) * C8916 +
            (C10486 - C10487 + C10488 - C10489 + C10490 - C10491) * C48214) *
               C7736 +
           ((C10492 - C10493 + C10494 - C10495 + C10496 - C10497) * C8916 +
            (C10498 - C10499 + C10500 - C10501 + C10502 - C10503) * C48214) *
               C48606) *
              C926 +
          (((C48642 * C933 - C2441 * C928 + C48631 * C2814 - C2442 * C2810 +
             C48609 * C3669 - C2443 * C3666) *
                C8916 +
            (C48642 * C943 - C2441 * C934 + C48631 * C2822 - C2442 * C2815 +
             C48609 * C3675 - C2443 * C3670) *
                C48214) *
               C7735 +
           ((C48642 * C2310 - C2441 * C2304 + C48631 * C3255 - C2442 * C3252 +
             C48609 * C10907 - C2443 * C10905) *
                C8916 +
            (C48642 * C2322 - C2441 * C2311 + C48631 * C3261 - C2442 * C3256 +
             C48609 * C10911 - C2443 * C10908) *
                C48214) *
               C7736 +
           ((C48642 * C2316 - C2441 * C2307 + C48631 * C10042 - C2442 * C10040 +
             C48609 * C10909 - C2443 * C10906) *
                C8916 +
            (C48642 * C2325 - C2441 * C2317 + C48631 * C10046 - C2442 * C10043 +
             C48609 * C10912 - C2443 * C10910) *
                C48214) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C48300 * C48283 * C110 +
          ((C4874 - C4873 + C4876 - C4875) * C3782 +
           (C4878 - C4877 + C4880 - C4879) * C3776 +
           (C4882 - C4881 + C4884 - C4883) * C3783 +
           (C4886 - C4885 + C4888 - C4887) * C3777 +
           (C4890 - C4889 + C4892 - C4891) * C3784 +
           (C4894 - C4893 + C4896 - C4895) * C3778 +
           (C4897 - C4898 + C4899 - C4900) * C3785 +
           (C4901 - C4902 + C4903 - C4904) * C48610) *
              C48318 * C48300 * C48283 * C111 +
          (C4913 * C3782 + C4914 * C3776 + C4915 * C3783 + C4916 * C3777 +
           (C4898 - C4897 + C4900 - C4899) * C3784 +
           (C4902 - C4901 + C4904 - C4903) * C3778 +
           (C48574 * C136 - C4870 * C124 + C48416 * C399 - C4871 * C388) *
               C3785 +
           (C48574 * C145 - C4870 * C137 + C48416 * C406 - C4871 * C400) *
               C48610) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           ((C6880 - C6879 + C6882 - C6881) * C47225 +
            (C6884 - C6883 + C6886 - C6885) * C48551 +
            (C6308 - C6307 + C6310 - C6309) * C47206 +
            (C6312 - C6311 + C6314 - C6313) * C48224) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C4874 - C4873 + C4876 - C4875) * C47225 +
            (C4878 - C4877 + C4880 - C4879) * C48551 +
            (C4882 - C4881 + C4884 - C4883) * C47206 +
            (C4886 - C4885 + C4888 - C4887) * C48224) *
               C7735 +
           (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 + C6328 * C48224) *
               C7736 +
           ((C6307 - C6308 + C6309 - C6310) * C47225 +
            (C6311 - C6312 + C6313 - C6314) * C48551 +
            (C6315 - C6316 + C6317 - C6318) * C47206 +
            (C6319 - C6320 + C6321 - C6322) * C48224) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C4913 * C47225 + C4914 * C48551 + C4915 * C47206 + C4916 * C48224) *
               C7735 +
           (C6091 * C47225 + C6092 * C48551 +
            (C5064 - C5063 + C5066 - C5065) * C47206 +
            (C5068 - C5067 + C5070 - C5069) * C48224) *
               C7736 +
           ((C6316 - C6315 + C6318 - C6317) * C47225 +
            (C6320 - C6319 + C6322 - C6321) * C48551 +
            (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
                C47206 +
            (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
                C48224) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C48300 * C255 +
           ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C48300 * C255 +
           ((C5048 - C5047 + C5050 - C5049) * C3782 +
            (C5052 - C5051 + C5054 - C5053) * C3776 +
            (C5056 - C5055 + C5058 - C5057) * C3783 +
            (C5060 - C5059 + C5062 - C5061) * C3777 +
            (C5064 - C5063 + C5066 - C5065) * C3784 +
            (C5068 - C5067 + C5070 - C5069) * C3778 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C3785 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C48300 * C255 +
           (((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C4870 * C1229 - C48574 * C1233 + C4871 * C1882 - C48416 * C1885) *
                 C47225 +
             (C4870 * C1234 - C48574 * C1241 + C4871 * C1886 - C48416 * C1891) *
                 C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C48300 * C255 +
           ((C6323 * C47225 + C6324 * C48551 + C6091 * C47206 +
             C6092 * C48224) *
                C7735 +
            (C12374 * C47225 + C12375 * C48551 +
             (C6316 - C6315 + C6318 - C6317) * C47206 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C7736 +
            ((C12367 - C12366 + C12369 - C12368) * C47225 +
             (C12371 - C12370 + C12373 - C12372) * C48551 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C47206 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C381 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C381 +
           ((C5202 - C5201 + C5204 - C5203) * C3782 +
            (C5206 - C5205 + C5208 - C5207) * C3776 +
            (C5210 - C5209 + C5212 - C5211) * C3783 +
            (C5214 - C5213 + C5216 - C5215) * C3777 +
            (C5218 - C5217 + C5220 - C5219) * C3784 +
            (C5222 - C5221 + C5224 - C5223) * C3778 +
            (C48574 * C397 - C4870 * C387 + C48416 * C941 - C4871 * C932) *
                C3785 +
            (C48574 * C405 - C4870 * C398 + C48416 * C947 - C4871 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C4870 * C1419 - C48574 * C1423 + C4871 * C2307 - C48416 * C2316) *
                 C47225 +
             (C4870 * C1424 - C48574 * C1431 + C4871 * C2317 - C48416 * C2325) *
                 C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C381 +
           (((C5202 - C5201 + C5204 - C5203) * C47225 +
             (C5206 - C5205 + C5208 - C5207) * C48551 +
             (C5210 - C5209 + C5212 - C5211) * C47206 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C7735 +
            ((C6524 - C6523 + C6526 - C6525) * C47225 +
             (C6528 - C6527 + C6530 - C6529) * C48551 +
             (C6532 - C6531 + C6534 - C6533) * C47206 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C7736 +
            ((C12573 - C12572 + C12575 - C12574) * C47225 +
             (C12577 - C12576 + C12579 - C12578) * C48551 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47206 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C48300 * C505 +
           ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C48300 * C505 +
           ((C5048 - C5047 + C5050 - C5049) * C3782 +
            (C5052 - C5051 + C5054 - C5053) * C3776 +
            (C5056 - C5055 + C5058 - C5057) * C3783 +
            (C5060 - C5059 + C5062 - C5061) * C3777 +
            (C5064 - C5063 + C5066 - C5065) * C3784 +
            (C5068 - C5067 + C5070 - C5069) * C3778 +
            (C48574 * C273 - C4870 * C263 + C48416 * C690 - C4871 * C681) *
                C3785 +
            (C48574 * C281 - C4870 * C274 + C48416 * C696 - C4871 * C691) *
                C48610) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            ((C6880 - C6879 + C6882 - C6881) * C47225 +
             (C6884 - C6883 + C6886 - C6885) * C48551 + C12374 * C47206 +
             C12375 * C48224) *
                C48606) *
               C48300 * C505 +
           (((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C4870 * C1229 - C48574 * C1233 + C4871 * C1882 - C48416 * C1885) *
                 C47225 +
             (C4870 * C1234 - C48574 * C1241 + C4871 * C1886 - C48416 * C1891) *
                 C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C48300 * C505 +
           ((C6323 * C47225 + C6324 * C48551 + C6091 * C47206 +
             C6092 * C48224) *
                C7735 +
            (C12374 * C47225 + C12375 * C48551 +
             (C6316 - C6315 + C6318 - C6317) * C47206 +
             (C6320 - C6319 + C6322 - C6321) * C48224) *
                C7736 +
            ((C12367 - C12366 + C12369 - C12368) * C47225 +
             (C12371 - C12370 + C12373 - C12372) * C48551 +
             (C48574 * C1237 - C4870 * C1231 + C48416 * C1889 - C4871 * C1884) *
                 C47206 +
             (C48574 * C1243 - C4870 * C1238 + C48416 * C1893 - C4871 * C1890) *
                 C48224) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C48300 * C571 +
          ((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
               C3782 +
           (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
               C3776 +
           (C5047 - C5048 + C5049 - C5050) * C3783 +
           (C5051 - C5052 + C5053 - C5054) * C3777 +
           (C5055 - C5056 + C5057 - C5058) * C3784 +
           (C5059 - C5060 + C5061 - C5062) * C3778 +
           (C5063 - C5064 + C5065 - C5066) * C3785 +
           (C5067 - C5068 + C5069 - C5070) * C48610) *
              C48318 * C48300 * C572 +
          ((C48574 * C580 - C4870 * C575 + C48416 * C1423 - C4871 * C1419) *
               C3782 +
           (C48574 * C590 - C4870 * C581 + C48416 * C1431 - C4871 * C1424) *
               C3776 +
           (C48574 * C582 - C4870 * C576 + C48416 * C1425 - C4871 * C1420) *
               C3783 +
           (C48574 * C591 - C4870 * C583 + C48416 * C1432 - C4871 * C1426) *
               C3777 +
           (C48574 * C584 - C4870 * C577 + C48416 * C1427 - C4871 * C1421) *
               C3784 +
           (C48574 * C592 - C4870 * C585 + C48416 * C1433 - C4871 * C1428) *
               C3778 +
           (C48574 * C586 - C4870 * C578 + C48416 * C1429 - C4871 * C1422) *
               C3785 +
           (C48574 * C593 - C4870 * C587 + C48416 * C1434 - C4871 * C1430) *
               C48610) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           C12940 * C48606) *
              C48300 * C571 +
          (((C6288 - C6287 + C6290 - C6289) * C47225 +
            (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
            C6326 * C48224) *
               C7735 +
           ((C6879 - C6880 + C6881 - C6882) * C47225 +
            (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
            C12377 * C48224) *
               C7736 +
           ((C12926 - C12927 + C12928 - C12929) * C47225 +
            (C12930 - C12931 + C12932 - C12933) * C48551 +
            (C12366 - C12367 + C12368 - C12369) * C47206 +
            (C12370 - C12371 + C12372 - C12373) * C48224) *
               C48606) *
              C48300 * C572 +
          (C12940 * C7735 +
           ((C12927 - C12926 + C12929 - C12928) * C47225 +
            (C12931 - C12930 + C12933 - C12932) * C48551 +
            (C12367 - C12366 + C12369 - C12368) * C47206 +
            (C12371 - C12370 + C12373 - C12372) * C48224) *
               C7736 +
           ((C48574 * C1710 - C4870 * C1707 + C48416 * C9099 - C4871 * C9097) *
                C47225 +
            (C48574 * C1716 - C4870 * C1711 + C48416 * C9103 - C4871 * C9100) *
                C48551 +
            (C48574 * C1712 - C4870 * C1708 + C48416 * C9101 - C4871 * C9098) *
                C47206 +
            (C48574 * C1717 - C4870 * C1713 + C48416 * C9104 - C4871 * C9102) *
                C48224) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C381 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C505 +
          (((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C381 +
           ((C48574 * C682 - C4870 * C677 + C48416 * C2310 - C4871 * C2304) *
                C3782 +
            (C48574 * C692 - C4870 * C683 + C48416 * C2322 - C4871 * C2311) *
                C3776 +
            (C48574 * C684 - C4870 * C678 + C48416 * C2312 - C4871 * C2305) *
                C3783 +
            (C48574 * C693 - C4870 * C685 + C48416 * C2323 - C4871 * C2313) *
                C3777 +
            (C48574 * C686 - C4870 * C679 + C48416 * C2314 - C4871 * C2306) *
                C3784 +
            (C48574 * C694 - C4870 * C687 + C48416 * C2324 - C4871 * C2315) *
                C3778 +
            (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                C3785 +
            (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C381 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C505 +
          ((((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C12926 - C12927 + C12928 - C12929) * C47225 +
             (C12930 - C12931 + C12932 - C12933) * C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C381 +
           (((C7082 - C7081 + C7084 - C7083) * C47225 +
             (C7086 - C7085 + C7088 - C7087) * C48551 +
             (C6524 - C6523 + C6526 - C6525) * C47206 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C7735 +
            ((C13136 - C13135 + C13138 - C13137) * C47225 +
             (C13140 - C13139 + C13142 - C13141) * C48551 +
             (C12573 - C12572 + C12575 - C12574) * C47206 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C7736 +
            ((C48574 * C1885 - C4870 * C1882 + C48416 * C9592 - C4871 * C9590) *
                 C47225 +
             (C48574 * C1891 - C4870 * C1886 + C48416 * C9596 - C4871 * C9593) *
                 C48551 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C47206 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C779 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C4874 - C4873 + C4876 - C4875) * C3782 +
            (C4878 - C4877 + C4880 - C4879) * C3776 +
            (C4882 - C4881 + C4884 - C4883) * C3783 +
            (C4886 - C4885 + C4888 - C4887) * C3777 +
            (C4890 - C4889 + C4892 - C4891) * C3784 +
            (C4894 - C4893 + C4896 - C4895) * C3778 +
            (C4897 - C4898 + C4899 - C4900) * C3785 +
            (C4901 - C4902 + C4903 - C4904) * C48610) *
               C48318 * C779 +
           ((C5202 - C5201 + C5204 - C5203) * C3782 +
            (C5206 - C5205 + C5208 - C5207) * C3776 +
            (C5210 - C5209 + C5212 - C5211) * C3783 +
            (C5214 - C5213 + C5216 - C5215) * C3777 +
            (C5218 - C5217 + C5220 - C5219) * C3784 +
            (C5222 - C5221 + C5224 - C5223) * C3778 +
            (C48574 * C397 - C4870 * C387 + C48416 * C941 - C4871 * C932) *
                C3785 +
            (C48574 * C405 - C4870 * C398 + C48416 * C947 - C4871 * C942) *
                C48610) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C4874 - C4873 + C4876 - C4875) * C47225 +
             (C4878 - C4877 + C4880 - C4879) * C48551 +
             (C4882 - C4881 + C4884 - C4883) * C47206 +
             (C4886 - C4885 + C4888 - C4887) * C48224) *
                C7735 +
            (C6325 * C47225 + C6326 * C48551 + C6327 * C47206 +
             C6328 * C48224) *
                C7736 +
            (C12376 * C47225 + C12377 * C48551 +
             (C6315 - C6316 + C6317 - C6318) * C47206 +
             (C6319 - C6320 + C6321 - C6322) * C48224) *
                C48606) *
               C779 +
           (((C5202 - C5201 + C5204 - C5203) * C47225 +
             (C5206 - C5205 + C5208 - C5207) * C48551 +
             (C5210 - C5209 + C5212 - C5211) * C47206 +
             (C5214 - C5213 + C5216 - C5215) * C48224) *
                C7735 +
            ((C6524 - C6523 + C6526 - C6525) * C47225 +
             (C6528 - C6527 + C6530 - C6529) * C48551 +
             (C6532 - C6531 + C6534 - C6533) * C47206 +
             (C6536 - C6535 + C6538 - C6537) * C48224) *
                C7736 +
            ((C12573 - C12572 + C12575 - C12574) * C47225 +
             (C12577 - C12576 + C12579 - C12578) * C48551 +
             (C48574 * C1427 - C4870 * C1421 + C48416 * C2320 - C4871 * C2309) *
                 C47206 +
             (C48574 * C1433 - C4870 * C1428 + C48416 * C2327 - C4871 * C2321) *
                 C48224) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C3782 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C3776 +
            (C4873 - C4874 + C4875 - C4876) * C3783 +
            (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
            C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
               C48318 * C779 +
           ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C3782 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C3776 +
            (C5201 - C5202 + C5203 - C5204) * C3783 +
            (C5205 - C5206 + C5207 - C5208) * C3777 +
            (C5209 - C5210 + C5211 - C5212) * C3784 +
            (C5213 - C5214 + C5215 - C5216) * C3778 +
            (C5217 - C5218 + C5219 - C5220) * C3785 +
            (C5221 - C5222 + C5223 - C5224) * C48610) *
               C48318 * C48603) *
              C255 +
          (((C4870 * C259 - C48574 * C265 + C4871 * C677 - C48416 * C682) *
                C3782 +
            (C4870 * C266 - C48574 * C277 + C4871 * C683 - C48416 * C692) *
                C3776 +
            (C5047 - C5048 + C5049 - C5050) * C3783 +
            (C5051 - C5052 + C5053 - C5054) * C3777 +
            (C5055 - C5056 + C5057 - C5058) * C3784 +
            (C5059 - C5060 + C5061 - C5062) * C3778 +
            (C5063 - C5064 + C5065 - C5066) * C3785 +
            (C5067 - C5068 + C5069 - C5070) * C48610) *
               C48318 * C779 +
           ((C48574 * C682 - C4870 * C677 + C48416 * C2310 - C4871 * C2304) *
                C3782 +
            (C48574 * C692 - C4870 * C683 + C48416 * C2322 - C4871 * C2311) *
                C3776 +
            (C48574 * C684 - C4870 * C678 + C48416 * C2312 - C4871 * C2305) *
                C3783 +
            (C48574 * C693 - C4870 * C685 + C48416 * C2323 - C4871 * C2313) *
                C3777 +
            (C48574 * C686 - C4870 * C679 + C48416 * C2314 - C4871 * C2306) *
                C3784 +
            (C48574 * C694 - C4870 * C687 + C48416 * C2324 - C4871 * C2315) *
                C3778 +
            (C48574 * C688 - C4870 * C680 + C48416 * C2637 - C4871 * C2636) *
                C3785 +
            (C48574 * C695 - C4870 * C689 + C48416 * C2639 - C4871 * C2638) *
                C48610) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                 C47225 +
             (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                 C48551 +
             (C4873 - C4874 + C4875 - C4876) * C47206 +
             (C4877 - C4878 + C4879 - C4880) * C48224) *
                C7735 +
            ((C6287 - C6288 + C6289 - C6290) * C47225 +
             (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
             C6324 * C48224) *
                C7736 +
            C12940 * C48606) *
               C779 +
           (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                 C47225 +
             (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                 C48551 +
             (C5201 - C5202 + C5203 - C5204) * C47206 +
             (C5205 - C5206 + C5207 - C5208) * C48224) *
                C7735 +
            ((C7081 - C7082 + C7083 - C7084) * C47225 +
             (C7085 - C7086 + C7087 - C7088) * C48551 +
             (C6523 - C6524 + C6525 - C6526) * C47206 +
             (C6527 - C6528 + C6529 - C6530) * C48224) *
                C7736 +
            ((C13135 - C13136 + C13137 - C13138) * C47225 +
             (C13139 - C13140 + C13141 - C13142) * C48551 +
             (C12572 - C12573 + C12574 - C12575) * C47206 +
             (C12576 - C12577 + C12578 - C12579) * C48224) *
                C48606) *
               C48603) *
              C255 +
          ((((C6288 - C6287 + C6290 - C6289) * C47225 +
             (C6292 - C6291 + C6294 - C6293) * C48551 + C6325 * C47206 +
             C6326 * C48224) *
                C7735 +
            ((C6879 - C6880 + C6881 - C6882) * C47225 +
             (C6883 - C6884 + C6885 - C6886) * C48551 + C12376 * C47206 +
             C12377 * C48224) *
                C7736 +
            ((C12926 - C12927 + C12928 - C12929) * C47225 +
             (C12930 - C12931 + C12932 - C12933) * C48551 +
             (C12366 - C12367 + C12368 - C12369) * C47206 +
             (C12370 - C12371 + C12372 - C12373) * C48224) *
                C48606) *
               C779 +
           (((C7082 - C7081 + C7084 - C7083) * C47225 +
             (C7086 - C7085 + C7088 - C7087) * C48551 +
             (C6524 - C6523 + C6526 - C6525) * C47206 +
             (C6528 - C6527 + C6530 - C6529) * C48224) *
                C7735 +
            ((C13136 - C13135 + C13138 - C13137) * C47225 +
             (C13140 - C13139 + C13142 - C13141) * C48551 +
             (C12573 - C12572 + C12575 - C12574) * C47206 +
             (C12577 - C12576 + C12579 - C12578) * C48224) *
                C7736 +
            ((C48574 * C1885 - C4870 * C1882 + C48416 * C9592 - C4871 * C9590) *
                 C47225 +
             (C48574 * C1891 - C4870 * C1886 + C48416 * C9596 - C4871 * C9593) *
                 C48551 +
             (C48574 * C1887 - C4870 * C1883 + C48416 * C9855 - C4871 * C9854) *
                 C47206 +
             (C48574 * C1892 - C4870 * C1888 + C48416 * C9857 - C4871 * C9856) *
                 C48224) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
               C3782 +
           (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
               C3776 +
           (C4873 - C4874 + C4875 - C4876) * C3783 +
           (C4877 - C4878 + C4879 - C4880) * C3777 + C4913 * C3784 +
           C4914 * C3778 + C4915 * C3785 + C4916 * C48610) *
              C48318 * C925 +
          ((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
               C3782 +
           (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
               C3776 +
           (C5201 - C5202 + C5203 - C5204) * C3783 +
           (C5205 - C5206 + C5207 - C5208) * C3777 +
           (C5209 - C5210 + C5211 - C5212) * C3784 +
           (C5213 - C5214 + C5215 - C5216) * C3778 +
           (C5217 - C5218 + C5219 - C5220) * C3785 +
           (C5221 - C5222 + C5223 - C5224) * C48610) *
              C48318 * C926 +
          ((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
               C3782 +
           (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
               C3776 +
           (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
               C3783 +
           (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
               C3777 +
           (C48574 * C937 - C4870 * C930 + C48416 * C2818 - C4871 * C2812) *
               C3784 +
           (C48574 * C945 - C4870 * C938 + C48416 * C2824 - C4871 * C2819) *
               C3778 +
           (C48574 * C939 - C4870 * C931 + C48416 * C2820 - C4871 * C2813) *
               C3785 +
           (C48574 * C946 - C4870 * C940 + C48416 * C2825 - C4871 * C2821) *
               C48610) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48574 * C126 - C4870 * C119 + C48416 * C389 - C4871 * C383) *
                C47225 +
            (C48574 * C140 - C4870 * C127 + C48416 * C401 - C4871 * C390) *
                C48551 +
            (C4873 - C4874 + C4875 - C4876) * C47206 +
            (C4877 - C4878 + C4879 - C4880) * C48224) *
               C7735 +
           ((C6287 - C6288 + C6289 - C6290) * C47225 +
            (C6291 - C6292 + C6293 - C6294) * C48551 + C6323 * C47206 +
            C6324 * C48224) *
               C7736 +
           C12940 * C48606) *
              C925 +
          (((C4870 * C383 - C48574 * C389 + C4871 * C928 - C48416 * C933) *
                C47225 +
            (C4870 * C390 - C48574 * C401 + C4871 * C934 - C48416 * C943) *
                C48551 +
            (C5201 - C5202 + C5203 - C5204) * C47206 +
            (C5205 - C5206 + C5207 - C5208) * C48224) *
               C7735 +
           ((C7081 - C7082 + C7083 - C7084) * C47225 +
            (C7085 - C7086 + C7087 - C7088) * C48551 +
            (C6523 - C6524 + C6525 - C6526) * C47206 +
            (C6527 - C6528 + C6529 - C6530) * C48224) *
               C7736 +
           ((C13135 - C13136 + C13137 - C13138) * C47225 +
            (C13139 - C13140 + C13141 - C13142) * C48551 +
            (C12572 - C12573 + C12574 - C12575) * C47206 +
            (C12576 - C12577 + C12578 - C12579) * C48224) *
               C48606) *
              C926 +
          (((C48574 * C933 - C4870 * C928 + C48416 * C2814 - C4871 * C2810) *
                C47225 +
            (C48574 * C943 - C4870 * C934 + C48416 * C2822 - C4871 * C2815) *
                C48551 +
            (C48574 * C935 - C4870 * C929 + C48416 * C2816 - C4871 * C2811) *
                C47206 +
            (C48574 * C944 - C4870 * C936 + C48416 * C2823 - C4871 * C2817) *
                C48224) *
               C7735 +
           ((C48574 * C2310 - C4870 * C2304 + C48416 * C3255 - C4871 * C3252) *
                C47225 +
            (C48574 * C2322 - C4870 * C2311 + C48416 * C3261 - C4871 * C3256) *
                C48551 +
            (C48574 * C2312 - C4870 * C2305 + C48416 * C3257 - C4871 * C3253) *
                C47206 +
            (C48574 * C2323 - C4870 * C2313 + C48416 * C3262 - C4871 * C3258) *
                C48224) *
               C7736 +
           ((C48574 * C2316 - C4870 * C2307 + C48416 * C10042 -
             C4871 * C10040) *
                C47225 +
            (C48574 * C2325 - C4870 * C2317 + C48416 * C10046 -
             C4871 * C10043) *
                C48551 +
            (C48574 * C2318 - C4870 * C2308 + C48416 * C10044 -
             C4871 * C10041) *
                C47206 +
            (C48574 * C2326 - C4870 * C2319 + C48416 * C10047 -
             C4871 * C10045) *
                C48224) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C48283 * C110 +
          ((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
           (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
           (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
           (C166 - C167) * C106) *
              C48318 * C48300 * C48283 * C111 +
          (C168 * C114 + C169 * C102 + C170 * C115 + C171 * C103 + C172 * C116 +
           C173 * C104 + (C165 - C164) * C117 + (C167 - C166) * C105 +
           (C48329 * C138 - C113 * C125) * C118 +
           (C48329 * C146 - C113 * C139) * C106) *
              C48318 * C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C48329 * C265 - C113 * C259) * C1064 +
            (C48329 * C277 - C113 * C266) * C1058 + (C285 - C284) * C1065 +
            (C287 - C286) * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           ((C48329 * C580 - C113 * C575) * C1064 +
            (C48329 * C590 - C113 * C581) * C1058 + (C1070 - C1071) * C1065 +
            (C1072 - C1073) * C1059 + C1082 * C1066 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C1064 + (C151 - C150) * C1058 +
            (C153 - C152) * C1065 + (C155 - C154) * C1059 +
            (C157 - C156) * C1066 + (C159 - C158) * C48593) *
               C48641 +
           ((C284 - C285) * C1064 + (C286 - C287) * C1058 +
            (C288 - C289) * C1065 + (C290 - C291) * C1059 +
            (C292 - C293) * C1066 + (C294 - C295) * C48593) *
               C48629 +
           ((C1071 - C1070) * C1064 + (C1073 - C1072) * C1058 +
            (C1075 - C1074) * C1065 + (C1077 - C1076) * C1059 +
            (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C1064 + C169 * C1058 + C170 * C1065 + C171 * C1059 +
            C172 * C1066 + C173 * C48593) *
               C48641 +
           (C1068 * C1064 + C1069 * C1058 + (C293 - C292) * C1065 +
            (C295 - C294) * C1059 + (C297 - C296) * C1066 +
            (C299 - C298) * C48593) *
               C48629 +
           (C1082 * C1064 + C1083 * C1058 + (C1079 - C1078) * C1065 +
            (C1081 - C1080) * C1059 + (C48329 * C588 - C113 * C579) * C1066 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
            C1082 * C7740 + C1083 * C48593) *
               C48606) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C7738 + (C151 - C150) * C48638 +
            (C153 - C152) * C7739 + (C155 - C154) * C48625 +
            (C157 - C156) * C7740 + (C159 - C158) * C48593) *
               C7735 +
           (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
            C3919 * C7740 + C3920 * C48593) *
               C7736 +
           (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
            (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
               C48606) *
              C48300 * C48283 * C111 +
          ((C168 * C7738 + C169 * C48638 + C170 * C7739 + C171 * C48625 +
            C172 * C7740 + C173 * C48593) *
               C7735 +
           (C1068 * C7738 + C1069 * C48638 + C3787 * C7739 + C3788 * C48625 +
            (C297 - C296) * C7740 + (C299 - C298) * C48593) *
               C7736 +
           (C1082 * C7738 + C1083 * C48638 + (C1079 - C1078) * C7739 +
            (C1081 - C1080) * C48625 + (C48329 * C588 - C113 * C579) * C7740 +
            (C48329 * C594 - C113 * C589) * C48593) *
               C48606) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           (C1720 * C8916 + C1721 * C48214) * C8913 +
           ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
           ((C48329 * C1710 - C113 * C1707) * C8916 +
            (C48329 * C1716 - C113 * C1711) * C48214) *
               C8915) *
              C48300 * C48283 * C110 +
          (((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
           (C1258 * C8916 + C1259 * C48214) * C8912 +
           (C1262 * C8916 + C1263 * C48214) * C8913 +
           ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
           ((C113 * C1708 - C48329 * C1712) * C8916 +
            (C113 * C1713 - C48329 * C1717) * C48214) *
               C8915) *
              C48300 * C48283 * C111 +
          ((C168 * C8916 + C169 * C48214) * C8911 +
           (C1068 * C8916 + C1069 * C48214) * C8912 +
           (C1082 * C8916 + C1083 * C48214) * C8913 +
           ((C1271 - C1270) * C8916 + (C1273 - C1272) * C48214) * C8914 +
           ((C48329 * C1714 - C113 * C1709) * C8916 +
            (C48329 * C1718 - C113 * C1715) * C48214) *
               C8915) *
              C48300 * C48283 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C255 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C255 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C255 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C255 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C255 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C255 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C257 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C381 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C113 * C677 - C48329 * C682) * C1064 +
             (C113 * C683 - C48329 * C692) * C1058 + (C1436 - C1437) * C1065 +
             (C1438 - C1439) * C1059 + (C1440 - C1441) * C1066 +
             (C1442 - C1443) * C48593) *
                C48629 +
            ((C113 * C1419 - C48329 * C1423) * C1064 +
             (C113 * C1424 - C48329 * C1431) * C1058 + (C1444 - C1445) * C1065 +
             (C1446 - C1447) * C1059 + (C1448 - C1449) * C1066 +
             (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C381 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C113 * C1882 - C48329 * C1885) * C8916 +
             (C113 * C1886 - C48329 * C1891) * C48214) *
                C8914 +
            ((C113 * C9097 - C48329 * C9099) * C8916 +
             (C113 * C9100 - C48329 * C9103) * C48214) *
                C8915) *
               C48603) *
              C48283 * C257 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C381 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C48300 * C505 +
           ((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C48300 * C48601) *
              C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C48300 * C505 +
           ((C285 - C284) * C114 + (C287 - C286) * C102 + (C289 - C288) * C115 +
            (C291 - C290) * C103 + (C293 - C292) * C116 + (C295 - C294) * C104 +
            (C297 - C296) * C117 + (C299 - C298) * C105 +
            (C48329 * C275 - C113 * C264) * C118 +
            (C48329 * C282 - C113 * C276) * C106) *
               C48318 * C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            ((C1252 - C1253) * C1064 + (C1254 - C1255) * C1058 + C1256 * C1065 +
             C1257 * C1059 + C1082 * C1066 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C113 * C1229 - C48329 * C1233) * C1064 +
             (C113 * C1234 - C48329 * C1241) * C1058 + (C1266 - C1267) * C1065 +
             (C1268 - C1269) * C1059 + (C1270 - C1271) * C1066 +
             (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C1064 + C1251 * C1058 + C1068 * C1065 + C1069 * C1059 +
             (C293 - C292) * C1066 + (C295 - C294) * C48593) *
                C48641 +
            (C1256 * C1064 + C1257 * C1058 + C1082 * C1065 + C1083 * C1059 +
             (C1079 - C1078) * C1066 + (C1081 - C1080) * C48593) *
                C48629 +
            ((C1267 - C1266) * C1064 + (C1269 - C1268) * C1058 +
             (C1271 - C1270) * C1065 + (C1273 - C1272) * C1059 +
             (C48329 * C1239 - C113 * C1232) * C1066 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            (C1720 * C7738 + C1721 * C48638 + C1256 * C7739 + C1257 * C48625 +
             C1082 * C7740 + C1083 * C48593) *
                C48606) *
               C48300 * C505 +
           (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C48300 * C505 +
           ((C1250 * C7738 + C1251 * C48638 + C1068 * C7739 + C1069 * C48625 +
             C3787 * C7740 + C3788 * C48593) *
                C7735 +
            (C1256 * C7738 + C1257 * C48638 + C1082 * C7739 + C1083 * C48625 +
             (C1079 - C1078) * C7740 + (C1081 - C1080) * C48593) *
                C7736 +
            ((C1267 - C1266) * C7738 + (C1269 - C1268) * C48638 +
             (C1271 - C1270) * C7739 + (C1273 - C1272) * C48625 +
             (C48329 * C1239 - C113 * C1232) * C7740 +
             (C48329 * C1244 - C113 * C1240) * C48593) *
                C48606) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            (C1720 * C8916 + C1721 * C48214) * C8913 +
            ((C1727 - C1726) * C8916 + (C1729 - C1728) * C48214) * C8914 +
            ((C9008 - C9009) * C8916 + (C9010 - C9011) * C48214) * C8915) *
               C48300 * C505 +
           (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C113 * C8999 - C48329 * C9001) * C8916 +
             (C113 * C9002 - C48329 * C9005) * C48214) *
                C8915) *
               C48300 * C48601) *
              C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C48300 * C505 +
           ((C1250 * C8916 + C1251 * C48214) * C8911 +
            (C1256 * C8916 + C1257 * C48214) * C8912 +
            ((C1267 - C1266) * C8916 + (C1269 - C1268) * C48214) * C8913 +
            ((C9013 - C9012) * C8916 + (C9015 - C9014) * C48214) * C8914 +
            ((C48329 * C9003 - C113 * C9000) * C8916 +
             (C48329 * C9006 - C113 * C9004) * C48214) *
                C8915) *
               C48300 * C48601) *
              C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C48300 * C571 +
          ((C113 * C259 - C48329 * C265) * C114 +
           (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
           (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
           (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
           (C298 - C299) * C106) *
              C48318 * C48300 * C572 +
          ((C48329 * C580 - C113 * C575) * C114 +
           (C48329 * C590 - C113 * C581) * C102 +
           (C48329 * C582 - C113 * C576) * C115 +
           (C48329 * C591 - C113 * C583) * C103 +
           (C48329 * C584 - C113 * C577) * C116 +
           (C48329 * C592 - C113 * C585) * C104 +
           (C48329 * C586 - C113 * C578) * C117 +
           (C48329 * C593 - C113 * C587) * C105 +
           (C48329 * C588 - C113 * C579) * C118 +
           (C48329 * C594 - C113 * C589) * C106) *
              C48318 * C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
            C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
               C48641 +
           ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
            C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
               C48629 +
           ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
            (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
            (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C1736 * C48641 +
           ((C1727 - C1726) * C1064 + (C1729 - C1728) * C1058 +
            (C1267 - C1266) * C1065 + (C1269 - C1268) * C1059 +
            (C1271 - C1270) * C1066 + (C1273 - C1272) * C48593) *
               C48629 +
           ((C48329 * C1710 - C113 * C1707) * C1064 +
            (C48329 * C1716 - C113 * C1711) * C1058 +
            (C48329 * C1712 - C113 * C1708) * C1065 +
            (C48329 * C1717 - C113 * C1713) * C1059 +
            (C48329 * C1714 - C113 * C1709) * C1066 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C48300 * C571 +
          (((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 + C1258 * C7739 +
            C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
               C7735 +
           ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 + C1262 * C7739 +
            C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
               C7736 +
           ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
            (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
            (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
               C48606) *
              C48300 * C572 +
          (C8300 * C7735 +
           ((C1727 - C1726) * C7738 + (C1729 - C1728) * C48638 +
            (C1267 - C1266) * C7739 + (C1269 - C1268) * C48625 +
            (C1271 - C1270) * C7740 + (C1273 - C1272) * C48593) *
               C7736 +
           ((C48329 * C1710 - C113 * C1707) * C7738 +
            (C48329 * C1716 - C113 * C1711) * C48638 +
            (C48329 * C1712 - C113 * C1708) * C7739 +
            (C48329 * C1717 - C113 * C1713) * C48625 +
            (C48329 * C1714 - C113 * C1709) * C7740 +
            (C48329 * C1718 - C113 * C1715) * C48593) *
               C48606) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C48300 * C571 +
          (((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
           ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
           ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
           ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
           ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
              C48300 * C572 +
          (C9264 * C8911 + C9269 * C8912 + C9270 * C8913 +
           ((C9261 - C9260) * C8916 + (C9263 - C9262) * C48214) * C8914 +
           ((C48329 * C9250 - C113 * C9249) * C8916 +
            (C48329 * C9252 - C113 * C9251) * C48214) *
               C8915) *
              C48300 * C573) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C381 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C505 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C381 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C381 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C381 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C505 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C381 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C48283 * C507 +
          (((C149 - C148) * C114 + (C151 - C150) * C102 + (C153 - C152) * C115 +
            (C155 - C154) * C103 + (C157 - C156) * C116 + (C159 - C158) * C104 +
            (C161 - C160) * C117 + (C163 - C162) * C105 + (C164 - C165) * C118 +
            (C166 - C167) * C106) *
               C48318 * C779 +
           ((C409 - C408) * C114 + (C411 - C410) * C102 + (C413 - C412) * C115 +
            (C415 - C414) * C103 + (C417 - C416) * C116 + (C419 - C418) * C104 +
            (C421 - C420) * C117 + (C423 - C422) * C105 +
            (C48329 * C399 - C113 * C388) * C118 +
            (C48329 * C406 - C113 * C400) * C106) *
               C48318 * C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C1064 + (C151 - C150) * C1058 +
             (C153 - C152) * C1065 + (C155 - C154) * C1059 +
             (C157 - C156) * C1066 + (C159 - C158) * C48593) *
                C48641 +
            (C1258 * C1064 + C1259 * C1058 + C1260 * C1065 + C1261 * C1059 +
             (C292 - C293) * C1066 + (C294 - C295) * C48593) *
                C48629 +
            (C1262 * C1064 + C1263 * C1058 + C1264 * C1065 + C1265 * C1059 +
             (C1078 - C1079) * C1066 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C1064 + (C411 - C410) * C1058 +
             (C413 - C412) * C1065 + (C415 - C414) * C1059 +
             (C417 - C416) * C1066 + (C419 - C418) * C48593) *
                C48641 +
            ((C1437 - C1436) * C1064 + (C1439 - C1438) * C1058 +
             (C1441 - C1440) * C1065 + (C1443 - C1442) * C1059 +
             (C48329 * C688 - C113 * C680) * C1066 +
             (C48329 * C695 - C113 * C689) * C48593) *
                C48629 +
            ((C1445 - C1444) * C1064 + (C1447 - C1446) * C1058 +
             (C1449 - C1448) * C1065 + (C1451 - C1450) * C1059 +
             (C48329 * C1429 - C113 * C1422) * C1066 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C7738 + (C151 - C150) * C48638 +
             (C153 - C152) * C7739 + (C155 - C154) * C48625 +
             (C157 - C156) * C7740 + (C159 - C158) * C48593) *
                C7735 +
            (C1258 * C7738 + C1259 * C48638 + C1260 * C7739 + C1261 * C48625 +
             C3919 * C7740 + C3920 * C48593) *
                C7736 +
            (C1262 * C7738 + C1263 * C48638 + C1264 * C7739 + C1265 * C48625 +
             (C1078 - C1079) * C7740 + (C1080 - C1081) * C48593) *
                C48606) *
               C779 +
           (((C409 - C408) * C7738 + (C411 - C410) * C48638 +
             (C413 - C412) * C7739 + (C415 - C414) * C48625 +
             (C417 - C416) * C7740 + (C419 - C418) * C48593) *
                C7735 +
            ((C1437 - C1436) * C7738 + (C1439 - C1438) * C48638 +
             (C1441 - C1440) * C7739 + (C1443 - C1442) * C48625 +
             (C4052 - C4051) * C7740 + (C4054 - C4053) * C48593) *
                C7736 +
            ((C1445 - C1444) * C7738 + (C1447 - C1446) * C48638 +
             (C1449 - C1448) * C7739 + (C1451 - C1450) * C48625 +
             (C48329 * C1429 - C113 * C1422) * C7740 +
             (C48329 * C1434 - C113 * C1430) * C48593) *
                C48606) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C48283 * C507 +
          ((((C149 - C148) * C8916 + (C151 - C150) * C48214) * C8911 +
            (C1258 * C8916 + C1259 * C48214) * C8912 +
            (C1262 * C8916 + C1263 * C48214) * C8913 +
            ((C1266 - C1267) * C8916 + (C1268 - C1269) * C48214) * C8914 +
            ((C9012 - C9013) * C8916 + (C9014 - C9015) * C48214) * C8915) *
               C779 +
           (((C409 - C408) * C8916 + (C411 - C410) * C48214) * C8911 +
            ((C1437 - C1436) * C8916 + (C1439 - C1438) * C48214) * C8912 +
            ((C1445 - C1444) * C8916 + (C1447 - C1446) * C48214) * C8913 +
            ((C48329 * C1887 - C113 * C1883) * C8916 +
             (C48329 * C1892 - C113 * C1888) * C48214) *
                C8914 +
            ((C48329 * C9101 - C113 * C9098) * C8916 +
             (C48329 * C9104 - C113 * C9102) * C48214) *
                C8915) *
               C48603) *
              C48283 * C48599)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C114 +
            (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
            (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
            C171 * C105 + C172 * C118 + C173 * C106) *
               C48318 * C779 +
           ((C113 * C383 - C48329 * C389) * C114 +
            (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
            (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
            (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
            (C422 - C423) * C106) *
               C48318 * C48603) *
              C255 +
          (((C113 * C259 - C48329 * C265) * C114 +
            (C113 * C266 - C48329 * C277) * C102 + (C284 - C285) * C115 +
            (C286 - C287) * C103 + (C288 - C289) * C116 + (C290 - C291) * C104 +
            (C292 - C293) * C117 + (C294 - C295) * C105 + (C296 - C297) * C118 +
            (C298 - C299) * C106) *
               C48318 * C779 +
           ((C48329 * C682 - C113 * C677) * C114 +
            (C48329 * C692 - C113 * C683) * C102 +
            (C48329 * C684 - C113 * C678) * C115 +
            (C48329 * C693 - C113 * C685) * C103 +
            (C48329 * C686 - C113 * C679) * C116 +
            (C48329 * C694 - C113 * C687) * C104 +
            (C48329 * C688 - C113 * C680) * C117 +
            (C48329 * C695 - C113 * C689) * C105 +
            (C48329 * C690 - C113 * C681) * C118 +
            (C48329 * C696 - C113 * C691) * C106) *
               C48318 * C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C1064 +
             (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
             (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
                C48641 +
            ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
             C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
                C48629 +
            C1736 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C1064 +
             (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
             (C410 - C411) * C1059 + (C412 - C413) * C1066 +
             (C414 - C415) * C48593) *
                C48641 +
            ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
             (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
             (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
                C48629 +
            ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
             (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
             (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C1064 + (C1249 - C1248) * C1058 + C1258 * C1065 +
             C1259 * C1059 + C1260 * C1066 + C1261 * C48593) *
                C48641 +
            ((C1253 - C1252) * C1064 + (C1255 - C1254) * C1058 + C1262 * C1065 +
             C1263 * C1059 + C1264 * C1066 + C1265 * C48593) *
                C48629 +
            ((C1726 - C1727) * C1064 + (C1728 - C1729) * C1058 +
             (C1266 - C1267) * C1065 + (C1268 - C1269) * C1059 +
             (C1270 - C1271) * C1066 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C1064 + (C1898 - C1897) * C1058 +
             (C1437 - C1436) * C1065 + (C1439 - C1438) * C1059 +
             (C1441 - C1440) * C1066 + (C1443 - C1442) * C48593) *
                C48641 +
            ((C1900 - C1899) * C1064 + (C1902 - C1901) * C1058 +
             (C1445 - C1444) * C1065 + (C1447 - C1446) * C1059 +
             (C1449 - C1448) * C1066 + (C1451 - C1450) * C48593) *
                C48629 +
            ((C48329 * C1885 - C113 * C1882) * C1064 +
             (C48329 * C1891 - C113 * C1886) * C1058 +
             (C48329 * C1887 - C113 * C1883) * C1065 +
             (C48329 * C1892 - C113 * C1888) * C1059 +
             (C48329 * C1889 - C113 * C1884) * C1066 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C7738 +
             (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
             (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
                C7735 +
            ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 +
             C1250 * C7739 + C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
                C7736 +
            C8300 * C48606) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C7738 +
             (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
             (C410 - C411) * C48625 + (C412 - C413) * C7740 +
             (C414 - C415) * C48593) *
                C7735 +
            ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
             (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
             (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
                C7736 +
            ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
             (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
             (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
                C48606) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C7738 + (C1249 - C1248) * C48638 +
             C1258 * C7739 + C1259 * C48625 + C1260 * C7740 + C1261 * C48593) *
                C7735 +
            ((C1253 - C1252) * C7738 + (C1255 - C1254) * C48638 +
             C1262 * C7739 + C1263 * C48625 + C1264 * C7740 + C1265 * C48593) *
                C7736 +
            ((C1726 - C1727) * C7738 + (C1728 - C1729) * C48638 +
             (C1266 - C1267) * C7739 + (C1268 - C1269) * C48625 +
             (C1270 - C1271) * C7740 + (C1272 - C1273) * C48593) *
                C48606) *
               C779 +
           (((C1896 - C1895) * C7738 + (C1898 - C1897) * C48638 +
             (C1437 - C1436) * C7739 + (C1439 - C1438) * C48625 +
             (C1441 - C1440) * C7740 + (C1443 - C1442) * C48593) *
                C7735 +
            ((C1900 - C1899) * C7738 + (C1902 - C1901) * C48638 +
             (C1445 - C1444) * C7739 + (C1447 - C1446) * C48625 +
             (C1449 - C1448) * C7740 + (C1451 - C1450) * C48593) *
                C7736 +
            ((C48329 * C1885 - C113 * C1882) * C7738 +
             (C48329 * C1891 - C113 * C1886) * C48638 +
             (C48329 * C1887 - C113 * C1883) * C7739 +
             (C48329 * C1892 - C113 * C1888) * C48625 +
             (C48329 * C1889 - C113 * C1884) * C7740 +
             (C48329 * C1893 - C113 * C1890) * C48593) *
                C48606) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48329 * C126 - C113 * C119) * C8916 +
             (C48329 * C140 - C113 * C127) * C48214) *
                C8911 +
            ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
            C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
               C779 +
           (((C113 * C383 - C48329 * C389) * C8916 +
             (C113 * C390 - C48329 * C401) * C48214) *
                C8911 +
            ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
            ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
            ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
            ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
               C48603) *
              C255 +
          ((((C1247 - C1246) * C8916 + (C1249 - C1248) * C48214) * C8911 +
            ((C1253 - C1252) * C8916 + (C1255 - C1254) * C48214) * C8912 +
            ((C1726 - C1727) * C8916 + (C1728 - C1729) * C48214) * C8913 +
            ((C9009 - C9008) * C8916 + (C9011 - C9010) * C48214) * C8914 +
            ((C9260 - C9261) * C8916 + (C9262 - C9263) * C48214) * C8915) *
               C779 +
           (((C1896 - C1895) * C8916 + (C1898 - C1897) * C48214) * C8911 +
            ((C1900 - C1899) * C8916 + (C1902 - C1901) * C48214) * C8912 +
            ((C9358 - C9357) * C8916 + (C9360 - C9359) * C48214) * C8913 +
            ((C9362 - C9361) * C8916 + (C9364 - C9363) * C48214) * C8914 +
            ((C48329 * C9353 - C113 * C9352) * C8916 +
             (C48329 * C9355 - C113 * C9354) * C48214) *
                C8915) *
               C48603) *
              C48601) *
         C48249) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48329 * C126 - C113 * C119) * C114 +
           (C48329 * C140 - C113 * C127) * C102 + (C148 - C149) * C115 +
           (C150 - C151) * C103 + C168 * C116 + C169 * C104 + C170 * C117 +
           C171 * C105 + C172 * C118 + C173 * C106) *
              C48318 * C925 +
          ((C113 * C383 - C48329 * C389) * C114 +
           (C113 * C390 - C48329 * C401) * C102 + (C408 - C409) * C115 +
           (C410 - C411) * C103 + (C412 - C413) * C116 + (C414 - C415) * C104 +
           (C416 - C417) * C117 + (C418 - C419) * C105 + (C420 - C421) * C118 +
           (C422 - C423) * C106) *
              C48318 * C926 +
          ((C48329 * C933 - C113 * C928) * C114 +
           (C48329 * C943 - C113 * C934) * C102 +
           (C48329 * C935 - C113 * C929) * C115 +
           (C48329 * C944 - C113 * C936) * C103 +
           (C48329 * C937 - C113 * C930) * C116 +
           (C48329 * C945 - C113 * C938) * C104 +
           (C48329 * C939 - C113 * C931) * C117 +
           (C48329 * C946 - C113 * C940) * C105 +
           (C48329 * C941 - C113 * C932) * C118 +
           (C48329 * C947 - C113 * C942) * C106) *
              C48318 * C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C1064 +
            (C48329 * C140 - C113 * C127) * C1058 + (C148 - C149) * C1065 +
            (C150 - C151) * C1059 + C168 * C1066 + C169 * C48593) *
               C48641 +
           ((C1246 - C1247) * C1064 + (C1248 - C1249) * C1058 + C1250 * C1065 +
            C1251 * C1059 + C1068 * C1066 + C1069 * C48593) *
               C48629 +
           C1736 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C1064 +
            (C113 * C390 - C48329 * C401) * C1058 + (C408 - C409) * C1065 +
            (C410 - C411) * C1059 + (C412 - C413) * C1066 +
            (C414 - C415) * C48593) *
               C48641 +
           ((C1895 - C1896) * C1064 + (C1897 - C1898) * C1058 +
            (C1436 - C1437) * C1065 + (C1438 - C1439) * C1059 +
            (C1440 - C1441) * C1066 + (C1442 - C1443) * C48593) *
               C48629 +
           ((C1899 - C1900) * C1064 + (C1901 - C1902) * C1058 +
            (C1444 - C1445) * C1065 + (C1446 - C1447) * C1059 +
            (C1448 - C1449) * C1066 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C1064 +
            (C48329 * C943 - C113 * C934) * C1058 +
            (C48329 * C935 - C113 * C929) * C1065 +
            (C48329 * C944 - C113 * C936) * C1059 +
            (C48329 * C937 - C113 * C930) * C1066 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C48641 +
           ((C48329 * C2310 - C113 * C2304) * C1064 +
            (C48329 * C2322 - C113 * C2311) * C1058 +
            (C48329 * C2312 - C113 * C2305) * C1065 +
            (C48329 * C2323 - C113 * C2313) * C1059 +
            (C48329 * C2314 - C113 * C2306) * C1066 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C48629 +
           ((C48329 * C2316 - C113 * C2307) * C1064 +
            (C48329 * C2325 - C113 * C2317) * C1058 +
            (C48329 * C2318 - C113 * C2308) * C1065 +
            (C48329 * C2326 - C113 * C2319) * C1059 +
            (C48329 * C2320 - C113 * C2309) * C1066 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C7738 +
            (C48329 * C140 - C113 * C127) * C48638 + (C148 - C149) * C7739 +
            (C150 - C151) * C48625 + C168 * C7740 + C169 * C48593) *
               C7735 +
           ((C1246 - C1247) * C7738 + (C1248 - C1249) * C48638 + C1250 * C7739 +
            C1251 * C48625 + C1068 * C7740 + C1069 * C48593) *
               C7736 +
           C8300 * C48606) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C7738 +
            (C113 * C390 - C48329 * C401) * C48638 + (C408 - C409) * C7739 +
            (C410 - C411) * C48625 + (C412 - C413) * C7740 +
            (C414 - C415) * C48593) *
               C7735 +
           ((C1895 - C1896) * C7738 + (C1897 - C1898) * C48638 +
            (C1436 - C1437) * C7739 + (C1438 - C1439) * C48625 +
            (C1440 - C1441) * C7740 + (C1442 - C1443) * C48593) *
               C7736 +
           ((C1899 - C1900) * C7738 + (C1901 - C1902) * C48638 +
            (C1444 - C1445) * C7739 + (C1446 - C1447) * C48625 +
            (C1448 - C1449) * C7740 + (C1450 - C1451) * C48593) *
               C48606) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C7738 +
            (C48329 * C943 - C113 * C934) * C48638 +
            (C48329 * C935 - C113 * C929) * C7739 +
            (C48329 * C944 - C113 * C936) * C48625 +
            (C48329 * C937 - C113 * C930) * C7740 +
            (C48329 * C945 - C113 * C938) * C48593) *
               C7735 +
           ((C48329 * C2310 - C113 * C2304) * C7738 +
            (C48329 * C2322 - C113 * C2311) * C48638 +
            (C48329 * C2312 - C113 * C2305) * C7739 +
            (C48329 * C2323 - C113 * C2313) * C48625 +
            (C48329 * C2314 - C113 * C2306) * C7740 +
            (C48329 * C2324 - C113 * C2315) * C48593) *
               C7736 +
           ((C48329 * C2316 - C113 * C2307) * C7738 +
            (C48329 * C2325 - C113 * C2317) * C48638 +
            (C48329 * C2318 - C113 * C2308) * C7739 +
            (C48329 * C2326 - C113 * C2319) * C48625 +
            (C48329 * C2320 - C113 * C2309) * C7740 +
            (C48329 * C2327 - C113 * C2321) * C48593) *
               C48606) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48329 * C126 - C113 * C119) * C8916 +
            (C48329 * C140 - C113 * C127) * C48214) *
               C8911 +
           ((C1246 - C1247) * C8916 + (C1248 - C1249) * C48214) * C8912 +
           C9264 * C8913 + C9269 * C8914 + C9270 * C8915) *
              C925 +
          (((C113 * C383 - C48329 * C389) * C8916 +
            (C113 * C390 - C48329 * C401) * C48214) *
               C8911 +
           ((C1895 - C1896) * C8916 + (C1897 - C1898) * C48214) * C8912 +
           ((C1899 - C1900) * C8916 + (C1901 - C1902) * C48214) * C8913 +
           ((C9357 - C9358) * C8916 + (C9359 - C9360) * C48214) * C8914 +
           ((C9361 - C9362) * C8916 + (C9363 - C9364) * C48214) * C8915) *
              C926 +
          (((C48329 * C933 - C113 * C928) * C8916 +
            (C48329 * C943 - C113 * C934) * C48214) *
               C8911 +
           ((C48329 * C2310 - C113 * C2304) * C8916 +
            (C48329 * C2322 - C113 * C2311) * C48214) *
               C8912 +
           ((C48329 * C2316 - C113 * C2307) * C8916 +
            (C48329 * C2325 - C113 * C2317) * C48214) *
               C8913 +
           ((C48329 * C9592 - C113 * C9590) * C8916 +
            (C48329 * C9596 - C113 * C9593) * C48214) *
               C8914 +
           ((C48329 * C9594 - C113 * C9591) * C8916 +
            (C48329 * C9597 - C113 * C9595) * C48214) *
               C8915) *
              C927) *
         C48283 * C48249) /
            (p * q * std::sqrt(p + q));
}
