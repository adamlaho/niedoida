/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47182 = 0 * ae;
    const double C47181 = ae * be;
    const double C47180 = 0 * be;
    const double C47179 = 0 * be;
    const double C47178 = ae + be;
    const double C47177 = 0 * be;
    const double C47176 = xA - xB;
    const double C47237 = 0 * be;
    const double C47264 = 0 * be;
    const double C47263 = yA - yB;
    const double C47315 = 0 * ae;
    const double C47310 = 0 * be;
    const double C47309 = 0 * be;
    const double C47360 = 0 * be;
    const double C47424 = xP - xQ;
    const double C47423 = yP - yQ;
    const double C47422 = p + q;
    const double C47421 = p * q;
    const double C47429 = bs[3];
    const double C47439 = bs[4];
    const double C47448 = bs[5];
    const double C47462 = bs[6];
    const double C47484 = bs[7];
    const double C47588 = zP - zQ;
    const double C47756 = bs[2];
    const double C119 = bs[0];
    const double C48154 = ce + de;
    const double C48153 = ce * de;
    const double C48152 = xC - xD;
    const double C48167 = yC - yD;
    const double C48176 = zC - zD;
    const double C48234 = zA - zB;
    const double C47189 = C47182 / C47178;
    const double C47186 = C47180 / C47178;
    const double C47184 = 2 * C47178;
    const double C47183 = std::pow(C47178, 2);
    const double C47188 = C47181 * C47176;
    const double C47187 = C47176 * C47180;
    const double C47185 = C47176 * C47179;
    const double C48118 = C47176 * be;
    const double C48117 = C47176 * ae;
    const double C48116 = std::pow(C47176, 2);
    const double C47238 = C47237 / C47178;
    const double C47311 = C47264 / C47178;
    const double C47265 = C47181 * C47263;
    const double C47312 = C47263 * C47264;
    const double C48223 = std::pow(C47263, 2);
    const double C48278 = C47263 * be;
    const double C48276 = C47263 * ae;
    const double C47322 = C47315 / C47178;
    const double C47317 = C47263 * C47310;
    const double C47361 = C47360 / C47178;
    const double C47449 = std::pow(C47424, 2);
    const double C47509 = C47424 * be;
    const double C47431 = C47423 * ae;
    const double C47430 = C47423 * C47424;
    const double C47610 = std::pow(C47423, 2);
    const double C47425 = 2 * C47421;
    const double C47635 = std::pow(C47588, 2);
    const double C48164 = 2 * C48154;
    const double C48473 = std::pow(C48154, 2);
    const double C48155 = std::pow(C48152, 2);
    const double C48472 = C48152 * de;
    const double C48471 = C48152 * ce;
    const double C48189 = std::pow(C48167, 2);
    const double C48477 = C48167 * de;
    const double C48475 = C48167 * ce;
    const double C48206 = std::pow(C48176, 2);
    const double C48478 = C48176 * de;
    const double C48476 = C48176 * ce;
    const double C48235 = std::pow(C48234, 2);
    const double C48318 = C48234 * be;
    const double C48316 = C48234 * ae;
    const double C48130 = std::pow(C47184, -1);
    const double C48466 = std::pow(C47184, -2);
    const double C47190 = 2 * C47183;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * ae * be) /
                        C47183;
    const double C48470 = C47183 * C47184;
    const double C48469 = 4 * C47183;
    const double C47192 = C47187 / C47178;
    const double C47191 = C47185 / C47178;
    const double C48459 = std::pow(C48117, 2);
    const double C48119 = C48116 * C47181;
    const double C47320 = C47312 / C47178;
    const double C48224 = C48223 * C47181;
    const double C48479 = std::pow(C48276, 2);
    const double C47323 = C47317 / C47178;
    const double C47512 = C47439 * C47509;
    const double C47516 = C47448 * C47509;
    const double C47526 = C47462 * C47509;
    const double C47549 = C47429 * C47509;
    const double C47569 = C47484 * C47509;
    const double C47434 = C47429 * C47431;
    const double C47441 = C47439 * C47431;
    const double C47451 = C47448 * C47431;
    const double C47466 = C47462 * C47431;
    const double C47490 = C47484 * C47431;
    const double C47433 = C47430 * ae;
    const double C47426 = C47425 / C47422;
    const double C126 = (-(bs[1] * C47509 * C47425) / C47422) / C47178;
    const double C131 = (-(bs[1] * C47431 * C47425) / C47422) / C47178;
    const double C120 = -(C47424 * bs[1] * C47425) / C47422;
    const double C233 = -(C47423 * bs[1] * C47425) / C47422;
    const double C341 = -(C47588 * bs[1] * C47425) / C47422;
    const double C48474 = std::pow(C48164, -1);
    const double C48508 = 2 * C48473;
    const double C48156 = C48155 * C48153;
    const double C48190 = C48189 * C48153;
    const double C48207 = C48206 * C48153;
    const double C48236 = C48235 * C47181;
    const double C48481 = std::pow(C48316, 2);
    const double C47199 = C47180 / C47190;
    const double C47196 = C47179 / C47190;
    const double C47195 = C47177 / C47190;
    const double C47314 = C47264 / C47190;
    const double C47319 = C47310 / C47190;
    const double C47318 = C47309 / C47190;
    const double C48506 = 4 * C48470;
    const double C48505 = C47178 * C48469;
    const double C47197 = 0 - C47192;
    const double C47194 = 0 - C47191;
    const double C48120 = C48119 / C47178;
    const double C47324 = 0 - C47320;
    const double C48225 = C48224 / C47178;
    const double C47327 = 0 - C47323;
    const double C47435 = C47433 * be;
    const double C47428 = -C47426;
    const double C47438 = std::pow(C47426, 4);
    const double C47461 = std::pow(C47426, 6);
    const double C141 =
        (be * std::pow(C47426, 2) * bs[2] * C47423 * ae +
         C47424 * std::pow(-C47426, 3) * bs[3] * C47423 * C47424 * ae * be) /
        C47183;
    const double C47755 = std::pow(C47426, 2);
    const double C127 =
        (C47424 * std::pow(C47426, 2) * bs[2] * C47509) / C47178 -
        (be * bs[1] * C47425) / (C47422 * C47178);
    const double C48157 = C48156 / C48154;
    const double C48191 = C48190 / C48154;
    const double C48208 = C48207 / C48154;
    const double C48237 = C48236 / C47178;
    const double C47202 = C47197 * ae;
    const double C47201 = C47194 * ae;
    const double C48121 = -C48120;
    const double C47328 = C47324 * ae;
    const double C48226 = -C48225;
    const double C47331 = C47327 * ae;
    const double C47440 = C47439 * C47435;
    const double C47450 = C47448 * C47435;
    const double C47464 = C47462 * C47435;
    const double C47488 = C47484 * C47435;
    const double C47432 = std::pow(C47428, 3);
    const double C47447 = std::pow(C47428, 5);
    const double C47483 = std::pow(C47428, 7);
    const double C47443 = C47438 * C47441;
    const double C47513 = C47439 * C47438;
    const double C47514 = C47438 * C47512;
    const double C47469 = C47461 * C47466;
    const double C47529 = C47462 * C47461;
    const double C47530 = C47461 * C47526;
    const double C47757 = C47756 * C47755;
    const double C132 = (C47424 * C47755 * C47756 * C47431) / C47178;
    const double C239 = (C47423 * C47755 * C47756 * C47509) / C47178;
    const double C244 = (C47423 * C47755 * C47756 * C47431) / C47178 -
                        (ae * bs[1] * C47425) / (C47422 * C47178);
    const double C347 = (C47588 * C47755 * C47756 * C47509) / C47178;
    const double C352 = (C47588 * C47755 * C47756 * C47431) / C47178;
    const double C48158 = -C48157;
    const double C48192 = -C48191;
    const double C48209 = -C48208;
    const double C48238 = -C48237;
    const double C47206 = C47202 / C47178;
    const double C47205 = C47201 / C47178;
    const double C48122 = std::exp(C48121);
    const double C47332 = C47328 / C47178;
    const double C48227 = std::exp(C48226);
    const double C47335 = C47331 / C47178;
    const double C47442 = C47438 * C47440;
    const double C47468 = C47461 * C47464;
    const double C47436 = C47432 * C47434;
    const double C47510 = C47429 * C47432;
    const double C47550 = C47432 * C47549;
    const double C251 = (ae * std::pow(C47426, 2) * bs[2] * C47424 * be +
                         C47423 * C47432 * C47429 * C47435) /
                        C47183;
    const double C359 = ((zP - zQ) * C47432 * C47429 * C47435) / C47183;
    const double C47453 = C47447 * C47451;
    const double C47452 = C47447 * C47450;
    const double C47519 = C47448 * C47447;
    const double C47520 = C47447 * C47516;
    const double C47493 = C47483 * C47490;
    const double C47492 = C47483 * C47488;
    const double C47574 = C47483 * C47569;
    const double C47446 = be * C47443;
    const double C47445 = C47424 * C47443;
    const double C47852 = C47423 * C47443;
    const double C47518 = C47424 * C47513;
    const double C47517 = C47513 * be;
    const double C47761 = C47513 * C47449;
    const double C47855 = C47513 * C47610;
    const double C47916 = C47423 * C47513;
    const double C47915 = C47513 * ae;
    const double C48099 = C47513 * C47635;
    const double C48108 = C47588 * C47513;
    const double C47552 = C47424 * C47514;
    const double C47608 = ae * C47514;
    const double C47607 = C47423 * C47514;
    const double C47471 = C47469 * C47449;
    const double C47482 = be * C47469;
    const double C47481 = C47424 * C47469;
    const double C47949 = C47423 * C47469;
    const double C48013 = C47469 * C47635;
    const double C47532 = C47529 * C47449;
    const double C47571 = C47424 * C47529;
    const double C47570 = C47529 * be;
    const double C47953 = C47529 * C47610;
    const double C47534 = C47424 * C47530;
    const double C47656 = C47530 * C47610;
    const double C47696 = ae * C47530;
    const double C47695 = C47423 * C47530;
    const double C47716 = C47588 * C47530;
    const double C47729 = C47530 * C47635;
    const double C121 = C47757 * C47449 - (bs[1] * C47425) / C47422;
    const double C234 = C47423 * C47424 * C47757;
    const double C342 = C47588 * C47424 * C47757;
    const double C517 = C47757 * C47610 - (bs[1] * C47425) / C47422;
    const double C619 = C47588 * C47423 * C47757;
    const double C870 = C47757 * C47635 - (bs[1] * C47425) / C47422;
    const double C48159 = std::exp(C48158);
    const double C48193 = std::exp(C48192);
    const double C48210 = std::exp(C48209);
    const double C48239 = std::exp(C48238);
    const double C47210 = C47206 - C47196;
    const double C47209 = C47205 - C47195;
    const double C9005 = C48122 * C239;
    const double C10059 = C48122 * C347;
    const double C47193 = C47188 * C48122;
    const double C48124 = C48122 * C48117;
    const double C48123 = C48122 / C47184;
    const double C48132 = C48130 * C48122;
    const double C48462 = C48122 * C48118;
    const double C48503 = C48466 * C48122;
    const double C48497 = C48122 * C48459;
    const double C47336 = C47332 - C47319;
    const double C47266 = C47265 * C48227;
    const double C118 = -(2 * C47181 * (yA - yB) * C48227) / C47178;
    const double C48277 = C48227 / C47184;
    const double C48279 = C48227 * C48276;
    const double C48286 = C48130 * C48227;
    const double C48485 = C48227 * C48278;
    const double C48516 = C48466 * C48227;
    const double C48514 = C48227 * C48479;
    const double C47339 = C47335 - C47318;
    const double C885 =
        (C47432 * C47429 * C47435 + C47442 * std::pow(C47588, 2)) / C47183;
    const double C47470 = C47424 * C47468;
    const double C47655 = C47423 * C47468;
    const double C47682 = C47588 * C47468;
    const double C47726 = C47468 * C47635;
    const double C142 = (C47432 * C47429 * C47435 + be * C47424 * C47436 +
                         C47424 * (be * C47436 + C47424 * std::pow(C47426, 4) *
                                                     bs[4] * C47435)) /
                        C47183;
    const double C143 =
        (2 * (be * C47436 + C47424 * C47442) +
         be * (C47436 + C47443 * std::pow(C47424, 2)) +
         C47424 * (C47442 + be * C47424 * C47443 +
                   C47424 * (be * C47443 +
                             C47424 * std::pow(C47428, 5) * bs[5] * C47435))) /
        C47183;
    const double C252 = (ae * (C47424 * C47432 * C47429 * C47424 * be +
                               bs[2] * std::pow(C47426, 2) * be) +
                         C47423 * (be * C47436 + C47424 * C47442)) /
                        C47183;
    const double C360 = ((zP - zQ) * (be * C47436 + C47424 * C47442)) / C47183;
    const double C133 = (C47755 * C47756 * C47431 + C47436 * C47449) / C47178;
    const double C134 =
        (2 * C47424 * C47436 + C47424 * (C47436 + C47443 * C47449)) / C47178;
    const double C245 =
        (C47423 * C47424 * C47436 + C47424 * C47757 * ae) / C47178;
    const double C353 = (C47588 * C47424 * C47436) / C47178;
    const double C354 = (C47588 * (C47436 + C47443 * C47449)) / C47178;
    const double C527 =
        (C47755 * C47756 * C47431 + C47423 * (C47423 * C47436 + C47757 * ae) +
         C47423 * C47757 * ae) /
        C47178;
    const double C629 = (C47588 * (C47423 * C47436 + C47757 * ae)) / C47178;
    const double C880 = (C47755 * C47756 * C47431 + C47436 * C47635) / C47178;
    const double C2698 =
        (2 * C47588 * C47436 + C47588 * (C47436 + C47443 * C47635)) / C47178;
    const double C47553 = C47510 * be;
    const double C47760 = C47424 * C47510;
    const double C47854 = C47423 * C47510;
    const double C47853 = C47510 * ae;
    const double C246 = (C47423 * (C47436 + C47443 * C47449) +
                         (C47757 + C47510 * C47449) * ae) /
                        C47178;
    const double C1165 =
        (2 * (C47423 * C47436 + C47757 * ae) +
         C47423 * (C47436 + C47423 * (C47423 * C47443 + C47510 * ae) +
                   C47423 * C47510 * ae) +
         (C47757 + C47510 * C47610) * ae) /
        C47178;
    const double C1375 =
        (C47588 * (C47436 + C47423 * (C47423 * C47443 + C47510 * ae) +
                   C47423 * C47510 * ae)) /
        C47178;
    const double C122 =
        2 * C47424 * C47757 + C47424 * (C47757 + C47510 * C47449);
    const double C235 = C47423 * (C47757 + C47510 * C47449);
    const double C343 = C47588 * (C47757 + C47510 * C47449);
    const double C1158 =
        2 * C47423 * C47757 + C47423 * (C47757 + C47510 * C47610);
    const double C1368 = C47588 * (C47757 + C47510 * C47610);
    const double C2691 =
        2 * C47588 * C47757 + C47588 * (C47757 + C47510 * C47635);
    const double C3583 =
        3 * (C47757 + C47510 * C47635) +
        C47588 * (2 * C47588 * C47510 + C47588 * (C47510 + C47513 * C47635));
    const double C532 = (C47432 * C47429 * C47435 + ae * C47423 * C47550 +
                         C47423 * (ae * C47550 + C47423 * C47442)) /
                        C47183;
    const double C634 =
        (ae * C47588 * C47550 + C47423 * C47588 * C47442) / C47183;
    const double C128 =
        (C47755 * C47756 * C47509 + C47424 * (C47424 * C47550 + C47757 * be) +
         C47424 * C47757 * be) /
        C47178;
    const double C240 = (C47423 * (C47424 * C47550 + C47757 * be)) / C47178;
    const double C348 = (C47588 * (C47424 * C47550 + C47757 * be)) / C47178;
    const double C522 = (C47755 * C47756 * C47509 + C47550 * C47610) / C47178;
    const double C624 = (C47588 * C47423 * C47550) / C47178;
    const double C875 = (C47755 * C47756 * C47509 + C47550 * C47635) / C47178;
    const double C1162 =
        (2 * C47423 * C47550 + C47423 * (C47550 + C47514 * C47610)) / C47178;
    const double C1372 = (C47588 * (C47550 + C47514 * C47610)) / C47178;
    const double C2695 =
        (2 * C47588 * C47550 + C47588 * (C47550 + C47514 * C47635)) / C47178;
    const double C9007 = C48122 * C251;
    const double C10061 = C48122 * C359;
    const double C47455 = C47453 * C47449;
    const double C47460 = be * C47453;
    const double C47459 = C47424 * C47453;
    const double C47914 = C47423 * C47453;
    const double C47993 = C47453 * C47635;
    const double C48012 = C47588 * C47453;
    const double C3589 =
        (3 * (C47436 + C47443 * C47635) +
         C47588 * (2 * C47588 * C47443 + C47588 * (C47443 + C47453 * C47635))) /
        C47178;
    const double C47454 = C47424 * C47452;
    const double C47609 = C47423 * C47452;
    const double C47629 = C47588 * C47452;
    const double C1170 = (2 * (ae * C47550 + C47423 * C47442) +
                          ae * (C47550 + C47514 * std::pow(C47423, 2)) +
                          C47423 * (C47442 + ae * C47423 * C47514 +
                                    C47423 * (ae * C47514 + C47423 * C47452))) /
                         C47183;
    const double C1380 =
        (C47588 * C47442 + ae * C47588 * C47423 * C47514 +
         C47423 * (ae * C47588 * C47514 + C47423 * C47588 * C47452)) /
        C47183;
    const double C2276 = (ae * (C47550 + C47514 * C47635) +
                          C47423 * (C47442 + C47452 * C47635)) /
                         C47183;
    const double C2703 =
        (2 * C47588 * C47442 + C47588 * (C47442 + C47452 * C47635)) / C47183;
    const double C47521 = C47519 * C47449;
    const double C47528 = C47424 * C47519;
    const double C47527 = C47519 * be;
    const double C47917 = C47519 * C47610;
    const double C47951 = C47423 * C47519;
    const double C47950 = C47519 * ae;
    const double C48109 = C47519 * C47635;
    const double C47522 = C47424 * C47520;
    const double C47612 = C47520 * C47610;
    const double C47654 = ae * C47520;
    const double C47653 = C47423 * C47520;
    const double C47681 = C47588 * C47520;
    const double C47990 = C47520 * C47635;
    const double C3586 =
        (3 * (C47550 + C47514 * C47635) +
         C47588 * (2 * C47588 * C47514 + C47588 * (C47514 + C47520 * C47635))) /
        C47178;
    const double C47495 = C47493 * C47449;
    const double C47494 = C47424 * C47492;
    const double C47697 = C47423 * C47492;
    const double C47717 = C47588 * C47492;
    const double C47730 = C47492 * C47635;
    const double C47576 = C47424 * C47574;
    const double C47699 = C47574 * C47610;
    const double C881 = (C47424 * C47436 + C47445 * C47635) / C47178;
    const double C47557 = C47518 * be;
    const double C47769 = 2 * C47518;
    const double C47861 = C47423 * C47518;
    const double C47860 = C47518 * ae;
    const double C47762 = C47510 + C47761;
    const double C47857 = C47510 + C47855;
    const double C47921 = 2 * C47916;
    const double C47919 = C47916 * ae;
    const double C48100 = C47510 + C48099;
    const double C48110 = 2 * C48108;
    const double C2279 =
        (C47442 + C47452 * C47635 + ae * (C47607 + C47423 * C47520 * C47635) +
         C47423 * (ae * (C47514 + C47520 * C47635) +
                   C47423 * (C47452 + C47468 * C47635))) /
        C47183;
    const double C2264 = (C47423 * C47550 + C47607 * C47635) / C47178;
    const double C47473 = C47453 + C47471;
    const double C47489 = 2 * C47481;
    const double C47487 = be * C47481;
    const double C47929 = C47423 * C47481;
    const double C47999 = C47481 * C47635;
    const double C48015 = C47453 + C48013;
    const double C47535 = C47519 + C47532;
    const double C47575 = C47571 * be;
    const double C47932 = C47571 * C47610;
    const double C47957 = C47519 + C47953;
    const double C47660 = C47520 + C47656;
    const double C47703 = 2 * C47695;
    const double C47701 = ae * C47695;
    const double C47715 = C47588 * C47695;
    const double C48002 = C47695 * C47635;
    const double C47719 = ae * C47716;
    const double C47731 = C47520 + C47729;
    const double C48509 = C48474 * C48159;
    const double C48507 = C48159 * C48471;
    const double C231 = -(C48159 * C48472) / C48154;
    const double C48511 = C48474 * C48193;
    const double C48510 = C48193 * C48475;
    const double C447 = -(C48193 * C48477) / C48154;
    const double C48513 = C48474 * C48210;
    const double C48512 = C48210 * C48476;
    const double C721 = -(C48210 * C48478) / C48154;
    const double C48317 = C48239 / C47184;
    const double C48319 = C48239 * C48316;
    const double C48326 = C48130 * C48239;
    const double C48491 = C48239 * C48318;
    const double C48519 = C48466 * C48239;
    const double C48517 = C48239 * C48481;
    const double C47215 = C47210 / C47184;
    const double C47214 = C47176 * C47210;
    const double C47213 = C47209 + C47186;
    const double C47200 = C47193 / C47183;
    const double C47198 = 2 * C47193;
    const double C48125 = C48124 * C48118;
    const double C48131 = C48124 / C47190;
    const double C48463 = C48130 * C48124;
    const double C48461 = C48124 / C47178;
    const double C1000 = (C48122 * std::pow(C48118, 2)) / C47183 + C48123;
    const double C48133 = C48132 * C48118;
    const double C48467 = C48117 * C48132;
    const double C48465 = 2 * C48132;
    const double C48520 = C48132 / C48469;
    const double C105 = C48132 / C48506;
    const double C26144 = C48132 / C47184;
    const double C48499 = C48462 / C47178;
    const double C1001 = (-2 * C48130 * C48462) / C47178;
    const double C48533 = C48497 / C47183;
    const double C47341 = C47336 / C47184;
    const double C47340 = C47263 * C47336;
    const double C47292 = 2 * C47266;
    const double C47316 = C47266 / C47183;
    const double C1011 =
        ((0 * ae) / C47178 - C47266 / C47183) / C47184 + (0 * ae) / C47178;
    const double C3728 =
        ((C48227 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
        C47264 / C47190;
    const double C3729 = (0 * ae) / C47178 - C47266 / C47183;
    const double C7641 = (C48227 * std::pow(C48278, 2)) / C47183 + C48277;
    const double C48280 = C48279 * C48278;
    const double C48285 = C48279 / C47190;
    const double C48483 = C48279 / C47178;
    const double C48480 = C48130 * C48279;
    const double C1010 =
        (((C48227 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
         C47264 / C47190) /
            C47184 +
        ((C47263 * ((0 * ae) / C47178 - C47266 / C47183) + C48286) * ae) /
            C47178;
    const double C48287 = C48286 * C48278;
    const double C48489 = C48276 * C48286;
    const double C48488 = 2 * C48286;
    const double C48526 = C48286 / C48469;
    const double C8907 = C48286 / C48506;
    const double C26147 = C48286 / C47184;
    const double C48522 = C48485 / C47178;
    const double C7642 = (-2 * C48130 * C48485) / C47178;
    const double C48538 = C48514 / C47183;
    const double C47345 = C47339 + C47311;
    const double C10065 = C48122 * C885;
    const double C47684 = C47423 * C47682;
    const double C47742 = 2 * C47682;
    const double C47727 = C47452 + C47726;
    const double C9024 = C48122 * C252;
    const double C11182 = C48132 * C252;
    const double C23382 = C48132 * C252;
    const double C10070 = C48122 * C360;
    const double C12670 = C48132 * C360;
    const double C24878 = C48132 * C360;
    const double C47554 = C47552 + C47553;
    const double C528 =
        (C47424 * C47436 + C47423 * (C47423 * C47445 + C47760 * ae) +
         C47423 * C47760 * ae) /
        C47178;
    const double C630 = (C47588 * (C47423 * C47445 + C47760 * ae)) / C47178;
    const double C518 = C47424 * C47757 + C47760 * C47610;
    const double C620 = C47588 * C47423 * C47760;
    const double C871 = C47424 * C47757 + C47760 * C47635;
    const double C1159 =
        2 * C47423 * C47760 + C47423 * (C47760 + C47518 * C47610);
    const double C1369 = C47588 * (C47760 + C47518 * C47610);
    const double C2692 =
        2 * C47588 * C47760 + C47588 * (C47760 + C47518 * C47635);
    const double C2258 = C47423 * C47757 + C47854 * C47635;
    const double C3157 =
        2 * C47588 * C47854 + C47588 * (C47854 + C47916 * C47635);
    const double C47856 = C47852 + C47853;
    const double C9011 = C48122 * C532;
    const double C9374 = C48122 * C634;
    const double C9022 = C48122 * C240;
    const double C11178 = C48132 * C240;
    const double C23378 = C48132 * C240;
    const double C10068 = C48122 * C348;
    const double C12666 = C48132 * C348;
    const double C24874 = C48132 * C348;
    const double C9009 = C48122 * C522;
    const double C9372 = C48122 * C624;
    const double C10063 = C48122 * C875;
    const double C9013 = C48122 * C1162;
    const double C9376 = C48122 * C1372;
    const double C10926 = C48122 * C2695;
    const double C47457 = C47443 + C47455;
    const double C47472 = C47460 + C47470;
    const double C47465 = 2 * C47459;
    const double C47463 = be * C47459;
    const double C47859 = C47423 * C47459;
    const double C1166 =
        (2 * (C47423 * C47445 + C47760 * ae) +
         C47423 * (C47445 + C47423 * (C47423 * C47459 + C47518 * ae) +
                   C47423 * C47518 * ae) +
         (C47760 + C47518 * C47610) * ae) /
        C47178;
    const double C1376 =
        (C47588 * (C47445 + C47423 * (C47423 * C47459 + C47518 * ae) +
                   C47423 * C47518 * ae)) /
        C47178;
    const double C2699 =
        (2 * C47588 * C47445 + C47588 * (C47445 + C47459 * C47635)) / C47178;
    const double C3590 =
        (3 * (C47445 + C47459 * C47635) +
         C47588 * (2 * C47588 * C47459 + C47588 * (C47459 + C47481 * C47635))) /
        C47178;
    const double C47918 = C47914 + C47915;
    const double C47994 = C47443 + C47993;
    const double C48014 = 2 * C48012;
    const double C47456 = C47446 + C47454;
    const double C47611 = C47608 + C47609;
    const double C3166 =
        (ae * (2 * C47588 * C47514 + C47588 * (C47514 + C47520 * C47635)) +
         C47423 * (2 * C47629 + C47588 * (C47452 + C47468 * C47635))) /
        C47183;
    const double C3592 =
        (3 * (C47442 + C47452 * C47635) +
         C47588 * (2 * C47629 + C47588 * (C47452 + C47468 * C47635))) /
        C47183;
    const double C9015 = C48122 * C1170;
    const double C9378 = C48122 * C1380;
    const double C9883 = C48122 * C2276;
    const double C10928 = C48122 * C2703;
    const double C47523 = C47513 + C47521;
    const double C47533 = 2 * C47528;
    const double C47531 = C47528 * be;
    const double C47862 = C47528 * C47610;
    const double C47931 = C47423 * C47528;
    const double C47930 = C47528 * ae;
    const double C48102 = C47528 * C47635;
    const double C3584 =
        3 * (C47760 + C47518 * C47635) +
        C47588 * (2 * C47588 * C47518 + C47588 * (C47518 + C47528 * C47635));
    const double C47536 = C47534 + C47527;
    const double C47920 = C47513 + C47917;
    const double C47958 = 2 * C47951;
    const double C47956 = C47951 * ae;
    const double C48105 = C47951 * C47635;
    const double C10910 =
        3 * (C47854 + C47916 * C47635) +
        C47588 * (2 * C47588 * C47916 + C47588 * (C47916 + C47951 * C47635));
    const double C47955 = C47949 + C47950;
    const double C48111 = C47513 + C48109;
    const double C47524 = C47522 + C47517;
    const double C47613 = C47514 + C47612;
    const double C47658 = C47654 + C47655;
    const double C47659 = 2 * C47653;
    const double C47657 = ae * C47653;
    const double C3160 =
        (2 * C47588 * C47607 + C47588 * (C47607 + C47653 * C47635)) / C47178;
    const double C10912 =
        (3 * (C47607 + C47653 * C47635) +
         C47588 * (2 * C47588 * C47653 + C47588 * (C47653 + C47695 * C47635))) /
        C47178;
    const double C47683 = ae * C47681;
    const double C48008 = 2 * C47681;
    const double C47991 = C47514 + C47990;
    const double C17632 = C48122 * C3586;
    const double C47497 = C47469 + C47495;
    const double C47496 = C47482 + C47494;
    const double C47702 = C47696 + C47697;
    const double C47720 = C47423 * C47717;
    const double C47732 = C47468 + C47730;
    const double C47577 = C47576 + C47570;
    const double C47704 = C47530 + C47699;
    const double C2259 = C47423 * C47760 + C47861 * C47635;
    const double C123 = 3 * (C47757 + C47510 * C47449) +
                        C47424 * (2 * C47760 + C47424 * C47762);
    const double C236 = C47423 * (2 * C47760 + C47424 * C47762);
    const double C344 = C47588 * (2 * C47760 + C47424 * C47762);
    const double C519 = C47757 + C47510 * C47449 + C47762 * C47610;
    const double C621 = C47588 * C47423 * C47762;
    const double C872 = C47757 + C47510 * C47449 + C47762 * C47635;
    const double C1640 = 3 * (C47757 + C47510 * C47610) +
                         C47423 * (2 * C47854 + C47423 * C47857);
    const double C1820 = C47588 * (2 * C47854 + C47423 * C47857);
    const double C2261 = C47757 + C47510 * C47610 + C47857 * C47635;
    const double C17623 =
        4 * (2 * C47588 * C47510 + C47588 * C48100) +
        C47588 * (3 * C48100 + C47588 * (2 * C47588 * C47513 +
                                         C47588 * (C47513 + C47519 * C47635)));
    const double C9887 = C48122 * C2279;
    const double C9881 = C48122 * C2264;
    const double C47475 = C47424 * C47473;
    const double C47485 = 3 * C47473;
    const double C47480 = be * C47473;
    const double C47866 = C47423 * C47473;
    const double C47491 = C47468 + C47487;
    const double C48000 = C47459 + C47999;
    const double C48016 = C47588 * C48015;
    const double C47537 = C47424 * C47535;
    const double C47572 = C47535 * be;
    const double C47869 = C47535 * C47610;
    const double C47935 = C47528 + C47932;
    const double C47960 = C47423 * C47957;
    const double C47663 = C47423 * C47660;
    const double C47698 = 3 * C47660;
    const double C47694 = ae * C47660;
    const double C47705 = C47468 + C47701;
    const double C47718 = ae * C47715;
    const double C48003 = C47653 + C48002;
    const double C47733 = ae * C47731;
    const double C48009 = C47588 * C47731;
    const double C112 = C48509 / C48164;
    const double C110 = C48159 / C48164 - (C48507 * C48472) / C48473;
    const double C111 = C48507 / C48508 - (C48509 * C48472) / C48154;
    const double C449 = C48507 / C48154;
    const double C515 = C48511 / C48164;
    const double C229 = C48510 / C48154;
    const double C513 = C48193 / C48164 - (C48510 * C48477) / C48473;
    const double C514 = C48510 / C48508 - (C48511 * C48477) / C48154;
    const double C869 = C48513 / C48164;
    const double C339 = C48512 / C48154;
    const double C867 = C48210 / C48164 - (C48512 * C48478) / C48473;
    const double C868 = C48512 / C48508 - (C48513 * C48478) / C48154;
    const double C14987 = (C48239 * std::pow(C48318, 2)) / C47183 + C48317;
    const double C48320 = C48319 * C48318;
    const double C48325 = C48319 / C47190;
    const double C48484 = C48319 / C47178;
    const double C48482 = C48130 * C48319;
    const double C48327 = C48326 * C48318;
    const double C48495 = C48316 * C48326;
    const double C48494 = 2 * C48326;
    const double C48532 = C48326 / C48469;
    const double C17454 = C48326 / C48506;
    const double C36194 = C48326 / C47184;
    const double C48528 = C48491 / C47178;
    const double C14988 = (-2 * C48130 * C48491) / C47178;
    const double C48540 = C48517 / C47183;
    const double C47219 = C47214 + 0;
    const double C47218 = C47213 / C47184;
    const double C47204 = C47189 - C47200;
    const double C47203 = C47176 * C47198;
    const double C1008 =
        ((-C47198 / C47178) / C47184 - (0 * be) / C47178) / C47184 -
        (0 * be) / C47178;
    const double C8908 = -C47198 / C47178;
    const double C23240 = (-C47198 / C47178) / C47184 - (0 * be) / C47178;
    const double C48126 = C48125 / C47183;
    const double C48500 = 2 * C48463;
    const double C11205 = C48461 * C252;
    const double C11201 = C48461 * C240;
    const double C11196 = C48461 * C1170;
    const double C11192 = C48461 * C1162;
    const double C11188 = C48461 * C532;
    const double C11184 = C48461 * C522;
    const double C11180 = C48461 * C251;
    const double C11176 = C48461 * C239;
    const double C11745 = C48461 * C1380;
    const double C11741 = C48461 * C1372;
    const double C11737 = C48461 * C634;
    const double C11733 = C48461 * C624;
    const double C12677 = C48461 * C360;
    const double C12673 = C48461 * C348;
    const double C12668 = C48461 * C359;
    const double C12664 = C48461 * C347;
    const double C13245 = C48461 * C2279;
    const double C13237 = C48461 * C2276;
    const double C13233 = C48461 * C2264;
    const double C13793 = C48461 * C885;
    const double C13789 = C48461 * C875;
    const double C19774 = C48461 * C2703;
    const double C19770 = C48461 * C2695;
    const double C20877 = C48461 * C3586;
    const double C1206 = C1000 * C252;
    const double C1200 = C1000 * C240;
    const double C1193 = C1000 * C532;
    const double C1187 = C1000 * C522;
    const double C1181 = C1000 * C251;
    const double C1175 = C1000 * C239;
    const double C1666 = C1000 * C1170;
    const double C1660 = C1000 * C1162;
    const double C1852 = C1000 * C1380;
    const double C1846 = C1000 * C1372;
    const double C1840 = C1000 * C634;
    const double C1834 = C1000 * C624;
    const double C2739 = C1000 * C360;
    const double C2733 = C1000 * C348;
    const double C2726 = C1000 * C885;
    const double C2720 = C1000 * C875;
    const double C2714 = C1000 * C359;
    const double C2708 = C1000 * C347;
    const double C3177 = C1000 * C2276;
    const double C3171 = C1000 * C2264;
    const double C3609 = C1000 * C2703;
    const double C3603 = C1000 * C2695;
    const double C48134 = C48133 / C47178;
    const double C48504 = C48467 / C47190;
    const double C48534 = C48461 - C48499;
    const double C23233 = -C48499;
    const double C1183 = C1001 * C252;
    const double C1177 = C1001 * C240;
    const double C2716 = C1001 * C360;
    const double C2710 = C1001 * C348;
    const double C48548 = C48533 + C48123;
    const double C47346 = C47340 + 0;
    const double C47313 = C47263 * C47292;
    const double C7648 =
        ((-C47264 / C47178) / C47184 -
         ((C48227 - (C47263 * C47292) / C47178) * be) / C47178) /
            C47184 -
        ((C47263 * ((-C47292 / C47178) / C47184 - (0 * be) / C47178) + C48286) *
         be) /
            C47178;
    const double C7649 =
        ((-C47292 / C47178) / C47184 - (0 * be) / C47178) / C47184 -
        (0 * be) / C47178;
    const double C22094 = (-C47292 / C47178) / C47184 - (0 * be) / C47178;
    const double C47326 = C47322 - C47316;
    const double C48281 = C48280 / C47183;
    const double C1009 =
        (((0 - (C47263 * C47264) / C47178) * ae) / C47178 - (0 * be) / C47190) /
            C47184 +
        ((C47263 * (((C48227 - (C47263 * 2 * C47266) / C47178) * ae) / C47178 -
                    C47264 / C47190) +
          C48483) *
         ae) /
            C47178 +
        (0 * ae) / C47178 - C47266 / C47183;
    const double C48515 = 2 * C48480;
    const double C48288 = C48287 / C47178;
    const double C48525 = C48489 / C47190;
    const double C48542 = C48483 - C48522;
    const double C22087 = -C48522;
    const double C48551 = C48538 + C48277;
    const double C47349 = C47345 / C47184;
    const double C129 =
        (2 * (C47424 * C47550 + C47757 * be) +
         C47424 * (C47550 + C47424 * C47554 + C47424 * C47510 * be) +
         (C47757 + C47510 * C47449) * be) /
        C47178;
    const double C241 =
        (C47423 * (C47550 + C47424 * C47554 + C47760 * be)) / C47178;
    const double C349 =
        (C47588 * (C47550 + C47424 * C47554 + C47760 * be)) / C47178;
    const double C523 =
        (C47424 * C47550 + C47757 * be + C47554 * C47610) / C47178;
    const double C625 = (C47588 * C47423 * C47554) / C47178;
    const double C876 =
        (C47424 * C47550 + C47757 * be + C47554 * C47635) / C47178;
    const double C1646 =
        (3 * (C47436 + C47423 * C47856 + C47854 * ae) +
         C47423 * (2 * C47856 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47513 * ae) +
                             C47423 * C47513 * ae) +
                   C47857 * ae) +
         (2 * C47854 + C47423 * C47857) * ae) /
        C47178;
    const double C1826 =
        (C47588 * (2 * C47856 +
                   C47423 * (C47443 + C47423 * (C47423 * C47453 + C47513 * ae) +
                             C47423 * C47513 * ae) +
                   C47857 * ae)) /
        C47178;
    const double C2267 =
        (C47423 * C47436 + C47757 * ae + C47856 * C47635) / C47178;
    const double C2273 = (C47436 + C47423 * C47856 + C47854 * ae +
                          (C47443 + C47423 * (C47423 * C47453 + C47513 * ae) +
                           C47423 * C47513 * ae) *
                              C47635) /
                         C47178;
    const double C3163 =
        (2 * C47588 * C47856 +
         C47588 * (C47856 + (C47423 * C47453 + C47513 * ae) * C47635)) /
        C47178;
    const double C135 = (3 * (C47436 + C47443 * C47449) +
                         C47424 * (2 * C47445 + C47424 * C47457)) /
                        C47178;
    const double C247 = (C47423 * (2 * C47445 + C47424 * C47457) +
                         (2 * C47760 + C47424 * C47762) * ae) /
                        C47178;
    const double C355 = (C47588 * (2 * C47445 + C47424 * C47457)) / C47178;
    const double C529 =
        (C47436 + C47443 * C47449 + C47423 * (C47423 * C47457 + C47762 * ae) +
         C47423 * C47762 * ae) /
        C47178;
    const double C631 = (C47588 * (C47423 * C47457 + C47762 * ae)) / C47178;
    const double C882 = (C47436 + C47443 * C47449 + C47457 * C47635) / C47178;
    const double C2700 =
        (2 * C47588 * C47457 + C47588 * (C47457 + C47473 * C47635)) / C47178;
    const double C47474 = C47424 * C47472;
    const double C47479 = 2 * C47472;
    const double C47617 = C47423 * C47472;
    const double C47631 = C47588 * C47472;
    const double C47467 = C47452 + C47463;
    const double C47863 = C47859 + C47860;
    const double C47922 = C47423 * C47918;
    const double C47948 = 2 * C47918;
    const double C17626 =
        (4 * (2 * C47588 * C47443 + C47588 * C47994) +
         C47588 *
             (3 * C47994 + C47588 * (2 * C47588 * C47453 +
                                     C47588 * (C47453 + C47469 * C47635)))) /
        C47178;
    const double C144 =
        (3 * (C47442 + be * C47445 + C47424 * C47456) +
         be * (2 * C47445 + C47424 * C47457) +
         C47424 *
             (2 * C47456 + be * C47457 +
              C47424 * (C47452 + be * C47424 * C47453 +
                        C47424 * (be * C47453 + C47424 * std::pow(C47426, 6) *
                                                    bs[6] * C47435)))) /
        C47183;
    const double C253 =
        (ae * (C47432 * C47429 * C47509 +
               C47424 * (C47424 * C47438 * C47439 * C47509 + C47510 * be) +
               C47424 * C47510 * be) +
         C47423 * (C47442 + be * C47445 + C47424 * C47456)) /
        C47183;
    const double C361 =
        ((zP - zQ) * (C47442 + be * C47445 + C47424 * C47456)) / C47183;
    const double C533 = (be * C47436 + C47424 * C47442 + ae * C47423 * C47554 +
                         C47423 * (ae * C47554 + C47423 * C47456)) /
                        C47183;
    const double C635 =
        (ae * C47588 * C47554 + C47423 * C47588 * C47456) / C47183;
    const double C886 =
        (be * C47436 + C47424 * C47442 + C47456 * std::pow(C47588, 2)) / C47183;
    const double C2704 =
        (2 * C47588 * C47456 + C47588 * (C47456 + C47472 * C47635)) / C47183;
    const double C10504 = C48122 * C3166;
    const double C19222 = C48461 * C3166;
    const double C17634 = C48122 * C3592;
    const double C20881 = C48461 * C3592;
    const double C47563 = C47523 * be;
    const double C47770 = C47424 * C47523;
    const double C47774 = 3 * C47523;
    const double C47868 = C47423 * C47523;
    const double C47867 = C47523 * ae;
    const double C1167 =
        (2 * (C47423 * C47457 + C47762 * ae) +
         C47423 * (C47457 + C47423 * (C47423 * C47473 + C47523 * ae) +
                   C47423 * C47523 * ae) +
         (C47762 + C47523 * C47610) * ae) /
        C47178;
    const double C1377 =
        (C47588 * (C47457 + C47423 * (C47423 * C47473 + C47523 * ae) +
                   C47423 * C47523 * ae)) /
        C47178;
    const double C1160 =
        2 * C47423 * C47762 + C47423 * (C47762 + C47523 * C47610);
    const double C1370 = C47588 * (C47762 + C47523 * C47610);
    const double C2693 =
        2 * C47588 * C47762 + C47588 * (C47762 + C47523 * C47635);
    const double C3585 =
        3 * (C47762 + C47523 * C47635) +
        C47588 * (2 * C47588 * C47523 + C47588 * (C47523 + C47535 * C47635));
    const double C47864 = C47518 + C47862;
    const double C47936 = 2 * C47931;
    const double C47934 = C47931 * ae;
    const double C3158 =
        2 * C47588 * C47861 + C47588 * (C47861 + C47931 * C47635);
    const double C17537 =
        3 * (C47861 + C47931 * C47635) +
        C47588 * (2 * C47588 * C47931 +
                  C47588 * (C47931 + C47423 * C47571 * C47635));
    const double C47933 = C47929 + C47930;
    const double C48103 = C47518 + C48102;
    const double C47538 = C47424 * C47536;
    const double C47568 = 2 * C47536;
    const double C47618 = C47536 * C47610;
    const double C47668 = ae * C47536;
    const double C47667 = C47423 * C47536;
    const double C47687 = C47588 * C47536;
    const double C47996 = C47536 * C47635;
    const double C47923 = C47423 * C47920;
    const double C47954 = 3 * C47920;
    const double C47952 = C47920 * ae;
    const double C10050 =
        2 * C47588 * C47857 + C47588 * (C47857 + C47920 * C47635);
    const double C10911 =
        3 * (C47857 + C47920 * C47635) +
        C47588 * (2 * C47588 * C47920 + C47588 * (C47920 + C47957 * C47635));
    const double C48106 = C47916 + C48105;
    const double C47959 = C47423 * C47955;
    const double C48005 = C47955 * C47635;
    const double C10913 =
        (3 * (C47856 + C47918 * C47635) +
         C47588 * (2 * C47588 * C47918 + C47588 * (C47918 + C47955 * C47635))) /
        C47178;
    const double C48112 = C47588 * C48111;
    const double C47556 = C47424 * C47524;
    const double C47561 = 2 * C47524;
    const double C47616 = ae * C47524;
    const double C47615 = C47423 * C47524;
    const double C1171 = (2 * (ae * C47554 + C47423 * C47456) +
                          ae * (C47554 + C47524 * std::pow(C47423, 2)) +
                          C47423 * (C47456 + ae * C47423 * C47524 +
                                    C47423 * (ae * C47524 + C47423 * C47472))) /
                         C47183;
    const double C1381 =
        (C47588 * C47456 + ae * C47588 * C47423 * C47524 +
         C47423 * (ae * C47588 * C47524 + C47423 * C47588 * C47472)) /
        C47183;
    const double C2277 = (ae * (C47554 + C47524 * C47635) +
                          C47423 * (C47456 + C47472 * C47635)) /
                         C47183;
    const double C1163 =
        (2 * C47423 * C47554 + C47423 * (C47554 + C47524 * C47610)) / C47178;
    const double C1373 = (C47588 * (C47554 + C47524 * C47610)) / C47178;
    const double C2696 =
        (2 * C47588 * C47554 + C47588 * (C47554 + C47524 * C47635)) / C47178;
    const double C3587 =
        (3 * (C47554 + C47524 * C47635) +
         C47588 * (2 * C47588 * C47524 + C47588 * (C47524 + C47536 * C47635))) /
        C47178;
    const double C1649 =
        (3 * (C47442 + ae * C47607 + C47423 * C47611) +
         ae * (2 * C47607 + C47423 * C47613) +
         C47423 * (2 * C47611 + ae * C47613 +
                   C47423 * (C47452 + ae * C47423 * C47520 +
                             C47423 * (ae * C47520 + C47423 * C47468)))) /
        C47183;
    const double C1829 =
        (2 * (ae * C47588 * C47514 + C47423 * C47629) + ae * C47588 * C47613 +
         C47423 *
             (C47629 + ae * C47588 * C47423 * C47520 +
              C47423 * (ae * C47588 * C47520 + C47423 * C47588 * C47468))) /
        C47183;
    const double C9618 =
        (2 * (ae * (C47514 + C47520 * C47635) + C47423 * C47727) +
         ae * (C47613 + C47660 * C47635) +
         C47423 * (C47727 + ae * (C47653 + C47695 * C47635) +
                   C47423 * (ae * (C47520 + C47530 * C47635) +
                             C47423 * (C47468 + C47492 * C47635)))) /
        C47183;
    const double C1643 = (3 * (C47550 + C47514 * C47610) +
                          C47423 * (2 * C47607 + C47423 * C47613)) /
                         C47178;
    const double C1823 = (C47588 * (2 * C47607 + C47423 * C47613)) / C47178;
    const double C2270 = (C47550 + C47514 * C47610 + C47613 * C47635) / C47178;
    const double C10052 =
        (2 * C47588 * C47613 + C47588 * (C47613 + C47660 * C47635)) / C47178;
    const double C47662 = C47423 * C47658;
    const double C47693 = 2 * C47658;
    const double C47661 = C47452 + C47657;
    const double C10502 = C48122 * C3160;
    const double C19218 = C48461 * C3160;
    const double C17875 = C48122 * C10912;
    const double C47685 = C47683 + C47684;
    const double C17625 =
        (4 * (2 * C47588 * C47514 + C47588 * C47991) +
         C47588 * (3 * C47991 + C47588 * (2 * C47681 + C47588 * C47731))) /
        C47178;
    const double C47499 = C47424 * C47497;
    const double C3591 =
        (3 * (C47457 + C47473 * C47635) +
         C47588 * (2 * C47588 * C47473 + C47588 * (C47473 + C47497 * C47635))) /
        C47178;
    const double C47498 = C47424 * C47496;
    const double C47669 = C47423 * C47496;
    const double C47688 = C47588 * C47496;
    const double C47737 = C47496 * C47635;
    const double C47706 = C47423 * C47702;
    const double C47722 = C47719 + C47720;
    const double C47734 = C47423 * C47732;
    const double C47743 = C47588 * C47732;
    const double C10056 =
        (2 * C47629 + C47588 * C47727 +
         ae * (2 * C47588 * C47653 + C47588 * (C47653 + C47695 * C47635)) +
         C47423 * (ae * (2 * C47681 + C47588 * C47731) +
                   C47423 * (2 * C47682 + C47588 * C47732))) /
        C47183;
    const double C47578 = C47424 * C47577;
    const double C47670 = C47577 * C47610;
    const double C47707 = C47423 * C47704;
    const double C10914 =
        (3 * (C47613 + C47660 * C47635) +
         C47588 * (2 * C47588 * C47660 + C47588 * (C47660 + C47704 * C47635))) /
        C47178;
    const double C47477 = C47465 + C47475;
    const double C17628 =
        (4 * (2 * C47588 * C47459 + C47588 * C48000) +
         C47588 * (3 * C48000 +
                   C47588 * (2 * C47588 * C47481 +
                             C47588 * (C47481 + C47424 * C47493 * C47635)))) /
        C47178;
    const double C48017 = C48014 + C48016;
    const double C47539 = C47533 + C47537;
    const double C47871 = C47523 + C47869;
    const double C47938 = C47423 * C47935;
    const double C47962 = C47958 + C47960;
    const double C47665 = C47659 + C47663;
    const double C47721 = C47682 + C47718;
    const double C17870 =
        (4 * (2 * C47588 * C47653 + C47588 * C48003) +
         C47588 * (3 * C48003 +
                   C47588 * (2 * C47715 +
                             C47588 * (C47695 + C47423 * C47574 * C47635)))) /
        C47178;
    const double C48010 = C48008 + C48009;
    const double C48321 = C48320 / C47183;
    const double C48518 = 2 * C48482;
    const double C48328 = C48327 / C47178;
    const double C48531 = C48495 / C47190;
    const double C48545 = C48484 - C48528;
    const double C30746 = -C48528;
    const double C48552 = C48540 + C48317;
    const double C47222 = C47219 * be;
    const double C11210 = C47204 * C519;
    const double C11206 = C47204 * C246;
    const double C11202 = C47204 * C235;
    const double C11199 = C47204 * C1166;
    const double C11195 = C47204 * C1159;
    const double C11191 = C47204 * C528;
    const double C11187 = C47204 * C518;
    const double C11183 = C47204 * C245;
    const double C11179 = C47204 * C234;
    const double C11746 = C47204 * C1376;
    const double C11742 = C47204 * C1369;
    const double C11738 = C47204 * C630;
    const double C11734 = C47204 * C620;
    const double C12456 = C47204 * C621;
    const double C12678 = C47204 * C354;
    const double C12674 = C47204 * C343;
    const double C12671 = C47204 * C353;
    const double C12667 = C47204 * C342;
    const double C13234 = C47204 * C2259;
    const double C13794 = C47204 * C881;
    const double C13790 = C47204 * C871;
    const double C18669 = C47204 * C872;
    const double C19775 = C47204 * C2699;
    const double C19771 = C47204 * C2692;
    const double C20882 = C47204 * C3590;
    const double C20878 = C47204 * C3584;
    const double C47208 = C47176 * C47204;
    const double C47236 = C47204 / C47184;
    const double C47207 = C47203 / C47178;
    const double C1203 = C1008 * C236;
    const double C1192 = C1008 * C519;
    const double C1186 = C1008 * C246;
    const double C1180 = C1008 * C235;
    const double C1837 = C1008 * C621;
    const double C2736 = C1008 * C344;
    const double C2725 = C1008 * C872;
    const double C2719 = C1008 * C354;
    const double C2713 = C1008 * C343;
    const double C9031 = C8908 * C1166;
    const double C9029 = C8908 * C1159;
    const double C9027 = C8908 * C528;
    const double C9025 = C8908 * C518;
    const double C9023 = C8908 * C245;
    const double C9021 = C8908 * C234;
    const double C9018 = C8908 * C1640;
    const double C9016 = C8908 * C1165;
    const double C9014 = C8908 * C1158;
    const double C9012 = C8908 * C527;
    const double C9010 = C8908 * C517;
    const double C9008 = C8908 * C244;
    const double C9006 = C8908 * C233;
    const double C9379 = C8908 * C1820;
    const double C9377 = C8908 * C1375;
    const double C9375 = C8908 * C1368;
    const double C9373 = C8908 * C629;
    const double C9371 = C8908 * C619;
    const double C9897 = C8908 * C2259;
    const double C9895 = C8908 * C1376;
    const double C9893 = C8908 * C1369;
    const double C9891 = C8908 * C630;
    const double C9889 = C8908 * C620;
    const double C9886 = C8908 * C2261;
    const double C9882 = C8908 * C2258;
    const double C10073 = C8908 * C881;
    const double C10071 = C8908 * C871;
    const double C10069 = C8908 * C353;
    const double C10067 = C8908 * C342;
    const double C10066 = C8908 * C880;
    const double C10064 = C8908 * C870;
    const double C10062 = C8908 * C352;
    const double C10060 = C8908 * C341;
    const double C10501 = C8908 * C3157;
    const double C10927 = C8908 * C2698;
    const double C10925 = C8908 * C2691;
    const double C17642 = C8908 * C3590;
    const double C17640 = C8908 * C3584;
    const double C17638 = C8908 * C2699;
    const double C17636 = C8908 * C2692;
    const double C17635 = C8908 * C3589;
    const double C17633 = C8908 * C3583;
    const double C17874 = C8908 * C10910;
    const double C18114 = C8908 * C17623;
    const double C23410 = C23240 * C519;
    const double C23406 = C23240 * C246;
    const double C23402 = C23240 * C235;
    const double C23399 = C23240 * C1166;
    const double C23395 = C23240 * C1159;
    const double C23391 = C23240 * C528;
    const double C23387 = C23240 * C518;
    const double C23383 = C23240 * C245;
    const double C23379 = C23240 * C234;
    const double C23946 = C23240 * C1376;
    const double C23942 = C23240 * C1369;
    const double C23938 = C23240 * C630;
    const double C23934 = C23240 * C620;
    const double C24664 = C23240 * C621;
    const double C24657 = C23240 * C2259;
    const double C24898 = C23240 * C872;
    const double C24894 = C23240 * C354;
    const double C24890 = C23240 * C343;
    const double C24887 = C23240 * C881;
    const double C24883 = C23240 * C871;
    const double C24879 = C23240 * C353;
    const double C24875 = C23240 * C342;
    const double C26024 = C23240 * C2699;
    const double C26020 = C23240 * C2692;
    const double C34473 = C23240 * C3590;
    const double C34469 = C23240 * C3584;
    const double C48127 = C48123 - C48126;
    const double C48535 = C48500 / C47178;
    const double C48135 = C48131 - C48134;
    const double C48549 = C48534 / C47184;
    const double C23405 = C23233 * C252;
    const double C23401 = C23233 * C240;
    const double C23396 = C23233 * C1170;
    const double C23392 = C23233 * C1162;
    const double C23388 = C23233 * C532;
    const double C23384 = C23233 * C522;
    const double C23380 = C23233 * C251;
    const double C23376 = C23233 * C239;
    const double C23945 = C23233 * C1380;
    const double C23941 = C23233 * C1372;
    const double C23937 = C23233 * C634;
    const double C23933 = C23233 * C624;
    const double C24658 = C23233 * C2276;
    const double C24654 = C23233 * C2264;
    const double C24893 = C23233 * C360;
    const double C24889 = C23233 * C348;
    const double C24884 = C23233 * C885;
    const double C24880 = C23233 * C875;
    const double C24876 = C23233 * C359;
    const double C24872 = C23233 * C347;
    const double C25249 = C23233 * C2279;
    const double C25467 = C23233 * C3166;
    const double C25463 = C23233 * C3160;
    const double C26023 = C23233 * C2703;
    const double C26019 = C23233 * C2695;
    const double C34472 = C23233 * C3592;
    const double C34468 = C23233 * C3586;
    const double C7828 = C48548 * C252;
    const double C7822 = C48548 * C240;
    const double C7815 = C48548 * C532;
    const double C7809 = C48548 * C522;
    const double C7803 = C48548 * C251;
    const double C7797 = C48548 * C239;
    const double C8260 = C48548 * C1170;
    const double C8254 = C48548 * C1162;
    const double C8434 = C48548 * C1380;
    const double C8428 = C48548 * C1372;
    const double C8422 = C48548 * C634;
    const double C8416 = C48548 * C624;
    const double C15314 = C48548 * C360;
    const double C15308 = C48548 * C348;
    const double C15301 = C48548 * C885;
    const double C15295 = C48548 * C875;
    const double C15289 = C48548 * C359;
    const double C15283 = C48548 * C347;
    const double C15740 = C48548 * C2276;
    const double C15734 = C48548 * C2264;
    const double C16160 = C48548 * C2703;
    const double C16154 = C48548 * C2695;
    const double C47350 = C47346 * be;
    const double C47321 = C47313 / C47178;
    const double C47330 = C47263 * C47326;
    const double C47359 = C47326 / C47184;
    const double C48282 = C48277 - C48281;
    const double C48539 = C48515 / C47178;
    const double C48289 = C48285 - C48288;
    const double C48553 = C48542 / C47184;
    const double C7647 =
        ((-(0 * be) / C47178) / C47184 -
         ((0 - (C47263 * C47264) / C47178) * be) / C47178) /
            C47184 -
        ((C47263 * ((-C47264 / C47178) / C47184 -
                    ((C48227 - (C47263 * C47292) / C47178) * be) / C47178) +
          C22087) *
         be) /
            C47178 +
        (-C47292 / C47178) / C47184 - (0 * be) / C47178;
    const double C1202 = C1001 * C241;
    const double C1179 = C48503 * C241;
    const double C7801 = C48503 * C241;
    const double C11203 = C48132 * C241;
    const double C23403 = C48132 * C241;
    const double C26305 = C26144 * C241;
    const double C2735 = C1001 * C349;
    const double C2712 = C48503 * C349;
    const double C12675 = C48132 * C349;
    const double C15287 = C48503 * C349;
    const double C24891 = C48132 * C349;
    const double C27895 = C26144 * C349;
    const double C1212 = C1000 * C523;
    const double C1189 = C1001 * C523;
    const double C7834 = C48548 * C523;
    const double C9026 = C48122 * C523;
    const double C11209 = C48461 * C523;
    const double C11186 = C48132 * C523;
    const double C23409 = C23233 * C523;
    const double C23386 = C48132 * C523;
    const double C1836 = C1001 * C625;
    const double C6236 = C1000 * C625;
    const double C9890 = C48122 * C625;
    const double C11735 = C48132 * C625;
    const double C12455 = C48461 * C625;
    const double C23935 = C48132 * C625;
    const double C24663 = C23233 * C625;
    const double C39279 = C48548 * C625;
    const double C2745 = C1000 * C876;
    const double C2722 = C1001 * C876;
    const double C10072 = C48122 * C876;
    const double C13791 = C48132 * C876;
    const double C15320 = C48548 * C876;
    const double C18668 = C48461 * C876;
    const double C24897 = C23233 * C876;
    const double C24882 = C48132 * C876;
    const double C9020 = C8908 * C1646;
    const double C9381 = C8908 * C1826;
    const double C9884 = C8908 * C2267;
    const double C9888 = C8908 * C2273;
    const double C10503 = C8908 * C3163;
    const double C1209 = C1008 * C247;
    const double C2742 = C1008 * C355;
    const double C1198 = C1008 * C529;
    const double C11214 = C47204 * C529;
    const double C23414 = C23240 * C529;
    const double C1843 = C1008 * C631;
    const double C12460 = C47204 * C631;
    const double C24668 = C23240 * C631;
    const double C2731 = C1008 * C882;
    const double C18673 = C47204 * C882;
    const double C24902 = C23240 * C882;
    const double C3612 = C1008 * C2700;
    const double C20152 = C47204 * C2700;
    const double C33743 = C23240 * C2700;
    const double C47486 = C47479 + C47480;
    const double C3167 =
        (ae * (2 * C47588 * C47524 + C47588 * (C47524 + C47536 * C47635)) +
         C47423 * (2 * C47631 + C47588 * (C47472 + C47496 * C47635))) /
        C47183;
    const double C3593 =
        (3 * (C47456 + C47472 * C47635) +
         C47588 * (2 * C47631 + C47588 * (C47472 + C47496 * C47635))) /
        C47183;
    const double C47476 = C47467 + C47474;
    const double C2268 =
        (C47423 * C47445 + C47760 * ae + C47863 * C47635) / C47178;
    const double C2274 = (C47445 + C47423 * C47863 + C47861 * ae +
                          (C47459 + C47423 * (C47423 * C47481 + C47528 * ae) +
                           C47423 * C47528 * ae) *
                              C47635) /
                         C47178;
    const double C3164 =
        (2 * C47588 * C47863 +
         C47588 * (C47863 + (C47423 * C47481 + C47528 * ae) * C47635)) /
        C47178;
    const double C47924 = C47443 + C47922;
    const double C18116 = C8908 * C17626;
    const double C1208 = C1001 * C253;
    const double C1185 = C48503 * C253;
    const double C7807 = C48503 * C253;
    const double C11207 = C48132 * C253;
    const double C23407 = C48132 * C253;
    const double C26311 = C26144 * C253;
    const double C2741 = C1001 * C361;
    const double C2718 = C48503 * C361;
    const double C12679 = C48132 * C361;
    const double C15293 = C48503 * C361;
    const double C24895 = C48132 * C361;
    const double C27901 = C26144 * C361;
    const double C1218 = C1000 * C533;
    const double C1195 = C1001 * C533;
    const double C7840 = C48548 * C533;
    const double C9028 = C48122 * C533;
    const double C11213 = C48461 * C533;
    const double C11190 = C48132 * C533;
    const double C23413 = C23233 * C533;
    const double C23390 = C48132 * C533;
    const double C1842 = C1001 * C635;
    const double C6242 = C1000 * C635;
    const double C9892 = C48122 * C635;
    const double C11739 = C48132 * C635;
    const double C12459 = C48461 * C635;
    const double C23939 = C48132 * C635;
    const double C24667 = C23233 * C635;
    const double C39285 = C48548 * C635;
    const double C2751 = C1000 * C886;
    const double C2728 = C1001 * C886;
    const double C10074 = C48122 * C886;
    const double C13795 = C48132 * C886;
    const double C15326 = C48548 * C886;
    const double C18672 = C48461 * C886;
    const double C24901 = C23233 * C886;
    const double C24886 = C48132 * C886;
    const double C3611 = C1001 * C2704;
    const double C17639 = C48122 * C2704;
    const double C19776 = C48132 * C2704;
    const double C20151 = C48461 * C2704;
    const double C26025 = C48132 * C2704;
    const double C33742 = C23233 * C2704;
    const double C47771 = C47769 + C47770;
    const double C2260 = C47423 * C47762 + C47868 * C47635;
    const double C3159 =
        2 * C47588 * C47868 + C47588 * (C47868 + C47423 * C47535 * C47635);
    const double C47870 = C47866 + C47867;
    const double C1669 = C1008 * C1167;
    const double C11222 = C47204 * C1167;
    const double C23422 = C23240 * C1167;
    const double C1855 = C1008 * C1377;
    const double C12468 = C47204 * C1377;
    const double C29373 = C23240 * C1377;
    const double C1663 = C1008 * C1160;
    const double C11218 = C47204 * C1160;
    const double C23418 = C23240 * C1160;
    const double C1849 = C1008 * C1370;
    const double C12464 = C47204 * C1370;
    const double C29369 = C23240 * C1370;
    const double C3606 = C1008 * C2693;
    const double C20148 = C47204 * C2693;
    const double C33739 = C23240 * C2693;
    const double C1647 =
        (3 * (C47445 + C47423 * C47863 + C47861 * ae) +
         C47423 * (2 * C47863 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47528 * ae) +
                             C47423 * C47528 * ae) +
                   C47864 * ae) +
         (2 * C47861 + C47423 * C47864) * ae) /
        C47178;
    const double C1827 =
        (C47588 * (2 * C47863 +
                   C47423 * (C47459 + C47423 * (C47423 * C47481 + C47528 * ae) +
                             C47423 * C47528 * ae) +
                   C47864 * ae)) /
        C47178;
    const double C1641 = 3 * (C47760 + C47518 * C47610) +
                         C47423 * (2 * C47861 + C47423 * C47864);
    const double C1821 = C47588 * (2 * C47861 + C47423 * C47864);
    const double C2262 = C47760 + C47518 * C47610 + C47864 * C47635;
    const double C10051 =
        2 * C47588 * C47864 + C47588 * (C47864 + C47935 * C47635);
    const double C19219 = C47204 * C3158;
    const double C21118 = C8908 * C3158;
    const double C25464 = C23240 * C3158;
    const double C47937 = C47423 * C47933;
    const double C17539 =
        (3 * (C47863 + C47933 * C47635) +
         C47588 * (2 * C47588 * C47933 +
                   C47588 * (C47933 + (C47423 * C47424 * C47493 + C47571 * ae) *
                                          C47635))) /
        C47178;
    const double C17624 =
        4 * (2 * C47588 * C47518 + C47588 * C48103) +
        C47588 * (3 * C48103 + C47588 * (2 * C47588 * C47528 +
                                         C47588 * (C47528 + C47571 * C47635)));
    const double C47540 = C47520 + C47538;
    const double C47620 = C47524 + C47618;
    const double C47673 = 2 * C47667;
    const double C47671 = ae * C47667;
    const double C47689 = ae * C47687;
    const double C47997 = C47524 + C47996;
    const double C47925 = C47921 + C47923;
    const double C10505 = C8908 * C10050;
    const double C17869 =
        4 * (2 * C47588 * C47916 + C47588 * C48106) +
        C47588 * (3 * C48106 +
                  C47588 * (2 * C47588 * C47951 +
                            C47588 * (C47951 + C47423 * C47529 * C47635)));
    const double C47961 = C47453 + C47959;
    const double C48006 = C47918 + C48005;
    const double C17876 = C8908 * C10913;
    const double C48113 = C48110 + C48112;
    const double C47558 = C47514 + C47556;
    const double C47619 = C47616 + C47617;
    const double C2280 =
        (C47456 + C47472 * C47635 + ae * (C47615 + C47423 * C47536 * C47635) +
         C47423 * (ae * (C47524 + C47536 * C47635) +
                   C47423 * (C47472 + C47496 * C47635))) /
        C47183;
    const double C2265 = (C47423 * C47554 + C47615 * C47635) / C47178;
    const double C3161 =
        (2 * C47588 * C47615 + C47588 * (C47615 + C47667 * C47635)) / C47178;
    const double C17538 =
        (3 * (C47615 + C47667 * C47635) +
         C47588 * (2 * C47588 * C47667 +
                   C47588 * (C47667 + C47423 * C47577 * C47635))) /
        C47178;
    const double C1668 = C1001 * C1171;
    const double C9032 = C48122 * C1171;
    const double C11221 = C48461 * C1171;
    const double C11198 = C48132 * C1171;
    const double C23421 = C23233 * C1171;
    const double C23398 = C48132 * C1171;
    const double C1854 = C1001 * C1381;
    const double C9896 = C48122 * C1381;
    const double C11747 = C48132 * C1381;
    const double C12467 = C48461 * C1381;
    const double C23947 = C48132 * C1381;
    const double C29372 = C23233 * C1381;
    const double C3179 = C1001 * C2277;
    const double C9900 = C48122 * C2277;
    const double C13239 = C48132 * C2277;
    const double C18470 = C48461 * C2277;
    const double C24675 = C23233 * C2277;
    const double C24660 = C48132 * C2277;
    const double C1662 = C1001 * C1163;
    const double C9030 = C48122 * C1163;
    const double C11217 = C48461 * C1163;
    const double C11194 = C48132 * C1163;
    const double C23417 = C23233 * C1163;
    const double C23394 = C48132 * C1163;
    const double C1848 = C1001 * C1373;
    const double C9894 = C48122 * C1373;
    const double C11743 = C48132 * C1373;
    const double C12463 = C48461 * C1373;
    const double C23943 = C48132 * C1373;
    const double C29368 = C23233 * C1373;
    const double C3605 = C1001 * C2696;
    const double C17637 = C48122 * C2696;
    const double C19772 = C48132 * C2696;
    const double C20147 = C48461 * C2696;
    const double C26021 = C48132 * C2696;
    const double C33738 = C23233 * C2696;
    const double C17641 = C48122 * C3587;
    const double C20879 = C48132 * C3587;
    const double C34470 = C48132 * C3587;
    const double C9019 = C48122 * C1649;
    const double C11595 = C48461 * C1649;
    const double C23795 = C23233 * C1649;
    const double C9382 = C48122 * C1829;
    const double C11753 = C48461 * C1829;
    const double C23953 = C23233 * C1829;
    const double C10338 = C48122 * C9618;
    const double C9017 = C48122 * C1643;
    const double C11591 = C48461 * C1643;
    const double C23791 = C23233 * C1643;
    const double C9380 = C48122 * C1823;
    const double C11749 = C48461 * C1823;
    const double C23949 = C23233 * C1823;
    const double C9885 = C48122 * C2270;
    const double C13241 = C48461 * C2270;
    const double C25245 = C23233 * C2270;
    const double C10506 = C48122 * C10052;
    const double C47700 = C47693 + C47694;
    const double C47664 = C47661 + C47662;
    const double C18115 = C48122 * C17625;
    const double C47501 = C47489 + C47499;
    const double C47500 = C47491 + C47498;
    const double C47672 = C47668 + C47669;
    const double C47690 = C47423 * C47688;
    const double C47738 = C47472 + C47737;
    const double C47708 = C47705 + C47706;
    const double C47723 = C47423 * C47722;
    const double C47735 = C47733 + C47734;
    const double C47744 = C47742 + C47743;
    const double C10508 = C48122 * C10056;
    const double C47579 = C47530 + C47578;
    const double C47674 = C47536 + C47670;
    const double C47709 = C47703 + C47707;
    const double C137 = (4 * (2 * C47445 + C47424 * C47457) +
                         C47424 * (3 * C47457 + C47424 * C47477)) /
                        C47178;
    const double C356 = (C47588 * (3 * C47457 + C47424 * C47477)) / C47178;
    const double C883 =
        (2 * C47445 + C47424 * C47457 + C47477 * C47635) / C47178;
    const double C18105 =
        (5 * (3 * C47994 + C47588 * C48017) +
         C47588 * (4 * C48017 +
                   C47588 * (3 * C48015 +
                             C47588 * (2 * C47588 * C47469 +
                                       C47588 * (C47469 + C47493 * C47635))))) /
        C47178;
    const double C47573 = C47539 * be;
    const double C47775 = C47424 * C47539;
    const double C1642 = 3 * (C47762 + C47523 * C47610) +
                         C47423 * (2 * C47868 + C47423 * C47871);
    const double C1822 = C47588 * (2 * C47868 + C47423 * C47871);
    const double C2263 = C47762 + C47523 * C47610 + C47871 * C47635;
    const double C47940 = C47936 + C47938;
    const double C47964 = C47423 * C47962;
    const double C9124 =
        (3 * (C47629 + ae * C47588 * C47653 + C47423 * C47685) +
         ae * C47588 * C47665 +
         C47423 * (2 * C47685 + ae * C47588 * C47660 +
                   C47423 * (C47682 + ae * C47588 * C47423 * C47530 +
                             C47423 * (ae * C47588 * C47530 +
                                       C47423 * C47588 * C47492)))) /
        C47183;
    const double C8998 = (4 * (2 * C47607 + C47423 * C47613) +
                          C47423 * (3 * C47613 + C47423 * C47665)) /
                         C47178;
    const double C9120 = (C47588 * (3 * C47613 + C47423 * C47665)) / C47178;
    const double C9614 =
        (2 * C47607 + C47423 * C47613 + C47665 * C47635) / C47178;
    const double C18104 =
        (5 * (3 * C47991 + C47588 * C48010) +
         C47588 * (4 * C48010 +
                   C47588 * (3 * C47731 +
                             C47588 * (2 * C47716 +
                                       C47588 * (C47530 + C47574 * C47635))))) /
        C47178;
    const double C48322 = C48317 - C48321;
    const double C48541 = C48518 / C47178;
    const double C48329 = C48325 - C48328;
    const double C48555 = C48545 / C47184;
    const double C47224 = C47222 / C47178;
    const double C47212 = C47208 + C48132;
    const double C47239 = C47236 - C47238;
    const double C7646 = C47236 + (0 * ae) / C47178;
    const double C47211 = C48122 - C47207;
    const double C9278 = C9015 - C9016;
    const double C9277 = C9013 - C9014;
    const double C9276 = C9011 - C9012;
    const double C9275 = C9009 - C9010;
    const double C10332 = C9378 - C9377;
    const double C10496 = C9377 - C9378;
    const double C10331 = C9376 - C9375;
    const double C10495 = C9375 - C9376;
    const double C10494 = C9373 - C9374;
    const double C10490 = C9374 - C9373;
    const double C10493 = C9371 - C9372;
    const double C10489 = C9372 - C9371;
    const double C10497 = C9882 - C9881;
    const double C10491 = C9881 - C9882;
    const double C10920 = C10065 - C10066;
    const double C10919 = C10063 - C10064;
    const double C21612 = C10501 - C10502;
    const double C21610 = C10502 - C10501;
    const double C18111 = C10928 - C10927;
    const double C18110 = C10926 - C10925;
    const double C18113 = C17634 - C17635;
    const double C18112 = C17632 - C17633;
    const double C26344 = C48127 * C533;
    const double C26338 = C48127 * C523;
    const double C26332 = C48127 * C252;
    const double C26326 = C48127 * C240;
    const double C26319 = C48127 * C532;
    const double C26313 = C48127 * C522;
    const double C26307 = C48127 * C251;
    const double C26301 = C48127 * C239;
    const double C26764 = C48127 * C1170;
    const double C26758 = C48127 * C1162;
    const double C26938 = C48127 * C1380;
    const double C26932 = C48127 * C1372;
    const double C26926 = C48127 * C634;
    const double C26920 = C48127 * C624;
    const double C27692 = C48127 * C635;
    const double C27686 = C48127 * C625;
    const double C27910 = C48127 * C360;
    const double C27904 = C48127 * C348;
    const double C27897 = C48127 * C359;
    const double C27891 = C48127 * C347;
    const double C28468 = C48127 * C2276;
    const double C28462 = C48127 * C2264;
    const double C29022 = C48127 * C885;
    const double C29016 = C48127 * C875;
    const double C36495 = C48127 * C886;
    const double C36489 = C48127 * C876;
    const double C37317 = C48127 * C2703;
    const double C37311 = C48127 * C2695;
    const double C48460 = C48127 * C48117;
    const double C48502 = C48465 + C48127;
    const double C7830 = C48535 * C253;
    const double C7824 = C48535 * C241;
    const double C7817 = C48535 * C533;
    const double C7811 = C48535 * C523;
    const double C7805 = C48535 * C252;
    const double C7799 = C48535 * C240;
    const double C8262 = C48535 * C1171;
    const double C8256 = C48535 * C1163;
    const double C8436 = C48535 * C1381;
    const double C8430 = C48535 * C1373;
    const double C8424 = C48535 * C635;
    const double C8418 = C48535 * C625;
    const double C15316 = C48535 * C361;
    const double C15310 = C48535 * C349;
    const double C15303 = C48535 * C886;
    const double C15297 = C48535 * C876;
    const double C15291 = C48535 * C360;
    const double C15285 = C48535 * C348;
    const double C15742 = C48535 * C2277;
    const double C16162 = C48535 * C2704;
    const double C16156 = C48535 * C2696;
    const double C26334 = C48135 * C253;
    const double C26328 = C48135 * C241;
    const double C26321 = C48135 * C533;
    const double C26315 = C48135 * C523;
    const double C26309 = C48135 * C252;
    const double C26303 = C48135 * C240;
    const double C26766 = C48135 * C1171;
    const double C26760 = C48135 * C1163;
    const double C26940 = C48135 * C1381;
    const double C26934 = C48135 * C1373;
    const double C26928 = C48135 * C635;
    const double C26922 = C48135 * C625;
    const double C27912 = C48135 * C361;
    const double C27906 = C48135 * C349;
    const double C27899 = C48135 * C360;
    const double C27893 = C48135 * C348;
    const double C28470 = C48135 * C2277;
    const double C29024 = C48135 * C886;
    const double C29018 = C48135 * C876;
    const double C37319 = C48135 * C2704;
    const double C37313 = C48135 * C2696;
    const double C48468 = C48135 / C47184;
    const double C48464 = C48135 * C48117;
    const double C3718 = C48549 - (C48127 * C48118) / C47178;
    const double C47352 = C47350 / C47178;
    const double C47325 = C48227 - C47321;
    const double C47334 = C47330 + C48286;
    const double C47362 = C47359 - C47361;
    const double C48486 = C48282 * C48276;
    const double C48524 = C48488 + C48282;
    const double C48490 = C48289 / C47184;
    const double C48487 = C48289 * C48276;
    const double C11035 = C48553 - (C48282 * C48278) / C47178;
    const double C11583 = C11186 - C11187;
    const double C23783 = C23386 - C23387;
    const double C13225 = C11734 - C11735;
    const double C13221 = C11735 - C11734;
    const double C25455 = C23934 - C23935;
    const double C25447 = C23935 - C23934;
    const double C19764 = C13791 - C13790;
    const double C26013 = C24882 - C24883;
    const double C10498 = C9884 - C9883;
    const double C10492 = C9883 - C9884;
    const double C10334 = C9887 - C9888;
    const double C10500 = C9888 - C9887;
    const double C21613 = C10503 - C10504;
    const double C21611 = C10504 - C10503;
    const double C19224 = C48132 * C3167;
    const double C21121 = C48122 * C3167;
    const double C25469 = C48132 * C3167;
    const double C17643 = C48122 * C3593;
    const double C20883 = C48132 * C3593;
    const double C34474 = C48132 * C3593;
    const double C145 =
        (4 * (2 * C47456 + be * C47457 + C47424 * C47476) +
         be * (3 * C47457 + C47424 * C47477) +
         C47424 * (3 * C47476 + be * C47477 +
                   C47424 * (2 * C47472 + be * C47473 +
                             C47424 * (C47468 + be * C47424 * C47469 +
                                       C47424 * (be * C47469 +
                                                 C47424 * std::pow(C47428, 7) *
                                                     bs[7] * C47435))))) /
        C47183;
    const double C254 =
        (ae * (2 * (C47424 * C47514 + C47510 * be) +
               C47424 *
                   (C47514 +
                    C47424 * (C47424 * C47447 * C47448 * C47509 + C47513 * be) +
                    C47424 * C47513 * be) +
               (C47510 + C47513 * C47449) * be) +
         C47423 * (2 * C47456 + be * C47457 + C47424 * C47476)) /
        C47183;
    const double C362 =
        ((zP - zQ) * (2 * C47456 + be * C47457 + C47424 * C47476)) / C47183;
    const double C887 = (C47442 + be * C47445 + C47424 * C47456 +
                         C47476 * std::pow(C47588, 2)) /
                        C47183;
    const double C9899 = C8908 * C2268;
    const double C13238 = C47204 * C2268;
    const double C24661 = C23240 * C2268;
    const double C9903 = C8908 * C2274;
    const double C13246 = C47204 * C2274;
    const double C25250 = C23240 * C2274;
    const double C19223 = C47204 * C3164;
    const double C21120 = C8908 * C3164;
    const double C25468 = C23240 * C3164;
    const double C47926 = C47924 + C47919;
    const double C11585 = C11190 - C11191;
    const double C23785 = C23390 - C23391;
    const double C13227 = C11738 - C11739;
    const double C13223 = C11739 - C11738;
    const double C25457 = C23938 - C23939;
    const double C25449 = C23939 - C23938;
    const double C19766 = C13795 - C13794;
    const double C26015 = C24886 - C24887;
    const double C20875 = C19776 - C19775;
    const double C34466 = C26025 - C26024;
    const double C248 = (C47423 * (3 * C47457 + C47424 * C47477) +
                         (3 * C47762 + C47424 * C47771) * ae) /
                        C47178;
    const double C530 =
        (2 * C47445 + C47424 * C47457 +
         C47423 * (C47423 * C47477 + C47771 * ae) + C47423 * C47771 * ae) /
        C47178;
    const double C632 = (C47588 * (C47423 * C47477 + C47771 * ae)) / C47178;
    const double C124 = 4 * (2 * C47760 + C47424 * C47762) +
                        C47424 * (3 * C47762 + C47424 * C47771);
    const double C237 = C47423 * (3 * C47762 + C47424 * C47771);
    const double C345 = C47588 * (3 * C47762 + C47424 * C47771);
    const double C520 = 2 * C47760 + C47424 * C47762 + C47771 * C47610;
    const double C622 = C47588 * C47423 * C47771;
    const double C873 = 2 * C47760 + C47424 * C47762 + C47771 * C47635;
    const double C1161 =
        2 * C47423 * C47771 + C47423 * (C47771 + C47539 * C47610);
    const double C1371 = C47588 * (C47771 + C47539 * C47610);
    const double C2541 = C47423 * C47771 + C47423 * C47539 * C47635;
    const double C2694 =
        2 * C47588 * C47771 + C47588 * (C47771 + C47539 * C47635);
    const double C3174 = C1008 * C2260;
    const double C18467 = C47204 * C2260;
    const double C24672 = C23240 * C2260;
    const double C1648 =
        (3 * (C47457 + C47423 * C47870 + C47868 * ae) +
         C47423 * (2 * C47870 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47535 * ae) +
                             C47423 * C47535 * ae) +
                   C47871 * ae) +
         (2 * C47868 + C47423 * C47871) * ae) /
        C47178;
    const double C1828 =
        (C47588 * (2 * C47870 +
                   C47423 * (C47473 + C47423 * (C47423 * C47497 + C47535 * ae) +
                             C47423 * C47535 * ae) +
                   C47871 * ae)) /
        C47178;
    const double C2269 =
        (C47423 * C47457 + C47762 * ae + C47870 * C47635) / C47178;
    const double C2275 = (C47457 + C47423 * C47870 + C47868 * ae +
                          (C47473 + C47423 * (C47423 * C47497 + C47535 * ae) +
                           C47423 * C47535 * ae) *
                              C47635) /
                         C47178;
    const double C3165 =
        (2 * C47588 * C47870 +
         C47588 * (C47870 + (C47423 * C47497 + C47535 * ae) * C47635)) /
        C47178;
    const double C9035 = C8908 * C1647;
    const double C11596 = C47204 * C1647;
    const double C23796 = C23240 * C1647;
    const double C11754 = C47204 * C1827;
    const double C14026 = C8908 * C1827;
    const double C23954 = C23240 * C1827;
    const double C9033 = C8908 * C1641;
    const double C11592 = C47204 * C1641;
    const double C23792 = C23240 * C1641;
    const double C11750 = C47204 * C1821;
    const double C14024 = C8908 * C1821;
    const double C23950 = C23240 * C1821;
    const double C9901 = C8908 * C2262;
    const double C13242 = C47204 * C2262;
    const double C25246 = C23240 * C2262;
    const double C47939 = C47459 + C47937;
    const double C47541 = C47540 + C47531;
    const double C1830 =
        (2 * (ae * C47588 * C47524 + C47423 * C47631) + ae * C47588 * C47620 +
         C47423 *
             (C47631 + ae * C47588 * C47423 * C47536 +
              C47423 * (ae * C47588 * C47536 + C47423 * C47588 * C47496))) /
        C47183;
    const double C1644 = (3 * (C47554 + C47524 * C47610) +
                          C47423 * (2 * C47615 + C47423 * C47620)) /
                         C47178;
    const double C1824 = (C47588 * (2 * C47615 + C47423 * C47620)) / C47178;
    const double C2271 = (C47554 + C47524 * C47610 + C47620 * C47635) / C47178;
    const double C47675 = C47472 + C47671;
    const double C17627 =
        (4 * (2 * C47588 * C47524 + C47588 * C47997) +
         C47588 *
             (3 * C47997 +
              C47588 * (2 * C47687 + C47588 * (C47536 + C47577 * C47635)))) /
        C47178;
    const double C8996 = 4 * (2 * C47854 + C47423 * C47857) +
                         C47423 * (3 * C47857 + C47423 * C47925);
    const double C9118 = C47588 * (3 * C47857 + C47423 * C47925);
    const double C9612 = 2 * C47854 + C47423 * C47857 + C47925 * C47635;
    const double C10484 =
        2 * C47588 * C47925 + C47588 * (C47925 + C47962 * C47635);
    const double C47963 = C47961 + C47956;
    const double C17871 =
        (4 * (2 * C47588 * C47918 + C47588 * C48006) +
         C47588 * (3 * C48006 + C47588 * (2 * C47588 * C47955 +
                                          C47588 * (C47955 + (C47423 * C47493 +
                                                              C47529 * ae) *
                                                                 C47635)))) /
        C47178;
    const double C18103 =
        5 * (3 * C48100 + C47588 * C48113) +
        C47588 * (4 * C48113 +
                  C47588 * (3 * C48111 +
                            C47588 * (2 * C47588 * C47519 +
                                      C47588 * (C47519 + C47529 * C47635))));
    const double C47559 = C47558 + C47557;
    const double C1650 =
        (3 * (C47456 + ae * C47615 + C47423 * C47619) +
         ae * (2 * C47615 + C47423 * C47620) +
         C47423 * (2 * C47619 + ae * C47620 +
                   C47423 * (C47472 + ae * C47423 * C47536 +
                             C47423 * (ae * C47536 + C47423 * C47496)))) /
        C47183;
    const double C9904 = C48122 * C2280;
    const double C13247 = C48132 * C2280;
    const double C25251 = C48132 * C2280;
    const double C3173 = C1001 * C2265;
    const double C9898 = C48122 * C2265;
    const double C13235 = C48132 * C2265;
    const double C15736 = C48535 * C2265;
    const double C18466 = C48461 * C2265;
    const double C24671 = C23233 * C2265;
    const double C24656 = C48132 * C2265;
    const double C28464 = C48135 * C2265;
    const double C19220 = C48132 * C3161;
    const double C21119 = C48122 * C3161;
    const double C25465 = C48132 * C3161;
    const double C11589 = C11198 - C11199;
    const double C23789 = C23398 - C23399;
    const double C13023 = C11747 - C11746;
    const double C13231 = C11746 - C11747;
    const double C29912 = C23947 - C23946;
    const double C30112 = C23946 - C23947;
    const double C11587 = C11194 - C11195;
    const double C23787 = C23394 - C23395;
    const double C13021 = C11743 - C11742;
    const double C13229 = C11742 - C11743;
    const double C29910 = C23943 - C23942;
    const double C30110 = C23942 - C23943;
    const double C20873 = C19772 - C19771;
    const double C34464 = C26021 - C26020;
    const double C9280 = C9019 - C9020;
    const double C14387 = C9382 - C9381;
    const double C14519 = C9381 - C9382;
    const double C9279 = C9017 - C9018;
    const double C14386 = C9380 - C9379;
    const double C14518 = C9379 - C9380;
    const double C10333 = C9885 - C9886;
    const double C10499 = C9886 - C9885;
    const double C9002 =
        (4 * (2 * C47611 + ae * C47613 + C47423 * C47664) +
         ae * (3 * C47613 + C47423 * C47665) +
         C47423 *
             (3 * C47664 + ae * C47665 +
              C47423 * (2 * C47658 + ae * C47660 +
                        C47423 * (C47468 + ae * C47423 * C47530 +
                                  C47423 * (ae * C47530 + C47423 * C47492))))) /
        C47183;
    const double C47503 = C47424 * C47501;
    const double C1169 =
        (2 * (C47423 * C47477 + C47771 * ae) +
         C47423 * (C47477 + C47423 * (C47423 * C47501 + C47539 * ae) +
                   C47423 * C47539 * ae) +
         (C47771 + C47539 * C47610) * ae) /
        C47178;
    const double C1379 =
        (C47588 * (C47477 + C47423 * (C47423 * C47501 + C47539 * ae) +
                   C47423 * C47539 * ae)) /
        C47178;
    const double C2543 = (C47423 * C47477 + C47771 * ae +
                          (C47423 * C47501 + C47539 * ae) * C47635) /
                         C47178;
    const double C2702 =
        (2 * C47588 * C47477 + C47588 * (C47477 + C47501 * C47635)) / C47178;
    const double C47502 = C47424 * C47500;
    const double C47624 = C47423 * C47500;
    const double C47633 = C47588 * C47500;
    const double C2705 =
        (2 * C47588 * C47476 + C47588 * (C47476 + C47500 * C47635)) / C47183;
    const double C47676 = C47423 * C47672;
    const double C47691 = C47689 + C47690;
    const double C10057 =
        (2 * C47631 + C47588 * C47738 +
         ae * (2 * C47588 * C47667 +
               C47588 * (C47667 + C47423 * C47577 * C47635)) +
         C47423 * (ae * (2 * C47687 + C47588 * (C47536 + C47577 * C47635)) +
                   C47423 * (2 * C47688 +
                             C47588 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47635)))) /
        C47183;
    const double C17540 =
        (ae * (3 * (C47524 + C47536 * C47635) +
               C47588 * (2 * C47687 + C47588 * (C47536 + C47577 * C47635))) +
         C47423 * (3 * C47738 +
                   C47588 * (2 * C47688 +
                             C47588 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47635)))) /
        C47183;
    const double C17630 =
        (4 * (2 * C47631 + C47588 * C47738) +
         C47588 * (3 * C47738 +
                   C47588 * (2 * C47688 +
                             C47588 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47635)))) /
        C47183;
    const double C47710 = C47423 * C47708;
    const double C47724 = C47721 + C47723;
    const double C10487 =
        (2 * (ae * (2 * C47681 + C47588 * C47731) + C47423 * C47744) +
         ae * (2 * C47588 * C47660 + C47588 * (C47660 + C47704 * C47635)) +
         C47423 *
             (C47744 +
              ae * (2 * C47715 + C47588 * (C47695 + C47423 * C47574 * C47635)) +
              C47423 *
                  (ae * (2 * C47716 + C47588 * (C47530 + C47574 * C47635)) +
                   C47423 * (2 * C47717 +
                             C47588 * (C47492 + std::pow(C47426, 8) * bs[8] *
                                                    C47435 * C47635))))) /
        C47183;
    const double C10916 = (ae * (3 * (C47514 + C47520 * C47635) +
                                 C47588 * (2 * C47681 + C47588 * C47731)) +
                           C47423 * (3 * C47727 + C47588 * C47744)) /
                          C47183;
    const double C10917 =
        (3 * C47727 + C47588 * C47744 +
         ae * (3 * (C47653 + C47695 * C47635) +
               C47588 * (2 * C47715 +
                         C47588 * (C47695 + C47423 * C47574 * C47635))) +
         C47423 * (ae * (3 * C47731 +
                         C47588 * (2 * C47716 +
                                   C47588 * (C47530 + C47574 * C47635))) +
                   C47423 * (3 * C47732 +
                             C47588 * (2 * C47717 +
                                       C47588 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47635))))) /
        C47183;
    const double C17629 = (4 * (2 * C47629 + C47588 * C47727) +
                           C47588 * (3 * C47727 + C47588 * C47744)) /
                          C47183;
    const double C17872 =
        (ae * (4 * (2 * C47681 + C47588 * C47731) +
               C47588 * (3 * C47731 +
                         C47588 * (2 * C47716 +
                                   C47588 * (C47530 + C47574 * C47635)))) +
         C47423 * (4 * C47744 +
                   C47588 * (3 * C47732 +
                             C47588 * (2 * C47717 +
                                       C47588 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47635))))) /
        C47183;
    const double C18106 =
        (5 * (3 * C47727 + C47588 * C47744) +
         C47588 * (4 * C47744 +
                   C47588 * (3 * C47732 +
                             C47588 * (2 * C47717 +
                                       C47588 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47635))))) /
        C47183;
    const double C47580 = C47579 + C47575;
    const double C47677 = C47423 * C47674;
    const double C9879 =
        (2 * (ae * (C47524 + C47536 * C47635) + C47423 * C47738) +
         ae * (C47620 + C47674 * C47635) +
         C47423 * (C47738 + ae * (C47667 + C47423 * C47577 * C47635) +
                   C47423 * (ae * (C47536 + C47577 * C47635) +
                             C47423 * (C47496 + (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435) *
                                                    C47635)))) /
        C47183;
    const double C10054 =
        (2 * C47588 * C47620 + C47588 * (C47620 + C47674 * C47635)) / C47178;
    const double C47711 = C47423 * C47709;
    const double C9619 =
        (3 * (C47727 + ae * (C47653 + C47695 * C47635) + C47423 * C47735) +
         ae * (C47665 + C47709 * C47635) +
         C47423 * (2 * C47735 + ae * (C47660 + C47704 * C47635) +
                   C47423 * (C47732 + ae * (C47695 + C47423 * C47574 * C47635) +
                             C47423 * (ae * (C47530 + C47574 * C47635) +
                                       C47423 * (C47492 + std::pow(C47426, 8) *
                                                              bs[8] * C47435 *
                                                              C47635))))) /
        C47183;
    const double C10485 =
        (2 * C47588 * C47665 + C47588 * (C47665 + C47709 * C47635)) / C47178;
    const double C2754 = C1008 * C883;
    const double C47776 = C47774 + C47775;
    const double C8997 = 4 * (2 * C47861 + C47423 * C47864) +
                         C47423 * (3 * C47864 + C47423 * C47940);
    const double C9119 = C47588 * (3 * C47864 + C47423 * C47940);
    const double C9876 = 2 * C47861 + C47423 * C47864 + C47940 * C47635;
    const double C47966 = C47954 + C47964;
    const double C9386 = C48122 * C9124;
    const double C9282 = C48122 * C8998;
    const double C9384 = C48122 * C9120;
    const double C10336 = C48122 * C9614;
    const double C48492 = C48322 * C48316;
    const double C48530 = C48494 + C48322;
    const double C48496 = C48329 / C47184;
    const double C48493 = C48329 * C48316;
    const double C19881 = C48555 - (C48322 * C48318) / C47178;
    const double C47227 = C47218 - C47224;
    const double C47217 = C47212 * be;
    const double C26335 = C47239 * C247;
    const double C26329 = C47239 * C236;
    const double C26324 = C47239 * C529;
    const double C26318 = C47239 * C519;
    const double C26312 = C47239 * C246;
    const double C26306 = C47239 * C235;
    const double C26767 = C47239 * C1167;
    const double C26761 = C47239 * C1160;
    const double C26941 = C47239 * C1377;
    const double C26935 = C47239 * C1370;
    const double C26929 = C47239 * C631;
    const double C26923 = C47239 * C621;
    const double C27913 = C47239 * C355;
    const double C27907 = C47239 * C344;
    const double C27902 = C47239 * C354;
    const double C27896 = C47239 * C343;
    const double C28465 = C47239 * C2260;
    const double C29025 = C47239 * C882;
    const double C29019 = C47239 * C872;
    const double C36498 = C47239 * C883;
    const double C37320 = C47239 * C2700;
    const double C37314 = C47239 * C2693;
    const double C117 =
        (C47239 / C47184 + (0 * ae) / C47178) / C47184 - (0 * be) / C47178;
    const double C3727 = C47239 / C47184 - (0 * be) / C47178;
    const double C22092 = C47239 / C47184 + (0 * ae) / C47178;
    const double C7831 = C7646 * C247;
    const double C7825 = C7646 * C236;
    const double C7820 = C7646 * C529;
    const double C7814 = C7646 * C519;
    const double C7808 = C7646 * C246;
    const double C7802 = C7646 * C235;
    const double C8263 = C7646 * C1167;
    const double C8257 = C7646 * C1160;
    const double C8437 = C7646 * C1377;
    const double C8431 = C7646 * C1370;
    const double C8425 = C7646 * C631;
    const double C8419 = C7646 * C621;
    const double C15329 = C7646 * C883;
    const double C15317 = C7646 * C355;
    const double C15311 = C7646 * C344;
    const double C15306 = C7646 * C882;
    const double C15300 = C7646 * C872;
    const double C15294 = C7646 * C354;
    const double C15288 = C7646 * C343;
    const double C15737 = C7646 * C2260;
    const double C16163 = C7646 * C2700;
    const double C16157 = C7646 * C2693;
    const double C47216 = C47211 * ae;
    const double C1006 =
        ((-C47179 / C47178) / C47184 - (C47197 * be) / C47178) / C47184 -
        ((C47176 * ((-C47186) / C47184 - (C47211 * be) / C47178) + C23233) *
         be) /
            C47178 +
        (-C47198 / C47178) / C47184 - (0 * be) / C47178;
    const double C1007 =
        ((-C47186) / C47184 - (C47211 * be) / C47178) / C47184 -
        ((C47176 * ((-C47198 / C47178) / C47184 - (0 * be) / C47178) + C48132) *
         be) /
            C47178;
    const double C23239 = (-C47186) / C47184 - (C47211 * be) / C47178;
    const double C10921 = C10491 * C7648;
    const double C17380 = C10491 * C1010;
    const double C21974 = C10491 * C3729;
    const double C42722 = C10491 * C22094;
    const double C10930 = C10920 * C7641;
    const double C17379 = C10920 * C48551;
    const double C18109 = C10920 * C48227;
    const double C21973 = C10920 * C48483;
    const double C42721 = C10920 * C22087;
    const double C47152 = C10920 * C48282;
    const double C10929 = C10919 * C7647;
    const double C17378 = C10919 * C1009;
    const double C18108 = C10919 * C118;
    const double C21972 = C10919 * C3728;
    const double C21978 = C21610 * C3729;
    const double C42726 = C21610 * C22094;
    const double C18120 = C18111 * C48227;
    const double C21977 = C18111 * C48483;
    const double C42725 = C18111 * C22087;
    const double C18119 = C18110 * C118;
    const double C21976 = C18110 * C3728;
    const double C18122 = C18113 * C48227;
    const double C18121 = C18112 * C118;
    const double C48498 = C48460 / C47178;
    const double C48536 = C48502 / C47184;
    const double C48537 = C48504 + C48468;
    const double C3720 = C48468 - C48133 / C47190;
    const double C48501 = C48464 / C47178;
    const double C3886 = C3718 * C252;
    const double C3878 = C3718 * C240;
    const double C3869 = C3718 * C251;
    const double C3861 = C3718 * C239;
    const double C4260 = C3718 * C532;
    const double C4252 = C3718 * C522;
    const double C4406 = C3718 * C634;
    const double C4398 = C3718 * C624;
    const double C5156 = C3718 * C360;
    const double C5148 = C3718 * C348;
    const double C5139 = C3718 * C359;
    const double C5131 = C3718 * C347;
    const double C5888 = C3718 * C885;
    const double C5880 = C3718 * C875;
    const double C47354 = C47349 - C47352;
    const double C47329 = C47325 * ae;
    const double C22093 = (-C47311) / C47184 - (C47325 * be) / C47178;
    const double C47338 = C47334 * be;
    const double C8913 =
        (C47362 / C47184 + (0 * ae) / C47178) / C47184 - (0 * be) / C47178;
    const double C11044 = C47362 / C47184 - (0 * be) / C47178;
    const double C23244 = C47362 / C47184 + (0 * ae) / C47178;
    const double C48521 = C48486 / C47178;
    const double C48543 = C48524 / C47184;
    const double C48544 = C48525 + C48490;
    const double C11037 = C48490 - C48287 / C47190;
    const double C48523 = C48487 / C47178;
    const double C10922 = C10492 * C7642;
    const double C17381 = C10492 * C48539;
    const double C21975 = C10492 * C48286;
    const double C42723 = C10492 * C48286;
    const double C47154 = C10492 * C48289;
    const double C10924 = C10334 * C48516;
    const double C17383 = C10334 * C48516;
    const double C47156 = C10334 * C26147;
    const double C21979 = C21611 * C48286;
    const double C42727 = C21611 * C48286;
    const double C1210 = C48503 * C254;
    const double C3875 = C48520 * C254;
    const double C7832 = C48503 * C254;
    const double C22240 = C48520 * C254;
    const double C26336 = C26144 * C254;
    const double C2743 = C48503 * C362;
    const double C5145 = C48520 * C362;
    const double C15318 = C48503 * C362;
    const double C27914 = C26144 * C362;
    const double C31023 = C48520 * C362;
    const double C2753 = C1001 * C887;
    const double C2730 = C48503 * C887;
    const double C15328 = C48535 * C887;
    const double C15305 = C48503 * C887;
    const double C18674 = C48132 * C887;
    const double C24903 = C48132 * C887;
    const double C29026 = C26144 * C887;
    const double C36497 = C48135 * C887;
    const double C19216 = C13238 - C13239;
    const double C19212 = C13239 - C13238;
    const double C25461 = C24661 - C24660;
    const double C25453 = C24660 - C24661;
    const double C8999 =
        (4 * (2 * C47856 + C47423 * C47926 + C47857 * ae) +
         C47423 *
             (3 * C47926 +
              C47423 *
                  (2 * C47918 +
                   C47423 * (C47453 + C47423 * (C47423 * C47469 + C47519 * ae) +
                             C47423 * C47519 * ae) +
                   C47920 * ae) +
              C47925 * ae) +
         (3 * C47857 + C47423 * C47925) * ae) /
        C47178;
    const double C9121 =
        (C47588 *
         (3 * C47926 +
          C47423 *
              (2 * C47918 +
               C47423 * (C47453 + C47423 * (C47423 * C47469 + C47519 * ae) +
                         C47423 * C47519 * ae) +
               C47920 * ae) +
          C47925 * ae)) /
        C47178;
    const double C1221 = C1008 * C530;
    const double C7843 = C7646 * C530;
    const double C26347 = C47239 * C530;
    const double C6245 = C1008 * C632;
    const double C27695 = C47239 * C632;
    const double C39288 = C7646 * C632;
    const double C1215 = C1008 * C520;
    const double C7837 = C7646 * C520;
    const double C26341 = C47239 * C520;
    const double C6239 = C1008 * C622;
    const double C27689 = C47239 * C622;
    const double C39282 = C7646 * C622;
    const double C2748 = C1008 * C873;
    const double C15323 = C7646 * C873;
    const double C36492 = C47239 * C873;
    const double C3180 = C1008 * C2269;
    const double C15743 = C7646 * C2269;
    const double C18471 = C47204 * C2269;
    const double C24676 = C23240 * C2269;
    const double C28471 = C47239 * C2269;
    const double C47941 = C47939 + C47934;
    const double C47562 = C47424 * C47541;
    const double C47567 = 3 * C47541;
    const double C47623 = ae * C47541;
    const double C47622 = C47423 * C47541;
    const double C1382 =
        (C47588 * C47476 + ae * C47588 * C47423 * C47541 +
         C47423 * (ae * C47588 * C47541 + C47423 * C47588 * C47500)) /
        C47183;
    const double C11755 = C48132 * C1830;
    const double C14027 = C48122 * C1830;
    const double C23955 = C48132 * C1830;
    const double C9034 = C48122 * C1644;
    const double C11593 = C48132 * C1644;
    const double C23793 = C48132 * C1644;
    const double C11751 = C48132 * C1824;
    const double C14025 = C48122 * C1824;
    const double C23951 = C48132 * C1824;
    const double C9902 = C48122 * C2271;
    const double C13243 = C48132 * C2271;
    const double C25247 = C48132 * C2271;
    const double C9281 = C8908 * C8996;
    const double C9383 = C8908 * C9118;
    const double C10335 = C8908 * C9612;
    const double C47965 = C47423 * C47963;
    const double C10053 =
        (2 * C47588 * C47926 + C47588 * (C47926 + C47963 * C47635)) / C47178;
    const double C10915 =
        (3 * (C47926 + C47963 * C47635) +
         C47588 *
             (2 * C47588 * C47963 +
              C47588 *
                  (C47963 + (C47469 + C47423 * (C47423 * C47493 + C47529 * ae) +
                             C47423 * C47529 * ae) *
                                C47635))) /
        C47178;
    const double C534 =
        (C47442 + be * C47445 + C47424 * C47456 + ae * C47423 * C47559 +
         C47423 * (ae * C47559 + C47423 * C47476)) /
        C47183;
    const double C636 =
        (ae * C47588 * C47559 + C47423 * C47588 * C47476) / C47183;
    const double C1172 = (2 * (ae * C47559 + C47423 * C47476) +
                          ae * (C47559 + C47541 * std::pow(C47423, 2)) +
                          C47423 * (C47476 + ae * C47423 * C47541 +
                                    C47423 * (ae * C47541 + C47423 * C47500))) /
                         C47183;
    const double C2278 = (ae * (C47559 + C47541 * C47635) +
                          C47423 * (C47476 + C47500 * C47635)) /
                         C47183;
    const double C130 = (3 * (C47550 + C47424 * C47554 + C47760 * be) +
                         C47424 * (2 * C47554 + C47424 * C47559 + C47762 * be) +
                         (2 * C47760 + C47424 * C47762) * be) /
                        C47178;
    const double C242 =
        (C47423 * (2 * C47554 + C47424 * C47559 + C47762 * be)) / C47178;
    const double C350 =
        (C47588 * (2 * C47554 + C47424 * C47559 + C47762 * be)) / C47178;
    const double C524 =
        (C47550 + C47424 * C47554 + C47760 * be + C47559 * C47610) / C47178;
    const double C626 = (C47588 * C47423 * C47559) / C47178;
    const double C877 =
        (C47550 + C47424 * C47554 + C47760 * be + C47559 * C47635) / C47178;
    const double C1164 =
        (2 * C47423 * C47559 + C47423 * (C47559 + C47541 * C47610)) / C47178;
    const double C1374 = (C47588 * (C47559 + C47541 * C47610)) / C47178;
    const double C2697 =
        (2 * C47588 * C47559 + C47588 * (C47559 + C47541 * C47635)) / C47178;
    const double C9036 = C48122 * C1650;
    const double C11597 = C48132 * C1650;
    const double C23797 = C48132 * C1650;
    const double C19214 = C13234 - C13235;
    const double C19210 = C13235 - C13234;
    const double C25459 = C24657 - C24656;
    const double C25451 = C24656 - C24657;
    const double C10923 = C10333 * C7649;
    const double C17382 = C10333 * C1011;
    const double C47155 = C10333 * C47362;
    const double C9284 = C48122 * C9002;
    const double C47505 = C47485 + C47503;
    const double C47504 = C47486 + C47502;
    const double C3594 =
        (3 * (C47476 + C47500 * C47635) +
         C47588 * (2 * C47633 +
                   C47588 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47635))) /
        C47183;
    const double C3613 = C48503 * C2705;
    const double C16164 = C48503 * C2705;
    const double C20153 = C48132 * C2705;
    const double C33744 = C48132 * C2705;
    const double C37321 = C26144 * C2705;
    const double C47678 = C47675 + C47676;
    const double C47712 = C47700 + C47710;
    const double C17877 = C48122 * C10916;
    const double C18117 = C48122 * C17629;
    const double C47581 = C47424 * C47580;
    const double C47625 = C47580 * C47610;
    const double C3168 =
        (ae * (2 * C47588 * C47541 + C47588 * (C47541 + C47580 * C47635)) +
         C47423 * (2 * C47633 +
                   C47588 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47635))) /
        C47183;
    const double C3588 =
        (3 * (C47559 + C47541 * C47635) +
         C47588 * (2 * C47588 * C47541 + C47588 * (C47541 + C47580 * C47635))) /
        C47178;
    const double C47679 = C47673 + C47677;
    const double C47713 = C47698 + C47711;
    const double C125 = 5 * (3 * C47762 + C47424 * C47771) +
                        C47424 * (4 * C47771 + C47424 * C47776);
    const double C238 = C47423 * (4 * C47771 + C47424 * C47776);
    const double C346 = C47588 * (4 * C47771 + C47424 * C47776);
    const double C521 = 3 * C47762 + C47424 * C47771 + C47776 * C47610;
    const double C623 = C47588 * C47423 * C47776;
    const double C874 = 3 * C47762 + C47424 * C47771 + C47776 * C47635;
    const double C9270 = 5 * (3 * C47857 + C47423 * C47925) +
                         C47423 * (4 * C47925 + C47423 * C47966);
    const double C9366 = C47588 * (4 * C47925 + C47423 * C47966);
    const double C9613 = 3 * C47857 + C47423 * C47925 + C47966 * C47635;
    const double C48527 = C48492 / C47178;
    const double C48546 = C48530 / C47184;
    const double C48547 = C48531 + C48496;
    const double C19883 = C48496 - C48327 / C47190;
    const double C48529 = C48493 / C47178;
    const double C47221 = C47217 / C47178;
    const double C3891 = C3727 * C248;
    const double C3883 = C3727 * C237;
    const double C3876 = C3727 * C247;
    const double C3868 = C3727 * C236;
    const double C4265 = C3727 * C530;
    const double C4257 = C3727 * C520;
    const double C4411 = C3727 * C632;
    const double C4403 = C3727 * C622;
    const double C5161 = C3727 * C356;
    const double C5153 = C3727 * C345;
    const double C5146 = C3727 * C355;
    const double C5138 = C3727 * C344;
    const double C5893 = C3727 * C883;
    const double C5885 = C3727 * C873;
    const double C22256 = C22092 * C248;
    const double C22248 = C22092 * C237;
    const double C22241 = C22092 * C247;
    const double C22233 = C22092 * C236;
    const double C22630 = C22092 * C530;
    const double C22622 = C22092 * C520;
    const double C22776 = C22092 * C632;
    const double C22768 = C22092 * C622;
    const double C31039 = C22092 * C356;
    const double C31031 = C22092 * C345;
    const double C31024 = C22092 * C355;
    const double C31016 = C22092 * C344;
    const double C31771 = C22092 * C883;
    const double C31763 = C22092 * C873;
    const double C47220 = C47216 / C47178;
    const double C1217 = C1006 * C528;
    const double C1211 = C1006 * C518;
    const double C1205 = C1006 * C245;
    const double C1199 = C1006 * C234;
    const double C1194 = C1006 * C527;
    const double C1188 = C1006 * C517;
    const double C1182 = C1006 * C244;
    const double C1176 = C1006 * C233;
    const double C1665 = C1006 * C1165;
    const double C1659 = C1006 * C1158;
    const double C1851 = C1006 * C1375;
    const double C1845 = C1006 * C1368;
    const double C1839 = C1006 * C629;
    const double C1833 = C1006 * C619;
    const double C2750 = C1006 * C881;
    const double C2744 = C1006 * C871;
    const double C2738 = C1006 * C353;
    const double C2732 = C1006 * C342;
    const double C2727 = C1006 * C880;
    const double C2721 = C1006 * C870;
    const double C2715 = C1006 * C352;
    const double C2709 = C1006 * C341;
    const double C3176 = C1006 * C2267;
    const double C3170 = C1006 * C2258;
    const double C3608 = C1006 * C2698;
    const double C3602 = C1006 * C2691;
    const double C6241 = C1006 * C630;
    const double C6235 = C1006 * C620;
    const double C1219 = C1007 * C529;
    const double C1213 = C1007 * C519;
    const double C1207 = C1007 * C246;
    const double C1201 = C1007 * C235;
    const double C1196 = C1007 * C528;
    const double C1190 = C1007 * C518;
    const double C1184 = C1007 * C245;
    const double C1178 = C1007 * C234;
    const double C1667 = C1007 * C1166;
    const double C1661 = C1007 * C1159;
    const double C1853 = C1007 * C1376;
    const double C1847 = C1007 * C1369;
    const double C1841 = C1007 * C630;
    const double C1835 = C1007 * C620;
    const double C2752 = C1007 * C882;
    const double C2746 = C1007 * C872;
    const double C2740 = C1007 * C354;
    const double C2734 = C1007 * C343;
    const double C2729 = C1007 * C881;
    const double C2723 = C1007 * C871;
    const double C2717 = C1007 * C353;
    const double C2711 = C1007 * C342;
    const double C3178 = C1007 * C2268;
    const double C3172 = C1007 * C2259;
    const double C3610 = C1007 * C2699;
    const double C3604 = C1007 * C2692;
    const double C6243 = C1007 * C631;
    const double C6237 = C1007 * C621;
    const double C23420 = C23239 * C1166;
    const double C23416 = C23239 * C1159;
    const double C23412 = C23239 * C528;
    const double C23408 = C23239 * C518;
    const double C23404 = C23239 * C245;
    const double C23400 = C23239 * C234;
    const double C23397 = C23239 * C1165;
    const double C23393 = C23239 * C1158;
    const double C23389 = C23239 * C527;
    const double C23385 = C23239 * C517;
    const double C23381 = C23239 * C244;
    const double C23377 = C23239 * C233;
    const double C23794 = C23239 * C1646;
    const double C23790 = C23239 * C1640;
    const double C23952 = C23239 * C1826;
    const double C23948 = C23239 * C1820;
    const double C23944 = C23239 * C1375;
    const double C23940 = C23239 * C1368;
    const double C23936 = C23239 * C629;
    const double C23932 = C23239 * C619;
    const double C24674 = C23239 * C2268;
    const double C24670 = C23239 * C2259;
    const double C24666 = C23239 * C630;
    const double C24662 = C23239 * C620;
    const double C24659 = C23239 * C2267;
    const double C24655 = C23239 * C2258;
    const double C24900 = C23239 * C881;
    const double C24896 = C23239 * C871;
    const double C24892 = C23239 * C353;
    const double C24888 = C23239 * C342;
    const double C24885 = C23239 * C880;
    const double C24881 = C23239 * C870;
    const double C24877 = C23239 * C352;
    const double C24873 = C23239 * C341;
    const double C25248 = C23239 * C2273;
    const double C25244 = C23239 * C2261;
    const double C25466 = C23239 * C3163;
    const double C25462 = C23239 * C3157;
    const double C26022 = C23239 * C2698;
    const double C26018 = C23239 * C2691;
    const double C29371 = C23239 * C1376;
    const double C29367 = C23239 * C1369;
    const double C33741 = C23239 * C2699;
    const double C33737 = C23239 * C2692;
    const double C34471 = C23239 * C3589;
    const double C34467 = C23239 * C3583;
    const double C10931 = C10929 + C10930;
    const double C17384 = C17378 + C17379;
    const double C18118 = C18108 + C18109;
    const double C21980 = C21972 + C21973;
    const double C18123 = C18119 + C18120;
    const double C21981 = C21976 + C21977;
    const double C18124 = C18121 + C18122;
    const double C48557 = C48498 + C48549;
    const double C3719 = C48536 - (C48135 * C48118) / C47178;
    const double C22255 = C48537 * C254;
    const double C22238 = C48537 * C253;
    const double C22230 = C48537 * C241;
    const double C31038 = C48537 * C362;
    const double C31021 = C48537 * C361;
    const double C31013 = C48537 * C349;
    const double C31770 = C48537 * C887;
    const double C104 = C48537 / C47184 - C48133 / C48505;
    const double C3890 = C3720 * C254;
    const double C3873 = C3720 * C253;
    const double C3865 = C3720 * C241;
    const double C5160 = C3720 * C362;
    const double C5143 = C3720 * C361;
    const double C5135 = C3720 * C349;
    const double C5892 = C3720 * C887;
    const double C48550 = C48501 + C48536;
    const double C47333 = C47329 / C47178;
    const double C42724 = C18110 * C22093;
    const double C42720 = C10919 * C22093;
    const double C47344 = C47338 / C47178;
    const double C48558 = C48521 + C48553;
    const double C11036 = C48543 - (C48289 * C48278) / C47178;
    const double C8906 = C48544 / C47184 - C48287 / C48505;
    const double C48554 = C48523 + C48543;
    const double C3601 = C2730 - C2731;
    const double C16152 = C15305 - C15306;
    const double C37309 = C29026 - C29025;
    const double C9283 = C8908 * C8999;
    const double C9385 = C8908 * C9121;
    const double C9001 =
        (4 * (2 * C47863 + C47423 * C47941 + C47864 * ae) +
         C47423 * (3 * C47941 +
                   C47423 * (2 * C47933 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47571 * ae) +
                                       C47423 * C47571 * ae) +
                             C47935 * ae) +
                   C47940 * ae) +
         (3 * C47864 + C47423 * C47940) * ae) /
        C47178;
    const double C9123 =
        (C47588 * (3 * C47941 +
                   C47423 * (2 * C47933 +
                             C47423 * (C47481 +
                                       C47423 * (C47423 * C47424 * C47493 +
                                                 C47571 * ae) +
                                       C47423 * C47571 * ae) +
                             C47935 * ae) +
                   C47940 * ae)) /
        C47178;
    const double C9878 =
        (2 * C47863 + C47423 * C47941 + C47864 * ae +
         (2 * C47933 +
          C47423 * (C47481 + C47423 * (C47423 * C47424 * C47493 + C47571 * ae) +
                    C47423 * C47571 * ae) +
          C47935 * ae) *
             C47635) /
        C47178;
    const double C10055 =
        (2 * C47588 * C47941 +
         C47588 * (C47941 +
                   (C47481 + C47423 * (C47423 * C47424 * C47493 + C47571 * ae) +
                    C47423 * C47571 * ae) *
                       C47635)) /
        C47178;
    const double C47564 = C47561 + C47562;
    const double C47626 = C47623 + C47624;
    const double C2281 =
        (C47476 + C47500 * C47635 + ae * (C47622 + C47423 * C47580 * C47635) +
         C47423 * (ae * (C47541 + C47580 * C47635) +
                   C47423 * (C47500 + (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)) *
                                          C47635))) /
        C47183;
    const double C2266 = (C47423 * C47559 + C47622 * C47635) / C47178;
    const double C3162 =
        (2 * C47588 * C47622 + C47588 * (C47622 + C47423 * C47580 * C47635)) /
        C47178;
    const double C1856 = C48503 * C1382;
    const double C8438 = C48503 * C1382;
    const double C12469 = C48132 * C1382;
    const double C26942 = C26144 * C1382;
    const double C29374 = C48132 * C1382;
    const double C47967 = C47948 + C47965;
    const double C10507 = C8908 * C10053;
    const double C1220 = C1001 * C534;
    const double C1197 = C48503 * C534;
    const double C4264 = C3720 * C534;
    const double C7842 = C48535 * C534;
    const double C7819 = C48503 * C534;
    const double C11215 = C48132 * C534;
    const double C22629 = C48537 * C534;
    const double C23415 = C48132 * C534;
    const double C26346 = C48135 * C534;
    const double C26323 = C26144 * C534;
    const double C1844 = C48503 * C636;
    const double C4410 = C3720 * C636;
    const double C6244 = C1001 * C636;
    const double C8426 = C48503 * C636;
    const double C12461 = C48132 * C636;
    const double C22775 = C48537 * C636;
    const double C24669 = C48132 * C636;
    const double C26930 = C26144 * C636;
    const double C27694 = C48135 * C636;
    const double C39287 = C48535 * C636;
    const double C1670 = C48503 * C1172;
    const double C8264 = C48503 * C1172;
    const double C11223 = C48132 * C1172;
    const double C23423 = C48132 * C1172;
    const double C26768 = C26144 * C1172;
    const double C3181 = C48503 * C2278;
    const double C15744 = C48503 * C2278;
    const double C18472 = C48132 * C2278;
    const double C24677 = C48132 * C2278;
    const double C28472 = C26144 * C2278;
    const double C1204 = C48503 * C242;
    const double C3882 = C3720 * C242;
    const double C3867 = C48520 * C242;
    const double C7826 = C48503 * C242;
    const double C22247 = C48537 * C242;
    const double C22232 = C48520 * C242;
    const double C26330 = C26144 * C242;
    const double C2737 = C48503 * C350;
    const double C5152 = C3720 * C350;
    const double C5137 = C48520 * C350;
    const double C15312 = C48503 * C350;
    const double C27908 = C26144 * C350;
    const double C31030 = C48537 * C350;
    const double C31015 = C48520 * C350;
    const double C1214 = C1001 * C524;
    const double C1191 = C48503 * C524;
    const double C4256 = C3720 * C524;
    const double C7836 = C48535 * C524;
    const double C7813 = C48503 * C524;
    const double C11211 = C48132 * C524;
    const double C22621 = C48537 * C524;
    const double C23411 = C48132 * C524;
    const double C26340 = C48135 * C524;
    const double C26317 = C26144 * C524;
    const double C1838 = C48503 * C626;
    const double C4402 = C3720 * C626;
    const double C6238 = C1001 * C626;
    const double C8420 = C48503 * C626;
    const double C12457 = C48132 * C626;
    const double C22767 = C48537 * C626;
    const double C24665 = C48132 * C626;
    const double C26924 = C26144 * C626;
    const double C27688 = C48135 * C626;
    const double C39281 = C48535 * C626;
    const double C2747 = C1001 * C877;
    const double C2724 = C48503 * C877;
    const double C5884 = C3720 * C877;
    const double C15322 = C48535 * C877;
    const double C15299 = C48503 * C877;
    const double C18670 = C48132 * C877;
    const double C24899 = C48132 * C877;
    const double C29020 = C26144 * C877;
    const double C31762 = C48537 * C877;
    const double C36491 = C48135 * C877;
    const double C1664 = C48503 * C1164;
    const double C8258 = C48503 * C1164;
    const double C11219 = C48132 * C1164;
    const double C23419 = C48132 * C1164;
    const double C26762 = C26144 * C1164;
    const double C1850 = C48503 * C1374;
    const double C8432 = C48503 * C1374;
    const double C12465 = C48132 * C1374;
    const double C26936 = C26144 * C1374;
    const double C29370 = C48132 * C1374;
    const double C3607 = C48503 * C2697;
    const double C16158 = C48503 * C2697;
    const double C20149 = C48132 * C2697;
    const double C33740 = C48132 * C2697;
    const double C37315 = C26144 * C2697;
    const double C139 = (5 * (3 * C47457 + C47424 * C47477) +
                         C47424 * (4 * C47477 + C47424 * C47505)) /
                        C47178;
    const double C250 = (C47423 * (4 * C47477 + C47424 * C47505) +
                         (4 * C47771 + C47424 * C47776) * ae) /
                        C47178;
    const double C358 = (C47588 * (4 * C47477 + C47424 * C47505)) / C47178;
    const double C531 =
        (3 * C47457 + C47424 * C47477 +
         C47423 * (C47423 * C47505 + C47776 * ae) + C47423 * C47776 * ae) /
        C47178;
    const double C633 = (C47588 * (C47423 * C47505 + C47776 * ae)) / C47178;
    const double C884 =
        (3 * C47457 + C47424 * C47477 + C47505 * C47635) / C47178;
    const double C146 =
        (5 * (3 * C47476 + be * C47477 + C47424 * C47504) +
         be * (4 * C47477 + C47424 * C47505) +
         C47424 *
             (4 * C47504 + be * C47505 +
              C47424 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C255 =
        (ae * (3 * (C47514 + C47424 * C47524 + C47518 * be) +
               C47424 * (2 * C47524 +
                         C47424 * (C47520 +
                                   C47424 * (C47424 * C47461 * C47462 * C47509 +
                                             C47519 * be) +
                                   C47424 * C47519 * be) +
                         C47523 * be) +
               (2 * C47518 + C47424 * C47523) * be) +
         C47423 * (3 * C47476 + be * C47477 + C47424 * C47504)) /
        C47183;
    const double C256 =
        (ae * (4 * (2 * C47524 + C47424 * C47541 + C47523 * be) +
               C47424 * (3 * C47541 +
                         C47424 * (2 * C47536 +
                                   C47424 * (C47530 +
                                             C47424 * (C47424 * C47483 *
                                                           C47484 * C47509 +
                                                       C47529 * be) +
                                             C47424 * C47529 * be) +
                                   C47535 * be) +
                         C47539 * be) +
               (3 * C47523 + C47424 * C47539) * be) +
         C47423 *
             (4 * C47504 + be * C47505 +
              C47424 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C363 =
        ((zP - zQ) * (3 * C47476 + be * C47477 + C47424 * C47504)) / C47183;
    const double C364 =
        ((zP - zQ) *
         (4 * C47504 + be * C47505 +
          C47424 * (3 * C47500 + be * C47501 +
                    C47424 * (2 * C47496 + be * C47497 +
                              C47424 * (C47492 + be * C47424 * C47493 +
                                        C47424 * (be * C47493 +
                                                  C47424 * std::pow(C47426, 8) *
                                                      bs[8] * C47435)))))) /
        C47183;
    const double C888 = (2 * C47456 + be * C47457 + C47424 * C47476 +
                         C47504 * std::pow(C47588, 2)) /
                        C47183;
    const double C889 =
        (3 * C47476 + be * C47477 + C47424 * C47504 +
         (3 * C47500 + be * C47501 +
          C47424 *
              (2 * C47496 + be * C47497 +
               C47424 * (C47492 + be * C47424 * C47493 +
                         C47424 * (be * C47493 + C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))) *
             std::pow(C47588, 2)) /
        C47183;
    const double C2706 =
        (2 * C47588 * C47504 +
         C47588 * (C47504 + (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47635)) /
        C47183;
    const double C47582 = C47568 + C47581;
    const double C47627 = C47541 + C47625;
    const double C9003 =
        (4 * (2 * C47619 + ae * C47620 + C47423 * C47678) +
         ae * (3 * C47620 + C47423 * C47679) +
         C47423 *
             (3 * C47678 + ae * C47679 +
              C47423 *
                  (2 * C47672 + ae * C47674 +
                   C47423 * (C47496 + ae * C47423 * C47577 +
                             C47423 * (ae * C47577 +
                                       C47423 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C9125 =
        (3 * (C47631 + ae * C47588 * C47667 + C47423 * C47691) +
         ae * C47588 * C47679 +
         C47423 * (2 * C47691 + ae * C47588 * C47674 +
                   C47423 * (C47688 + ae * C47588 * C47423 * C47577 +
                             C47423 * (ae * C47588 * C47577 +
                                       C47423 * C47588 *
                                           (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C9000 = (4 * (2 * C47615 + C47423 * C47620) +
                          C47423 * (3 * C47620 + C47423 * C47679)) /
                         C47178;
    const double C9122 = (C47588 * (3 * C47620 + C47423 * C47679)) / C47178;
    const double C9877 =
        (2 * C47615 + C47423 * C47620 + C47679 * C47635) / C47178;
    const double C9273 =
        (5 * (3 * C47664 + ae * C47665 + C47423 * C47712) +
         ae * (4 * C47665 + C47423 * C47713) +
         C47423 *
             (4 * C47712 + ae * C47713 +
              C47423 *
                  (3 * C47708 + ae * C47709 +
                   C47423 * (2 * C47702 + ae * C47704 +
                             C47423 * (C47492 + ae * C47423 * C47574 +
                                       C47423 * (ae * C47574 +
                                                 C47423 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C9369 =
        (4 * (2 * C47685 + ae * C47588 * C47660 + C47423 * C47724) +
         ae * C47588 * C47713 +
         C47423 * (3 * C47724 + ae * C47588 * C47709 +
                   C47423 * (2 * C47722 + ae * C47588 * C47704 +
                             C47423 * (C47717 + ae * C47588 * C47423 * C47574 +
                                       C47423 * (ae * C47588 * C47574 +
                                                 C47423 * C47588 *
                                                     std::pow(C47426, 8) *
                                                     bs[8] * C47435))))) /
        C47183;
    const double C9271 = (5 * (3 * C47613 + C47423 * C47665) +
                          C47423 * (4 * C47665 + C47423 * C47713)) /
                         C47178;
    const double C9367 = (C47588 * (4 * C47665 + C47423 * C47713)) / C47178;
    const double C9616 =
        (3 * C47613 + C47423 * C47665 + C47713 * C47635) / C47178;
    const double C48559 = C48527 + C48555;
    const double C19882 = C48546 - (C48329 * C48318) / C47178;
    const double C17453 = C48547 / C47184 - C48327 / C48505;
    const double C48556 = C48529 + C48546;
    const double C47223 = C47220 - C47199;
    const double C1656 = C1193 - C1194;
    const double C1653 = C1187 - C1188;
    const double C6984 = C1839 - C1840;
    const double C6978 = C1840 - C1839;
    const double C6981 = C1833 - C1834;
    const double C6975 = C1834 - C1833;
    const double C3599 = C2726 - C2727;
    const double C3596 = C2720 - C2721;
    const double C1657 = C1195 - C1196;
    const double C1654 = C1189 - C1190;
    const double C6985 = C1841 - C1842;
    const double C6979 = C1842 - C1841;
    const double C6982 = C1835 - C1836;
    const double C6976 = C1836 - C1835;
    const double C3600 = C2728 - C2729;
    const double C3597 = C2722 - C2723;
    const double C23788 = C23396 - C23397;
    const double C23786 = C23392 - C23393;
    const double C23784 = C23388 - C23389;
    const double C23782 = C23384 - C23385;
    const double C29911 = C23945 - C23944;
    const double C30111 = C23944 - C23945;
    const double C29909 = C23941 - C23940;
    const double C30109 = C23940 - C23941;
    const double C25456 = C23936 - C23937;
    const double C25448 = C23937 - C23936;
    const double C25454 = C23932 - C23933;
    const double C25446 = C23933 - C23932;
    const double C25460 = C24659 - C24658;
    const double C25452 = C24658 - C24659;
    const double C25458 = C24655 - C24654;
    const double C25450 = C24654 - C24655;
    const double C26014 = C24884 - C24885;
    const double C26012 = C24880 - C24881;
    const double C34465 = C26023 - C26022;
    const double C34463 = C26019 - C26018;
    const double C10932 = C10931 + C10921;
    const double C17385 = C17384 + C17380;
    const double C21982 = C21980 + C21974;
    const double C21983 = C21981 + C21978;
    const double C22251 = C48557 * C252;
    const double C22243 = C48557 * C240;
    const double C22234 = C48557 * C251;
    const double C22226 = C48557 * C239;
    const double C22625 = C48557 * C532;
    const double C22617 = C48557 * C522;
    const double C22771 = C48557 * C634;
    const double C22763 = C48557 * C624;
    const double C31034 = C48557 * C360;
    const double C31026 = C48557 * C348;
    const double C31017 = C48557 * C359;
    const double C31009 = C48557 * C347;
    const double C31766 = C48557 * C885;
    const double C31758 = C48557 * C875;
    const double C101 =
        (C48548 + 2 * C48127) / C47184 - (C48557 * C48118) / C47178;
    const double C3888 = C3719 * C253;
    const double C3880 = C3719 * C241;
    const double C3871 = C3719 * C252;
    const double C3863 = C3719 * C240;
    const double C4262 = C3719 * C533;
    const double C4254 = C3719 * C523;
    const double C4408 = C3719 * C635;
    const double C4400 = C3719 * C625;
    const double C5158 = C3719 * C361;
    const double C5150 = C3719 * C349;
    const double C5141 = C3719 * C360;
    const double C5133 = C3719 * C348;
    const double C5890 = C3719 * C886;
    const double C5882 = C3719 * C876;
    const double C22253 = C48550 * C253;
    const double C22245 = C48550 * C241;
    const double C22236 = C48550 * C252;
    const double C22228 = C48550 * C240;
    const double C22627 = C48550 * C533;
    const double C22619 = C48550 * C523;
    const double C22773 = C48550 * C635;
    const double C22765 = C48550 * C625;
    const double C31036 = C48550 * C361;
    const double C31028 = C48550 * C349;
    const double C31019 = C48550 * C360;
    const double C31011 = C48550 * C348;
    const double C31768 = C48550 * C886;
    const double C31760 = C48550 * C876;
    const double C102 =
        (C48535 + 2 * C48135 + C48557) / C47184 - (C48550 * C48118) / C47178;
    const double C103 = (C48503 + C48132 / C47178 + C48550) / C47184 -
                        (C48537 * C48118) / C47178;
    const double C47337 = C47333 - C47314;
    const double C42729 = C42724 + C42725;
    const double C42728 = C42720 + C42721;
    const double C8903 =
        (C48551 + 2 * C48282) / C47184 - (C48558 * C48278) / C47178;
    const double C8904 =
        (C48539 + 2 * C48289 + C48558) / C47184 - (C48554 * C48278) / C47178;
    const double C8905 = (C48516 + C48286 / C47178 + C48554) / C47184 -
                         (C48544 * C48278) / C47178;
    const double C47565 = C47564 + C47563;
    const double C3175 = C48503 * C2266;
    const double C15738 = C48503 * C2266;
    const double C18468 = C48132 * C2266;
    const double C24673 = C48132 * C2266;
    const double C28466 = C26144 * C2266;
    const double C47968 = C47967 + C47952;
    const double C1658 = C1197 - C1198;
    const double C8252 = C7819 - C7820;
    const double C26756 = C26323 - C26324;
    const double C6986 = C1843 - C1844;
    const double C6980 = C1844 - C1843;
    const double C40029 = C8425 - C8426;
    const double C40023 = C8426 - C8425;
    const double C28460 = C26929 - C26930;
    const double C28454 = C26930 - C26929;
    const double C1655 = C1191 - C1192;
    const double C8249 = C7813 - C7814;
    const double C26753 = C26317 - C26318;
    const double C6983 = C1837 - C1838;
    const double C6977 = C1838 - C1837;
    const double C40026 = C8419 - C8420;
    const double C40020 = C8420 - C8419;
    const double C28457 = C26923 - C26924;
    const double C28451 = C26924 - C26923;
    const double C3598 = C2724 - C2725;
    const double C16149 = C15299 - C15300;
    const double C37306 = C29020 - C29019;
    const double C3892 = C48520 * C255;
    const double C22257 = C48520 * C255;
    const double C5162 = C48520 * C363;
    const double C31040 = C48520 * C363;
    const double C2755 = C48503 * C888;
    const double C5894 = C48520 * C888;
    const double C15330 = C48503 * C888;
    const double C31772 = C48520 * C888;
    const double C36499 = C26144 * C888;
    const double C47583 = C47582 + C47572;
    const double C1651 =
        (3 * (C47476 + ae * C47622 + C47423 * C47626) +
         ae * (2 * C47622 + C47423 * C47627) +
         C47423 *
             (2 * C47626 + ae * C47627 +
              C47423 *
                  (C47500 + ae * C47423 * C47580 +
                   C47423 * (ae * C47580 +
                             C47423 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C1831 =
        (2 * (ae * C47588 * C47541 + C47423 * C47633) + ae * C47588 * C47627 +
         C47423 * (C47633 + ae * C47588 * C47423 * C47580 +
                   C47423 * (ae * C47588 * C47580 +
                             C47423 * C47588 *
                                 (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C1645 = (3 * (C47559 + C47541 * C47610) +
                          C47423 * (2 * C47622 + C47423 * C47627)) /
                         C47178;
    const double C1825 = (C47588 * (2 * C47622 + C47423 * C47627)) / C47178;
    const double C2272 = (C47559 + C47541 * C47610 + C47627 * C47635) / C47178;
    const double C17450 =
        (C48552 + 2 * C48322) / C47184 - (C48559 * C48318) / C47178;
    const double C17451 =
        (C48541 + 2 * C48329 + C48559) / C47184 - (C48556 * C48318) / C47178;
    const double C17452 = (C48519 + C48326 / C47178 + C48556) / C47184 -
                          (C48547 * C48318) / C47178;
    const double C11220 = C47223 * C1166;
    const double C11216 = C47223 * C1159;
    const double C11212 = C47223 * C528;
    const double C11208 = C47223 * C518;
    const double C11204 = C47223 * C245;
    const double C11200 = C47223 * C234;
    const double C11197 = C47223 * C1165;
    const double C11193 = C47223 * C1158;
    const double C11189 = C47223 * C527;
    const double C11185 = C47223 * C517;
    const double C11181 = C47223 * C244;
    const double C11177 = C47223 * C233;
    const double C11594 = C47223 * C1646;
    const double C11590 = C47223 * C1640;
    const double C11752 = C47223 * C1826;
    const double C11748 = C47223 * C1820;
    const double C11744 = C47223 * C1375;
    const double C11740 = C47223 * C1368;
    const double C11736 = C47223 * C629;
    const double C11732 = C47223 * C619;
    const double C12466 = C47223 * C1376;
    const double C12462 = C47223 * C1369;
    const double C12458 = C47223 * C630;
    const double C12454 = C47223 * C620;
    const double C12676 = C47223 * C353;
    const double C12672 = C47223 * C342;
    const double C12669 = C47223 * C352;
    const double C12665 = C47223 * C341;
    const double C13244 = C47223 * C2273;
    const double C13240 = C47223 * C2261;
    const double C13236 = C47223 * C2267;
    const double C13232 = C47223 * C2258;
    const double C13792 = C47223 * C880;
    const double C13788 = C47223 * C870;
    const double C18469 = C47223 * C2268;
    const double C18465 = C47223 * C2259;
    const double C18671 = C47223 * C881;
    const double C18667 = C47223 * C871;
    const double C19221 = C47223 * C3163;
    const double C19217 = C47223 * C3157;
    const double C19773 = C47223 * C2698;
    const double C19769 = C47223 * C2691;
    const double C20150 = C47223 * C2699;
    const double C20146 = C47223 * C2692;
    const double C20880 = C47223 * C3589;
    const double C20876 = C47223 * C3583;
    const double C47226 = C47223 / C47184;
    const double C47225 = C47176 * C47223;
    const double C1672 = C1656 + C1657;
    const double C1671 = C1653 + C1654;
    const double C6990 = C6984 + C6985;
    const double C6988 = C6978 + C6979;
    const double C6989 = C6981 + C6982;
    const double C6987 = C6975 + C6976;
    const double C3615 = C3599 + C3600;
    const double C3614 = C3596 + C3597;
    const double C23801 = C23788 + C23789;
    const double C23800 = C23786 + C23787;
    const double C23799 = C23784 + C23785;
    const double C23798 = C23782 + C23783;
    const double C29914 = C29911 + C29912;
    const double C30114 = C30111 + C30112;
    const double C29913 = C29909 + C29910;
    const double C30113 = C30109 + C30110;
    const double C25475 = C25456 + C25457;
    const double C25471 = C25448 + C25449;
    const double C25474 = C25454 + C25455;
    const double C25470 = C25446 + C25447;
    const double C25477 = C25460 + C25461;
    const double C25473 = C25452 + C25453;
    const double C25476 = C25458 + C25459;
    const double C25472 = C25450 + C25451;
    const double C26027 = C26014 + C26015;
    const double C26026 = C26012 + C26013;
    const double C34477 = C34465 + C34466;
    const double C34476 = C34463 + C34464;
    const double C10933 = C10932 + C10922;
    const double C17386 = C17385 + C17381;
    const double C21984 = C21982 + C21975;
    const double C21985 = C21983 + C21979;
    const double C47343 = C47337 / C47184;
    const double C47342 = C47263 * C47337;
    const double C42731 = C42729 + C42726;
    const double C42730 = C42728 + C42722;
    const double C535 =
        (2 * C47456 + be * C47457 + C47424 * C47476 + ae * C47423 * C47565 +
         C47423 * (ae * C47565 + C47423 * C47504)) /
        C47183;
    const double C637 =
        (ae * C47588 * C47565 + C47423 * C47588 * C47504) / C47183;
    const double C136 = (4 * (2 * C47554 + C47424 * C47559 + C47762 * be) +
                         C47424 * (3 * C47559 + C47424 * C47565 + C47771 * be) +
                         (3 * C47762 + C47424 * C47771) * be) /
                        C47178;
    const double C243 =
        (C47423 * (3 * C47559 + C47424 * C47565 + C47771 * be)) / C47178;
    const double C351 =
        (C47588 * (3 * C47559 + C47424 * C47565 + C47771 * be)) / C47178;
    const double C525 =
        (2 * C47554 + C47424 * C47559 + C47762 * be + C47565 * C47610) / C47178;
    const double C627 = (C47588 * C47423 * C47565) / C47178;
    const double C878 =
        (2 * C47554 + C47424 * C47559 + C47762 * be + C47565 * C47635) / C47178;
    const double C9272 =
        (5 * (3 * C47926 + C47423 * C47968 + C47925 * ae) +
         C47423 * (4 * C47968 +
                   C47423 * (3 * C47963 +
                             C47423 * (2 * C47955 +
                                       C47423 * (C47469 +
                                                 C47423 * (C47423 * C47493 +
                                                           C47529 * ae) +
                                                 C47423 * C47529 * ae) +
                                       C47957 * ae) +
                             C47962 * ae) +
                   C47966 * ae) +
         (4 * C47925 + C47423 * C47966) * ae) /
        C47178;
    const double C9368 =
        (C47588 *
         (4 * C47968 +
          C47423 *
              (3 * C47963 +
               C47423 * (2 * C47955 +
                         C47423 * (C47469 +
                                   C47423 * (C47423 * C47493 + C47529 * ae) +
                                   C47423 * C47529 * ae) +
                         C47957 * ae) +
               C47962 * ae) +
          C47966 * ae)) /
        C47178;
    const double C9615 =
        (2 * C47856 + C47423 * C47926 + C47857 * ae + C47968 * C47635) / C47178;
    const double C9617 =
        (3 * C47926 + C47423 * C47968 + C47925 * ae +
         (3 * C47963 +
          C47423 *
              (2 * C47955 +
               C47423 * (C47469 + C47423 * (C47423 * C47493 + C47529 * ae) +
                         C47423 * C47529 * ae) +
               C47957 * ae) +
          C47962 * ae) *
             C47635) /
        C47178;
    const double C10486 =
        (2 * C47588 * C47968 +
         C47588 *
             (C47968 +
              (2 * C47955 +
               C47423 * (C47469 + C47423 * (C47423 * C47493 + C47529 * ae) +
                         C47423 * C47529 * ae) +
               C47957 * ae) *
                  C47635)) /
        C47178;
    const double C47584 = C47424 * C47583;
    const double C1173 =
        (2 * (ae * C47565 + C47423 * C47504) +
         ae * (C47565 + C47583 * std::pow(C47423, 2)) +
         C47423 *
             (C47504 + ae * C47423 * C47583 +
              C47423 *
                  (ae * C47583 +
                   C47423 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C1383 =
        (C47588 * C47504 + ae * C47588 * C47423 * C47583 +
         C47423 * (ae * C47588 * C47583 +
                   C47423 * C47588 *
                       (2 * C47496 + be * C47497 +
                        C47424 * (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C2544 =
        (ae * (C47565 + C47583 * C47635) +
         C47423 * (C47504 + (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435))) *
                                C47635)) /
        C47183;
    const double C1168 =
        (2 * C47423 * C47565 + C47423 * (C47565 + C47583 * C47610)) / C47178;
    const double C1378 = (C47588 * (C47565 + C47583 * C47610)) / C47178;
    const double C2542 = (C47423 * C47565 + C47423 * C47583 * C47635) / C47178;
    const double C2701 =
        (2 * C47588 * C47565 + C47588 * (C47565 + C47583 * C47635)) / C47178;
    const double C11588 = C11196 - C11197;
    const double C11586 = C11192 - C11193;
    const double C11584 = C11188 - C11189;
    const double C11582 = C11184 - C11185;
    const double C13022 = C11745 - C11744;
    const double C13230 = C11744 - C11745;
    const double C13020 = C11741 - C11740;
    const double C13228 = C11740 - C11741;
    const double C13226 = C11736 - C11737;
    const double C13222 = C11737 - C11736;
    const double C13224 = C11732 - C11733;
    const double C13220 = C11733 - C11732;
    const double C19215 = C13236 - C13237;
    const double C19211 = C13237 - C13236;
    const double C19213 = C13232 - C13233;
    const double C19209 = C13233 - C13232;
    const double C19765 = C13793 - C13792;
    const double C19763 = C13789 - C13788;
    const double C20874 = C19774 - C19773;
    const double C20872 = C19770 - C19769;
    const double C47229 = C47226 - C47221;
    const double C7645 = C47226 + (C47212 * ae) / C47178;
    const double C47228 = C47225 + C48461;
    const double C1674 = C1672 + C1658;
    const double C1673 = C1671 + C1655;
    const double C6994 = C6990 + C6986;
    const double C6992 = C6988 + C6980;
    const double C6993 = C6989 + C6983;
    const double C6991 = C6987 + C6977;
    const double C3617 = C3615 + C3601;
    const double C3616 = C3614 + C3598;
    const double C26017 = C25473 * C48286;
    const double C38934 = C25473 * C48286;
    const double C26016 = C25472 * C22094;
    const double C38933 = C25472 * C3729;
    const double C26029 = C26027 * C22087;
    const double C34462 = C26027 * C48227;
    const double C38932 = C26027 * C48483;
    const double C26028 = C26026 * C22093;
    const double C34461 = C26026 * C118;
    const double C38931 = C26026 * C3728;
    const double C34479 = C34477 * C48227;
    const double C34478 = C34476 * C118;
    const double C10934 = C10933 + C10923;
    const double C17387 = C17386 + C17382;
    const double C47348 = C47343 - C47344;
    const double C47347 = C47342 + C48483;
    const double C42733 = C42731 + C42727;
    const double C42732 = C42730 + C42723;
    const double C1222 = C48503 * C535;
    const double C4266 = C48520 * C535;
    const double C7844 = C48503 * C535;
    const double C22631 = C48520 * C535;
    const double C26348 = C26144 * C535;
    const double C4412 = C48520 * C637;
    const double C6246 = C48503 * C637;
    const double C22777 = C48520 * C637;
    const double C27696 = C26144 * C637;
    const double C39289 = C48503 * C637;
    const double C3884 = C48520 * C243;
    const double C22249 = C48520 * C243;
    const double C5154 = C48520 * C351;
    const double C31032 = C48520 * C351;
    const double C1216 = C48503 * C525;
    const double C4258 = C48520 * C525;
    const double C7838 = C48503 * C525;
    const double C22623 = C48520 * C525;
    const double C26342 = C26144 * C525;
    const double C4404 = C48520 * C627;
    const double C6240 = C48503 * C627;
    const double C22769 = C48520 * C627;
    const double C27690 = C26144 * C627;
    const double C39283 = C48503 * C627;
    const double C2749 = C48503 * C878;
    const double C5886 = C48520 * C878;
    const double C15324 = C48503 * C878;
    const double C31764 = C48520 * C878;
    const double C36493 = C26144 * C878;
    const double C10337 = C8908 * C9615;
    const double C47585 = C47567 + C47584;
    const double C11601 = C11588 + C11589;
    const double C11600 = C11586 + C11587;
    const double C11599 = C11584 + C11585;
    const double C11598 = C11582 + C11583;
    const double C13025 = C13022 + C13023;
    const double C13253 = C13230 + C13231;
    const double C13024 = C13020 + C13021;
    const double C13252 = C13228 + C13229;
    const double C13251 = C13226 + C13227;
    const double C13249 = C13222 + C13223;
    const double C13250 = C13224 + C13225;
    const double C13248 = C13220 + C13221;
    const double C19228 = C19215 + C19216;
    const double C19226 = C19211 + C19212;
    const double C19227 = C19213 + C19214;
    const double C19225 = C19209 + C19210;
    const double C19778 = C19765 + C19766;
    const double C19777 = C19763 + C19764;
    const double C20886 = C20874 + C20875;
    const double C20885 = C20872 + C20873;
    const double C26345 = C47229 * C529;
    const double C26339 = C47229 * C519;
    const double C26333 = C47229 * C246;
    const double C26327 = C47229 * C235;
    const double C26322 = C47229 * C528;
    const double C26316 = C47229 * C518;
    const double C26310 = C47229 * C245;
    const double C26304 = C47229 * C234;
    const double C26765 = C47229 * C1166;
    const double C26759 = C47229 * C1159;
    const double C26939 = C47229 * C1376;
    const double C26933 = C47229 * C1369;
    const double C26927 = C47229 * C630;
    const double C26921 = C47229 * C620;
    const double C27693 = C47229 * C631;
    const double C27687 = C47229 * C621;
    const double C27911 = C47229 * C354;
    const double C27905 = C47229 * C343;
    const double C27900 = C47229 * C353;
    const double C27894 = C47229 * C342;
    const double C28469 = C47229 * C2268;
    const double C28463 = C47229 * C2259;
    const double C29023 = C47229 * C881;
    const double C29017 = C47229 * C871;
    const double C36496 = C47229 * C882;
    const double C36490 = C47229 * C872;
    const double C37318 = C47229 * C2699;
    const double C37312 = C47229 * C2692;
    const double C116 =
        (C47229 / C47184 + ((C47176 * C47239 + C26144) * ae) / C47178) /
            C47184 -
        ((C47176 * (C47239 / C47184 + (0 * ae) / C47178) + C48520) * be) /
            C47178;
    const double C3726 =
        C47229 / C47184 - ((C47176 * C47239 + C26144) * be) / C47178;
    const double C22091 =
        C47229 / C47184 + ((C47176 * C47239 + C26144) * ae) / C47178;
    const double C7841 = C7645 * C529;
    const double C7835 = C7645 * C519;
    const double C7829 = C7645 * C246;
    const double C7823 = C7645 * C235;
    const double C7818 = C7645 * C528;
    const double C7812 = C7645 * C518;
    const double C7806 = C7645 * C245;
    const double C7800 = C7645 * C234;
    const double C8261 = C7645 * C1166;
    const double C8255 = C7645 * C1159;
    const double C8435 = C7645 * C1376;
    const double C8429 = C7645 * C1369;
    const double C8423 = C7645 * C630;
    const double C8417 = C7645 * C620;
    const double C15327 = C7645 * C882;
    const double C15321 = C7645 * C872;
    const double C15315 = C7645 * C354;
    const double C15309 = C7645 * C343;
    const double C15304 = C7645 * C881;
    const double C15298 = C7645 * C871;
    const double C15292 = C7645 * C353;
    const double C15286 = C7645 * C342;
    const double C15741 = C7645 * C2268;
    const double C15735 = C7645 * C2259;
    const double C16161 = C7645 * C2699;
    const double C16155 = C7645 * C2692;
    const double C39286 = C7645 * C631;
    const double C39280 = C7645 * C621;
    const double C47230 = C47228 * be;
    const double C7644 = C47215 + (C47228 * ae) / C47178 + C47204;
    const double C3619 = C3617 * C48227;
    const double C3618 = C3616 * C118;
    const double C26030 = C26028 + C26029;
    const double C34475 = C34461 + C34462;
    const double C38935 = C38931 + C38932;
    const double C34480 = C34478 + C34479;
    const double C10935 = C10934 + C10924;
    const double C17388 = C17387 + C17383;
    const double C47153 = C10491 * C47348;
    const double C8912 =
        (C47348 / C47184 + ((C47263 * C47362 + C26147) * ae) / C47178) /
            C47184 -
        ((C47263 * (C47362 / C47184 + (0 * ae) / C47178) + C48526) * be) /
            C47178;
    const double C11043 =
        C47348 / C47184 - ((C47263 * C47362 + C26147) * be) / C47178;
    const double C23243 =
        C47348 / C47184 + ((C47263 * C47362 + C26147) * ae) / C47178;
    const double C47351 = C47347 * be;
    const double C47586 = C47585 + C47573;
    const double C19768 = C19226 * C48286;
    const double C45941 = C19226 * C48286;
    const double C19767 = C19225 * C3729;
    const double C45940 = C19225 * C22094;
    const double C19780 = C19778 * C48483;
    const double C20871 = C19778 * C48227;
    const double C45939 = C19778 * C22087;
    const double C19779 = C19777 * C3728;
    const double C20870 = C19777 * C118;
    const double C45938 = C19777 * C22093;
    const double C20888 = C20886 * C48227;
    const double C20887 = C20885 * C118;
    const double C26755 = C26321 - C26322;
    const double C26752 = C26315 - C26316;
    const double C28459 = C26927 - C26928;
    const double C28453 = C26928 - C26927;
    const double C28456 = C26921 - C26922;
    const double C28450 = C26922 - C26921;
    const double C37308 = C29024 - C29023;
    const double C37305 = C29018 - C29017;
    const double C3889 = C3726 * C247;
    const double C3881 = C3726 * C236;
    const double C3874 = C3726 * C246;
    const double C3866 = C3726 * C235;
    const double C4263 = C3726 * C529;
    const double C4255 = C3726 * C519;
    const double C4409 = C3726 * C631;
    const double C4401 = C3726 * C621;
    const double C5159 = C3726 * C355;
    const double C5151 = C3726 * C344;
    const double C5144 = C3726 * C354;
    const double C5136 = C3726 * C343;
    const double C5891 = C3726 * C882;
    const double C5883 = C3726 * C872;
    const double C22254 = C22091 * C247;
    const double C22246 = C22091 * C236;
    const double C22239 = C22091 * C246;
    const double C22231 = C22091 * C235;
    const double C22628 = C22091 * C529;
    const double C22620 = C22091 * C519;
    const double C22774 = C22091 * C631;
    const double C22766 = C22091 * C621;
    const double C31037 = C22091 * C355;
    const double C31029 = C22091 * C344;
    const double C31022 = C22091 * C354;
    const double C31014 = C22091 * C343;
    const double C31769 = C22091 * C882;
    const double C31761 = C22091 * C872;
    const double C8251 = C7817 - C7818;
    const double C8248 = C7811 - C7812;
    const double C40028 = C8423 - C8424;
    const double C40022 = C8424 - C8423;
    const double C40025 = C8417 - C8418;
    const double C40019 = C8418 - C8417;
    const double C16151 = C15303 - C15304;
    const double C16148 = C15297 - C15298;
    const double C47231 = C47230 / C47178;
    const double C7839 = C7644 * C528;
    const double C7833 = C7644 * C518;
    const double C7827 = C7644 * C245;
    const double C7821 = C7644 * C234;
    const double C7816 = C7644 * C527;
    const double C7810 = C7644 * C517;
    const double C7804 = C7644 * C244;
    const double C7798 = C7644 * C233;
    const double C8259 = C7644 * C1165;
    const double C8253 = C7644 * C1158;
    const double C8433 = C7644 * C1375;
    const double C8427 = C7644 * C1368;
    const double C8421 = C7644 * C629;
    const double C8415 = C7644 * C619;
    const double C15325 = C7644 * C881;
    const double C15319 = C7644 * C871;
    const double C15313 = C7644 * C353;
    const double C15307 = C7644 * C342;
    const double C15302 = C7644 * C880;
    const double C15296 = C7644 * C870;
    const double C15290 = C7644 * C352;
    const double C15284 = C7644 * C341;
    const double C15739 = C7644 * C2267;
    const double C15733 = C7644 * C2258;
    const double C16159 = C7644 * C2698;
    const double C16153 = C7644 * C2691;
    const double C39284 = C7644 * C630;
    const double C39278 = C7644 * C620;
    const double C3620 = C3618 + C3619;
    const double C26031 = C26030 + C26016;
    const double C38936 = C38935 + C38933;
    const double C47353 = C47351 / C47178;
    const double C536 =
        (3 * C47476 + be * C47477 + C47424 * C47504 + ae * C47423 * C47586 +
         C47423 *
             (ae * C47586 +
              C47423 *
                  (3 * C47500 + be * C47501 +
                   C47424 * (2 * C47496 + be * C47497 +
                             C47424 * (C47492 + be * C47424 * C47493 +
                                       C47424 * (be * C47493 +
                                                 C47424 * std::pow(C47426, 8) *
                                                     bs[8] * C47435)))))) /
        C47183;
    const double C638 =
        (ae * C47588 * C47586 +
         C47423 * C47588 *
             (3 * C47500 + be * C47501 +
              C47424 * (2 * C47496 + be * C47497 +
                        C47424 * (C47492 + be * C47424 * C47493 +
                                  C47424 * (be * C47493 +
                                            C47424 * std::pow(C47426, 8) *
                                                bs[8] * C47435))))) /
        C47183;
    const double C138 = (5 * (3 * C47559 + C47424 * C47565 + C47771 * be) +
                         C47424 * (4 * C47565 + C47424 * C47586 + C47776 * be) +
                         (4 * C47771 + C47424 * C47776) * be) /
                        C47178;
    const double C249 =
        (C47423 * (4 * C47565 + C47424 * C47586 + C47776 * be)) / C47178;
    const double C357 =
        (C47588 * (4 * C47565 + C47424 * C47586 + C47776 * be)) / C47178;
    const double C526 =
        (3 * C47559 + C47424 * C47565 + C47771 * be + C47586 * C47610) / C47178;
    const double C628 = (C47588 * C47423 * C47586) / C47178;
    const double C879 =
        (3 * C47559 + C47424 * C47565 + C47771 * be + C47586 * C47635) / C47178;
    const double C19781 = C19779 + C19780;
    const double C20884 = C20870 + C20871;
    const double C45942 = C45938 + C45939;
    const double C20889 = C20887 + C20888;
    const double C47232 = C47215 - C47231;
    const double C8250 = C7815 - C7816;
    const double C8247 = C7809 - C7810;
    const double C40027 = C8421 - C8422;
    const double C40021 = C8422 - C8421;
    const double C40024 = C8415 - C8416;
    const double C40018 = C8416 - C8415;
    const double C16150 = C15301 - C15302;
    const double C16147 = C15295 - C15296;
    const double C26032 = C26031 + C26017;
    const double C38937 = C38936 + C38934;
    const double C47355 = C47341 - C47353;
    const double C19782 = C19781 + C19767;
    const double C45943 = C45942 + C45940;
    const double C47233 = C47232 + C47204;
    const double C8266 = C8250 + C8251;
    const double C8265 = C8247 + C8248;
    const double C40033 = C40027 + C40028;
    const double C40031 = C40021 + C40022;
    const double C40032 = C40024 + C40025;
    const double C40030 = C40018 + C40019;
    const double C16166 = C16150 + C16151;
    const double C16165 = C16147 + C16148;
    const double C47356 = C47355 + C47326;
    const double C19783 = C19782 + C19768;
    const double C45944 = C45943 + C45941;
    const double C26343 = C47233 * C528;
    const double C26337 = C47233 * C518;
    const double C26331 = C47233 * C245;
    const double C26325 = C47233 * C234;
    const double C26320 = C47233 * C527;
    const double C26314 = C47233 * C517;
    const double C26308 = C47233 * C244;
    const double C26302 = C47233 * C233;
    const double C26763 = C47233 * C1165;
    const double C26757 = C47233 * C1158;
    const double C26937 = C47233 * C1375;
    const double C26931 = C47233 * C1368;
    const double C26925 = C47233 * C629;
    const double C26919 = C47233 * C619;
    const double C27691 = C47233 * C630;
    const double C27685 = C47233 * C620;
    const double C27909 = C47233 * C353;
    const double C27903 = C47233 * C342;
    const double C27898 = C47233 * C352;
    const double C27892 = C47233 * C341;
    const double C28467 = C47233 * C2267;
    const double C28461 = C47233 * C2258;
    const double C29021 = C47233 * C880;
    const double C29015 = C47233 * C870;
    const double C36494 = C47233 * C881;
    const double C36488 = C47233 * C871;
    const double C37316 = C47233 * C2698;
    const double C37310 = C47233 * C2691;
    const double C113 =
        (((((0 - (C47176 * C47177) / C47178) * ae) / C47178 -
           (0 * be) / C47190 + (2 * C47179) / C47178) /
              C47184 -
          ((C47176 * C47213 + 0) * be) / C47178 + C47196 - C47206) /
             C47184 +
         ((C47176 * C47227 + 0) * ae) / C47178) /
            C47184 -
        ((C47176 * (C47227 / C47184 +
                    ((C47176 * C47233 + C48127) * ae) / C47178 + C47229) +
          C48557) *
         be) /
            C47178 +
        C47233 / C47184 + ((C47176 * C47229 + C48135) * ae) / C47178 +
        2 * (C47204 / C47184 - (0 * be) / C47178);
    const double C114 =
        (C47227 / C47184 + ((C47176 * C47233 + C48127) * ae) / C47178 +
         C47229) /
            C47184 -
        ((C47176 * (C47233 / C47184 +
                    ((C47176 * C47229 + C48135) * ae) / C47178 + 2 * C47239) +
          C48550) *
         be) /
            C47178 +
        2 * (C47229 / C47184 + ((C47176 * C47239 + C26144) * ae) / C47178);
    const double C115 =
        (C47233 / C47184 + ((C47176 * C47229 + C48135) * ae) / C47178 +
         2 * C47239) /
            C47184 -
        ((C47176 *
              (C47229 / C47184 + ((C47176 * C47239 + C26144) * ae) / C47178) +
          C48537) *
         be) /
            C47178 +
        3 * (C47239 / C47184 + (0 * ae) / C47178);
    const double C3724 =
        C47227 / C47184 - ((C47176 * C47233 + C48127) * be) / C47178 + C47229;
    const double C3725 = C47233 / C47184 -
                         ((C47176 * C47229 + C48135) * be) / C47178 +
                         2 * C47239;
    const double C22089 =
        C47227 / C47184 + ((C47176 * C47233 + C48127) * ae) / C47178 + C47229;
    const double C22090 = C47233 / C47184 +
                          ((C47176 * C47229 + C48135) * ae) / C47178 +
                          2 * C47239;
    const double C8268 = C8266 + C8252;
    const double C8267 = C8265 + C8249;
    const double C40037 = C40033 + C40029;
    const double C40035 = C40031 + C40023;
    const double C40036 = C40032 + C40026;
    const double C40034 = C40030 + C40020;
    const double C16168 = C16166 + C16152;
    const double C16167 = C16165 + C16149;
    const double C47151 = C10919 * C47356;
    const double C8909 =
        (((((0 - (C47263 * C47309) / C47178) * ae) / C47178 -
           (0 * be) / C47190 + (2 * C47310) / C47178) /
              C47184 -
          ((C47263 * C47345 + 0) * be) / C47178 + C47319 - C47332) /
             C47184 +
         ((C47263 * C47354 + 0) * ae) / C47178) /
            C47184 -
        ((C47263 * (C47354 / C47184 +
                    ((C47263 * C47356 + C48282) * ae) / C47178 + C47348) +
          C48558) *
         be) /
            C47178 +
        C47356 / C47184 + ((C47263 * C47348 + C48289) * ae) / C47178 +
        2 * (C47326 / C47184 - (0 * be) / C47178);
    const double C8910 =
        (C47354 / C47184 + ((C47263 * C47356 + C48282) * ae) / C47178 +
         C47348) /
            C47184 -
        ((C47263 * (C47356 / C47184 +
                    ((C47263 * C47348 + C48289) * ae) / C47178 + 2 * C47362) +
          C48554) *
         be) /
            C47178 +
        2 * (C47348 / C47184 + ((C47263 * C47362 + C26147) * ae) / C47178);
    const double C8911 =
        (C47356 / C47184 + ((C47263 * C47348 + C48289) * ae) / C47178 +
         2 * C47362) /
            C47184 -
        ((C47263 *
              (C47348 / C47184 + ((C47263 * C47362 + C26147) * ae) / C47178) +
          C48544) *
         be) /
            C47178 +
        3 * (C47362 / C47184 + (0 * ae) / C47178);
    const double C11041 =
        C47354 / C47184 - ((C47263 * C47356 + C48282) * be) / C47178 + C47348;
    const double C11042 = C47356 / C47184 -
                          ((C47263 * C47348 + C48289) * be) / C47178 +
                          2 * C47362;
    const double C23241 =
        C47354 / C47184 + ((C47263 * C47356 + C48282) * ae) / C47178 + C47348;
    const double C23242 = C47356 / C47184 +
                          ((C47263 * C47348 + C48289) * ae) / C47178 +
                          2 * C47362;
    const double C26754 = C26319 - C26320;
    const double C26751 = C26313 - C26314;
    const double C28458 = C26925 - C26926;
    const double C28452 = C26926 - C26925;
    const double C28455 = C26919 - C26920;
    const double C28449 = C26920 - C26919;
    const double C37307 = C29022 - C29021;
    const double C37304 = C29016 - C29015;
    const double C3885 = C3724 * C245;
    const double C3877 = C3724 * C234;
    const double C3870 = C3724 * C244;
    const double C3862 = C3724 * C233;
    const double C4259 = C3724 * C527;
    const double C4251 = C3724 * C517;
    const double C4405 = C3724 * C629;
    const double C4397 = C3724 * C619;
    const double C5155 = C3724 * C353;
    const double C5147 = C3724 * C342;
    const double C5140 = C3724 * C352;
    const double C5132 = C3724 * C341;
    const double C5887 = C3724 * C880;
    const double C5879 = C3724 * C870;
    const double C3887 = C3725 * C246;
    const double C3879 = C3725 * C235;
    const double C3872 = C3725 * C245;
    const double C3864 = C3725 * C234;
    const double C4261 = C3725 * C528;
    const double C4253 = C3725 * C518;
    const double C4407 = C3725 * C630;
    const double C4399 = C3725 * C620;
    const double C5157 = C3725 * C354;
    const double C5149 = C3725 * C343;
    const double C5142 = C3725 * C353;
    const double C5134 = C3725 * C342;
    const double C5889 = C3725 * C881;
    const double C5881 = C3725 * C871;
    const double C22250 = C22089 * C245;
    const double C22242 = C22089 * C234;
    const double C22235 = C22089 * C244;
    const double C22227 = C22089 * C233;
    const double C22624 = C22089 * C527;
    const double C22616 = C22089 * C517;
    const double C22770 = C22089 * C629;
    const double C22762 = C22089 * C619;
    const double C31033 = C22089 * C353;
    const double C31025 = C22089 * C342;
    const double C31018 = C22089 * C352;
    const double C31010 = C22089 * C341;
    const double C31765 = C22089 * C880;
    const double C31757 = C22089 * C870;
    const double C22252 = C22090 * C246;
    const double C22244 = C22090 * C235;
    const double C22237 = C22090 * C245;
    const double C22229 = C22090 * C234;
    const double C22626 = C22090 * C528;
    const double C22618 = C22090 * C518;
    const double C22772 = C22090 * C630;
    const double C22764 = C22090 * C620;
    const double C31035 = C22090 * C354;
    const double C31027 = C22090 * C343;
    const double C31020 = C22090 * C353;
    const double C31012 = C22090 * C342;
    const double C31767 = C22090 * C881;
    const double C31759 = C22090 * C871;
    const double C16170 = C16168 * C48227;
    const double C16169 = C16167 * C118;
    const double C47157 = C47151 + C47152;
    const double C26770 = C26754 + C26755;
    const double C26769 = C26751 + C26752;
    const double C28476 = C28458 + C28459;
    const double C28474 = C28452 + C28453;
    const double C28475 = C28455 + C28456;
    const double C28473 = C28449 + C28450;
    const double C37323 = C37307 + C37308;
    const double C37322 = C37304 + C37305;
    const double C16171 = C16169 + C16170;
    const double C47158 = C47157 + C47153;
    const double C26772 = C26770 + C26756;
    const double C26771 = C26769 + C26753;
    const double C28480 = C28476 + C28460;
    const double C28478 = C28474 + C28454;
    const double C28479 = C28475 + C28457;
    const double C28477 = C28473 + C28451;
    const double C37325 = C37323 + C37309;
    const double C37324 = C37322 + C37306;
    const double C47159 = C47158 + C47154;
    const double C37327 = C37325 * C48227;
    const double C37326 = C37324 * C118;
    const double C47160 = C47159 + C47155;
    const double C37328 = C37326 + C37327;
    const double C47161 = C47160 + C47156;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((C48127 * C126 - C47233 * C119 + C48135 * C127 -
                   C47229 * C120 + C26144 * C128 - C47239 * C121) *
                      C47356 +
                  (C48127 * C140 - C47233 * C131 + C48135 * C141 -
                   C47229 * C132 + C26144 * C142 - C47239 * C133) *
                      C48282 +
                  (C48127 * C239 - C47233 * C233 + C48135 * C240 -
                   C47229 * C234 + C26144 * C241 - C47239 * C235) *
                      C47348 +
                  (C48127 * C251 - C47233 * C244 + C48135 * C252 -
                   C47229 * C245 + C26144 * C253 - C47239 * C246) *
                      C48289 +
                  (C48127 * C522 - C47233 * C517 + C48135 * C523 -
                   C47229 * C518 + C26144 * C524 - C47239 * C519) *
                      C47362 +
                  (C48127 * C532 - C47233 * C527 + C48135 * C533 -
                   C47229 * C528 + C26144 * C534 - C47239 * C529) *
                      C26147) *
                     C48239 * C48210 * C48193 * C110 +
                 ((C47233 * C120 - C48127 * C127 + C47229 * C121 -
                   C48135 * C128 + C47239 * C122 - C26144 * C129) *
                      C47356 +
                  (C47233 * C132 - C48127 * C141 + C47229 * C133 -
                   C48135 * C142 + C47239 * C134 - C26144 * C143) *
                      C48282 +
                  (C47233 * C234 - C48127 * C240 + C47229 * C235 -
                   C48135 * C241 + C47239 * C236 - C26144 * C242) *
                      C47348 +
                  (C47233 * C245 - C48127 * C252 + C47229 * C246 -
                   C48135 * C253 + C47239 * C247 - C26144 * C254) *
                      C48289 +
                  (C47233 * C518 - C48127 * C523 + C47229 * C519 -
                   C48135 * C524 + C47239 * C520 - C26144 * C525) *
                      C47362 +
                  (C47233 * C528 - C48127 * C533 + C47229 * C529 -
                   C48135 * C534 + C47239 * C530 - C26144 * C535) *
                      C26147) *
                     C48239 * C48210 * C48193 * C111 +
                 ((C48127 * C128 - C47233 * C121 + C48135 * C129 -
                   C47229 * C122 + C26144 * C130 - C47239 * C123) *
                      C47356 +
                  (C48127 * C142 - C47233 * C133 + C48135 * C143 -
                   C47229 * C134 + C26144 * C144 - C47239 * C135) *
                      C48282 +
                  (C48127 * C241 - C47233 * C235 + C48135 * C242 -
                   C47229 * C236 + C26144 * C243 - C47239 * C237) *
                      C47348 +
                  (C48127 * C253 - C47233 * C246 + C48135 * C254 -
                   C47229 * C247 + C26144 * C255 - C47239 * C248) *
                      C48289 +
                  (C48127 * C524 - C47233 * C519 + C48135 * C525 -
                   C47229 * C520 + C26144 * C526 - C47239 * C521) *
                      C47362 +
                  (C48127 * C534 - C47233 * C529 + C48135 * C535 -
                   C47229 * C530 + C26144 * C536 - C47239 * C531) *
                      C26147) *
                     C48239 * C48210 * C48193 * C112)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            (C26313 - C26314 + C26315 - C26316 + C26317 - C26318) * C47362 +
            (C26319 - C26320 + C26321 - C26322 + C26323 - C26324) * C26147) *
               C48239 * C48210 * C229 +
           ((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C47356 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48282 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C47348 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48289 +
            (C47233 * C1158 - C48127 * C1162 + C47229 * C1159 - C48135 * C1163 +
             C47239 * C1160 - C26144 * C1164) *
                C47362 +
            (C47233 * C1165 - C48127 * C1170 + C47229 * C1166 - C48135 * C1171 +
             C47239 * C1167 - C26144 * C1172) *
                C26147) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C47356 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48282 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C47348 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48289 +
            (C26337 - C26338 + C26339 - C26340 + C26341 - C26342) * C47362 +
            (C26343 - C26344 + C26345 - C26346 + C26347 - C26348) * C26147) *
               C48239 * C48210 * C229 +
           ((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C47356 +
            (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48282 +
            (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C47348 +
            (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48289 +
            (C48127 * C1163 - C47233 * C1159 + C48135 * C1164 - C47229 * C1160 +
             C26144 * C1168 - C47239 * C1161) *
                C47362 +
            (C48127 * C1171 - C47233 * C1166 + C48135 * C1172 - C47229 * C1167 +
             C26144 * C1173 - C47239 * C1169) *
                C26147) *
               C48239 * C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            (C26313 - C26314 + C26315 - C26316 + C26317 - C26318) * C47362 +
            (C26319 - C26320 + C26321 - C26322 + C26323 - C26324) * C26147) *
               C48239 * C339 +
           ((C47233 * C341 - C48127 * C347 + C47229 * C342 - C48135 * C348 +
             C47239 * C343 - C26144 * C349) *
                C47356 +
            (C47233 * C352 - C48127 * C359 + C47229 * C353 - C48135 * C360 +
             C47239 * C354 - C26144 * C361) *
                C48282 +
            (C47233 * C619 - C48127 * C624 + C47229 * C620 - C48135 * C625 +
             C47239 * C621 - C26144 * C626) *
                C47348 +
            (C47233 * C629 - C48127 * C634 + C47229 * C630 - C48135 * C635 +
             C47239 * C631 - C26144 * C636) *
                C48289 +
            (C47233 * C1368 - C48127 * C1372 + C47229 * C1369 - C48135 * C1373 +
             C47239 * C1370 - C26144 * C1374) *
                C47362 +
            (C47233 * C1375 - C48127 * C1380 + C47229 * C1376 - C48135 * C1381 +
             C47239 * C1377 - C26144 * C1382) *
                C26147) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C47356 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48282 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C47348 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48289 +
            (C26337 - C26338 + C26339 - C26340 + C26341 - C26342) * C47362 +
            (C26343 - C26344 + C26345 - C26346 + C26347 - C26348) * C26147) *
               C48239 * C339 +
           ((C48127 * C348 - C47233 * C342 + C48135 * C349 - C47229 * C343 +
             C26144 * C350 - C47239 * C344) *
                C47356 +
            (C48127 * C360 - C47233 * C353 + C48135 * C361 - C47229 * C354 +
             C26144 * C362 - C47239 * C355) *
                C48282 +
            (C48127 * C625 - C47233 * C620 + C48135 * C626 - C47229 * C621 +
             C26144 * C627 - C47239 * C622) *
                C47348 +
            (C48127 * C635 - C47233 * C630 + C48135 * C636 - C47229 * C631 +
             C26144 * C637 - C47239 * C632) *
                C48289 +
            (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 - C47229 * C1370 +
             C26144 * C1378 - C47239 * C1371) *
                C47362 +
            (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 - C47229 * C1377 +
             C26144 * C1383 - C47239 * C1379) *
                C26147) *
               C48239 * C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            (C26313 - C26314 + C26315 - C26316 + C26317 - C26318) * C47362 +
            (C26319 - C26320 + C26321 - C26322 + C26323 - C26324) * C26147) *
               C48239 * C48210 * C447 +
           ((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C47356 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48282 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C47348 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48289 +
            (C47233 * C1158 - C48127 * C1162 + C47229 * C1159 - C48135 * C1163 +
             C47239 * C1160 - C26144 * C1164) *
                C47362 +
            (C47233 * C1165 - C48127 * C1170 + C47229 * C1166 - C48135 * C1171 +
             C47239 * C1167 - C26144 * C1172) *
                C26147) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C47356 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48282 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C47348 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48289 +
            (C26337 - C26338 + C26339 - C26340 + C26341 - C26342) * C47362 +
            (C26343 - C26344 + C26345 - C26346 + C26347 - C26348) * C26147) *
               C48239 * C48210 * C447 +
           ((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C47356 +
            (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48282 +
            (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C47348 +
            (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48289 +
            (C48127 * C1163 - C47233 * C1159 + C48135 * C1164 - C47229 * C1160 +
             C26144 * C1168 - C47239 * C1161) *
                C47362 +
            (C48127 * C1171 - C47233 * C1166 + C48135 * C1172 - C47229 * C1167 +
             C26144 * C1173 - C47239 * C1169) *
                C26147) *
               C48239 * C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
            C26144 * C128 - C47239 * C121) *
               C47356 +
           (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
            C26144 * C142 - C47239 * C133) *
               C48282 +
           (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
           (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
           C26771 * C47362 + C26772 * C26147) *
              C48239 * C48210 * C513 +
          ((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C47356 +
           (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48282 +
           (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C47348 +
           (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48289 +
           (C26757 - C26758 + C26759 - C26760 + C26761 - C26762) * C47362 +
           (C26763 - C26764 + C26765 - C26766 + C26767 - C26768) * C26147) *
              C48239 * C48210 * C514 +
          (C26771 * C47356 + C26772 * C48282 +
           (C26758 - C26757 + C26760 - C26759 + C26762 - C26761) * C47348 +
           (C26764 - C26763 + C26766 - C26765 + C26768 - C26767) * C48289 +
           (C48127 * C1643 - C47233 * C1640 + C48135 * C1644 - C47229 * C1641 +
            C26144 * C1645 - C47239 * C1642) *
               C47362 +
           (C48127 * C1649 - C47233 * C1646 + C48135 * C1650 - C47229 * C1647 +
            C26144 * C1651 - C47239 * C1648) *
               C26147) *
              C48239 * C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            C26771 * C47362 + C26772 * C26147) *
               C48239 * C339 +
           ((C47233 * C341 - C48127 * C347 + C47229 * C342 - C48135 * C348 +
             C47239 * C343 - C26144 * C349) *
                C47356 +
            (C47233 * C352 - C48127 * C359 + C47229 * C353 - C48135 * C360 +
             C47239 * C354 - C26144 * C361) *
                C48282 +
            (C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C47348 +
            (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C48289 +
            (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C47362 +
            (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C26147) *
               C48239 * C48513) *
              C447 +
          (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C47356 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48282 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C47348 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48289 +
            (C26757 - C26758 + C26759 - C26760 + C26761 - C26762) * C47362 +
            (C26763 - C26764 + C26765 - C26766 + C26767 - C26768) * C26147) *
               C48239 * C339 +
           ((C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C47356 +
            (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48282 +
            (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C47348 +
            (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48289 +
            (C48127 * C1823 - C47233 * C1820 + C48135 * C1824 - C47229 * C1821 +
             C26144 * C1825 - C47239 * C1822) *
                C47362 +
            (C48127 * C1829 - C47233 * C1826 + C48135 * C1830 - C47229 * C1827 +
             C26144 * C1831 - C47239 * C1828) *
                C26147) *
               C48239 * C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            C26771 * C47362 + C26772 * C26147) *
               C48239 * C721 +
           ((C47233 * C341 - C48127 * C347 + C47229 * C342 - C48135 * C348 +
             C47239 * C343 - C26144 * C349) *
                C47356 +
            (C47233 * C352 - C48127 * C359 + C47229 * C353 - C48135 * C360 +
             C47239 * C354 - C26144 * C361) *
                C48282 +
            (C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C47348 +
            (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C48289 +
            (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C47362 +
            (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C26147) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C47356 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48282 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C47348 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48289 +
            (C26337 - C26338 + C26339 - C26340 + C26341 - C26342) * C47362 +
            (C26343 - C26344 + C26345 - C26346 + C26347 - C26348) * C26147) *
               C48239 * C721 +
           ((C48127 * C348 - C47233 * C342 + C48135 * C349 - C47229 * C343 +
             C26144 * C350 - C47239 * C344) *
                C47356 +
            (C48127 * C360 - C47233 * C353 + C48135 * C361 - C47229 * C354 +
             C26144 * C362 - C47239 * C355) *
                C48282 +
            (C48127 * C625 - C47233 * C620 + C48135 * C626 - C47229 * C621 +
             C26144 * C627 - C47239 * C622) *
                C47348 +
            (C48127 * C635 - C47233 * C630 + C48135 * C636 - C47229 * C631 +
             C26144 * C637 - C47239 * C632) *
                C48289 +
            (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 - C47229 * C1370 +
             C26144 * C1378 - C47239 * C1371) *
                C47362 +
            (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 - C47229 * C1377 +
             C26144 * C1383 - C47239 * C1379) *
                C26147) *
               C48239 * C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C47356 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48282 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
            C26771 * C47362 + C26772 * C26147) *
               C48239 * C721 +
           ((C47233 * C341 - C48127 * C347 + C47229 * C342 - C48135 * C348 +
             C47239 * C343 - C26144 * C349) *
                C47356 +
            (C47233 * C352 - C48127 * C359 + C47229 * C353 - C48135 * C360 +
             C47239 * C354 - C26144 * C361) *
                C48282 +
            (C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C47348 +
            (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C48289 +
            (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C47362 +
            (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C26147) *
               C48239 * C48513) *
              C229 +
          (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C47356 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48282 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C47348 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48289 +
            (C26757 - C26758 + C26759 - C26760 + C26761 - C26762) * C47362 +
            (C26763 - C26764 + C26765 - C26766 + C26767 - C26768) * C26147) *
               C48239 * C721 +
           ((C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C47356 +
            (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48282 +
            (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C47348 +
            (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48289 +
            (C48127 * C1823 - C47233 * C1820 + C48135 * C1824 - C47229 * C1821 +
             C26144 * C1825 - C47239 * C1822) *
                C47362 +
            (C48127 * C1829 - C47233 * C1826 + C48135 * C1830 - C47229 * C1827 +
             C26144 * C1831 - C47239 * C1828) *
                C26147) *
               C48239 * C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
            C26144 * C128 - C47239 * C121) *
               C47356 +
           (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
            C26144 * C142 - C47239 * C133) *
               C48282 +
           (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C47348 +
           (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48289 +
           C26771 * C47362 + C26772 * C26147) *
              C48239 * C867 +
          ((C47233 * C341 - C48127 * C347 + C47229 * C342 - C48135 * C348 +
            C47239 * C343 - C26144 * C349) *
               C47356 +
           (C47233 * C352 - C48127 * C359 + C47229 * C353 - C48135 * C360 +
            C47239 * C354 - C26144 * C361) *
               C48282 +
           (C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C47348 +
           (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C48289 +
           (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C47362 +
           (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C26147) *
              C48239 * C868 +
          ((C48127 * C875 - C47233 * C870 + C48135 * C876 - C47229 * C871 +
            C26144 * C877 - C47239 * C872) *
               C47356 +
           (C48127 * C885 - C47233 * C880 + C48135 * C886 - C47229 * C881 +
            C26144 * C887 - C47239 * C882) *
               C48282 +
           (C48127 * C2264 - C47233 * C2258 + C48135 * C2265 - C47229 * C2259 +
            C26144 * C2266 - C47239 * C2260) *
               C47348 +
           (C48127 * C2276 - C47233 * C2267 + C48135 * C2277 - C47229 * C2268 +
            C26144 * C2278 - C47239 * C2269) *
               C48289 +
           (C48127 * C2270 - C47233 * C2261 + C48135 * C2271 - C47229 * C2262 +
            C26144 * C2272 - C47239 * C2263) *
               C47362 +
           (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 - C47229 * C2274 +
            C26144 * C2281 - C47239 * C2275) *
               C26147) *
              C48239 * C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C47356 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48282 +
            (C23376 - C23377 + C23378 - C23379) * C47348 +
            (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
            C23799 * C26147) *
               C48484 +
           ((C24872 - C24873 + C24874 - C24875) * C47356 +
            (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
            C25471 * C48289 + (C23941 - C23940 + C23943 - C23942) * C47362 +
            (C23945 - C23944 + C23947 - C23946) * C26147) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C47356 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48282 +
            (C23400 - C23401 + C23402 - C23403) * C47348 +
            (C23404 - C23405 + C23406 - C23407) * C48289 +
            (C23408 - C23409 + C23410 - C23411) * C47362 +
            (C23412 - C23413 + C23414 - C23415) * C26147) *
               C48484 +
           ((C24888 - C24889 + C24890 - C24891) * C47356 +
            (C24892 - C24893 + C24894 - C24895) * C48282 +
            (C24662 - C24663 + C24664 - C24665) * C47348 +
            (C24666 - C24667 + C24668 - C24669) * C48289 +
            (C23239 * C1369 - C23233 * C1373 + C23240 * C1370 -
             C48132 * C1374) *
                C47362 +
            (C23239 * C1376 - C23233 * C1381 + C23240 * C1377 -
             C48132 * C1382) *
                C26147) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C47356 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C48282 +
            (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
                C47348 +
            (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
                C48289 +
            (C23233 * C524 - C23239 * C519 + C48132 * C525 - C23240 * C520) *
                C47362 +
            (C23233 * C534 - C23239 * C529 + C48132 * C535 - C23240 * C530) *
                C26147) *
               C48484 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C47356 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C48282 +
            (C23233 * C626 - C23239 * C621 + C48132 * C627 - C23240 * C622) *
                C47348 +
            (C23233 * C636 - C23239 * C631 + C48132 * C637 - C23240 * C632) *
                C48289 +
            (C23233 * C1374 - C23239 * C1370 + C48132 * C1378 -
             C23240 * C1371) *
                C47362 +
            (C23233 * C1382 - C23239 * C1377 + C48132 * C1383 -
             C23240 * C1379) *
                C26147) *
               C48326) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + (C23941 - C23940 + C23943 - C23942) * C47362 +
             (C23945 - C23944 + C23947 - C23946) * C26147) *
                C48326) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C47356 +
             (C23381 - C23380 + C23383 - C23382) * C48282 +
             (C23385 - C23384 + C23387 - C23386) * C47348 +
             (C23389 - C23388 + C23391 - C23390) * C48289 +
             (C23393 - C23392 + C23395 - C23394) * C47362 +
             (C23397 - C23396 + C23399 - C23398) * C26147) *
                C48484 +
            (C25474 * C47356 + C25475 * C48282 +
             (C23940 - C23941 + C23942 - C23943) * C47348 +
             (C23944 - C23945 + C23946 - C23947) * C48289 +
             (C23948 - C23949 + C23950 - C23951) * C47362 +
             (C23952 - C23953 + C23954 - C23955) * C26147) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C47356 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48282 +
             (C23400 - C23401 + C23402 - C23403) * C47348 +
             (C23404 - C23405 + C23406 - C23407) * C48289 +
             (C23408 - C23409 + C23410 - C23411) * C47362 +
             (C23412 - C23413 + C23414 - C23415) * C26147) *
                C48484 +
            ((C24888 - C24889 + C24890 - C24891) * C47356 +
             (C24892 - C24893 + C24894 - C24895) * C48282 +
             (C24662 - C24663 + C24664 - C24665) * C47348 +
             (C24666 - C24667 + C24668 - C24669) * C48289 +
             (C29367 - C29368 + C29369 - C29370) * C47362 +
             (C29371 - C29372 + C29373 - C29374) * C26147) *
                C48326) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C47356 +
             (C23405 - C23404 + C23407 - C23406) * C48282 +
             (C23409 - C23408 + C23411 - C23410) * C47348 +
             (C23413 - C23412 + C23415 - C23414) * C48289 +
             (C23417 - C23416 + C23419 - C23418) * C47362 +
             (C23421 - C23420 + C23423 - C23422) * C26147) *
                C48484 +
            ((C24663 - C24662 + C24665 - C24664) * C47356 +
             (C24667 - C24666 + C24669 - C24668) * C48282 +
             (C29368 - C29367 + C29370 - C29369) * C47348 +
             (C29372 - C29371 + C29374 - C29373) * C48289 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C47362 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C26147) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + (C23941 - C23940 + C23943 - C23942) * C47362 +
             (C23945 - C23944 + C23947 - C23946) * C26147) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C47356 +
             (C24877 - C24876 + C24879 - C24878) * C48282 + C25474 * C47348 +
             C25475 * C48289 + (C23940 - C23941 + C23942 - C23943) * C47362 +
             (C23944 - C23945 + C23946 - C23947) * C26147) *
                C48484 +
            ((C24881 - C24880 + C24883 - C24882) * C47356 +
             (C24885 - C24884 + C24887 - C24886) * C48282 + C25476 * C47348 +
             C25477 * C48289 + (C25244 - C25245 + C25246 - C25247) * C47362 +
             (C25248 - C25249 + C25250 - C25251) * C26147) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C47356 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48282 +
             (C23400 - C23401 + C23402 - C23403) * C47348 +
             (C23404 - C23405 + C23406 - C23407) * C48289 +
             (C23408 - C23409 + C23410 - C23411) * C47362 +
             (C23412 - C23413 + C23414 - C23415) * C26147) *
                C48484 +
            ((C24888 - C24889 + C24890 - C24891) * C47356 +
             (C24892 - C24893 + C24894 - C24895) * C48282 +
             (C24662 - C24663 + C24664 - C24665) * C47348 +
             (C24666 - C24667 + C24668 - C24669) * C48289 +
             (C29367 - C29368 + C29369 - C29370) * C47362 +
             (C29371 - C29372 + C29373 - C29374) * C26147) *
                C48326) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C47356 +
             (C24893 - C24892 + C24895 - C24894) * C48282 +
             (C24663 - C24662 + C24665 - C24664) * C47348 +
             (C24667 - C24666 + C24669 - C24668) * C48289 +
             (C29368 - C29367 + C29370 - C29369) * C47362 +
             (C29372 - C29371 + C29374 - C29373) * C26147) *
                C48484 +
            ((C24897 - C24896 + C24899 - C24898) * C47356 +
             (C24901 - C24900 + C24903 - C24902) * C48282 +
             (C24671 - C24670 + C24673 - C24672) * C47348 +
             (C24675 - C24674 + C24677 - C24676) * C48289 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C47362 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C26147) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + (C23941 - C23940 + C23943 - C23942) * C47362 +
             (C23945 - C23944 + C23947 - C23946) * C26147) *
                C48326) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C47356 +
             (C23381 - C23380 + C23383 - C23382) * C48282 +
             (C23385 - C23384 + C23387 - C23386) * C47348 +
             (C23389 - C23388 + C23391 - C23390) * C48289 +
             (C23393 - C23392 + C23395 - C23394) * C47362 +
             (C23397 - C23396 + C23399 - C23398) * C26147) *
                C48484 +
            (C25474 * C47356 + C25475 * C48282 +
             (C23940 - C23941 + C23942 - C23943) * C47348 +
             (C23944 - C23945 + C23946 - C23947) * C48289 +
             (C23948 - C23949 + C23950 - C23951) * C47362 +
             (C23952 - C23953 + C23954 - C23955) * C26147) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C47356 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48282 +
             (C23400 - C23401 + C23402 - C23403) * C47348 +
             (C23404 - C23405 + C23406 - C23407) * C48289 +
             (C23408 - C23409 + C23410 - C23411) * C47362 +
             (C23412 - C23413 + C23414 - C23415) * C26147) *
                C48484 +
            ((C24888 - C24889 + C24890 - C24891) * C47356 +
             (C24892 - C24893 + C24894 - C24895) * C48282 +
             (C24662 - C24663 + C24664 - C24665) * C47348 +
             (C24666 - C24667 + C24668 - C24669) * C48289 +
             (C29367 - C29368 + C29369 - C29370) * C47362 +
             (C29371 - C29372 + C29373 - C29374) * C26147) *
                C48326) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C47356 +
             (C23405 - C23404 + C23407 - C23406) * C48282 +
             (C23409 - C23408 + C23411 - C23410) * C47348 +
             (C23413 - C23412 + C23415 - C23414) * C48289 +
             (C23417 - C23416 + C23419 - C23418) * C47362 +
             (C23421 - C23420 + C23423 - C23422) * C26147) *
                C48484 +
            ((C24663 - C24662 + C24665 - C24664) * C47356 +
             (C24667 - C24666 + C24669 - C24668) * C48282 +
             (C29368 - C29367 + C29370 - C29369) * C47348 +
             (C29372 - C29371 + C29374 - C29373) * C48289 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C47362 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C26147) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C47356 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48282 +
            (C23376 - C23377 + C23378 - C23379) * C47348 +
            (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
            C23799 * C26147) *
               C48484 +
           ((C24872 - C24873 + C24874 - C24875) * C47356 +
            (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
            C25471 * C48289 + C29913 * C47362 + C29914 * C26147) *
               C48326) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C47356 +
            (C23381 - C23380 + C23383 - C23382) * C48282 +
            (C23385 - C23384 + C23387 - C23386) * C47348 +
            (C23389 - C23388 + C23391 - C23390) * C48289 +
            (C23393 - C23392 + C23395 - C23394) * C47362 +
            (C23397 - C23396 + C23399 - C23398) * C26147) *
               C48484 +
           (C25474 * C47356 + C25475 * C48282 +
            (C23940 - C23941 + C23942 - C23943) * C47348 +
            (C23944 - C23945 + C23946 - C23947) * C48289 +
            (C23948 - C23949 + C23950 - C23951) * C47362 +
            (C23952 - C23953 + C23954 - C23955) * C26147) *
               C48326) *
              C48210 * C514 +
          ((C23798 * C47356 + C23799 * C48282 + C23800 * C47348 +
            C23801 * C48289 + (C23791 - C23790 + C23793 - C23792) * C47362 +
            (C23795 - C23794 + C23797 - C23796) * C26147) *
               C48484 +
           (C29913 * C47356 + C29914 * C48282 +
            (C23949 - C23948 + C23951 - C23950) * C47348 +
            (C23953 - C23952 + C23955 - C23954) * C48289 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C47362 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C26147) *
               C48326) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + C29913 * C47362 + C29914 * C26147) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C47356 +
             (C24877 - C24876 + C24879 - C24878) * C48282 + C25474 * C47348 +
             C25475 * C48289 + C30113 * C47362 + C30114 * C26147) *
                C48484 +
            ((C24881 - C24880 + C24883 - C24882) * C47356 +
             (C24885 - C24884 + C24887 - C24886) * C48282 + C25476 * C47348 +
             C25477 * C48289 + (C25244 - C25245 + C25246 - C25247) * C47362 +
             (C25248 - C25249 + C25250 - C25251) * C26147) *
                C48326) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C47356 +
             (C23381 - C23380 + C23383 - C23382) * C48282 +
             (C23385 - C23384 + C23387 - C23386) * C47348 +
             (C23389 - C23388 + C23391 - C23390) * C48289 +
             (C23393 - C23392 + C23395 - C23394) * C47362 +
             (C23397 - C23396 + C23399 - C23398) * C26147) *
                C48484 +
            (C25474 * C47356 + C25475 * C48282 + C30113 * C47348 +
             C30114 * C48289 + (C23948 - C23949 + C23950 - C23951) * C47362 +
             (C23952 - C23953 + C23954 - C23955) * C26147) *
                C48326) *
               C339 +
           ((C25470 * C47356 + C25471 * C48282 + C29913 * C47348 +
             C29914 * C48289 + (C23949 - C23948 + C23951 - C23950) * C47362 +
             (C23953 - C23952 + C23955 - C23954) * C26147) *
                C48484 +
            (C25472 * C47356 + C25473 * C48282 +
             (C25245 - C25244 + C25247 - C25246) * C47348 +
             (C25249 - C25248 + C25251 - C25250) * C48289 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C47362 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C26147) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + C29913 * C47362 + C29914 * C26147) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C47356 +
             (C24877 - C24876 + C24879 - C24878) * C48282 + C25474 * C47348 +
             C25475 * C48289 + C30113 * C47362 + C30114 * C26147) *
                C48484 +
            ((C24881 - C24880 + C24883 - C24882) * C47356 +
             (C24885 - C24884 + C24887 - C24886) * C48282 + C25476 * C47348 +
             C25477 * C48289 + (C25244 - C25245 + C25246 - C25247) * C47362 +
             (C25248 - C25249 + C25250 - C25251) * C26147) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C47356 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48282 +
             (C23400 - C23401 + C23402 - C23403) * C47348 +
             (C23404 - C23405 + C23406 - C23407) * C48289 +
             (C23408 - C23409 + C23410 - C23411) * C47362 +
             (C23412 - C23413 + C23414 - C23415) * C26147) *
                C48484 +
            ((C24888 - C24889 + C24890 - C24891) * C47356 +
             (C24892 - C24893 + C24894 - C24895) * C48282 +
             (C24662 - C24663 + C24664 - C24665) * C47348 +
             (C24666 - C24667 + C24668 - C24669) * C48289 +
             (C29367 - C29368 + C29369 - C29370) * C47362 +
             (C29371 - C29372 + C29373 - C29374) * C26147) *
                C48326) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C47356 +
             (C24893 - C24892 + C24895 - C24894) * C48282 +
             (C24663 - C24662 + C24665 - C24664) * C47348 +
             (C24667 - C24666 + C24669 - C24668) * C48289 +
             (C29368 - C29367 + C29370 - C29369) * C47362 +
             (C29372 - C29371 + C29374 - C29373) * C26147) *
                C48484 +
            ((C24897 - C24896 + C24899 - C24898) * C47356 +
             (C24901 - C24900 + C24903 - C24902) * C48282 +
             (C24671 - C24670 + C24673 - C24672) * C47348 +
             (C24675 - C24674 + C24677 - C24676) * C48289 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C47362 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C26147) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C47356 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48282 +
             (C23376 - C23377 + C23378 - C23379) * C47348 +
             (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
             C23799 * C26147) *
                C48484 +
            ((C24872 - C24873 + C24874 - C24875) * C47356 +
             (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
             C25471 * C48289 + C29913 * C47362 + C29914 * C26147) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C47356 +
             (C24877 - C24876 + C24879 - C24878) * C48282 + C25474 * C47348 +
             C25475 * C48289 + C30113 * C47362 + C30114 * C26147) *
                C48484 +
            ((C24881 - C24880 + C24883 - C24882) * C47356 +
             (C24885 - C24884 + C24887 - C24886) * C48282 + C25476 * C47348 +
             C25477 * C48289 + (C25244 - C25245 + C25246 - C25247) * C47362 +
             (C25248 - C25249 + C25250 - C25251) * C26147) *
                C48326) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C47356 +
             (C23381 - C23380 + C23383 - C23382) * C48282 +
             (C23385 - C23384 + C23387 - C23386) * C47348 +
             (C23389 - C23388 + C23391 - C23390) * C48289 +
             (C23393 - C23392 + C23395 - C23394) * C47362 +
             (C23397 - C23396 + C23399 - C23398) * C26147) *
                C48484 +
            (C25474 * C47356 + C25475 * C48282 + C30113 * C47348 +
             C30114 * C48289 + (C23948 - C23949 + C23950 - C23951) * C47362 +
             (C23952 - C23953 + C23954 - C23955) * C26147) *
                C48326) *
               C721 +
           ((C25470 * C47356 + C25471 * C48282 + C29913 * C47348 +
             C29914 * C48289 + (C23949 - C23948 + C23951 - C23950) * C47362 +
             (C23953 - C23952 + C23955 - C23954) * C26147) *
                C48484 +
            (C25472 * C47356 + C25473 * C48282 +
             (C25245 - C25244 + C25247 - C25246) * C47348 +
             (C25249 - C25248 + C25251 - C25250) * C48289 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C47362 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C26147) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C47356 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48282 +
            (C23376 - C23377 + C23378 - C23379) * C47348 +
            (C23380 - C23381 + C23382 - C23383) * C48289 + C23798 * C47362 +
            C23799 * C26147) *
               C48484 +
           ((C24872 - C24873 + C24874 - C24875) * C47356 +
            (C24876 - C24877 + C24878 - C24879) * C48282 + C25470 * C47348 +
            C25471 * C48289 + C29913 * C47362 + C29914 * C26147) *
               C48326) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C47356 +
            (C24877 - C24876 + C24879 - C24878) * C48282 + C25474 * C47348 +
            C25475 * C48289 + C30113 * C47362 + C30114 * C26147) *
               C48484 +
           ((C24881 - C24880 + C24883 - C24882) * C47356 +
            (C24885 - C24884 + C24887 - C24886) * C48282 + C25476 * C47348 +
            C25477 * C48289 + (C25244 - C25245 + C25246 - C25247) * C47362 +
            (C25248 - C25249 + C25250 - C25251) * C26147) *
               C48326) *
              C868 +
          ((C26026 * C47356 + C26027 * C48282 + C25472 * C47348 +
            C25473 * C48289 + (C25245 - C25244 + C25247 - C25246) * C47362 +
            (C25249 - C25248 + C25251 - C25250) * C26147) *
               C48484 +
           ((C26019 - C26018 + C26021 - C26020) * C47356 +
            (C26023 - C26022 + C26025 - C26024) * C48282 +
            (C25463 - C25462 + C25465 - C25464) * C47348 +
            (C25467 - C25466 + C25469 - C25468) * C48289 +
            (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
             C23240 * C10051) *
                C47362 +
            (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
             C23240 * C10055) *
                C26147) *
               C48326) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23233 * C239 - C23239 * C233 + C48132 * C240 - C23240 * C234) *
               C23242 +
           (C23233 * C251 - C23239 * C244 + C48132 * C252 - C23240 * C245) *
               C48554 +
           (C23233 * C522 - C23239 * C517 + C48132 * C523 - C23240 * C518) *
               C23243 +
           (C23233 * C532 - C23239 * C527 + C48132 * C533 - C23240 * C528) *
               C48544 +
           (C23233 * C1162 - C23239 * C1158 + C48132 * C1163 - C23240 * C1159) *
               C23244 +
           (C23233 * C1170 - C23239 * C1165 + C48132 * C1171 - C23240 * C1166) *
               C48526) *
              C48239 * C48210 * C48193 * C110 +
          ((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
               C23241 +
           (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
               C48558 +
           (C23239 * C234 - C23233 * C240 + C23240 * C235 - C48132 * C241) *
               C23242 +
           (C23239 * C245 - C23233 * C252 + C23240 * C246 - C48132 * C253) *
               C48554 +
           (C23239 * C518 - C23233 * C523 + C23240 * C519 - C48132 * C524) *
               C23243 +
           (C23239 * C528 - C23233 * C533 + C23240 * C529 - C48132 * C534) *
               C48544 +
           (C23239 * C1159 - C23233 * C1163 + C23240 * C1160 - C48132 * C1164) *
               C23244 +
           (C23239 * C1166 - C23233 * C1171 + C23240 * C1167 - C48132 * C1172) *
               C48526) *
              C48239 * C48210 * C48193 * C111 +
          ((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
               C23241 +
           (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
               C48558 +
           (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
               C23242 +
           (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
               C48554 +
           (C23233 * C524 - C23239 * C519 + C48132 * C525 - C23240 * C520) *
               C23243 +
           (C23233 * C534 - C23239 * C529 + C48132 * C535 - C23240 * C530) *
               C48544 +
           (C23233 * C1164 - C23239 * C1160 + C48132 * C1168 - C23240 * C1161) *
               C23244 +
           (C23233 * C1172 - C23239 * C1167 + C48132 * C1173 - C23240 * C1169) *
               C48526) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C48557 * C239 - C22089 * C233 + C48550 * C240 - C22090 * C234 +
            C48537 * C241 - C22091 * C235 + C48520 * C242 - C22092 * C236) *
               C22094 +
           (C48557 * C251 - C22089 * C244 + C48550 * C252 - C22090 * C245 +
            C48537 * C253 - C22091 * C246 + C48520 * C254 - C22092 * C247) *
               C48286) *
              C48239 * C48210 * C48193 * C110 +
          ((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
            C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
               C22093 +
           (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
            C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
               C22087 +
           (C22089 * C234 - C48557 * C240 + C22090 * C235 - C48550 * C241 +
            C22091 * C236 - C48537 * C242 + C22092 * C237 - C48520 * C243) *
               C22094 +
           (C22089 * C245 - C48557 * C252 + C22090 * C246 - C48550 * C253 +
            C22091 * C247 - C48537 * C254 + C22092 * C248 - C48520 * C255) *
               C48286) *
              C48239 * C48210 * C48193 * C111 +
          ((C48557 * C128 - C22089 * C121 + C48550 * C129 - C22090 * C122 +
            C48537 * C130 - C22091 * C123 + C48520 * C136 - C22092 * C124) *
               C22093 +
           (C48557 * C142 - C22089 * C133 + C48550 * C143 - C22090 * C134 +
            C48537 * C144 - C22091 * C135 + C48520 * C145 - C22092 * C137) *
               C22087 +
           (C48557 * C241 - C22089 * C235 + C48550 * C242 - C22090 * C236 +
            C48537 * C243 - C22091 * C237 + C48520 * C249 - C22092 * C238) *
               C22094 +
           (C48557 * C253 - C22089 * C246 + C48550 * C254 - C22090 * C247 +
            C48537 * C255 - C22091 * C248 + C48520 * C256 - C22092 * C250) *
               C48286) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C22093 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C22087 +
            (C23376 - C23377 + C23378 - C23379) * C22094 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48552 +
           ((C23233 * C347 - C23239 * C341 + C48132 * C348 - C23240 * C342) *
                C22093 +
            (C23233 * C359 - C23239 * C352 + C48132 * C360 - C23240 * C353) *
                C22087 +
            (C23933 - C23932 + C23935 - C23934) * C22094 +
            (C23937 - C23936 + C23939 - C23938) * C48286) *
               C48541 +
           ((C23233 * C875 - C23239 * C870 + C48132 * C876 - C23240 * C871) *
                C22093 +
            (C23233 * C885 - C23239 * C880 + C48132 * C886 - C23240 * C881) *
                C22087 +
            (C23233 * C2264 - C23239 * C2258 + C48132 * C2265 -
             C23240 * C2259) *
                C22094 +
            (C23233 * C2276 - C23239 * C2267 + C48132 * C2277 -
             C23240 * C2268) *
                C48286) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C22093 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C22087 +
            (C23400 - C23401 + C23402 - C23403) * C22094 +
            (C23404 - C23405 + C23406 - C23407) * C48286) *
               C48552 +
           ((C23239 * C342 - C23233 * C348 + C23240 * C343 - C48132 * C349) *
                C22093 +
            (C23239 * C353 - C23233 * C360 + C23240 * C354 - C48132 * C361) *
                C22087 +
            (C23239 * C620 - C23233 * C625 + C23240 * C621 - C48132 * C626) *
                C22094 +
            (C23239 * C630 - C23233 * C635 + C23240 * C631 - C48132 * C636) *
                C48286) *
               C48541 +
           ((C23239 * C871 - C23233 * C876 + C23240 * C872 - C48132 * C877) *
                C22093 +
            (C23239 * C881 - C23233 * C886 + C23240 * C882 - C48132 * C887) *
                C22087 +
            (C23239 * C2259 - C23233 * C2265 + C23240 * C2260 -
             C48132 * C2266) *
                C22094 +
            (C23239 * C2268 - C23233 * C2277 + C23240 * C2269 -
             C48132 * C2278) *
                C48286) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C22093 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C22087 +
            (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
                C22094 +
            (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
                C48286) *
               C48552 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C22093 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C22087 +
            (C23233 * C626 - C23239 * C621 + C48132 * C627 - C23240 * C622) *
                C22094 +
            (C23233 * C636 - C23239 * C631 + C48132 * C637 - C23240 * C632) *
                C48286) *
               C48541 +
           ((C23233 * C877 - C23239 * C872 + C48132 * C878 - C23240 * C873) *
                C22093 +
            (C23233 * C887 - C23239 * C882 + C48132 * C888 - C23240 * C883) *
                C22087 +
            (C23233 * C2266 - C23239 * C2260 + C48132 * C2542 -
             C23240 * C2541) *
                C22094 +
            (C23233 * C2278 - C23239 * C2269 + C48132 * C2544 -
             C23240 * C2543) *
                C48286) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C48210 * C229 +
           ((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23239 * C1640 - C23233 * C1643 + C23240 * C1641 -
             C48132 * C1644) *
                C23244 +
            (C23239 * C1646 - C23233 * C1649 + C23240 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C48210 * C229 +
           ((C23401 - C23400 + C23403 - C23402) * C23241 +
            (C23405 - C23404 + C23407 - C23406) * C48558 +
            (C23409 - C23408 + C23411 - C23410) * C23242 +
            (C23413 - C23412 + C23415 - C23414) * C48554 +
            (C23417 - C23416 + C23419 - C23418) * C23243 +
            (C23421 - C23420 + C23423 - C23422) * C48544 +
            (C23233 * C1644 - C23239 * C1641 + C48132 * C1645 -
             C23240 * C1642) *
                C23244 +
            (C23233 * C1650 - C23239 * C1647 + C48132 * C1651 -
             C23240 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22089 * C517 - C48557 * C522 + C22090 * C518 - C48550 * C523 +
             C22091 * C519 - C48537 * C524 + C22092 * C520 - C48520 * C525) *
                C22094 +
            (C22089 * C527 - C48557 * C532 + C22090 * C528 - C48550 * C533 +
             C22091 * C529 - C48537 * C534 + C22092 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
             C22248) *
                C22093 +
            (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
             C22256) *
                C22087 +
            (C48557 * C523 - C22089 * C518 + C48550 * C524 - C22090 * C519 +
             C48537 * C525 - C22091 * C520 + C48520 * C526 - C22092 * C521) *
                C22094 +
            (C48557 * C533 - C22089 * C528 + C48550 * C534 - C22090 * C529 +
             C48537 * C535 - C22091 * C530 + C48520 * C536 - C22092 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C23233 * C347 - C23239 * C341 + C48132 * C348 - C23240 * C342) *
                 C22093 +
             (C23233 * C359 - C23239 * C352 + C48132 * C360 - C23240 * C353) *
                 C22087 +
             (C23933 - C23932 + C23935 - C23934) * C22094 +
             (C23937 - C23936 + C23939 - C23938) * C48286) *
                C48541 +
            ((C23233 * C875 - C23239 * C870 + C48132 * C876 - C23240 * C871) *
                 C22093 +
             (C23233 * C885 - C23239 * C880 + C48132 * C886 - C23240 * C881) *
                 C22087 +
             (C24654 - C24655 + C24656 - C24657) * C22094 +
             (C24658 - C24659 + C24660 - C24661) * C48286) *
                C48519) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C22093 +
             (C23381 - C23380 + C23383 - C23382) * C22087 +
             (C23385 - C23384 + C23387 - C23386) * C22094 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48552 +
            ((C23932 - C23933 + C23934 - C23935) * C22093 +
             (C23936 - C23937 + C23938 - C23939) * C22087 +
             (C23940 - C23941 + C23942 - C23943) * C22094 +
             (C23944 - C23945 + C23946 - C23947) * C48286) *
                C48541 +
            ((C24655 - C24654 + C24657 - C24656) * C22093 +
             (C24659 - C24658 + C24661 - C24660) * C22087 +
             (C23239 * C2261 - C23233 * C2270 + C23240 * C2262 -
              C48132 * C2271) *
                 C22094 +
             (C23239 * C2273 - C23233 * C2279 + C23240 * C2274 -
              C48132 * C2280) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C22093 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C22087 +
             (C23400 - C23401 + C23402 - C23403) * C22094 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48552 +
            ((C23239 * C342 - C23233 * C348 + C23240 * C343 - C48132 * C349) *
                 C22093 +
             (C23239 * C353 - C23233 * C360 + C23240 * C354 - C48132 * C361) *
                 C22087 +
             (C24662 - C24663 + C24664 - C24665) * C22094 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48541 +
            ((C23239 * C871 - C23233 * C876 + C23240 * C872 - C48132 * C877) *
                 C22093 +
             (C23239 * C881 - C23233 * C886 + C23240 * C882 - C48132 * C887) *
                 C22087 +
             (C24670 - C24671 + C24672 - C24673) * C22094 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C48519) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C22093 +
             (C23405 - C23404 + C23407 - C23406) * C22087 +
             (C23409 - C23408 + C23411 - C23410) * C22094 +
             (C23413 - C23412 + C23415 - C23414) * C48286) *
                C48552 +
            ((C24663 - C24662 + C24665 - C24664) * C22093 +
             (C24667 - C24666 + C24669 - C24668) * C22087 +
             (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
              C23240 * C1370) *
                 C22094 +
             (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
              C23240 * C1377) *
                 C48286) *
                C48541 +
            ((C24671 - C24670 + C24673 - C24672) * C22093 +
             (C24675 - C24674 + C24677 - C24676) * C22087 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C22094 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C339 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23239 * C619 - C23233 * C624 + C23240 * C620 - C48132 * C625) *
                C23242 +
            (C23239 * C629 - C23233 * C634 + C23240 * C630 - C48132 * C635) *
                C48554 +
            (C23239 * C1368 - C23233 * C1372 + C23240 * C1369 -
             C48132 * C1373) *
                C23243 +
            (C23239 * C1375 - C23233 * C1380 + C23240 * C1376 -
             C48132 * C1381) *
                C48544 +
            (C23239 * C1820 - C23233 * C1823 + C23240 * C1821 -
             C48132 * C1824) *
                C23244 +
            (C23239 * C1826 - C23233 * C1829 + C23240 * C1827 -
             C48132 * C1830) *
                C48526) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C339 +
           ((C23233 * C348 - C23239 * C342 + C48132 * C349 - C23240 * C343) *
                C23241 +
            (C23233 * C360 - C23239 * C353 + C48132 * C361 - C23240 * C354) *
                C48558 +
            (C23233 * C625 - C23239 * C620 + C48132 * C626 - C23240 * C621) *
                C23242 +
            (C23233 * C635 - C23239 * C630 + C48132 * C636 - C23240 * C631) *
                C48554 +
            (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
             C23240 * C1370) *
                C23243 +
            (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
             C23240 * C1377) *
                C48544 +
            (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
             C23240 * C1822) *
                C23244 +
            (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
             C23240 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C339 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22089 * C619 - C48557 * C624 + C22090 * C620 - C48550 * C625 +
             C22091 * C621 - C48537 * C626 + C22092 * C622 - C48520 * C627) *
                C22094 +
            (C22089 * C629 - C48557 * C634 + C22090 * C630 - C48550 * C635 +
             C22091 * C631 - C48537 * C636 + C22092 * C632 - C48520 * C637) *
                C48286) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C339 +
           ((C48557 * C348 - C22089 * C342 + C48550 * C349 - C22090 * C343 +
             C48537 * C350 - C22091 * C344 + C48520 * C351 - C22092 * C345) *
                C22093 +
            (C48557 * C360 - C22089 * C353 + C48550 * C361 - C22090 * C354 +
             C48537 * C362 - C22091 * C355 + C48520 * C363 - C22092 * C356) *
                C22087 +
            (C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
             C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                C22094 +
            (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
             C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C24872 - C24873 + C24874 - C24875) * C22093 +
             (C24876 - C24877 + C24878 - C24879) * C22087 +
             (C23933 - C23932 + C23935 - C23934) * C22094 +
             (C23937 - C23936 + C23939 - C23938) * C48286) *
                C48541 +
            ((C24880 - C24881 + C24882 - C24883) * C22093 +
             (C24884 - C24885 + C24886 - C24887) * C22087 +
             (C24654 - C24655 + C24656 - C24657) * C22094 +
             (C24658 - C24659 + C24660 - C24661) * C48286) *
                C48519) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C22093 +
             (C24877 - C24876 + C24879 - C24878) * C22087 +
             (C23932 - C23933 + C23934 - C23935) * C22094 +
             (C23936 - C23937 + C23938 - C23939) * C48286) *
                C48552 +
            ((C24881 - C24880 + C24883 - C24882) * C22093 +
             (C24885 - C24884 + C24887 - C24886) * C22087 +
             (C24655 - C24654 + C24657 - C24656) * C22094 +
             (C24659 - C24658 + C24661 - C24660) * C48286) *
                C48541 +
            ((C23239 * C2691 - C23233 * C2695 + C23240 * C2692 -
              C48132 * C2696) *
                 C22093 +
             (C23239 * C2698 - C23233 * C2703 + C23240 * C2699 -
              C48132 * C2704) *
                 C22087 +
             (C23239 * C3157 - C23233 * C3160 + C23240 * C3158 -
              C48132 * C3161) *
                 C22094 +
             (C23239 * C3163 - C23233 * C3166 + C23240 * C3164 -
              C48132 * C3167) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C22093 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C22087 +
             (C23400 - C23401 + C23402 - C23403) * C22094 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48552 +
            ((C24888 - C24889 + C24890 - C24891) * C22093 +
             (C24892 - C24893 + C24894 - C24895) * C22087 +
             (C24662 - C24663 + C24664 - C24665) * C22094 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48541 +
            ((C24896 - C24897 + C24898 - C24899) * C22093 +
             (C24900 - C24901 + C24902 - C24903) * C22087 +
             (C24670 - C24671 + C24672 - C24673) * C22094 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C48519) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C22093 +
             (C24893 - C24892 + C24895 - C24894) * C22087 +
             (C24663 - C24662 + C24665 - C24664) * C22094 +
             (C24667 - C24666 + C24669 - C24668) * C48286) *
                C48552 +
            ((C24897 - C24896 + C24899 - C24898) * C22093 +
             (C24901 - C24900 + C24903 - C24902) * C22087 +
             (C24671 - C24670 + C24673 - C24672) * C22094 +
             (C24675 - C24674 + C24677 - C24676) * C48286) *
                C48541 +
            ((C23233 * C2696 - C23239 * C2692 + C48132 * C2697 -
              C23240 * C2693) *
                 C22093 +
             (C23233 * C2704 - C23239 * C2699 + C48132 * C2705 -
              C23240 * C2700) *
                 C22087 +
             (C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C22094 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C48210 * C447 +
           ((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23239 * C1640 - C23233 * C1643 + C23240 * C1641 -
             C48132 * C1644) *
                C23244 +
            (C23239 * C1646 - C23233 * C1649 + C23240 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C48210 * C447 +
           ((C23401 - C23400 + C23403 - C23402) * C23241 +
            (C23405 - C23404 + C23407 - C23406) * C48558 +
            (C23409 - C23408 + C23411 - C23410) * C23242 +
            (C23413 - C23412 + C23415 - C23414) * C48554 +
            (C23417 - C23416 + C23419 - C23418) * C23243 +
            (C23421 - C23420 + C23423 - C23422) * C48544 +
            (C23233 * C1644 - C23239 * C1641 + C48132 * C1645 -
             C23240 * C1642) *
                C23244 +
            (C23233 * C1650 - C23239 * C1647 + C48132 * C1651 -
             C23240 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22089 * C517 - C48557 * C522 + C22090 * C518 - C48550 * C523 +
             C22091 * C519 - C48537 * C524 + C22092 * C520 - C48520 * C525) *
                C22094 +
            (C22089 * C527 - C48557 * C532 + C22090 * C528 - C48550 * C533 +
             C22091 * C529 - C48537 * C534 + C22092 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
             C22248) *
                C22093 +
            (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
             C22256) *
                C22087 +
            (C48557 * C523 - C22089 * C518 + C48550 * C524 - C22090 * C519 +
             C48537 * C525 - C22091 * C520 + C48520 * C526 - C22092 * C521) *
                C22094 +
            (C48557 * C533 - C22089 * C528 + C48550 * C534 - C22090 * C529 +
             C48537 * C535 - C22091 * C530 + C48520 * C536 - C22092 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C24872 - C24873 + C24874 - C24875) * C22093 +
             (C24876 - C24877 + C24878 - C24879) * C22087 +
             (C23933 - C23932 + C23935 - C23934) * C22094 +
             (C23937 - C23936 + C23939 - C23938) * C48286) *
                C48541 +
            ((C24880 - C24881 + C24882 - C24883) * C22093 +
             (C24884 - C24885 + C24886 - C24887) * C22087 +
             (C24654 - C24655 + C24656 - C24657) * C22094 +
             (C24658 - C24659 + C24660 - C24661) * C48286) *
                C48519) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C22093 +
             (C23381 - C23380 + C23383 - C23382) * C22087 +
             (C23385 - C23384 + C23387 - C23386) * C22094 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48552 +
            ((C23932 - C23933 + C23934 - C23935) * C22093 +
             (C23936 - C23937 + C23938 - C23939) * C22087 +
             (C23940 - C23941 + C23942 - C23943) * C22094 +
             (C23944 - C23945 + C23946 - C23947) * C48286) *
                C48541 +
            ((C24655 - C24654 + C24657 - C24656) * C22093 +
             (C24659 - C24658 + C24661 - C24660) * C22087 +
             (C23239 * C2261 - C23233 * C2270 + C23240 * C2262 -
              C48132 * C2271) *
                 C22094 +
             (C23239 * C2273 - C23233 * C2279 + C23240 * C2274 -
              C48132 * C2280) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C22093 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C22087 +
             (C23400 - C23401 + C23402 - C23403) * C22094 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48552 +
            ((C24888 - C24889 + C24890 - C24891) * C22093 +
             (C24892 - C24893 + C24894 - C24895) * C22087 +
             (C24662 - C24663 + C24664 - C24665) * C22094 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48541 +
            ((C24896 - C24897 + C24898 - C24899) * C22093 +
             (C24900 - C24901 + C24902 - C24903) * C22087 +
             (C24670 - C24671 + C24672 - C24673) * C22094 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C48519) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C22093 +
             (C23405 - C23404 + C23407 - C23406) * C22087 +
             (C23409 - C23408 + C23411 - C23410) * C22094 +
             (C23413 - C23412 + C23415 - C23414) * C48286) *
                C48552 +
            ((C24663 - C24662 + C24665 - C24664) * C22093 +
             (C24667 - C24666 + C24669 - C24668) * C22087 +
             (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
              C23240 * C1370) *
                 C22094 +
             (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
              C23240 * C1377) *
                 C48286) *
                C48541 +
            ((C24671 - C24670 + C24673 - C24672) * C22093 +
             (C24675 - C24674 + C24677 - C24676) * C22087 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C22094 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23376 - C23377 + C23378 - C23379) * C23242 +
           (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
           C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
              C48239 * C48210 * C513 +
          ((C23377 - C23376 + C23379 - C23378) * C23241 +
           (C23381 - C23380 + C23383 - C23382) * C48558 +
           (C23385 - C23384 + C23387 - C23386) * C23242 +
           (C23389 - C23388 + C23391 - C23390) * C48554 +
           (C23393 - C23392 + C23395 - C23394) * C23243 +
           (C23397 - C23396 + C23399 - C23398) * C48544 +
           (C23790 - C23791 + C23792 - C23793) * C23244 +
           (C23794 - C23795 + C23796 - C23797) * C48526) *
              C48239 * C48210 * C514 +
          (C23798 * C23241 + C23799 * C48558 + C23800 * C23242 +
           C23801 * C48554 + (C23791 - C23790 + C23793 - C23792) * C23243 +
           (C23795 - C23794 + C23797 - C23796) * C48544 +
           (C23233 * C8998 - C23239 * C8996 + C48132 * C9000 - C23240 * C8997) *
               C23244 +
           (C23233 * C9002 - C23239 * C8999 + C48132 * C9003 - C23240 * C9001) *
               C48526) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
            C22233) *
               C22094 +
           (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
            C22241) *
               C48286) *
              C48239 * C48210 * C513 +
          ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
            C22232) *
               C22093 +
           (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
            C22240) *
               C22087 +
           (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
            C22623) *
               C22094 +
           (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
            C22631) *
               C48286) *
              C48239 * C48210 * C514 +
          ((C22617 - C22616 + C22619 - C22618 + C22621 - C22620 + C22623 -
            C22622) *
               C22093 +
           (C22625 - C22624 + C22627 - C22626 + C22629 - C22628 + C22631 -
            C22630) *
               C22087 +
           (C48557 * C1162 - C22089 * C1158 + C48550 * C1163 - C22090 * C1159 +
            C48537 * C1164 - C22091 * C1160 + C48520 * C1168 - C22092 * C1161) *
               C22094 +
           (C48557 * C1170 - C22089 * C1165 + C48550 * C1171 - C22090 * C1166 +
            C48537 * C1172 - C22091 * C1167 + C48520 * C1173 - C22092 * C1169) *
               C48286) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C22093 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C22087 +
            (C23376 - C23377 + C23378 - C23379) * C22094 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48552 +
           ((C24872 - C24873 + C24874 - C24875) * C22093 +
            (C24876 - C24877 + C24878 - C24879) * C22087 +
            (C23933 - C23932 + C23935 - C23934) * C22094 +
            (C23937 - C23936 + C23939 - C23938) * C48286) *
               C48541 +
           ((C24880 - C24881 + C24882 - C24883) * C22093 +
            (C24884 - C24885 + C24886 - C24887) * C22087 +
            (C24654 - C24655 + C24656 - C24657) * C22094 +
            (C24658 - C24659 + C24660 - C24661) * C48286) *
               C48519) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C22093 +
            (C23381 - C23380 + C23383 - C23382) * C22087 +
            (C23385 - C23384 + C23387 - C23386) * C22094 +
            (C23389 - C23388 + C23391 - C23390) * C48286) *
               C48552 +
           ((C23932 - C23933 + C23934 - C23935) * C22093 +
            (C23936 - C23937 + C23938 - C23939) * C22087 +
            (C23940 - C23941 + C23942 - C23943) * C22094 +
            (C23944 - C23945 + C23946 - C23947) * C48286) *
               C48541 +
           ((C24655 - C24654 + C24657 - C24656) * C22093 +
            (C24659 - C24658 + C24661 - C24660) * C22087 +
            (C25244 - C25245 + C25246 - C25247) * C22094 +
            (C25248 - C25249 + C25250 - C25251) * C48286) *
               C48519) *
              C48210 * C514 +
          ((C23798 * C22093 + C23799 * C22087 + C23800 * C22094 +
            C23801 * C48286) *
               C48552 +
           ((C23941 - C23940 + C23943 - C23942) * C22093 +
            (C23945 - C23944 + C23947 - C23946) * C22087 +
            (C23949 - C23948 + C23951 - C23950) * C22094 +
            (C23953 - C23952 + C23955 - C23954) * C48286) *
               C48541 +
           ((C25245 - C25244 + C25247 - C25246) * C22093 +
            (C25249 - C25248 + C25251 - C25250) * C22087 +
            (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
             C23240 * C9876) *
                C22094 +
            (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
             C23240 * C9878) *
                C48286) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C339 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C447 +
          (((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23790 - C23791 + C23792 - C23793) * C23244 +
            (C23794 - C23795 + C23796 - C23797) * C48526) *
               C48239 * C339 +
           ((C23933 - C23932 + C23935 - C23934) * C23241 +
            (C23937 - C23936 + C23939 - C23938) * C48558 +
            (C23941 - C23940 + C23943 - C23942) * C23242 +
            (C23945 - C23944 + C23947 - C23946) * C48554 +
            (C23949 - C23948 + C23951 - C23950) * C23243 +
            (C23953 - C23952 + C23955 - C23954) * C48544 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C23244 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C339 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C447 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
             C22623) *
                C22094 +
            (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
             C22631) *
                C48286) *
               C48239 * C339 +
           ((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
             C22768) *
                C22093 +
            (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
             C22776) *
                C22087 +
            (C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C22094 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C24872 - C24873 + C24874 - C24875) * C22093 +
             (C24876 - C24877 + C24878 - C24879) * C22087 + C25470 * C22094 +
             C25471 * C48286) *
                C48541 +
            ((C24880 - C24881 + C24882 - C24883) * C22093 +
             (C24884 - C24885 + C24886 - C24887) * C22087 + C25472 * C22094 +
             C25473 * C48286) *
                C48519) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C22093 +
             (C24877 - C24876 + C24879 - C24878) * C22087 + C25474 * C22094 +
             C25475 * C48286) *
                C48552 +
            ((C24881 - C24880 + C24883 - C24882) * C22093 +
             (C24885 - C24884 + C24887 - C24886) * C22087 + C25476 * C22094 +
             C25477 * C48286) *
                C48541 +
            ((C23239 * C2691 - C23233 * C2695 + C23240 * C2692 -
              C48132 * C2696) *
                 C22093 +
             (C23239 * C2698 - C23233 * C2703 + C23240 * C2699 -
              C48132 * C2704) *
                 C22087 +
             (C25462 - C25463 + C25464 - C25465) * C22094 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C48519) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C22093 +
             (C23381 - C23380 + C23383 - C23382) * C22087 +
             (C23385 - C23384 + C23387 - C23386) * C22094 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48552 +
            (C25474 * C22093 + C25475 * C22087 +
             (C23940 - C23941 + C23942 - C23943) * C22094 +
             (C23944 - C23945 + C23946 - C23947) * C48286) *
                C48541 +
            (C25476 * C22093 + C25477 * C22087 +
             (C25244 - C25245 + C25246 - C25247) * C22094 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C48519) *
               C339 +
           ((C25470 * C22093 + C25471 * C22087 +
             (C23941 - C23940 + C23943 - C23942) * C22094 +
             (C23945 - C23944 + C23947 - C23946) * C48286) *
                C48552 +
            (C25472 * C22093 + C25473 * C22087 +
             (C25245 - C25244 + C25247 - C25246) * C22094 +
             (C25249 - C25248 + C25251 - C25250) * C48286) *
                C48541 +
            ((C25463 - C25462 + C25465 - C25464) * C22093 +
             (C25467 - C25466 + C25469 - C25468) * C22087 +
             (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
              C23240 * C10051) *
                 C22094 +
             (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
              C23240 * C10055) *
                 C48286) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C721 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C721 +
           ((C23233 * C348 - C23239 * C342 + C48132 * C349 - C23240 * C343) *
                C23241 +
            (C23233 * C360 - C23239 * C353 + C48132 * C361 - C23240 * C354) *
                C48558 +
            (C23233 * C625 - C23239 * C620 + C48132 * C626 - C23240 * C621) *
                C23242 +
            (C23233 * C635 - C23239 * C630 + C48132 * C636 - C23240 * C631) *
                C48554 +
            (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
             C23240 * C1370) *
                C23243 +
            (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
             C23240 * C1377) *
                C48544 +
            (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
             C23240 * C1822) *
                C23244 +
            (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
             C23240 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C721 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C721 +
           ((C48557 * C348 - C22089 * C342 + C48550 * C349 - C22090 * C343 +
             C48537 * C350 - C22091 * C344 + C48520 * C351 - C22092 * C345) *
                C22093 +
            (C48557 * C360 - C22089 * C353 + C48550 * C361 - C22090 * C354 +
             C48537 * C362 - C22091 * C355 + C48520 * C363 - C22092 * C356) *
                C22087 +
            (C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
             C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                C22094 +
            (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
             C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C24872 - C24873 + C24874 - C24875) * C22093 +
             (C24876 - C24877 + C24878 - C24879) * C22087 + C25470 * C22094 +
             C25471 * C48286) *
                C48541 +
            ((C24880 - C24881 + C24882 - C24883) * C22093 +
             (C24884 - C24885 + C24886 - C24887) * C22087 + C25472 * C22094 +
             C25473 * C48286) *
                C48519) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C22093 +
             (C24877 - C24876 + C24879 - C24878) * C22087 + C25474 * C22094 +
             C25475 * C48286) *
                C48552 +
            ((C24881 - C24880 + C24883 - C24882) * C22093 +
             (C24885 - C24884 + C24887 - C24886) * C22087 + C25476 * C22094 +
             C25477 * C48286) *
                C48541 +
            ((C23239 * C2691 - C23233 * C2695 + C23240 * C2692 -
              C48132 * C2696) *
                 C22093 +
             (C23239 * C2698 - C23233 * C2703 + C23240 * C2699 -
              C48132 * C2704) *
                 C22087 +
             (C25462 - C25463 + C25464 - C25465) * C22094 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C22093 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C22087 +
             (C23400 - C23401 + C23402 - C23403) * C22094 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48552 +
            ((C24888 - C24889 + C24890 - C24891) * C22093 +
             (C24892 - C24893 + C24894 - C24895) * C22087 +
             (C24662 - C24663 + C24664 - C24665) * C22094 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48541 +
            ((C24896 - C24897 + C24898 - C24899) * C22093 +
             (C24900 - C24901 + C24902 - C24903) * C22087 +
             (C24670 - C24671 + C24672 - C24673) * C22094 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C48519) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C22093 +
             (C24893 - C24892 + C24895 - C24894) * C22087 +
             (C24663 - C24662 + C24665 - C24664) * C22094 +
             (C24667 - C24666 + C24669 - C24668) * C48286) *
                C48552 +
            ((C24897 - C24896 + C24899 - C24898) * C22093 +
             (C24901 - C24900 + C24903 - C24902) * C22087 +
             (C24671 - C24670 + C24673 - C24672) * C22094 +
             (C24675 - C24674 + C24677 - C24676) * C48286) *
                C48541 +
            ((C23233 * C2696 - C23239 * C2692 + C48132 * C2697 -
              C23240 * C2693) *
                 C22093 +
             (C23233 * C2704 - C23239 * C2699 + C48132 * C2705 -
              C23240 * C2700) *
                 C22087 +
             (C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C22094 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C721 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C229 +
          (((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23790 - C23791 + C23792 - C23793) * C23244 +
            (C23794 - C23795 + C23796 - C23797) * C48526) *
               C48239 * C721 +
           ((C23933 - C23932 + C23935 - C23934) * C23241 +
            (C23937 - C23936 + C23939 - C23938) * C48558 +
            (C23941 - C23940 + C23943 - C23942) * C23242 +
            (C23945 - C23944 + C23947 - C23946) * C48554 +
            (C23949 - C23948 + C23951 - C23950) * C23243 +
            (C23953 - C23952 + C23955 - C23954) * C48544 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C23244 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C721 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C229 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
             C22623) *
                C22094 +
            (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
             C22631) *
                C48286) *
               C48239 * C721 +
           ((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
             C22768) *
                C22093 +
            (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
             C22776) *
                C22087 +
            (C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C22094 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C22093 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C22087 +
             (C23376 - C23377 + C23378 - C23379) * C22094 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48552 +
            ((C24872 - C24873 + C24874 - C24875) * C22093 +
             (C24876 - C24877 + C24878 - C24879) * C22087 + C25470 * C22094 +
             C25471 * C48286) *
                C48541 +
            ((C24880 - C24881 + C24882 - C24883) * C22093 +
             (C24884 - C24885 + C24886 - C24887) * C22087 + C25472 * C22094 +
             C25473 * C48286) *
                C48519) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C22093 +
             (C24877 - C24876 + C24879 - C24878) * C22087 + C25474 * C22094 +
             C25475 * C48286) *
                C48552 +
            ((C24881 - C24880 + C24883 - C24882) * C22093 +
             (C24885 - C24884 + C24887 - C24886) * C22087 + C25476 * C22094 +
             C25477 * C48286) *
                C48541 +
            ((C23239 * C2691 - C23233 * C2695 + C23240 * C2692 -
              C48132 * C2696) *
                 C22093 +
             (C23239 * C2698 - C23233 * C2703 + C23240 * C2699 -
              C48132 * C2704) *
                 C22087 +
             (C25462 - C25463 + C25464 - C25465) * C22094 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C48519) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C22093 +
             (C23381 - C23380 + C23383 - C23382) * C22087 +
             (C23385 - C23384 + C23387 - C23386) * C22094 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48552 +
            (C25474 * C22093 + C25475 * C22087 +
             (C23940 - C23941 + C23942 - C23943) * C22094 +
             (C23944 - C23945 + C23946 - C23947) * C48286) *
                C48541 +
            (C25476 * C22093 + C25477 * C22087 +
             (C25244 - C25245 + C25246 - C25247) * C22094 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C48519) *
               C721 +
           ((C25470 * C22093 + C25471 * C22087 +
             (C23941 - C23940 + C23943 - C23942) * C22094 +
             (C23945 - C23944 + C23947 - C23946) * C48286) *
                C48552 +
            (C25472 * C22093 + C25473 * C22087 +
             (C25245 - C25244 + C25247 - C25246) * C22094 +
             (C25249 - C25248 + C25251 - C25250) * C48286) *
                C48541 +
            ((C25463 - C25462 + C25465 - C25464) * C22093 +
             (C25467 - C25466 + C25469 - C25468) * C22087 +
             (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
              C23240 * C10051) *
                 C22094 +
             (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
              C23240 * C10055) *
                 C48286) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23376 - C23377 + C23378 - C23379) * C23242 +
           (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
           C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
              C48239 * C867 +
          ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
               C23241 +
           (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
               C48558 +
           (C23932 - C23933 + C23934 - C23935) * C23242 +
           (C23936 - C23937 + C23938 - C23939) * C48554 +
           (C23940 - C23941 + C23942 - C23943) * C23243 +
           (C23944 - C23945 + C23946 - C23947) * C48544 +
           (C23948 - C23949 + C23950 - C23951) * C23244 +
           (C23952 - C23953 + C23954 - C23955) * C48526) *
              C48239 * C868 +
          ((C23233 * C875 - C23239 * C870 + C48132 * C876 - C23240 * C871) *
               C23241 +
           (C23233 * C885 - C23239 * C880 + C48132 * C886 - C23240 * C881) *
               C48558 +
           (C23233 * C2264 - C23239 * C2258 + C48132 * C2265 - C23240 * C2259) *
               C23242 +
           (C23233 * C2276 - C23239 * C2267 + C48132 * C2277 - C23240 * C2268) *
               C48554 +
           (C23233 * C2270 - C23239 * C2261 + C48132 * C2271 - C23240 * C2262) *
               C23243 +
           (C23233 * C2279 - C23239 * C2273 + C48132 * C2280 - C23240 * C2274) *
               C48544 +
           (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 - C23240 * C9876) *
               C23244 +
           (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 - C23240 * C9878) *
               C48526) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
            C22233) *
               C22094 +
           (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
            C22241) *
               C48286) *
              C48239 * C867 +
          ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
            C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
               C22093 +
           (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
            C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
               C22087 +
           (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
            C22769) *
               C22094 +
           (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
            C22777) *
               C48286) *
              C48239 * C868 +
          ((C48557 * C875 - C22089 * C870 + C48550 * C876 - C22090 * C871 +
            C48537 * C877 - C22091 * C872 + C48520 * C878 - C22092 * C873) *
               C22093 +
           (C48557 * C885 - C22089 * C880 + C48550 * C886 - C22090 * C881 +
            C48537 * C887 - C22091 * C882 + C48520 * C888 - C22092 * C883) *
               C22087 +
           (C48557 * C2264 - C22089 * C2258 + C48550 * C2265 - C22090 * C2259 +
            C48537 * C2266 - C22091 * C2260 + C48520 * C2542 - C22092 * C2541) *
               C22094 +
           (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 - C22090 * C2268 +
            C48537 * C2278 - C22091 * C2269 + C48520 * C2544 - C22092 * C2543) *
               C48286) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C22093 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C22087 +
            (C23376 - C23377 + C23378 - C23379) * C22094 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48552 +
           ((C24872 - C24873 + C24874 - C24875) * C22093 +
            (C24876 - C24877 + C24878 - C24879) * C22087 + C25470 * C22094 +
            C25471 * C48286) *
               C48541 +
           C26032 * C48519) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C22093 +
            (C24877 - C24876 + C24879 - C24878) * C22087 + C25474 * C22094 +
            C25475 * C48286) *
               C48552 +
           ((C24881 - C24880 + C24883 - C24882) * C22093 +
            (C24885 - C24884 + C24887 - C24886) * C22087 + C25476 * C22094 +
            C25477 * C48286) *
               C48541 +
           ((C26018 - C26019 + C26020 - C26021) * C22093 +
            (C26022 - C26023 + C26024 - C26025) * C22087 +
            (C25462 - C25463 + C25464 - C25465) * C22094 +
            (C25466 - C25467 + C25468 - C25469) * C48286) *
               C48519) *
              C868 +
          (C26032 * C48552 +
           ((C26019 - C26018 + C26021 - C26020) * C22093 +
            (C26023 - C26022 + C26025 - C26024) * C22087 +
            (C25463 - C25462 + C25465 - C25464) * C22094 +
            (C25467 - C25466 + C25469 - C25468) * C48286) *
               C48541 +
           ((C23233 * C3586 - C23239 * C3583 + C48132 * C3587 -
             C23240 * C3584) *
                C22093 +
            (C23233 * C3592 - C23239 * C3589 + C48132 * C3593 -
             C23240 * C3590) *
                C22087 +
            (C23233 * C10912 - C23239 * C10910 + C48132 * C17538 -
             C23240 * C17537) *
                C22094 +
            (C23233 * C10916 - C23239 * C10913 + C48132 * C17540 -
             C23240 * C17539) *
                C48286) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C22093 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C22087 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C48484 +
           ((C48127 * C347 - C47233 * C341 + C48135 * C348 - C47229 * C342 +
             C26144 * C349 - C47239 * C343) *
                C22093 +
            (C48127 * C359 - C47233 * C352 + C48135 * C360 - C47229 * C353 +
             C26144 * C361 - C47239 * C354) *
                C22087 +
            (C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C22094 +
            (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C22093 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C22087 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C22094 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
               C48484 +
           ((C47233 * C342 - C48127 * C348 + C47229 * C343 - C48135 * C349 +
             C47239 * C344 - C26144 * C350) *
                C22093 +
            (C47233 * C353 - C48127 * C360 + C47229 * C354 - C48135 * C361 +
             C47239 * C355 - C26144 * C362) *
                C22087 +
            (C47233 * C620 - C48127 * C625 + C47229 * C621 - C48135 * C626 +
             C47239 * C622 - C26144 * C627) *
                C22094 +
            (C47233 * C630 - C48127 * C635 + C47229 * C631 - C48135 * C636 +
             C47239 * C632 - C26144 * C637) *
                C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48127 * C128 - C47233 * C121 + C48135 * C129 - C47229 * C122 +
             C26144 * C130 - C47239 * C123) *
                C22093 +
            (C48127 * C142 - C47233 * C133 + C48135 * C143 - C47229 * C134 +
             C26144 * C144 - C47239 * C135) *
                C22087 +
            (C48127 * C241 - C47233 * C235 + C48135 * C242 - C47229 * C236 +
             C26144 * C243 - C47239 * C237) *
                C22094 +
            (C48127 * C253 - C47233 * C246 + C48135 * C254 - C47229 * C247 +
             C26144 * C255 - C47239 * C248) *
                C48286) *
               C48484 +
           ((C48127 * C349 - C47233 * C343 + C48135 * C350 - C47229 * C344 +
             C26144 * C351 - C47239 * C345) *
                C22093 +
            (C48127 * C361 - C47233 * C354 + C48135 * C362 - C47229 * C355 +
             C26144 * C363 - C47239 * C356) *
                C22087 +
            (C48127 * C626 - C47233 * C621 + C48135 * C627 - C47229 * C622 +
             C26144 * C628 - C47239 * C623) *
                C22094 +
            (C48127 * C636 - C47233 * C631 + C48135 * C637 - C47229 * C632 +
             C26144 * C638 - C47239 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C48127 * C347 - C47233 * C341 + C48135 * C348 - C47229 * C342 +
              C26144 * C349 - C47239 * C343) *
                 C22093 +
             (C48127 * C359 - C47233 * C352 + C48135 * C360 - C47229 * C353 +
              C26144 * C361 - C47239 * C354) *
                 C22087 +
             (C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C22094 +
             (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C22093 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C22087 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C22094 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C48484 +
            ((C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C22093 +
             (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C22087 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C22094 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C22093 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C22087 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C22094 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C48484 +
            ((C47233 * C342 - C48127 * C348 + C47229 * C343 - C48135 * C349 +
              C47239 * C344 - C26144 * C350) *
                 C22093 +
             (C47233 * C353 - C48127 * C360 + C47229 * C354 - C48135 * C361 +
              C47239 * C355 - C26144 * C362) *
                 C22087 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C22094 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C22093 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C22087 +
             (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C22094 +
             (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48286) *
                C48484 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C22093 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C22087 +
             (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 -
              C47229 * C1370 + C26144 * C1378 - C47239 * C1371) *
                 C22094 +
             (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 -
              C47229 * C1377 + C26144 * C1383 - C47239 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
             (C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C22094 +
             (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48286) *
                C48326) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C22093 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C22087 +
             (C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C22094 +
             (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C48286) *
                C48484 +
            ((C47233 * C870 - C48127 * C875 + C47229 * C871 - C48135 * C876 +
              C47239 * C872 - C26144 * C877) *
                 C22093 +
             (C47233 * C880 - C48127 * C885 + C47229 * C881 - C48135 * C886 +
              C47239 * C882 - C26144 * C887) *
                 C22087 +
             (C47233 * C2258 - C48127 * C2264 + C47229 * C2259 -
              C48135 * C2265 + C47239 * C2260 - C26144 * C2266) *
                 C22094 +
             (C47233 * C2267 - C48127 * C2276 + C47229 * C2268 -
              C48135 * C2277 + C47239 * C2269 - C26144 * C2278) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C22093 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C22087 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C22094 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C48484 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C22093 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C22087 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C22094 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C339 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C22093 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C22087 +
             (C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C22094 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48286) *
                C48484 +
            ((C48127 * C876 - C47233 * C871 + C48135 * C877 - C47229 * C872 +
              C26144 * C878 - C47239 * C873) *
                 C22093 +
             (C48127 * C886 - C47233 * C881 + C48135 * C887 - C47229 * C882 +
              C26144 * C888 - C47239 * C883) *
                 C22087 +
             (C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C22094 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
             (C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C22094 +
             (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C22093 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C22087 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C22094 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C48484 +
            ((C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C22093 +
             (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C22087 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C22094 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C22093 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C22087 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C22094 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C48484 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C22093 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C22087 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C22094 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C22093 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C22087 +
             (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C22094 +
             (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48286) *
                C48484 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C22093 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C22087 +
             (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 -
              C47229 * C1370 + C26144 * C1378 - C47239 * C1371) *
                 C22094 +
             (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 -
              C47229 * C1377 + C26144 * C1383 - C47239 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C22093 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C22087 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C48484 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
            (C26920 - C26919 + C26922 - C26921 + C26924 - C26923) * C22094 +
            (C26926 - C26925 + C26928 - C26927 + C26930 - C26929) * C48286) *
               C48326) *
              C48210 * C513 +
          (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C22093 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C22087 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C22094 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
               C48484 +
           ((C26919 - C26920 + C26921 - C26922 + C26923 - C26924) * C22093 +
            (C26925 - C26926 + C26927 - C26928 + C26929 - C26930) * C22087 +
            (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C22094 +
            (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C26771 * C22093 + C26772 * C22087 +
            (C26758 - C26757 + C26760 - C26759 + C26762 - C26761) * C22094 +
            (C26764 - C26763 + C26766 - C26765 + C26768 - C26767) * C48286) *
               C48484 +
           ((C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C22093 +
            (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C22087 +
            (C48127 * C1823 - C47233 * C1820 + C48135 * C1824 - C47229 * C1821 +
             C26144 * C1825 - C47239 * C1822) *
                C22094 +
            (C48127 * C1829 - C47233 * C1826 + C48135 * C1830 - C47229 * C1827 +
             C26144 * C1831 - C47239 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
             C28477 * C22094 + C28478 * C48286) *
                C48326) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C22093 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C22087 +
             C28479 * C22094 + C28480 * C48286) *
                C48484 +
            ((C47233 * C870 - C48127 * C875 + C47229 * C871 - C48135 * C876 +
              C47239 * C872 - C26144 * C877) *
                 C22093 +
             (C47233 * C880 - C48127 * C885 + C47229 * C881 - C48135 * C886 +
              C47239 * C882 - C26144 * C887) *
                 C22087 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C22094 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C22093 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C22087 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C22094 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C48484 +
            (C28479 * C22093 + C28480 * C22087 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C22094 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C339 +
           ((C28477 * C22093 + C28478 * C22087 +
             (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C22094 +
             (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48286) *
                C48484 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C22093 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C22087 +
             (C48127 * C2270 - C47233 * C2261 + C48135 * C2271 -
              C47229 * C2262 + C26144 * C2272 - C47239 * C2263) *
                 C22094 +
             (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 -
              C47229 * C2274 + C26144 * C2281 - C47239 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
             C28477 * C22094 + C28478 * C48286) *
                C48326) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C22093 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C22087 +
             C28479 * C22094 + C28480 * C48286) *
                C48484 +
            ((C47233 * C870 - C48127 * C875 + C47229 * C871 - C48135 * C876 +
              C47239 * C872 - C26144 * C877) *
                 C22093 +
             (C47233 * C880 - C48127 * C885 + C47229 * C881 - C48135 * C886 +
              C47239 * C882 - C26144 * C887) *
                 C22087 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C22094 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C22093 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C22087 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C22094 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C48484 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C22093 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C22087 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C22094 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C721 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C22093 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C22087 +
             (C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C22094 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48286) *
                C48484 +
            ((C48127 * C876 - C47233 * C871 + C48135 * C877 - C47229 * C872 +
              C26144 * C878 - C47239 * C873) *
                 C22093 +
             (C48127 * C886 - C47233 * C881 + C48135 * C887 - C47229 * C882 +
              C26144 * C888 - C47239 * C883) *
                 C22087 +
             (C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C22094 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C22093 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C22087 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C48484 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
             C28477 * C22094 + C28478 * C48286) *
                C48326) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C22093 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C22087 +
             C28479 * C22094 + C28480 * C48286) *
                C48484 +
            ((C47233 * C870 - C48127 * C875 + C47229 * C871 - C48135 * C876 +
              C47239 * C872 - C26144 * C877) *
                 C22093 +
             (C47233 * C880 - C48127 * C885 + C47229 * C881 - C48135 * C886 +
              C47239 * C882 - C26144 * C887) *
                 C22087 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C22094 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C22093 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C22087 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C22094 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C48484 +
            (C28479 * C22093 + C28480 * C22087 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C22094 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C721 +
           ((C28477 * C22093 + C28478 * C22087 +
             (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C22094 +
             (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48286) *
                C48484 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C22093 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C22087 +
             (C48127 * C2270 - C47233 * C2261 + C48135 * C2271 -
              C47229 * C2262 + C26144 * C2272 - C47239 * C2263) *
                 C22094 +
             (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 -
              C47229 * C2274 + C26144 * C2281 - C47239 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C22093 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C22087 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C22094 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C48484 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C22093 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C22087 +
            C28477 * C22094 + C28478 * C48286) *
               C48326) *
              C867 +
          (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C22093 +
            (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C22087 +
            C28479 * C22094 + C28480 * C48286) *
               C48484 +
           ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C22093 +
            (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C22087 +
            (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C22094 +
            (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
               C48326) *
              C868 +
          (((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C22093 +
            (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C22087 +
            (C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C22094 +
            (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48286) *
               C48484 +
           ((C48127 * C2695 - C47233 * C2691 + C48135 * C2696 - C47229 * C2692 +
             C26144 * C2697 - C47239 * C2693) *
                C22093 +
            (C48127 * C2703 - C47233 * C2698 + C48135 * C2704 - C47229 * C2699 +
             C26144 * C2705 - C47239 * C2700) *
                C22087 +
            (C48127 * C3160 - C47233 * C3157 + C48135 * C3161 - C47229 * C3158 +
             C26144 * C3162 - C47239 * C3159) *
                C22094 +
            (C48127 * C3166 - C47233 * C3163 + C48135 * C3167 - C47229 * C3164 +
             C26144 * C3168 - C47239 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C48557 * C239 - C22089 * C233 + C48550 * C240 - C22090 * C234 +
            C48537 * C241 - C22091 * C235 + C48520 * C242 - C22092 * C236) *
               C22094 +
           (C48557 * C251 - C22089 * C244 + C48550 * C252 - C22090 * C245 +
            C48537 * C253 - C22091 * C246 + C48520 * C254 - C22092 * C247) *
               C48286) *
              C48239 * C48210 * C48193 * C110 +
          ((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
            C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
               C22093 +
           (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
            C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
               C22087 +
           (C22089 * C234 - C48557 * C240 + C22090 * C235 - C48550 * C241 +
            C22091 * C236 - C48537 * C242 + C22092 * C237 - C48520 * C243) *
               C22094 +
           (C22089 * C245 - C48557 * C252 + C22090 * C246 - C48550 * C253 +
            C22091 * C247 - C48537 * C254 + C22092 * C248 - C48520 * C255) *
               C48286) *
              C48239 * C48210 * C48193 * C111 +
          ((C48557 * C128 - C22089 * C121 + C48550 * C129 - C22090 * C122 +
            C48537 * C130 - C22091 * C123 + C48520 * C136 - C22092 * C124) *
               C22093 +
           (C48557 * C142 - C22089 * C133 + C48550 * C143 - C22090 * C134 +
            C48537 * C144 - C22091 * C135 + C48520 * C145 - C22092 * C137) *
               C22087 +
           (C48557 * C241 - C22089 * C235 + C48550 * C242 - C22090 * C236 +
            C48537 * C243 - C22091 * C237 + C48520 * C249 - C22092 * C238) *
               C22094 +
           (C48557 * C253 - C22089 * C246 + C48550 * C254 - C22090 * C247 +
            C48537 * C255 - C22091 * C248 + C48520 * C256 - C22092 * C250) *
               C48286) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23233 * C239 - C23239 * C233 + C48132 * C240 - C23240 * C234) *
               C23242 +
           (C23233 * C251 - C23239 * C244 + C48132 * C252 - C23240 * C245) *
               C48554 +
           (C23233 * C522 - C23239 * C517 + C48132 * C523 - C23240 * C518) *
               C23243 +
           (C23233 * C532 - C23239 * C527 + C48132 * C533 - C23240 * C528) *
               C48544 +
           (C23233 * C1162 - C23239 * C1158 + C48132 * C1163 - C23240 * C1159) *
               C23244 +
           (C23233 * C1170 - C23239 * C1165 + C48132 * C1171 - C23240 * C1166) *
               C48526) *
              C48239 * C48210 * C48193 * C110 +
          ((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
               C23241 +
           (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
               C48558 +
           (C23239 * C234 - C23233 * C240 + C23240 * C235 - C48132 * C241) *
               C23242 +
           (C23239 * C245 - C23233 * C252 + C23240 * C246 - C48132 * C253) *
               C48554 +
           (C23239 * C518 - C23233 * C523 + C23240 * C519 - C48132 * C524) *
               C23243 +
           (C23239 * C528 - C23233 * C533 + C23240 * C529 - C48132 * C534) *
               C48544 +
           (C23239 * C1159 - C23233 * C1163 + C23240 * C1160 - C48132 * C1164) *
               C23244 +
           (C23239 * C1166 - C23233 * C1171 + C23240 * C1167 - C48132 * C1172) *
               C48526) *
              C48239 * C48210 * C48193 * C111 +
          ((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
               C23241 +
           (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
               C48558 +
           (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
               C23242 +
           (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
               C48554 +
           (C23233 * C524 - C23239 * C519 + C48132 * C525 - C23240 * C520) *
               C23243 +
           (C23233 * C534 - C23239 * C529 + C48132 * C535 - C23240 * C530) *
               C48544 +
           (C23233 * C1164 - C23239 * C1160 + C48132 * C1168 - C23240 * C1161) *
               C23244 +
           (C23233 * C1172 - C23239 * C1167 + C48132 * C1173 - C23240 * C1169) *
               C48526) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22089 * C517 - C48557 * C522 + C22090 * C518 - C48550 * C523 +
             C22091 * C519 - C48537 * C524 + C22092 * C520 - C48520 * C525) *
                C22094 +
            (C22089 * C527 - C48557 * C532 + C22090 * C528 - C48550 * C533 +
             C22091 * C529 - C48537 * C534 + C22092 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
             C22248) *
                C22093 +
            (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
             C22256) *
                C22087 +
            (C48557 * C523 - C22089 * C518 + C48550 * C524 - C22090 * C519 +
             C48537 * C525 - C22091 * C520 + C48520 * C526 - C22092 * C521) *
                C22094 +
            (C48557 * C533 - C22089 * C528 + C48550 * C534 - C22090 * C529 +
             C48537 * C535 - C22091 * C530 + C48520 * C536 - C22092 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C48210 * C229 +
           ((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23239 * C1640 - C23233 * C1643 + C23240 * C1641 -
             C48132 * C1644) *
                C23244 +
            (C23239 * C1646 - C23233 * C1649 + C23240 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C48210 * C229 +
           ((C23401 - C23400 + C23403 - C23402) * C23241 +
            (C23405 - C23404 + C23407 - C23406) * C48558 +
            (C23409 - C23408 + C23411 - C23410) * C23242 +
            (C23413 - C23412 + C23415 - C23414) * C48554 +
            (C23417 - C23416 + C23419 - C23418) * C23243 +
            (C23421 - C23420 + C23423 - C23422) * C48544 +
            (C23233 * C1644 - C23239 * C1641 + C48132 * C1645 -
             C23240 * C1642) *
                C23244 +
            (C23233 * C1650 - C23239 * C1647 + C48132 * C1651 -
             C23240 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C339 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22089 * C619 - C48557 * C624 + C22090 * C620 - C48550 * C625 +
             C22091 * C621 - C48537 * C626 + C22092 * C622 - C48520 * C627) *
                C22094 +
            (C22089 * C629 - C48557 * C634 + C22090 * C630 - C48550 * C635 +
             C22091 * C631 - C48537 * C636 + C22092 * C632 - C48520 * C637) *
                C48286) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C339 +
           ((C48557 * C348 - C22089 * C342 + C48550 * C349 - C22090 * C343 +
             C48537 * C350 - C22091 * C344 + C48520 * C351 - C22092 * C345) *
                C22093 +
            (C48557 * C360 - C22089 * C353 + C48550 * C361 - C22090 * C354 +
             C48537 * C362 - C22091 * C355 + C48520 * C363 - C22092 * C356) *
                C22087 +
            (C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
             C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                C22094 +
            (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
             C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C339 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23239 * C619 - C23233 * C624 + C23240 * C620 - C48132 * C625) *
                C23242 +
            (C23239 * C629 - C23233 * C634 + C23240 * C630 - C48132 * C635) *
                C48554 +
            (C23239 * C1368 - C23233 * C1372 + C23240 * C1369 -
             C48132 * C1373) *
                C23243 +
            (C23239 * C1375 - C23233 * C1380 + C23240 * C1376 -
             C48132 * C1381) *
                C48544 +
            (C23239 * C1820 - C23233 * C1823 + C23240 * C1821 -
             C48132 * C1824) *
                C23244 +
            (C23239 * C1826 - C23233 * C1829 + C23240 * C1827 -
             C48132 * C1830) *
                C48526) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C339 +
           ((C23233 * C348 - C23239 * C342 + C48132 * C349 - C23240 * C343) *
                C23241 +
            (C23233 * C360 - C23239 * C353 + C48132 * C361 - C23240 * C354) *
                C48558 +
            (C23233 * C625 - C23239 * C620 + C48132 * C626 - C23240 * C621) *
                C23242 +
            (C23233 * C635 - C23239 * C630 + C48132 * C636 - C23240 * C631) *
                C48554 +
            (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
             C23240 * C1370) *
                C23243 +
            (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
             C23240 * C1377) *
                C48544 +
            (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
             C23240 * C1822) *
                C23244 +
            (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
             C23240 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22089 * C517 - C48557 * C522 + C22090 * C518 - C48550 * C523 +
             C22091 * C519 - C48537 * C524 + C22092 * C520 - C48520 * C525) *
                C22094 +
            (C22089 * C527 - C48557 * C532 + C22090 * C528 - C48550 * C533 +
             C22091 * C529 - C48537 * C534 + C22092 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
             C22248) *
                C22093 +
            (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
             C22256) *
                C22087 +
            (C48557 * C523 - C22089 * C518 + C48550 * C524 - C22090 * C519 +
             C48537 * C525 - C22091 * C520 + C48520 * C526 - C22092 * C521) *
                C22094 +
            (C48557 * C533 - C22089 * C528 + C48550 * C534 - C22090 * C529 +
             C48537 * C535 - C22091 * C530 + C48520 * C536 - C22092 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 +
            (C23384 - C23385 + C23386 - C23387) * C23243 +
            (C23388 - C23389 + C23390 - C23391) * C48544 +
            (C23392 - C23393 + C23394 - C23395) * C23244 +
            (C23396 - C23397 + C23398 - C23399) * C48526) *
               C48239 * C48210 * C447 +
           ((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23239 * C1640 - C23233 * C1643 + C23240 * C1641 -
             C48132 * C1644) *
                C23244 +
            (C23239 * C1646 - C23233 * C1649 + C23240 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C48210 * C447 +
           ((C23401 - C23400 + C23403 - C23402) * C23241 +
            (C23405 - C23404 + C23407 - C23406) * C48558 +
            (C23409 - C23408 + C23411 - C23410) * C23242 +
            (C23413 - C23412 + C23415 - C23414) * C48554 +
            (C23417 - C23416 + C23419 - C23418) * C23243 +
            (C23421 - C23420 + C23423 - C23422) * C48544 +
            (C23233 * C1644 - C23239 * C1641 + C48132 * C1645 -
             C23240 * C1642) *
                C23244 +
            (C23233 * C1650 - C23239 * C1647 + C48132 * C1651 -
             C23240 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
            C22233) *
               C22094 +
           (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
            C22241) *
               C48286) *
              C48239 * C48210 * C513 +
          ((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
            C22232) *
               C22093 +
           (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
            C22240) *
               C22087 +
           (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
            C22623) *
               C22094 +
           (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
            C22631) *
               C48286) *
              C48239 * C48210 * C514 +
          ((C22617 - C22616 + C22619 - C22618 + C22621 - C22620 + C22623 -
            C22622) *
               C22093 +
           (C22625 - C22624 + C22627 - C22626 + C22629 - C22628 + C22631 -
            C22630) *
               C22087 +
           (C48557 * C1162 - C22089 * C1158 + C48550 * C1163 - C22090 * C1159 +
            C48537 * C1164 - C22091 * C1160 + C48520 * C1168 - C22092 * C1161) *
               C22094 +
           (C48557 * C1170 - C22089 * C1165 + C48550 * C1171 - C22090 * C1166 +
            C48537 * C1172 - C22091 * C1167 + C48520 * C1173 - C22092 * C1169) *
               C48286) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23376 - C23377 + C23378 - C23379) * C23242 +
           (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
           C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
              C48239 * C48210 * C513 +
          ((C23377 - C23376 + C23379 - C23378) * C23241 +
           (C23381 - C23380 + C23383 - C23382) * C48558 +
           (C23385 - C23384 + C23387 - C23386) * C23242 +
           (C23389 - C23388 + C23391 - C23390) * C48554 +
           (C23393 - C23392 + C23395 - C23394) * C23243 +
           (C23397 - C23396 + C23399 - C23398) * C48544 +
           (C23790 - C23791 + C23792 - C23793) * C23244 +
           (C23794 - C23795 + C23796 - C23797) * C48526) *
              C48239 * C48210 * C514 +
          (C23798 * C23241 + C23799 * C48558 + C23800 * C23242 +
           C23801 * C48554 + (C23791 - C23790 + C23793 - C23792) * C23243 +
           (C23795 - C23794 + C23797 - C23796) * C48544 +
           (C23233 * C8998 - C23239 * C8996 + C48132 * C9000 - C23240 * C8997) *
               C23244 +
           (C23233 * C9002 - C23239 * C8999 + C48132 * C9003 - C23240 * C9001) *
               C48526) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C339 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C447 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
             C22623) *
                C22094 +
            (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
             C22631) *
                C48286) *
               C48239 * C339 +
           ((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
             C22768) *
                C22093 +
            (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
             C22776) *
                C22087 +
            (C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C22094 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C339 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C447 +
          (((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23790 - C23791 + C23792 - C23793) * C23244 +
            (C23794 - C23795 + C23796 - C23797) * C48526) *
               C48239 * C339 +
           ((C23933 - C23932 + C23935 - C23934) * C23241 +
            (C23937 - C23936 + C23939 - C23938) * C48558 +
            (C23941 - C23940 + C23943 - C23942) * C23242 +
            (C23945 - C23944 + C23947 - C23946) * C48554 +
            (C23949 - C23948 + C23951 - C23950) * C23243 +
            (C23953 - C23952 + C23955 - C23954) * C48544 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C23244 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C721 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C22093 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C22087 +
            (C22242 - C22243 + C22244 - C22245 + C22246 - C22247 + C22248 -
             C22249) *
                C22094 +
            (C22250 - C22251 + C22252 - C22253 + C22254 - C22255 + C22256 -
             C22257) *
                C48286) *
               C48239 * C721 +
           ((C48557 * C348 - C22089 * C342 + C48550 * C349 - C22090 * C343 +
             C48537 * C350 - C22091 * C344 + C48520 * C351 - C22092 * C345) *
                C22093 +
            (C48557 * C360 - C22089 * C353 + C48550 * C361 - C22090 * C354 +
             C48537 * C362 - C22091 * C355 + C48520 * C363 - C22092 * C356) *
                C22087 +
            (C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
             C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                C22094 +
            (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
             C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C721 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C23241 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48558 +
            (C23400 - C23401 + C23402 - C23403) * C23242 +
            (C23404 - C23405 + C23406 - C23407) * C48554 +
            (C23408 - C23409 + C23410 - C23411) * C23243 +
            (C23412 - C23413 + C23414 - C23415) * C48544 +
            (C23416 - C23417 + C23418 - C23419) * C23244 +
            (C23420 - C23421 + C23422 - C23423) * C48526) *
               C48239 * C721 +
           ((C23233 * C348 - C23239 * C342 + C48132 * C349 - C23240 * C343) *
                C23241 +
            (C23233 * C360 - C23239 * C353 + C48132 * C361 - C23240 * C354) *
                C48558 +
            (C23233 * C625 - C23239 * C620 + C48132 * C626 - C23240 * C621) *
                C23242 +
            (C23233 * C635 - C23239 * C630 + C48132 * C636 - C23240 * C631) *
                C48554 +
            (C23233 * C1373 - C23239 * C1369 + C48132 * C1374 -
             C23240 * C1370) *
                C23243 +
            (C23233 * C1381 - C23239 * C1376 + C48132 * C1382 -
             C23240 * C1377) *
                C48544 +
            (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
             C23240 * C1822) *
                C23244 +
            (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
             C23240 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C22093 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C22087 +
            (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
             C22233) *
                C22094 +
            (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
             C22241) *
                C48286) *
               C48239 * C721 +
           ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
             C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
                C22093 +
            (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
             C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
                C22087 +
            (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C22094 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48286) *
               C48239 * C48513) *
              C229 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C22093 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C22087 +
            (C22616 - C22617 + C22618 - C22619 + C22620 - C22621 + C22622 -
             C22623) *
                C22094 +
            (C22624 - C22625 + C22626 - C22627 + C22628 - C22629 + C22630 -
             C22631) *
                C48286) *
               C48239 * C721 +
           ((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
             C22768) *
                C22093 +
            (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
             C22776) *
                C22087 +
            (C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C22094 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C23241 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48558 +
            (C23376 - C23377 + C23378 - C23379) * C23242 +
            (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
            C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
               C48239 * C721 +
           ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
                C23241 +
            (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
                C48558 +
            (C23932 - C23933 + C23934 - C23935) * C23242 +
            (C23936 - C23937 + C23938 - C23939) * C48554 +
            (C23940 - C23941 + C23942 - C23943) * C23243 +
            (C23944 - C23945 + C23946 - C23947) * C48544 +
            (C23948 - C23949 + C23950 - C23951) * C23244 +
            (C23952 - C23953 + C23954 - C23955) * C48526) *
               C48239 * C48513) *
              C229 +
          (((C23377 - C23376 + C23379 - C23378) * C23241 +
            (C23381 - C23380 + C23383 - C23382) * C48558 +
            (C23385 - C23384 + C23387 - C23386) * C23242 +
            (C23389 - C23388 + C23391 - C23390) * C48554 +
            (C23393 - C23392 + C23395 - C23394) * C23243 +
            (C23397 - C23396 + C23399 - C23398) * C48544 +
            (C23790 - C23791 + C23792 - C23793) * C23244 +
            (C23794 - C23795 + C23796 - C23797) * C48526) *
               C48239 * C721 +
           ((C23933 - C23932 + C23935 - C23934) * C23241 +
            (C23937 - C23936 + C23939 - C23938) * C48558 +
            (C23941 - C23940 + C23943 - C23942) * C23242 +
            (C23945 - C23944 + C23947 - C23946) * C48554 +
            (C23949 - C23948 + C23951 - C23950) * C23243 +
            (C23953 - C23952 + C23955 - C23954) * C48544 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C23244 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
            C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
               C22093 +
           (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
            C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
               C22087 +
           (C22226 - C22227 + C22228 - C22229 + C22230 - C22231 + C22232 -
            C22233) *
               C22094 +
           (C22234 - C22235 + C22236 - C22237 + C22238 - C22239 + C22240 -
            C22241) *
               C48286) *
              C48239 * C867 +
          ((C22089 * C341 - C48557 * C347 + C22090 * C342 - C48550 * C348 +
            C22091 * C343 - C48537 * C349 + C22092 * C344 - C48520 * C350) *
               C22093 +
           (C22089 * C352 - C48557 * C359 + C22090 * C353 - C48550 * C360 +
            C22091 * C354 - C48537 * C361 + C22092 * C355 - C48520 * C362) *
               C22087 +
           (C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
            C22769) *
               C22094 +
           (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
            C22777) *
               C48286) *
              C48239 * C868 +
          ((C48557 * C875 - C22089 * C870 + C48550 * C876 - C22090 * C871 +
            C48537 * C877 - C22091 * C872 + C48520 * C878 - C22092 * C873) *
               C22093 +
           (C48557 * C885 - C22089 * C880 + C48550 * C886 - C22090 * C881 +
            C48537 * C887 - C22091 * C882 + C48520 * C888 - C22092 * C883) *
               C22087 +
           (C48557 * C2264 - C22089 * C2258 + C48550 * C2265 - C22090 * C2259 +
            C48537 * C2266 - C22091 * C2260 + C48520 * C2542 - C22092 * C2541) *
               C22094 +
           (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 - C22090 * C2268 +
            C48537 * C2278 - C22091 * C2269 + C48520 * C2544 - C22092 * C2543) *
               C48286) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
               C23241 +
           (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
               C48558 +
           (C23376 - C23377 + C23378 - C23379) * C23242 +
           (C23380 - C23381 + C23382 - C23383) * C48554 + C23798 * C23243 +
           C23799 * C48544 + C23800 * C23244 + C23801 * C48526) *
              C48239 * C867 +
          ((C23239 * C341 - C23233 * C347 + C23240 * C342 - C48132 * C348) *
               C23241 +
           (C23239 * C352 - C23233 * C359 + C23240 * C353 - C48132 * C360) *
               C48558 +
           (C23932 - C23933 + C23934 - C23935) * C23242 +
           (C23936 - C23937 + C23938 - C23939) * C48554 +
           (C23940 - C23941 + C23942 - C23943) * C23243 +
           (C23944 - C23945 + C23946 - C23947) * C48544 +
           (C23948 - C23949 + C23950 - C23951) * C23244 +
           (C23952 - C23953 + C23954 - C23955) * C48526) *
              C48239 * C868 +
          ((C23233 * C875 - C23239 * C870 + C48132 * C876 - C23240 * C871) *
               C23241 +
           (C23233 * C885 - C23239 * C880 + C48132 * C886 - C23240 * C881) *
               C48558 +
           (C23233 * C2264 - C23239 * C2258 + C48132 * C2265 - C23240 * C2259) *
               C23242 +
           (C23233 * C2276 - C23239 * C2267 + C48132 * C2277 - C23240 * C2268) *
               C48554 +
           (C23233 * C2270 - C23239 * C2261 + C48132 * C2271 - C23240 * C2262) *
               C23243 +
           (C23233 * C2279 - C23239 * C2273 + C48132 * C2280 - C23240 * C2274) *
               C48544 +
           (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 - C23240 * C9876) *
               C23244 +
           (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 - C23240 * C9878) *
               C48526) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C47356 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48282 +
            (C11176 - C11177 + C11178 - C11179) * C47348 +
            (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
            C11599 * C26147) *
               C30746 +
           ((C12664 - C12665 + C12666 - C12667) * C47356 +
            (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
            C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C47356 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C48282 +
            (C11200 - C11201 + C11202 - C11203) * C47348 +
            (C11204 - C11205 + C11206 - C11207) * C48289 +
            (C11208 - C11209 + C11210 - C11211) * C47362 +
            (C11212 - C11213 + C11214 - C11215) * C26147) *
               C30746 +
           ((C12672 - C12673 + C12674 - C12675) * C47356 +
            (C12676 - C12677 + C12678 - C12679) * C48282 +
            (C12454 - C12455 + C12456 - C12457) * C47348 +
            (C12458 - C12459 + C12460 - C12461) * C48289 +
            (C12462 - C12463 + C12464 - C12465) * C47362 +
            (C12466 - C12467 + C12468 - C12469) * C26147) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C47356 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C48282 +
            (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
                C47348 +
            (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
                C48289 +
            (C48461 * C524 - C47223 * C519 + C48132 * C525 - C47204 * C520) *
                C47362 +
            (C48461 * C534 - C47223 * C529 + C48132 * C535 - C47204 * C530) *
                C26147) *
               C30746 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C47356 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C48282 +
            (C48461 * C626 - C47223 * C621 + C48132 * C627 - C47204 * C622) *
                C47348 +
            (C48461 * C636 - C47223 * C631 + C48132 * C637 - C47204 * C632) *
                C48289 +
            (C48461 * C1374 - C47223 * C1370 + C48132 * C1378 -
             C47204 * C1371) *
                C47362 +
            (C48461 * C1382 - C47223 * C1377 + C48132 * C1383 -
             C47204 * C1379) *
                C26147) *
               C48326) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C47356 +
             (C11181 - C11180 + C11183 - C11182) * C48282 +
             (C11185 - C11184 + C11187 - C11186) * C47348 +
             (C11189 - C11188 + C11191 - C11190) * C48289 +
             (C11193 - C11192 + C11195 - C11194) * C47362 +
             (C11197 - C11196 + C11199 - C11198) * C26147) *
                C30746 +
            (C13250 * C47356 + C13251 * C48282 + C13252 * C47348 +
             C13253 * C48289 + (C11748 - C11749 + C11750 - C11751) * C47362 +
             (C11752 - C11753 + C11754 - C11755) * C26147) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C47356 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48282 +
             (C11200 - C11201 + C11202 - C11203) * C47348 +
             (C11204 - C11205 + C11206 - C11207) * C48289 +
             (C11208 - C11209 + C11210 - C11211) * C47362 +
             (C11212 - C11213 + C11214 - C11215) * C26147) *
                C30746 +
            ((C12672 - C12673 + C12674 - C12675) * C47356 +
             (C12676 - C12677 + C12678 - C12679) * C48282 +
             (C12454 - C12455 + C12456 - C12457) * C47348 +
             (C12458 - C12459 + C12460 - C12461) * C48289 +
             (C12462 - C12463 + C12464 - C12465) * C47362 +
             (C12466 - C12467 + C12468 - C12469) * C26147) *
                C48326) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C47356 +
             (C11205 - C11204 + C11207 - C11206) * C48282 +
             (C11209 - C11208 + C11211 - C11210) * C47348 +
             (C11213 - C11212 + C11215 - C11214) * C48289 +
             (C11217 - C11216 + C11219 - C11218) * C47362 +
             (C11221 - C11220 + C11223 - C11222) * C26147) *
                C30746 +
            ((C12455 - C12454 + C12457 - C12456) * C47356 +
             (C12459 - C12458 + C12461 - C12460) * C48282 +
             (C12463 - C12462 + C12465 - C12464) * C47348 +
             (C12467 - C12466 + C12469 - C12468) * C48289 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C47362 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C26147) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C47356 +
             (C12669 - C12668 + C12671 - C12670) * C48282 + C13250 * C47348 +
             C13251 * C48289 + C13252 * C47362 + C13253 * C26147) *
                C30746 +
            ((C13788 - C13789 + C13790 - C13791) * C47356 +
             (C13792 - C13793 + C13794 - C13795) * C48282 + C19227 * C47348 +
             C19228 * C48289 + (C13240 - C13241 + C13242 - C13243) * C47362 +
             (C13244 - C13245 + C13246 - C13247) * C26147) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C47356 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48282 +
             (C11200 - C11201 + C11202 - C11203) * C47348 +
             (C11204 - C11205 + C11206 - C11207) * C48289 +
             (C11208 - C11209 + C11210 - C11211) * C47362 +
             (C11212 - C11213 + C11214 - C11215) * C26147) *
                C30746 +
            ((C12672 - C12673 + C12674 - C12675) * C47356 +
             (C12676 - C12677 + C12678 - C12679) * C48282 +
             (C12454 - C12455 + C12456 - C12457) * C47348 +
             (C12458 - C12459 + C12460 - C12461) * C48289 +
             (C12462 - C12463 + C12464 - C12465) * C47362 +
             (C12466 - C12467 + C12468 - C12469) * C26147) *
                C48326) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C47356 +
             (C12677 - C12676 + C12679 - C12678) * C48282 +
             (C12455 - C12454 + C12457 - C12456) * C47348 +
             (C12459 - C12458 + C12461 - C12460) * C48289 +
             (C12463 - C12462 + C12465 - C12464) * C47362 +
             (C12467 - C12466 + C12469 - C12468) * C26147) *
                C30746 +
            ((C18668 - C18667 + C18670 - C18669) * C47356 +
             (C18672 - C18671 + C18674 - C18673) * C48282 +
             (C18466 - C18465 + C18468 - C18467) * C47348 +
             (C18470 - C18469 + C18472 - C18471) * C48289 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C47362 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C26147) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C47356 +
             (C11181 - C11180 + C11183 - C11182) * C48282 +
             (C11185 - C11184 + C11187 - C11186) * C47348 +
             (C11189 - C11188 + C11191 - C11190) * C48289 +
             (C11193 - C11192 + C11195 - C11194) * C47362 +
             (C11197 - C11196 + C11199 - C11198) * C26147) *
                C30746 +
            (C13250 * C47356 + C13251 * C48282 + C13252 * C47348 +
             C13253 * C48289 + (C11748 - C11749 + C11750 - C11751) * C47362 +
             (C11752 - C11753 + C11754 - C11755) * C26147) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C47356 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48282 +
             (C11200 - C11201 + C11202 - C11203) * C47348 +
             (C11204 - C11205 + C11206 - C11207) * C48289 +
             (C11208 - C11209 + C11210 - C11211) * C47362 +
             (C11212 - C11213 + C11214 - C11215) * C26147) *
                C30746 +
            ((C12672 - C12673 + C12674 - C12675) * C47356 +
             (C12676 - C12677 + C12678 - C12679) * C48282 +
             (C12454 - C12455 + C12456 - C12457) * C47348 +
             (C12458 - C12459 + C12460 - C12461) * C48289 +
             (C12462 - C12463 + C12464 - C12465) * C47362 +
             (C12466 - C12467 + C12468 - C12469) * C26147) *
                C48326) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C47356 +
             (C11205 - C11204 + C11207 - C11206) * C48282 +
             (C11209 - C11208 + C11211 - C11210) * C47348 +
             (C11213 - C11212 + C11215 - C11214) * C48289 +
             (C11217 - C11216 + C11219 - C11218) * C47362 +
             (C11221 - C11220 + C11223 - C11222) * C26147) *
                C30746 +
            ((C12455 - C12454 + C12457 - C12456) * C47356 +
             (C12459 - C12458 + C12461 - C12460) * C48282 +
             (C12463 - C12462 + C12465 - C12464) * C47348 +
             (C12467 - C12466 + C12469 - C12468) * C48289 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C47362 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C26147) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C47356 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48282 +
            (C11176 - C11177 + C11178 - C11179) * C47348 +
            (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
            C11599 * C26147) *
               C30746 +
           ((C12664 - C12665 + C12666 - C12667) * C47356 +
            (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
            C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
               C48326) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C47356 +
            (C11181 - C11180 + C11183 - C11182) * C48282 +
            (C11185 - C11184 + C11187 - C11186) * C47348 +
            (C11189 - C11188 + C11191 - C11190) * C48289 +
            (C11193 - C11192 + C11195 - C11194) * C47362 +
            (C11197 - C11196 + C11199 - C11198) * C26147) *
               C30746 +
           (C13250 * C47356 + C13251 * C48282 + C13252 * C47348 +
            C13253 * C48289 + (C11748 - C11749 + C11750 - C11751) * C47362 +
            (C11752 - C11753 + C11754 - C11755) * C26147) *
               C48326) *
              C48210 * C514 +
          ((C11598 * C47356 + C11599 * C48282 + C11600 * C47348 +
            C11601 * C48289 + (C11591 - C11590 + C11593 - C11592) * C47362 +
            (C11595 - C11594 + C11597 - C11596) * C26147) *
               C30746 +
           (C13024 * C47356 + C13025 * C48282 +
            (C11749 - C11748 + C11751 - C11750) * C47348 +
            (C11753 - C11752 + C11755 - C11754) * C48289 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C47362 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C26147) *
               C48326) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C47356 +
             (C12669 - C12668 + C12671 - C12670) * C48282 + C13250 * C47348 +
             C13251 * C48289 + C13252 * C47362 + C13253 * C26147) *
                C30746 +
            ((C13788 - C13789 + C13790 - C13791) * C47356 +
             (C13792 - C13793 + C13794 - C13795) * C48282 + C19227 * C47348 +
             C19228 * C48289 + (C13240 - C13241 + C13242 - C13243) * C47362 +
             (C13244 - C13245 + C13246 - C13247) * C26147) *
                C48326) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C47356 +
             (C11181 - C11180 + C11183 - C11182) * C48282 +
             (C11185 - C11184 + C11187 - C11186) * C47348 +
             (C11189 - C11188 + C11191 - C11190) * C48289 +
             (C11193 - C11192 + C11195 - C11194) * C47362 +
             (C11197 - C11196 + C11199 - C11198) * C26147) *
                C30746 +
            (C13250 * C47356 + C13251 * C48282 + C13252 * C47348 +
             C13253 * C48289 + (C11748 - C11749 + C11750 - C11751) * C47362 +
             (C11752 - C11753 + C11754 - C11755) * C26147) *
                C48326) *
               C339 +
           ((C13248 * C47356 + C13249 * C48282 + C13024 * C47348 +
             C13025 * C48289 + (C11749 - C11748 + C11751 - C11750) * C47362 +
             (C11753 - C11752 + C11755 - C11754) * C26147) *
                C30746 +
            (C19225 * C47356 + C19226 * C48282 +
             (C13241 - C13240 + C13243 - C13242) * C47348 +
             (C13245 - C13244 + C13247 - C13246) * C48289 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C47362 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C26147) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C47356 +
             (C12669 - C12668 + C12671 - C12670) * C48282 + C13250 * C47348 +
             C13251 * C48289 + C13252 * C47362 + C13253 * C26147) *
                C30746 +
            ((C13788 - C13789 + C13790 - C13791) * C47356 +
             (C13792 - C13793 + C13794 - C13795) * C48282 + C19227 * C47348 +
             C19228 * C48289 + (C13240 - C13241 + C13242 - C13243) * C47362 +
             (C13244 - C13245 + C13246 - C13247) * C26147) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C47356 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48282 +
             (C11200 - C11201 + C11202 - C11203) * C47348 +
             (C11204 - C11205 + C11206 - C11207) * C48289 +
             (C11208 - C11209 + C11210 - C11211) * C47362 +
             (C11212 - C11213 + C11214 - C11215) * C26147) *
                C30746 +
            ((C12672 - C12673 + C12674 - C12675) * C47356 +
             (C12676 - C12677 + C12678 - C12679) * C48282 +
             (C12454 - C12455 + C12456 - C12457) * C47348 +
             (C12458 - C12459 + C12460 - C12461) * C48289 +
             (C12462 - C12463 + C12464 - C12465) * C47362 +
             (C12466 - C12467 + C12468 - C12469) * C26147) *
                C48326) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C47356 +
             (C12677 - C12676 + C12679 - C12678) * C48282 +
             (C12455 - C12454 + C12457 - C12456) * C47348 +
             (C12459 - C12458 + C12461 - C12460) * C48289 +
             (C12463 - C12462 + C12465 - C12464) * C47362 +
             (C12467 - C12466 + C12469 - C12468) * C26147) *
                C30746 +
            ((C18668 - C18667 + C18670 - C18669) * C47356 +
             (C18672 - C18671 + C18674 - C18673) * C48282 +
             (C18466 - C18465 + C18468 - C18467) * C47348 +
             (C18470 - C18469 + C18472 - C18471) * C48289 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C47362 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C26147) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C47356 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48282 +
             (C11176 - C11177 + C11178 - C11179) * C47348 +
             (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
             C11599 * C26147) *
                C30746 +
            ((C12664 - C12665 + C12666 - C12667) * C47356 +
             (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
             C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C47356 +
             (C12669 - C12668 + C12671 - C12670) * C48282 + C13250 * C47348 +
             C13251 * C48289 + C13252 * C47362 + C13253 * C26147) *
                C30746 +
            ((C13788 - C13789 + C13790 - C13791) * C47356 +
             (C13792 - C13793 + C13794 - C13795) * C48282 + C19227 * C47348 +
             C19228 * C48289 + (C13240 - C13241 + C13242 - C13243) * C47362 +
             (C13244 - C13245 + C13246 - C13247) * C26147) *
                C48326) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C47356 +
             (C11181 - C11180 + C11183 - C11182) * C48282 +
             (C11185 - C11184 + C11187 - C11186) * C47348 +
             (C11189 - C11188 + C11191 - C11190) * C48289 +
             (C11193 - C11192 + C11195 - C11194) * C47362 +
             (C11197 - C11196 + C11199 - C11198) * C26147) *
                C30746 +
            (C13250 * C47356 + C13251 * C48282 + C13252 * C47348 +
             C13253 * C48289 + (C11748 - C11749 + C11750 - C11751) * C47362 +
             (C11752 - C11753 + C11754 - C11755) * C26147) *
                C48326) *
               C721 +
           ((C13248 * C47356 + C13249 * C48282 + C13024 * C47348 +
             C13025 * C48289 + (C11749 - C11748 + C11751 - C11750) * C47362 +
             (C11753 - C11752 + C11755 - C11754) * C26147) *
                C30746 +
            (C19225 * C47356 + C19226 * C48282 +
             (C13241 - C13240 + C13243 - C13242) * C47348 +
             (C13245 - C13244 + C13247 - C13246) * C48289 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C47362 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C26147) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C47356 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48282 +
            (C11176 - C11177 + C11178 - C11179) * C47348 +
            (C11180 - C11181 + C11182 - C11183) * C48289 + C11598 * C47362 +
            C11599 * C26147) *
               C30746 +
           ((C12664 - C12665 + C12666 - C12667) * C47356 +
            (C12668 - C12669 + C12670 - C12671) * C48282 + C13248 * C47348 +
            C13249 * C48289 + C13024 * C47362 + C13025 * C26147) *
               C48326) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C47356 +
            (C12669 - C12668 + C12671 - C12670) * C48282 + C13250 * C47348 +
            C13251 * C48289 + C13252 * C47362 + C13253 * C26147) *
               C30746 +
           ((C13788 - C13789 + C13790 - C13791) * C47356 +
            (C13792 - C13793 + C13794 - C13795) * C48282 + C19227 * C47348 +
            C19228 * C48289 + (C13240 - C13241 + C13242 - C13243) * C47362 +
            (C13244 - C13245 + C13246 - C13247) * C26147) *
               C48326) *
              C868 +
          ((C19777 * C47356 + C19778 * C48282 + C19225 * C47348 +
            C19226 * C48289 + (C13241 - C13240 + C13243 - C13242) * C47362 +
            (C13245 - C13244 + C13247 - C13246) * C26147) *
               C30746 +
           (C20885 * C47356 + C20886 * C48282 +
            (C19218 - C19217 + C19220 - C19219) * C47348 +
            (C19222 - C19221 + C19224 - C19223) * C48289 +
            (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
             C47204 * C10051) *
                C47362 +
            (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
             C47204 * C10055) *
                C26147) *
               C48326) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C47356 +
            (C48122 * C140 - C8908 * C131) * C48282 + (C9005 - C9006) * C47348 +
            (C9007 - C9008) * C48289 + C9275 * C47362 + C9276 * C26147) *
               C48322 +
           ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
            C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
            C10332 * C26147) *
               C48329 +
           (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
            C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
               C36194) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C47356 +
            (C8908 * C132 - C48122 * C141) * C48282 + (C9021 - C9022) * C47348 +
            (C9023 - C9024) * C48289 + (C9025 - C9026) * C47362 +
            (C9027 - C9028) * C26147) *
               C48322 +
           ((C10067 - C10068) * C47356 + (C10069 - C10070) * C48282 +
            (C9889 - C9890) * C47348 + (C9891 - C9892) * C48289 +
            (C9893 - C9894) * C47362 + (C9895 - C9896) * C26147) *
               C48329 +
           ((C10071 - C10072) * C47356 + (C10073 - C10074) * C48282 +
            (C9897 - C9898) * C47348 + (C9899 - C9900) * C48289 +
            (C9901 - C9902) * C47362 + (C9903 - C9904) * C26147) *
               C36194) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C47356 +
            (C48122 * C142 - C8908 * C133) * C48282 +
            (C48122 * C241 - C8908 * C235) * C47348 +
            (C48122 * C253 - C8908 * C246) * C48289 +
            (C48122 * C524 - C8908 * C519) * C47362 +
            (C48122 * C534 - C8908 * C529) * C26147) *
               C48322 +
           ((C48122 * C349 - C8908 * C343) * C47356 +
            (C48122 * C361 - C8908 * C354) * C48282 +
            (C48122 * C626 - C8908 * C621) * C47348 +
            (C48122 * C636 - C8908 * C631) * C48289 +
            (C48122 * C1374 - C8908 * C1370) * C47362 +
            (C48122 * C1382 - C8908 * C1377) * C26147) *
               C48329 +
           ((C48122 * C877 - C8908 * C872) * C47356 +
            (C48122 * C887 - C8908 * C882) * C48282 +
            (C48122 * C2266 - C8908 * C2260) * C47348 +
            (C48122 * C2278 - C8908 * C2269) * C48289 +
            (C48122 * C2272 - C8908 * C2263) * C47362 +
            (C48122 * C2281 - C8908 * C2275) * C26147) *
               C36194) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C48210 * C229 +
                   (((C9006 - C9005) * C47356 + (C9008 - C9007) * C48282 +
                     (C9010 - C9009) * C47348 + (C9012 - C9011) * C48289 +
                     (C9014 - C9013) * C47362 + (C9016 - C9015) * C26147) *
                        C48322 +
                    (C10493 * C47356 + C10494 * C48282 + C10495 * C47348 +
                     C10496 * C48289 + C14518 * C47362 + C14519 * C26147) *
                        C48329 +
                    (C10497 * C47356 + C10498 * C48282 + C10499 * C47348 +
                     C10500 * C48289 + (C10335 - C10336) * C47362 +
                     (C10337 - C10338) * C26147) *
                        C36194) *
                       C48210 * C48511) *
                      C231 +
                  ((((C8908 * C120 - C48122 * C127) * C47356 +
                     (C8908 * C132 - C48122 * C141) * C48282 +
                     (C9021 - C9022) * C47348 + (C9023 - C9024) * C48289 +
                     (C9025 - C9026) * C47362 + (C9027 - C9028) * C26147) *
                        C48322 +
                    ((C10067 - C10068) * C47356 + (C10069 - C10070) * C48282 +
                     (C9889 - C9890) * C47348 + (C9891 - C9892) * C48289 +
                     (C9893 - C9894) * C47362 + (C9895 - C9896) * C26147) *
                        C48329 +
                    ((C10071 - C10072) * C47356 + (C10073 - C10074) * C48282 +
                     (C9897 - C9898) * C47348 + (C9899 - C9900) * C48289 +
                     (C9901 - C9902) * C47362 + (C9903 - C9904) * C26147) *
                        C36194) *
                       C48210 * C229 +
                   (((C9022 - C9021) * C47356 + (C9024 - C9023) * C48282 +
                     (C9026 - C9025) * C47348 + (C9028 - C9027) * C48289 +
                     (C9030 - C9029) * C47362 + (C9032 - C9031) * C26147) *
                        C48322 +
                    ((C9890 - C9889) * C47356 + (C9892 - C9891) * C48282 +
                     (C9894 - C9893) * C47348 + (C9896 - C9895) * C48289 +
                     (C14025 - C14024) * C47362 + (C14027 - C14026) * C26147) *
                        C48329 +
                    ((C9898 - C9897) * C47356 + (C9900 - C9899) * C48282 +
                     (C9902 - C9901) * C47348 + (C9904 - C9903) * C48289 +
                     (C48122 * C9877 - C8908 * C9876) * C47362 +
                     (C48122 * C9879 - C8908 * C9878) * C26147) *
                        C36194) *
                       C48210 * C48511) *
                      C48509)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C339 +
                   (((C10060 - C10059) * C47356 + (C10062 - C10061) * C48282 +
                     C10493 * C47348 + C10494 * C48289 + C10495 * C47362 +
                     C10496 * C26147) *
                        C48322 +
                    ((C10064 - C10063) * C47356 + (C10066 - C10065) * C48282 +
                     C10497 * C47348 + C10498 * C48289 + C10499 * C47362 +
                     C10500 * C26147) *
                        C48329 +
                    ((C10925 - C10926) * C47356 + (C10927 - C10928) * C48282 +
                     C21612 * C47348 + C21613 * C48289 +
                     (C10505 - C10506) * C47362 + (C10507 - C10508) * C26147) *
                        C36194) *
                       C48513) *
                      C48193 * C231 +
                  ((((C8908 * C120 - C48122 * C127) * C47356 +
                     (C8908 * C132 - C48122 * C141) * C48282 +
                     (C9021 - C9022) * C47348 + (C9023 - C9024) * C48289 +
                     (C9025 - C9026) * C47362 + (C9027 - C9028) * C26147) *
                        C48322 +
                    ((C10067 - C10068) * C47356 + (C10069 - C10070) * C48282 +
                     (C9889 - C9890) * C47348 + (C9891 - C9892) * C48289 +
                     (C9893 - C9894) * C47362 + (C9895 - C9896) * C26147) *
                        C48329 +
                    ((C10071 - C10072) * C47356 + (C10073 - C10074) * C48282 +
                     (C9897 - C9898) * C47348 + (C9899 - C9900) * C48289 +
                     (C9901 - C9902) * C47362 + (C9903 - C9904) * C26147) *
                        C36194) *
                       C339 +
                   (((C10068 - C10067) * C47356 + (C10070 - C10069) * C48282 +
                     (C9890 - C9889) * C47348 + (C9892 - C9891) * C48289 +
                     (C9894 - C9893) * C47362 + (C9896 - C9895) * C26147) *
                        C48322 +
                    ((C10072 - C10071) * C47356 + (C10074 - C10073) * C48282 +
                     (C9898 - C9897) * C47348 + (C9900 - C9899) * C48289 +
                     (C9902 - C9901) * C47362 + (C9904 - C9903) * C26147) *
                        C48329 +
                    ((C17637 - C17636) * C47356 + (C17639 - C17638) * C48282 +
                     (C21119 - C21118) * C47348 + (C21121 - C21120) * C48289 +
                     (C48122 * C10054 - C8908 * C10051) * C47362 +
                     (C48122 * C10057 - C8908 * C10055) * C26147) *
                        C36194) *
                       C48513) *
                      C48193 * C48509)) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C48210 * C447 +
                   (((C9006 - C9005) * C47356 + (C9008 - C9007) * C48282 +
                     (C9010 - C9009) * C47348 + (C9012 - C9011) * C48289 +
                     (C9014 - C9013) * C47362 + (C9016 - C9015) * C26147) *
                        C48322 +
                    (C10493 * C47356 + C10494 * C48282 + C10495 * C47348 +
                     C10496 * C48289 + C14518 * C47362 + C14519 * C26147) *
                        C48329 +
                    (C10497 * C47356 + C10498 * C48282 + C10499 * C47348 +
                     C10500 * C48289 + (C10335 - C10336) * C47362 +
                     (C10337 - C10338) * C26147) *
                        C36194) *
                       C48210 * C48511) *
                      C449 +
                  ((((C8908 * C120 - C48122 * C127) * C47356 +
                     (C8908 * C132 - C48122 * C141) * C48282 +
                     (C9021 - C9022) * C47348 + (C9023 - C9024) * C48289 +
                     (C9025 - C9026) * C47362 + (C9027 - C9028) * C26147) *
                        C48322 +
                    ((C10067 - C10068) * C47356 + (C10069 - C10070) * C48282 +
                     (C9889 - C9890) * C47348 + (C9891 - C9892) * C48289 +
                     (C9893 - C9894) * C47362 + (C9895 - C9896) * C26147) *
                        C48329 +
                    ((C10071 - C10072) * C47356 + (C10073 - C10074) * C48282 +
                     (C9897 - C9898) * C47348 + (C9899 - C9900) * C48289 +
                     (C9901 - C9902) * C47362 + (C9903 - C9904) * C26147) *
                        C36194) *
                       C48210 * C447 +
                   (((C9022 - C9021) * C47356 + (C9024 - C9023) * C48282 +
                     (C9026 - C9025) * C47348 + (C9028 - C9027) * C48289 +
                     (C9030 - C9029) * C47362 + (C9032 - C9031) * C26147) *
                        C48322 +
                    ((C9890 - C9889) * C47356 + (C9892 - C9891) * C48282 +
                     (C9894 - C9893) * C47348 + (C9896 - C9895) * C48289 +
                     (C14025 - C14024) * C47362 + (C14027 - C14026) * C26147) *
                        C48329 +
                    ((C9898 - C9897) * C47356 + (C9900 - C9899) * C48282 +
                     (C9902 - C9901) * C47348 + (C9904 - C9903) * C48289 +
                     (C48122 * C9877 - C8908 * C9876) * C47362 +
                     (C48122 * C9879 - C8908 * C9878) * C26147) *
                        C36194) *
                       C48210 * C48511) *
                      C48509)) /
                (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C47356 +
            (C48122 * C140 - C8908 * C131) * C48282 + (C9005 - C9006) * C47348 +
            (C9007 - C9008) * C48289 + C9275 * C47362 + C9276 * C26147) *
               C48322 +
           ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
            C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
            C10332 * C26147) *
               C48329 +
           (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
            C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
               C36194) *
              C48210 * C513 +
          (((C9006 - C9005) * C47356 + (C9008 - C9007) * C48282 +
            (C9010 - C9009) * C47348 + (C9012 - C9011) * C48289 +
            (C9014 - C9013) * C47362 + (C9016 - C9015) * C26147) *
               C48322 +
           (C10493 * C47356 + C10494 * C48282 + C10495 * C47348 +
            C10496 * C48289 + C14518 * C47362 + C14519 * C26147) *
               C48329 +
           (C10497 * C47356 + C10498 * C48282 + C10499 * C47348 +
            C10500 * C48289 + (C10335 - C10336) * C47362 +
            (C10337 - C10338) * C26147) *
               C36194) *
              C48210 * C514 +
          ((C9275 * C47356 + C9276 * C48282 + C9277 * C47348 + C9278 * C48289 +
            C9279 * C47362 + C9280 * C26147) *
               C48322 +
           (C10331 * C47356 + C10332 * C48282 + C14386 * C47348 +
            C14387 * C48289 + (C9384 - C9383) * C47362 +
            (C9386 - C9385) * C26147) *
               C48329 +
           (C10333 * C47356 + C10334 * C48282 + (C10336 - C10335) * C47348 +
            (C10338 - C10337) * C48289 +
            (C48122 * C9616 - C8908 * C9613) * C47362 +
            (C48122 * C9619 - C8908 * C9617) * C26147) *
               C36194) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C339 +
                   (((C10060 - C10059) * C47356 + (C10062 - C10061) * C48282 +
                     C10493 * C47348 + C10494 * C48289 + C10495 * C47362 +
                     C10496 * C26147) *
                        C48322 +
                    ((C10064 - C10063) * C47356 + (C10066 - C10065) * C48282 +
                     C10497 * C47348 + C10498 * C48289 + C10499 * C47362 +
                     C10500 * C26147) *
                        C48329 +
                    ((C10925 - C10926) * C47356 + (C10927 - C10928) * C48282 +
                     C21612 * C47348 + C21613 * C48289 +
                     (C10505 - C10506) * C47362 + (C10507 - C10508) * C26147) *
                        C36194) *
                       C48513) *
                      C447 +
                  ((((C9006 - C9005) * C47356 + (C9008 - C9007) * C48282 +
                     (C9010 - C9009) * C47348 + (C9012 - C9011) * C48289 +
                     (C9014 - C9013) * C47362 + (C9016 - C9015) * C26147) *
                        C48322 +
                    (C10493 * C47356 + C10494 * C48282 + C10495 * C47348 +
                     C10496 * C48289 + C14518 * C47362 + C14519 * C26147) *
                        C48329 +
                    (C10497 * C47356 + C10498 * C48282 + C10499 * C47348 +
                     C10500 * C48289 + (C10335 - C10336) * C47362 +
                     (C10337 - C10338) * C26147) *
                        C36194) *
                       C339 +
                   ((C10489 * C47356 + C10490 * C48282 + C10331 * C47348 +
                     C10332 * C48289 + C14386 * C47362 + C14387 * C26147) *
                        C48322 +
                    (C10491 * C47356 + C10492 * C48282 + C10333 * C47348 +
                     C10334 * C48289 + (C10336 - C10335) * C47362 +
                     (C10338 - C10337) * C26147) *
                        C48329 +
                    (C21610 * C47356 + C21611 * C48282 +
                     (C10506 - C10505) * C47348 + (C10508 - C10507) * C48289 +
                     (C48122 * C10485 - C8908 * C10484) * C47362 +
                     (C48122 * C10487 - C8908 * C10486) * C26147) *
                        C36194) *
                       C48513) *
                      C48511) *
                 C48159) /
                (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C721 +
                   (((C10060 - C10059) * C47356 + (C10062 - C10061) * C48282 +
                     C10493 * C47348 + C10494 * C48289 + C10495 * C47362 +
                     C10496 * C26147) *
                        C48322 +
                    ((C10064 - C10063) * C47356 + (C10066 - C10065) * C48282 +
                     C10497 * C47348 + C10498 * C48289 + C10499 * C47362 +
                     C10500 * C26147) *
                        C48329 +
                    ((C10925 - C10926) * C47356 + (C10927 - C10928) * C48282 +
                     C21612 * C47348 + C21613 * C48289 +
                     (C10505 - C10506) * C47362 + (C10507 - C10508) * C26147) *
                        C36194) *
                       C48513) *
                      C48193 * C449 +
                  ((((C8908 * C120 - C48122 * C127) * C47356 +
                     (C8908 * C132 - C48122 * C141) * C48282 +
                     (C9021 - C9022) * C47348 + (C9023 - C9024) * C48289 +
                     (C9025 - C9026) * C47362 + (C9027 - C9028) * C26147) *
                        C48322 +
                    ((C10067 - C10068) * C47356 + (C10069 - C10070) * C48282 +
                     (C9889 - C9890) * C47348 + (C9891 - C9892) * C48289 +
                     (C9893 - C9894) * C47362 + (C9895 - C9896) * C26147) *
                        C48329 +
                    ((C10071 - C10072) * C47356 + (C10073 - C10074) * C48282 +
                     (C9897 - C9898) * C47348 + (C9899 - C9900) * C48289 +
                     (C9901 - C9902) * C47362 + (C9903 - C9904) * C26147) *
                        C36194) *
                       C721 +
                   (((C10068 - C10067) * C47356 + (C10070 - C10069) * C48282 +
                     (C9890 - C9889) * C47348 + (C9892 - C9891) * C48289 +
                     (C9894 - C9893) * C47362 + (C9896 - C9895) * C26147) *
                        C48322 +
                    ((C10072 - C10071) * C47356 + (C10074 - C10073) * C48282 +
                     (C9898 - C9897) * C47348 + (C9900 - C9899) * C48289 +
                     (C9902 - C9901) * C47362 + (C9904 - C9903) * C26147) *
                        C48329 +
                    ((C17637 - C17636) * C47356 + (C17639 - C17638) * C48282 +
                     (C21119 - C21118) * C47348 + (C21121 - C21120) * C48289 +
                     (C48122 * C10054 - C8908 * C10051) * C47362 +
                     (C48122 * C10057 - C8908 * C10055) * C26147) *
                        C36194) *
                       C48513) *
                      C48193 * C48509)) /
                (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C48122 * C126 - C8908 * C119) * C47356 +
                     (C48122 * C140 - C8908 * C131) * C48282 +
                     (C9005 - C9006) * C47348 + (C9007 - C9008) * C48289 +
                     C9275 * C47362 + C9276 * C26147) *
                        C48322 +
                    ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
                     C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
                     C10332 * C26147) *
                        C48329 +
                    (C10919 * C47356 + C10920 * C48282 + C10491 * C47348 +
                     C10492 * C48289 + C10333 * C47362 + C10334 * C26147) *
                        C36194) *
                       C721 +
                   (((C10060 - C10059) * C47356 + (C10062 - C10061) * C48282 +
                     C10493 * C47348 + C10494 * C48289 + C10495 * C47362 +
                     C10496 * C26147) *
                        C48322 +
                    ((C10064 - C10063) * C47356 + (C10066 - C10065) * C48282 +
                     C10497 * C47348 + C10498 * C48289 + C10499 * C47362 +
                     C10500 * C26147) *
                        C48329 +
                    ((C10925 - C10926) * C47356 + (C10927 - C10928) * C48282 +
                     C21612 * C47348 + C21613 * C48289 +
                     (C10505 - C10506) * C47362 + (C10507 - C10508) * C26147) *
                        C36194) *
                       C48513) *
                      C229 +
                  ((((C9006 - C9005) * C47356 + (C9008 - C9007) * C48282 +
                     (C9010 - C9009) * C47348 + (C9012 - C9011) * C48289 +
                     (C9014 - C9013) * C47362 + (C9016 - C9015) * C26147) *
                        C48322 +
                    (C10493 * C47356 + C10494 * C48282 + C10495 * C47348 +
                     C10496 * C48289 + C14518 * C47362 + C14519 * C26147) *
                        C48329 +
                    (C10497 * C47356 + C10498 * C48282 + C10499 * C47348 +
                     C10500 * C48289 + (C10335 - C10336) * C47362 +
                     (C10337 - C10338) * C26147) *
                        C36194) *
                       C721 +
                   ((C10489 * C47356 + C10490 * C48282 + C10331 * C47348 +
                     C10332 * C48289 + C14386 * C47362 + C14387 * C26147) *
                        C48322 +
                    (C10491 * C47356 + C10492 * C48282 + C10333 * C47348 +
                     C10334 * C48289 + (C10336 - C10335) * C47362 +
                     (C10338 - C10337) * C26147) *
                        C48329 +
                    (C21610 * C47356 + C21611 * C48282 +
                     (C10506 - C10505) * C47348 + (C10508 - C10507) * C48289 +
                     (C48122 * C10485 - C8908 * C10484) * C47362 +
                     (C48122 * C10487 - C8908 * C10486) * C26147) *
                        C36194) *
                       C48513) *
                      C48511) *
                 C48159) /
                (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C47356 +
            (C48122 * C140 - C8908 * C131) * C48282 + (C9005 - C9006) * C47348 +
            (C9007 - C9008) * C48289 + C9275 * C47362 + C9276 * C26147) *
               C48322 +
           ((C10059 - C10060) * C47356 + (C10061 - C10062) * C48282 +
            C10489 * C47348 + C10490 * C48289 + C10331 * C47362 +
            C10332 * C26147) *
               C48329 +
           C47161 * C36194) *
              C867 +
          (((C10060 - C10059) * C47356 + (C10062 - C10061) * C48282 +
            C10493 * C47348 + C10494 * C48289 + C10495 * C47362 +
            C10496 * C26147) *
               C48322 +
           ((C10064 - C10063) * C47356 + (C10066 - C10065) * C48282 +
            C10497 * C47348 + C10498 * C48289 + C10499 * C47362 +
            C10500 * C26147) *
               C48329 +
           ((C10925 - C10926) * C47356 + (C10927 - C10928) * C48282 +
            C21612 * C47348 + C21613 * C48289 + (C10505 - C10506) * C47362 +
            (C10507 - C10508) * C26147) *
               C36194) *
              C868 +
          (C47161 * C48322 +
           (C18110 * C47356 + C18111 * C48282 + C21610 * C47348 +
            C21611 * C48289 + (C10506 - C10505) * C47362 +
            (C10508 - C10507) * C26147) *
               C48329 +
           (C18112 * C47356 + C18113 * C48282 + (C17875 - C17874) * C47348 +
            (C17877 - C17876) * C48289 +
            (C48122 * C10914 - C8908 * C10911) * C47362 +
            (C48122 * C10917 - C8908 * C10915) * C26147) *
               C36194) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C23241 +
            (C8908 * C132 - C48122 * C141) * C48558 + (C9021 - C9022) * C23242 +
            (C9023 - C9024) * C48554 + (C9025 - C9026) * C23243 +
            (C9027 - C9028) * C48544 + (C9029 - C9030) * C23244 +
            (C9031 - C9032) * C48526) *
               C30746 +
           ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
            (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
            (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
            (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C23241 +
            (C48122 * C142 - C8908 * C133) * C48558 +
            (C48122 * C241 - C8908 * C235) * C23242 +
            (C48122 * C253 - C8908 * C246) * C48554 +
            (C48122 * C524 - C8908 * C519) * C23243 +
            (C48122 * C534 - C8908 * C529) * C48544 +
            (C48122 * C1164 - C8908 * C1160) * C23244 +
            (C48122 * C1172 - C8908 * C1167) * C48526) *
               C30746 +
           ((C48122 * C349 - C8908 * C343) * C23241 +
            (C48122 * C361 - C8908 * C354) * C48558 +
            (C48122 * C626 - C8908 * C621) * C23242 +
            (C48122 * C636 - C8908 * C631) * C48554 +
            (C48122 * C1374 - C8908 * C1370) * C23243 +
            (C48122 * C1382 - C8908 * C1377) * C48544 +
            (C48122 * C1825 - C8908 * C1822) * C23244 +
            (C48122 * C1831 - C8908 * C1828) * C48526) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C22093 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C22087 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
               C30746 +
           ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
            (C7644 * C620 - C48548 * C625 + C7645 * C621 - C48535 * C626 +
             C7646 * C622 - C48503 * C627) *
                C22094 +
            (C7644 * C630 - C48548 * C635 + C7645 * C631 - C48535 * C636 +
             C7646 * C632 - C48503 * C637) *
                C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
             C48503 * C130 - C7646 * C123) *
                C22093 +
            (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
             C48503 * C144 - C7646 * C135) *
                C22087 +
            (C48548 * C241 - C7644 * C235 + C48535 * C242 - C7645 * C236 +
             C48503 * C243 - C7646 * C237) *
                C22094 +
            (C48548 * C253 - C7644 * C246 + C48535 * C254 - C7645 * C247 +
             C48503 * C255 - C7646 * C248) *
                C48286) *
               C30746 +
           ((C48548 * C349 - C7644 * C343 + C48535 * C350 - C7645 * C344 +
             C48503 * C351 - C7646 * C345) *
                C22093 +
            (C48548 * C361 - C7644 * C354 + C48535 * C362 - C7645 * C355 +
             C48503 * C363 - C7646 * C356) *
                C22087 +
            (C48548 * C626 - C7644 * C621 + C48535 * C627 - C7645 * C622 +
             C48503 * C628 - C7646 * C623) *
                C22094 +
            (C48548 * C636 - C7644 * C631 + C48535 * C637 - C7645 * C632 +
             C48503 * C638 - C7646 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C22093 +
            (C48122 * C140 - C8908 * C131) * C22087 + (C9005 - C9006) * C22094 +
            (C9007 - C9008) * C48286) *
               C48559 +
           ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
            C10489 * C22094 + C10490 * C48286) *
               C48556 +
           (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
            C10492 * C48286) *
               C48547 +
           (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
            C21611 * C48286) *
               C48532) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C22093 +
            (C8908 * C132 - C48122 * C141) * C22087 + (C9021 - C9022) * C22094 +
            (C9023 - C9024) * C48286) *
               C48559 +
           ((C10067 - C10068) * C22093 + (C10069 - C10070) * C22087 +
            (C9889 - C9890) * C22094 + (C9891 - C9892) * C48286) *
               C48556 +
           ((C10071 - C10072) * C22093 + (C10073 - C10074) * C22087 +
            (C9897 - C9898) * C22094 + (C9899 - C9900) * C48286) *
               C48547 +
           ((C17636 - C17637) * C22093 + (C17638 - C17639) * C22087 +
            (C21118 - C21119) * C22094 + (C21120 - C21121) * C48286) *
               C48532) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C22093 +
            (C48122 * C142 - C8908 * C133) * C22087 +
            (C48122 * C241 - C8908 * C235) * C22094 +
            (C48122 * C253 - C8908 * C246) * C48286) *
               C48559 +
           ((C48122 * C349 - C8908 * C343) * C22093 +
            (C48122 * C361 - C8908 * C354) * C22087 +
            (C48122 * C626 - C8908 * C621) * C22094 +
            (C48122 * C636 - C8908 * C631) * C48286) *
               C48556 +
           ((C48122 * C877 - C8908 * C872) * C22093 +
            (C48122 * C887 - C8908 * C882) * C22087 +
            (C48122 * C2266 - C8908 * C2260) * C22094 +
            (C48122 * C2278 - C8908 * C2269) * C48286) *
               C48547 +
           ((C48122 * C2697 - C8908 * C2693) * C22093 +
            (C48122 * C2705 - C8908 * C2700) * C22087 +
            (C48122 * C3162 - C8908 * C3159) * C22094 +
            (C48122 * C3168 - C8908 * C3165) * C48286) *
               C48532) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9022 - C9021) * C23241 + (C9024 - C9023) * C48558 +
             (C9026 - C9025) * C23242 + (C9028 - C9027) * C48554 +
             (C9030 - C9029) * C23243 + (C9032 - C9031) * C48544 +
             (C9034 - C9033) * C23244 + (C9036 - C9035) * C48526) *
                C30746 +
            ((C9890 - C9889) * C23241 + (C9892 - C9891) * C48558 +
             (C9894 - C9893) * C23242 + (C9896 - C9895) * C48554 +
             (C14025 - C14024) * C23243 + (C14027 - C14026) * C48544 +
             (C48122 * C9122 - C8908 * C9119) * C23244 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C22093 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C22087 +
             (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C22094 +
             (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C48286) *
                C30746 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22093 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C22087 +
             (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
              C48503 * C1378 - C7646 * C1371) *
                 C22094 +
             (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
              C48503 * C1383 - C7646 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C48210 * C229 +
           (((C9006 - C9005) * C22093 + (C9008 - C9007) * C22087 +
             (C9010 - C9009) * C22094 + (C9012 - C9011) * C48286) *
                C48559 +
            (C10493 * C22093 + C10494 * C22087 + C10495 * C22094 +
             C10496 * C48286) *
                C48556 +
            (C10497 * C22093 + C10498 * C22087 + C10499 * C22094 +
             C10500 * C48286) *
                C48547 +
            (C21612 * C22093 + C21613 * C22087 + (C10505 - C10506) * C22094 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C22093 +
             (C8908 * C132 - C48122 * C141) * C22087 +
             (C9021 - C9022) * C22094 + (C9023 - C9024) * C48286) *
                C48559 +
            ((C10067 - C10068) * C22093 + (C10069 - C10070) * C22087 +
             (C9889 - C9890) * C22094 + (C9891 - C9892) * C48286) *
                C48556 +
            ((C10071 - C10072) * C22093 + (C10073 - C10074) * C22087 +
             (C9897 - C9898) * C22094 + (C9899 - C9900) * C48286) *
                C48547 +
            ((C17636 - C17637) * C22093 + (C17638 - C17639) * C22087 +
             (C21118 - C21119) * C22094 + (C21120 - C21121) * C48286) *
                C48532) *
               C48210 * C229 +
           (((C9022 - C9021) * C22093 + (C9024 - C9023) * C22087 +
             (C9026 - C9025) * C22094 + (C9028 - C9027) * C48286) *
                C48559 +
            ((C9890 - C9889) * C22093 + (C9892 - C9891) * C22087 +
             (C9894 - C9893) * C22094 + (C9896 - C9895) * C48286) *
                C48556 +
            ((C9898 - C9897) * C22093 + (C9900 - C9899) * C22087 +
             (C9902 - C9901) * C22094 + (C9904 - C9903) * C48286) *
                C48547 +
            ((C21119 - C21118) * C22093 + (C21121 - C21120) * C22087 +
             (C48122 * C10054 - C8908 * C10051) * C22094 +
             (C48122 * C10057 - C8908 * C10055) * C48286) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C339 +
           (((C10068 - C10067) * C23241 + (C10070 - C10069) * C48558 +
             (C9890 - C9889) * C23242 + (C9892 - C9891) * C48554 +
             (C9894 - C9893) * C23243 + (C9896 - C9895) * C48544 +
             (C14025 - C14024) * C23244 + (C14027 - C14026) * C48526) *
                C30746 +
            ((C10072 - C10071) * C23241 + (C10074 - C10073) * C48558 +
             (C9898 - C9897) * C23242 + (C9900 - C9899) * C48554 +
             (C9902 - C9901) * C23243 + (C9904 - C9903) * C48544 +
             (C48122 * C9877 - C8908 * C9876) * C23244 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22094 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C339 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C22093 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C22087 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22094 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48286) *
                C30746 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C22093 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C22087 +
             (C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C22094 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C339 +
           (((C10060 - C10059) * C22093 + (C10062 - C10061) * C22087 +
             C10493 * C22094 + C10494 * C48286) *
                C48559 +
            ((C10064 - C10063) * C22093 + (C10066 - C10065) * C22087 +
             C10497 * C22094 + C10498 * C48286) *
                C48556 +
            ((C10925 - C10926) * C22093 + (C10927 - C10928) * C22087 +
             C21612 * C22094 + C21613 * C48286) *
                C48547 +
            ((C17633 - C17632) * C22093 + (C17635 - C17634) * C22087 +
             (C17874 - C17875) * C22094 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C22093 +
             (C8908 * C132 - C48122 * C141) * C22087 +
             (C9021 - C9022) * C22094 + (C9023 - C9024) * C48286) *
                C48559 +
            ((C10067 - C10068) * C22093 + (C10069 - C10070) * C22087 +
             (C9889 - C9890) * C22094 + (C9891 - C9892) * C48286) *
                C48556 +
            ((C10071 - C10072) * C22093 + (C10073 - C10074) * C22087 +
             (C9897 - C9898) * C22094 + (C9899 - C9900) * C48286) *
                C48547 +
            ((C17636 - C17637) * C22093 + (C17638 - C17639) * C22087 +
             (C21118 - C21119) * C22094 + (C21120 - C21121) * C48286) *
                C48532) *
               C339 +
           (((C10068 - C10067) * C22093 + (C10070 - C10069) * C22087 +
             (C9890 - C9889) * C22094 + (C9892 - C9891) * C48286) *
                C48559 +
            ((C10072 - C10071) * C22093 + (C10074 - C10073) * C22087 +
             (C9898 - C9897) * C22094 + (C9900 - C9899) * C48286) *
                C48556 +
            ((C17637 - C17636) * C22093 + (C17639 - C17638) * C22087 +
             (C21119 - C21118) * C22094 + (C21121 - C21120) * C48286) *
                C48547 +
            ((C17641 - C17640) * C22093 + (C17643 - C17642) * C22087 +
             (C48122 * C17538 - C8908 * C17537) * C22094 +
             (C48122 * C17540 - C8908 * C17539) * C48286) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9022 - C9021) * C23241 + (C9024 - C9023) * C48558 +
             (C9026 - C9025) * C23242 + (C9028 - C9027) * C48554 +
             (C9030 - C9029) * C23243 + (C9032 - C9031) * C48544 +
             (C9034 - C9033) * C23244 + (C9036 - C9035) * C48526) *
                C30746 +
            ((C9890 - C9889) * C23241 + (C9892 - C9891) * C48558 +
             (C9894 - C9893) * C23242 + (C9896 - C9895) * C48554 +
             (C14025 - C14024) * C23243 + (C14027 - C14026) * C48544 +
             (C48122 * C9122 - C8908 * C9119) * C23244 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C22093 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C22087 +
             (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C22094 +
             (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C48286) *
                C30746 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22093 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C22087 +
             (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
              C48503 * C1378 - C7646 * C1371) *
                 C22094 +
             (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
              C48503 * C1383 - C7646 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C48210 * C447 +
           (((C9006 - C9005) * C22093 + (C9008 - C9007) * C22087 +
             (C9010 - C9009) * C22094 + (C9012 - C9011) * C48286) *
                C48559 +
            (C10493 * C22093 + C10494 * C22087 + C10495 * C22094 +
             C10496 * C48286) *
                C48556 +
            (C10497 * C22093 + C10498 * C22087 + C10499 * C22094 +
             C10500 * C48286) *
                C48547 +
            (C21612 * C22093 + C21613 * C22087 + (C10505 - C10506) * C22094 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C22093 +
             (C8908 * C132 - C48122 * C141) * C22087 +
             (C9021 - C9022) * C22094 + (C9023 - C9024) * C48286) *
                C48559 +
            ((C10067 - C10068) * C22093 + (C10069 - C10070) * C22087 +
             (C9889 - C9890) * C22094 + (C9891 - C9892) * C48286) *
                C48556 +
            ((C10071 - C10072) * C22093 + (C10073 - C10074) * C22087 +
             (C9897 - C9898) * C22094 + (C9899 - C9900) * C48286) *
                C48547 +
            ((C17636 - C17637) * C22093 + (C17638 - C17639) * C22087 +
             (C21118 - C21119) * C22094 + (C21120 - C21121) * C48286) *
                C48532) *
               C48210 * C447 +
           (((C9022 - C9021) * C22093 + (C9024 - C9023) * C22087 +
             (C9026 - C9025) * C22094 + (C9028 - C9027) * C48286) *
                C48559 +
            ((C9890 - C9889) * C22093 + (C9892 - C9891) * C22087 +
             (C9894 - C9893) * C22094 + (C9896 - C9895) * C48286) *
                C48556 +
            ((C9898 - C9897) * C22093 + (C9900 - C9899) * C22087 +
             (C9902 - C9901) * C22094 + (C9904 - C9903) * C48286) *
                C48547 +
            ((C21119 - C21118) * C22093 + (C21121 - C21120) * C22087 +
             (C48122 * C10054 - C8908 * C10051) * C22094 +
             (C48122 * C10057 - C8908 * C10055) * C48286) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C48210 * C513 +
          (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
            (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
            (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
            (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
               C30746 +
           (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
            C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
            (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
               C48326) *
              C48210 * C514 +
          ((C9275 * C23241 + C9276 * C48558 + C9277 * C23242 + C9278 * C48554 +
            C9279 * C23243 + C9280 * C48544 + (C9282 - C9281) * C23244 +
            (C9284 - C9283) * C48526) *
               C30746 +
           (C10331 * C23241 + C10332 * C48558 + C14386 * C23242 +
            C14387 * C48554 + (C9384 - C9383) * C23243 +
            (C9386 - C9385) * C48544 +
            (C48122 * C9367 - C8908 * C9366) * C23244 +
            (C48122 * C9369 - C8908 * C9368) * C48526) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
               C48326) *
              C48210 * C513 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
               C30746 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C8267 * C22093 + C8268 * C22087 +
            (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C22094 +
            (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C48286) *
               C30746 +
           ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22093 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C22087 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C22094 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C22093 +
            (C48122 * C140 - C8908 * C131) * C22087 + (C9005 - C9006) * C22094 +
            (C9007 - C9008) * C48286) *
               C48559 +
           ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
            C10489 * C22094 + C10490 * C48286) *
               C48556 +
           (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
            C10492 * C48286) *
               C48547 +
           (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
            C21611 * C48286) *
               C48532) *
              C48210 * C513 +
          (((C9006 - C9005) * C22093 + (C9008 - C9007) * C22087 +
            (C9010 - C9009) * C22094 + (C9012 - C9011) * C48286) *
               C48559 +
           (C10493 * C22093 + C10494 * C22087 + C10495 * C22094 +
            C10496 * C48286) *
               C48556 +
           (C10497 * C22093 + C10498 * C22087 + C10499 * C22094 +
            C10500 * C48286) *
               C48547 +
           (C21612 * C22093 + C21613 * C22087 + (C10505 - C10506) * C22094 +
            (C10507 - C10508) * C48286) *
               C48532) *
              C48210 * C514 +
          ((C9275 * C22093 + C9276 * C22087 + C9277 * C22094 + C9278 * C48286) *
               C48559 +
           (C10331 * C22093 + C10332 * C22087 + C14386 * C22094 +
            C14387 * C48286) *
               C48556 +
           (C10333 * C22093 + C10334 * C22087 + (C10336 - C10335) * C22094 +
            (C10338 - C10337) * C48286) *
               C48547 +
           ((C10506 - C10505) * C22093 + (C10508 - C10507) * C22087 +
            (C48122 * C10485 - C8908 * C10484) * C22094 +
            (C48122 * C10487 - C8908 * C10486) * C48286) *
               C48532) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C339 +
           ((C10489 * C23241 + C10490 * C48558 + C10331 * C23242 +
             C10332 * C48554 + C14386 * C23243 + C14387 * C48544 +
             (C9384 - C9383) * C23244 + (C9386 - C9385) * C48526) *
                C30746 +
            (C10491 * C23241 + C10492 * C48558 + C10333 * C23242 +
             C10334 * C48554 + (C10336 - C10335) * C23243 +
             (C10338 - C10337) * C48544 +
             (C48122 * C9616 - C8908 * C9613) * C23244 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            (C40036 * C22093 + C40037 * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C339 +
           ((C40034 * C22093 + C40035 * C22087 +
             (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22094 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48286) *
                C30746 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22093 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C22087 +
             (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
              C48503 * C2272 - C7646 * C2263) *
                 C22094 +
             (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
              C48503 * C2281 - C7646 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C339 +
           (((C10060 - C10059) * C22093 + (C10062 - C10061) * C22087 +
             C10493 * C22094 + C10494 * C48286) *
                C48559 +
            ((C10064 - C10063) * C22093 + (C10066 - C10065) * C22087 +
             C10497 * C22094 + C10498 * C48286) *
                C48556 +
            ((C10925 - C10926) * C22093 + (C10927 - C10928) * C22087 +
             C21612 * C22094 + C21613 * C48286) *
                C48547 +
            ((C17633 - C17632) * C22093 + (C17635 - C17634) * C22087 +
             (C17874 - C17875) * C22094 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C22093 + (C9008 - C9007) * C22087 +
             (C9010 - C9009) * C22094 + (C9012 - C9011) * C48286) *
                C48559 +
            (C10493 * C22093 + C10494 * C22087 + C10495 * C22094 +
             C10496 * C48286) *
                C48556 +
            (C10497 * C22093 + C10498 * C22087 + C10499 * C22094 +
             C10500 * C48286) *
                C48547 +
            (C21612 * C22093 + C21613 * C22087 + (C10505 - C10506) * C22094 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C339 +
           ((C10489 * C22093 + C10490 * C22087 + C10331 * C22094 +
             C10332 * C48286) *
                C48559 +
            (C10491 * C22093 + C10492 * C22087 + C10333 * C22094 +
             C10334 * C48286) *
                C48556 +
            (C21610 * C22093 + C21611 * C22087 + (C10506 - C10505) * C22094 +
             (C10508 - C10507) * C48286) *
                C48547 +
            ((C17875 - C17874) * C22093 + (C17877 - C17876) * C22087 +
             (C48122 * C10914 - C8908 * C10911) * C22094 +
             (C48122 * C10917 - C8908 * C10915) * C48286) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C721 +
           (((C10068 - C10067) * C23241 + (C10070 - C10069) * C48558 +
             (C9890 - C9889) * C23242 + (C9892 - C9891) * C48554 +
             (C9894 - C9893) * C23243 + (C9896 - C9895) * C48544 +
             (C14025 - C14024) * C23244 + (C14027 - C14026) * C48526) *
                C30746 +
            ((C10072 - C10071) * C23241 + (C10074 - C10073) * C48558 +
             (C9898 - C9897) * C23242 + (C9900 - C9899) * C48554 +
             (C9902 - C9901) * C23243 + (C9904 - C9903) * C48544 +
             (C48122 * C9877 - C8908 * C9876) * C23244 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C721 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C22093 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C22087 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22094 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48286) *
                C30746 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C22093 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C22087 +
             (C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C22094 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C721 +
           (((C10060 - C10059) * C22093 + (C10062 - C10061) * C22087 +
             C10493 * C22094 + C10494 * C48286) *
                C48559 +
            ((C10064 - C10063) * C22093 + (C10066 - C10065) * C22087 +
             C10497 * C22094 + C10498 * C48286) *
                C48556 +
            ((C10925 - C10926) * C22093 + (C10927 - C10928) * C22087 +
             C21612 * C22094 + C21613 * C48286) *
                C48547 +
            ((C17633 - C17632) * C22093 + (C17635 - C17634) * C22087 +
             (C17874 - C17875) * C22094 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C22093 +
             (C8908 * C132 - C48122 * C141) * C22087 +
             (C9021 - C9022) * C22094 + (C9023 - C9024) * C48286) *
                C48559 +
            ((C10067 - C10068) * C22093 + (C10069 - C10070) * C22087 +
             (C9889 - C9890) * C22094 + (C9891 - C9892) * C48286) *
                C48556 +
            ((C10071 - C10072) * C22093 + (C10073 - C10074) * C22087 +
             (C9897 - C9898) * C22094 + (C9899 - C9900) * C48286) *
                C48547 +
            ((C17636 - C17637) * C22093 + (C17638 - C17639) * C22087 +
             (C21118 - C21119) * C22094 + (C21120 - C21121) * C48286) *
                C48532) *
               C721 +
           (((C10068 - C10067) * C22093 + (C10070 - C10069) * C22087 +
             (C9890 - C9889) * C22094 + (C9892 - C9891) * C48286) *
                C48559 +
            ((C10072 - C10071) * C22093 + (C10074 - C10073) * C22087 +
             (C9898 - C9897) * C22094 + (C9900 - C9899) * C48286) *
                C48556 +
            ((C17637 - C17636) * C22093 + (C17639 - C17638) * C22087 +
             (C21119 - C21118) * C22094 + (C21121 - C21120) * C48286) *
                C48547 +
            ((C17641 - C17640) * C22093 + (C17643 - C17642) * C22087 +
             (C48122 * C17538 - C8908 * C17537) * C22094 +
             (C48122 * C17540 - C8908 * C17539) * C48286) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C721 +
           ((C10489 * C23241 + C10490 * C48558 + C10331 * C23242 +
             C10332 * C48554 + C14386 * C23243 + C14387 * C48544 +
             (C9384 - C9383) * C23244 + (C9386 - C9385) * C48526) *
                C30746 +
            (C10491 * C23241 + C10492 * C48558 + C10333 * C23242 +
             C10334 * C48554 + (C10336 - C10335) * C23243 +
             (C10338 - C10337) * C48544 +
             (C48122 * C9616 - C8908 * C9613) * C23244 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            (C40036 * C22093 + C40037 * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C721 +
           ((C40034 * C22093 + C40035 * C22087 +
             (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22094 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48286) *
                C30746 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22093 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C22087 +
             (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
              C48503 * C2272 - C7646 * C2263) *
                 C22094 +
             (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
              C48503 * C2281 - C7646 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C22093 +
             (C48122 * C140 - C8908 * C131) * C22087 +
             (C9005 - C9006) * C22094 + (C9007 - C9008) * C48286) *
                C48559 +
            ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
             C10489 * C22094 + C10490 * C48286) *
                C48556 +
            (C10919 * C22093 + C10920 * C22087 + C10491 * C22094 +
             C10492 * C48286) *
                C48547 +
            (C18110 * C22093 + C18111 * C22087 + C21610 * C22094 +
             C21611 * C48286) *
                C48532) *
               C721 +
           (((C10060 - C10059) * C22093 + (C10062 - C10061) * C22087 +
             C10493 * C22094 + C10494 * C48286) *
                C48559 +
            ((C10064 - C10063) * C22093 + (C10066 - C10065) * C22087 +
             C10497 * C22094 + C10498 * C48286) *
                C48556 +
            ((C10925 - C10926) * C22093 + (C10927 - C10928) * C22087 +
             C21612 * C22094 + C21613 * C48286) *
                C48547 +
            ((C17633 - C17632) * C22093 + (C17635 - C17634) * C22087 +
             (C17874 - C17875) * C22094 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C22093 + (C9008 - C9007) * C22087 +
             (C9010 - C9009) * C22094 + (C9012 - C9011) * C48286) *
                C48559 +
            (C10493 * C22093 + C10494 * C22087 + C10495 * C22094 +
             C10496 * C48286) *
                C48556 +
            (C10497 * C22093 + C10498 * C22087 + C10499 * C22094 +
             C10500 * C48286) *
                C48547 +
            (C21612 * C22093 + C21613 * C22087 + (C10505 - C10506) * C22094 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C721 +
           ((C10489 * C22093 + C10490 * C22087 + C10331 * C22094 +
             C10332 * C48286) *
                C48559 +
            (C10491 * C22093 + C10492 * C22087 + C10333 * C22094 +
             C10334 * C48286) *
                C48556 +
            (C21610 * C22093 + C21611 * C22087 + (C10506 - C10505) * C22094 +
             (C10508 - C10507) * C48286) *
                C48547 +
            ((C17875 - C17874) * C22093 + (C17877 - C17876) * C22087 +
             (C48122 * C10914 - C8908 * C10911) * C22094 +
             (C48122 * C10917 - C8908 * C10915) * C48286) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C867 +
          (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
            C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
            C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
               C30746 +
           ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
            C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
            C10500 * C48544 + (C10335 - C10336) * C23244 +
            (C10337 - C10338) * C48526) *
               C48326) *
              C868 +
          ((C10919 * C23241 + C10920 * C48558 + C10491 * C23242 +
            C10492 * C48554 + C10333 * C23243 + C10334 * C48544 +
            (C10336 - C10335) * C23244 + (C10338 - C10337) * C48526) *
               C30746 +
           (C18110 * C23241 + C18111 * C48558 + C21610 * C23242 +
            C21611 * C48554 + (C10506 - C10505) * C23243 +
            (C10508 - C10507) * C48544 +
            (C48122 * C10485 - C8908 * C10484) * C23244 +
            (C48122 * C10487 - C8908 * C10486) * C48526) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            C40034 * C22094 + C40035 * C48286) *
               C48326) *
              C867 +
          (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
            (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
            C40036 * C22094 + C40037 * C48286) *
               C30746 +
           ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
            (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
            (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
            (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
               C48326) *
              C868 +
          ((C16167 * C22093 + C16168 * C22087 +
            (C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22094 +
            (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48286) *
               C30746 +
           ((C16154 - C16153 + C16156 - C16155 + C16158 - C16157) * C22093 +
            (C16160 - C16159 + C16162 - C16161 + C16164 - C16163) * C22087 +
            (C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
             C48503 * C3162 - C7646 * C3159) *
                C22094 +
            (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
             C48503 * C3168 - C7646 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C22093 +
            (C48122 * C140 - C8908 * C131) * C22087 + (C9005 - C9006) * C22094 +
            (C9007 - C9008) * C48286) *
               C48559 +
           ((C10059 - C10060) * C22093 + (C10061 - C10062) * C22087 +
            C10489 * C22094 + C10490 * C48286) *
               C48556 +
           C42732 * C48547 + C42733 * C48532) *
              C867 +
          (((C10060 - C10059) * C22093 + (C10062 - C10061) * C22087 +
            C10493 * C22094 + C10494 * C48286) *
               C48559 +
           ((C10064 - C10063) * C22093 + (C10066 - C10065) * C22087 +
            C10497 * C22094 + C10498 * C48286) *
               C48556 +
           ((C10925 - C10926) * C22093 + (C10927 - C10928) * C22087 +
            C21612 * C22094 + C21613 * C48286) *
               C48547 +
           ((C17633 - C17632) * C22093 + (C17635 - C17634) * C22087 +
            (C17874 - C17875) * C22094 + (C17876 - C17877) * C48286) *
               C48532) *
              C868 +
          (C42732 * C48559 + C42733 * C48556 +
           (C18112 * C22093 + C18113 * C22087 + (C17875 - C17874) * C22094 +
            (C17877 - C17876) * C48286) *
               C48547 +
           ((C18115 - C18114) * C22093 + (C18117 - C18116) * C22087 +
            (C48122 * C17870 - C8908 * C17869) * C22094 +
            (C48122 * C17872 - C8908 * C17871) * C48286) *
               C48532) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C22093 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C22087 +
            (C11176 - C11177 + C11178 - C11179) * C22094 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C48322 +
           ((C12664 - C12665 + C12666 - C12667) * C22093 +
            (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
            C13249 * C48286) *
               C48329 +
           (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
            C19226 * C48286) *
               C36194) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C22093 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C22087 +
            (C11200 - C11201 + C11202 - C11203) * C22094 +
            (C11204 - C11205 + C11206 - C11207) * C48286) *
               C48322 +
           ((C12672 - C12673 + C12674 - C12675) * C22093 +
            (C12676 - C12677 + C12678 - C12679) * C22087 +
            (C12454 - C12455 + C12456 - C12457) * C22094 +
            (C12458 - C12459 + C12460 - C12461) * C48286) *
               C48329 +
           ((C18667 - C18668 + C18669 - C18670) * C22093 +
            (C18671 - C18672 + C18673 - C18674) * C22087 +
            (C18465 - C18466 + C18467 - C18468) * C22094 +
            (C18469 - C18470 + C18471 - C18472) * C48286) *
               C36194) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C22093 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C22087 +
            (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
                C22094 +
            (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
                C48286) *
               C48322 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C22093 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C22087 +
            (C48461 * C626 - C47223 * C621 + C48132 * C627 - C47204 * C622) *
                C22094 +
            (C48461 * C636 - C47223 * C631 + C48132 * C637 - C47204 * C632) *
                C48286) *
               C48329 +
           ((C48461 * C877 - C47223 * C872 + C48132 * C878 - C47204 * C873) *
                C22093 +
            (C48461 * C887 - C47223 * C882 + C48132 * C888 - C47204 * C883) *
                C22087 +
            (C48461 * C2266 - C47223 * C2260 + C48132 * C2542 -
             C47204 * C2541) *
                C22094 +
            (C48461 * C2278 - C47223 * C2269 + C48132 * C2544 -
             C47204 * C2543) *
                C48286) *
               C36194) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C22093 +
             (C11181 - C11180 + C11183 - C11182) * C22087 +
             (C11185 - C11184 + C11187 - C11186) * C22094 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C48322 +
            (C13250 * C22093 + C13251 * C22087 + C13252 * C22094 +
             C13253 * C48286) *
                C48329 +
            (C19227 * C22093 + C19228 * C22087 +
             (C13240 - C13241 + C13242 - C13243) * C22094 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C36194) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C22093 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C22087 +
             (C11200 - C11201 + C11202 - C11203) * C22094 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C48322 +
            ((C12672 - C12673 + C12674 - C12675) * C22093 +
             (C12676 - C12677 + C12678 - C12679) * C22087 +
             (C12454 - C12455 + C12456 - C12457) * C22094 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C48329 +
            ((C18667 - C18668 + C18669 - C18670) * C22093 +
             (C18671 - C18672 + C18673 - C18674) * C22087 +
             (C18465 - C18466 + C18467 - C18468) * C22094 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C36194) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C22093 +
             (C11205 - C11204 + C11207 - C11206) * C22087 +
             (C11209 - C11208 + C11211 - C11210) * C22094 +
             (C11213 - C11212 + C11215 - C11214) * C48286) *
                C48322 +
            ((C12455 - C12454 + C12457 - C12456) * C22093 +
             (C12459 - C12458 + C12461 - C12460) * C22087 +
             (C12463 - C12462 + C12465 - C12464) * C22094 +
             (C12467 - C12466 + C12469 - C12468) * C48286) *
                C48329 +
            ((C18466 - C18465 + C18468 - C18467) * C22093 +
             (C18470 - C18469 + C18472 - C18471) * C22087 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C22094 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48286) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C22093 +
             (C12669 - C12668 + C12671 - C12670) * C22087 + C13250 * C22094 +
             C13251 * C48286) *
                C48322 +
            ((C13788 - C13789 + C13790 - C13791) * C22093 +
             (C13792 - C13793 + C13794 - C13795) * C22087 + C19227 * C22094 +
             C19228 * C48286) *
                C48329 +
            ((C19769 - C19770 + C19771 - C19772) * C22093 +
             (C19773 - C19774 + C19775 - C19776) * C22087 +
             (C19217 - C19218 + C19219 - C19220) * C22094 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C36194) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C22093 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C22087 +
             (C11200 - C11201 + C11202 - C11203) * C22094 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C48322 +
            ((C12672 - C12673 + C12674 - C12675) * C22093 +
             (C12676 - C12677 + C12678 - C12679) * C22087 +
             (C12454 - C12455 + C12456 - C12457) * C22094 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C48329 +
            ((C18667 - C18668 + C18669 - C18670) * C22093 +
             (C18671 - C18672 + C18673 - C18674) * C22087 +
             (C18465 - C18466 + C18467 - C18468) * C22094 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C36194) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C22093 +
             (C12677 - C12676 + C12679 - C12678) * C22087 +
             (C12455 - C12454 + C12457 - C12456) * C22094 +
             (C12459 - C12458 + C12461 - C12460) * C48286) *
                C48322 +
            ((C18668 - C18667 + C18670 - C18669) * C22093 +
             (C18672 - C18671 + C18674 - C18673) * C22087 +
             (C18466 - C18465 + C18468 - C18467) * C22094 +
             (C18470 - C18469 + C18472 - C18471) * C48286) *
                C48329 +
            ((C20147 - C20146 + C20149 - C20148) * C22093 +
             (C20151 - C20150 + C20153 - C20152) * C22087 +
             (C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C22094 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48286) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C22093 +
             (C11181 - C11180 + C11183 - C11182) * C22087 +
             (C11185 - C11184 + C11187 - C11186) * C22094 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C48322 +
            (C13250 * C22093 + C13251 * C22087 + C13252 * C22094 +
             C13253 * C48286) *
                C48329 +
            (C19227 * C22093 + C19228 * C22087 +
             (C13240 - C13241 + C13242 - C13243) * C22094 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C36194) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C22093 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C22087 +
             (C11200 - C11201 + C11202 - C11203) * C22094 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C48322 +
            ((C12672 - C12673 + C12674 - C12675) * C22093 +
             (C12676 - C12677 + C12678 - C12679) * C22087 +
             (C12454 - C12455 + C12456 - C12457) * C22094 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C48329 +
            ((C18667 - C18668 + C18669 - C18670) * C22093 +
             (C18671 - C18672 + C18673 - C18674) * C22087 +
             (C18465 - C18466 + C18467 - C18468) * C22094 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C36194) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C22093 +
             (C11205 - C11204 + C11207 - C11206) * C22087 +
             (C11209 - C11208 + C11211 - C11210) * C22094 +
             (C11213 - C11212 + C11215 - C11214) * C48286) *
                C48322 +
            ((C12455 - C12454 + C12457 - C12456) * C22093 +
             (C12459 - C12458 + C12461 - C12460) * C22087 +
             (C12463 - C12462 + C12465 - C12464) * C22094 +
             (C12467 - C12466 + C12469 - C12468) * C48286) *
                C48329 +
            ((C18466 - C18465 + C18468 - C18467) * C22093 +
             (C18470 - C18469 + C18472 - C18471) * C22087 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C22094 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48286) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C22093 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C22087 +
            (C11176 - C11177 + C11178 - C11179) * C22094 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C48322 +
           ((C12664 - C12665 + C12666 - C12667) * C22093 +
            (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
            C13249 * C48286) *
               C48329 +
           (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
            C19226 * C48286) *
               C36194) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C22093 +
            (C11181 - C11180 + C11183 - C11182) * C22087 +
            (C11185 - C11184 + C11187 - C11186) * C22094 +
            (C11189 - C11188 + C11191 - C11190) * C48286) *
               C48322 +
           (C13250 * C22093 + C13251 * C22087 + C13252 * C22094 +
            C13253 * C48286) *
               C48329 +
           (C19227 * C22093 + C19228 * C22087 +
            (C13240 - C13241 + C13242 - C13243) * C22094 +
            (C13244 - C13245 + C13246 - C13247) * C48286) *
               C36194) *
              C48210 * C514 +
          ((C11598 * C22093 + C11599 * C22087 + C11600 * C22094 +
            C11601 * C48286) *
               C48322 +
           (C13024 * C22093 + C13025 * C22087 +
            (C11749 - C11748 + C11751 - C11750) * C22094 +
            (C11753 - C11752 + C11755 - C11754) * C48286) *
               C48329 +
           ((C13241 - C13240 + C13243 - C13242) * C22093 +
            (C13245 - C13244 + C13247 - C13246) * C22087 +
            (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
             C47204 * C9876) *
                C22094 +
            (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
             C47204 * C9878) *
                C48286) *
               C36194) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C22093 +
             (C12669 - C12668 + C12671 - C12670) * C22087 + C13250 * C22094 +
             C13251 * C48286) *
                C48322 +
            ((C13788 - C13789 + C13790 - C13791) * C22093 +
             (C13792 - C13793 + C13794 - C13795) * C22087 + C19227 * C22094 +
             C19228 * C48286) *
                C48329 +
            ((C19769 - C19770 + C19771 - C19772) * C22093 +
             (C19773 - C19774 + C19775 - C19776) * C22087 +
             (C19217 - C19218 + C19219 - C19220) * C22094 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C36194) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C22093 +
             (C11181 - C11180 + C11183 - C11182) * C22087 +
             (C11185 - C11184 + C11187 - C11186) * C22094 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C48322 +
            (C13250 * C22093 + C13251 * C22087 + C13252 * C22094 +
             C13253 * C48286) *
                C48329 +
            (C19227 * C22093 + C19228 * C22087 +
             (C13240 - C13241 + C13242 - C13243) * C22094 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C36194) *
               C339 +
           ((C13248 * C22093 + C13249 * C22087 + C13024 * C22094 +
             C13025 * C48286) *
                C48322 +
            (C19225 * C22093 + C19226 * C22087 +
             (C13241 - C13240 + C13243 - C13242) * C22094 +
             (C13245 - C13244 + C13247 - C13246) * C48286) *
                C48329 +
            ((C19218 - C19217 + C19220 - C19219) * C22093 +
             (C19222 - C19221 + C19224 - C19223) * C22087 +
             (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
              C47204 * C10051) *
                 C22094 +
             (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
              C47204 * C10055) *
                 C48286) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C22093 +
             (C12669 - C12668 + C12671 - C12670) * C22087 + C13250 * C22094 +
             C13251 * C48286) *
                C48322 +
            ((C13788 - C13789 + C13790 - C13791) * C22093 +
             (C13792 - C13793 + C13794 - C13795) * C22087 + C19227 * C22094 +
             C19228 * C48286) *
                C48329 +
            ((C19769 - C19770 + C19771 - C19772) * C22093 +
             (C19773 - C19774 + C19775 - C19776) * C22087 +
             (C19217 - C19218 + C19219 - C19220) * C22094 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C36194) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C22093 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C22087 +
             (C11200 - C11201 + C11202 - C11203) * C22094 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C48322 +
            ((C12672 - C12673 + C12674 - C12675) * C22093 +
             (C12676 - C12677 + C12678 - C12679) * C22087 +
             (C12454 - C12455 + C12456 - C12457) * C22094 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C48329 +
            ((C18667 - C18668 + C18669 - C18670) * C22093 +
             (C18671 - C18672 + C18673 - C18674) * C22087 +
             (C18465 - C18466 + C18467 - C18468) * C22094 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C36194) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C22093 +
             (C12677 - C12676 + C12679 - C12678) * C22087 +
             (C12455 - C12454 + C12457 - C12456) * C22094 +
             (C12459 - C12458 + C12461 - C12460) * C48286) *
                C48322 +
            ((C18668 - C18667 + C18670 - C18669) * C22093 +
             (C18672 - C18671 + C18674 - C18673) * C22087 +
             (C18466 - C18465 + C18468 - C18467) * C22094 +
             (C18470 - C18469 + C18472 - C18471) * C48286) *
                C48329 +
            ((C20147 - C20146 + C20149 - C20148) * C22093 +
             (C20151 - C20150 + C20153 - C20152) * C22087 +
             (C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C22094 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48286) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C22093 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C22087 +
             (C11176 - C11177 + C11178 - C11179) * C22094 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C48322 +
            ((C12664 - C12665 + C12666 - C12667) * C22093 +
             (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
             C13249 * C48286) *
                C48329 +
            (C19777 * C22093 + C19778 * C22087 + C19225 * C22094 +
             C19226 * C48286) *
                C36194) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C22093 +
             (C12669 - C12668 + C12671 - C12670) * C22087 + C13250 * C22094 +
             C13251 * C48286) *
                C48322 +
            ((C13788 - C13789 + C13790 - C13791) * C22093 +
             (C13792 - C13793 + C13794 - C13795) * C22087 + C19227 * C22094 +
             C19228 * C48286) *
                C48329 +
            ((C19769 - C19770 + C19771 - C19772) * C22093 +
             (C19773 - C19774 + C19775 - C19776) * C22087 +
             (C19217 - C19218 + C19219 - C19220) * C22094 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C36194) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C22093 +
             (C11181 - C11180 + C11183 - C11182) * C22087 +
             (C11185 - C11184 + C11187 - C11186) * C22094 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C48322 +
            (C13250 * C22093 + C13251 * C22087 + C13252 * C22094 +
             C13253 * C48286) *
                C48329 +
            (C19227 * C22093 + C19228 * C22087 +
             (C13240 - C13241 + C13242 - C13243) * C22094 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C36194) *
               C721 +
           ((C13248 * C22093 + C13249 * C22087 + C13024 * C22094 +
             C13025 * C48286) *
                C48322 +
            (C19225 * C22093 + C19226 * C22087 +
             (C13241 - C13240 + C13243 - C13242) * C22094 +
             (C13245 - C13244 + C13247 - C13246) * C48286) *
                C48329 +
            ((C19218 - C19217 + C19220 - C19219) * C22093 +
             (C19222 - C19221 + C19224 - C19223) * C22087 +
             (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
              C47204 * C10051) *
                 C22094 +
             (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
              C47204 * C10055) *
                 C48286) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C22093 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C22087 +
            (C11176 - C11177 + C11178 - C11179) * C22094 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C48322 +
           ((C12664 - C12665 + C12666 - C12667) * C22093 +
            (C12668 - C12669 + C12670 - C12671) * C22087 + C13248 * C22094 +
            C13249 * C48286) *
               C48329 +
           C45944 * C36194) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C22093 +
            (C12669 - C12668 + C12671 - C12670) * C22087 + C13250 * C22094 +
            C13251 * C48286) *
               C48322 +
           ((C13788 - C13789 + C13790 - C13791) * C22093 +
            (C13792 - C13793 + C13794 - C13795) * C22087 + C19227 * C22094 +
            C19228 * C48286) *
               C48329 +
           ((C19769 - C19770 + C19771 - C19772) * C22093 +
            (C19773 - C19774 + C19775 - C19776) * C22087 +
            (C19217 - C19218 + C19219 - C19220) * C22094 +
            (C19221 - C19222 + C19223 - C19224) * C48286) *
               C36194) *
              C868 +
          (C45944 * C48322 +
           (C20885 * C22093 + C20886 * C22087 +
            (C19218 - C19217 + C19220 - C19219) * C22094 +
            (C19222 - C19221 + C19224 - C19223) * C48286) *
               C48329 +
           ((C20877 - C20876 + C20879 - C20878) * C22093 +
            (C20881 - C20880 + C20883 - C20882) * C22087 +
            (C48461 * C10912 - C47223 * C10910 + C48132 * C17538 -
             C47204 * C17537) *
                C22094 +
            (C48461 * C10916 - C47223 * C10913 + C48132 * C17540 -
             C47204 * C17539) *
                C48286) *
               C36194) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C22093 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C22087 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
               C30746 +
           ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
            (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
            (C7644 * C620 - C48548 * C625 + C7645 * C621 - C48535 * C626 +
             C7646 * C622 - C48503 * C627) *
                C22094 +
            (C7644 * C630 - C48548 * C635 + C7645 * C631 - C48535 * C636 +
             C7646 * C632 - C48503 * C637) *
                C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
             C48503 * C130 - C7646 * C123) *
                C22093 +
            (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
             C48503 * C144 - C7646 * C135) *
                C22087 +
            (C48548 * C241 - C7644 * C235 + C48535 * C242 - C7645 * C236 +
             C48503 * C243 - C7646 * C237) *
                C22094 +
            (C48548 * C253 - C7644 * C246 + C48535 * C254 - C7645 * C247 +
             C48503 * C255 - C7646 * C248) *
                C48286) *
               C30746 +
           ((C48548 * C349 - C7644 * C343 + C48535 * C350 - C7645 * C344 +
             C48503 * C351 - C7646 * C345) *
                C22093 +
            (C48548 * C361 - C7644 * C354 + C48535 * C362 - C7645 * C355 +
             C48503 * C363 - C7646 * C356) *
                C22087 +
            (C48548 * C626 - C7644 * C621 + C48535 * C627 - C7645 * C622 +
             C48503 * C628 - C7646 * C623) *
                C22094 +
            (C48548 * C636 - C7644 * C631 + C48535 * C637 - C7645 * C632 +
             C48503 * C638 - C7646 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C23241 +
            (C8908 * C132 - C48122 * C141) * C48558 + (C9021 - C9022) * C23242 +
            (C9023 - C9024) * C48554 + (C9025 - C9026) * C23243 +
            (C9027 - C9028) * C48544 + (C9029 - C9030) * C23244 +
            (C9031 - C9032) * C48526) *
               C30746 +
           ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
            (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
            (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
            (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C23241 +
            (C48122 * C142 - C8908 * C133) * C48558 +
            (C48122 * C241 - C8908 * C235) * C23242 +
            (C48122 * C253 - C8908 * C246) * C48554 +
            (C48122 * C524 - C8908 * C519) * C23243 +
            (C48122 * C534 - C8908 * C529) * C48544 +
            (C48122 * C1164 - C8908 * C1160) * C23244 +
            (C48122 * C1172 - C8908 * C1167) * C48526) *
               C30746 +
           ((C48122 * C349 - C8908 * C343) * C23241 +
            (C48122 * C361 - C8908 * C354) * C48558 +
            (C48122 * C626 - C8908 * C621) * C23242 +
            (C48122 * C636 - C8908 * C631) * C48554 +
            (C48122 * C1374 - C8908 * C1370) * C23243 +
            (C48122 * C1382 - C8908 * C1377) * C48544 +
            (C48122 * C1825 - C8908 * C1822) * C23244 +
            (C48122 * C1831 - C8908 * C1828) * C48526) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C22093 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C22087 +
             (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C22094 +
             (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C48286) *
                C30746 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22093 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C22087 +
             (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
              C48503 * C1378 - C7646 * C1371) *
                 C22094 +
             (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
              C48503 * C1383 - C7646 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9022 - C9021) * C23241 + (C9024 - C9023) * C48558 +
             (C9026 - C9025) * C23242 + (C9028 - C9027) * C48554 +
             (C9030 - C9029) * C23243 + (C9032 - C9031) * C48544 +
             (C9034 - C9033) * C23244 + (C9036 - C9035) * C48526) *
                C30746 +
            ((C9890 - C9889) * C23241 + (C9892 - C9891) * C48558 +
             (C9894 - C9893) * C23242 + (C9896 - C9895) * C48554 +
             (C14025 - C14024) * C23243 + (C14027 - C14026) * C48544 +
             (C48122 * C9122 - C8908 * C9119) * C23244 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22094 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C339 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C22093 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C22087 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22094 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48286) *
                C30746 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C22093 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C22087 +
             (C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C22094 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C339 +
           (((C10068 - C10067) * C23241 + (C10070 - C10069) * C48558 +
             (C9890 - C9889) * C23242 + (C9892 - C9891) * C48554 +
             (C9894 - C9893) * C23243 + (C9896 - C9895) * C48544 +
             (C14025 - C14024) * C23244 + (C14027 - C14026) * C48526) *
                C30746 +
            ((C10072 - C10071) * C23241 + (C10074 - C10073) * C48558 +
             (C9898 - C9897) * C23242 + (C9900 - C9899) * C48554 +
             (C9902 - C9901) * C23243 + (C9904 - C9903) * C48544 +
             (C48122 * C9877 - C8908 * C9876) * C23244 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C22093 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C22087 +
             (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C22094 +
             (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C48286) *
                C30746 +
            ((C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22093 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C22087 +
             (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
              C48503 * C1378 - C7646 * C1371) *
                 C22094 +
             (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
              C48503 * C1383 - C7646 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9022 - C9021) * C23241 + (C9024 - C9023) * C48558 +
             (C9026 - C9025) * C23242 + (C9028 - C9027) * C48554 +
             (C9030 - C9029) * C23243 + (C9032 - C9031) * C48544 +
             (C9034 - C9033) * C23244 + (C9036 - C9035) * C48526) *
                C30746 +
            ((C9890 - C9889) * C23241 + (C9892 - C9891) * C48558 +
             (C9894 - C9893) * C23242 + (C9896 - C9895) * C48554 +
             (C14025 - C14024) * C23243 + (C14027 - C14026) * C48544 +
             (C48122 * C9122 - C8908 * C9119) * C23244 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            (C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C22094 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48286) *
               C48326) *
              C48210 * C513 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
               C30746 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C22093 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C22087 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C8267 * C22093 + C8268 * C22087 +
            (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C22094 +
            (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C48286) *
               C30746 +
           ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22093 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C22087 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C22094 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C48210 * C513 +
          (((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
            (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
            (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
            (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
               C30746 +
           (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
            C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
            (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
               C48326) *
              C48210 * C514 +
          ((C9275 * C23241 + C9276 * C48558 + C9277 * C23242 + C9278 * C48554 +
            C9279 * C23243 + C9280 * C48544 + (C9282 - C9281) * C23244 +
            (C9284 - C9283) * C48526) *
               C30746 +
           (C10331 * C23241 + C10332 * C48558 + C14386 * C23242 +
            C14387 * C48554 + (C9384 - C9383) * C23243 +
            (C9386 - C9385) * C48544 +
            (C48122 * C9367 - C8908 * C9366) * C23244 +
            (C48122 * C9369 - C8908 * C9368) * C48526) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            (C40036 * C22093 + C40037 * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C339 +
           ((C40034 * C22093 + C40035 * C22087 +
             (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22094 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48286) *
                C30746 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22093 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C22087 +
             (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
              C48503 * C2272 - C7646 * C2263) *
                 C22094 +
             (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
              C48503 * C2281 - C7646 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C339 +
           ((C10489 * C23241 + C10490 * C48558 + C10331 * C23242 +
             C10332 * C48554 + C14386 * C23243 + C14387 * C48544 +
             (C9384 - C9383) * C23244 + (C9386 - C9385) * C48526) *
                C30746 +
            (C10491 * C23241 + C10492 * C48558 + C10333 * C23242 +
             C10334 * C48554 + (C10336 - C10335) * C23243 +
             (C10338 - C10337) * C48544 +
             (C48122 * C9616 - C8908 * C9613) * C23244 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C22093 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C22087 +
             (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C22094 +
             (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C48286) *
                C30746 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C22093 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C22087 +
             (C39278 - C39279 + C39280 - C39281 + C39282 - C39283) * C22094 +
             (C39284 - C39285 + C39286 - C39287 + C39288 - C39289) * C48286) *
                C48326) *
               C721 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C22093 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C22087 +
             (C39279 - C39278 + C39281 - C39280 + C39283 - C39282) * C22094 +
             (C39285 - C39284 + C39287 - C39286 + C39289 - C39288) * C48286) *
                C30746 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C22093 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C22087 +
             (C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C22094 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C23241 +
             (C8908 * C132 - C48122 * C141) * C48558 +
             (C9021 - C9022) * C23242 + (C9023 - C9024) * C48554 +
             (C9025 - C9026) * C23243 + (C9027 - C9028) * C48544 +
             (C9029 - C9030) * C23244 + (C9031 - C9032) * C48526) *
                C30746 +
            ((C10067 - C10068) * C23241 + (C10069 - C10070) * C48558 +
             (C9889 - C9890) * C23242 + (C9891 - C9892) * C48554 +
             (C9893 - C9894) * C23243 + (C9895 - C9896) * C48544 +
             (C14024 - C14025) * C23244 + (C14026 - C14027) * C48526) *
                C48326) *
               C721 +
           (((C10068 - C10067) * C23241 + (C10070 - C10069) * C48558 +
             (C9890 - C9889) * C23242 + (C9892 - C9891) * C48554 +
             (C9894 - C9893) * C23243 + (C9896 - C9895) * C48544 +
             (C14025 - C14024) * C23244 + (C14027 - C14026) * C48526) *
                C30746 +
            ((C10072 - C10071) * C23241 + (C10074 - C10073) * C48558 +
             (C9898 - C9897) * C23242 + (C9900 - C9899) * C48554 +
             (C9902 - C9901) * C23243 + (C9904 - C9903) * C48544 +
             (C48122 * C9877 - C8908 * C9876) * C23244 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C22093 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C22087 +
             (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
             (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
                C30746 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
             C40034 * C22094 + C40035 * C48286) *
                C48326) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
             C40036 * C22094 + C40037 * C48286) *
                C30746 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
             (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C22093 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C22087 +
             (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C22094 +
             (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C48286) *
                C30746 +
            (C40036 * C22093 + C40037 * C22087 +
             (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C22094 +
             (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48286) *
                C48326) *
               C721 +
           ((C40034 * C22093 + C40035 * C22087 +
             (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C22094 +
             (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48286) *
                C30746 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22093 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C22087 +
             (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
              C48503 * C2272 - C7646 * C2263) *
                 C22094 +
             (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
              C48503 * C2281 - C7646 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C23241 +
             (C48122 * C140 - C8908 * C131) * C48558 +
             (C9005 - C9006) * C23242 + (C9007 - C9008) * C48554 +
             C9275 * C23243 + C9276 * C48544 + C9277 * C23244 +
             C9278 * C48526) *
                C30746 +
            ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
             C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
             C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
             C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
             C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
                C30746 +
            ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
             C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
             C10500 * C48544 + (C10335 - C10336) * C23244 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C23241 + (C9008 - C9007) * C48558 +
             (C9010 - C9009) * C23242 + (C9012 - C9011) * C48554 +
             (C9014 - C9013) * C23243 + (C9016 - C9015) * C48544 +
             (C9018 - C9017) * C23244 + (C9020 - C9019) * C48526) *
                C30746 +
            (C10493 * C23241 + C10494 * C48558 + C10495 * C23242 +
             C10496 * C48554 + C14518 * C23243 + C14519 * C48544 +
             (C9383 - C9384) * C23244 + (C9385 - C9386) * C48526) *
                C48326) *
               C721 +
           ((C10489 * C23241 + C10490 * C48558 + C10331 * C23242 +
             C10332 * C48554 + C14386 * C23243 + C14387 * C48544 +
             (C9384 - C9383) * C23244 + (C9386 - C9385) * C48526) *
                C30746 +
            (C10491 * C23241 + C10492 * C48558 + C10333 * C23242 +
             C10334 * C48554 + (C10336 - C10335) * C23243 +
             (C10338 - C10337) * C48544 +
             (C48122 * C9616 - C8908 * C9613) * C23244 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C22093 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C22087 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C22094 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C48286) *
               C30746 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C22093 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C22087 +
            C40034 * C22094 + C40035 * C48286) *
               C48326) *
              C867 +
          (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C22093 +
            (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C22087 +
            C40036 * C22094 + C40037 * C48286) *
               C30746 +
           ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C22093 +
            (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C22087 +
            (C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C22094 +
            (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48286) *
               C48326) *
              C868 +
          ((C16167 * C22093 + C16168 * C22087 +
            (C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C22094 +
            (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48286) *
               C30746 +
           ((C16154 - C16153 + C16156 - C16155 + C16158 - C16157) * C22093 +
            (C16160 - C16159 + C16162 - C16161 + C16164 - C16163) * C22087 +
            (C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
             C48503 * C3162 - C7646 * C3159) *
                C22094 +
            (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
             C48503 * C3168 - C7646 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C23241 +
            (C48122 * C140 - C8908 * C131) * C48558 + (C9005 - C9006) * C23242 +
            (C9007 - C9008) * C48554 + C9275 * C23243 + C9276 * C48544 +
            C9277 * C23244 + C9278 * C48526) *
               C30746 +
           ((C10059 - C10060) * C23241 + (C10061 - C10062) * C48558 +
            C10489 * C23242 + C10490 * C48554 + C10331 * C23243 +
            C10332 * C48544 + C14386 * C23244 + C14387 * C48526) *
               C48326) *
              C867 +
          (((C10060 - C10059) * C23241 + (C10062 - C10061) * C48558 +
            C10493 * C23242 + C10494 * C48554 + C10495 * C23243 +
            C10496 * C48544 + C14518 * C23244 + C14519 * C48526) *
               C30746 +
           ((C10064 - C10063) * C23241 + (C10066 - C10065) * C48558 +
            C10497 * C23242 + C10498 * C48554 + C10499 * C23243 +
            C10500 * C48544 + (C10335 - C10336) * C23244 +
            (C10337 - C10338) * C48526) *
               C48326) *
              C868 +
          ((C10919 * C23241 + C10920 * C48558 + C10491 * C23242 +
            C10492 * C48554 + C10333 * C23243 + C10334 * C48544 +
            (C10336 - C10335) * C23244 + (C10338 - C10337) * C48526) *
               C30746 +
           (C18110 * C23241 + C18111 * C48558 + C21610 * C23242 +
            C21611 * C48554 + (C10506 - C10505) * C23243 +
            (C10508 - C10507) * C48544 +
            (C48122 * C10485 - C8908 * C10484) * C23244 +
            (C48122 * C10487 - C8908 * C10486) * C48526) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C48461 * C239 - C47223 * C233 + C48132 * C240 - C47204 * C234) *
               C11042 +
           (C48461 * C251 - C47223 * C244 + C48132 * C252 - C47204 * C245) *
               C11036 +
           (C48461 * C522 - C47223 * C517 + C48132 * C523 - C47204 * C518) *
               C11043 +
           (C48461 * C532 - C47223 * C527 + C48132 * C533 - C47204 * C528) *
               C11037 +
           (C48461 * C1162 - C47223 * C1158 + C48132 * C1163 - C47204 * C1159) *
               C11044 +
           (C48461 * C1170 - C47223 * C1165 + C48132 * C1171 - C47204 * C1166) *
               C48526) *
              C48239 * C48210 * C48193 * C110 +
          ((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
               C11041 +
           (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
               C11035 +
           (C47223 * C234 - C48461 * C240 + C47204 * C235 - C48132 * C241) *
               C11042 +
           (C47223 * C245 - C48461 * C252 + C47204 * C246 - C48132 * C253) *
               C11036 +
           (C47223 * C518 - C48461 * C523 + C47204 * C519 - C48132 * C524) *
               C11043 +
           (C47223 * C528 - C48461 * C533 + C47204 * C529 - C48132 * C534) *
               C11037 +
           (C47223 * C1159 - C48461 * C1163 + C47204 * C1160 - C48132 * C1164) *
               C11044 +
           (C47223 * C1166 - C48461 * C1171 + C47204 * C1167 - C48132 * C1172) *
               C48526) *
              C48239 * C48210 * C48193 * C111 +
          ((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
               C11041 +
           (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
               C11035 +
           (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
               C11042 +
           (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
               C11036 +
           (C48461 * C524 - C47223 * C519 + C48132 * C525 - C47204 * C520) *
               C11043 +
           (C48461 * C534 - C47223 * C529 + C48132 * C535 - C47204 * C530) *
               C11037 +
           (C48461 * C1164 - C47223 * C1160 + C48132 * C1168 - C47204 * C1161) *
               C11044 +
           (C48461 * C1172 - C47223 * C1167 + C48132 * C1173 - C47204 * C1169) *
               C48526) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3718 * C239 - C3724 * C233 + C3719 * C240 - C3725 * C234 +
            C3720 * C241 - C3726 * C235 + C48520 * C242 - C3727 * C236) *
               C3729 +
           (C3718 * C251 - C3724 * C244 + C3719 * C252 - C3725 * C245 +
            C3720 * C253 - C3726 * C246 + C48520 * C254 - C3727 * C247) *
               C48286) *
              C48239 * C48210 * C48193 * C110 +
          ((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
            C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
               C3728 +
           (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
            C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
               C48483 +
           (C3724 * C234 - C3718 * C240 + C3725 * C235 - C3719 * C241 +
            C3726 * C236 - C3720 * C242 + C3727 * C237 - C48520 * C243) *
               C3729 +
           (C3724 * C245 - C3718 * C252 + C3725 * C246 - C3719 * C253 +
            C3726 * C247 - C3720 * C254 + C3727 * C248 - C48520 * C255) *
               C48286) *
              C48239 * C48210 * C48193 * C111 +
          ((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
            C3720 * C130 - C3726 * C123 + C48520 * C136 - C3727 * C124) *
               C3728 +
           (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
            C3720 * C144 - C3726 * C135 + C48520 * C145 - C3727 * C137) *
               C48483 +
           (C3718 * C241 - C3724 * C235 + C3719 * C242 - C3725 * C236 +
            C3720 * C243 - C3726 * C237 + C48520 * C249 - C3727 * C238) *
               C3729 +
           (C3718 * C253 - C3724 * C246 + C3719 * C254 - C3725 * C247 +
            C3720 * C255 - C3726 * C248 + C48520 * C256 - C3727 * C250) *
               C48286) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C3728 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48483 +
            (C11176 - C11177 + C11178 - C11179) * C3729 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C14987 +
           ((C12664 - C12665 + C12666 - C12667) * C3728 +
            (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
            C13249 * C48286) *
               C14988 +
           ((C13789 - C13788 + C13791 - C13790) * C3728 +
            (C13793 - C13792 + C13795 - C13794) * C48483 +
            (C13233 - C13232 + C13235 - C13234) * C3729 +
            (C13237 - C13236 + C13239 - C13238) * C48286) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C3728 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C48483 +
            (C11200 - C11201 + C11202 - C11203) * C3729 +
            (C11204 - C11205 + C11206 - C11207) * C48286) *
               C14987 +
           ((C12672 - C12673 + C12674 - C12675) * C3728 +
            (C12676 - C12677 + C12678 - C12679) * C48483 +
            (C12454 - C12455 + C12456 - C12457) * C3729 +
            (C12458 - C12459 + C12460 - C12461) * C48286) *
               C14988 +
           ((C47223 * C871 - C48461 * C876 + C47204 * C872 - C48132 * C877) *
                C3728 +
            (C47223 * C881 - C48461 * C886 + C47204 * C882 - C48132 * C887) *
                C48483 +
            (C47223 * C2259 - C48461 * C2265 + C47204 * C2260 -
             C48132 * C2266) *
                C3729 +
            (C47223 * C2268 - C48461 * C2277 + C47204 * C2269 -
             C48132 * C2278) *
                C48286) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C3728 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C48483 +
            (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
                C3729 +
            (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
                C48286) *
               C14987 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C3728 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C48483 +
            (C48461 * C626 - C47223 * C621 + C48132 * C627 - C47204 * C622) *
                C3729 +
            (C48461 * C636 - C47223 * C631 + C48132 * C637 - C47204 * C632) *
                C48286) *
               C14988 +
           ((C48461 * C877 - C47223 * C872 + C48132 * C878 - C47204 * C873) *
                C3728 +
            (C48461 * C887 - C47223 * C882 + C48132 * C888 - C47204 * C883) *
                C48483 +
            (C48461 * C2266 - C47223 * C2260 + C48132 * C2542 -
             C47204 * C2541) *
                C3729 +
            (C48461 * C2278 - C47223 * C2269 + C48132 * C2544 -
             C47204 * C2543) *
                C48286) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C48210 * C229 +
           ((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C47223 * C1640 - C48461 * C1643 + C47204 * C1641 -
             C48132 * C1644) *
                C11044 +
            (C47223 * C1646 - C48461 * C1649 + C47204 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C48210 * C229 +
           ((C11201 - C11200 + C11203 - C11202) * C11041 +
            (C11205 - C11204 + C11207 - C11206) * C11035 +
            (C11209 - C11208 + C11211 - C11210) * C11042 +
            (C11213 - C11212 + C11215 - C11214) * C11036 +
            (C11217 - C11216 + C11219 - C11218) * C11043 +
            (C11221 - C11220 + C11223 - C11222) * C11037 +
            (C48461 * C1644 - C47223 * C1641 + C48132 * C1645 -
             C47204 * C1642) *
                C11044 +
            (C48461 * C1650 - C47223 * C1647 + C48132 * C1651 -
             C47204 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
             C3726 * C519 - C3720 * C524 + C3727 * C520 - C48520 * C525) *
                C3729 +
            (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
             C3726 * C529 - C3720 * C534 + C3727 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                C3728 +
            (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                C48483 +
            (C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
             C3720 * C525 - C3726 * C520 + C48520 * C526 - C3727 * C521) *
                C3729 +
            (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
             C3720 * C535 - C3726 * C530 + C48520 * C536 - C3727 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 +
             (C13233 - C13232 + C13235 - C13234) * C3729 +
             (C13237 - C13236 + C13239 - C13238) * C48286) *
                C48519) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C3728 +
             (C11181 - C11180 + C11183 - C11182) * C48483 +
             (C11185 - C11184 + C11187 - C11186) * C3729 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C14987 +
            (C13250 * C3728 + C13251 * C48483 + C13252 * C3729 +
             C13253 * C48286) *
                C14988 +
            ((C13232 - C13233 + C13234 - C13235) * C3728 +
             (C13236 - C13237 + C13238 - C13239) * C48483 +
             (C13240 - C13241 + C13242 - C13243) * C3729 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C3728 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48483 +
             (C11200 - C11201 + C11202 - C11203) * C3729 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C14987 +
            ((C12672 - C12673 + C12674 - C12675) * C3728 +
             (C12676 - C12677 + C12678 - C12679) * C48483 +
             (C12454 - C12455 + C12456 - C12457) * C3729 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C14988 +
            ((C47223 * C871 - C48461 * C876 + C47204 * C872 - C48132 * C877) *
                 C3728 +
             (C47223 * C881 - C48461 * C886 + C47204 * C882 - C48132 * C887) *
                 C48483 +
             (C18465 - C18466 + C18467 - C18468) * C3729 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C48519) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C3728 +
             (C11205 - C11204 + C11207 - C11206) * C48483 +
             (C11209 - C11208 + C11211 - C11210) * C3729 +
             (C11213 - C11212 + C11215 - C11214) * C48286) *
                C14987 +
            ((C12455 - C12454 + C12457 - C12456) * C3728 +
             (C12459 - C12458 + C12461 - C12460) * C48483 +
             (C12463 - C12462 + C12465 - C12464) * C3729 +
             (C12467 - C12466 + C12469 - C12468) * C48286) *
                C14988 +
            ((C18466 - C18465 + C18468 - C18467) * C3728 +
             (C18470 - C18469 + C18472 - C18471) * C48483 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C3729 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C339 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C47223 * C619 - C48461 * C624 + C47204 * C620 - C48132 * C625) *
                C11042 +
            (C47223 * C629 - C48461 * C634 + C47204 * C630 - C48132 * C635) *
                C11036 +
            (C47223 * C1368 - C48461 * C1372 + C47204 * C1369 -
             C48132 * C1373) *
                C11043 +
            (C47223 * C1375 - C48461 * C1380 + C47204 * C1376 -
             C48132 * C1381) *
                C11037 +
            (C47223 * C1820 - C48461 * C1823 + C47204 * C1821 -
             C48132 * C1824) *
                C11044 +
            (C47223 * C1826 - C48461 * C1829 + C47204 * C1827 -
             C48132 * C1830) *
                C48526) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C339 +
           ((C48461 * C348 - C47223 * C342 + C48132 * C349 - C47204 * C343) *
                C11041 +
            (C48461 * C360 - C47223 * C353 + C48132 * C361 - C47204 * C354) *
                C11035 +
            (C48461 * C625 - C47223 * C620 + C48132 * C626 - C47204 * C621) *
                C11042 +
            (C48461 * C635 - C47223 * C630 + C48132 * C636 - C47204 * C631) *
                C11036 +
            (C48461 * C1373 - C47223 * C1369 + C48132 * C1374 -
             C47204 * C1370) *
                C11043 +
            (C48461 * C1381 - C47223 * C1376 + C48132 * C1382 -
             C47204 * C1377) *
                C11037 +
            (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
             C47204 * C1822) *
                C11044 +
            (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
             C47204 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C339 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C3724 * C619 - C3718 * C624 + C3725 * C620 - C3719 * C625 +
             C3726 * C621 - C3720 * C626 + C3727 * C622 - C48520 * C627) *
                C3729 +
            (C3724 * C629 - C3718 * C634 + C3725 * C630 - C3719 * C635 +
             C3726 * C631 - C3720 * C636 + C3727 * C632 - C48520 * C637) *
                C48286) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C339 +
           ((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
             C3720 * C350 - C3726 * C344 + C48520 * C351 - C3727 * C345) *
                C3728 +
            (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
             C3720 * C362 - C3726 * C355 + C48520 * C363 - C3727 * C356) *
                C48483 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                C3729 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 +
             (C13233 - C13232 + C13235 - C13234) * C3729 +
             (C13237 - C13236 + C13239 - C13238) * C48286) *
                C48519) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C3728 +
             (C12669 - C12668 + C12671 - C12670) * C48483 + C13250 * C3729 +
             C13251 * C48286) *
                C14987 +
            ((C13788 - C13789 + C13790 - C13791) * C3728 +
             (C13792 - C13793 + C13794 - C13795) * C48483 +
             (C13232 - C13233 + C13234 - C13235) * C3729 +
             (C13236 - C13237 + C13238 - C13239) * C48286) *
                C14988 +
            ((C47223 * C2691 - C48461 * C2695 + C47204 * C2692 -
              C48132 * C2696) *
                 C3728 +
             (C47223 * C2698 - C48461 * C2703 + C47204 * C2699 -
              C48132 * C2704) *
                 C48483 +
             (C47223 * C3157 - C48461 * C3160 + C47204 * C3158 -
              C48132 * C3161) *
                 C3729 +
             (C47223 * C3163 - C48461 * C3166 + C47204 * C3164 -
              C48132 * C3167) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C3728 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48483 +
             (C11200 - C11201 + C11202 - C11203) * C3729 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C14987 +
            ((C12672 - C12673 + C12674 - C12675) * C3728 +
             (C12676 - C12677 + C12678 - C12679) * C48483 +
             (C12454 - C12455 + C12456 - C12457) * C3729 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C14988 +
            ((C18667 - C18668 + C18669 - C18670) * C3728 +
             (C18671 - C18672 + C18673 - C18674) * C48483 +
             (C18465 - C18466 + C18467 - C18468) * C3729 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C48519) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C3728 +
             (C12677 - C12676 + C12679 - C12678) * C48483 +
             (C12455 - C12454 + C12457 - C12456) * C3729 +
             (C12459 - C12458 + C12461 - C12460) * C48286) *
                C14987 +
            ((C18668 - C18667 + C18670 - C18669) * C3728 +
             (C18672 - C18671 + C18674 - C18673) * C48483 +
             (C18466 - C18465 + C18468 - C18467) * C3729 +
             (C18470 - C18469 + C18472 - C18471) * C48286) *
                C14988 +
            ((C48461 * C2696 - C47223 * C2692 + C48132 * C2697 -
              C47204 * C2693) *
                 C3728 +
             (C48461 * C2704 - C47223 * C2699 + C48132 * C2705 -
              C47204 * C2700) *
                 C48483 +
             (C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C3729 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C48210 * C447 +
           ((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C47223 * C1640 - C48461 * C1643 + C47204 * C1641 -
             C48132 * C1644) *
                C11044 +
            (C47223 * C1646 - C48461 * C1649 + C47204 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C48210 * C447 +
           ((C11201 - C11200 + C11203 - C11202) * C11041 +
            (C11205 - C11204 + C11207 - C11206) * C11035 +
            (C11209 - C11208 + C11211 - C11210) * C11042 +
            (C11213 - C11212 + C11215 - C11214) * C11036 +
            (C11217 - C11216 + C11219 - C11218) * C11043 +
            (C11221 - C11220 + C11223 - C11222) * C11037 +
            (C48461 * C1644 - C47223 * C1641 + C48132 * C1645 -
             C47204 * C1642) *
                C11044 +
            (C48461 * C1650 - C47223 * C1647 + C48132 * C1651 -
             C47204 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
             C3726 * C519 - C3720 * C524 + C3727 * C520 - C48520 * C525) *
                C3729 +
            (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
             C3726 * C529 - C3720 * C534 + C3727 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                C3728 +
            (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                C48483 +
            (C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
             C3720 * C525 - C3726 * C520 + C48520 * C526 - C3727 * C521) *
                C3729 +
            (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
             C3720 * C535 - C3726 * C530 + C48520 * C536 - C3727 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 +
             (C13233 - C13232 + C13235 - C13234) * C3729 +
             (C13237 - C13236 + C13239 - C13238) * C48286) *
                C48519) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C3728 +
             (C11181 - C11180 + C11183 - C11182) * C48483 +
             (C11185 - C11184 + C11187 - C11186) * C3729 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C14987 +
            (C13250 * C3728 + C13251 * C48483 + C13252 * C3729 +
             C13253 * C48286) *
                C14988 +
            ((C13232 - C13233 + C13234 - C13235) * C3728 +
             (C13236 - C13237 + C13238 - C13239) * C48483 +
             (C13240 - C13241 + C13242 - C13243) * C3729 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C3728 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48483 +
             (C11200 - C11201 + C11202 - C11203) * C3729 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C14987 +
            ((C12672 - C12673 + C12674 - C12675) * C3728 +
             (C12676 - C12677 + C12678 - C12679) * C48483 +
             (C12454 - C12455 + C12456 - C12457) * C3729 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C14988 +
            ((C18667 - C18668 + C18669 - C18670) * C3728 +
             (C18671 - C18672 + C18673 - C18674) * C48483 +
             (C18465 - C18466 + C18467 - C18468) * C3729 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C48519) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C3728 +
             (C11205 - C11204 + C11207 - C11206) * C48483 +
             (C11209 - C11208 + C11211 - C11210) * C3729 +
             (C11213 - C11212 + C11215 - C11214) * C48286) *
                C14987 +
            ((C12455 - C12454 + C12457 - C12456) * C3728 +
             (C12459 - C12458 + C12461 - C12460) * C48483 +
             (C12463 - C12462 + C12465 - C12464) * C3729 +
             (C12467 - C12466 + C12469 - C12468) * C48286) *
                C14988 +
            ((C18466 - C18465 + C18468 - C18467) * C3728 +
             (C18470 - C18469 + C18472 - C18471) * C48483 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C3729 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48286) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C11176 - C11177 + C11178 - C11179) * C11042 +
           (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
           C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
              C48239 * C48210 * C513 +
          ((C11177 - C11176 + C11179 - C11178) * C11041 +
           (C11181 - C11180 + C11183 - C11182) * C11035 +
           (C11185 - C11184 + C11187 - C11186) * C11042 +
           (C11189 - C11188 + C11191 - C11190) * C11036 +
           (C11193 - C11192 + C11195 - C11194) * C11043 +
           (C11197 - C11196 + C11199 - C11198) * C11037 +
           (C11590 - C11591 + C11592 - C11593) * C11044 +
           (C11594 - C11595 + C11596 - C11597) * C48526) *
              C48239 * C48210 * C514 +
          (C11598 * C11041 + C11599 * C11035 + C11600 * C11042 +
           C11601 * C11036 + (C11591 - C11590 + C11593 - C11592) * C11043 +
           (C11595 - C11594 + C11597 - C11596) * C11037 +
           (C48461 * C8998 - C47223 * C8996 + C48132 * C9000 - C47204 * C8997) *
               C11044 +
           (C48461 * C9002 - C47223 * C8999 + C48132 * C9003 - C47204 * C9001) *
               C48526) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
               C3729 +
           (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
               C48286) *
              C48239 * C48210 * C513 +
          ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
               C3728 +
           (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
               C48483 +
           (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
               C3729 +
           (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
               C48286) *
              C48239 * C48210 * C514 +
          ((C4252 - C4251 + C4254 - C4253 + C4256 - C4255 + C4258 - C4257) *
               C3728 +
           (C4260 - C4259 + C4262 - C4261 + C4264 - C4263 + C4266 - C4265) *
               C48483 +
           (C3718 * C1162 - C3724 * C1158 + C3719 * C1163 - C3725 * C1159 +
            C3720 * C1164 - C3726 * C1160 + C48520 * C1168 - C3727 * C1161) *
               C3729 +
           (C3718 * C1170 - C3724 * C1165 + C3719 * C1171 - C3725 * C1166 +
            C3720 * C1172 - C3726 * C1167 + C48520 * C1173 - C3727 * C1169) *
               C48286) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C3728 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48483 +
            (C11176 - C11177 + C11178 - C11179) * C3729 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C14987 +
           ((C12664 - C12665 + C12666 - C12667) * C3728 +
            (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
            C13249 * C48286) *
               C14988 +
           ((C13789 - C13788 + C13791 - C13790) * C3728 +
            (C13793 - C13792 + C13795 - C13794) * C48483 +
            (C13233 - C13232 + C13235 - C13234) * C3729 +
            (C13237 - C13236 + C13239 - C13238) * C48286) *
               C48519) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C3728 +
            (C11181 - C11180 + C11183 - C11182) * C48483 +
            (C11185 - C11184 + C11187 - C11186) * C3729 +
            (C11189 - C11188 + C11191 - C11190) * C48286) *
               C14987 +
           (C13250 * C3728 + C13251 * C48483 + C13252 * C3729 +
            C13253 * C48286) *
               C14988 +
           ((C13232 - C13233 + C13234 - C13235) * C3728 +
            (C13236 - C13237 + C13238 - C13239) * C48483 +
            (C13240 - C13241 + C13242 - C13243) * C3729 +
            (C13244 - C13245 + C13246 - C13247) * C48286) *
               C48519) *
              C48210 * C514 +
          ((C11598 * C3728 + C11599 * C48483 + C11600 * C3729 +
            C11601 * C48286) *
               C14987 +
           (C13024 * C3728 + C13025 * C48483 +
            (C11749 - C11748 + C11751 - C11750) * C3729 +
            (C11753 - C11752 + C11755 - C11754) * C48286) *
               C14988 +
           ((C13241 - C13240 + C13243 - C13242) * C3728 +
            (C13245 - C13244 + C13247 - C13246) * C48483 +
            (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
             C47204 * C9876) *
                C3729 +
            (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
             C47204 * C9878) *
                C48286) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C339 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C447 +
          (((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C11590 - C11591 + C11592 - C11593) * C11044 +
            (C11594 - C11595 + C11596 - C11597) * C48526) *
               C48239 * C339 +
           ((C11733 - C11732 + C11735 - C11734) * C11041 +
            (C11737 - C11736 + C11739 - C11738) * C11035 +
            (C11741 - C11740 + C11743 - C11742) * C11042 +
            (C11745 - C11744 + C11747 - C11746) * C11036 +
            (C11749 - C11748 + C11751 - C11750) * C11043 +
            (C11753 - C11752 + C11755 - C11754) * C11037 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C11044 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C339 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C447 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
                C3729 +
            (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
                C48286) *
               C48239 * C339 +
           ((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                C3728 +
            (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                C48483 +
            (C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C3729 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 + C19225 * C3729 +
             C19226 * C48286) *
                C48519) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C3728 +
             (C12669 - C12668 + C12671 - C12670) * C48483 + C13250 * C3729 +
             C13251 * C48286) *
                C14987 +
            ((C13788 - C13789 + C13790 - C13791) * C3728 +
             (C13792 - C13793 + C13794 - C13795) * C48483 + C19227 * C3729 +
             C19228 * C48286) *
                C14988 +
            ((C47223 * C2691 - C48461 * C2695 + C47204 * C2692 -
              C48132 * C2696) *
                 C3728 +
             (C47223 * C2698 - C48461 * C2703 + C47204 * C2699 -
              C48132 * C2704) *
                 C48483 +
             (C19217 - C19218 + C19219 - C19220) * C3729 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C48519) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C3728 +
             (C11181 - C11180 + C11183 - C11182) * C48483 +
             (C11185 - C11184 + C11187 - C11186) * C3729 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C14987 +
            (C13250 * C3728 + C13251 * C48483 + C13252 * C3729 +
             C13253 * C48286) *
                C14988 +
            (C19227 * C3728 + C19228 * C48483 +
             (C13240 - C13241 + C13242 - C13243) * C3729 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C48519) *
               C339 +
           ((C13248 * C3728 + C13249 * C48483 + C13024 * C3729 +
             C13025 * C48286) *
                C14987 +
            (C19225 * C3728 + C19226 * C48483 +
             (C13241 - C13240 + C13243 - C13242) * C3729 +
             (C13245 - C13244 + C13247 - C13246) * C48286) *
                C14988 +
            ((C19218 - C19217 + C19220 - C19219) * C3728 +
             (C19222 - C19221 + C19224 - C19223) * C48483 +
             (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
              C47204 * C10051) *
                 C3729 +
             (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
              C47204 * C10055) *
                 C48286) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C721 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C721 +
           ((C48461 * C348 - C47223 * C342 + C48132 * C349 - C47204 * C343) *
                C11041 +
            (C48461 * C360 - C47223 * C353 + C48132 * C361 - C47204 * C354) *
                C11035 +
            (C48461 * C625 - C47223 * C620 + C48132 * C626 - C47204 * C621) *
                C11042 +
            (C48461 * C635 - C47223 * C630 + C48132 * C636 - C47204 * C631) *
                C11036 +
            (C48461 * C1373 - C47223 * C1369 + C48132 * C1374 -
             C47204 * C1370) *
                C11043 +
            (C48461 * C1381 - C47223 * C1376 + C48132 * C1382 -
             C47204 * C1377) *
                C11037 +
            (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
             C47204 * C1822) *
                C11044 +
            (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
             C47204 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C721 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C721 +
           ((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
             C3720 * C350 - C3726 * C344 + C48520 * C351 - C3727 * C345) *
                C3728 +
            (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
             C3720 * C362 - C3726 * C355 + C48520 * C363 - C3727 * C356) *
                C48483 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                C3729 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 + C19225 * C3729 +
             C19226 * C48286) *
                C48519) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C3728 +
             (C12669 - C12668 + C12671 - C12670) * C48483 + C13250 * C3729 +
             C13251 * C48286) *
                C14987 +
            ((C13788 - C13789 + C13790 - C13791) * C3728 +
             (C13792 - C13793 + C13794 - C13795) * C48483 + C19227 * C3729 +
             C19228 * C48286) *
                C14988 +
            ((C47223 * C2691 - C48461 * C2695 + C47204 * C2692 -
              C48132 * C2696) *
                 C3728 +
             (C47223 * C2698 - C48461 * C2703 + C47204 * C2699 -
              C48132 * C2704) *
                 C48483 +
             (C19217 - C19218 + C19219 - C19220) * C3729 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C3728 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48483 +
             (C11200 - C11201 + C11202 - C11203) * C3729 +
             (C11204 - C11205 + C11206 - C11207) * C48286) *
                C14987 +
            ((C12672 - C12673 + C12674 - C12675) * C3728 +
             (C12676 - C12677 + C12678 - C12679) * C48483 +
             (C12454 - C12455 + C12456 - C12457) * C3729 +
             (C12458 - C12459 + C12460 - C12461) * C48286) *
                C14988 +
            ((C18667 - C18668 + C18669 - C18670) * C3728 +
             (C18671 - C18672 + C18673 - C18674) * C48483 +
             (C18465 - C18466 + C18467 - C18468) * C3729 +
             (C18469 - C18470 + C18471 - C18472) * C48286) *
                C48519) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C3728 +
             (C12677 - C12676 + C12679 - C12678) * C48483 +
             (C12455 - C12454 + C12457 - C12456) * C3729 +
             (C12459 - C12458 + C12461 - C12460) * C48286) *
                C14987 +
            ((C18668 - C18667 + C18670 - C18669) * C3728 +
             (C18672 - C18671 + C18674 - C18673) * C48483 +
             (C18466 - C18465 + C18468 - C18467) * C3729 +
             (C18470 - C18469 + C18472 - C18471) * C48286) *
                C14988 +
            ((C48461 * C2696 - C47223 * C2692 + C48132 * C2697 -
              C47204 * C2693) *
                 C3728 +
             (C48461 * C2704 - C47223 * C2699 + C48132 * C2705 -
              C47204 * C2700) *
                 C48483 +
             (C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C3729 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48286) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C721 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C229 +
          (((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C11590 - C11591 + C11592 - C11593) * C11044 +
            (C11594 - C11595 + C11596 - C11597) * C48526) *
               C48239 * C721 +
           ((C11733 - C11732 + C11735 - C11734) * C11041 +
            (C11737 - C11736 + C11739 - C11738) * C11035 +
            (C11741 - C11740 + C11743 - C11742) * C11042 +
            (C11745 - C11744 + C11747 - C11746) * C11036 +
            (C11749 - C11748 + C11751 - C11750) * C11043 +
            (C11753 - C11752 + C11755 - C11754) * C11037 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C11044 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C721 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C229 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
                C3729 +
            (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
                C48286) *
               C48239 * C721 +
           ((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                C3728 +
            (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                C48483 +
            (C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C3729 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C3728 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48483 +
             (C11176 - C11177 + C11178 - C11179) * C3729 +
             (C11180 - C11181 + C11182 - C11183) * C48286) *
                C14987 +
            ((C12664 - C12665 + C12666 - C12667) * C3728 +
             (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
             C13249 * C48286) *
                C14988 +
            ((C13789 - C13788 + C13791 - C13790) * C3728 +
             (C13793 - C13792 + C13795 - C13794) * C48483 + C19225 * C3729 +
             C19226 * C48286) *
                C48519) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C3728 +
             (C12669 - C12668 + C12671 - C12670) * C48483 + C13250 * C3729 +
             C13251 * C48286) *
                C14987 +
            ((C13788 - C13789 + C13790 - C13791) * C3728 +
             (C13792 - C13793 + C13794 - C13795) * C48483 + C19227 * C3729 +
             C19228 * C48286) *
                C14988 +
            ((C47223 * C2691 - C48461 * C2695 + C47204 * C2692 -
              C48132 * C2696) *
                 C3728 +
             (C47223 * C2698 - C48461 * C2703 + C47204 * C2699 -
              C48132 * C2704) *
                 C48483 +
             (C19217 - C19218 + C19219 - C19220) * C3729 +
             (C19221 - C19222 + C19223 - C19224) * C48286) *
                C48519) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C3728 +
             (C11181 - C11180 + C11183 - C11182) * C48483 +
             (C11185 - C11184 + C11187 - C11186) * C3729 +
             (C11189 - C11188 + C11191 - C11190) * C48286) *
                C14987 +
            (C13250 * C3728 + C13251 * C48483 + C13252 * C3729 +
             C13253 * C48286) *
                C14988 +
            (C19227 * C3728 + C19228 * C48483 +
             (C13240 - C13241 + C13242 - C13243) * C3729 +
             (C13244 - C13245 + C13246 - C13247) * C48286) *
                C48519) *
               C721 +
           ((C13248 * C3728 + C13249 * C48483 + C13024 * C3729 +
             C13025 * C48286) *
                C14987 +
            (C19225 * C3728 + C19226 * C48483 +
             (C13241 - C13240 + C13243 - C13242) * C3729 +
             (C13245 - C13244 + C13247 - C13246) * C48286) *
                C14988 +
            ((C19218 - C19217 + C19220 - C19219) * C3728 +
             (C19222 - C19221 + C19224 - C19223) * C48483 +
             (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
              C47204 * C10051) *
                 C3729 +
             (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
              C47204 * C10055) *
                 C48286) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C11176 - C11177 + C11178 - C11179) * C11042 +
           (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
           C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
              C48239 * C867 +
          ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
               C11041 +
           (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
               C11035 +
           (C11732 - C11733 + C11734 - C11735) * C11042 +
           (C11736 - C11737 + C11738 - C11739) * C11036 +
           (C11740 - C11741 + C11742 - C11743) * C11043 +
           (C11744 - C11745 + C11746 - C11747) * C11037 +
           (C11748 - C11749 + C11750 - C11751) * C11044 +
           (C11752 - C11753 + C11754 - C11755) * C48526) *
              C48239 * C868 +
          ((C48461 * C875 - C47223 * C870 + C48132 * C876 - C47204 * C871) *
               C11041 +
           (C48461 * C885 - C47223 * C880 + C48132 * C886 - C47204 * C881) *
               C11035 +
           (C48461 * C2264 - C47223 * C2258 + C48132 * C2265 - C47204 * C2259) *
               C11042 +
           (C48461 * C2276 - C47223 * C2267 + C48132 * C2277 - C47204 * C2268) *
               C11036 +
           (C48461 * C2270 - C47223 * C2261 + C48132 * C2271 - C47204 * C2262) *
               C11043 +
           (C48461 * C2279 - C47223 * C2273 + C48132 * C2280 - C47204 * C2274) *
               C11037 +
           (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 - C47204 * C9876) *
               C11044 +
           (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 - C47204 * C9878) *
               C48526) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
               C3729 +
           (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
               C48286) *
              C48239 * C867 +
          ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
            C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
               C3728 +
           (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
            C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
               C48483 +
           (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
               C3729 +
           (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
               C48286) *
              C48239 * C868 +
          ((C3718 * C875 - C3724 * C870 + C3719 * C876 - C3725 * C871 +
            C3720 * C877 - C3726 * C872 + C48520 * C878 - C3727 * C873) *
               C3728 +
           (C3718 * C885 - C3724 * C880 + C3719 * C886 - C3725 * C881 +
            C3720 * C887 - C3726 * C882 + C48520 * C888 - C3727 * C883) *
               C48483 +
           (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
            C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
               C3729 +
           (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
            C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
               C48286) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C3728 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48483 +
            (C11176 - C11177 + C11178 - C11179) * C3729 +
            (C11180 - C11181 + C11182 - C11183) * C48286) *
               C14987 +
           ((C12664 - C12665 + C12666 - C12667) * C3728 +
            (C12668 - C12669 + C12670 - C12671) * C48483 + C13248 * C3729 +
            C13249 * C48286) *
               C14988 +
           C19783 * C48519) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C3728 +
            (C12669 - C12668 + C12671 - C12670) * C48483 + C13250 * C3729 +
            C13251 * C48286) *
               C14987 +
           ((C13788 - C13789 + C13790 - C13791) * C3728 +
            (C13792 - C13793 + C13794 - C13795) * C48483 + C19227 * C3729 +
            C19228 * C48286) *
               C14988 +
           ((C19769 - C19770 + C19771 - C19772) * C3728 +
            (C19773 - C19774 + C19775 - C19776) * C48483 +
            (C19217 - C19218 + C19219 - C19220) * C3729 +
            (C19221 - C19222 + C19223 - C19224) * C48286) *
               C48519) *
              C868 +
          (C19783 * C14987 +
           ((C19770 - C19769 + C19772 - C19771) * C3728 +
            (C19774 - C19773 + C19776 - C19775) * C48483 +
            (C19218 - C19217 + C19220 - C19219) * C3729 +
            (C19222 - C19221 + C19224 - C19223) * C48286) *
               C14988 +
           ((C48461 * C3586 - C47223 * C3583 + C48132 * C3587 -
             C47204 * C3584) *
                C3728 +
            (C48461 * C3592 - C47223 * C3589 + C48132 * C3593 -
             C47204 * C3590) *
                C48483 +
            (C48461 * C10912 - C47223 * C10910 + C48132 * C17538 -
             C47204 * C17537) *
                C3729 +
            (C48461 * C10916 - C47223 * C10913 + C48132 * C17540 -
             C47204 * C17539) *
                C48286) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + (C9380 - C9379) * C11044 +
            (C9382 - C9381) * C48526) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C11041 +
            (C8908 * C132 - C48122 * C141) * C11035 + (C9021 - C9022) * C11042 +
            (C9023 - C9024) * C11036 + (C9025 - C9026) * C11043 +
            (C9027 - C9028) * C11037 + (C9029 - C9030) * C11044 +
            (C9031 - C9032) * C48526) *
               C48484 +
           ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
            (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
            (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
            (C8908 * C1821 - C48122 * C1824) * C11044 +
            (C8908 * C1827 - C48122 * C1830) * C48526) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C11041 +
            (C48122 * C142 - C8908 * C133) * C11035 +
            (C48122 * C241 - C8908 * C235) * C11042 +
            (C48122 * C253 - C8908 * C246) * C11036 +
            (C48122 * C524 - C8908 * C519) * C11043 +
            (C48122 * C534 - C8908 * C529) * C11037 +
            (C48122 * C1164 - C8908 * C1160) * C11044 +
            (C48122 * C1172 - C8908 * C1167) * C48526) *
               C48484 +
           ((C48122 * C349 - C8908 * C343) * C11041 +
            (C48122 * C361 - C8908 * C354) * C11035 +
            (C48122 * C626 - C8908 * C621) * C11042 +
            (C48122 * C636 - C8908 * C631) * C11036 +
            (C48122 * C1374 - C8908 * C1370) * C11043 +
            (C48122 * C1382 - C8908 * C1377) * C11037 +
            (C48122 * C1825 - C8908 * C1822) * C11044 +
            (C48122 * C1831 - C8908 * C1828) * C48526) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C3728 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48483 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
               C48484 +
           ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
            (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
            (C1006 * C620 - C1000 * C625 + C1007 * C621 - C1001 * C626 +
             C1008 * C622 - C48503 * C627) *
                C3729 +
            (C1006 * C630 - C1000 * C635 + C1007 * C631 - C1001 * C636 +
             C1008 * C632 - C48503 * C637) *
                C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
             C48503 * C130 - C1008 * C123) *
                C3728 +
            (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
             C48503 * C144 - C1008 * C135) *
                C48483 +
            (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
             C48503 * C243 - C1008 * C237) *
                C3729 +
            (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
             C48503 * C255 - C1008 * C248) *
                C48286) *
               C48484 +
           ((C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
             C48503 * C351 - C1008 * C345) *
                C3728 +
            (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
             C48503 * C363 - C1008 * C356) *
                C48483 +
            (C1000 * C626 - C1006 * C621 + C1001 * C627 - C1007 * C622 +
             C48503 * C628 - C1008 * C623) *
                C3729 +
            (C1000 * C636 - C1006 * C631 + C1001 * C637 - C1007 * C632 +
             C48503 * C638 - C1008 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C3728 +
            (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
            (C9007 - C9008) * C48286) *
               C19881 +
           ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
            C10489 * C3729 + C10490 * C48286) *
               C19882 +
           (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
            C10492 * C48286) *
               C19883 +
           (C18110 * C3728 + C18111 * C48483 + (C10502 - C10501) * C3729 +
            (C10504 - C10503) * C48286) *
               C48532) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C3728 +
            (C8908 * C132 - C48122 * C141) * C48483 + (C9021 - C9022) * C3729 +
            (C9023 - C9024) * C48286) *
               C19881 +
           ((C10067 - C10068) * C3728 + (C10069 - C10070) * C48483 +
            (C9889 - C9890) * C3729 + (C9891 - C9892) * C48286) *
               C19882 +
           ((C10071 - C10072) * C3728 + (C10073 - C10074) * C48483 +
            (C9897 - C9898) * C3729 + (C9899 - C9900) * C48286) *
               C19883 +
           ((C17636 - C17637) * C3728 + (C17638 - C17639) * C48483 +
            (C8908 * C3158 - C48122 * C3161) * C3729 +
            (C8908 * C3164 - C48122 * C3167) * C48286) *
               C48532) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C3728 +
            (C48122 * C142 - C8908 * C133) * C48483 +
            (C48122 * C241 - C8908 * C235) * C3729 +
            (C48122 * C253 - C8908 * C246) * C48286) *
               C19881 +
           ((C48122 * C349 - C8908 * C343) * C3728 +
            (C48122 * C361 - C8908 * C354) * C48483 +
            (C48122 * C626 - C8908 * C621) * C3729 +
            (C48122 * C636 - C8908 * C631) * C48286) *
               C19882 +
           ((C48122 * C877 - C8908 * C872) * C3728 +
            (C48122 * C887 - C8908 * C882) * C48483 +
            (C48122 * C2266 - C8908 * C2260) * C3729 +
            (C48122 * C2278 - C8908 * C2269) * C48286) *
               C19883 +
           ((C48122 * C2697 - C8908 * C2693) * C3728 +
            (C48122 * C2705 - C8908 * C2700) * C48483 +
            (C48122 * C3162 - C8908 * C3159) * C3729 +
            (C48122 * C3168 - C8908 * C3165) * C48286) *
               C48532) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + (C9379 - C9380) * C11043 +
             (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
             (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9022 - C9021) * C11041 + (C9024 - C9023) * C11035 +
             (C9026 - C9025) * C11042 + (C9028 - C9027) * C11036 +
             (C9030 - C9029) * C11043 + (C9032 - C9031) * C11037 +
             (C9034 - C9033) * C11044 + (C9036 - C9035) * C48526) *
                C48484 +
            ((C9890 - C9889) * C11041 + (C9892 - C9891) * C11035 +
             (C9894 - C9893) * C11042 + (C9896 - C9895) * C11036 +
             (C14025 - C14024) * C11043 + (C14027 - C14026) * C11037 +
             (C48122 * C9122 - C8908 * C9119) * C11044 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C3728 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48483 +
             (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C3729 +
             (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48286) *
                C48484 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3728 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48483 +
             (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
              C48503 * C1378 - C1008 * C1371) *
                 C3729 +
             (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
              C48503 * C1383 - C1008 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + (C10502 - C10501) * C3729 +
             (C10504 - C10503) * C48286) *
                C48532) *
               C48210 * C229 +
           (((C9006 - C9005) * C3728 + (C9008 - C9007) * C48483 +
             (C9010 - C9009) * C3729 + (C9012 - C9011) * C48286) *
                C19881 +
            (C10493 * C3728 + C10494 * C48483 + C10495 * C3729 +
             C10496 * C48286) *
                C19882 +
            (C10497 * C3728 + C10498 * C48483 + C10499 * C3729 +
             C10500 * C48286) *
                C19883 +
            ((C10501 - C10502) * C3728 + (C10503 - C10504) * C48483 +
             (C10505 - C10506) * C3729 + (C10507 - C10508) * C48286) *
                C48532) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C3728 +
             (C8908 * C132 - C48122 * C141) * C48483 + (C9021 - C9022) * C3729 +
             (C9023 - C9024) * C48286) *
                C19881 +
            ((C10067 - C10068) * C3728 + (C10069 - C10070) * C48483 +
             (C9889 - C9890) * C3729 + (C9891 - C9892) * C48286) *
                C19882 +
            ((C10071 - C10072) * C3728 + (C10073 - C10074) * C48483 +
             (C9897 - C9898) * C3729 + (C9899 - C9900) * C48286) *
                C19883 +
            ((C17636 - C17637) * C3728 + (C17638 - C17639) * C48483 +
             (C21118 - C21119) * C3729 + (C21120 - C21121) * C48286) *
                C48532) *
               C48210 * C229 +
           (((C9022 - C9021) * C3728 + (C9024 - C9023) * C48483 +
             (C9026 - C9025) * C3729 + (C9028 - C9027) * C48286) *
                C19881 +
            ((C9890 - C9889) * C3728 + (C9892 - C9891) * C48483 +
             (C9894 - C9893) * C3729 + (C9896 - C9895) * C48286) *
                C19882 +
            ((C9898 - C9897) * C3728 + (C9900 - C9899) * C48483 +
             (C9902 - C9901) * C3729 + (C9904 - C9903) * C48286) *
                C19883 +
            ((C21119 - C21118) * C3728 + (C21121 - C21120) * C48483 +
             (C48122 * C10054 - C8908 * C10051) * C3729 +
             (C48122 * C10057 - C8908 * C10055) * C48286) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + (C9379 - C9380) * C11044 +
             (C9381 - C9382) * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C339 +
           (((C10068 - C10067) * C11041 + (C10070 - C10069) * C11035 +
             (C9890 - C9889) * C11042 + (C9892 - C9891) * C11036 +
             (C9894 - C9893) * C11043 + (C9896 - C9895) * C11037 +
             (C14025 - C14024) * C11044 + (C14027 - C14026) * C48526) *
                C48484 +
            ((C10072 - C10071) * C11041 + (C10074 - C10073) * C11035 +
             (C9898 - C9897) * C11042 + (C9900 - C9899) * C11036 +
             (C9902 - C9901) * C11043 + (C9904 - C9903) * C11037 +
             (C48122 * C9877 - C8908 * C9876) * C11044 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3729 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C339 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C3728 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48483 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3729 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48286) *
                C48484 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C3728 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48483 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C3729 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + (C10502 - C10501) * C3729 +
             (C10504 - C10503) * C48286) *
                C48532) *
               C339 +
           (((C10060 - C10059) * C3728 + (C10062 - C10061) * C48483 +
             C10493 * C3729 + C10494 * C48286) *
                C19881 +
            ((C10064 - C10063) * C3728 + (C10066 - C10065) * C48483 +
             C10497 * C3729 + C10498 * C48286) *
                C19882 +
            ((C10925 - C10926) * C3728 + (C10927 - C10928) * C48483 +
             (C10501 - C10502) * C3729 + (C10503 - C10504) * C48286) *
                C19883 +
            ((C17633 - C17632) * C3728 + (C17635 - C17634) * C48483 +
             (C17874 - C17875) * C3729 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C3728 +
             (C8908 * C132 - C48122 * C141) * C48483 + (C9021 - C9022) * C3729 +
             (C9023 - C9024) * C48286) *
                C19881 +
            ((C10067 - C10068) * C3728 + (C10069 - C10070) * C48483 +
             (C9889 - C9890) * C3729 + (C9891 - C9892) * C48286) *
                C19882 +
            ((C10071 - C10072) * C3728 + (C10073 - C10074) * C48483 +
             (C9897 - C9898) * C3729 + (C9899 - C9900) * C48286) *
                C19883 +
            ((C17636 - C17637) * C3728 + (C17638 - C17639) * C48483 +
             (C21118 - C21119) * C3729 + (C21120 - C21121) * C48286) *
                C48532) *
               C339 +
           (((C10068 - C10067) * C3728 + (C10070 - C10069) * C48483 +
             (C9890 - C9889) * C3729 + (C9892 - C9891) * C48286) *
                C19881 +
            ((C10072 - C10071) * C3728 + (C10074 - C10073) * C48483 +
             (C9898 - C9897) * C3729 + (C9900 - C9899) * C48286) *
                C19882 +
            ((C17637 - C17636) * C3728 + (C17639 - C17638) * C48483 +
             (C21119 - C21118) * C3729 + (C21121 - C21120) * C48286) *
                C19883 +
            ((C17641 - C17640) * C3728 + (C17643 - C17642) * C48483 +
             (C48122 * C17538 - C8908 * C17537) * C3729 +
             (C48122 * C17540 - C8908 * C17539) * C48286) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + (C9379 - C9380) * C11043 +
             (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
             (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9022 - C9021) * C11041 + (C9024 - C9023) * C11035 +
             (C9026 - C9025) * C11042 + (C9028 - C9027) * C11036 +
             (C9030 - C9029) * C11043 + (C9032 - C9031) * C11037 +
             (C9034 - C9033) * C11044 + (C9036 - C9035) * C48526) *
                C48484 +
            ((C9890 - C9889) * C11041 + (C9892 - C9891) * C11035 +
             (C9894 - C9893) * C11042 + (C9896 - C9895) * C11036 +
             (C14025 - C14024) * C11043 + (C14027 - C14026) * C11037 +
             (C48122 * C9122 - C8908 * C9119) * C11044 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C3728 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48483 +
             (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C3729 +
             (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48286) *
                C48484 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3728 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48483 +
             (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
              C48503 * C1378 - C1008 * C1371) *
                 C3729 +
             (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
              C48503 * C1383 - C1008 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + (C10502 - C10501) * C3729 +
             (C10504 - C10503) * C48286) *
                C48532) *
               C48210 * C447 +
           (((C9006 - C9005) * C3728 + (C9008 - C9007) * C48483 +
             (C9010 - C9009) * C3729 + (C9012 - C9011) * C48286) *
                C19881 +
            (C10493 * C3728 + C10494 * C48483 + C10495 * C3729 +
             C10496 * C48286) *
                C19882 +
            (C10497 * C3728 + C10498 * C48483 + C10499 * C3729 +
             C10500 * C48286) *
                C19883 +
            ((C10501 - C10502) * C3728 + (C10503 - C10504) * C48483 +
             (C10505 - C10506) * C3729 + (C10507 - C10508) * C48286) *
                C48532) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C3728 +
             (C8908 * C132 - C48122 * C141) * C48483 + (C9021 - C9022) * C3729 +
             (C9023 - C9024) * C48286) *
                C19881 +
            ((C10067 - C10068) * C3728 + (C10069 - C10070) * C48483 +
             (C9889 - C9890) * C3729 + (C9891 - C9892) * C48286) *
                C19882 +
            ((C10071 - C10072) * C3728 + (C10073 - C10074) * C48483 +
             (C9897 - C9898) * C3729 + (C9899 - C9900) * C48286) *
                C19883 +
            ((C17636 - C17637) * C3728 + (C17638 - C17639) * C48483 +
             (C21118 - C21119) * C3729 + (C21120 - C21121) * C48286) *
                C48532) *
               C48210 * C447 +
           (((C9022 - C9021) * C3728 + (C9024 - C9023) * C48483 +
             (C9026 - C9025) * C3729 + (C9028 - C9027) * C48286) *
                C19881 +
            ((C9890 - C9889) * C3728 + (C9892 - C9891) * C48483 +
             (C9894 - C9893) * C3729 + (C9896 - C9895) * C48286) *
                C19882 +
            ((C9898 - C9897) * C3728 + (C9900 - C9899) * C48483 +
             (C9902 - C9901) * C3729 + (C9904 - C9903) * C48286) *
                C19883 +
            ((C21119 - C21118) * C3728 + (C21121 - C21120) * C48483 +
             (C48122 * C10054 - C8908 * C10051) * C3729 +
             (C48122 * C10057 - C8908 * C10055) * C48286) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
               C48326) *
              C48210 * C513 +
          (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
            (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
            (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
            (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
               C48484 +
           (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
            C10496 * C11036 + (C9379 - C9380) * C11043 +
            (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
            (C9385 - C9386) * C48526) *
               C48326) *
              C48210 * C514 +
          ((C9275 * C11041 + C9276 * C11035 + C9277 * C11042 + C9278 * C11036 +
            C9279 * C11043 + C9280 * C11037 + (C9282 - C9281) * C11044 +
            (C9284 - C9283) * C48526) *
               C48484 +
           (C10331 * C11041 + C10332 * C11035 + C14386 * C11042 +
            C14387 * C11036 + (C9384 - C9383) * C11043 +
            (C9386 - C9385) * C11037 +
            (C48122 * C9367 - C8908 * C9366) * C11044 +
            (C48122 * C9369 - C8908 * C9368) * C48526) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
               C48326) *
              C48210 * C513 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
               C48484 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C1673 * C3728 + C1674 * C48483 +
            (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C3729 +
            (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48286) *
               C48484 +
           ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3728 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48483 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C3729 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C3728 +
            (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
            (C9007 - C9008) * C48286) *
               C19881 +
           ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
            C10489 * C3729 + C10490 * C48286) *
               C19882 +
           (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
            C10492 * C48286) *
               C19883 +
           (C18110 * C3728 + C18111 * C48483 + (C10502 - C10501) * C3729 +
            (C10504 - C10503) * C48286) *
               C48532) *
              C48210 * C513 +
          (((C9006 - C9005) * C3728 + (C9008 - C9007) * C48483 +
            (C9010 - C9009) * C3729 + (C9012 - C9011) * C48286) *
               C19881 +
           (C10493 * C3728 + C10494 * C48483 + C10495 * C3729 +
            C10496 * C48286) *
               C19882 +
           (C10497 * C3728 + C10498 * C48483 + C10499 * C3729 +
            C10500 * C48286) *
               C19883 +
           ((C10501 - C10502) * C3728 + (C10503 - C10504) * C48483 +
            (C10505 - C10506) * C3729 + (C10507 - C10508) * C48286) *
               C48532) *
              C48210 * C514 +
          ((C9275 * C3728 + C9276 * C48483 + C9277 * C3729 + C9278 * C48286) *
               C19881 +
           (C10331 * C3728 + C10332 * C48483 + C14386 * C3729 +
            C14387 * C48286) *
               C19882 +
           (C10333 * C3728 + C10334 * C48483 + (C10336 - C10335) * C3729 +
            (C10338 - C10337) * C48286) *
               C19883 +
           ((C10506 - C10505) * C3728 + (C10508 - C10507) * C48483 +
            (C48122 * C10485 - C8908 * C10484) * C3729 +
            (C48122 * C10487 - C8908 * C10486) * C48286) *
               C48532) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + C14518 * C11043 + C14519 * C11037 +
             (C9383 - C9384) * C11044 + (C9385 - C9386) * C48526) *
                C48326) *
               C339 +
           ((C10489 * C11041 + C10490 * C11035 + C10331 * C11042 +
             C10332 * C11036 + C14386 * C11043 + C14387 * C11037 +
             (C9384 - C9383) * C11044 + (C9386 - C9385) * C48526) *
                C48484 +
            (C10491 * C11041 + C10492 * C11035 + C10333 * C11042 +
             C10334 * C11036 + (C10336 - C10335) * C11043 +
             (C10338 - C10337) * C11037 +
             (C48122 * C9616 - C8908 * C9613) * C11044 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            (C6993 * C3728 + C6994 * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C339 +
           ((C6991 * C3728 + C6992 * C48483 +
             (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3729 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48286) *
                C48484 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3728 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48483 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48503 * C2272 - C1008 * C2263) *
                 C3729 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48503 * C2281 - C1008 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + C21610 * C3729 +
             C21611 * C48286) *
                C48532) *
               C339 +
           (((C10060 - C10059) * C3728 + (C10062 - C10061) * C48483 +
             C10493 * C3729 + C10494 * C48286) *
                C19881 +
            ((C10064 - C10063) * C3728 + (C10066 - C10065) * C48483 +
             C10497 * C3729 + C10498 * C48286) *
                C19882 +
            ((C10925 - C10926) * C3728 + (C10927 - C10928) * C48483 +
             C21612 * C3729 + C21613 * C48286) *
                C19883 +
            ((C17633 - C17632) * C3728 + (C17635 - C17634) * C48483 +
             (C17874 - C17875) * C3729 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C3728 + (C9008 - C9007) * C48483 +
             (C9010 - C9009) * C3729 + (C9012 - C9011) * C48286) *
                C19881 +
            (C10493 * C3728 + C10494 * C48483 + C10495 * C3729 +
             C10496 * C48286) *
                C19882 +
            (C10497 * C3728 + C10498 * C48483 + C10499 * C3729 +
             C10500 * C48286) *
                C19883 +
            (C21612 * C3728 + C21613 * C48483 + (C10505 - C10506) * C3729 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C339 +
           ((C10489 * C3728 + C10490 * C48483 + C10331 * C3729 +
             C10332 * C48286) *
                C19881 +
            (C10491 * C3728 + C10492 * C48483 + C10333 * C3729 +
             C10334 * C48286) *
                C19882 +
            (C21610 * C3728 + C21611 * C48483 + (C10506 - C10505) * C3729 +
             (C10508 - C10507) * C48286) *
                C19883 +
            ((C17875 - C17874) * C3728 + (C17877 - C17876) * C48483 +
             (C48122 * C10914 - C8908 * C10911) * C3729 +
             (C48122 * C10917 - C8908 * C10915) * C48286) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C721 +
           (((C10068 - C10067) * C11041 + (C10070 - C10069) * C11035 +
             (C9890 - C9889) * C11042 + (C9892 - C9891) * C11036 +
             (C9894 - C9893) * C11043 + (C9896 - C9895) * C11037 +
             (C14025 - C14024) * C11044 + (C14027 - C14026) * C48526) *
                C48484 +
            ((C10072 - C10071) * C11041 + (C10074 - C10073) * C11035 +
             (C9898 - C9897) * C11042 + (C9900 - C9899) * C11036 +
             (C9902 - C9901) * C11043 + (C9904 - C9903) * C11037 +
             (C48122 * C9877 - C8908 * C9876) * C11044 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C721 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C3728 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48483 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3729 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48286) *
                C48484 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C3728 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48483 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C3729 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + C21610 * C3729 +
             C21611 * C48286) *
                C48532) *
               C721 +
           (((C10060 - C10059) * C3728 + (C10062 - C10061) * C48483 +
             C10493 * C3729 + C10494 * C48286) *
                C19881 +
            ((C10064 - C10063) * C3728 + (C10066 - C10065) * C48483 +
             C10497 * C3729 + C10498 * C48286) *
                C19882 +
            ((C10925 - C10926) * C3728 + (C10927 - C10928) * C48483 +
             C21612 * C3729 + C21613 * C48286) *
                C19883 +
            ((C17633 - C17632) * C3728 + (C17635 - C17634) * C48483 +
             (C17874 - C17875) * C3729 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C3728 +
             (C8908 * C132 - C48122 * C141) * C48483 + (C9021 - C9022) * C3729 +
             (C9023 - C9024) * C48286) *
                C19881 +
            ((C10067 - C10068) * C3728 + (C10069 - C10070) * C48483 +
             (C9889 - C9890) * C3729 + (C9891 - C9892) * C48286) *
                C19882 +
            ((C10071 - C10072) * C3728 + (C10073 - C10074) * C48483 +
             (C9897 - C9898) * C3729 + (C9899 - C9900) * C48286) *
                C19883 +
            ((C17636 - C17637) * C3728 + (C17638 - C17639) * C48483 +
             (C21118 - C21119) * C3729 + (C21120 - C21121) * C48286) *
                C48532) *
               C721 +
           (((C10068 - C10067) * C3728 + (C10070 - C10069) * C48483 +
             (C9890 - C9889) * C3729 + (C9892 - C9891) * C48286) *
                C19881 +
            ((C10072 - C10071) * C3728 + (C10074 - C10073) * C48483 +
             (C9898 - C9897) * C3729 + (C9900 - C9899) * C48286) *
                C19882 +
            ((C17637 - C17636) * C3728 + (C17639 - C17638) * C48483 +
             (C21119 - C21118) * C3729 + (C21121 - C21120) * C48286) *
                C19883 +
            ((C17641 - C17640) * C3728 + (C17643 - C17642) * C48483 +
             (C48122 * C17538 - C8908 * C17537) * C3729 +
             (C48122 * C17540 - C8908 * C17539) * C48286) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + C14518 * C11043 + C14519 * C11037 +
             (C9383 - C9384) * C11044 + (C9385 - C9386) * C48526) *
                C48326) *
               C721 +
           ((C10489 * C11041 + C10490 * C11035 + C10331 * C11042 +
             C10332 * C11036 + C14386 * C11043 + C14387 * C11037 +
             (C9384 - C9383) * C11044 + (C9386 - C9385) * C48526) *
                C48484 +
            (C10491 * C11041 + C10492 * C11035 + C10333 * C11042 +
             C10334 * C11036 + (C10336 - C10335) * C11043 +
             (C10338 - C10337) * C11037 +
             (C48122 * C9616 - C8908 * C9613) * C11044 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            (C6993 * C3728 + C6994 * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C721 +
           ((C6991 * C3728 + C6992 * C48483 +
             (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3729 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48286) *
                C48484 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3728 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48483 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48503 * C2272 - C1008 * C2263) *
                 C3729 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48503 * C2281 - C1008 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C3728 +
             (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
             (C9007 - C9008) * C48286) *
                C19881 +
            ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
             C10489 * C3729 + C10490 * C48286) *
                C19882 +
            (C10919 * C3728 + C10920 * C48483 + C10491 * C3729 +
             C10492 * C48286) *
                C19883 +
            (C18110 * C3728 + C18111 * C48483 + C21610 * C3729 +
             C21611 * C48286) *
                C48532) *
               C721 +
           (((C10060 - C10059) * C3728 + (C10062 - C10061) * C48483 +
             C10493 * C3729 + C10494 * C48286) *
                C19881 +
            ((C10064 - C10063) * C3728 + (C10066 - C10065) * C48483 +
             C10497 * C3729 + C10498 * C48286) *
                C19882 +
            ((C10925 - C10926) * C3728 + (C10927 - C10928) * C48483 +
             C21612 * C3729 + C21613 * C48286) *
                C19883 +
            ((C17633 - C17632) * C3728 + (C17635 - C17634) * C48483 +
             (C17874 - C17875) * C3729 + (C17876 - C17877) * C48286) *
                C48532) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C3728 + (C9008 - C9007) * C48483 +
             (C9010 - C9009) * C3729 + (C9012 - C9011) * C48286) *
                C19881 +
            (C10493 * C3728 + C10494 * C48483 + C10495 * C3729 +
             C10496 * C48286) *
                C19882 +
            (C10497 * C3728 + C10498 * C48483 + C10499 * C3729 +
             C10500 * C48286) *
                C19883 +
            (C21612 * C3728 + C21613 * C48483 + (C10505 - C10506) * C3729 +
             (C10507 - C10508) * C48286) *
                C48532) *
               C721 +
           ((C10489 * C3728 + C10490 * C48483 + C10331 * C3729 +
             C10332 * C48286) *
                C19881 +
            (C10491 * C3728 + C10492 * C48483 + C10333 * C3729 +
             C10334 * C48286) *
                C19882 +
            (C21610 * C3728 + C21611 * C48483 + (C10506 - C10505) * C3729 +
             (C10508 - C10507) * C48286) *
                C19883 +
            ((C17875 - C17874) * C3728 + (C17877 - C17876) * C48483 +
             (C48122 * C10914 - C8908 * C10911) * C3729 +
             (C48122 * C10917 - C8908 * C10915) * C48286) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
               C48326) *
              C867 +
          (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
            C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
            C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
               C48484 +
           ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
            C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
            C10500 * C11037 + (C10335 - C10336) * C11044 +
            (C10337 - C10338) * C48526) *
               C48326) *
              C868 +
          ((C10919 * C11041 + C10920 * C11035 + C10491 * C11042 +
            C10492 * C11036 + C10333 * C11043 + C10334 * C11037 +
            (C10336 - C10335) * C11044 + (C10338 - C10337) * C48526) *
               C48484 +
           ((C10926 - C10925) * C11041 + (C10928 - C10927) * C11035 +
            (C10502 - C10501) * C11042 + (C10504 - C10503) * C11036 +
            (C10506 - C10505) * C11043 + (C10508 - C10507) * C11037 +
            (C48122 * C10485 - C8908 * C10484) * C11044 +
            (C48122 * C10487 - C8908 * C10486) * C48526) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            C6991 * C3729 + C6992 * C48286) *
               C48326) *
              C867 +
          (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
            (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
            C6993 * C3729 + C6994 * C48286) *
               C48484 +
           ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
            (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
            (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
            (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
               C48326) *
              C868 +
          ((C3616 * C3728 + C3617 * C48483 +
            (C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3729 +
            (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48286) *
               C48484 +
           ((C3603 - C3602 + C3605 - C3604 + C3607 - C3606) * C3728 +
            (C3609 - C3608 + C3611 - C3610 + C3613 - C3612) * C48483 +
            (C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
             C48503 * C3162 - C1008 * C3159) *
                C3729 +
            (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
             C48503 * C3168 - C1008 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C3728 +
            (C48122 * C140 - C8908 * C131) * C48483 + (C9005 - C9006) * C3729 +
            (C9007 - C9008) * C48286) *
               C19881 +
           ((C10059 - C10060) * C3728 + (C10061 - C10062) * C48483 +
            C10489 * C3729 + C10490 * C48286) *
               C19882 +
           C21984 * C19883 + C21985 * C48532) *
              C867 +
          (((C10060 - C10059) * C3728 + (C10062 - C10061) * C48483 +
            C10493 * C3729 + C10494 * C48286) *
               C19881 +
           ((C10064 - C10063) * C3728 + (C10066 - C10065) * C48483 +
            C10497 * C3729 + C10498 * C48286) *
               C19882 +
           ((C10925 - C10926) * C3728 + (C10927 - C10928) * C48483 +
            C21612 * C3729 + C21613 * C48286) *
               C19883 +
           ((C17633 - C17632) * C3728 + (C17635 - C17634) * C48483 +
            (C17874 - C17875) * C3729 + (C17876 - C17877) * C48286) *
               C48532) *
              C868 +
          (C21984 * C19881 + C21985 * C19882 +
           (C18112 * C3728 + C18113 * C48483 + (C17875 - C17874) * C3729 +
            (C17877 - C17876) * C48286) *
               C19883 +
           ((C18115 - C18114) * C3728 + (C18117 - C18116) * C48483 +
            (C48122 * C17870 - C8908 * C17869) * C3729 +
            (C48122 * C17872 - C8908 * C17871) * C48286) *
               C48532) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48227) *
                  C48239 * C48210 * C48193 * C110 +
              ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                C117 * C124 - C105 * C136) *
                   C118 +
               (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                C117 * C137 - C105 * C145) *
                   C48227) *
                  C48239 * C48210 * C48193 * C111 +
              ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                C105 * C138 - C117 * C125) *
                   C118 +
               (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                C105 * C146 - C117 * C139) *
                   C48227) *
                  C48239 * C48210 * C48193 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                C48503 * C128 - C1008 * C121) *
                   C1009 +
               (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                C48503 * C142 - C1008 * C133) *
                   C48551 +
               (C1000 * C239 - C1006 * C233 + C1001 * C240 - C1007 * C234 +
                C48503 * C241 - C1008 * C235) *
                   C1010 +
               (C1000 * C251 - C1006 * C244 + C1001 * C252 - C1007 * C245 +
                C48503 * C253 - C1008 * C246) *
                   C48539 +
               (C1000 * C522 - C1006 * C517 + C1001 * C523 - C1007 * C518 +
                C48503 * C524 - C1008 * C519) *
                   C1011 +
               (C1000 * C532 - C1006 * C527 + C1001 * C533 - C1007 * C528 +
                C48503 * C534 - C1008 * C529) *
                   C48516) *
                  C48239 * C48210 * C48193 * C110 +
              ((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                C1008 * C122 - C48503 * C129) *
                   C1009 +
               (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                C1008 * C134 - C48503 * C143) *
                   C48551 +
               (C1006 * C234 - C1000 * C240 + C1007 * C235 - C1001 * C241 +
                C1008 * C236 - C48503 * C242) *
                   C1010 +
               (C1006 * C245 - C1000 * C252 + C1007 * C246 - C1001 * C253 +
                C1008 * C247 - C48503 * C254) *
                   C48539 +
               (C1006 * C518 - C1000 * C523 + C1007 * C519 - C1001 * C524 +
                C1008 * C520 - C48503 * C525) *
                   C1011 +
               (C1006 * C528 - C1000 * C533 + C1007 * C529 - C1001 * C534 +
                C1008 * C530 - C48503 * C535) *
                   C48516) *
                  C48239 * C48210 * C48193 * C111 +
              ((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
                C48503 * C130 - C1008 * C123) *
                   C1009 +
               (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
                C48503 * C144 - C1008 * C135) *
                   C48551 +
               (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
                C48503 * C243 - C1008 * C237) *
                   C1010 +
               (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
                C48503 * C255 - C1008 * C248) *
                   C48539 +
               (C1000 * C524 - C1006 * C519 + C1001 * C525 - C1007 * C520 +
                C48503 * C526 - C1008 * C521) *
                   C1011 +
               (C1000 * C534 - C1006 * C529 + C1001 * C535 - C1007 * C530 +
                C48503 * C536 - C1008 * C531) *
                   C48516) *
                  C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                                 C1007 * C120 + C48503 * C128 - C1008 * C121) *
                                    C118 +
                                (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                                 C1007 * C132 + C48503 * C142 - C1008 * C133) *
                                    C48227) *
                                   C48552 +
                               ((C1000 * C347 - C1006 * C341 + C1001 * C348 -
                                 C1007 * C342 + C48503 * C349 - C1008 * C343) *
                                    C118 +
                                (C1000 * C359 - C1006 * C352 + C1001 * C360 -
                                 C1007 * C353 + C48503 * C361 - C1008 * C354) *
                                    C48227) *
                                   C48541 +
                               ((C1000 * C875 - C1006 * C870 + C1001 * C876 -
                                 C1007 * C871 + C48503 * C877 - C1008 * C872) *
                                    C118 +
                                (C1000 * C885 - C1006 * C880 + C1001 * C886 -
                                 C1007 * C881 + C48503 * C887 - C1008 * C882) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C110 +
                              (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                                 C1001 * C128 + C1008 * C122 - C48503 * C129) *
                                    C118 +
                                (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                                 C1001 * C142 + C1008 * C134 - C48503 * C143) *
                                    C48227) *
                                   C48552 +
                               ((C1006 * C342 - C1000 * C348 + C1007 * C343 -
                                 C1001 * C349 + C1008 * C344 - C48503 * C350) *
                                    C118 +
                                (C1006 * C353 - C1000 * C360 + C1007 * C354 -
                                 C1001 * C361 + C1008 * C355 - C48503 * C362) *
                                    C48227) *
                                   C48541 +
                               ((C1006 * C871 - C1000 * C876 + C1007 * C872 -
                                 C1001 * C877 + C1008 * C873 - C48503 * C878) *
                                    C118 +
                                (C1006 * C881 - C1000 * C886 + C1007 * C882 -
                                 C1001 * C887 + C1008 * C883 - C48503 * C888) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C111 +
                              (((C1000 * C128 - C1006 * C121 + C1001 * C129 -
                                 C1007 * C122 + C48503 * C130 - C1008 * C123) *
                                    C118 +
                                (C1000 * C142 - C1006 * C133 + C1001 * C143 -
                                 C1007 * C134 + C48503 * C144 - C1008 * C135) *
                                    C48227) *
                                   C48552 +
                               ((C1000 * C349 - C1006 * C343 + C1001 * C350 -
                                 C1007 * C344 + C48503 * C351 - C1008 * C345) *
                                    C118 +
                                (C1000 * C361 - C1006 * C354 + C1001 * C362 -
                                 C1007 * C355 + C48503 * C363 - C1008 * C356) *
                                    C48227) *
                                   C48541 +
                               ((C1000 * C877 - C1006 * C872 + C1001 * C878 -
                                 C1007 * C873 + C48503 * C879 - C1008 * C874) *
                                    C118 +
                                (C1000 * C887 - C1006 * C882 + C1001 * C888 -
                                 C1007 * C883 + C48503 * C889 - C1008 * C884) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C48548 * C239 - C7644 * C233 + C48535 * C240 - C7645 * C234 +
            C48503 * C241 - C7646 * C235) *
               C7648 +
           (C48548 * C251 - C7644 * C244 + C48535 * C252 - C7645 * C245 +
            C48503 * C253 - C7646 * C246) *
               C7642 +
           (C48548 * C522 - C7644 * C517 + C48535 * C523 - C7645 * C518 +
            C48503 * C524 - C7646 * C519) *
               C7649 +
           (C48548 * C532 - C7644 * C527 + C48535 * C533 - C7645 * C528 +
            C48503 * C534 - C7646 * C529) *
               C48516) *
              C48239 * C48210 * C48193 * C110 +
          ((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
            C7646 * C122 - C48503 * C129) *
               C7647 +
           (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
            C7646 * C134 - C48503 * C143) *
               C7641 +
           (C7644 * C234 - C48548 * C240 + C7645 * C235 - C48535 * C241 +
            C7646 * C236 - C48503 * C242) *
               C7648 +
           (C7644 * C245 - C48548 * C252 + C7645 * C246 - C48535 * C253 +
            C7646 * C247 - C48503 * C254) *
               C7642 +
           (C7644 * C518 - C48548 * C523 + C7645 * C519 - C48535 * C524 +
            C7646 * C520 - C48503 * C525) *
               C7649 +
           (C7644 * C528 - C48548 * C533 + C7645 * C529 - C48535 * C534 +
            C7646 * C530 - C48503 * C535) *
               C48516) *
              C48239 * C48210 * C48193 * C111 +
          ((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
            C48503 * C130 - C7646 * C123) *
               C7647 +
           (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
            C48503 * C144 - C7646 * C135) *
               C7641 +
           (C48548 * C241 - C7644 * C235 + C48535 * C242 - C7645 * C236 +
            C48503 * C243 - C7646 * C237) *
               C7648 +
           (C48548 * C253 - C7644 * C246 + C48535 * C254 - C7645 * C247 +
            C48503 * C255 - C7646 * C248) *
               C7642 +
           (C48548 * C524 - C7644 * C519 + C48535 * C525 - C7645 * C520 +
            C48503 * C526 - C7646 * C521) *
               C7649 +
           (C48548 * C534 - C7644 * C529 + C48535 * C535 - C7645 * C530 +
            C48503 * C536 - C7646 * C531) *
               C48516) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 +
           (C48122 * C239 - C8908 * C233) * C8910 +
           (C48122 * C251 - C8908 * C244) * C8904 +
           (C48122 * C522 - C8908 * C517) * C8911 +
           (C48122 * C532 - C8908 * C527) * C8905 +
           (C48122 * C1162 - C8908 * C1158) * C8912 +
           (C48122 * C1170 - C8908 * C1165) * C8906 +
           (C48122 * C1643 - C8908 * C1640) * C8913 +
           (C48122 * C1649 - C8908 * C1646) * C8907) *
              C48239 * C48210 * C48193 * C110 +
          ((C8908 * C120 - C48122 * C127) * C8909 +
           (C8908 * C132 - C48122 * C141) * C8903 +
           (C8908 * C234 - C48122 * C240) * C8910 +
           (C8908 * C245 - C48122 * C252) * C8904 +
           (C8908 * C518 - C48122 * C523) * C8911 +
           (C8908 * C528 - C48122 * C533) * C8905 +
           (C8908 * C1159 - C48122 * C1163) * C8912 +
           (C8908 * C1166 - C48122 * C1171) * C8906 +
           (C8908 * C1641 - C48122 * C1644) * C8913 +
           (C8908 * C1647 - C48122 * C1650) * C8907) *
              C48239 * C48210 * C48193 * C111 +
          ((C48122 * C128 - C8908 * C121) * C8909 +
           (C48122 * C142 - C8908 * C133) * C8903 +
           (C48122 * C241 - C8908 * C235) * C8910 +
           (C48122 * C253 - C8908 * C246) * C8904 +
           (C48122 * C524 - C8908 * C519) * C8911 +
           (C48122 * C534 - C8908 * C529) * C8905 +
           (C48122 * C1164 - C8908 * C1160) * C8912 +
           (C48122 * C1172 - C8908 * C1167) * C8906 +
           (C48122 * C1645 - C8908 * C1642) * C8913 +
           (C48122 * C1651 - C8908 * C1648) * C8907) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C48122 * C347 - C8908 * C341) * C7647 +
            (C48122 * C359 - C8908 * C352) * C7641 + (C9372 - C9371) * C7648 +
            (C9374 - C9373) * C7642 + (C9376 - C9375) * C7649 +
            (C9378 - C9377) * C48516) *
               C48541 +
           ((C48122 * C875 - C8908 * C870) * C7647 +
            (C48122 * C885 - C8908 * C880) * C7641 +
            (C48122 * C2264 - C8908 * C2258) * C7648 +
            (C48122 * C2276 - C8908 * C2267) * C7642 +
            (C48122 * C2270 - C8908 * C2261) * C7649 +
            (C48122 * C2279 - C8908 * C2273) * C48516) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C7647 +
            (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
            (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
            (C9027 - C9028) * C48516) *
               C48552 +
           ((C8908 * C342 - C48122 * C348) * C7647 +
            (C8908 * C353 - C48122 * C360) * C7641 +
            (C8908 * C620 - C48122 * C625) * C7648 +
            (C8908 * C630 - C48122 * C635) * C7642 +
            (C8908 * C1369 - C48122 * C1373) * C7649 +
            (C8908 * C1376 - C48122 * C1381) * C48516) *
               C48541 +
           ((C8908 * C871 - C48122 * C876) * C7647 +
            (C8908 * C881 - C48122 * C886) * C7641 +
            (C8908 * C2259 - C48122 * C2265) * C7648 +
            (C8908 * C2268 - C48122 * C2277) * C7642 +
            (C8908 * C2262 - C48122 * C2271) * C7649 +
            (C8908 * C2274 - C48122 * C2280) * C48516) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C7647 +
            (C48122 * C142 - C8908 * C133) * C7641 +
            (C48122 * C241 - C8908 * C235) * C7648 +
            (C48122 * C253 - C8908 * C246) * C7642 +
            (C48122 * C524 - C8908 * C519) * C7649 +
            (C48122 * C534 - C8908 * C529) * C48516) *
               C48552 +
           ((C48122 * C349 - C8908 * C343) * C7647 +
            (C48122 * C361 - C8908 * C354) * C7641 +
            (C48122 * C626 - C8908 * C621) * C7648 +
            (C48122 * C636 - C8908 * C631) * C7642 +
            (C48122 * C1374 - C8908 * C1370) * C7649 +
            (C48122 * C1382 - C8908 * C1377) * C48516) *
               C48541 +
           ((C48122 * C877 - C8908 * C872) * C7647 +
            (C48122 * C887 - C8908 * C882) * C7641 +
            (C48122 * C2266 - C8908 * C2260) * C7648 +
            (C48122 * C2278 - C8908 * C2269) * C7642 +
            (C48122 * C2272 - C8908 * C2263) * C7649 +
            (C48122 * C2281 - C8908 * C2275) * C48516) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C48548 * C126 - C7644 * C119 + C48535 * C127 -
                                 C7645 * C120 + C48503 * C128 - C7646 * C121) *
                                    C118 +
                                (C48548 * C140 - C7644 * C131 + C48535 * C141 -
                                 C7645 * C132 + C48503 * C142 - C7646 * C133) *
                                    C48227) *
                                   C14987 +
                               ((C48548 * C347 - C7644 * C341 + C48535 * C348 -
                                 C7645 * C342 + C48503 * C349 - C7646 * C343) *
                                    C118 +
                                (C48548 * C359 - C7644 * C352 + C48535 * C360 -
                                 C7645 * C353 + C48503 * C361 - C7646 * C354) *
                                    C48227) *
                                   C14988 +
                               ((C48548 * C875 - C7644 * C870 + C48535 * C876 -
                                 C7645 * C871 + C48503 * C877 - C7646 * C872) *
                                    C118 +
                                (C48548 * C885 - C7644 * C880 + C48535 * C886 -
                                 C7645 * C881 + C48503 * C887 - C7646 * C882) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C110 +
                              (((C7644 * C120 - C48548 * C127 + C7645 * C121 -
                                 C48535 * C128 + C7646 * C122 - C48503 * C129) *
                                    C118 +
                                (C7644 * C132 - C48548 * C141 + C7645 * C133 -
                                 C48535 * C142 + C7646 * C134 - C48503 * C143) *
                                    C48227) *
                                   C14987 +
                               ((C7644 * C342 - C48548 * C348 + C7645 * C343 -
                                 C48535 * C349 + C7646 * C344 - C48503 * C350) *
                                    C118 +
                                (C7644 * C353 - C48548 * C360 + C7645 * C354 -
                                 C48535 * C361 + C7646 * C355 - C48503 * C362) *
                                    C48227) *
                                   C14988 +
                               ((C7644 * C871 - C48548 * C876 + C7645 * C872 -
                                 C48535 * C877 + C7646 * C873 - C48503 * C878) *
                                    C118 +
                                (C7644 * C881 - C48548 * C886 + C7645 * C882 -
                                 C48535 * C887 + C7646 * C883 - C48503 * C888) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C111 +
                              (((C48548 * C128 - C7644 * C121 + C48535 * C129 -
                                 C7645 * C122 + C48503 * C130 - C7646 * C123) *
                                    C118 +
                                (C48548 * C142 - C7644 * C133 + C48535 * C143 -
                                 C7645 * C134 + C48503 * C144 - C7646 * C135) *
                                    C48227) *
                                   C14987 +
                               ((C48548 * C349 - C7644 * C343 + C48535 * C350 -
                                 C7645 * C344 + C48503 * C351 - C7646 * C345) *
                                    C118 +
                                (C48548 * C361 - C7644 * C354 + C48535 * C362 -
                                 C7645 * C355 + C48503 * C363 - C7646 * C356) *
                                    C48227) *
                                   C14988 +
                               ((C48548 * C877 - C7644 * C872 + C48535 * C878 -
                                 C7645 * C873 + C48503 * C879 - C7646 * C874) *
                                    C118 +
                                (C48548 * C887 - C7644 * C882 + C48535 * C888 -
                                 C7645 * C883 + C48503 * C889 - C7646 * C884) *
                                    C48227) *
                                   C48519) *
                                  C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
            C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C1009 +
            (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
            (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
            (C9027 - C9028) * C48516) *
               C14987 +
           ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
            (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
            (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
               C14988 +
           ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
            (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
            (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C1009 +
            (C48122 * C142 - C8908 * C133) * C48551 +
            (C48122 * C241 - C8908 * C235) * C1010 +
            (C48122 * C253 - C8908 * C246) * C48539 +
            (C48122 * C524 - C8908 * C519) * C1011 +
            (C48122 * C534 - C8908 * C529) * C48516) *
               C14987 +
           ((C48122 * C349 - C8908 * C343) * C1009 +
            (C48122 * C361 - C8908 * C354) * C48551 +
            (C48122 * C626 - C8908 * C621) * C1010 +
            (C48122 * C636 - C8908 * C631) * C48539 +
            (C48122 * C1374 - C8908 * C1370) * C1011 +
            (C48122 * C1382 - C8908 * C1377) * C48516) *
               C14988 +
           ((C48122 * C877 - C8908 * C872) * C1009 +
            (C48122 * C887 - C8908 * C882) * C48551 +
            (C48122 * C2266 - C8908 * C2260) * C1010 +
            (C48122 * C2278 - C8908 * C2269) * C48539 +
            (C48122 * C2272 - C8908 * C2263) * C1011 +
            (C48122 * C2281 - C8908 * C2275) * C48516) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C118 +
            (C48122 * C140 - C8908 * C131) * C48227) *
               C17450 +
           ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
           (C10919 * C118 + C10920 * C48227) * C17452 +
           ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
           ((C48122 * C3586 - C8908 * C3583) * C118 +
            (C48122 * C3592 - C8908 * C3589) * C48227) *
               C17454) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C118 +
            (C8908 * C132 - C48122 * C141) * C48227) *
               C17450 +
           ((C10067 - C10068) * C118 + (C10069 - C10070) * C48227) * C17451 +
           ((C10071 - C10072) * C118 + (C10073 - C10074) * C48227) * C17452 +
           ((C8908 * C2692 - C48122 * C2696) * C118 +
            (C8908 * C2699 - C48122 * C2704) * C48227) *
               C17453 +
           ((C8908 * C3584 - C48122 * C3587) * C118 +
            (C8908 * C3590 - C48122 * C3593) * C48227) *
               C17454) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C118 +
            (C48122 * C142 - C8908 * C133) * C48227) *
               C17450 +
           ((C48122 * C349 - C8908 * C343) * C118 +
            (C48122 * C361 - C8908 * C354) * C48227) *
               C17451 +
           ((C48122 * C877 - C8908 * C872) * C118 +
            (C48122 * C887 - C8908 * C882) * C48227) *
               C17452 +
           ((C48122 * C2697 - C8908 * C2693) * C118 +
            (C48122 * C2705 - C8908 * C2700) * C48227) *
               C17453 +
           ((C48122 * C3588 - C8908 * C3585) * C118 +
            (C48122 * C3594 - C8908 * C3591) * C48227) *
               C17454) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C48210 * C229 +
               ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48227) *
                   C48239 * C48210 * C48511) *
                  C231 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48227) *
                   C48239 * C48210 * C229 +
               ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                 C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                 C105 * C249 - C117 * C238) *
                    C118 +
                (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                 C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                 C105 * C256 - C117 * C250) *
                    C48227) *
                   C48239 * C48210 * C48511) *
                  C48509) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                   C48239 * C48210 * C229 +
               ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
                 C1008 * C1160 - C48503 * C1164) *
                    C1011 +
                (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
                 C1008 * C1167 - C48503 * C1172) *
                    C48516) *
                   C48239 * C48210 * C48511) *
                  C231 +
              (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                 C1008 * C122 - C48503 * C129) *
                    C1009 +
                (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                 C1008 * C134 - C48503 * C143) *
                    C48551 +
                (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                   C48239 * C48210 * C229 +
               ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
                (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
                (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
                (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
                (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
                 C48503 * C1168 - C1008 * C1161) *
                    C1011 +
                (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
                 C48503 * C1173 - C1008 * C1169) *
                    C48516) *
                   C48239 * C48210 * C48511) *
                  C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
              C48503 * C349 - C1008 * C343) *
                 C118 +
             (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
              C48503 * C361 - C1008 * C354) *
                 C48227) *
                C48541 +
            ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
              C48503 * C877 - C1008 * C872) *
                 C118 +
             (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
              C48503 * C887 - C1008 * C882) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
              C1008 * C2260 - C48503 * C2266) *
                 C118 +
             (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
              C1008 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
              C1008 * C344 - C48503 * C350) *
                 C118 +
             (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
              C1008 * C355 - C48503 * C362) *
                 C48227) *
                C48541 +
            ((C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
              C1008 * C873 - C48503 * C878) *
                 C118 +
             (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
              C1008 * C883 - C48503 * C888) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C118 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48227) *
                C48552 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48503 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48503 * C637 - C1008 * C632) *
                 C48227) *
                C48541 +
            ((C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C118 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C229 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C229 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C229 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C229 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C48122 * C347 - C8908 * C341) * C7647 +
             (C48122 * C359 - C8908 * C352) * C7641 + (C9372 - C9371) * C7648 +
             (C9374 - C9373) * C7642 + (C9376 - C9375) * C7649 +
             (C9378 - C9377) * C48516) *
                C48541 +
            ((C48122 * C875 - C8908 * C870) * C7647 +
             (C48122 * C885 - C8908 * C880) * C7641 + (C9881 - C9882) * C7648 +
             (C9883 - C9884) * C7642 + (C9885 - C9886) * C7649 +
             (C9887 - C9888) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
             (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
             (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
             (C8908 * C9612 - C48122 * C9614) * C7649 +
             (C8908 * C9615 - C48122 * C9618) * C48516) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C8908 * C342 - C48122 * C348) * C7647 +
             (C8908 * C353 - C48122 * C360) * C7641 + (C9889 - C9890) * C7648 +
             (C9891 - C9892) * C7642 + (C9893 - C9894) * C7649 +
             (C9895 - C9896) * C48516) *
                C48541 +
            ((C8908 * C871 - C48122 * C876) * C7647 +
             (C8908 * C881 - C48122 * C886) * C7641 + (C9897 - C9898) * C7648 +
             (C9899 - C9900) * C7642 + (C9901 - C9902) * C7649 +
             (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9022 - C9021) * C7647 + (C9024 - C9023) * C7641 +
             (C9026 - C9025) * C7648 + (C9028 - C9027) * C7642 +
             (C9030 - C9029) * C7649 + (C9032 - C9031) * C48516) *
                C48552 +
            ((C9890 - C9889) * C7647 + (C9892 - C9891) * C7641 +
             (C9894 - C9893) * C7648 + (C9896 - C9895) * C7642 +
             (C48122 * C1824 - C8908 * C1821) * C7649 +
             (C48122 * C1830 - C8908 * C1827) * C48516) *
                C48541 +
            ((C9898 - C9897) * C7647 + (C9900 - C9899) * C7641 +
             (C9902 - C9901) * C7648 + (C9904 - C9903) * C7642 +
             (C48122 * C9877 - C8908 * C9876) * C7649 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C48548 * C347 - C7644 * C341 + C48535 * C348 - C7645 * C342 +
              C48503 * C349 - C7646 * C343) *
                 C118 +
             (C48548 * C359 - C7644 * C352 + C48535 * C360 - C7645 * C353 +
              C48503 * C361 - C7646 * C354) *
                 C48227) *
                C14988 +
            ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
              C48503 * C877 - C7646 * C872) *
                 C118 +
             (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
              C48503 * C887 - C7646 * C882) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
              C7646 * C2260 - C48503 * C2266) *
                 C118 +
             (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
              C7646 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C7644 * C342 - C48548 * C348 + C7645 * C343 - C48535 * C349 +
              C7646 * C344 - C48503 * C350) *
                 C118 +
             (C7644 * C353 - C48548 * C360 + C7645 * C354 - C48535 * C361 +
              C7646 * C355 - C48503 * C362) *
                 C48227) *
                C14988 +
            ((C7644 * C871 - C48548 * C876 + C7645 * C872 - C48535 * C877 +
              C7646 * C873 - C48503 * C878) *
                 C118 +
             (C7644 * C881 - C48548 * C886 + C7645 * C882 - C48535 * C887 +
              C7646 * C883 - C48503 * C888) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C118 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C48227) *
                C14987 +
            ((C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
              C48503 * C627 - C7646 * C622) *
                 C118 +
             (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
              C48503 * C637 - C7646 * C632) *
                 C48227) *
                C14988 +
            ((C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C118 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9022 - C9021) * C1009 + (C9024 - C9023) * C48551 +
             (C9026 - C9025) * C1010 + (C9028 - C9027) * C48539 +
             (C9030 - C9029) * C1011 + (C9032 - C9031) * C48516) *
                C14987 +
            ((C9890 - C9889) * C1009 + (C9892 - C9891) * C48551 +
             (C9894 - C9893) * C1010 + (C9896 - C9895) * C48539 +
             (C14025 - C14024) * C1011 + (C14027 - C14026) * C48516) *
                C14988 +
            ((C9898 - C9897) * C1009 + (C9900 - C9899) * C48551 +
             (C9902 - C9901) * C1010 + (C9904 - C9903) * C48539 +
             (C48122 * C9877 - C8908 * C9876) * C1011 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C48122 * C3586 - C8908 * C3583) * C118 +
             (C48122 * C3592 - C8908 * C3589) * C48227) *
                C17454) *
               C48210 * C229 +
           (((C9006 - C9005) * C118 + (C9008 - C9007) * C48227) * C17450 +
            (C10493 * C118 + C10494 * C48227) * C17451 +
            (C10497 * C118 + C10498 * C48227) * C17452 +
            ((C10501 - C10502) * C118 + (C10503 - C10504) * C48227) * C17453 +
            ((C8908 * C10910 - C48122 * C10912) * C118 +
             (C8908 * C10913 - C48122 * C10916) * C48227) *
                C17454) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C118 +
             (C8908 * C132 - C48122 * C141) * C48227) *
                C17450 +
            ((C10067 - C10068) * C118 + (C10069 - C10070) * C48227) * C17451 +
            ((C10071 - C10072) * C118 + (C10073 - C10074) * C48227) * C17452 +
            ((C8908 * C2692 - C48122 * C2696) * C118 +
             (C8908 * C2699 - C48122 * C2704) * C48227) *
                C17453 +
            ((C8908 * C3584 - C48122 * C3587) * C118 +
             (C8908 * C3590 - C48122 * C3593) * C48227) *
                C17454) *
               C48210 * C229 +
           (((C9022 - C9021) * C118 + (C9024 - C9023) * C48227) * C17450 +
            ((C9890 - C9889) * C118 + (C9892 - C9891) * C48227) * C17451 +
            ((C9898 - C9897) * C118 + (C9900 - C9899) * C48227) * C17452 +
            ((C48122 * C3161 - C8908 * C3158) * C118 +
             (C48122 * C3167 - C8908 * C3164) * C48227) *
                C17453 +
            ((C48122 * C17538 - C8908 * C17537) * C118 +
             (C48122 * C17540 - C8908 * C17539) * C48227) *
                C17454) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C339 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48227) *
                   C48239 * C48513) *
                  C48193 * C231 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48227) *
                   C48239 * C339 +
               ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
                 C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
                 C105 * C357 - C117 * C346) *
                    C118 +
                (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
                 C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
                 C105 * C364 - C117 * C358) *
                    C48227) *
                   C48239 * C48513) *
                  C48193 * C48509) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                   C48239 * C339 +
               ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                 C1008 * C343 - C48503 * C349) *
                    C1009 +
                (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                 C1008 * C354 - C48503 * C361) *
                    C48551 +
                (C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
                 C1008 * C621 - C48503 * C626) *
                    C1010 +
                (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
                 C1008 * C631 - C48503 * C636) *
                    C48539 +
                (C1006 * C1368 - C1000 * C1372 + C1007 * C1369 - C1001 * C1373 +
                 C1008 * C1370 - C48503 * C1374) *
                    C1011 +
                (C1006 * C1375 - C1000 * C1380 + C1007 * C1376 - C1001 * C1381 +
                 C1008 * C1377 - C48503 * C1382) *
                    C48516) *
                   C48239 * C48513) *
                  C48193 * C231 +
              (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                 C1008 * C122 - C48503 * C129) *
                    C1009 +
                (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                 C1008 * C134 - C48503 * C143) *
                    C48551 +
                (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                   C48239 * C339 +
               ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
                 C48503 * C350 - C1008 * C344) *
                    C1009 +
                (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
                 C48503 * C362 - C1008 * C355) *
                    C48551 +
                (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
                 C48503 * C627 - C1008 * C622) *
                    C1010 +
                (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
                 C48503 * C637 - C1008 * C632) *
                    C48539 +
                (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
                 C48503 * C1378 - C1008 * C1371) *
                    C1011 +
                (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
                 C48503 * C1383 - C1008 * C1379) *
                    C48516) *
                   C48239 * C48513) *
                  C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C339 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C118 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48227) *
                C48552 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C118 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48227) *
                C48541 +
            ((C1000 * C2696 - C1006 * C2692 + C1001 * C2697 - C1007 * C2693 +
              C48503 * C2701 - C1008 * C2694) *
                 C118 +
             (C1000 * C2704 - C1006 * C2699 + C1001 * C2705 - C1007 * C2700 +
              C48503 * C2706 - C1008 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C7644 * C619 - C48548 * C624 + C7645 * C620 - C48535 * C625 +
             C7646 * C621 - C48503 * C626) *
                C7648 +
            (C7644 * C629 - C48548 * C634 + C7645 * C630 - C48535 * C635 +
             C7646 * C631 - C48503 * C636) *
                C7642 +
            (C7644 * C1368 - C48548 * C1372 + C7645 * C1369 - C48535 * C1373 +
             C7646 * C1370 - C48503 * C1374) *
                C7649 +
            (C7644 * C1375 - C48548 * C1380 + C7645 * C1376 - C48535 * C1381 +
             C7646 * C1377 - C48503 * C1382) *
                C48516) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C339 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 +
            (C8908 * C619 - C48122 * C624) * C8910 +
            (C8908 * C629 - C48122 * C634) * C8904 +
            (C8908 * C1368 - C48122 * C1372) * C8911 +
            (C8908 * C1375 - C48122 * C1380) * C8905 +
            (C8908 * C1820 - C48122 * C1823) * C8912 +
            (C8908 * C1826 - C48122 * C1829) * C8906 +
            (C8908 * C9118 - C48122 * C9120) * C8913 +
            (C8908 * C9121 - C48122 * C9124) * C8907) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C339 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 +
             (C9376 - C9375) * C7649 + (C9378 - C9377) * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 +
             (C9885 - C9886) * C7649 + (C9887 - C9888) * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             (C9371 - C9372) * C7648 + (C9373 - C9374) * C7642 +
             (C9375 - C9376) * C7649 + (C9377 - C9378) * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             (C9882 - C9881) * C7648 + (C9884 - C9883) * C7642 +
             (C9886 - C9885) * C7649 + (C9888 - C9887) * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C8908 * C3157 - C48122 * C3160) * C7648 +
             (C8908 * C3163 - C48122 * C3166) * C7642 +
             (C8908 * C10050 - C48122 * C10052) * C7649 +
             (C8908 * C10053 - C48122 * C10056) * C48516) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C339 +
           (((C10068 - C10067) * C7647 + (C10070 - C10069) * C7641 +
             (C9890 - C9889) * C7648 + (C9892 - C9891) * C7642 +
             (C9894 - C9893) * C7649 + (C9896 - C9895) * C48516) *
                C48552 +
            ((C10072 - C10071) * C7647 + (C10074 - C10073) * C7641 +
             (C9898 - C9897) * C7648 + (C9900 - C9899) * C7642 +
             (C9902 - C9901) * C7649 + (C9904 - C9903) * C48516) *
                C48541 +
            ((C48122 * C2696 - C8908 * C2692) * C7647 +
             (C48122 * C2704 - C8908 * C2699) * C7641 +
             (C48122 * C3161 - C8908 * C3158) * C7648 +
             (C48122 * C3167 - C8908 * C3164) * C7642 +
             (C48122 * C10054 - C8908 * C10051) * C7649 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C339 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C118 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C48227) *
                C14987 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C118 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C48227) *
                C14988 +
            ((C48548 * C2696 - C7644 * C2692 + C48535 * C2697 - C7645 * C2693 +
              C48503 * C2701 - C7646 * C2694) *
                 C118 +
             (C48548 * C2704 - C7644 * C2699 + C48535 * C2705 - C7645 * C2700 +
              C48503 * C2706 - C7646 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C339 +
           (((C10068 - C10067) * C1009 + (C10070 - C10069) * C48551 +
             (C9890 - C9889) * C1010 + (C9892 - C9891) * C48539 +
             (C9894 - C9893) * C1011 + (C9896 - C9895) * C48516) *
                C14987 +
            ((C10072 - C10071) * C1009 + (C10074 - C10073) * C48551 +
             (C9898 - C9897) * C1010 + (C9900 - C9899) * C48539 +
             (C9902 - C9901) * C1011 + (C9904 - C9903) * C48516) *
                C14988 +
            ((C48122 * C2696 - C8908 * C2692) * C1009 +
             (C48122 * C2704 - C8908 * C2699) * C48551 +
             (C48122 * C3161 - C8908 * C3158) * C1010 +
             (C48122 * C3167 - C8908 * C3164) * C48539 +
             (C48122 * C10054 - C8908 * C10051) * C1011 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
               C339 +
           (((C10060 - C10059) * C118 + (C10062 - C10061) * C48227) * C17450 +
            ((C10064 - C10063) * C118 + (C10066 - C10065) * C48227) * C17451 +
            ((C10925 - C10926) * C118 + (C10927 - C10928) * C48227) * C17452 +
            ((C17633 - C17632) * C118 + (C17635 - C17634) * C48227) * C17453 +
            ((C8908 * C17623 - C48122 * C17625) * C118 +
             (C8908 * C17626 - C48122 * C17629) * C48227) *
                C17454) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C118 +
             (C8908 * C132 - C48122 * C141) * C48227) *
                C17450 +
            ((C10067 - C10068) * C118 + (C10069 - C10070) * C48227) * C17451 +
            ((C10071 - C10072) * C118 + (C10073 - C10074) * C48227) * C17452 +
            ((C17636 - C17637) * C118 + (C17638 - C17639) * C48227) * C17453 +
            ((C17640 - C17641) * C118 + (C17642 - C17643) * C48227) * C17454) *
               C339 +
           (((C10068 - C10067) * C118 + (C10070 - C10069) * C48227) * C17450 +
            ((C10072 - C10071) * C118 + (C10074 - C10073) * C48227) * C17451 +
            ((C17637 - C17636) * C118 + (C17639 - C17638) * C48227) * C17452 +
            ((C17641 - C17640) * C118 + (C17643 - C17642) * C48227) * C17453 +
            ((C48122 * C17627 - C8908 * C17624) * C118 +
             (C48122 * C17630 - C8908 * C17628) * C48227) *
                C17454) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C48210 * C447 +
               ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48227) *
                   C48239 * C48210 * C48511) *
                  C449 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48227) *
                   C48239 * C48210 * C447 +
               ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                 C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                 C105 * C249 - C117 * C238) *
                    C118 +
                (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                 C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                 C105 * C256 - C117 * C250) *
                    C48227) *
                   C48239 * C48210 * C48511) *
                  C48509) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                   C48239 * C48210 * C447 +
               ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
                 C1008 * C1160 - C48503 * C1164) *
                    C1011 +
                (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
                 C1008 * C1167 - C48503 * C1172) *
                    C48516) *
                   C48239 * C48210 * C48511) *
                  C449 +
              (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                 C1008 * C122 - C48503 * C129) *
                    C1009 +
                (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                 C1008 * C134 - C48503 * C143) *
                    C48551 +
                (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                   C48239 * C48210 * C447 +
               ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
                (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
                (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
                (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
                (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
                 C48503 * C1168 - C1008 * C1161) *
                    C1011 +
                (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
                 C48503 * C1173 - C1008 * C1169) *
                    C48516) *
                   C48239 * C48210 * C48511) *
                  C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
              C1008 * C2260 - C48503 * C2266) *
                 C118 +
             (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
              C1008 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C118 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48227) *
                C48552 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48503 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48503 * C637 - C1008 * C632) *
                 C48227) *
                C48541 +
            ((C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C118 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C447 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C447 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C447 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C447 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 +
             (C9376 - C9375) * C7649 + (C9378 - C9377) * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 +
             (C9885 - C9886) * C7649 + (C9887 - C9888) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
             (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
             (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
             (C8908 * C9612 - C48122 * C9614) * C7649 +
             (C8908 * C9615 - C48122 * C9618) * C48516) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9022 - C9021) * C7647 + (C9024 - C9023) * C7641 +
             (C9026 - C9025) * C7648 + (C9028 - C9027) * C7642 +
             (C9030 - C9029) * C7649 + (C9032 - C9031) * C48516) *
                C48552 +
            ((C9890 - C9889) * C7647 + (C9892 - C9891) * C7641 +
             (C9894 - C9893) * C7648 + (C9896 - C9895) * C7642 +
             (C48122 * C1824 - C8908 * C1821) * C7649 +
             (C48122 * C1830 - C8908 * C1827) * C48516) *
                C48541 +
            ((C9898 - C9897) * C7647 + (C9900 - C9899) * C7641 +
             (C9902 - C9901) * C7648 + (C9904 - C9903) * C7642 +
             (C48122 * C9877 - C8908 * C9876) * C7649 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
              C7646 * C2260 - C48503 * C2266) *
                 C118 +
             (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
              C7646 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C118 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C48227) *
                C14987 +
            ((C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
              C48503 * C627 - C7646 * C622) *
                 C118 +
             (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
              C48503 * C637 - C7646 * C632) *
                 C48227) *
                C14988 +
            ((C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C118 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9022 - C9021) * C1009 + (C9024 - C9023) * C48551 +
             (C9026 - C9025) * C1010 + (C9028 - C9027) * C48539 +
             (C9030 - C9029) * C1011 + (C9032 - C9031) * C48516) *
                C14987 +
            ((C9890 - C9889) * C1009 + (C9892 - C9891) * C48551 +
             (C9894 - C9893) * C1010 + (C9896 - C9895) * C48539 +
             (C14025 - C14024) * C1011 + (C14027 - C14026) * C48516) *
                C14988 +
            ((C9898 - C9897) * C1009 + (C9900 - C9899) * C48551 +
             (C9902 - C9901) * C1010 + (C9904 - C9903) * C48539 +
             (C48122 * C9877 - C8908 * C9876) * C1011 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
               C48210 * C447 +
           (((C9006 - C9005) * C118 + (C9008 - C9007) * C48227) * C17450 +
            (C10493 * C118 + C10494 * C48227) * C17451 +
            (C10497 * C118 + C10498 * C48227) * C17452 +
            ((C10501 - C10502) * C118 + (C10503 - C10504) * C48227) * C17453 +
            ((C8908 * C10910 - C48122 * C10912) * C118 +
             (C8908 * C10913 - C48122 * C10916) * C48227) *
                C17454) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C118 +
             (C8908 * C132 - C48122 * C141) * C48227) *
                C17450 +
            ((C10067 - C10068) * C118 + (C10069 - C10070) * C48227) * C17451 +
            ((C10071 - C10072) * C118 + (C10073 - C10074) * C48227) * C17452 +
            ((C17636 - C17637) * C118 + (C17638 - C17639) * C48227) * C17453 +
            ((C17640 - C17641) * C118 + (C17642 - C17643) * C48227) * C17454) *
               C48210 * C447 +
           (((C9022 - C9021) * C118 + (C9024 - C9023) * C48227) * C17450 +
            ((C9890 - C9889) * C118 + (C9892 - C9891) * C48227) * C17451 +
            ((C9898 - C9897) * C118 + (C9900 - C9899) * C48227) * C17452 +
            ((C48122 * C3161 - C8908 * C3158) * C118 +
             (C48122 * C3167 - C8908 * C3164) * C48227) *
                C17453 +
            ((C48122 * C17538 - C8908 * C17537) * C118 +
             (C48122 * C17540 - C8908 * C17539) * C48227) *
                C17454) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48227) *
                  C48239 * C48210 * C513 +
              ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                C117 * C237 - C105 * C243) *
                   C118 +
               (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                C117 * C248 - C105 * C255) *
                   C48227) *
                  C48239 * C48210 * C514 +
              ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
                C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
                C105 * C526 - C117 * C521) *
                   C118 +
               (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
                C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
                C105 * C536 - C117 * C531) *
                   C48227) *
                  C48239 * C48210 * C515) *
             C48159 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                C48503 * C128 - C1008 * C121) *
                   C1009 +
               (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                C48503 * C142 - C1008 * C133) *
                   C48551 +
               (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
               (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
               C1673 * C1011 + C1674 * C48516) *
                  C48239 * C48210 * C513 +
              ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
               (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
               (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
               (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
               (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
               (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
                  C48239 * C48210 * C514 +
              (C1673 * C1009 + C1674 * C48551 +
               (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C1010 +
               (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48539 +
               (C1000 * C1643 - C1006 * C1640 + C1001 * C1644 - C1007 * C1641 +
                C48503 * C1645 - C1008 * C1642) *
                   C1011 +
               (C1000 * C1649 - C1006 * C1646 + C1001 * C1650 - C1007 * C1647 +
                C48503 * C1651 - C1008 * C1648) *
                   C48516) *
                  C48239 * C48210 * C515) *
             C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48227) *
               C48552 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
               C48541 +
           ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
            (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
               C48519) *
              C48210 * C513 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
               C48552 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
               C48541 +
           ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48503 * C2266) *
                C118 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48503 * C2278) *
                C48227) *
               C48519) *
              C48210 * C514 +
          ((C1673 * C118 + C1674 * C48227) * C48552 +
           ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48227) *
               C48541 +
           ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
             C48503 * C2272 - C1008 * C2263) *
                C118 +
            (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
             C48503 * C2281 - C1008 * C2275) *
                C48227) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C48210 * C513 +
          ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
           (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
           (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
           (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
           (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
           (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
              C48239 * C48210 * C514 +
          (C8267 * C7647 + C8268 * C7641 +
           (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C7648 +
           (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C7642 +
           (C48548 * C1643 - C7644 * C1640 + C48535 * C1644 - C7645 * C1641 +
            C48503 * C1645 - C7646 * C1642) *
               C7649 +
           (C48548 * C1649 - C7644 * C1646 + C48535 * C1650 - C7645 * C1647 +
            C48503 * C1651 - C7646 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C48210 * C513 +
          ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
           (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
           (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
           (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
           (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
              C48239 * C48210 * C514 +
          (C9275 * C8909 + C9276 * C8903 + C9277 * C8910 + C9278 * C8904 +
           C9279 * C8911 + C9280 * C8905 + (C9282 - C9281) * C8912 +
           (C9284 - C9283) * C8906 + (C48122 * C9271 - C8908 * C9270) * C8913 +
           (C48122 * C9273 - C8908 * C9272) * C8907) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
            (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 + C10331 * C7649 +
            C10332 * C48516) *
               C48541 +
           ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
            (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 + C10333 * C7649 +
            C10334 * C48516) *
               C48519) *
              C48210 * C513 +
          (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
            (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
            (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
               C48552 +
           ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
            (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
            (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
               C48541 +
           ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
            (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
            (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
               C48519) *
              C48210 * C514 +
          ((C9275 * C7647 + C9276 * C7641 + C9277 * C7648 + C9278 * C7642 +
            C9279 * C7649 + C9280 * C48516) *
               C48552 +
           (C10331 * C7647 + C10332 * C7641 + (C9380 - C9379) * C7648 +
            (C9382 - C9381) * C7642 + (C9384 - C9383) * C7649 +
            (C9386 - C9385) * C48516) *
               C48541 +
           (C10333 * C7647 + C10334 * C7641 + (C10336 - C10335) * C7648 +
            (C10338 - C10337) * C7642 +
            (C48122 * C9616 - C8908 * C9613) * C7649 +
            (C48122 * C9619 - C8908 * C9617) * C48516) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C118 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C48227) *
               C14987 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
               C14988 +
           ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
            (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
               C48519) *
              C48210 * C513 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
               C14987 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
               C14988 +
           ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
             C7646 * C2260 - C48503 * C2266) *
                C118 +
            (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
             C7646 * C2269 - C48503 * C2278) *
                C48227) *
               C48519) *
              C48210 * C514 +
          ((C8267 * C118 + C8268 * C48227) * C14987 +
           ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48227) *
               C14988 +
           ((C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
             C48503 * C2272 - C7646 * C2263) *
                C118 +
            (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
             C48503 * C2281 - C7646 * C2275) *
                C48227) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
            C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
               C48519) *
              C48210 * C513 +
          (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
            (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
            (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
               C14987 +
           (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
            C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
               C14988 +
           (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
            C10500 * C48539 + (C10335 - C10336) * C1011 +
            (C10337 - C10338) * C48516) *
               C48519) *
              C48210 * C514 +
          ((C9275 * C1009 + C9276 * C48551 + C9277 * C1010 + C9278 * C48539 +
            C9279 * C1011 + C9280 * C48516) *
               C14987 +
           (C10331 * C1009 + C10332 * C48551 + C14386 * C1010 +
            C14387 * C48539 + (C9384 - C9383) * C1011 +
            (C9386 - C9385) * C48516) *
               C14988 +
           (C10333 * C1009 + C10334 * C48551 + (C10336 - C10335) * C1010 +
            (C10338 - C10337) * C48539 +
            (C48122 * C9616 - C8908 * C9613) * C1011 +
            (C48122 * C9619 - C8908 * C9617) * C48516) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C118 +
            (C48122 * C140 - C8908 * C131) * C48227) *
               C17450 +
           ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
           (C10919 * C118 + C10920 * C48227) * C17452 +
           ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
           ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
              C48210 * C513 +
          (((C9006 - C9005) * C118 + (C9008 - C9007) * C48227) * C17450 +
           (C10493 * C118 + C10494 * C48227) * C17451 +
           (C10497 * C118 + C10498 * C48227) * C17452 +
           ((C10501 - C10502) * C118 + (C10503 - C10504) * C48227) * C17453 +
           ((C8908 * C10910 - C48122 * C10912) * C118 +
            (C8908 * C10913 - C48122 * C10916) * C48227) *
               C17454) *
              C48210 * C514 +
          ((C9275 * C118 + C9276 * C48227) * C17450 +
           (C10331 * C118 + C10332 * C48227) * C17451 +
           (C10333 * C118 + C10334 * C48227) * C17452 +
           ((C10506 - C10505) * C118 + (C10508 - C10507) * C48227) * C17453 +
           ((C48122 * C10914 - C8908 * C10911) * C118 +
            (C48122 * C10917 - C8908 * C10915) * C48227) *
               C17454) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C339 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48227) *
                   C48239 * C48513) *
                  C447 +
              (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48227) *
                   C48239 * C339 +
               ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
                 C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
                 C105 * C628 - C117 * C623) *
                    C118 +
                (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
                 C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
                 C105 * C638 - C117 * C633) *
                    C48227) *
                   C48239 * C48513) *
                  C48511) *
             C48159 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                C1673 * C1011 + C1674 * C48516) *
                   C48239 * C339 +
               ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                 C1008 * C343 - C48503 * C349) *
                    C1009 +
                (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                 C1008 * C354 - C48503 * C361) *
                    C48551 +
                (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
                (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
                (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
                (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
                   C48239 * C48513) *
                  C447 +
              (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
                (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
                   C48239 * C339 +
               ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
                (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
                (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
                (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
                (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
                 C48503 * C1825 - C1008 * C1822) *
                    C1011 +
                (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
                 C48503 * C1831 - C1008 * C1828) *
                    C48516) *
                   C48239 * C48513) *
                  C48511) *
             C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C447 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C118 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48227) *
                C48519) *
               C339 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48227) *
                C48552 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C118 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48227) *
                C48541 +
            ((C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
              C48503 * C3162 - C1008 * C3159) *
                 C118 +
             (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
              C48503 * C3168 - C1008 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C447 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C339 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            (C10493 * C7647 + C10494 * C7641 + C10495 * C7648 + C10496 * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            (C10497 * C7647 + C10498 * C7641 + C10499 * C7648 + C10500 * C7642 +
             (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
                C48519) *
               C339 +
           ((C10489 * C7647 + C10490 * C7641 + C10331 * C7648 + C10332 * C7642 +
             (C9380 - C9379) * C7649 + (C9382 - C9381) * C48516) *
                C48552 +
            (C10491 * C7647 + C10492 * C7641 + C10333 * C7648 + C10334 * C7642 +
             (C10336 - C10335) * C7649 + (C10338 - C10337) * C48516) *
                C48541 +
            ((C10502 - C10501) * C7647 + (C10504 - C10503) * C7641 +
             (C10506 - C10505) * C7648 + (C10508 - C10507) * C7642 +
             (C48122 * C10485 - C8908 * C10484) * C7649 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C447 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C118 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48227) *
                C48519) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48227) *
                C14987 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C118 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48227) *
                C14988 +
            ((C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
              C48503 * C3162 - C7646 * C3159) *
                 C118 +
             (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
              C48503 * C3168 - C7646 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C339 +
           ((C10489 * C1009 + C10490 * C48551 + C10331 * C1010 +
             C10332 * C48539 + C14386 * C1011 + C14387 * C48516) *
                C14987 +
            (C10491 * C1009 + C10492 * C48551 + C10333 * C1010 +
             C10334 * C48539 + (C10336 - C10335) * C1011 +
             (C10338 - C10337) * C48516) *
                C14988 +
            ((C10502 - C10501) * C1009 + (C10504 - C10503) * C48551 +
             (C10506 - C10505) * C1010 + (C10508 - C10507) * C48539 +
             (C48122 * C10485 - C8908 * C10484) * C1011 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
               C339 +
           (((C10060 - C10059) * C118 + (C10062 - C10061) * C48227) * C17450 +
            ((C10064 - C10063) * C118 + (C10066 - C10065) * C48227) * C17451 +
            ((C10925 - C10926) * C118 + (C10927 - C10928) * C48227) * C17452 +
            ((C17633 - C17632) * C118 + (C17635 - C17634) * C48227) * C17453 +
            ((C8908 * C17623 - C48122 * C17625) * C118 +
             (C8908 * C17626 - C48122 * C17629) * C48227) *
                C17454) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C118 + (C9008 - C9007) * C48227) * C17450 +
            (C10493 * C118 + C10494 * C48227) * C17451 +
            (C10497 * C118 + C10498 * C48227) * C17452 +
            ((C10501 - C10502) * C118 + (C10503 - C10504) * C48227) * C17453 +
            ((C17874 - C17875) * C118 + (C17876 - C17877) * C48227) * C17454) *
               C339 +
           ((C10489 * C118 + C10490 * C48227) * C17450 +
            (C10491 * C118 + C10492 * C48227) * C17451 +
            ((C10502 - C10501) * C118 + (C10504 - C10503) * C48227) * C17452 +
            ((C17875 - C17874) * C118 + (C17877 - C17876) * C48227) * C17453 +
            ((C48122 * C17870 - C8908 * C17869) * C118 +
             (C48122 * C17872 - C8908 * C17871) * C48227) *
                C17454) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C721 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48227) *
                   C48239 * C48513) *
                  C48193 * C449 +
              (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                 C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                 C117 * C124 - C105 * C136) *
                    C118 +
                (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                 C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                 C117 * C137 - C105 * C145) *
                    C48227) *
                   C48239 * C721 +
               ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
                 C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
                 C105 * C357 - C117 * C346) *
                    C118 +
                (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
                 C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
                 C105 * C364 - C117 * C358) *
                    C48227) *
                   C48239 * C48513) *
                  C48193 * C48509) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                C1673 * C1011 + C1674 * C48516) *
                   C48239 * C721 +
               ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                 C1008 * C343 - C48503 * C349) *
                    C1009 +
                (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                 C1008 * C354 - C48503 * C361) *
                    C48551 +
                (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
                (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
                (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
                (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
                   C48239 * C48513) *
                  C48193 * C449 +
              (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                 C1008 * C122 - C48503 * C129) *
                    C1009 +
                (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                 C1008 * C134 - C48503 * C143) *
                    C48551 +
                (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                   C48239 * C721 +
               ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
                 C48503 * C350 - C1008 * C344) *
                    C1009 +
                (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
                 C48503 * C362 - C1008 * C355) *
                    C48551 +
                (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
                 C48503 * C627 - C1008 * C622) *
                    C1010 +
                (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
                 C48503 * C637 - C1008 * C632) *
                    C48539 +
                (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
                 C48503 * C1378 - C1008 * C1371) *
                    C1011 +
                (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
                 C48503 * C1383 - C1008 * C1379) *
                    C48516) *
                   C48239 * C48513) *
                  C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C721 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C118 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48227) *
                C48552 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C118 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48227) *
                C48541 +
            ((C1000 * C2696 - C1006 * C2692 + C1001 * C2697 - C1007 * C2693 +
              C48503 * C2701 - C1008 * C2694) *
                 C118 +
             (C1000 * C2704 - C1006 * C2699 + C1001 * C2705 - C1007 * C2700 +
              C48503 * C2706 - C1008 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C721 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C721 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C721 +
           (((C10068 - C10067) * C7647 + (C10070 - C10069) * C7641 +
             (C9890 - C9889) * C7648 + (C9892 - C9891) * C7642 +
             (C9894 - C9893) * C7649 + (C9896 - C9895) * C48516) *
                C48552 +
            ((C10072 - C10071) * C7647 + (C10074 - C10073) * C7641 +
             (C9898 - C9897) * C7648 + (C9900 - C9899) * C7642 +
             (C9902 - C9901) * C7649 + (C9904 - C9903) * C48516) *
                C48541 +
            ((C48122 * C2696 - C8908 * C2692) * C7647 +
             (C48122 * C2704 - C8908 * C2699) * C7641 +
             (C48122 * C3161 - C8908 * C3158) * C7648 +
             (C48122 * C3167 - C8908 * C3164) * C7642 +
             (C48122 * C10054 - C8908 * C10051) * C7649 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C721 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C118 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C48227) *
                C14987 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C118 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C48227) *
                C14988 +
            ((C48548 * C2696 - C7644 * C2692 + C48535 * C2697 - C7645 * C2693 +
              C48503 * C2701 - C7646 * C2694) *
                 C118 +
             (C48548 * C2704 - C7644 * C2699 + C48535 * C2705 - C7645 * C2700 +
              C48503 * C2706 - C7646 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C721 +
           (((C10068 - C10067) * C1009 + (C10070 - C10069) * C48551 +
             (C9890 - C9889) * C1010 + (C9892 - C9891) * C48539 +
             (C9894 - C9893) * C1011 + (C9896 - C9895) * C48516) *
                C14987 +
            ((C10072 - C10071) * C1009 + (C10074 - C10073) * C48551 +
             (C9898 - C9897) * C1010 + (C9900 - C9899) * C48539 +
             (C9902 - C9901) * C1011 + (C9904 - C9903) * C48516) *
                C14988 +
            ((C48122 * C2696 - C8908 * C2692) * C1009 +
             (C48122 * C2704 - C8908 * C2699) * C48551 +
             (C48122 * C3161 - C8908 * C3158) * C1010 +
             (C48122 * C3167 - C8908 * C3164) * C48539 +
             (C48122 * C10054 - C8908 * C10051) * C1011 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
               C721 +
           (((C10060 - C10059) * C118 + (C10062 - C10061) * C48227) * C17450 +
            ((C10064 - C10063) * C118 + (C10066 - C10065) * C48227) * C17451 +
            ((C10925 - C10926) * C118 + (C10927 - C10928) * C48227) * C17452 +
            ((C17633 - C17632) * C118 + (C17635 - C17634) * C48227) * C17453 +
            ((C8908 * C17623 - C48122 * C17625) * C118 +
             (C8908 * C17626 - C48122 * C17629) * C48227) *
                C17454) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C118 +
             (C8908 * C132 - C48122 * C141) * C48227) *
                C17450 +
            ((C10067 - C10068) * C118 + (C10069 - C10070) * C48227) * C17451 +
            ((C10071 - C10072) * C118 + (C10073 - C10074) * C48227) * C17452 +
            ((C17636 - C17637) * C118 + (C17638 - C17639) * C48227) * C17453 +
            ((C17640 - C17641) * C118 + (C17642 - C17643) * C48227) * C17454) *
               C721 +
           (((C10068 - C10067) * C118 + (C10070 - C10069) * C48227) * C17450 +
            ((C10072 - C10071) * C118 + (C10074 - C10073) * C48227) * C17451 +
            ((C17637 - C17636) * C118 + (C17639 - C17638) * C48227) * C17452 +
            ((C17641 - C17640) * C118 + (C17643 - C17642) * C48227) * C17453 +
            ((C48122 * C17627 - C8908 * C17624) * C118 +
             (C48122 * C17630 - C8908 * C17628) * C48227) *
                C17454) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                 C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                 C105 * C130 - C117 * C123) *
                    C118 +
                (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                 C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                 C105 * C144 - C117 * C135) *
                    C48227) *
                   C48239 * C721 +
               ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                 C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                 C117 * C345 - C105 * C351) *
                    C118 +
                (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                 C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                 C117 * C356 - C105 * C363) *
                    C48227) *
                   C48239 * C48513) *
                  C229 +
              (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                 C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                 C117 * C237 - C105 * C243) *
                    C118 +
                (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                 C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                 C117 * C248 - C105 * C255) *
                    C48227) *
                   C48239 * C721 +
               ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
                 C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
                 C105 * C628 - C117 * C623) *
                    C118 +
                (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
                 C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
                 C105 * C638 - C117 * C633) *
                    C48227) *
                   C48239 * C48513) *
                  C48511) *
             C48159 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                 C48503 * C128 - C1008 * C121) *
                    C1009 +
                (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                 C48503 * C142 - C1008 * C133) *
                    C48551 +
                (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                C1673 * C1011 + C1674 * C48516) *
                   C48239 * C721 +
               ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                 C1008 * C343 - C48503 * C349) *
                    C1009 +
                (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                 C1008 * C354 - C48503 * C361) *
                    C48551 +
                (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
                (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
                (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
                (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
                   C48239 * C48513) *
                  C229 +
              (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
                (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
                   C48239 * C721 +
               ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
                (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
                (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
                (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
                (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
                 C48503 * C1825 - C1008 * C1822) *
                    C1011 +
                (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
                 C48503 * C1831 - C1008 * C1828) *
                    C48516) *
                   C48239 * C48513) *
                  C48511) *
             C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C229 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C118 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48227) *
                C48519) *
               C721 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48227) *
                C48552 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C118 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48227) *
                C48541 +
            ((C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
              C48503 * C3162 - C1008 * C3159) *
                 C118 +
             (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
              C48503 * C3168 - C1008 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C229 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C721 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            (C10493 * C7647 + C10494 * C7641 + C10495 * C7648 + C10496 * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            (C10497 * C7647 + C10498 * C7641 + C10499 * C7648 + C10500 * C7642 +
             (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
                C48519) *
               C721 +
           ((C10489 * C7647 + C10490 * C7641 + C10331 * C7648 + C10332 * C7642 +
             (C9380 - C9379) * C7649 + (C9382 - C9381) * C48516) *
                C48552 +
            (C10491 * C7647 + C10492 * C7641 + C10333 * C7648 + C10334 * C7642 +
             (C10336 - C10335) * C7649 + (C10338 - C10337) * C48516) *
                C48541 +
            ((C10502 - C10501) * C7647 + (C10504 - C10503) * C7641 +
             (C10506 - C10505) * C7648 + (C10508 - C10507) * C7642 +
             (C48122 * C10485 - C8908 * C10484) * C7649 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C229 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C118 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48227) *
                C48519) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48227) *
                C14987 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C118 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48227) *
                C14988 +
            ((C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
              C48503 * C3162 - C7646 * C3159) *
                 C118 +
             (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
              C48503 * C3168 - C7646 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C721 +
           ((C10489 * C1009 + C10490 * C48551 + C10331 * C1010 +
             C10332 * C48539 + C14386 * C1011 + C14387 * C48516) *
                C14987 +
            (C10491 * C1009 + C10492 * C48551 + C10333 * C1010 +
             C10334 * C48539 + (C10336 - C10335) * C1011 +
             (C10338 - C10337) * C48516) *
                C14988 +
            ((C10502 - C10501) * C1009 + (C10504 - C10503) * C48551 +
             (C10506 - C10505) * C1010 + (C10508 - C10507) * C48539 +
             (C48122 * C10485 - C8908 * C10484) * C1011 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C118 +
             (C48122 * C140 - C8908 * C131) * C48227) *
                C17450 +
            ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
            (C10919 * C118 + C10920 * C48227) * C17452 +
            ((C10926 - C10925) * C118 + (C10928 - C10927) * C48227) * C17453 +
            ((C17632 - C17633) * C118 + (C17634 - C17635) * C48227) * C17454) *
               C721 +
           (((C10060 - C10059) * C118 + (C10062 - C10061) * C48227) * C17450 +
            ((C10064 - C10063) * C118 + (C10066 - C10065) * C48227) * C17451 +
            ((C10925 - C10926) * C118 + (C10927 - C10928) * C48227) * C17452 +
            ((C17633 - C17632) * C118 + (C17635 - C17634) * C48227) * C17453 +
            ((C8908 * C17623 - C48122 * C17625) * C118 +
             (C8908 * C17626 - C48122 * C17629) * C48227) *
                C17454) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C118 + (C9008 - C9007) * C48227) * C17450 +
            (C10493 * C118 + C10494 * C48227) * C17451 +
            (C10497 * C118 + C10498 * C48227) * C17452 +
            ((C10501 - C10502) * C118 + (C10503 - C10504) * C48227) * C17453 +
            ((C17874 - C17875) * C118 + (C17876 - C17877) * C48227) * C17454) *
               C721 +
           ((C10489 * C118 + C10490 * C48227) * C17450 +
            (C10491 * C118 + C10492 * C48227) * C17451 +
            ((C10502 - C10501) * C118 + (C10504 - C10503) * C48227) * C17452 +
            ((C17875 - C17874) * C118 + (C17877 - C17876) * C48227) * C17453 +
            ((C48122 * C17870 - C8908 * C17869) * C118 +
             (C48122 * C17872 - C8908 * C17871) * C48227) *
                C17454) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                C105 * C130 - C117 * C123) *
                   C118 +
               (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                C105 * C144 - C117 * C135) *
                   C48227) *
                  C48239 * C867 +
              ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                C117 * C345 - C105 * C351) *
                   C118 +
               (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                C117 * C356 - C105 * C363) *
                   C48227) *
                  C48239 * C868 +
              ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
                C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
                C105 * C879 - C117 * C874) *
                   C118 +
               (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
                C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
                C105 * C889 - C117 * C884) *
                   C48227) *
                  C48239 * C869) *
             C48193 * C48159 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                C48503 * C128 - C1008 * C121) *
                   C1009 +
               (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                C48503 * C142 - C1008 * C133) *
                   C48551 +
               (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
               (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
               C1673 * C1011 + C1674 * C48516) *
                  C48239 * C867 +
              ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
                C1008 * C343 - C48503 * C349) *
                   C1009 +
               (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
                C1008 * C354 - C48503 * C361) *
                   C48551 +
               (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
               (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
               (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
               (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
                  C48239 * C868 +
              ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
                C48503 * C877 - C1008 * C872) *
                   C1009 +
               (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
                C48503 * C887 - C1008 * C882) *
                   C48551 +
               (C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
                C48503 * C2266 - C1008 * C2260) *
                   C1010 +
               (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
                C48503 * C2278 - C1008 * C2269) *
                   C48539 +
               (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
                C48503 * C2272 - C1008 * C2263) *
                   C1011 +
               (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
                C48503 * C2281 - C1008 * C2275) *
                   C48516) *
                  C48239 * C869) *
             C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48227) *
               C48552 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
               C48541 +
           C3620 * C48519) *
              C867 +
          (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
            (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
               C48552 +
           ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
            (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
               C48541 +
           ((C3602 - C3603 + C3604 - C3605 + C3606 - C3607) * C118 +
            (C3608 - C3609 + C3610 - C3611 + C3612 - C3613) * C48227) *
               C48519) *
              C868 +
          (C3620 * C48552 +
           ((C3603 - C3602 + C3605 - C3604 + C3607 - C3606) * C118 +
            (C3609 - C3608 + C3611 - C3610 + C3613 - C3612) * C48227) *
               C48541 +
           ((C1000 * C3586 - C1006 * C3583 + C1001 * C3587 - C1007 * C3584 +
             C48503 * C3588 - C1008 * C3585) *
                C118 +
            (C1000 * C3592 - C1006 * C3589 + C1001 * C3593 - C1007 * C3590 +
             C48503 * C3594 - C1008 * C3591) *
                C48227) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C867 +
          ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
            C7646 * C343 - C48503 * C349) *
               C7647 +
           (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
            C7646 * C354 - C48503 * C361) *
               C7641 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
           (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
           (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
              C48239 * C868 +
          ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
            C48503 * C877 - C7646 * C872) *
               C7647 +
           (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
            C48503 * C887 - C7646 * C882) *
               C7641 +
           (C48548 * C2264 - C7644 * C2258 + C48535 * C2265 - C7645 * C2259 +
            C48503 * C2266 - C7646 * C2260) *
               C7648 +
           (C48548 * C2276 - C7644 * C2267 + C48535 * C2277 - C7645 * C2268 +
            C48503 * C2278 - C7646 * C2269) *
               C7642 +
           (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
            C48503 * C2272 - C7646 * C2263) *
               C7649 +
           (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
            C48503 * C2281 - C7646 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C867 +
          ((C8908 * C341 - C48122 * C347) * C8909 +
           (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
           (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
           (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
           (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
           (C9385 - C9386) * C8907) *
              C48239 * C868 +
          ((C48122 * C875 - C8908 * C870) * C8909 +
           (C48122 * C885 - C8908 * C880) * C8903 +
           (C48122 * C2264 - C8908 * C2258) * C8910 +
           (C48122 * C2276 - C8908 * C2267) * C8904 +
           (C48122 * C2270 - C8908 * C2261) * C8911 +
           (C48122 * C2279 - C8908 * C2273) * C8905 +
           (C48122 * C9614 - C8908 * C9612) * C8912 +
           (C48122 * C9618 - C8908 * C9615) * C8906 +
           (C48122 * C9616 - C8908 * C9613) * C8913 +
           (C48122 * C9619 - C8908 * C9617) * C8907) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
            C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
            C10332 * C48516) *
               C48541 +
           C10935 * C48519) *
              C867 +
          (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
            C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
            C10496 * C48516) *
               C48552 +
           ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
            C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
            C10500 * C48516) *
               C48541 +
           ((C10925 - C10926) * C7647 + (C10927 - C10928) * C7641 +
            (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
            (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
               C48519) *
              C868 +
          (C10935 * C48552 +
           ((C10926 - C10925) * C7647 + (C10928 - C10927) * C7641 +
            (C10502 - C10501) * C7648 + (C10504 - C10503) * C7642 +
            (C10506 - C10505) * C7649 + (C10508 - C10507) * C48516) *
               C48541 +
           ((C48122 * C3586 - C8908 * C3583) * C7647 +
            (C48122 * C3592 - C8908 * C3589) * C7641 +
            (C48122 * C10912 - C8908 * C10910) * C7648 +
            (C48122 * C10916 - C8908 * C10913) * C7642 +
            (C48122 * C10914 - C8908 * C10911) * C7649 +
            (C48122 * C10917 - C8908 * C10915) * C48516) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C118 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C48227) *
               C14987 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
               C14988 +
           C16171 * C48519) *
              C867 +
          (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
            (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
               C14987 +
           ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
            (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
               C14988 +
           ((C16153 - C16154 + C16155 - C16156 + C16157 - C16158) * C118 +
            (C16159 - C16160 + C16161 - C16162 + C16163 - C16164) * C48227) *
               C48519) *
              C868 +
          (C16171 * C14987 +
           ((C16154 - C16153 + C16156 - C16155 + C16158 - C16157) * C118 +
            (C16160 - C16159 + C16162 - C16161 + C16164 - C16163) * C48227) *
               C14988 +
           ((C48548 * C3586 - C7644 * C3583 + C48535 * C3587 - C7645 * C3584 +
             C48503 * C3588 - C7646 * C3585) *
                C118 +
            (C48548 * C3592 - C7644 * C3589 + C48535 * C3593 - C7645 * C3590 +
             C48503 * C3594 - C7646 * C3591) *
                C48227) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           C17388 * C48519) *
              C867 +
          (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
            C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
            C10496 * C48516) *
               C14987 +
           ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
            C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
            C10500 * C48516) *
               C14988 +
           ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
            (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
            (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
               C48519) *
              C868 +
          (C17388 * C14987 +
           ((C10926 - C10925) * C1009 + (C10928 - C10927) * C48551 +
            (C10502 - C10501) * C1010 + (C10504 - C10503) * C48539 +
            (C10506 - C10505) * C1011 + (C10508 - C10507) * C48516) *
               C14988 +
           ((C48122 * C3586 - C8908 * C3583) * C1009 +
            (C48122 * C3592 - C8908 * C3589) * C48551 +
            (C48122 * C10912 - C8908 * C10910) * C1010 +
            (C48122 * C10916 - C8908 * C10913) * C48539 +
            (C48122 * C10914 - C8908 * C10911) * C1011 +
            (C48122 * C10917 - C8908 * C10915) * C48516) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C118 +
            (C48122 * C140 - C8908 * C131) * C48227) *
               C17450 +
           ((C10059 - C10060) * C118 + (C10061 - C10062) * C48227) * C17451 +
           C18118 * C17452 + C18123 * C17453 + C18124 * C17454) *
              C867 +
          (((C10060 - C10059) * C118 + (C10062 - C10061) * C48227) * C17450 +
           ((C10064 - C10063) * C118 + (C10066 - C10065) * C48227) * C17451 +
           ((C10925 - C10926) * C118 + (C10927 - C10928) * C48227) * C17452 +
           ((C17633 - C17632) * C118 + (C17635 - C17634) * C48227) * C17453 +
           ((C18114 - C18115) * C118 + (C18116 - C18117) * C48227) * C17454) *
              C868 +
          (C18118 * C17450 + C18123 * C17451 + C18124 * C17452 +
           ((C18115 - C18114) * C118 + (C18117 - C18116) * C48227) * C17453 +
           ((C48122 * C18104 - C8908 * C18103) * C118 +
            (C48122 * C18106 - C8908 * C18105) * C48227) *
               C17454) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C48461 * C347 - C47223 * C341 + C48132 * C348 - C47204 * C342) *
                C7647 +
            (C48461 * C359 - C47223 * C352 + C48132 * C360 - C47204 * C353) *
                C7641 +
            (C11733 - C11732 + C11735 - C11734) * C7648 +
            (C11737 - C11736 + C11739 - C11738) * C7642 +
            (C11741 - C11740 + C11743 - C11742) * C7649 +
            (C11745 - C11744 + C11747 - C11746) * C48516) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C7647 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C7641 +
            (C11200 - C11201 + C11202 - C11203) * C7648 +
            (C11204 - C11205 + C11206 - C11207) * C7642 +
            (C11208 - C11209 + C11210 - C11211) * C7649 +
            (C11212 - C11213 + C11214 - C11215) * C48516) *
               C48484 +
           ((C47223 * C342 - C48461 * C348 + C47204 * C343 - C48132 * C349) *
                C7647 +
            (C47223 * C353 - C48461 * C360 + C47204 * C354 - C48132 * C361) *
                C7641 +
            (C47223 * C620 - C48461 * C625 + C47204 * C621 - C48132 * C626) *
                C7648 +
            (C47223 * C630 - C48461 * C635 + C47204 * C631 - C48132 * C636) *
                C7642 +
            (C47223 * C1369 - C48461 * C1373 + C47204 * C1370 -
             C48132 * C1374) *
                C7649 +
            (C47223 * C1376 - C48461 * C1381 + C47204 * C1377 -
             C48132 * C1382) *
                C48516) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C7647 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C7641 +
            (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
                C7648 +
            (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
                C7642 +
            (C48461 * C524 - C47223 * C519 + C48132 * C525 - C47204 * C520) *
                C7649 +
            (C48461 * C534 - C47223 * C529 + C48132 * C535 - C47204 * C530) *
                C48516) *
               C48484 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C7647 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C7641 +
            (C48461 * C626 - C47223 * C621 + C48132 * C627 - C47204 * C622) *
                C7648 +
            (C48461 * C636 - C47223 * C631 + C48132 * C637 - C47204 * C632) *
                C7642 +
            (C48461 * C1374 - C47223 * C1370 + C48132 * C1378 -
             C47204 * C1371) *
                C7649 +
            (C48461 * C1382 - C47223 * C1377 + C48132 * C1383 -
             C47204 * C1379) *
                C48516) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
             C3720 * C349 - C3726 * C343 + C48520 * C350 - C3727 * C344) *
                C118 +
            (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
             C3720 * C361 - C3726 * C354 + C48520 * C362 - C3727 * C355) *
                C48227) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C118 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48227) *
               C48484 +
           ((C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
             C3726 * C344 - C3720 * C350 + C3727 * C345 - C48520 * C351) *
                C118 +
            (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
             C3726 * C355 - C3720 * C362 + C3727 * C356 - C48520 * C363) *
                C48227) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
             C3720 * C130 - C3726 * C123 + C48520 * C136 - C3727 * C124) *
                C118 +
            (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
             C3720 * C144 - C3726 * C135 + C48520 * C145 - C3727 * C137) *
                C48227) *
               C48484 +
           ((C3718 * C349 - C3724 * C343 + C3719 * C350 - C3725 * C344 +
             C3720 * C351 - C3726 * C345 + C48520 * C357 - C3727 * C346) *
                C118 +
            (C3718 * C361 - C3724 * C354 + C3719 * C362 - C3725 * C355 +
             C3720 * C363 - C3726 * C356 + C48520 * C364 - C3727 * C358) *
                C48227) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C118 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48227) *
               C19881 +
           ((C12664 - C12665 + C12666 - C12667) * C118 +
            (C12668 - C12669 + C12670 - C12671) * C48227) *
               C19882 +
           (C19777 * C118 + C19778 * C48227) * C19883 +
           ((C19770 - C19769 + C19772 - C19771) * C118 +
            (C19774 - C19773 + C19776 - C19775) * C48227) *
               C48532) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C118 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C48227) *
               C19881 +
           ((C12672 - C12673 + C12674 - C12675) * C118 +
            (C12676 - C12677 + C12678 - C12679) * C48227) *
               C19882 +
           ((C18667 - C18668 + C18669 - C18670) * C118 +
            (C18671 - C18672 + C18673 - C18674) * C48227) *
               C19883 +
           ((C47223 * C2692 - C48461 * C2696 + C47204 * C2693 -
             C48132 * C2697) *
                C118 +
            (C47223 * C2699 - C48461 * C2704 + C47204 * C2700 -
             C48132 * C2705) *
                C48227) *
               C48532) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C118 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C48227) *
               C19881 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C118 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C48227) *
               C19882 +
           ((C48461 * C877 - C47223 * C872 + C48132 * C878 - C47204 * C873) *
                C118 +
            (C48461 * C887 - C47223 * C882 + C48132 * C888 - C47204 * C883) *
                C48227) *
               C19883 +
           ((C48461 * C2697 - C47223 * C2693 + C48132 * C2701 -
             C47204 * C2694) *
                C118 +
            (C48461 * C2705 - C47223 * C2700 + C48132 * C2706 -
             C47204 * C2702) *
                C48227) *
               C48532) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C48461 * C347 - C47223 * C341 + C48132 * C348 - C47204 * C342) *
                 C7647 +
             (C48461 * C359 - C47223 * C352 + C48132 * C360 - C47204 * C353) *
                 C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            ((C11732 - C11733 + C11734 - C11735) * C7647 +
             (C11736 - C11737 + C11738 - C11739) * C7641 +
             (C11740 - C11741 + C11742 - C11743) * C7648 +
             (C11744 - C11745 + C11746 - C11747) * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C47223 * C342 - C48461 * C348 + C47204 * C343 - C48132 * C349) *
                 C7647 +
             (C47223 * C353 - C48461 * C360 + C47204 * C354 - C48132 * C361) *
                 C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C7647 +
             (C11205 - C11204 + C11207 - C11206) * C7641 +
             (C11209 - C11208 + C11211 - C11210) * C7648 +
             (C11213 - C11212 + C11215 - C11214) * C7642 +
             (C11217 - C11216 + C11219 - C11218) * C7649 +
             (C11221 - C11220 + C11223 - C11222) * C48516) *
                C48484 +
            ((C12455 - C12454 + C12457 - C12456) * C7647 +
             (C12459 - C12458 + C12461 - C12460) * C7641 +
             (C12463 - C12462 + C12465 - C12464) * C7648 +
             (C12467 - C12466 + C12469 - C12468) * C7642 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C7649 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
              C3720 * C349 - C3726 * C343 + C48520 * C350 - C3727 * C344) *
                 C118 +
             (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
              C3720 * C361 - C3726 * C354 + C48520 * C362 - C3727 * C355) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
              C3726 * C344 - C3720 * C350 + C3727 * C345 - C48520 * C351) *
                 C118 +
             (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
              C3726 * C355 - C3720 * C362 + C3727 * C356 - C48520 * C363) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                 C118 +
             (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                 C48227) *
                C48484 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48227) *
                C19881 +
            (C13250 * C118 + C13251 * C48227) * C19882 +
            (C19227 * C118 + C19228 * C48227) * C19883 +
            ((C19217 - C19218 + C19219 - C19220) * C118 +
             (C19221 - C19222 + C19223 - C19224) * C48227) *
                C48532) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C118 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48227) *
                C19881 +
            ((C12672 - C12673 + C12674 - C12675) * C118 +
             (C12676 - C12677 + C12678 - C12679) * C48227) *
                C19882 +
            ((C18667 - C18668 + C18669 - C18670) * C118 +
             (C18671 - C18672 + C18673 - C18674) * C48227) *
                C19883 +
            ((C47223 * C2692 - C48461 * C2696 + C47204 * C2693 -
              C48132 * C2697) *
                 C118 +
             (C47223 * C2699 - C48461 * C2704 + C47204 * C2700 -
              C48132 * C2705) *
                 C48227) *
                C48532) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48227) *
                C19881 +
            ((C12455 - C12454 + C12457 - C12456) * C118 +
             (C12459 - C12458 + C12461 - C12460) * C48227) *
                C19882 +
            ((C18466 - C18465 + C18468 - C18467) * C118 +
             (C18470 - C18469 + C18472 - C18471) * C48227) *
                C19883 +
            ((C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C118 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48227) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 +
             (C11732 - C11733 + C11734 - C11735) * C7648 +
             (C11736 - C11737 + C11738 - C11739) * C7642 +
             (C11740 - C11741 + C11742 - C11743) * C7649 +
             (C11744 - C11745 + C11746 - C11747) * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C47223 * C2258 - C48461 * C2264 + C47204 * C2259 -
              C48132 * C2265) *
                 C7648 +
             (C47223 * C2267 - C48461 * C2276 + C47204 * C2268 -
              C48132 * C2277) *
                 C7642 +
             (C47223 * C2261 - C48461 * C2270 + C47204 * C2262 -
              C48132 * C2271) *
                 C7649 +
             (C47223 * C2273 - C48461 * C2279 + C47204 * C2274 -
              C48132 * C2280) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C7647 +
             (C12677 - C12676 + C12679 - C12678) * C7641 +
             (C12455 - C12454 + C12457 - C12456) * C7648 +
             (C12459 - C12458 + C12461 - C12460) * C7642 +
             (C12463 - C12462 + C12465 - C12464) * C7649 +
             (C12467 - C12466 + C12469 - C12468) * C48516) *
                C48484 +
            ((C48461 * C876 - C47223 * C871 + C48132 * C877 - C47204 * C872) *
                 C7647 +
             (C48461 * C886 - C47223 * C881 + C48132 * C887 - C47204 * C882) *
                 C7641 +
             (C48461 * C2265 - C47223 * C2259 + C48132 * C2266 -
              C47204 * C2260) *
                 C7648 +
             (C48461 * C2277 - C47223 * C2268 + C48132 * C2278 -
              C47204 * C2269) *
                 C7642 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C7649 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C339 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C339 +
           (((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                 C118 +
             (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                 C48227) *
                C48484 +
            ((C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
              C3720 * C878 - C3726 * C873 + C48520 * C879 - C3727 * C874) *
                 C118 +
             (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
              C3720 * C888 - C3726 * C883 + C48520 * C889 - C3727 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C118 +
             (C12669 - C12668 + C12671 - C12670) * C48227) *
                C19881 +
            ((C13788 - C13789 + C13790 - C13791) * C118 +
             (C13792 - C13793 + C13794 - C13795) * C48227) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C118 +
             (C19773 - C19774 + C19775 - C19776) * C48227) *
                C19883 +
            ((C47223 * C3583 - C48461 * C3586 + C47204 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C47223 * C3589 - C48461 * C3592 + C47204 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C118 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48227) *
                C19881 +
            ((C12672 - C12673 + C12674 - C12675) * C118 +
             (C12676 - C12677 + C12678 - C12679) * C48227) *
                C19882 +
            ((C18667 - C18668 + C18669 - C18670) * C118 +
             (C18671 - C18672 + C18673 - C18674) * C48227) *
                C19883 +
            ((C20146 - C20147 + C20148 - C20149) * C118 +
             (C20150 - C20151 + C20152 - C20153) * C48227) *
                C48532) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C118 +
             (C12677 - C12676 + C12679 - C12678) * C48227) *
                C19881 +
            ((C18668 - C18667 + C18670 - C18669) * C118 +
             (C18672 - C18671 + C18674 - C18673) * C48227) *
                C19882 +
            ((C20147 - C20146 + C20149 - C20148) * C118 +
             (C20151 - C20150 + C20153 - C20152) * C48227) *
                C19883 +
            ((C48461 * C3587 - C47223 * C3584 + C48132 * C3588 -
              C47204 * C3585) *
                 C118 +
             (C48461 * C3593 - C47223 * C3590 + C48132 * C3594 -
              C47204 * C3591) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            ((C11732 - C11733 + C11734 - C11735) * C7647 +
             (C11736 - C11737 + C11738 - C11739) * C7641 +
             (C11740 - C11741 + C11742 - C11743) * C7648 +
             (C11744 - C11745 + C11746 - C11747) * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C7647 +
             (C11205 - C11204 + C11207 - C11206) * C7641 +
             (C11209 - C11208 + C11211 - C11210) * C7648 +
             (C11213 - C11212 + C11215 - C11214) * C7642 +
             (C11217 - C11216 + C11219 - C11218) * C7649 +
             (C11221 - C11220 + C11223 - C11222) * C48516) *
                C48484 +
            ((C12455 - C12454 + C12457 - C12456) * C7647 +
             (C12459 - C12458 + C12461 - C12460) * C7641 +
             (C12463 - C12462 + C12465 - C12464) * C7648 +
             (C12467 - C12466 + C12469 - C12468) * C7642 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C7649 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                 C118 +
             (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                 C48227) *
                C48484 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48227) *
                C19881 +
            (C13250 * C118 + C13251 * C48227) * C19882 +
            (C19227 * C118 + C19228 * C48227) * C19883 +
            ((C19217 - C19218 + C19219 - C19220) * C118 +
             (C19221 - C19222 + C19223 - C19224) * C48227) *
                C48532) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C118 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48227) *
                C19881 +
            ((C12672 - C12673 + C12674 - C12675) * C118 +
             (C12676 - C12677 + C12678 - C12679) * C48227) *
                C19882 +
            ((C18667 - C18668 + C18669 - C18670) * C118 +
             (C18671 - C18672 + C18673 - C18674) * C48227) *
                C19883 +
            ((C20146 - C20147 + C20148 - C20149) * C118 +
             (C20150 - C20151 + C20152 - C20153) * C48227) *
                C48532) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C118 +
             (C11205 - C11204 + C11207 - C11206) * C48227) *
                C19881 +
            ((C12455 - C12454 + C12457 - C12456) * C118 +
             (C12459 - C12458 + C12461 - C12460) * C48227) *
                C19882 +
            ((C18466 - C18465 + C18468 - C18467) * C118 +
             (C18470 - C18469 + C18472 - C18471) * C48227) *
                C19883 +
            ((C48461 * C3161 - C47223 * C3158 + C48132 * C3162 -
              C47204 * C3159) *
                 C118 +
             (C48461 * C3167 - C47223 * C3164 + C48132 * C3168 -
              C47204 * C3165) *
                 C48227) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C12664 - C12665 + C12666 - C12667) * C7647 +
            (C12668 - C12669 + C12670 - C12671) * C7641 +
            (C11733 - C11732 + C11735 - C11734) * C7648 +
            (C11737 - C11736 + C11739 - C11738) * C7642 + C13024 * C7649 +
            C13025 * C48516) *
               C48326) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C7647 +
            (C11181 - C11180 + C11183 - C11182) * C7641 +
            (C11185 - C11184 + C11187 - C11186) * C7648 +
            (C11189 - C11188 + C11191 - C11190) * C7642 +
            (C11193 - C11192 + C11195 - C11194) * C7649 +
            (C11197 - C11196 + C11199 - C11198) * C48516) *
               C48484 +
           ((C11732 - C11733 + C11734 - C11735) * C7647 +
            (C11736 - C11737 + C11738 - C11739) * C7641 +
            (C11740 - C11741 + C11742 - C11743) * C7648 +
            (C11744 - C11745 + C11746 - C11747) * C7642 +
            (C11748 - C11749 + C11750 - C11751) * C7649 +
            (C11752 - C11753 + C11754 - C11755) * C48516) *
               C48326) *
              C48210 * C514 +
          ((C11598 * C7647 + C11599 * C7641 + C11600 * C7648 + C11601 * C7642 +
            (C11591 - C11590 + C11593 - C11592) * C7649 +
            (C11595 - C11594 + C11597 - C11596) * C48516) *
               C48484 +
           (C13024 * C7647 + C13025 * C7641 +
            (C11749 - C11748 + C11751 - C11750) * C7648 +
            (C11753 - C11752 + C11755 - C11754) * C7642 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C7649 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48516) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C118 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48227) *
               C48326) *
              C48210 * C513 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C118 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48227) *
               C48484 +
           ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C118 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48227) *
               C48326) *
              C48210 * C514 +
          (((C4252 - C4251 + C4254 - C4253 + C4256 - C4255 + C4258 - C4257) *
                C118 +
            (C4260 - C4259 + C4262 - C4261 + C4264 - C4263 + C4266 - C4265) *
                C48227) *
               C48484 +
           ((C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C118 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48227) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C118 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48227) *
               C19881 +
           ((C12664 - C12665 + C12666 - C12667) * C118 +
            (C12668 - C12669 + C12670 - C12671) * C48227) *
               C19882 +
           (C19777 * C118 + C19778 * C48227) * C19883 +
           ((C19770 - C19769 + C19772 - C19771) * C118 +
            (C19774 - C19773 + C19776 - C19775) * C48227) *
               C48532) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C118 +
            (C11181 - C11180 + C11183 - C11182) * C48227) *
               C19881 +
           (C13250 * C118 + C13251 * C48227) * C19882 +
           (C19227 * C118 + C19228 * C48227) * C19883 +
           ((C19217 - C19218 + C19219 - C19220) * C118 +
            (C19221 - C19222 + C19223 - C19224) * C48227) *
               C48532) *
              C48210 * C514 +
          ((C11598 * C118 + C11599 * C48227) * C19881 +
           (C13024 * C118 + C13025 * C48227) * C19882 +
           ((C13241 - C13240 + C13243 - C13242) * C118 +
            (C13245 - C13244 + C13247 - C13246) * C48227) *
               C19883 +
           ((C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
             C47204 * C10051) *
                C118 +
            (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
             C47204 * C10055) *
                C48227) *
               C48532) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            (C13250 * C7647 + C13251 * C7641 + C13252 * C7648 + C13253 * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C339 +
           ((C13248 * C7647 + C13249 * C7641 + C13024 * C7648 + C13025 * C7642 +
             (C11749 - C11748 + C11751 - C11750) * C7649 +
             (C11753 - C11752 + C11755 - C11754) * C48516) *
                C48484 +
            ((C13233 - C13232 + C13235 - C13234) * C7647 +
             (C13237 - C13236 + C13239 - C13238) * C7641 +
             (C13241 - C13240 + C13243 - C13242) * C7648 +
             (C13245 - C13244 + C13247 - C13246) * C7642 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C7649 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C339 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C447 +
          ((((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C339 +
           (((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                 C118 +
             (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                 C48227) *
                C48484 +
            ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
              C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
                 C118 +
             (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
              C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C118 +
             (C12669 - C12668 + C12671 - C12670) * C48227) *
                C19881 +
            ((C13788 - C13789 + C13790 - C13791) * C118 +
             (C13792 - C13793 + C13794 - C13795) * C48227) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C118 +
             (C19773 - C19774 + C19775 - C19776) * C48227) *
                C19883 +
            ((C47223 * C3583 - C48461 * C3586 + C47204 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C47223 * C3589 - C48461 * C3592 + C47204 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48227) *
                C19881 +
            (C13250 * C118 + C13251 * C48227) * C19882 +
            (C19227 * C118 + C19228 * C48227) * C19883 +
            ((C19217 - C19218 + C19219 - C19220) * C118 +
             (C19221 - C19222 + C19223 - C19224) * C48227) *
                C48532) *
               C339 +
           ((C13248 * C118 + C13249 * C48227) * C19881 +
            (C19225 * C118 + C19226 * C48227) * C19882 +
            ((C19218 - C19217 + C19220 - C19219) * C118 +
             (C19222 - C19221 + C19224 - C19223) * C48227) *
                C19883 +
            ((C48461 * C10912 - C47223 * C10910 + C48132 * C17538 -
              C47204 * C17537) *
                 C118 +
             (C48461 * C10916 - C47223 * C10913 + C48132 * C17540 -
              C47204 * C17539) *
                 C48227) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C7647 +
             (C12677 - C12676 + C12679 - C12678) * C7641 +
             (C12455 - C12454 + C12457 - C12456) * C7648 +
             (C12459 - C12458 + C12461 - C12460) * C7642 +
             (C12463 - C12462 + C12465 - C12464) * C7649 +
             (C12467 - C12466 + C12469 - C12468) * C48516) *
                C48484 +
            ((C48461 * C876 - C47223 * C871 + C48132 * C877 - C47204 * C872) *
                 C7647 +
             (C48461 * C886 - C47223 * C881 + C48132 * C887 - C47204 * C882) *
                 C7641 +
             (C48461 * C2265 - C47223 * C2259 + C48132 * C2266 -
              C47204 * C2260) *
                 C7648 +
             (C48461 * C2277 - C47223 * C2268 + C48132 * C2278 -
              C47204 * C2269) *
                 C7642 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C7649 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C721 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C721 +
           (((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                 C118 +
             (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                 C48227) *
                C48484 +
            ((C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
              C3720 * C878 - C3726 * C873 + C48520 * C879 - C3727 * C874) *
                 C118 +
             (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
              C3720 * C888 - C3726 * C883 + C48520 * C889 - C3727 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C118 +
             (C12669 - C12668 + C12671 - C12670) * C48227) *
                C19881 +
            ((C13788 - C13789 + C13790 - C13791) * C118 +
             (C13792 - C13793 + C13794 - C13795) * C48227) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C118 +
             (C19773 - C19774 + C19775 - C19776) * C48227) *
                C19883 +
            ((C47223 * C3583 - C48461 * C3586 + C47204 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C47223 * C3589 - C48461 * C3592 + C47204 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C118 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C48227) *
                C19881 +
            ((C12672 - C12673 + C12674 - C12675) * C118 +
             (C12676 - C12677 + C12678 - C12679) * C48227) *
                C19882 +
            ((C18667 - C18668 + C18669 - C18670) * C118 +
             (C18671 - C18672 + C18673 - C18674) * C48227) *
                C19883 +
            ((C20146 - C20147 + C20148 - C20149) * C118 +
             (C20150 - C20151 + C20152 - C20153) * C48227) *
                C48532) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C118 +
             (C12677 - C12676 + C12679 - C12678) * C48227) *
                C19881 +
            ((C18668 - C18667 + C18670 - C18669) * C118 +
             (C18672 - C18671 + C18674 - C18673) * C48227) *
                C19882 +
            ((C20147 - C20146 + C20149 - C20148) * C118 +
             (C20151 - C20150 + C20153 - C20152) * C48227) *
                C19883 +
            ((C48461 * C3587 - C47223 * C3584 + C48132 * C3588 -
              C47204 * C3585) *
                 C118 +
             (C48461 * C3593 - C47223 * C3590 + C48132 * C3594 -
              C47204 * C3591) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            (C13250 * C7647 + C13251 * C7641 + C13252 * C7648 + C13253 * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C721 +
           ((C13248 * C7647 + C13249 * C7641 + C13024 * C7648 + C13025 * C7642 +
             (C11749 - C11748 + C11751 - C11750) * C7649 +
             (C11753 - C11752 + C11755 - C11754) * C48516) *
                C48484 +
            ((C13233 - C13232 + C13235 - C13234) * C7647 +
             (C13237 - C13236 + C13239 - C13238) * C7641 +
             (C13241 - C13240 + C13243 - C13242) * C7648 +
             (C13245 - C13244 + C13247 - C13246) * C7642 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C7649 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C721 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C229 +
          ((((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C721 +
           (((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                 C118 +
             (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                 C48227) *
                C48484 +
            ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
              C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
                 C118 +
             (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
              C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C118 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C48227) *
                C19881 +
            ((C12664 - C12665 + C12666 - C12667) * C118 +
             (C12668 - C12669 + C12670 - C12671) * C48227) *
                C19882 +
            (C19777 * C118 + C19778 * C48227) * C19883 +
            ((C19770 - C19769 + C19772 - C19771) * C118 +
             (C19774 - C19773 + C19776 - C19775) * C48227) *
                C48532) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C118 +
             (C12669 - C12668 + C12671 - C12670) * C48227) *
                C19881 +
            ((C13788 - C13789 + C13790 - C13791) * C118 +
             (C13792 - C13793 + C13794 - C13795) * C48227) *
                C19882 +
            ((C19769 - C19770 + C19771 - C19772) * C118 +
             (C19773 - C19774 + C19775 - C19776) * C48227) *
                C19883 +
            ((C47223 * C3583 - C48461 * C3586 + C47204 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C47223 * C3589 - C48461 * C3592 + C47204 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C118 +
             (C11181 - C11180 + C11183 - C11182) * C48227) *
                C19881 +
            (C13250 * C118 + C13251 * C48227) * C19882 +
            (C19227 * C118 + C19228 * C48227) * C19883 +
            ((C19217 - C19218 + C19219 - C19220) * C118 +
             (C19221 - C19222 + C19223 - C19224) * C48227) *
                C48532) *
               C721 +
           ((C13248 * C118 + C13249 * C48227) * C19881 +
            (C19225 * C118 + C19226 * C48227) * C19882 +
            ((C19218 - C19217 + C19220 - C19219) * C118 +
             (C19222 - C19221 + C19224 - C19223) * C48227) *
                C19883 +
            ((C48461 * C10912 - C47223 * C10910 + C48132 * C17538 -
              C47204 * C17537) *
                 C118 +
             (C48461 * C10916 - C47223 * C10913 + C48132 * C17540 -
              C47204 * C17539) *
                 C48227) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C12664 - C12665 + C12666 - C12667) * C7647 +
            (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
            C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
               C48326) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C7647 +
            (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
            C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
               C48484 +
           ((C13788 - C13789 + C13790 - C13791) * C7647 +
            (C13792 - C13793 + C13794 - C13795) * C7641 +
            (C13232 - C13233 + C13234 - C13235) * C7648 +
            (C13236 - C13237 + C13238 - C13239) * C7642 +
            (C13240 - C13241 + C13242 - C13243) * C7649 +
            (C13244 - C13245 + C13246 - C13247) * C48516) *
               C48326) *
              C868 +
          (((C13789 - C13788 + C13791 - C13790) * C7647 +
            (C13793 - C13792 + C13795 - C13794) * C7641 +
            (C13233 - C13232 + C13235 - C13234) * C7648 +
            (C13237 - C13236 + C13239 - C13238) * C7642 +
            (C13241 - C13240 + C13243 - C13242) * C7649 +
            (C13245 - C13244 + C13247 - C13246) * C48516) *
               C48484 +
           ((C48461 * C2695 - C47223 * C2691 + C48132 * C2696 -
             C47204 * C2692) *
                C7647 +
            (C48461 * C2703 - C47223 * C2698 + C48132 * C2704 -
             C47204 * C2699) *
                C7641 +
            (C48461 * C3160 - C47223 * C3157 + C48132 * C3161 -
             C47204 * C3158) *
                C7648 +
            (C48461 * C3166 - C47223 * C3163 + C48132 * C3167 -
             C47204 * C3164) *
                C7642 +
            (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
             C47204 * C10051) *
                C7649 +
            (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
             C47204 * C10055) *
                C48516) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C118 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48227) *
               C48326) *
              C867 +
          (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C118 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48227) *
               C48484 +
           ((C5879 - C5880 + C5881 - C5882 + C5883 - C5884 + C5885 - C5886) *
                C118 +
            (C5887 - C5888 + C5889 - C5890 + C5891 - C5892 + C5893 - C5894) *
                C48227) *
               C48326) *
              C868 +
          (((C5880 - C5879 + C5882 - C5881 + C5884 - C5883 + C5886 - C5885) *
                C118 +
            (C5888 - C5887 + C5890 - C5889 + C5892 - C5891 + C5894 - C5893) *
                C48227) *
               C48484 +
           ((C3718 * C2695 - C3724 * C2691 + C3719 * C2696 - C3725 * C2692 +
             C3720 * C2697 - C3726 * C2693 + C48520 * C2701 - C3727 * C2694) *
                C118 +
            (C3718 * C2703 - C3724 * C2698 + C3719 * C2704 - C3725 * C2699 +
             C3720 * C2705 - C3726 * C2700 + C48520 * C2706 - C3727 * C2702) *
                C48227) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C118 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C48227) *
               C19881 +
           ((C12664 - C12665 + C12666 - C12667) * C118 +
            (C12668 - C12669 + C12670 - C12671) * C48227) *
               C19882 +
           C20884 * C19883 + C20889 * C48532) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C118 +
            (C12669 - C12668 + C12671 - C12670) * C48227) *
               C19881 +
           ((C13788 - C13789 + C13790 - C13791) * C118 +
            (C13792 - C13793 + C13794 - C13795) * C48227) *
               C19882 +
           ((C19769 - C19770 + C19771 - C19772) * C118 +
            (C19773 - C19774 + C19775 - C19776) * C48227) *
               C19883 +
           ((C20876 - C20877 + C20878 - C20879) * C118 +
            (C20880 - C20881 + C20882 - C20883) * C48227) *
               C48532) *
              C868 +
          (C20884 * C19881 + C20889 * C19882 +
           ((C20877 - C20876 + C20879 - C20878) * C118 +
            (C20881 - C20880 + C20883 - C20882) * C48227) *
               C19883 +
           ((C48461 * C17625 - C47223 * C17623 + C48132 * C17627 -
             C47204 * C17624) *
                C118 +
            (C48461 * C17629 - C47223 * C17626 + C48132 * C17630 -
             C47204 * C17628) *
                C48227) *
               C48532) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1000 * C239 - C1006 * C233 + C1001 * C240 - C1007 * C234 +
            C48503 * C241 - C1008 * C235) *
               C1010 +
           (C1000 * C251 - C1006 * C244 + C1001 * C252 - C1007 * C245 +
            C48503 * C253 - C1008 * C246) *
               C48539 +
           (C1000 * C522 - C1006 * C517 + C1001 * C523 - C1007 * C518 +
            C48503 * C524 - C1008 * C519) *
               C1011 +
           (C1000 * C532 - C1006 * C527 + C1001 * C533 - C1007 * C528 +
            C48503 * C534 - C1008 * C529) *
               C48516) *
              C48239 * C48210 * C48193 * C110 +
          ((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
            C1008 * C122 - C48503 * C129) *
               C1009 +
           (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
            C1008 * C134 - C48503 * C143) *
               C48551 +
           (C1006 * C234 - C1000 * C240 + C1007 * C235 - C1001 * C241 +
            C1008 * C236 - C48503 * C242) *
               C1010 +
           (C1006 * C245 - C1000 * C252 + C1007 * C246 - C1001 * C253 +
            C1008 * C247 - C48503 * C254) *
               C48539 +
           (C1006 * C518 - C1000 * C523 + C1007 * C519 - C1001 * C524 +
            C1008 * C520 - C48503 * C525) *
               C1011 +
           (C1006 * C528 - C1000 * C533 + C1007 * C529 - C1001 * C534 +
            C1008 * C530 - C48503 * C535) *
               C48516) *
              C48239 * C48210 * C48193 * C111 +
          ((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
            C48503 * C130 - C1008 * C123) *
               C1009 +
           (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
            C48503 * C144 - C1008 * C135) *
               C48551 +
           (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
            C48503 * C243 - C1008 * C237) *
               C1010 +
           (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
            C48503 * C255 - C1008 * C248) *
               C48539 +
           (C1000 * C524 - C1006 * C519 + C1001 * C525 - C1007 * C520 +
            C48503 * C526 - C1008 * C521) *
               C1011 +
           (C1000 * C534 - C1006 * C529 + C1001 * C535 - C1007 * C530 +
            C48503 * C536 - C1008 * C531) *
               C48516) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C48210 * C48193 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C48227) *
              C48239 * C48210 * C48193 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C48227) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C48548 * C239 - C7644 * C233 + C48535 * C240 - C7645 * C234 +
            C48503 * C241 - C7646 * C235) *
               C7648 +
           (C48548 * C251 - C7644 * C244 + C48535 * C252 - C7645 * C245 +
            C48503 * C253 - C7646 * C246) *
               C7642 +
           (C48548 * C522 - C7644 * C517 + C48535 * C523 - C7645 * C518 +
            C48503 * C524 - C7646 * C519) *
               C7649 +
           (C48548 * C532 - C7644 * C527 + C48535 * C533 - C7645 * C528 +
            C48503 * C534 - C7646 * C529) *
               C48516) *
              C48239 * C48210 * C48193 * C110 +
          ((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
            C7646 * C122 - C48503 * C129) *
               C7647 +
           (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
            C7646 * C134 - C48503 * C143) *
               C7641 +
           (C7644 * C234 - C48548 * C240 + C7645 * C235 - C48535 * C241 +
            C7646 * C236 - C48503 * C242) *
               C7648 +
           (C7644 * C245 - C48548 * C252 + C7645 * C246 - C48535 * C253 +
            C7646 * C247 - C48503 * C254) *
               C7642 +
           (C7644 * C518 - C48548 * C523 + C7645 * C519 - C48535 * C524 +
            C7646 * C520 - C48503 * C525) *
               C7649 +
           (C7644 * C528 - C48548 * C533 + C7645 * C529 - C48535 * C534 +
            C7646 * C530 - C48503 * C535) *
               C48516) *
              C48239 * C48210 * C48193 * C111 +
          ((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
            C48503 * C130 - C7646 * C123) *
               C7647 +
           (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
            C48503 * C144 - C7646 * C135) *
               C7641 +
           (C48548 * C241 - C7644 * C235 + C48535 * C242 - C7645 * C236 +
            C48503 * C243 - C7646 * C237) *
               C7648 +
           (C48548 * C253 - C7644 * C246 + C48535 * C254 - C7645 * C247 +
            C48503 * C255 - C7646 * C248) *
               C7642 +
           (C48548 * C524 - C7644 * C519 + C48535 * C525 - C7645 * C520 +
            C48503 * C526 - C7646 * C521) *
               C7649 +
           (C48548 * C534 - C7644 * C529 + C48535 * C535 - C7645 * C530 +
            C48503 * C536 - C7646 * C531) *
               C48516) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 +
           (C48122 * C239 - C8908 * C233) * C8910 +
           (C48122 * C251 - C8908 * C244) * C8904 +
           (C48122 * C522 - C8908 * C517) * C8911 +
           (C48122 * C532 - C8908 * C527) * C8905 +
           (C48122 * C1162 - C8908 * C1158) * C8912 +
           (C48122 * C1170 - C8908 * C1165) * C8906 +
           (C48122 * C1643 - C8908 * C1640) * C8913 +
           (C48122 * C1649 - C8908 * C1646) * C8907) *
              C48239 * C48210 * C48193 * C110 +
          ((C8908 * C120 - C48122 * C127) * C8909 +
           (C8908 * C132 - C48122 * C141) * C8903 +
           (C8908 * C234 - C48122 * C240) * C8910 +
           (C8908 * C245 - C48122 * C252) * C8904 +
           (C8908 * C518 - C48122 * C523) * C8911 +
           (C8908 * C528 - C48122 * C533) * C8905 +
           (C8908 * C1159 - C48122 * C1163) * C8912 +
           (C8908 * C1166 - C48122 * C1171) * C8906 +
           (C8908 * C1641 - C48122 * C1644) * C8913 +
           (C8908 * C1647 - C48122 * C1650) * C8907) *
              C48239 * C48210 * C48193 * C111 +
          ((C48122 * C128 - C8908 * C121) * C8909 +
           (C48122 * C142 - C8908 * C133) * C8903 +
           (C48122 * C241 - C8908 * C235) * C8910 +
           (C48122 * C253 - C8908 * C246) * C8904 +
           (C48122 * C524 - C8908 * C519) * C8911 +
           (C48122 * C534 - C8908 * C529) * C8905 +
           (C48122 * C1164 - C8908 * C1160) * C8912 +
           (C48122 * C1172 - C8908 * C1167) * C8906 +
           (C48122 * C1645 - C8908 * C1642) * C8913 +
           (C48122 * C1651 - C8908 * C1648) * C8907) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C118 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C48227) *
               C14987 +
           ((C48548 * C347 - C7644 * C341 + C48535 * C348 - C7645 * C342 +
             C48503 * C349 - C7646 * C343) *
                C118 +
            (C48548 * C359 - C7644 * C352 + C48535 * C360 - C7645 * C353 +
             C48503 * C361 - C7646 * C354) *
                C48227) *
               C14988 +
           ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
             C48503 * C877 - C7646 * C872) *
                C118 +
            (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
             C48503 * C887 - C7646 * C882) *
                C48227) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C118 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C48227) *
               C14987 +
           ((C7644 * C342 - C48548 * C348 + C7645 * C343 - C48535 * C349 +
             C7646 * C344 - C48503 * C350) *
                C118 +
            (C7644 * C353 - C48548 * C360 + C7645 * C354 - C48535 * C361 +
             C7646 * C355 - C48503 * C362) *
                C48227) *
               C14988 +
           ((C7644 * C871 - C48548 * C876 + C7645 * C872 - C48535 * C877 +
             C7646 * C873 - C48503 * C878) *
                C118 +
            (C7644 * C881 - C48548 * C886 + C7645 * C882 - C48535 * C887 +
             C7646 * C883 - C48503 * C888) *
                C48227) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
             C48503 * C130 - C7646 * C123) *
                C118 +
            (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
             C48503 * C144 - C7646 * C135) *
                C48227) *
               C14987 +
           ((C48548 * C349 - C7644 * C343 + C48535 * C350 - C7645 * C344 +
             C48503 * C351 - C7646 * C345) *
                C118 +
            (C48548 * C361 - C7644 * C354 + C48535 * C362 - C7645 * C355 +
             C48503 * C363 - C7646 * C356) *
                C48227) *
               C14988 +
           ((C48548 * C877 - C7644 * C872 + C48535 * C878 - C7645 * C873 +
             C48503 * C879 - C7646 * C874) *
                C118 +
            (C48548 * C887 - C7644 * C882 + C48535 * C888 - C7645 * C883 +
             C48503 * C889 - C7646 * C884) *
                C48227) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
            C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C1009 +
            (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
            (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
            (C9027 - C9028) * C48516) *
               C14987 +
           ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
            (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
            (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
               C14988 +
           ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
            (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
            (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C1009 +
            (C48122 * C142 - C8908 * C133) * C48551 +
            (C48122 * C241 - C8908 * C235) * C1010 +
            (C48122 * C253 - C8908 * C246) * C48539 +
            (C48122 * C524 - C8908 * C519) * C1011 +
            (C48122 * C534 - C8908 * C529) * C48516) *
               C14987 +
           ((C48122 * C349 - C8908 * C343) * C1009 +
            (C48122 * C361 - C8908 * C354) * C48551 +
            (C48122 * C626 - C8908 * C621) * C1010 +
            (C48122 * C636 - C8908 * C631) * C48539 +
            (C48122 * C1374 - C8908 * C1370) * C1011 +
            (C48122 * C1382 - C8908 * C1377) * C48516) *
               C14988 +
           ((C48122 * C877 - C8908 * C872) * C1009 +
            (C48122 * C887 - C8908 * C882) * C48551 +
            (C48122 * C2266 - C8908 * C2260) * C1010 +
            (C48122 * C2278 - C8908 * C2269) * C48539 +
            (C48122 * C2272 - C8908 * C2263) * C1011 +
            (C48122 * C2281 - C8908 * C2275) * C48516) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C48210 * C229 +
           ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
             C1008 * C1160 - C48503 * C1164) *
                C1011 +
            (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
             C1008 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C48210 * C229 +
           ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
            (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
            (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
            (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
            (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
             C48503 * C1168 - C1008 * C1161) *
                C1011 +
            (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
             C48503 * C1173 - C1008 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C48210 * C229 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C48210 * C229 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48227) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C229 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C229 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C229 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C229 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C48548 * C347 - C7644 * C341 + C48535 * C348 - C7645 * C342 +
              C48503 * C349 - C7646 * C343) *
                 C118 +
             (C48548 * C359 - C7644 * C352 + C48535 * C360 - C7645 * C353 +
              C48503 * C361 - C7646 * C354) *
                 C48227) *
                C14988 +
            ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
              C48503 * C877 - C7646 * C872) *
                 C118 +
             (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
              C48503 * C887 - C7646 * C882) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
              C7646 * C2260 - C48503 * C2266) *
                 C118 +
             (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
              C7646 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C7644 * C342 - C48548 * C348 + C7645 * C343 - C48535 * C349 +
              C7646 * C344 - C48503 * C350) *
                 C118 +
             (C7644 * C353 - C48548 * C360 + C7645 * C354 - C48535 * C361 +
              C7646 * C355 - C48503 * C362) *
                 C48227) *
                C14988 +
            ((C7644 * C871 - C48548 * C876 + C7645 * C872 - C48535 * C877 +
              C7646 * C873 - C48503 * C878) *
                 C118 +
             (C7644 * C881 - C48548 * C886 + C7645 * C882 - C48535 * C887 +
              C7646 * C883 - C48503 * C888) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C118 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C48227) *
                C14987 +
            ((C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
              C48503 * C627 - C7646 * C622) *
                 C118 +
             (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
              C48503 * C637 - C7646 * C632) *
                 C48227) *
                C14988 +
            ((C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C118 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9022 - C9021) * C1009 + (C9024 - C9023) * C48551 +
             (C9026 - C9025) * C1010 + (C9028 - C9027) * C48539 +
             (C9030 - C9029) * C1011 + (C9032 - C9031) * C48516) *
                C14987 +
            ((C9890 - C9889) * C1009 + (C9892 - C9891) * C48551 +
             (C9894 - C9893) * C1010 + (C9896 - C9895) * C48539 +
             (C14025 - C14024) * C1011 + (C14027 - C14026) * C48516) *
                C14988 +
            ((C9898 - C9897) * C1009 + (C9900 - C9899) * C48551 +
             (C9902 - C9901) * C1010 + (C9904 - C9903) * C48539 +
             (C48122 * C9877 - C8908 * C9876) * C1011 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C339 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
             C1008 * C621 - C48503 * C626) *
                C1010 +
            (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
             C1008 * C631 - C48503 * C636) *
                C48539 +
            (C1006 * C1368 - C1000 * C1372 + C1007 * C1369 - C1001 * C1373 +
             C1008 * C1370 - C48503 * C1374) *
                C1011 +
            (C1006 * C1375 - C1000 * C1380 + C1007 * C1376 - C1001 * C1381 +
             C1008 * C1377 - C48503 * C1382) *
                C48516) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C339 +
           ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
             C48503 * C350 - C1008 * C344) *
                C1009 +
            (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
             C48503 * C362 - C1008 * C355) *
                C48551 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48503 * C627 - C1008 * C622) *
                C1010 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48503 * C637 - C1008 * C632) *
                C48539 +
            (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
             C48503 * C1378 - C1008 * C1371) *
                C1011 +
            (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
             C48503 * C1383 - C1008 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C339 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48227) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C7644 * C619 - C48548 * C624 + C7645 * C620 - C48535 * C625 +
             C7646 * C621 - C48503 * C626) *
                C7648 +
            (C7644 * C629 - C48548 * C634 + C7645 * C630 - C48535 * C635 +
             C7646 * C631 - C48503 * C636) *
                C7642 +
            (C7644 * C1368 - C48548 * C1372 + C7645 * C1369 - C48535 * C1373 +
             C7646 * C1370 - C48503 * C1374) *
                C7649 +
            (C7644 * C1375 - C48548 * C1380 + C7645 * C1376 - C48535 * C1381 +
             C7646 * C1377 - C48503 * C1382) *
                C48516) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C339 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 +
            (C8908 * C619 - C48122 * C624) * C8910 +
            (C8908 * C629 - C48122 * C634) * C8904 +
            (C8908 * C1368 - C48122 * C1372) * C8911 +
            (C8908 * C1375 - C48122 * C1380) * C8905 +
            (C8908 * C1820 - C48122 * C1823) * C8912 +
            (C8908 * C1826 - C48122 * C1829) * C8906 +
            (C8908 * C9118 - C48122 * C9120) * C8913 +
            (C8908 * C9121 - C48122 * C9124) * C8907) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C339 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C339 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C118 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C48227) *
                C14987 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C118 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C48227) *
                C14988 +
            ((C48548 * C2696 - C7644 * C2692 + C48535 * C2697 - C7645 * C2693 +
              C48503 * C2701 - C7646 * C2694) *
                 C118 +
             (C48548 * C2704 - C7644 * C2699 + C48535 * C2705 - C7645 * C2700 +
              C48503 * C2706 - C7646 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C339 +
           (((C10068 - C10067) * C1009 + (C10070 - C10069) * C48551 +
             (C9890 - C9889) * C1010 + (C9892 - C9891) * C48539 +
             (C9894 - C9893) * C1011 + (C9896 - C9895) * C48516) *
                C14987 +
            ((C10072 - C10071) * C1009 + (C10074 - C10073) * C48551 +
             (C9898 - C9897) * C1010 + (C9900 - C9899) * C48539 +
             (C9902 - C9901) * C1011 + (C9904 - C9903) * C48516) *
                C14988 +
            ((C48122 * C2696 - C8908 * C2692) * C1009 +
             (C48122 * C2704 - C8908 * C2699) * C48551 +
             (C48122 * C3161 - C8908 * C3158) * C1010 +
             (C48122 * C3167 - C8908 * C3164) * C48539 +
             (C48122 * C10054 - C8908 * C10051) * C1011 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C48210 * C447 +
           ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
             C1008 * C1160 - C48503 * C1164) *
                C1011 +
            (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
             C1008 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C48210 * C447 +
           ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
            (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
            (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
            (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
            (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
             C48503 * C1168 - C1008 * C1161) *
                C1011 +
            (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
             C48503 * C1173 - C1008 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C48210 * C447 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C48210 * C447 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48227) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C447 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C447 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C447 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C447 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
              C7646 * C2260 - C48503 * C2266) *
                 C118 +
             (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
              C7646 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C118 +
             (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C48227) *
                C14987 +
            ((C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
              C48503 * C627 - C7646 * C622) *
                 C118 +
             (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
              C48503 * C637 - C7646 * C632) *
                 C48227) *
                C14988 +
            ((C48548 * C2265 - C7644 * C2259 + C48535 * C2266 - C7645 * C2260 +
              C48503 * C2542 - C7646 * C2541) *
                 C118 +
             (C48548 * C2277 - C7644 * C2268 + C48535 * C2278 - C7645 * C2269 +
              C48503 * C2544 - C7646 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9022 - C9021) * C1009 + (C9024 - C9023) * C48551 +
             (C9026 - C9025) * C1010 + (C9028 - C9027) * C48539 +
             (C9030 - C9029) * C1011 + (C9032 - C9031) * C48516) *
                C14987 +
            ((C9890 - C9889) * C1009 + (C9892 - C9891) * C48551 +
             (C9894 - C9893) * C1010 + (C9896 - C9895) * C48539 +
             (C14025 - C14024) * C1011 + (C14027 - C14026) * C48516) *
                C14988 +
            ((C9898 - C9897) * C1009 + (C9900 - C9899) * C48551 +
             (C9902 - C9901) * C1010 + (C9904 - C9903) * C48539 +
             (C48122 * C9877 - C8908 * C9876) * C1011 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C48210 * C513 +
          ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
           (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
           (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
           (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
           (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
           (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
              C48239 * C48210 * C514 +
          (C1673 * C1009 + C1674 * C48551 +
           (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C1010 +
           (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48539 +
           (C1000 * C1643 - C1006 * C1640 + C1001 * C1644 - C1007 * C1641 +
            C48503 * C1645 - C1008 * C1642) *
               C1011 +
           (C1000 * C1649 - C1006 * C1646 + C1001 * C1650 - C1007 * C1647 +
            C48503 * C1651 - C1008 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C48210 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48227) *
              C48239 * C48210 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48227) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C48210 * C513 +
          ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
           (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
           (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
           (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
           (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
           (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
              C48239 * C48210 * C514 +
          (C8267 * C7647 + C8268 * C7641 +
           (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C7648 +
           (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C7642 +
           (C48548 * C1643 - C7644 * C1640 + C48535 * C1644 - C7645 * C1641 +
            C48503 * C1645 - C7646 * C1642) *
               C7649 +
           (C48548 * C1649 - C7644 * C1646 + C48535 * C1650 - C7645 * C1647 +
            C48503 * C1651 - C7646 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C48210 * C513 +
          ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
           (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
           (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
           (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
           (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
              C48239 * C48210 * C514 +
          (C9275 * C8909 + C9276 * C8903 + C9277 * C8910 + C9278 * C8904 +
           C9279 * C8911 + C9280 * C8905 + (C9282 - C9281) * C8912 +
           (C9284 - C9283) * C8906 + (C48122 * C9271 - C8908 * C9270) * C8913 +
           (C48122 * C9273 - C8908 * C9272) * C8907) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C118 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C48227) *
               C14987 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
               C14988 +
           ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
            (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
               C48519) *
              C48210 * C513 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
               C14987 +
           ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
               C14988 +
           ((C7644 * C2258 - C48548 * C2264 + C7645 * C2259 - C48535 * C2265 +
             C7646 * C2260 - C48503 * C2266) *
                C118 +
            (C7644 * C2267 - C48548 * C2276 + C7645 * C2268 - C48535 * C2277 +
             C7646 * C2269 - C48503 * C2278) *
                C48227) *
               C48519) *
              C48210 * C514 +
          ((C8267 * C118 + C8268 * C48227) * C14987 +
           ((C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C118 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C48227) *
               C14988 +
           ((C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
             C48503 * C2272 - C7646 * C2263) *
                C118 +
            (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
             C48503 * C2281 - C7646 * C2275) *
                C48227) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
            C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
               C48519) *
              C48210 * C513 +
          (((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
            (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
            (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
               C14987 +
           (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
            C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
               C14988 +
           (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
            C10500 * C48539 + (C10335 - C10336) * C1011 +
            (C10337 - C10338) * C48516) *
               C48519) *
              C48210 * C514 +
          ((C9275 * C1009 + C9276 * C48551 + C9277 * C1010 + C9278 * C48539 +
            C9279 * C1011 + C9280 * C48516) *
               C14987 +
           (C10331 * C1009 + C10332 * C48551 + C14386 * C1010 +
            C14387 * C48539 + (C9384 - C9383) * C1011 +
            (C9386 - C9385) * C48516) *
               C14988 +
           (C10333 * C1009 + C10334 * C48551 + (C10336 - C10335) * C1010 +
            (C10338 - C10337) * C48539 +
            (C48122 * C9616 - C8908 * C9613) * C1011 +
            (C48122 * C9619 - C8908 * C9617) * C48516) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C339 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C339 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C447 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C339 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C339 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C447 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C118 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48227) *
                C48519) *
               C339 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48227) *
                C14987 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C118 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48227) *
                C14988 +
            ((C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
              C48503 * C3162 - C7646 * C3159) *
                 C118 +
             (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
              C48503 * C3168 - C7646 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C339 +
           ((C10489 * C1009 + C10490 * C48551 + C10331 * C1010 +
             C10332 * C48539 + C14386 * C1011 + C14387 * C48516) *
                C14987 +
            (C10491 * C1009 + C10492 * C48551 + C10333 * C1010 +
             C10334 * C48539 + (C10336 - C10335) * C1011 +
             (C10338 - C10337) * C48516) *
                C14988 +
            ((C10502 - C10501) * C1009 + (C10504 - C10503) * C48551 +
             (C10506 - C10505) * C1010 + (C10508 - C10507) * C48539 +
             (C48122 * C10485 - C8908 * C10484) * C1011 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C721 +
           ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
             C48503 * C350 - C1008 * C344) *
                C1009 +
            (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
             C48503 * C362 - C1008 * C355) *
                C48551 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48503 * C627 - C1008 * C622) *
                C1010 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48503 * C637 - C1008 * C632) *
                C48539 +
            (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
             C48503 * C1378 - C1008 * C1371) *
                C1011 +
            (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
             C48503 * C1383 - C1008 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48227) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C721 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C721 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
              C7646 * C122 - C48503 * C129) *
                 C118 +
             (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
              C7646 * C134 - C48503 * C143) *
                 C48227) *
                C14987 +
            ((C15307 - C15308 + C15309 - C15310 + C15311 - C15312) * C118 +
             (C15313 - C15314 + C15315 - C15316 + C15317 - C15318) * C48227) *
                C14988 +
            ((C15319 - C15320 + C15321 - C15322 + C15323 - C15324) * C118 +
             (C15325 - C15326 + C15327 - C15328 + C15329 - C15330) * C48227) *
                C48519) *
               C721 +
           (((C15308 - C15307 + C15310 - C15309 + C15312 - C15311) * C118 +
             (C15314 - C15313 + C15316 - C15315 + C15318 - C15317) * C48227) *
                C14987 +
            ((C15320 - C15319 + C15322 - C15321 + C15324 - C15323) * C118 +
             (C15326 - C15325 + C15328 - C15327 + C15330 - C15329) * C48227) *
                C14988 +
            ((C48548 * C2696 - C7644 * C2692 + C48535 * C2697 - C7645 * C2693 +
              C48503 * C2701 - C7646 * C2694) *
                 C118 +
             (C48548 * C2704 - C7644 * C2699 + C48535 * C2705 - C7645 * C2700 +
              C48503 * C2706 - C7646 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C1009 +
             (C8908 * C132 - C48122 * C141) * C48551 + (C9021 - C9022) * C1010 +
             (C9023 - C9024) * C48539 + (C9025 - C9026) * C1011 +
             (C9027 - C9028) * C48516) *
                C14987 +
            ((C10067 - C10068) * C1009 + (C10069 - C10070) * C48551 +
             (C9889 - C9890) * C1010 + (C9891 - C9892) * C48539 +
             (C9893 - C9894) * C1011 + (C9895 - C9896) * C48516) *
                C14988 +
            ((C10071 - C10072) * C1009 + (C10073 - C10074) * C48551 +
             (C9897 - C9898) * C1010 + (C9899 - C9900) * C48539 +
             (C9901 - C9902) * C1011 + (C9903 - C9904) * C48516) *
                C48519) *
               C721 +
           (((C10068 - C10067) * C1009 + (C10070 - C10069) * C48551 +
             (C9890 - C9889) * C1010 + (C9892 - C9891) * C48539 +
             (C9894 - C9893) * C1011 + (C9896 - C9895) * C48516) *
                C14987 +
            ((C10072 - C10071) * C1009 + (C10074 - C10073) * C48551 +
             (C9898 - C9897) * C1010 + (C9900 - C9899) * C48539 +
             (C9902 - C9901) * C1011 + (C9904 - C9903) * C48516) *
                C14988 +
            ((C48122 * C2696 - C8908 * C2692) * C1009 +
             (C48122 * C2704 - C8908 * C2699) * C48551 +
             (C48122 * C3161 - C8908 * C3158) * C1010 +
             (C48122 * C3167 - C8908 * C3164) * C48539 +
             (C48122 * C10054 - C8908 * C10051) * C1011 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C721 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C229 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C721 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
              C48503 * C128 - C7646 * C121) *
                 C118 +
             (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
              C48503 * C142 - C7646 * C133) *
                 C48227) *
                C14987 +
            ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
             (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
                C14988 +
            ((C15295 - C15296 + C15297 - C15298 + C15299 - C15300) * C118 +
             (C15301 - C15302 + C15303 - C15304 + C15305 - C15306) * C48227) *
                C48519) *
               C721 +
           (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
             (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
                C14987 +
            ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
             (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
                C14988 +
            ((C7644 * C2691 - C48548 * C2695 + C7645 * C2692 - C48535 * C2696 +
              C7646 * C2693 - C48503 * C2697) *
                 C118 +
             (C7644 * C2698 - C48548 * C2703 + C7645 * C2699 - C48535 * C2704 +
              C7646 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C229 +
          ((((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C118 +
             (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C48227) *
                C14987 +
            ((C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C118 +
             (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C48227) *
                C14988 +
            ((C15733 - C15734 + C15735 - C15736 + C15737 - C15738) * C118 +
             (C15739 - C15740 + C15741 - C15742 + C15743 - C15744) * C48227) *
                C48519) *
               C721 +
           (((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C118 +
             (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C48227) *
                C14987 +
            ((C15734 - C15733 + C15736 - C15735 + C15738 - C15737) * C118 +
             (C15740 - C15739 + C15742 - C15741 + C15744 - C15743) * C48227) *
                C14988 +
            ((C48548 * C3160 - C7644 * C3157 + C48535 * C3161 - C7645 * C3158 +
              C48503 * C3162 - C7646 * C3159) *
                 C118 +
             (C48548 * C3166 - C7644 * C3163 + C48535 * C3167 - C7645 * C3164 +
              C48503 * C3168 - C7646 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C1009 +
             (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
             (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
                C14987 +
            ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
             C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
             C10332 * C48516) *
                C14988 +
            (C10919 * C1009 + C10920 * C48551 + C10491 * C1010 +
             C10492 * C48539 + C10333 * C1011 + C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
             C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
             C10496 * C48516) *
                C14987 +
            ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
             C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
             C10500 * C48516) *
                C14988 +
            ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
             (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
             (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C1009 + (C9008 - C9007) * C48551 +
             (C9010 - C9009) * C1010 + (C9012 - C9011) * C48539 +
             (C9014 - C9013) * C1011 + (C9016 - C9015) * C48516) *
                C14987 +
            (C10493 * C1009 + C10494 * C48551 + C10495 * C1010 +
             C10496 * C48539 + C14518 * C1011 + C14519 * C48516) *
                C14988 +
            (C10497 * C1009 + C10498 * C48551 + C10499 * C1010 +
             C10500 * C48539 + (C10335 - C10336) * C1011 +
             (C10337 - C10338) * C48516) *
                C48519) *
               C721 +
           ((C10489 * C1009 + C10490 * C48551 + C10331 * C1010 +
             C10332 * C48539 + C14386 * C1011 + C14387 * C48516) *
                C14987 +
            (C10491 * C1009 + C10492 * C48551 + C10333 * C1010 +
             C10334 * C48539 + (C10336 - C10335) * C1011 +
             (C10338 - C10337) * C48516) *
                C14988 +
            ((C10502 - C10501) * C1009 + (C10504 - C10503) * C48551 +
             (C10506 - C10505) * C1010 + (C10508 - C10507) * C48539 +
             (C48122 * C10485 - C8908 * C10484) * C1011 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C867 +
          ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
            C1008 * C343 - C48503 * C349) *
               C1009 +
           (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
            C1008 * C354 - C48503 * C361) *
               C48551 +
           (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
           (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
           (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
           (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
              C48239 * C868 +
          ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
            C48503 * C877 - C1008 * C872) *
               C1009 +
           (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
            C48503 * C887 - C1008 * C882) *
               C48551 +
           (C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
            C48503 * C2266 - C1008 * C2260) *
               C1010 +
           (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
            C48503 * C2278 - C1008 * C2269) *
               C48539 +
           (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
            C48503 * C2272 - C1008 * C2263) *
               C1011 +
           (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
            C48503 * C2281 - C1008 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48227) *
              C48239 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48227) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C867 +
          ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
            C7646 * C343 - C48503 * C349) *
               C7647 +
           (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
            C7646 * C354 - C48503 * C361) *
               C7641 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
           (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
           (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
              C48239 * C868 +
          ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
            C48503 * C877 - C7646 * C872) *
               C7647 +
           (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
            C48503 * C887 - C7646 * C882) *
               C7641 +
           (C48548 * C2264 - C7644 * C2258 + C48535 * C2265 - C7645 * C2259 +
            C48503 * C2266 - C7646 * C2260) *
               C7648 +
           (C48548 * C2276 - C7644 * C2267 + C48535 * C2277 - C7645 * C2268 +
            C48503 * C2278 - C7646 * C2269) *
               C7642 +
           (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
            C48503 * C2272 - C7646 * C2263) *
               C7649 +
           (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
            C48503 * C2281 - C7646 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C867 +
          ((C8908 * C341 - C48122 * C347) * C8909 +
           (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
           (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
           (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
           (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
           (C9385 - C9386) * C8907) *
              C48239 * C868 +
          ((C48122 * C875 - C8908 * C870) * C8909 +
           (C48122 * C885 - C8908 * C880) * C8903 +
           (C48122 * C2264 - C8908 * C2258) * C8910 +
           (C48122 * C2276 - C8908 * C2267) * C8904 +
           (C48122 * C2270 - C8908 * C2261) * C8911 +
           (C48122 * C2279 - C8908 * C2273) * C8905 +
           (C48122 * C9614 - C8908 * C9612) * C8912 +
           (C48122 * C9618 - C8908 * C9615) * C8906 +
           (C48122 * C9616 - C8908 * C9613) * C8913 +
           (C48122 * C9619 - C8908 * C9617) * C8907) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C118 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C48227) *
               C14987 +
           ((C15283 - C15284 + C15285 - C15286 + C15287 - C15288) * C118 +
            (C15289 - C15290 + C15291 - C15292 + C15293 - C15294) * C48227) *
               C14988 +
           C16171 * C48519) *
              C867 +
          (((C15284 - C15283 + C15286 - C15285 + C15288 - C15287) * C118 +
            (C15290 - C15289 + C15292 - C15291 + C15294 - C15293) * C48227) *
               C14987 +
           ((C15296 - C15295 + C15298 - C15297 + C15300 - C15299) * C118 +
            (C15302 - C15301 + C15304 - C15303 + C15306 - C15305) * C48227) *
               C14988 +
           ((C16153 - C16154 + C16155 - C16156 + C16157 - C16158) * C118 +
            (C16159 - C16160 + C16161 - C16162 + C16163 - C16164) * C48227) *
               C48519) *
              C868 +
          (C16171 * C14987 +
           ((C16154 - C16153 + C16156 - C16155 + C16158 - C16157) * C118 +
            (C16160 - C16159 + C16162 - C16161 + C16164 - C16163) * C48227) *
               C14988 +
           ((C48548 * C3586 - C7644 * C3583 + C48535 * C3587 - C7645 * C3584 +
             C48503 * C3588 - C7646 * C3585) *
                C118 +
            (C48548 * C3592 - C7644 * C3589 + C48535 * C3593 - C7645 * C3590 +
             C48503 * C3594 - C7646 * C3591) *
                C48227) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C1009 +
            (C48122 * C140 - C8908 * C131) * C48551 + (C9005 - C9006) * C1010 +
            (C9007 - C9008) * C48539 + C9275 * C1011 + C9276 * C48516) *
               C14987 +
           ((C10059 - C10060) * C1009 + (C10061 - C10062) * C48551 +
            C10489 * C1010 + C10490 * C48539 + C10331 * C1011 +
            C10332 * C48516) *
               C14988 +
           C17388 * C48519) *
              C867 +
          (((C10060 - C10059) * C1009 + (C10062 - C10061) * C48551 +
            C10493 * C1010 + C10494 * C48539 + C10495 * C1011 +
            C10496 * C48516) *
               C14987 +
           ((C10064 - C10063) * C1009 + (C10066 - C10065) * C48551 +
            C10497 * C1010 + C10498 * C48539 + C10499 * C1011 +
            C10500 * C48516) *
               C14988 +
           ((C10925 - C10926) * C1009 + (C10927 - C10928) * C48551 +
            (C10501 - C10502) * C1010 + (C10503 - C10504) * C48539 +
            (C10505 - C10506) * C1011 + (C10507 - C10508) * C48516) *
               C48519) *
              C868 +
          (C17388 * C14987 +
           ((C10926 - C10925) * C1009 + (C10928 - C10927) * C48551 +
            (C10502 - C10501) * C1010 + (C10504 - C10503) * C48539 +
            (C10506 - C10505) * C1011 + (C10508 - C10507) * C48516) *
               C14988 +
           ((C48122 * C3586 - C8908 * C3583) * C1009 +
            (C48122 * C3592 - C8908 * C3589) * C48551 +
            (C48122 * C10912 - C8908 * C10910) * C1010 +
            (C48122 * C10916 - C8908 * C10913) * C48539 +
            (C48122 * C10914 - C8908 * C10911) * C1011 +
            (C48122 * C10917 - C8908 * C10915) * C48516) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C3728 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48483 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C30746 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
            C28477 * C3729 + C28478 * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C3728 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48483 +
            (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C3729 +
            (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
               C30746 +
           ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C3728 +
            (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48483 +
            (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C3729 +
            (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48127 * C128 - C47233 * C121 + C48135 * C129 - C47229 * C122 +
             C26144 * C130 - C47239 * C123) *
                C3728 +
            (C48127 * C142 - C47233 * C133 + C48135 * C143 - C47229 * C134 +
             C26144 * C144 - C47239 * C135) *
                C48483 +
            (C48127 * C241 - C47233 * C235 + C48135 * C242 - C47229 * C236 +
             C26144 * C243 - C47239 * C237) *
                C3729 +
            (C48127 * C253 - C47233 * C246 + C48135 * C254 - C47229 * C247 +
             C26144 * C255 - C47239 * C248) *
                C48286) *
               C30746 +
           ((C48127 * C349 - C47233 * C343 + C48135 * C350 - C47229 * C344 +
             C26144 * C351 - C47239 * C345) *
                C3728 +
            (C48127 * C361 - C47233 * C354 + C48135 * C362 - C47229 * C355 +
             C26144 * C363 - C47239 * C356) *
                C48483 +
            (C48127 * C626 - C47233 * C621 + C48135 * C627 - C47229 * C622 +
             C26144 * C628 - C47239 * C623) *
                C3729 +
            (C48127 * C636 - C47233 * C631 + C48135 * C637 - C47229 * C632 +
             C26144 * C638 - C47239 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C48210 * C229 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C3728 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48483 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C3729 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C30746 +
            (C28479 * C3728 + C28480 * C48483 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C3729 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C3728 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48483 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C3729 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C30746 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C3728 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48483 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C3729 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C3728 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48483 +
             (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C3729 +
             (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48286) *
                C30746 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C3728 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48483 +
             (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 -
              C47229 * C1370 + C26144 * C1378 - C47239 * C1371) *
                 C3729 +
             (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 -
              C47229 * C1377 + C26144 * C1383 - C47239 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C3728 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48483 +
             C28479 * C3729 + C28480 * C48286) *
                C30746 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C3728 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48483 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C3729 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C3728 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48483 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C3729 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C30746 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C3728 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48483 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C3729 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C339 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C3728 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C48483 +
             (C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C3729 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48286) *
                C30746 +
            ((C48127 * C876 - C47233 * C871 + C48135 * C877 - C47229 * C872 +
              C26144 * C878 - C47239 * C873) *
                 C3728 +
             (C48127 * C886 - C47233 * C881 + C48135 * C887 - C47229 * C882 +
              C26144 * C888 - C47239 * C883) *
                 C48483 +
             (C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C3729 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C48210 * C447 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C3728 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48483 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C3729 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C30746 +
            (C28479 * C3728 + C28480 * C48483 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C3729 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C3728 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48483 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C3729 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C30746 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C3728 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48483 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C3729 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C3728 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48483 +
             (C26338 - C26337 + C26340 - C26339 + C26342 - C26341) * C3729 +
             (C26344 - C26343 + C26346 - C26345 + C26348 - C26347) * C48286) *
                C30746 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C3728 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48483 +
             (C48127 * C1373 - C47233 * C1369 + C48135 * C1374 -
              C47229 * C1370 + C26144 * C1378 - C47239 * C1371) *
                 C3729 +
             (C48127 * C1381 - C47233 * C1376 + C48135 * C1382 -
              C47229 * C1377 + C26144 * C1383 - C47239 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C3728 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48483 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C30746 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
            C28477 * C3729 + C28478 * C48286) *
               C48326) *
              C48210 * C513 +
          (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C3728 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48483 +
            (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C3729 +
            (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
               C30746 +
           (C28479 * C3728 + C28480 * C48483 +
            (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C3729 +
            (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C26771 * C3728 + C26772 * C48483 +
            (C26758 - C26757 + C26760 - C26759 + C26762 - C26761) * C3729 +
            (C26764 - C26763 + C26766 - C26765 + C26768 - C26767) * C48286) *
               C30746 +
           ((C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C3728 +
            (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48483 +
            (C48127 * C1823 - C47233 * C1820 + C48135 * C1824 - C47229 * C1821 +
             C26144 * C1825 - C47239 * C1822) *
                C3729 +
            (C48127 * C1829 - C47233 * C1826 + C48135 * C1830 - C47229 * C1827 +
             C26144 * C1831 - C47239 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C3728 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48483 +
             C28479 * C3729 + C28480 * C48286) *
                C30746 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C3728 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48483 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C3729 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C3728 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48483 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C3729 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C30746 +
            (C28479 * C3728 + C28480 * C48483 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C3729 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C339 +
           ((C28477 * C3728 + C28478 * C48483 +
             (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C3729 +
             (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48286) *
                C30746 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C3728 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48483 +
             (C48127 * C2270 - C47233 * C2261 + C48135 * C2271 -
              C47229 * C2262 + C26144 * C2272 - C47239 * C2263) *
                 C3729 +
             (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 -
              C47229 * C2274 + C26144 * C2281 - C47239 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C3728 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48483 +
             C28479 * C3729 + C28480 * C48286) *
                C30746 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C3728 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48483 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C3729 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C3728 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48483 +
             (C26325 - C26326 + C26327 - C26328 + C26329 - C26330) * C3729 +
             (C26331 - C26332 + C26333 - C26334 + C26335 - C26336) * C48286) *
                C30746 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C3728 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48483 +
             (C27685 - C27686 + C27687 - C27688 + C27689 - C27690) * C3729 +
             (C27691 - C27692 + C27693 - C27694 + C27695 - C27696) * C48286) *
                C48326) *
               C721 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C3728 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C48483 +
             (C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C3729 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48286) *
                C30746 +
            ((C48127 * C876 - C47233 * C871 + C48135 * C877 - C47229 * C872 +
              C26144 * C878 - C47239 * C873) *
                 C3728 +
             (C48127 * C886 - C47233 * C881 + C48135 * C887 - C47229 * C882 +
              C26144 * C888 - C47239 * C883) *
                 C48483 +
             (C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C3729 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C3728 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48483 +
             (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
             (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
                C30746 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
             C28477 * C3729 + C28478 * C48286) *
                C48326) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C3728 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48483 +
             C28479 * C3729 + C28480 * C48286) *
                C30746 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C3728 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48483 +
             (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C3729 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C3728 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48483 +
             (C26314 - C26313 + C26316 - C26315 + C26318 - C26317) * C3729 +
             (C26320 - C26319 + C26322 - C26321 + C26324 - C26323) * C48286) *
                C30746 +
            (C28479 * C3728 + C28480 * C48483 +
             (C26931 - C26932 + C26933 - C26934 + C26935 - C26936) * C3729 +
             (C26937 - C26938 + C26939 - C26940 + C26941 - C26942) * C48286) *
                C48326) *
               C721 +
           ((C28477 * C3728 + C28478 * C48483 +
             (C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C3729 +
             (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48286) *
                C30746 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C3728 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48483 +
             (C48127 * C2270 - C47233 * C2261 + C48135 * C2271 -
              C47229 * C2262 + C26144 * C2272 - C47239 * C2263) *
                 C3729 +
             (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 -
              C47229 * C2274 + C26144 * C2281 - C47239 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C3728 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48483 +
            (C26301 - C26302 + C26303 - C26304 + C26305 - C26306) * C3729 +
            (C26307 - C26308 + C26309 - C26310 + C26311 - C26312) * C48286) *
               C30746 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C3728 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48483 +
            C28477 * C3729 + C28478 * C48286) *
               C48326) *
              C867 +
          (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C3728 +
            (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48483 +
            C28479 * C3729 + C28480 * C48286) *
               C30746 +
           ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C3728 +
            (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48483 +
            (C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C3729 +
            (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48286) *
               C48326) *
              C868 +
          (((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C3728 +
            (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48483 +
            (C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C3729 +
            (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48286) *
               C30746 +
           ((C48127 * C2695 - C47233 * C2691 + C48135 * C2696 - C47229 * C2692 +
             C26144 * C2697 - C47239 * C2693) *
                C3728 +
            (C48127 * C2703 - C47233 * C2698 + C48135 * C2704 - C47229 * C2699 +
             C26144 * C2705 - C47239 * C2700) *
                C48483 +
            (C48127 * C3160 - C47233 * C3157 + C48135 * C3161 - C47229 * C3158 +
             C26144 * C3162 - C47239 * C3159) *
                C3729 +
            (C48127 * C3166 - C47233 * C3163 + C48135 * C3167 - C47229 * C3164 +
             C26144 * C3168 - C47239 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C3728 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48483 +
            (C23376 - C23377 + C23378 - C23379) * C3729 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48322 +
           ((C24872 - C24873 + C24874 - C24875) * C3728 +
            (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
            C25471 * C48286) *
               C48329 +
           (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
            C25473 * C48286) *
               C36194) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C3728 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48483 +
            (C23400 - C23401 + C23402 - C23403) * C3729 +
            (C23404 - C23405 + C23406 - C23407) * C48286) *
               C48322 +
           ((C24888 - C24889 + C24890 - C24891) * C3728 +
            (C24892 - C24893 + C24894 - C24895) * C48483 +
            (C24662 - C24663 + C24664 - C24665) * C3729 +
            (C24666 - C24667 + C24668 - C24669) * C48286) *
               C48329 +
           ((C24896 - C24897 + C24898 - C24899) * C3728 +
            (C24900 - C24901 + C24902 - C24903) * C48483 +
            (C24670 - C24671 + C24672 - C24673) * C3729 +
            (C24674 - C24675 + C24676 - C24677) * C48286) *
               C36194) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C3728 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C48483 +
            (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
                C3729 +
            (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
                C48286) *
               C48322 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C3728 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C48483 +
            (C23233 * C626 - C23239 * C621 + C48132 * C627 - C23240 * C622) *
                C3729 +
            (C23233 * C636 - C23239 * C631 + C48132 * C637 - C23240 * C632) *
                C48286) *
               C48329 +
           ((C23233 * C877 - C23239 * C872 + C48132 * C878 - C23240 * C873) *
                C3728 +
            (C23233 * C887 - C23239 * C882 + C48132 * C888 - C23240 * C883) *
                C48483 +
            (C23233 * C2266 - C23239 * C2260 + C48132 * C2542 -
             C23240 * C2541) *
                C3729 +
            (C23233 * C2278 - C23239 * C2269 + C48132 * C2544 -
             C23240 * C2543) *
                C48286) *
               C36194) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C3728 +
             (C23381 - C23380 + C23383 - C23382) * C48483 +
             (C23385 - C23384 + C23387 - C23386) * C3729 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48322 +
            (C25474 * C3728 + C25475 * C48483 + C30113 * C3729 +
             C30114 * C48286) *
                C48329 +
            (C25476 * C3728 + C25477 * C48483 +
             (C25244 - C25245 + C25246 - C25247) * C3729 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C36194) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C3728 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48483 +
             (C23400 - C23401 + C23402 - C23403) * C3729 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48322 +
            ((C24888 - C24889 + C24890 - C24891) * C3728 +
             (C24892 - C24893 + C24894 - C24895) * C48483 +
             (C24662 - C24663 + C24664 - C24665) * C3729 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48329 +
            ((C24896 - C24897 + C24898 - C24899) * C3728 +
             (C24900 - C24901 + C24902 - C24903) * C48483 +
             (C24670 - C24671 + C24672 - C24673) * C3729 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C36194) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C3728 +
             (C23405 - C23404 + C23407 - C23406) * C48483 +
             (C23409 - C23408 + C23411 - C23410) * C3729 +
             (C23413 - C23412 + C23415 - C23414) * C48286) *
                C48322 +
            ((C24663 - C24662 + C24665 - C24664) * C3728 +
             (C24667 - C24666 + C24669 - C24668) * C48483 +
             (C29368 - C29367 + C29370 - C29369) * C3729 +
             (C29372 - C29371 + C29374 - C29373) * C48286) *
                C48329 +
            ((C24671 - C24670 + C24673 - C24672) * C3728 +
             (C24675 - C24674 + C24677 - C24676) * C48483 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C3729 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48286) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C3728 +
             (C24877 - C24876 + C24879 - C24878) * C48483 + C25474 * C3729 +
             C25475 * C48286) *
                C48322 +
            ((C24881 - C24880 + C24883 - C24882) * C3728 +
             (C24885 - C24884 + C24887 - C24886) * C48483 + C25476 * C3729 +
             C25477 * C48286) *
                C48329 +
            ((C26018 - C26019 + C26020 - C26021) * C3728 +
             (C26022 - C26023 + C26024 - C26025) * C48483 +
             (C25462 - C25463 + C25464 - C25465) * C3729 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C36194) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C3728 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48483 +
             (C23400 - C23401 + C23402 - C23403) * C3729 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48322 +
            ((C24888 - C24889 + C24890 - C24891) * C3728 +
             (C24892 - C24893 + C24894 - C24895) * C48483 +
             (C24662 - C24663 + C24664 - C24665) * C3729 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48329 +
            ((C24896 - C24897 + C24898 - C24899) * C3728 +
             (C24900 - C24901 + C24902 - C24903) * C48483 +
             (C24670 - C24671 + C24672 - C24673) * C3729 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C36194) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C3728 +
             (C24893 - C24892 + C24895 - C24894) * C48483 +
             (C24663 - C24662 + C24665 - C24664) * C3729 +
             (C24667 - C24666 + C24669 - C24668) * C48286) *
                C48322 +
            ((C24897 - C24896 + C24899 - C24898) * C3728 +
             (C24901 - C24900 + C24903 - C24902) * C48483 +
             (C24671 - C24670 + C24673 - C24672) * C3729 +
             (C24675 - C24674 + C24677 - C24676) * C48286) *
                C48329 +
            ((C33738 - C33737 + C33740 - C33739) * C3728 +
             (C33742 - C33741 + C33744 - C33743) * C48483 +
             (C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C3729 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48286) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C3728 +
             (C23381 - C23380 + C23383 - C23382) * C48483 +
             (C23385 - C23384 + C23387 - C23386) * C3729 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48322 +
            (C25474 * C3728 + C25475 * C48483 + C30113 * C3729 +
             C30114 * C48286) *
                C48329 +
            (C25476 * C3728 + C25477 * C48483 +
             (C25244 - C25245 + C25246 - C25247) * C3729 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C36194) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C3728 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48483 +
             (C23400 - C23401 + C23402 - C23403) * C3729 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48322 +
            ((C24888 - C24889 + C24890 - C24891) * C3728 +
             (C24892 - C24893 + C24894 - C24895) * C48483 +
             (C24662 - C24663 + C24664 - C24665) * C3729 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48329 +
            ((C24896 - C24897 + C24898 - C24899) * C3728 +
             (C24900 - C24901 + C24902 - C24903) * C48483 +
             (C24670 - C24671 + C24672 - C24673) * C3729 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C36194) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C3728 +
             (C23405 - C23404 + C23407 - C23406) * C48483 +
             (C23409 - C23408 + C23411 - C23410) * C3729 +
             (C23413 - C23412 + C23415 - C23414) * C48286) *
                C48322 +
            ((C24663 - C24662 + C24665 - C24664) * C3728 +
             (C24667 - C24666 + C24669 - C24668) * C48483 +
             (C29368 - C29367 + C29370 - C29369) * C3729 +
             (C29372 - C29371 + C29374 - C29373) * C48286) *
                C48329 +
            ((C24671 - C24670 + C24673 - C24672) * C3728 +
             (C24675 - C24674 + C24677 - C24676) * C48483 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C3729 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48286) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C3728 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48483 +
            (C23376 - C23377 + C23378 - C23379) * C3729 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48322 +
           ((C24872 - C24873 + C24874 - C24875) * C3728 +
            (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
            C25471 * C48286) *
               C48329 +
           (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
            C25473 * C48286) *
               C36194) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C3728 +
            (C23381 - C23380 + C23383 - C23382) * C48483 +
            (C23385 - C23384 + C23387 - C23386) * C3729 +
            (C23389 - C23388 + C23391 - C23390) * C48286) *
               C48322 +
           (C25474 * C3728 + C25475 * C48483 + C30113 * C3729 +
            C30114 * C48286) *
               C48329 +
           (C25476 * C3728 + C25477 * C48483 +
            (C25244 - C25245 + C25246 - C25247) * C3729 +
            (C25248 - C25249 + C25250 - C25251) * C48286) *
               C36194) *
              C48210 * C514 +
          ((C23798 * C3728 + C23799 * C48483 + C23800 * C3729 +
            C23801 * C48286) *
               C48322 +
           (C29913 * C3728 + C29914 * C48483 +
            (C23949 - C23948 + C23951 - C23950) * C3729 +
            (C23953 - C23952 + C23955 - C23954) * C48286) *
               C48329 +
           ((C25245 - C25244 + C25247 - C25246) * C3728 +
            (C25249 - C25248 + C25251 - C25250) * C48483 +
            (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
             C23240 * C9876) *
                C3729 +
            (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
             C23240 * C9878) *
                C48286) *
               C36194) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C3728 +
             (C24877 - C24876 + C24879 - C24878) * C48483 + C25474 * C3729 +
             C25475 * C48286) *
                C48322 +
            ((C24881 - C24880 + C24883 - C24882) * C3728 +
             (C24885 - C24884 + C24887 - C24886) * C48483 + C25476 * C3729 +
             C25477 * C48286) *
                C48329 +
            ((C26018 - C26019 + C26020 - C26021) * C3728 +
             (C26022 - C26023 + C26024 - C26025) * C48483 +
             (C25462 - C25463 + C25464 - C25465) * C3729 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C36194) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C3728 +
             (C23381 - C23380 + C23383 - C23382) * C48483 +
             (C23385 - C23384 + C23387 - C23386) * C3729 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48322 +
            (C25474 * C3728 + C25475 * C48483 + C30113 * C3729 +
             C30114 * C48286) *
                C48329 +
            (C25476 * C3728 + C25477 * C48483 +
             (C25244 - C25245 + C25246 - C25247) * C3729 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C36194) *
               C339 +
           ((C25470 * C3728 + C25471 * C48483 + C29913 * C3729 +
             C29914 * C48286) *
                C48322 +
            (C25472 * C3728 + C25473 * C48483 +
             (C25245 - C25244 + C25247 - C25246) * C3729 +
             (C25249 - C25248 + C25251 - C25250) * C48286) *
                C48329 +
            ((C25463 - C25462 + C25465 - C25464) * C3728 +
             (C25467 - C25466 + C25469 - C25468) * C48483 +
             (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
              C23240 * C10051) *
                 C3729 +
             (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
              C23240 * C10055) *
                 C48286) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C3728 +
             (C24877 - C24876 + C24879 - C24878) * C48483 + C25474 * C3729 +
             C25475 * C48286) *
                C48322 +
            ((C24881 - C24880 + C24883 - C24882) * C3728 +
             (C24885 - C24884 + C24887 - C24886) * C48483 + C25476 * C3729 +
             C25477 * C48286) *
                C48329 +
            ((C26018 - C26019 + C26020 - C26021) * C3728 +
             (C26022 - C26023 + C26024 - C26025) * C48483 +
             (C25462 - C25463 + C25464 - C25465) * C3729 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C36194) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C3728 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48483 +
             (C23400 - C23401 + C23402 - C23403) * C3729 +
             (C23404 - C23405 + C23406 - C23407) * C48286) *
                C48322 +
            ((C24888 - C24889 + C24890 - C24891) * C3728 +
             (C24892 - C24893 + C24894 - C24895) * C48483 +
             (C24662 - C24663 + C24664 - C24665) * C3729 +
             (C24666 - C24667 + C24668 - C24669) * C48286) *
                C48329 +
            ((C24896 - C24897 + C24898 - C24899) * C3728 +
             (C24900 - C24901 + C24902 - C24903) * C48483 +
             (C24670 - C24671 + C24672 - C24673) * C3729 +
             (C24674 - C24675 + C24676 - C24677) * C48286) *
                C36194) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C3728 +
             (C24893 - C24892 + C24895 - C24894) * C48483 +
             (C24663 - C24662 + C24665 - C24664) * C3729 +
             (C24667 - C24666 + C24669 - C24668) * C48286) *
                C48322 +
            ((C24897 - C24896 + C24899 - C24898) * C3728 +
             (C24901 - C24900 + C24903 - C24902) * C48483 +
             (C24671 - C24670 + C24673 - C24672) * C3729 +
             (C24675 - C24674 + C24677 - C24676) * C48286) *
                C48329 +
            ((C33738 - C33737 + C33740 - C33739) * C3728 +
             (C33742 - C33741 + C33744 - C33743) * C48483 +
             (C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C3729 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48286) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C3728 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48483 +
             (C23376 - C23377 + C23378 - C23379) * C3729 +
             (C23380 - C23381 + C23382 - C23383) * C48286) *
                C48322 +
            ((C24872 - C24873 + C24874 - C24875) * C3728 +
             (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
             C25471 * C48286) *
                C48329 +
            (C26026 * C3728 + C26027 * C48483 + C25472 * C3729 +
             C25473 * C48286) *
                C36194) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C3728 +
             (C24877 - C24876 + C24879 - C24878) * C48483 + C25474 * C3729 +
             C25475 * C48286) *
                C48322 +
            ((C24881 - C24880 + C24883 - C24882) * C3728 +
             (C24885 - C24884 + C24887 - C24886) * C48483 + C25476 * C3729 +
             C25477 * C48286) *
                C48329 +
            ((C26018 - C26019 + C26020 - C26021) * C3728 +
             (C26022 - C26023 + C26024 - C26025) * C48483 +
             (C25462 - C25463 + C25464 - C25465) * C3729 +
             (C25466 - C25467 + C25468 - C25469) * C48286) *
                C36194) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C3728 +
             (C23381 - C23380 + C23383 - C23382) * C48483 +
             (C23385 - C23384 + C23387 - C23386) * C3729 +
             (C23389 - C23388 + C23391 - C23390) * C48286) *
                C48322 +
            (C25474 * C3728 + C25475 * C48483 + C30113 * C3729 +
             C30114 * C48286) *
                C48329 +
            (C25476 * C3728 + C25477 * C48483 +
             (C25244 - C25245 + C25246 - C25247) * C3729 +
             (C25248 - C25249 + C25250 - C25251) * C48286) *
                C36194) *
               C721 +
           ((C25470 * C3728 + C25471 * C48483 + C29913 * C3729 +
             C29914 * C48286) *
                C48322 +
            (C25472 * C3728 + C25473 * C48483 +
             (C25245 - C25244 + C25247 - C25246) * C3729 +
             (C25249 - C25248 + C25251 - C25250) * C48286) *
                C48329 +
            ((C25463 - C25462 + C25465 - C25464) * C3728 +
             (C25467 - C25466 + C25469 - C25468) * C48483 +
             (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
              C23240 * C10051) *
                 C3729 +
             (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
              C23240 * C10055) *
                 C48286) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C3728 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48483 +
            (C23376 - C23377 + C23378 - C23379) * C3729 +
            (C23380 - C23381 + C23382 - C23383) * C48286) *
               C48322 +
           ((C24872 - C24873 + C24874 - C24875) * C3728 +
            (C24876 - C24877 + C24878 - C24879) * C48483 + C25470 * C3729 +
            C25471 * C48286) *
               C48329 +
           C38937 * C36194) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C3728 +
            (C24877 - C24876 + C24879 - C24878) * C48483 + C25474 * C3729 +
            C25475 * C48286) *
               C48322 +
           ((C24881 - C24880 + C24883 - C24882) * C3728 +
            (C24885 - C24884 + C24887 - C24886) * C48483 + C25476 * C3729 +
            C25477 * C48286) *
               C48329 +
           ((C26018 - C26019 + C26020 - C26021) * C3728 +
            (C26022 - C26023 + C26024 - C26025) * C48483 +
            (C25462 - C25463 + C25464 - C25465) * C3729 +
            (C25466 - C25467 + C25468 - C25469) * C48286) *
               C36194) *
              C868 +
          (C38937 * C48322 +
           (C34476 * C3728 + C34477 * C48483 +
            (C25463 - C25462 + C25465 - C25464) * C3729 +
            (C25467 - C25466 + C25469 - C25468) * C48286) *
               C48329 +
           ((C34468 - C34467 + C34470 - C34469) * C3728 +
            (C34472 - C34471 + C34474 - C34473) * C48483 +
            (C23233 * C10912 - C23239 * C10910 + C48132 * C17538 -
             C23240 * C17537) *
                C3729 +
            (C23233 * C10916 - C23239 * C10913 + C48132 * C17540 -
             C23240 * C17539) *
                C48286) *
               C36194) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C1009 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48551 +
            (C23400 - C23401 + C23402 - C23403) * C1010 +
            (C23404 - C23405 + C23406 - C23407) * C48539 +
            (C23408 - C23409 + C23410 - C23411) * C1011 +
            (C23412 - C23413 + C23414 - C23415) * C48516) *
               C30746 +
           ((C24888 - C24889 + C24890 - C24891) * C1009 +
            (C24892 - C24893 + C24894 - C24895) * C48551 +
            (C24662 - C24663 + C24664 - C24665) * C1010 +
            (C24666 - C24667 + C24668 - C24669) * C48539 +
            (C29367 - C29368 + C29369 - C29370) * C1011 +
            (C29371 - C29372 + C29373 - C29374) * C48516) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C1009 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C48551 +
            (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
                C1010 +
            (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
                C48539 +
            (C23233 * C524 - C23239 * C519 + C48132 * C525 - C23240 * C520) *
                C1011 +
            (C23233 * C534 - C23239 * C529 + C48132 * C535 - C23240 * C530) *
                C48516) *
               C30746 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C1009 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C48551 +
            (C23233 * C626 - C23239 * C621 + C48132 * C627 - C23240 * C622) *
                C1010 +
            (C23233 * C636 - C23239 * C631 + C48132 * C637 - C23240 * C632) *
                C48539 +
            (C23233 * C1374 - C23239 * C1370 + C48132 * C1378 -
             C23240 * C1371) *
                C1011 +
            (C23233 * C1382 - C23239 * C1377 + C48132 * C1383 -
             C23240 * C1379) *
                C48516) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C48557 * C347 - C22089 * C341 + C48550 * C348 - C22090 * C342 +
             C48537 * C349 - C22091 * C343 + C48520 * C350 - C22092 * C344) *
                C118 +
            (C48557 * C359 - C22089 * C352 + C48550 * C360 - C22090 * C353 +
             C48537 * C361 - C22091 * C354 + C48520 * C362 - C22092 * C355) *
                C48227) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C118 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C48227) *
               C30746 +
           ((C22089 * C342 - C48557 * C348 + C22090 * C343 - C48550 * C349 +
             C22091 * C344 - C48537 * C350 + C22092 * C345 - C48520 * C351) *
                C118 +
            (C22089 * C353 - C48557 * C360 + C22090 * C354 - C48550 * C361 +
             C22091 * C355 - C48537 * C362 + C22092 * C356 - C48520 * C363) *
                C48227) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48557 * C128 - C22089 * C121 + C48550 * C129 - C22090 * C122 +
             C48537 * C130 - C22091 * C123 + C48520 * C136 - C22092 * C124) *
                C118 +
            (C48557 * C142 - C22089 * C133 + C48550 * C143 - C22090 * C134 +
             C48537 * C144 - C22091 * C135 + C48520 * C145 - C22092 * C137) *
                C48227) *
               C30746 +
           ((C48557 * C349 - C22089 * C343 + C48550 * C350 - C22090 * C344 +
             C48537 * C351 - C22091 * C345 + C48520 * C357 - C22092 * C346) *
                C118 +
            (C48557 * C361 - C22089 * C354 + C48550 * C362 - C22090 * C355 +
             C48537 * C363 - C22091 * C356 + C48520 * C364 - C22092 * C358) *
                C48227) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C118 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48227) *
               C48559 +
           ((C24872 - C24873 + C24874 - C24875) * C118 +
            (C24876 - C24877 + C24878 - C24879) * C48227) *
               C48556 +
           (C26026 * C118 + C26027 * C48227) * C48547 +
           ((C26019 - C26018 + C26021 - C26020) * C118 +
            (C26023 - C26022 + C26025 - C26024) * C48227) *
               C48532) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C118 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48227) *
               C48559 +
           ((C24888 - C24889 + C24890 - C24891) * C118 +
            (C24892 - C24893 + C24894 - C24895) * C48227) *
               C48556 +
           ((C24896 - C24897 + C24898 - C24899) * C118 +
            (C24900 - C24901 + C24902 - C24903) * C48227) *
               C48547 +
           ((C23239 * C2692 - C23233 * C2696 + C23240 * C2693 -
             C48132 * C2697) *
                C118 +
            (C23239 * C2699 - C23233 * C2704 + C23240 * C2700 -
             C48132 * C2705) *
                C48227) *
               C48532) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C118 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C48227) *
               C48559 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C118 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C48227) *
               C48556 +
           ((C23233 * C877 - C23239 * C872 + C48132 * C878 - C23240 * C873) *
                C118 +
            (C23233 * C887 - C23239 * C882 + C48132 * C888 - C23240 * C883) *
                C48227) *
               C48547 +
           ((C23233 * C2697 - C23239 * C2693 + C48132 * C2701 -
             C23240 * C2694) *
                C118 +
            (C23233 * C2705 - C23239 * C2700 + C48132 * C2706 -
             C23240 * C2702) *
                C48227) *
               C48532) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C1009 +
             (C23405 - C23404 + C23407 - C23406) * C48551 +
             (C23409 - C23408 + C23411 - C23410) * C1010 +
             (C23413 - C23412 + C23415 - C23414) * C48539 +
             (C23417 - C23416 + C23419 - C23418) * C1011 +
             (C23421 - C23420 + C23423 - C23422) * C48516) *
                C30746 +
            ((C24663 - C24662 + C24665 - C24664) * C1009 +
             (C24667 - C24666 + C24669 - C24668) * C48551 +
             (C29368 - C29367 + C29370 - C29369) * C1010 +
             (C29372 - C29371 + C29374 - C29373) * C48539 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C1011 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C48557 * C347 - C22089 * C341 + C48550 * C348 - C22090 * C342 +
              C48537 * C349 - C22091 * C343 + C48520 * C350 - C22092 * C344) *
                 C118 +
             (C48557 * C359 - C22089 * C352 + C48550 * C360 - C22090 * C353 +
              C48537 * C361 - C22091 * C354 + C48520 * C362 - C22092 * C355) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C22089 * C342 - C48557 * C348 + C22090 * C343 - C48550 * C349 +
              C22091 * C344 - C48537 * C350 + C22092 * C345 - C48520 * C351) *
                 C118 +
             (C22089 * C353 - C48557 * C360 + C22090 * C354 - C48550 * C361 +
              C22091 * C355 - C48537 * C362 + C22092 * C356 - C48520 * C363) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
              C22248) *
                 C118 +
             (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
              C22256) *
                 C48227) *
                C30746 +
            ((C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
              C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                 C118 +
             (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
              C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C118 +
             (C23381 - C23380 + C23383 - C23382) * C48227) *
                C48559 +
            (C25474 * C118 + C25475 * C48227) * C48556 +
            (C25476 * C118 + C25477 * C48227) * C48547 +
            ((C25462 - C25463 + C25464 - C25465) * C118 +
             (C25466 - C25467 + C25468 - C25469) * C48227) *
                C48532) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C118 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48227) *
                C48559 +
            ((C24888 - C24889 + C24890 - C24891) * C118 +
             (C24892 - C24893 + C24894 - C24895) * C48227) *
                C48556 +
            ((C24896 - C24897 + C24898 - C24899) * C118 +
             (C24900 - C24901 + C24902 - C24903) * C48227) *
                C48547 +
            ((C23239 * C2692 - C23233 * C2696 + C23240 * C2693 -
              C48132 * C2697) *
                 C118 +
             (C23239 * C2699 - C23233 * C2704 + C23240 * C2700 -
              C48132 * C2705) *
                 C48227) *
                C48532) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C118 +
             (C23405 - C23404 + C23407 - C23406) * C48227) *
                C48559 +
            ((C24663 - C24662 + C24665 - C24664) * C118 +
             (C24667 - C24666 + C24669 - C24668) * C48227) *
                C48556 +
            ((C24671 - C24670 + C24673 - C24672) * C118 +
             (C24675 - C24674 + C24677 - C24676) * C48227) *
                C48547 +
            ((C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C118 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48227) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C1009 +
             (C24893 - C24892 + C24895 - C24894) * C48551 +
             (C24663 - C24662 + C24665 - C24664) * C1010 +
             (C24667 - C24666 + C24669 - C24668) * C48539 +
             (C29368 - C29367 + C29370 - C29369) * C1011 +
             (C29372 - C29371 + C29374 - C29373) * C48516) *
                C30746 +
            ((C24897 - C24896 + C24899 - C24898) * C1009 +
             (C24901 - C24900 + C24903 - C24902) * C48551 +
             (C24671 - C24670 + C24673 - C24672) * C1010 +
             (C24675 - C24674 + C24677 - C24676) * C48539 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C1011 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C339 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C339 +
           (((C31026 - C31025 + C31028 - C31027 + C31030 - C31029 + C31032 -
              C31031) *
                 C118 +
             (C31034 - C31033 + C31036 - C31035 + C31038 - C31037 + C31040 -
              C31039) *
                 C48227) *
                C30746 +
            ((C48557 * C876 - C22089 * C871 + C48550 * C877 - C22090 * C872 +
              C48537 * C878 - C22091 * C873 + C48520 * C879 - C22092 * C874) *
                 C118 +
             (C48557 * C886 - C22089 * C881 + C48550 * C887 - C22090 * C882 +
              C48537 * C888 - C22091 * C883 + C48520 * C889 - C22092 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C118 +
             (C24877 - C24876 + C24879 - C24878) * C48227) *
                C48559 +
            ((C24881 - C24880 + C24883 - C24882) * C118 +
             (C24885 - C24884 + C24887 - C24886) * C48227) *
                C48556 +
            ((C26018 - C26019 + C26020 - C26021) * C118 +
             (C26022 - C26023 + C26024 - C26025) * C48227) *
                C48547 +
            ((C23239 * C3583 - C23233 * C3586 + C23240 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C23239 * C3589 - C23233 * C3592 + C23240 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C118 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48227) *
                C48559 +
            ((C24888 - C24889 + C24890 - C24891) * C118 +
             (C24892 - C24893 + C24894 - C24895) * C48227) *
                C48556 +
            ((C24896 - C24897 + C24898 - C24899) * C118 +
             (C24900 - C24901 + C24902 - C24903) * C48227) *
                C48547 +
            ((C33737 - C33738 + C33739 - C33740) * C118 +
             (C33741 - C33742 + C33743 - C33744) * C48227) *
                C48532) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C118 +
             (C24893 - C24892 + C24895 - C24894) * C48227) *
                C48559 +
            ((C24897 - C24896 + C24899 - C24898) * C118 +
             (C24901 - C24900 + C24903 - C24902) * C48227) *
                C48556 +
            ((C33738 - C33737 + C33740 - C33739) * C118 +
             (C33742 - C33741 + C33744 - C33743) * C48227) *
                C48547 +
            ((C23233 * C3587 - C23239 * C3584 + C48132 * C3588 -
              C23240 * C3585) *
                 C118 +
             (C23233 * C3593 - C23239 * C3590 + C48132 * C3594 -
              C23240 * C3591) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C1009 +
             (C23405 - C23404 + C23407 - C23406) * C48551 +
             (C23409 - C23408 + C23411 - C23410) * C1010 +
             (C23413 - C23412 + C23415 - C23414) * C48539 +
             (C23417 - C23416 + C23419 - C23418) * C1011 +
             (C23421 - C23420 + C23423 - C23422) * C48516) *
                C30746 +
            ((C24663 - C24662 + C24665 - C24664) * C1009 +
             (C24667 - C24666 + C24669 - C24668) * C48551 +
             (C29368 - C29367 + C29370 - C29369) * C1010 +
             (C29372 - C29371 + C29374 - C29373) * C48539 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C1011 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
              C22248) *
                 C118 +
             (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
              C22256) *
                 C48227) *
                C30746 +
            ((C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
              C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                 C118 +
             (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
              C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C118 +
             (C23381 - C23380 + C23383 - C23382) * C48227) *
                C48559 +
            (C25474 * C118 + C25475 * C48227) * C48556 +
            (C25476 * C118 + C25477 * C48227) * C48547 +
            ((C25462 - C25463 + C25464 - C25465) * C118 +
             (C25466 - C25467 + C25468 - C25469) * C48227) *
                C48532) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C118 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48227) *
                C48559 +
            ((C24888 - C24889 + C24890 - C24891) * C118 +
             (C24892 - C24893 + C24894 - C24895) * C48227) *
                C48556 +
            ((C24896 - C24897 + C24898 - C24899) * C118 +
             (C24900 - C24901 + C24902 - C24903) * C48227) *
                C48547 +
            ((C33737 - C33738 + C33739 - C33740) * C118 +
             (C33741 - C33742 + C33743 - C33744) * C48227) *
                C48532) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C118 +
             (C23405 - C23404 + C23407 - C23406) * C48227) *
                C48559 +
            ((C24663 - C24662 + C24665 - C24664) * C118 +
             (C24667 - C24666 + C24669 - C24668) * C48227) *
                C48556 +
            ((C24671 - C24670 + C24673 - C24672) * C118 +
             (C24675 - C24674 + C24677 - C24676) * C48227) *
                C48547 +
            ((C23233 * C3161 - C23239 * C3158 + C48132 * C3162 -
              C23240 * C3159) *
                 C118 +
             (C23233 * C3167 - C23239 * C3164 + C48132 * C3168 -
              C23240 * C3165) *
                 C48227) *
                C48532) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C1009 +
            (C23381 - C23380 + C23383 - C23382) * C48551 +
            (C23385 - C23384 + C23387 - C23386) * C1010 +
            (C23389 - C23388 + C23391 - C23390) * C48539 +
            (C23393 - C23392 + C23395 - C23394) * C1011 +
            (C23397 - C23396 + C23399 - C23398) * C48516) *
               C30746 +
           (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
            C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
            (C23952 - C23953 + C23954 - C23955) * C48516) *
               C48326) *
              C48210 * C514 +
          ((C23798 * C1009 + C23799 * C48551 + C23800 * C1010 +
            C23801 * C48539 + (C23791 - C23790 + C23793 - C23792) * C1011 +
            (C23795 - C23794 + C23797 - C23796) * C48516) *
               C30746 +
           (C29913 * C1009 + C29914 * C48551 +
            (C23949 - C23948 + C23951 - C23950) * C1010 +
            (C23953 - C23952 + C23955 - C23954) * C48539 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C1011 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48516) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
             C31016) *
                C118 +
            (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
             C31024) *
                C48227) *
               C48326) *
              C48210 * C513 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C118 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C48227) *
               C30746 +
           ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C118 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48227) *
               C48326) *
              C48210 * C514 +
          (((C22617 - C22616 + C22619 - C22618 + C22621 - C22620 + C22623 -
             C22622) *
                C118 +
            (C22625 - C22624 + C22627 - C22626 + C22629 - C22628 + C22631 -
             C22630) *
                C48227) *
               C30746 +
           ((C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C118 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48227) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C118 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48227) *
               C48559 +
           ((C24872 - C24873 + C24874 - C24875) * C118 +
            (C24876 - C24877 + C24878 - C24879) * C48227) *
               C48556 +
           (C26026 * C118 + C26027 * C48227) * C48547 +
           ((C26019 - C26018 + C26021 - C26020) * C118 +
            (C26023 - C26022 + C26025 - C26024) * C48227) *
               C48532) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C118 +
            (C23381 - C23380 + C23383 - C23382) * C48227) *
               C48559 +
           (C25474 * C118 + C25475 * C48227) * C48556 +
           (C25476 * C118 + C25477 * C48227) * C48547 +
           ((C25462 - C25463 + C25464 - C25465) * C118 +
            (C25466 - C25467 + C25468 - C25469) * C48227) *
               C48532) *
              C48210 * C514 +
          ((C23798 * C118 + C23799 * C48227) * C48559 +
           (C29913 * C118 + C29914 * C48227) * C48556 +
           ((C25245 - C25244 + C25247 - C25246) * C118 +
            (C25249 - C25248 + C25251 - C25250) * C48227) *
               C48547 +
           ((C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
             C23240 * C10051) *
                C118 +
            (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
             C23240 * C10055) *
                C48227) *
               C48532) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C339 +
           ((C25470 * C1009 + C25471 * C48551 + C29913 * C1010 +
             C29914 * C48539 + (C23949 - C23948 + C23951 - C23950) * C1011 +
             (C23953 - C23952 + C23955 - C23954) * C48516) *
                C30746 +
            (C25472 * C1009 + C25473 * C48551 +
             (C25245 - C25244 + C25247 - C25246) * C1010 +
             (C25249 - C25248 + C25251 - C25250) * C48539 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C1011 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C339 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C447 +
          ((((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C339 +
           (((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
              C22768) *
                 C118 +
             (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
              C22776) *
                 C48227) *
                C30746 +
            ((C48557 * C2264 - C22089 * C2258 + C48550 * C2265 -
              C22090 * C2259 + C48537 * C2266 - C22091 * C2260 +
              C48520 * C2542 - C22092 * C2541) *
                 C118 +
             (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 -
              C22090 * C2268 + C48537 * C2278 - C22091 * C2269 +
              C48520 * C2544 - C22092 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C118 +
             (C24877 - C24876 + C24879 - C24878) * C48227) *
                C48559 +
            ((C24881 - C24880 + C24883 - C24882) * C118 +
             (C24885 - C24884 + C24887 - C24886) * C48227) *
                C48556 +
            ((C26018 - C26019 + C26020 - C26021) * C118 +
             (C26022 - C26023 + C26024 - C26025) * C48227) *
                C48547 +
            ((C23239 * C3583 - C23233 * C3586 + C23240 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C23239 * C3589 - C23233 * C3592 + C23240 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C118 +
             (C23381 - C23380 + C23383 - C23382) * C48227) *
                C48559 +
            (C25474 * C118 + C25475 * C48227) * C48556 +
            (C25476 * C118 + C25477 * C48227) * C48547 +
            ((C25462 - C25463 + C25464 - C25465) * C118 +
             (C25466 - C25467 + C25468 - C25469) * C48227) *
                C48532) *
               C339 +
           ((C25470 * C118 + C25471 * C48227) * C48559 +
            (C25472 * C118 + C25473 * C48227) * C48556 +
            ((C25463 - C25462 + C25465 - C25464) * C118 +
             (C25467 - C25466 + C25469 - C25468) * C48227) *
                C48547 +
            ((C23233 * C10912 - C23239 * C10910 + C48132 * C17538 -
              C23240 * C17537) *
                 C118 +
             (C23233 * C10916 - C23239 * C10913 + C48132 * C17540 -
              C23240 * C17539) *
                 C48227) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C1009 +
             (C24893 - C24892 + C24895 - C24894) * C48551 +
             (C24663 - C24662 + C24665 - C24664) * C1010 +
             (C24667 - C24666 + C24669 - C24668) * C48539 +
             (C29368 - C29367 + C29370 - C29369) * C1011 +
             (C29372 - C29371 + C29374 - C29373) * C48516) *
                C30746 +
            ((C24897 - C24896 + C24899 - C24898) * C1009 +
             (C24901 - C24900 + C24903 - C24902) * C48551 +
             (C24671 - C24670 + C24673 - C24672) * C1010 +
             (C24675 - C24674 + C24677 - C24676) * C48539 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C1011 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C721 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C721 +
           (((C31026 - C31025 + C31028 - C31027 + C31030 - C31029 + C31032 -
              C31031) *
                 C118 +
             (C31034 - C31033 + C31036 - C31035 + C31038 - C31037 + C31040 -
              C31039) *
                 C48227) *
                C30746 +
            ((C48557 * C876 - C22089 * C871 + C48550 * C877 - C22090 * C872 +
              C48537 * C878 - C22091 * C873 + C48520 * C879 - C22092 * C874) *
                 C118 +
             (C48557 * C886 - C22089 * C881 + C48550 * C887 - C22090 * C882 +
              C48537 * C888 - C22091 * C883 + C48520 * C889 - C22092 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C118 +
             (C24877 - C24876 + C24879 - C24878) * C48227) *
                C48559 +
            ((C24881 - C24880 + C24883 - C24882) * C118 +
             (C24885 - C24884 + C24887 - C24886) * C48227) *
                C48556 +
            ((C26018 - C26019 + C26020 - C26021) * C118 +
             (C26022 - C26023 + C26024 - C26025) * C48227) *
                C48547 +
            ((C23239 * C3583 - C23233 * C3586 + C23240 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C23239 * C3589 - C23233 * C3592 + C23240 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C118 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48227) *
                C48559 +
            ((C24888 - C24889 + C24890 - C24891) * C118 +
             (C24892 - C24893 + C24894 - C24895) * C48227) *
                C48556 +
            ((C24896 - C24897 + C24898 - C24899) * C118 +
             (C24900 - C24901 + C24902 - C24903) * C48227) *
                C48547 +
            ((C33737 - C33738 + C33739 - C33740) * C118 +
             (C33741 - C33742 + C33743 - C33744) * C48227) *
                C48532) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C118 +
             (C24893 - C24892 + C24895 - C24894) * C48227) *
                C48559 +
            ((C24897 - C24896 + C24899 - C24898) * C118 +
             (C24901 - C24900 + C24903 - C24902) * C48227) *
                C48556 +
            ((C33738 - C33737 + C33740 - C33739) * C118 +
             (C33742 - C33741 + C33744 - C33743) * C48227) *
                C48547 +
            ((C23233 * C3587 - C23239 * C3584 + C48132 * C3588 -
              C23240 * C3585) *
                 C118 +
             (C23233 * C3593 - C23239 * C3590 + C48132 * C3594 -
              C23240 * C3591) *
                 C48227) *
                C48532) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C721 +
           ((C25470 * C1009 + C25471 * C48551 + C29913 * C1010 +
             C29914 * C48539 + (C23949 - C23948 + C23951 - C23950) * C1011 +
             (C23953 - C23952 + C23955 - C23954) * C48516) *
                C30746 +
            (C25472 * C1009 + C25473 * C48551 +
             (C25245 - C25244 + C25247 - C25246) * C1010 +
             (C25249 - C25248 + C25251 - C25250) * C48539 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C1011 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C721 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C229 +
          ((((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C721 +
           (((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
              C22768) *
                 C118 +
             (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
              C22776) *
                 C48227) *
                C30746 +
            ((C48557 * C2264 - C22089 * C2258 + C48550 * C2265 -
              C22090 * C2259 + C48537 * C2266 - C22091 * C2260 +
              C48520 * C2542 - C22092 * C2541) *
                 C118 +
             (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 -
              C22090 * C2268 + C48537 * C2278 - C22091 * C2269 +
              C48520 * C2544 - C22092 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C118 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48227) *
                C48559 +
            ((C24872 - C24873 + C24874 - C24875) * C118 +
             (C24876 - C24877 + C24878 - C24879) * C48227) *
                C48556 +
            (C26026 * C118 + C26027 * C48227) * C48547 +
            ((C26019 - C26018 + C26021 - C26020) * C118 +
             (C26023 - C26022 + C26025 - C26024) * C48227) *
                C48532) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C118 +
             (C24877 - C24876 + C24879 - C24878) * C48227) *
                C48559 +
            ((C24881 - C24880 + C24883 - C24882) * C118 +
             (C24885 - C24884 + C24887 - C24886) * C48227) *
                C48556 +
            ((C26018 - C26019 + C26020 - C26021) * C118 +
             (C26022 - C26023 + C26024 - C26025) * C48227) *
                C48547 +
            ((C23239 * C3583 - C23233 * C3586 + C23240 * C3584 -
              C48132 * C3587) *
                 C118 +
             (C23239 * C3589 - C23233 * C3592 + C23240 * C3590 -
              C48132 * C3593) *
                 C48227) *
                C48532) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C118 +
             (C23381 - C23380 + C23383 - C23382) * C48227) *
                C48559 +
            (C25474 * C118 + C25475 * C48227) * C48556 +
            (C25476 * C118 + C25477 * C48227) * C48547 +
            ((C25462 - C25463 + C25464 - C25465) * C118 +
             (C25466 - C25467 + C25468 - C25469) * C48227) *
                C48532) *
               C721 +
           ((C25470 * C118 + C25471 * C48227) * C48559 +
            (C25472 * C118 + C25473 * C48227) * C48556 +
            ((C25463 - C25462 + C25465 - C25464) * C118 +
             (C25467 - C25466 + C25469 - C25468) * C48227) *
                C48547 +
            ((C23233 * C10912 - C23239 * C10910 + C48132 * C17538 -
              C23240 * C17537) *
                 C118 +
             (C23233 * C10916 - C23239 * C10913 + C48132 * C17540 -
              C23240 * C17539) *
                 C48227) *
                C48532) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C1009 +
            (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
            C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
               C30746 +
           ((C24881 - C24880 + C24883 - C24882) * C1009 +
            (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
            C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
            (C25248 - C25249 + C25250 - C25251) * C48516) *
               C48326) *
              C868 +
          ((C26026 * C1009 + C26027 * C48551 + C25472 * C1010 +
            C25473 * C48539 + (C25245 - C25244 + C25247 - C25246) * C1011 +
            (C25249 - C25248 + C25251 - C25250) * C48516) *
               C30746 +
           ((C26019 - C26018 + C26021 - C26020) * C1009 +
            (C26023 - C26022 + C26025 - C26024) * C48551 +
            (C25463 - C25462 + C25465 - C25464) * C1010 +
            (C25467 - C25466 + C25469 - C25468) * C48539 +
            (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
             C23240 * C10051) *
                C1011 +
            (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
             C23240 * C10055) *
                C48516) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
             C31016) *
                C118 +
            (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
             C31024) *
                C48227) *
               C48326) *
              C867 +
          (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
             C31015) *
                C118 +
            (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
             C31023) *
                C48227) *
               C30746 +
           ((C31757 - C31758 + C31759 - C31760 + C31761 - C31762 + C31763 -
             C31764) *
                C118 +
            (C31765 - C31766 + C31767 - C31768 + C31769 - C31770 + C31771 -
             C31772) *
                C48227) *
               C48326) *
              C868 +
          (((C31758 - C31757 + C31760 - C31759 + C31762 - C31761 + C31764 -
             C31763) *
                C118 +
            (C31766 - C31765 + C31768 - C31767 + C31770 - C31769 + C31772 -
             C31771) *
                C48227) *
               C30746 +
           ((C48557 * C2695 - C22089 * C2691 + C48550 * C2696 - C22090 * C2692 +
             C48537 * C2697 - C22091 * C2693 + C48520 * C2701 -
             C22092 * C2694) *
                C118 +
            (C48557 * C2703 - C22089 * C2698 + C48550 * C2704 - C22090 * C2699 +
             C48537 * C2705 - C22091 * C2700 + C48520 * C2706 -
             C22092 * C2702) *
                C48227) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C118 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48227) *
               C48559 +
           ((C24872 - C24873 + C24874 - C24875) * C118 +
            (C24876 - C24877 + C24878 - C24879) * C48227) *
               C48556 +
           C34475 * C48547 + C34480 * C48532) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C118 +
            (C24877 - C24876 + C24879 - C24878) * C48227) *
               C48559 +
           ((C24881 - C24880 + C24883 - C24882) * C118 +
            (C24885 - C24884 + C24887 - C24886) * C48227) *
               C48556 +
           ((C26018 - C26019 + C26020 - C26021) * C118 +
            (C26022 - C26023 + C26024 - C26025) * C48227) *
               C48547 +
           ((C34467 - C34468 + C34469 - C34470) * C118 +
            (C34471 - C34472 + C34473 - C34474) * C48227) *
               C48532) *
              C868 +
          (C34475 * C48559 + C34480 * C48556 +
           ((C34468 - C34467 + C34470 - C34469) * C118 +
            (C34472 - C34471 + C34474 - C34473) * C48227) *
               C48547 +
           ((C23233 * C17625 - C23239 * C17623 + C48132 * C17627 -
             C23240 * C17624) *
                C118 +
            (C23233 * C17629 - C23239 * C17626 + C48132 * C17630 -
             C23240 * C17628) *
                C48227) *
               C48532) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C118 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48227) *
               C48322 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
               C48329 +
           ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
            (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
               C36194) *
              C48210 * C48193 * C110 +
          (((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
             C47239 * C122 - C26144 * C129) *
                C118 +
            (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
             C47239 * C134 - C26144 * C143) *
                C48227) *
               C48322 +
           ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C118 +
            (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48227) *
               C48329 +
           ((C47233 * C871 - C48127 * C876 + C47229 * C872 - C48135 * C877 +
             C47239 * C873 - C26144 * C878) *
                C118 +
            (C47233 * C881 - C48127 * C886 + C47229 * C882 - C48135 * C887 +
             C47239 * C883 - C26144 * C888) *
                C48227) *
               C36194) *
              C48210 * C48193 * C111 +
          (((C48127 * C128 - C47233 * C121 + C48135 * C129 - C47229 * C122 +
             C26144 * C130 - C47239 * C123) *
                C118 +
            (C48127 * C142 - C47233 * C133 + C48135 * C143 - C47229 * C134 +
             C26144 * C144 - C47239 * C135) *
                C48227) *
               C48322 +
           ((C48127 * C349 - C47233 * C343 + C48135 * C350 - C47229 * C344 +
             C26144 * C351 - C47239 * C345) *
                C118 +
            (C48127 * C361 - C47233 * C354 + C48135 * C362 - C47229 * C355 +
             C26144 * C363 - C47239 * C356) *
                C48227) *
               C48329 +
           ((C48127 * C877 - C47233 * C872 + C48135 * C878 - C47229 * C873 +
             C26144 * C879 - C47239 * C874) *
                C118 +
            (C48127 * C887 - C47233 * C882 + C48135 * C888 - C47229 * C883 +
             C26144 * C889 - C47239 * C884) *
                C48227) *
               C36194) *
              C48210 * C48193 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C48210 * C229 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C118 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48227) *
                C48322 +
            (C28479 * C118 + C28480 * C48227) * C48329 +
            ((C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C118 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48227) *
                C36194) *
               C48210 * C48511) *
              C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C118 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48227) *
                C48322 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C118 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48227) *
                C48329 +
            ((C47233 * C871 - C48127 * C876 + C47229 * C872 - C48135 * C877 +
              C47239 * C873 - C26144 * C878) *
                 C118 +
             (C47233 * C881 - C48127 * C886 + C47229 * C882 - C48135 * C887 +
              C47239 * C883 - C26144 * C888) *
                 C48227) *
                C36194) *
               C48210 * C229 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C118 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48227) *
                C48322 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C118 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48227) *
                C48329 +
            ((C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C118 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48227) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C118 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48227) *
                C48322 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C118 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48227) *
                C48329 +
            ((C47233 * C2691 - C48127 * C2695 + C47229 * C2692 -
              C48135 * C2696 + C47239 * C2693 - C26144 * C2697) *
                 C118 +
             (C47233 * C2698 - C48127 * C2703 + C47229 * C2699 -
              C48135 * C2704 + C47239 * C2700 - C26144 * C2705) *
                 C48227) *
                C36194) *
               C48513) *
              C48193 * C231 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C118 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48227) *
                C48322 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C118 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48227) *
                C48329 +
            ((C36488 - C36489 + C36490 - C36491 + C36492 - C36493) * C118 +
             (C36494 - C36495 + C36496 - C36497 + C36498 - C36499) * C48227) *
                C36194) *
               C339 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C118 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C48227) *
                C48322 +
            ((C36489 - C36488 + C36491 - C36490 + C36493 - C36492) * C118 +
             (C36495 - C36494 + C36497 - C36496 + C36499 - C36498) * C48227) *
                C48329 +
            ((C48127 * C2696 - C47233 * C2692 + C48135 * C2697 -
              C47229 * C2693 + C26144 * C2701 - C47239 * C2694) *
                 C118 +
             (C48127 * C2704 - C47233 * C2699 + C48135 * C2705 -
              C47229 * C2700 + C26144 * C2706 - C47239 * C2702) *
                 C48227) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C48210 * C447 +
           (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C118 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48227) *
                C48322 +
            (C28479 * C118 + C28480 * C48227) * C48329 +
            ((C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C118 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48227) *
                C36194) *
               C48210 * C48511) *
              C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C118 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48227) *
                C48322 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C118 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48227) *
                C48329 +
            ((C36488 - C36489 + C36490 - C36491 + C36492 - C36493) * C118 +
             (C36494 - C36495 + C36496 - C36497 + C36498 - C36499) * C48227) *
                C36194) *
               C48210 * C447 +
           (((C26326 - C26325 + C26328 - C26327 + C26330 - C26329) * C118 +
             (C26332 - C26331 + C26334 - C26333 + C26336 - C26335) * C48227) *
                C48322 +
            ((C27686 - C27685 + C27688 - C27687 + C27690 - C27689) * C118 +
             (C27692 - C27691 + C27694 - C27693 + C27696 - C27695) * C48227) *
                C48329 +
            ((C48127 * C2265 - C47233 * C2259 + C48135 * C2266 -
              C47229 * C2260 + C26144 * C2542 - C47239 * C2541) *
                 C118 +
             (C48127 * C2277 - C47233 * C2268 + C48135 * C2278 -
              C47229 * C2269 + C26144 * C2544 - C47239 * C2543) *
                 C48227) *
                C36194) *
               C48210 * C48511) *
              C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C118 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48227) *
               C48322 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
               C48329 +
           ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
            (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
               C36194) *
              C48210 * C513 +
          (((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C118 +
            (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48227) *
               C48322 +
           (C28479 * C118 + C28480 * C48227) * C48329 +
           ((C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C118 +
            (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48227) *
               C36194) *
              C48210 * C514 +
          ((C26771 * C118 + C26772 * C48227) * C48322 +
           ((C26932 - C26931 + C26934 - C26933 + C26936 - C26935) * C118 +
            (C26938 - C26937 + C26940 - C26939 + C26942 - C26941) * C48227) *
               C48329 +
           ((C48127 * C2270 - C47233 * C2261 + C48135 * C2271 - C47229 * C2262 +
             C26144 * C2272 - C47239 * C2263) *
                C118 +
            (C48127 * C2279 - C47233 * C2273 + C48135 * C2280 - C47229 * C2274 +
             C26144 * C2281 - C47239 * C2275) *
                C48227) *
               C36194) *
              C48210 * C515) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C339 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C118 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48227) *
                C48322 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C118 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48227) *
                C48329 +
            ((C47233 * C2691 - C48127 * C2695 + C47229 * C2692 -
              C48135 * C2696 + C47239 * C2693 - C26144 * C2697) *
                 C118 +
             (C47233 * C2698 - C48127 * C2703 + C47229 * C2699 -
              C48135 * C2704 + C47239 * C2700 - C26144 * C2705) *
                 C48227) *
                C36194) *
               C48513) *
              C447 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C118 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48227) *
                C48322 +
            (C28479 * C118 + C28480 * C48227) * C48329 +
            ((C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C118 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48227) *
                C36194) *
               C339 +
           ((C28477 * C118 + C28478 * C48227) * C48322 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C118 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48227) *
                C48329 +
            ((C48127 * C3160 - C47233 * C3157 + C48135 * C3161 -
              C47229 * C3158 + C26144 * C3162 - C47239 * C3159) *
                 C118 +
             (C48127 * C3166 - C47233 * C3163 + C48135 * C3167 -
              C47229 * C3164 + C26144 * C3168 - C47239 * C3165) *
                 C48227) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C118 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48227) *
                C48322 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C118 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48227) *
                C48329 +
            ((C47233 * C2691 - C48127 * C2695 + C47229 * C2692 -
              C48135 * C2696 + C47239 * C2693 - C26144 * C2697) *
                 C118 +
             (C47233 * C2698 - C48127 * C2703 + C47229 * C2699 -
              C48135 * C2704 + C47239 * C2700 - C26144 * C2705) *
                 C48227) *
                C36194) *
               C48513) *
              C48193 * C449 +
          ((((C47233 * C120 - C48127 * C127 + C47229 * C121 - C48135 * C128 +
              C47239 * C122 - C26144 * C129) *
                 C118 +
             (C47233 * C132 - C48127 * C141 + C47229 * C133 - C48135 * C142 +
              C47239 * C134 - C26144 * C143) *
                 C48227) *
                C48322 +
            ((C27903 - C27904 + C27905 - C27906 + C27907 - C27908) * C118 +
             (C27909 - C27910 + C27911 - C27912 + C27913 - C27914) * C48227) *
                C48329 +
            ((C36488 - C36489 + C36490 - C36491 + C36492 - C36493) * C118 +
             (C36494 - C36495 + C36496 - C36497 + C36498 - C36499) * C48227) *
                C36194) *
               C721 +
           (((C27904 - C27903 + C27906 - C27905 + C27908 - C27907) * C118 +
             (C27910 - C27909 + C27912 - C27911 + C27914 - C27913) * C48227) *
                C48322 +
            ((C36489 - C36488 + C36491 - C36490 + C36493 - C36492) * C118 +
             (C36495 - C36494 + C36497 - C36496 + C36499 - C36498) * C48227) *
                C48329 +
            ((C48127 * C2696 - C47233 * C2692 + C48135 * C2697 -
              C47229 * C2693 + C26144 * C2701 - C47239 * C2694) *
                 C118 +
             (C48127 * C2704 - C47233 * C2699 + C48135 * C2705 -
              C47229 * C2700 + C26144 * C2706 - C47239 * C2702) *
                 C48227) *
                C36194) *
               C48513) *
              C48193 * C48509)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
              C26144 * C128 - C47239 * C121) *
                 C118 +
             (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
              C26144 * C142 - C47239 * C133) *
                 C48227) *
                C48322 +
            ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
             (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
                C48329 +
            ((C29016 - C29015 + C29018 - C29017 + C29020 - C29019) * C118 +
             (C29022 - C29021 + C29024 - C29023 + C29026 - C29025) * C48227) *
                C36194) *
               C721 +
           (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C118 +
             (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48227) *
                C48322 +
            ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C118 +
             (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48227) *
                C48329 +
            ((C47233 * C2691 - C48127 * C2695 + C47229 * C2692 -
              C48135 * C2696 + C47239 * C2693 - C26144 * C2697) *
                 C118 +
             (C47233 * C2698 - C48127 * C2703 + C47229 * C2699 -
              C48135 * C2704 + C47239 * C2700 - C26144 * C2705) *
                 C48227) *
                C36194) *
               C48513) *
              C229 +
          ((((C26302 - C26301 + C26304 - C26303 + C26306 - C26305) * C118 +
             (C26308 - C26307 + C26310 - C26309 + C26312 - C26311) * C48227) *
                C48322 +
            (C28479 * C118 + C28480 * C48227) * C48329 +
            ((C28461 - C28462 + C28463 - C28464 + C28465 - C28466) * C118 +
             (C28467 - C28468 + C28469 - C28470 + C28471 - C28472) * C48227) *
                C36194) *
               C721 +
           ((C28477 * C118 + C28478 * C48227) * C48322 +
            ((C28462 - C28461 + C28464 - C28463 + C28466 - C28465) * C118 +
             (C28468 - C28467 + C28470 - C28469 + C28472 - C28471) * C48227) *
                C48329 +
            ((C48127 * C3160 - C47233 * C3157 + C48135 * C3161 -
              C47229 * C3158 + C26144 * C3162 - C47239 * C3159) *
                 C118 +
             (C48127 * C3166 - C47233 * C3163 + C48135 * C3167 -
              C47229 * C3164 + C26144 * C3168 - C47239 * C3165) *
                 C48227) *
                C36194) *
               C48513) *
              C48511) *
         C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48127 * C126 - C47233 * C119 + C48135 * C127 - C47229 * C120 +
             C26144 * C128 - C47239 * C121) *
                C118 +
            (C48127 * C140 - C47233 * C131 + C48135 * C141 - C47229 * C132 +
             C26144 * C142 - C47239 * C133) *
                C48227) *
               C48322 +
           ((C27891 - C27892 + C27893 - C27894 + C27895 - C27896) * C118 +
            (C27897 - C27898 + C27899 - C27900 + C27901 - C27902) * C48227) *
               C48329 +
           C37328 * C36194) *
              C867 +
          (((C27892 - C27891 + C27894 - C27893 + C27896 - C27895) * C118 +
            (C27898 - C27897 + C27900 - C27899 + C27902 - C27901) * C48227) *
               C48322 +
           ((C29015 - C29016 + C29017 - C29018 + C29019 - C29020) * C118 +
            (C29021 - C29022 + C29023 - C29024 + C29025 - C29026) * C48227) *
               C48329 +
           ((C37310 - C37311 + C37312 - C37313 + C37314 - C37315) * C118 +
            (C37316 - C37317 + C37318 - C37319 + C37320 - C37321) * C48227) *
               C36194) *
              C868 +
          (C37328 * C48322 +
           ((C37311 - C37310 + C37313 - C37312 + C37315 - C37314) * C118 +
            (C37317 - C37316 + C37319 - C37318 + C37321 - C37320) * C48227) *
               C48329 +
           ((C48127 * C3586 - C47233 * C3583 + C48135 * C3587 - C47229 * C3584 +
             C26144 * C3588 - C47239 * C3585) *
                C118 +
            (C48127 * C3592 - C47233 * C3589 + C48135 * C3593 - C47229 * C3590 +
             C26144 * C3594 - C47239 * C3591) *
                C48227) *
               C36194) *
              C869) *
         C48193 * C48159) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C48557 * C347 - C22089 * C341 + C48550 * C348 - C22090 * C342 +
             C48537 * C349 - C22091 * C343 + C48520 * C350 - C22092 * C344) *
                C118 +
            (C48557 * C359 - C22089 * C352 + C48550 * C360 - C22090 * C353 +
             C48537 * C361 - C22091 * C354 + C48520 * C362 - C22092 * C355) *
                C48227) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
             C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                C118 +
            (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
             C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                C48227) *
               C30746 +
           ((C22089 * C342 - C48557 * C348 + C22090 * C343 - C48550 * C349 +
             C22091 * C344 - C48537 * C350 + C22092 * C345 - C48520 * C351) *
                C118 +
            (C22089 * C353 - C48557 * C360 + C22090 * C354 - C48550 * C361 +
             C22091 * C355 - C48537 * C362 + C22092 * C356 - C48520 * C363) *
                C48227) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48557 * C128 - C22089 * C121 + C48550 * C129 - C22090 * C122 +
             C48537 * C130 - C22091 * C123 + C48520 * C136 - C22092 * C124) *
                C118 +
            (C48557 * C142 - C22089 * C133 + C48550 * C143 - C22090 * C134 +
             C48537 * C144 - C22091 * C135 + C48520 * C145 - C22092 * C137) *
                C48227) *
               C30746 +
           ((C48557 * C349 - C22089 * C343 + C48550 * C350 - C22090 * C344 +
             C48537 * C351 - C22091 * C345 + C48520 * C357 - C22092 * C346) *
                C118 +
            (C48557 * C361 - C22089 * C354 + C48550 * C362 - C22090 * C355 +
             C48537 * C363 - C22091 * C356 + C48520 * C364 - C22092 * C358) *
                C48227) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                C1009 +
            (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                C48551 +
            (C23400 - C23401 + C23402 - C23403) * C1010 +
            (C23404 - C23405 + C23406 - C23407) * C48539 +
            (C23408 - C23409 + C23410 - C23411) * C1011 +
            (C23412 - C23413 + C23414 - C23415) * C48516) *
               C30746 +
           ((C24888 - C24889 + C24890 - C24891) * C1009 +
            (C24892 - C24893 + C24894 - C24895) * C48551 +
            (C24662 - C24663 + C24664 - C24665) * C1010 +
            (C24666 - C24667 + C24668 - C24669) * C48539 +
            (C29367 - C29368 + C29369 - C29370) * C1011 +
            (C29371 - C29372 + C29373 - C29374) * C48516) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C23233 * C128 - C23239 * C121 + C48132 * C129 - C23240 * C122) *
                C1009 +
            (C23233 * C142 - C23239 * C133 + C48132 * C143 - C23240 * C134) *
                C48551 +
            (C23233 * C241 - C23239 * C235 + C48132 * C242 - C23240 * C236) *
                C1010 +
            (C23233 * C253 - C23239 * C246 + C48132 * C254 - C23240 * C247) *
                C48539 +
            (C23233 * C524 - C23239 * C519 + C48132 * C525 - C23240 * C520) *
                C1011 +
            (C23233 * C534 - C23239 * C529 + C48132 * C535 - C23240 * C530) *
                C48516) *
               C30746 +
           ((C23233 * C349 - C23239 * C343 + C48132 * C350 - C23240 * C344) *
                C1009 +
            (C23233 * C361 - C23239 * C354 + C48132 * C362 - C23240 * C355) *
                C48551 +
            (C23233 * C626 - C23239 * C621 + C48132 * C627 - C23240 * C622) *
                C1010 +
            (C23233 * C636 - C23239 * C631 + C48132 * C637 - C23240 * C632) *
                C48539 +
            (C23233 * C1374 - C23239 * C1370 + C48132 * C1378 -
             C23240 * C1371) *
                C1011 +
            (C23233 * C1382 - C23239 * C1377 + C48132 * C1383 -
             C23240 * C1379) *
                C48516) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C48557 * C347 - C22089 * C341 + C48550 * C348 - C22090 * C342 +
              C48537 * C349 - C22091 * C343 + C48520 * C350 - C22092 * C344) *
                 C118 +
             (C48557 * C359 - C22089 * C352 + C48550 * C360 - C22090 * C353 +
              C48537 * C361 - C22091 * C354 + C48520 * C362 - C22092 * C355) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C22089 * C342 - C48557 * C348 + C22090 * C343 - C48550 * C349 +
              C22091 * C344 - C48537 * C350 + C22092 * C345 - C48520 * C351) *
                 C118 +
             (C22089 * C353 - C48557 * C360 + C22090 * C354 - C48550 * C361 +
              C22091 * C355 - C48537 * C362 + C22092 * C356 - C48520 * C363) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
              C22248) *
                 C118 +
             (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
              C22256) *
                 C48227) *
                C30746 +
            ((C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
              C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                 C118 +
             (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
              C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C48210 * C229 +
           (((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C23401 - C23400 + C23403 - C23402) * C1009 +
             (C23405 - C23404 + C23407 - C23406) * C48551 +
             (C23409 - C23408 + C23411 - C23410) * C1010 +
             (C23413 - C23412 + C23415 - C23414) * C48539 +
             (C23417 - C23416 + C23419 - C23418) * C1011 +
             (C23421 - C23420 + C23423 - C23422) * C48516) *
                C30746 +
            ((C24663 - C24662 + C24665 - C24664) * C1009 +
             (C24667 - C24666 + C24669 - C24668) * C48551 +
             (C29368 - C29367 + C29370 - C29369) * C1010 +
             (C29372 - C29371 + C29374 - C29373) * C48539 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C1011 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C339 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C339 +
           (((C31026 - C31025 + C31028 - C31027 + C31030 - C31029 + C31032 -
              C31031) *
                 C118 +
             (C31034 - C31033 + C31036 - C31035 + C31038 - C31037 + C31040 -
              C31039) *
                 C48227) *
                C30746 +
            ((C48557 * C876 - C22089 * C871 + C48550 * C877 - C22090 * C872 +
              C48537 * C878 - C22091 * C873 + C48520 * C879 - C22092 * C874) *
                 C118 +
             (C48557 * C886 - C22089 * C881 + C48550 * C887 - C22090 * C882 +
              C48537 * C888 - C22091 * C883 + C48520 * C889 - C22092 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C339 +
           (((C24889 - C24888 + C24891 - C24890) * C1009 +
             (C24893 - C24892 + C24895 - C24894) * C48551 +
             (C24663 - C24662 + C24665 - C24664) * C1010 +
             (C24667 - C24666 + C24669 - C24668) * C48539 +
             (C29368 - C29367 + C29370 - C29369) * C1011 +
             (C29372 - C29371 + C29374 - C29373) * C48516) *
                C30746 +
            ((C24897 - C24896 + C24899 - C24898) * C1009 +
             (C24901 - C24900 + C24903 - C24902) * C48551 +
             (C24671 - C24670 + C24673 - C24672) * C1010 +
             (C24675 - C24674 + C24677 - C24676) * C48539 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C1011 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C22243 - C22242 + C22245 - C22244 + C22247 - C22246 + C22249 -
              C22248) *
                 C118 +
             (C22251 - C22250 + C22253 - C22252 + C22255 - C22254 + C22257 -
              C22256) *
                 C48227) *
                C30746 +
            ((C48557 * C625 - C22089 * C620 + C48550 * C626 - C22090 * C621 +
              C48537 * C627 - C22091 * C622 + C48520 * C628 - C22092 * C623) *
                 C118 +
             (C48557 * C635 - C22089 * C630 + C48550 * C636 - C22090 * C631 +
              C48537 * C637 - C22091 * C632 + C48520 * C638 - C22092 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C48210 * C447 +
           (((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C23401 - C23400 + C23403 - C23402) * C1009 +
             (C23405 - C23404 + C23407 - C23406) * C48551 +
             (C23409 - C23408 + C23411 - C23410) * C1010 +
             (C23413 - C23412 + C23415 - C23414) * C48539 +
             (C23417 - C23416 + C23419 - C23418) * C1011 +
             (C23421 - C23420 + C23423 - C23422) * C48516) *
                C30746 +
            ((C24663 - C24662 + C24665 - C24664) * C1009 +
             (C24667 - C24666 + C24669 - C24668) * C48551 +
             (C29368 - C29367 + C29370 - C29369) * C1010 +
             (C29372 - C29371 + C29374 - C29373) * C48539 +
             (C23233 * C1824 - C23239 * C1821 + C48132 * C1825 -
              C23240 * C1822) *
                 C1011 +
             (C23233 * C1830 - C23239 * C1827 + C48132 * C1831 -
              C23240 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
             C31016) *
                C118 +
            (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
             C31024) *
                C48227) *
               C48326) *
              C48210 * C513 +
          (((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
             C22232) *
                C118 +
            (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
             C22240) *
                C48227) *
               C30746 +
           ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
             C22769) *
                C118 +
            (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
             C22777) *
                C48227) *
               C48326) *
              C48210 * C514 +
          (((C22617 - C22616 + C22619 - C22618 + C22621 - C22620 + C22623 -
             C22622) *
                C118 +
            (C22625 - C22624 + C22627 - C22626 + C22629 - C22628 + C22631 -
             C22630) *
                C48227) *
               C30746 +
           ((C48557 * C1372 - C22089 * C1368 + C48550 * C1373 - C22090 * C1369 +
             C48537 * C1374 - C22091 * C1370 + C48520 * C1378 -
             C22092 * C1371) *
                C118 +
            (C48557 * C1380 - C22089 * C1375 + C48550 * C1381 - C22090 * C1376 +
             C48537 * C1382 - C22091 * C1377 + C48520 * C1383 -
             C22092 * C1379) *
                C48227) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C48210 * C513 +
          (((C23377 - C23376 + C23379 - C23378) * C1009 +
            (C23381 - C23380 + C23383 - C23382) * C48551 +
            (C23385 - C23384 + C23387 - C23386) * C1010 +
            (C23389 - C23388 + C23391 - C23390) * C48539 +
            (C23393 - C23392 + C23395 - C23394) * C1011 +
            (C23397 - C23396 + C23399 - C23398) * C48516) *
               C30746 +
           (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
            C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
            (C23952 - C23953 + C23954 - C23955) * C48516) *
               C48326) *
              C48210 * C514 +
          ((C23798 * C1009 + C23799 * C48551 + C23800 * C1010 +
            C23801 * C48539 + (C23791 - C23790 + C23793 - C23792) * C1011 +
            (C23795 - C23794 + C23797 - C23796) * C48516) *
               C30746 +
           (C29913 * C1009 + C29914 * C48551 +
            (C23949 - C23948 + C23951 - C23950) * C1010 +
            (C23953 - C23952 + C23955 - C23954) * C48539 +
            (C23233 * C9120 - C23239 * C9118 + C48132 * C9122 -
             C23240 * C9119) *
                C1011 +
            (C23233 * C9124 - C23239 * C9121 + C48132 * C9125 -
             C23240 * C9123) *
                C48516) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C339 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C447 +
          ((((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C339 +
           (((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
              C22768) *
                 C118 +
             (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
              C22776) *
                 C48227) *
                C30746 +
            ((C48557 * C2264 - C22089 * C2258 + C48550 * C2265 -
              C22090 * C2259 + C48537 * C2266 - C22091 * C2260 +
              C48520 * C2542 - C22092 * C2541) *
                 C118 +
             (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 -
              C22090 * C2268 + C48537 * C2278 - C22091 * C2269 +
              C48520 * C2544 - C22092 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C339 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C447 +
          ((((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C339 +
           ((C25470 * C1009 + C25471 * C48551 + C29913 * C1010 +
             C29914 * C48539 + (C23949 - C23948 + C23951 - C23950) * C1011 +
             (C23953 - C23952 + C23955 - C23954) * C48516) *
                C30746 +
            (C25472 * C1009 + C25473 * C48551 +
             (C25245 - C25244 + C25247 - C25246) * C1010 +
             (C25249 - C25248 + C25251 - C25250) * C48539 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C1011 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C721 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C22089 * C120 - C48557 * C127 + C22090 * C121 - C48550 * C128 +
              C22091 * C122 - C48537 * C129 + C22092 * C123 - C48520 * C130) *
                 C118 +
             (C22089 * C132 - C48557 * C141 + C22090 * C133 - C48550 * C142 +
              C22091 * C134 - C48537 * C143 + C22092 * C135 - C48520 * C144) *
                 C48227) *
                C30746 +
            ((C31025 - C31026 + C31027 - C31028 + C31029 - C31030 + C31031 -
              C31032) *
                 C118 +
             (C31033 - C31034 + C31035 - C31036 + C31037 - C31038 + C31039 -
              C31040) *
                 C48227) *
                C48326) *
               C721 +
           (((C31026 - C31025 + C31028 - C31027 + C31030 - C31029 + C31032 -
              C31031) *
                 C118 +
             (C31034 - C31033 + C31036 - C31035 + C31038 - C31037 + C31040 -
              C31039) *
                 C48227) *
                C30746 +
            ((C48557 * C876 - C22089 * C871 + C48550 * C877 - C22090 * C872 +
              C48537 * C878 - C22091 * C873 + C48520 * C879 - C22092 * C874) *
                 C118 +
             (C48557 * C886 - C22089 * C881 + C48550 * C887 - C22090 * C882 +
              C48537 * C888 - C22091 * C883 + C48520 * C889 - C22092 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C23239 * C120 - C23233 * C127 + C23240 * C121 - C48132 * C128) *
                 C1009 +
             (C23239 * C132 - C23233 * C141 + C23240 * C133 - C48132 * C142) *
                 C48551 +
             (C23400 - C23401 + C23402 - C23403) * C1010 +
             (C23404 - C23405 + C23406 - C23407) * C48539 +
             (C23408 - C23409 + C23410 - C23411) * C1011 +
             (C23412 - C23413 + C23414 - C23415) * C48516) *
                C30746 +
            ((C24888 - C24889 + C24890 - C24891) * C1009 +
             (C24892 - C24893 + C24894 - C24895) * C48551 +
             (C24662 - C24663 + C24664 - C24665) * C1010 +
             (C24666 - C24667 + C24668 - C24669) * C48539 +
             (C29367 - C29368 + C29369 - C29370) * C1011 +
             (C29371 - C29372 + C29373 - C29374) * C48516) *
                C48326) *
               C721 +
           (((C24889 - C24888 + C24891 - C24890) * C1009 +
             (C24893 - C24892 + C24895 - C24894) * C48551 +
             (C24663 - C24662 + C24665 - C24664) * C1010 +
             (C24667 - C24666 + C24669 - C24668) * C48539 +
             (C29368 - C29367 + C29370 - C29369) * C1011 +
             (C29372 - C29371 + C29374 - C29373) * C48516) *
                C30746 +
            ((C24897 - C24896 + C24899 - C24898) * C1009 +
             (C24901 - C24900 + C24903 - C24902) * C48551 +
             (C24671 - C24670 + C24673 - C24672) * C1010 +
             (C24675 - C24674 + C24677 - C24676) * C48539 +
             (C23233 * C2271 - C23239 * C2262 + C48132 * C2272 -
              C23240 * C2263) *
                 C1011 +
             (C23233 * C2280 - C23239 * C2274 + C48132 * C2281 -
              C23240 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
              C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                 C118 +
             (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
              C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                 C48227) *
                C30746 +
            ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
              C31016) *
                 C118 +
             (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
              C31024) *
                 C48227) *
                C48326) *
               C721 +
           (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
              C31015) *
                 C118 +
             (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
              C31023) *
                 C48227) *
                C30746 +
            ((C22089 * C870 - C48557 * C875 + C22090 * C871 - C48550 * C876 +
              C22091 * C872 - C48537 * C877 + C22092 * C873 - C48520 * C878) *
                 C118 +
             (C22089 * C880 - C48557 * C885 + C22090 * C881 - C48550 * C886 +
              C22091 * C882 - C48537 * C887 + C22092 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C229 +
          ((((C22227 - C22226 + C22229 - C22228 + C22231 - C22230 + C22233 -
              C22232) *
                 C118 +
             (C22235 - C22234 + C22237 - C22236 + C22239 - C22238 + C22241 -
              C22240) *
                 C48227) *
                C30746 +
            ((C22762 - C22763 + C22764 - C22765 + C22766 - C22767 + C22768 -
              C22769) *
                 C118 +
             (C22770 - C22771 + C22772 - C22773 + C22774 - C22775 + C22776 -
              C22777) *
                 C48227) *
                C48326) *
               C721 +
           (((C22763 - C22762 + C22765 - C22764 + C22767 - C22766 + C22769 -
              C22768) *
                 C118 +
             (C22771 - C22770 + C22773 - C22772 + C22775 - C22774 + C22777 -
              C22776) *
                 C48227) *
                C30746 +
            ((C48557 * C2264 - C22089 * C2258 + C48550 * C2265 -
              C22090 * C2259 + C48537 * C2266 - C22091 * C2260 +
              C48520 * C2542 - C22092 * C2541) *
                 C118 +
             (C48557 * C2276 - C22089 * C2267 + C48550 * C2277 -
              C22090 * C2268 + C48537 * C2278 - C22091 * C2269 +
              C48520 * C2544 - C22092 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                 C1009 +
             (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                 C48551 +
             (C23376 - C23377 + C23378 - C23379) * C1010 +
             (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
             C23799 * C48516) *
                C30746 +
            ((C24872 - C24873 + C24874 - C24875) * C1009 +
             (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
             C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
                C48326) *
               C721 +
           (((C24873 - C24872 + C24875 - C24874) * C1009 +
             (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
             C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
                C30746 +
            ((C24881 - C24880 + C24883 - C24882) * C1009 +
             (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
             C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
             (C25248 - C25249 + C25250 - C25251) * C48516) *
                C48326) *
               C48513) *
              C229 +
          ((((C23377 - C23376 + C23379 - C23378) * C1009 +
             (C23381 - C23380 + C23383 - C23382) * C48551 +
             (C23385 - C23384 + C23387 - C23386) * C1010 +
             (C23389 - C23388 + C23391 - C23390) * C48539 +
             (C23393 - C23392 + C23395 - C23394) * C1011 +
             (C23397 - C23396 + C23399 - C23398) * C48516) *
                C30746 +
            (C25474 * C1009 + C25475 * C48551 + C30113 * C1010 +
             C30114 * C48539 + (C23948 - C23949 + C23950 - C23951) * C1011 +
             (C23952 - C23953 + C23954 - C23955) * C48516) *
                C48326) *
               C721 +
           ((C25470 * C1009 + C25471 * C48551 + C29913 * C1010 +
             C29914 * C48539 + (C23949 - C23948 + C23951 - C23950) * C1011 +
             (C23953 - C23952 + C23955 - C23954) * C48516) *
                C30746 +
            (C25472 * C1009 + C25473 * C48551 +
             (C25245 - C25244 + C25247 - C25246) * C1010 +
             (C25249 - C25248 + C25251 - C25250) * C48539 +
             (C23233 * C9614 - C23239 * C9612 + C48132 * C9877 -
              C23240 * C9876) *
                 C1011 +
             (C23233 * C9618 - C23239 * C9615 + C48132 * C9879 -
              C23240 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48557 * C126 - C22089 * C119 + C48550 * C127 - C22090 * C120 +
             C48537 * C128 - C22091 * C121 + C48520 * C129 - C22092 * C122) *
                C118 +
            (C48557 * C140 - C22089 * C131 + C48550 * C141 - C22090 * C132 +
             C48537 * C142 - C22091 * C133 + C48520 * C143 - C22092 * C134) *
                C48227) *
               C30746 +
           ((C31009 - C31010 + C31011 - C31012 + C31013 - C31014 + C31015 -
             C31016) *
                C118 +
            (C31017 - C31018 + C31019 - C31020 + C31021 - C31022 + C31023 -
             C31024) *
                C48227) *
               C48326) *
              C867 +
          (((C31010 - C31009 + C31012 - C31011 + C31014 - C31013 + C31016 -
             C31015) *
                C118 +
            (C31018 - C31017 + C31020 - C31019 + C31022 - C31021 + C31024 -
             C31023) *
                C48227) *
               C30746 +
           ((C31757 - C31758 + C31759 - C31760 + C31761 - C31762 + C31763 -
             C31764) *
                C118 +
            (C31765 - C31766 + C31767 - C31768 + C31769 - C31770 + C31771 -
             C31772) *
                C48227) *
               C48326) *
              C868 +
          (((C31758 - C31757 + C31760 - C31759 + C31762 - C31761 + C31764 -
             C31763) *
                C118 +
            (C31766 - C31765 + C31768 - C31767 + C31770 - C31769 + C31772 -
             C31771) *
                C48227) *
               C30746 +
           ((C48557 * C2695 - C22089 * C2691 + C48550 * C2696 - C22090 * C2692 +
             C48537 * C2697 - C22091 * C2693 + C48520 * C2701 -
             C22092 * C2694) *
                C118 +
            (C48557 * C2703 - C22089 * C2698 + C48550 * C2704 - C22090 * C2699 +
             C48537 * C2705 - C22091 * C2700 + C48520 * C2706 -
             C22092 * C2702) *
                C48227) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23233 * C126 - C23239 * C119 + C48132 * C127 - C23240 * C120) *
                C1009 +
            (C23233 * C140 - C23239 * C131 + C48132 * C141 - C23240 * C132) *
                C48551 +
            (C23376 - C23377 + C23378 - C23379) * C1010 +
            (C23380 - C23381 + C23382 - C23383) * C48539 + C23798 * C1011 +
            C23799 * C48516) *
               C30746 +
           ((C24872 - C24873 + C24874 - C24875) * C1009 +
            (C24876 - C24877 + C24878 - C24879) * C48551 + C25470 * C1010 +
            C25471 * C48539 + C29913 * C1011 + C29914 * C48516) *
               C48326) *
              C867 +
          (((C24873 - C24872 + C24875 - C24874) * C1009 +
            (C24877 - C24876 + C24879 - C24878) * C48551 + C25474 * C1010 +
            C25475 * C48539 + C30113 * C1011 + C30114 * C48516) *
               C30746 +
           ((C24881 - C24880 + C24883 - C24882) * C1009 +
            (C24885 - C24884 + C24887 - C24886) * C48551 + C25476 * C1010 +
            C25477 * C48539 + (C25244 - C25245 + C25246 - C25247) * C1011 +
            (C25248 - C25249 + C25250 - C25251) * C48516) *
               C48326) *
              C868 +
          ((C26026 * C1009 + C26027 * C48551 + C25472 * C1010 +
            C25473 * C48539 + (C25245 - C25244 + C25247 - C25246) * C1011 +
            (C25249 - C25248 + C25251 - C25250) * C48516) *
               C30746 +
           ((C26019 - C26018 + C26021 - C26020) * C1009 +
            (C26023 - C26022 + C26025 - C26024) * C48551 +
            (C25463 - C25462 + C25465 - C25464) * C1010 +
            (C25467 - C25466 + C25469 - C25468) * C48539 +
            (C23233 * C10052 - C23239 * C10050 + C48132 * C10054 -
             C23240 * C10051) *
                C1011 +
            (C23233 * C10056 - C23239 * C10053 + C48132 * C10057 -
             C23240 * C10055) *
                C48516) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3718 * C239 - C3724 * C233 + C3719 * C240 - C3725 * C234 +
            C3720 * C241 - C3726 * C235 + C48520 * C242 - C3727 * C236) *
               C3729 +
           (C3718 * C251 - C3724 * C244 + C3719 * C252 - C3725 * C245 +
            C3720 * C253 - C3726 * C246 + C48520 * C254 - C3727 * C247) *
               C48286) *
              C48239 * C48210 * C48193 * C110 +
          ((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
            C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
               C3728 +
           (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
            C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
               C48483 +
           (C3724 * C234 - C3718 * C240 + C3725 * C235 - C3719 * C241 +
            C3726 * C236 - C3720 * C242 + C3727 * C237 - C48520 * C243) *
               C3729 +
           (C3724 * C245 - C3718 * C252 + C3725 * C246 - C3719 * C253 +
            C3726 * C247 - C3720 * C254 + C3727 * C248 - C48520 * C255) *
               C48286) *
              C48239 * C48210 * C48193 * C111 +
          ((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
            C3720 * C130 - C3726 * C123 + C48520 * C136 - C3727 * C124) *
               C3728 +
           (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
            C3720 * C144 - C3726 * C135 + C48520 * C145 - C3727 * C137) *
               C48483 +
           (C3718 * C241 - C3724 * C235 + C3719 * C242 - C3725 * C236 +
            C3720 * C243 - C3726 * C237 + C48520 * C249 - C3727 * C238) *
               C3729 +
           (C3718 * C253 - C3724 * C246 + C3719 * C254 - C3725 * C247 +
            C3720 * C255 - C3726 * C248 + C48520 * C256 - C3727 * C250) *
               C48286) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C48461 * C239 - C47223 * C233 + C48132 * C240 - C47204 * C234) *
               C11042 +
           (C48461 * C251 - C47223 * C244 + C48132 * C252 - C47204 * C245) *
               C11036 +
           (C48461 * C522 - C47223 * C517 + C48132 * C523 - C47204 * C518) *
               C11043 +
           (C48461 * C532 - C47223 * C527 + C48132 * C533 - C47204 * C528) *
               C11037 +
           (C48461 * C1162 - C47223 * C1158 + C48132 * C1163 - C47204 * C1159) *
               C11044 +
           (C48461 * C1170 - C47223 * C1165 + C48132 * C1171 - C47204 * C1166) *
               C48526) *
              C48239 * C48210 * C48193 * C110 +
          ((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
               C11041 +
           (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
               C11035 +
           (C47223 * C234 - C48461 * C240 + C47204 * C235 - C48132 * C241) *
               C11042 +
           (C47223 * C245 - C48461 * C252 + C47204 * C246 - C48132 * C253) *
               C11036 +
           (C47223 * C518 - C48461 * C523 + C47204 * C519 - C48132 * C524) *
               C11043 +
           (C47223 * C528 - C48461 * C533 + C47204 * C529 - C48132 * C534) *
               C11037 +
           (C47223 * C1159 - C48461 * C1163 + C47204 * C1160 - C48132 * C1164) *
               C11044 +
           (C47223 * C1166 - C48461 * C1171 + C47204 * C1167 - C48132 * C1172) *
               C48526) *
              C48239 * C48210 * C48193 * C111 +
          ((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
               C11041 +
           (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
               C11035 +
           (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
               C11042 +
           (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
               C11036 +
           (C48461 * C524 - C47223 * C519 + C48132 * C525 - C47204 * C520) *
               C11043 +
           (C48461 * C534 - C47223 * C529 + C48132 * C535 - C47204 * C530) *
               C11037 +
           (C48461 * C1164 - C47223 * C1160 + C48132 * C1168 - C47204 * C1161) *
               C11044 +
           (C48461 * C1172 - C47223 * C1167 + C48132 * C1173 - C47204 * C1169) *
               C48526) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
             C3726 * C519 - C3720 * C524 + C3727 * C520 - C48520 * C525) *
                C3729 +
            (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
             C3726 * C529 - C3720 * C534 + C3727 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C48210 * C229 +
           ((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                C3728 +
            (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                C48483 +
            (C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
             C3720 * C525 - C3726 * C520 + C48520 * C526 - C3727 * C521) *
                C3729 +
            (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
             C3720 * C535 - C3726 * C530 + C48520 * C536 - C3727 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C48210 * C229 +
           ((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C47223 * C1640 - C48461 * C1643 + C47204 * C1641 -
             C48132 * C1644) *
                C11044 +
            (C47223 * C1646 - C48461 * C1649 + C47204 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C48210 * C229 +
           ((C11201 - C11200 + C11203 - C11202) * C11041 +
            (C11205 - C11204 + C11207 - C11206) * C11035 +
            (C11209 - C11208 + C11211 - C11210) * C11042 +
            (C11213 - C11212 + C11215 - C11214) * C11036 +
            (C11217 - C11216 + C11219 - C11218) * C11043 +
            (C11221 - C11220 + C11223 - C11222) * C11037 +
            (C48461 * C1644 - C47223 * C1641 + C48132 * C1645 -
             C47204 * C1642) *
                C11044 +
            (C48461 * C1650 - C47223 * C1647 + C48132 * C1651 -
             C47204 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C339 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C3724 * C619 - C3718 * C624 + C3725 * C620 - C3719 * C625 +
             C3726 * C621 - C3720 * C626 + C3727 * C622 - C48520 * C627) *
                C3729 +
            (C3724 * C629 - C3718 * C634 + C3725 * C630 - C3719 * C635 +
             C3726 * C631 - C3720 * C636 + C3727 * C632 - C48520 * C637) *
                C48286) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C339 +
           ((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
             C3720 * C350 - C3726 * C344 + C48520 * C351 - C3727 * C345) *
                C3728 +
            (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
             C3720 * C362 - C3726 * C355 + C48520 * C363 - C3727 * C356) *
                C48483 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                C3729 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C339 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C47223 * C619 - C48461 * C624 + C47204 * C620 - C48132 * C625) *
                C11042 +
            (C47223 * C629 - C48461 * C634 + C47204 * C630 - C48132 * C635) *
                C11036 +
            (C47223 * C1368 - C48461 * C1372 + C47204 * C1369 -
             C48132 * C1373) *
                C11043 +
            (C47223 * C1375 - C48461 * C1380 + C47204 * C1376 -
             C48132 * C1381) *
                C11037 +
            (C47223 * C1820 - C48461 * C1823 + C47204 * C1821 -
             C48132 * C1824) *
                C11044 +
            (C47223 * C1826 - C48461 * C1829 + C47204 * C1827 -
             C48132 * C1830) *
                C48526) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C339 +
           ((C48461 * C348 - C47223 * C342 + C48132 * C349 - C47204 * C343) *
                C11041 +
            (C48461 * C360 - C47223 * C353 + C48132 * C361 - C47204 * C354) *
                C11035 +
            (C48461 * C625 - C47223 * C620 + C48132 * C626 - C47204 * C621) *
                C11042 +
            (C48461 * C635 - C47223 * C630 + C48132 * C636 - C47204 * C631) *
                C11036 +
            (C48461 * C1373 - C47223 * C1369 + C48132 * C1374 -
             C47204 * C1370) *
                C11043 +
            (C48461 * C1381 - C47223 * C1376 + C48132 * C1382 -
             C47204 * C1377) *
                C11037 +
            (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
             C47204 * C1822) *
                C11044 +
            (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
             C47204 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C3724 * C517 - C3718 * C522 + C3725 * C518 - C3719 * C523 +
             C3726 * C519 - C3720 * C524 + C3727 * C520 - C48520 * C525) *
                C3729 +
            (C3724 * C527 - C3718 * C532 + C3725 * C528 - C3719 * C533 +
             C3726 * C529 - C3720 * C534 + C3727 * C530 - C48520 * C535) *
                C48286) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C48210 * C447 +
           ((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                C3728 +
            (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                C48483 +
            (C3718 * C523 - C3724 * C518 + C3719 * C524 - C3725 * C519 +
             C3720 * C525 - C3726 * C520 + C48520 * C526 - C3727 * C521) *
                C3729 +
            (C3718 * C533 - C3724 * C528 + C3719 * C534 - C3725 * C529 +
             C3720 * C535 - C3726 * C530 + C48520 * C536 - C3727 * C531) *
                C48286) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 +
            (C11184 - C11185 + C11186 - C11187) * C11043 +
            (C11188 - C11189 + C11190 - C11191) * C11037 +
            (C11192 - C11193 + C11194 - C11195) * C11044 +
            (C11196 - C11197 + C11198 - C11199) * C48526) *
               C48239 * C48210 * C447 +
           ((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C47223 * C1640 - C48461 * C1643 + C47204 * C1641 -
             C48132 * C1644) *
                C11044 +
            (C47223 * C1646 - C48461 * C1649 + C47204 * C1647 -
             C48132 * C1650) *
                C48526) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C48210 * C447 +
           ((C11201 - C11200 + C11203 - C11202) * C11041 +
            (C11205 - C11204 + C11207 - C11206) * C11035 +
            (C11209 - C11208 + C11211 - C11210) * C11042 +
            (C11213 - C11212 + C11215 - C11214) * C11036 +
            (C11217 - C11216 + C11219 - C11218) * C11043 +
            (C11221 - C11220 + C11223 - C11222) * C11037 +
            (C48461 * C1644 - C47223 * C1641 + C48132 * C1645 -
             C47204 * C1642) *
                C11044 +
            (C48461 * C1650 - C47223 * C1647 + C48132 * C1651 -
             C47204 * C1648) *
                C48526) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
               C3729 +
           (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
               C48286) *
              C48239 * C48210 * C513 +
          ((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
               C3728 +
           (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
               C48483 +
           (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
               C3729 +
           (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
               C48286) *
              C48239 * C48210 * C514 +
          ((C4252 - C4251 + C4254 - C4253 + C4256 - C4255 + C4258 - C4257) *
               C3728 +
           (C4260 - C4259 + C4262 - C4261 + C4264 - C4263 + C4266 - C4265) *
               C48483 +
           (C3718 * C1162 - C3724 * C1158 + C3719 * C1163 - C3725 * C1159 +
            C3720 * C1164 - C3726 * C1160 + C48520 * C1168 - C3727 * C1161) *
               C3729 +
           (C3718 * C1170 - C3724 * C1165 + C3719 * C1171 - C3725 * C1166 +
            C3720 * C1172 - C3726 * C1167 + C48520 * C1173 - C3727 * C1169) *
               C48286) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C11176 - C11177 + C11178 - C11179) * C11042 +
           (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
           C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
              C48239 * C48210 * C513 +
          ((C11177 - C11176 + C11179 - C11178) * C11041 +
           (C11181 - C11180 + C11183 - C11182) * C11035 +
           (C11185 - C11184 + C11187 - C11186) * C11042 +
           (C11189 - C11188 + C11191 - C11190) * C11036 +
           (C11193 - C11192 + C11195 - C11194) * C11043 +
           (C11197 - C11196 + C11199 - C11198) * C11037 +
           (C11590 - C11591 + C11592 - C11593) * C11044 +
           (C11594 - C11595 + C11596 - C11597) * C48526) *
              C48239 * C48210 * C514 +
          (C11598 * C11041 + C11599 * C11035 + C11600 * C11042 +
           C11601 * C11036 + (C11591 - C11590 + C11593 - C11592) * C11043 +
           (C11595 - C11594 + C11597 - C11596) * C11037 +
           (C48461 * C8998 - C47223 * C8996 + C48132 * C9000 - C47204 * C8997) *
               C11044 +
           (C48461 * C9002 - C47223 * C8999 + C48132 * C9003 - C47204 * C9001) *
               C48526) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C339 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C447 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
                C3729 +
            (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
                C48286) *
               C48239 * C339 +
           ((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                C3728 +
            (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                C48483 +
            (C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C3729 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C339 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C447 +
          (((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C11590 - C11591 + C11592 - C11593) * C11044 +
            (C11594 - C11595 + C11596 - C11597) * C48526) *
               C48239 * C339 +
           ((C11733 - C11732 + C11735 - C11734) * C11041 +
            (C11737 - C11736 + C11739 - C11738) * C11035 +
            (C11741 - C11740 + C11743 - C11742) * C11042 +
            (C11745 - C11744 + C11747 - C11746) * C11036 +
            (C11749 - C11748 + C11751 - C11750) * C11043 +
            (C11753 - C11752 + C11755 - C11754) * C11037 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C11044 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C721 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C3728 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48483 +
            (C3877 - C3878 + C3879 - C3880 + C3881 - C3882 + C3883 - C3884) *
                C3729 +
            (C3885 - C3886 + C3887 - C3888 + C3889 - C3890 + C3891 - C3892) *
                C48286) *
               C48239 * C721 +
           ((C3718 * C348 - C3724 * C342 + C3719 * C349 - C3725 * C343 +
             C3720 * C350 - C3726 * C344 + C48520 * C351 - C3727 * C345) *
                C3728 +
            (C3718 * C360 - C3724 * C353 + C3719 * C361 - C3725 * C354 +
             C3720 * C362 - C3726 * C355 + C48520 * C363 - C3727 * C356) *
                C48483 +
            (C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
             C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                C3729 +
            (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
             C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                C48286) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C721 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C11041 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C11035 +
            (C11200 - C11201 + C11202 - C11203) * C11042 +
            (C11204 - C11205 + C11206 - C11207) * C11036 +
            (C11208 - C11209 + C11210 - C11211) * C11043 +
            (C11212 - C11213 + C11214 - C11215) * C11037 +
            (C11216 - C11217 + C11218 - C11219) * C11044 +
            (C11220 - C11221 + C11222 - C11223) * C48526) *
               C48239 * C721 +
           ((C48461 * C348 - C47223 * C342 + C48132 * C349 - C47204 * C343) *
                C11041 +
            (C48461 * C360 - C47223 * C353 + C48132 * C361 - C47204 * C354) *
                C11035 +
            (C48461 * C625 - C47223 * C620 + C48132 * C626 - C47204 * C621) *
                C11042 +
            (C48461 * C635 - C47223 * C630 + C48132 * C636 - C47204 * C631) *
                C11036 +
            (C48461 * C1373 - C47223 * C1369 + C48132 * C1374 -
             C47204 * C1370) *
                C11043 +
            (C48461 * C1381 - C47223 * C1376 + C48132 * C1382 -
             C47204 * C1377) *
                C11037 +
            (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
             C47204 * C1822) *
                C11044 +
            (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
             C47204 * C1828) *
                C48526) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C3728 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48483 +
            (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
                C3729 +
            (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
                C48286) *
               C48239 * C721 +
           ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
             C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
                C3728 +
            (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
             C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
                C48483 +
            (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C3729 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48286) *
               C48239 * C48513) *
              C229 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C3728 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48483 +
            (C4251 - C4252 + C4253 - C4254 + C4255 - C4256 + C4257 - C4258) *
                C3729 +
            (C4259 - C4260 + C4261 - C4262 + C4263 - C4264 + C4265 - C4266) *
                C48286) *
               C48239 * C721 +
           ((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                C3728 +
            (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                C48483 +
            (C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C3729 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48286) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C11041 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C11035 +
            (C11176 - C11177 + C11178 - C11179) * C11042 +
            (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
            C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
               C48239 * C721 +
           ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
                C11041 +
            (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
                C11035 +
            (C11732 - C11733 + C11734 - C11735) * C11042 +
            (C11736 - C11737 + C11738 - C11739) * C11036 +
            (C11740 - C11741 + C11742 - C11743) * C11043 +
            (C11744 - C11745 + C11746 - C11747) * C11037 +
            (C11748 - C11749 + C11750 - C11751) * C11044 +
            (C11752 - C11753 + C11754 - C11755) * C48526) *
               C48239 * C48513) *
              C229 +
          (((C11177 - C11176 + C11179 - C11178) * C11041 +
            (C11181 - C11180 + C11183 - C11182) * C11035 +
            (C11185 - C11184 + C11187 - C11186) * C11042 +
            (C11189 - C11188 + C11191 - C11190) * C11036 +
            (C11193 - C11192 + C11195 - C11194) * C11043 +
            (C11197 - C11196 + C11199 - C11198) * C11037 +
            (C11590 - C11591 + C11592 - C11593) * C11044 +
            (C11594 - C11595 + C11596 - C11597) * C48526) *
               C48239 * C721 +
           ((C11733 - C11732 + C11735 - C11734) * C11041 +
            (C11737 - C11736 + C11739 - C11738) * C11035 +
            (C11741 - C11740 + C11743 - C11742) * C11042 +
            (C11745 - C11744 + C11747 - C11746) * C11036 +
            (C11749 - C11748 + C11751 - C11750) * C11043 +
            (C11753 - C11752 + C11755 - C11754) * C11037 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C11044 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48526) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
            C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
               C3728 +
           (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
            C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
               C48483 +
           (C3861 - C3862 + C3863 - C3864 + C3865 - C3866 + C3867 - C3868) *
               C3729 +
           (C3869 - C3870 + C3871 - C3872 + C3873 - C3874 + C3875 - C3876) *
               C48286) *
              C48239 * C867 +
          ((C3724 * C341 - C3718 * C347 + C3725 * C342 - C3719 * C348 +
            C3726 * C343 - C3720 * C349 + C3727 * C344 - C48520 * C350) *
               C3728 +
           (C3724 * C352 - C3718 * C359 + C3725 * C353 - C3719 * C360 +
            C3726 * C354 - C3720 * C361 + C3727 * C355 - C48520 * C362) *
               C48483 +
           (C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
               C3729 +
           (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
               C48286) *
              C48239 * C868 +
          ((C3718 * C875 - C3724 * C870 + C3719 * C876 - C3725 * C871 +
            C3720 * C877 - C3726 * C872 + C48520 * C878 - C3727 * C873) *
               C3728 +
           (C3718 * C885 - C3724 * C880 + C3719 * C886 - C3725 * C881 +
            C3720 * C887 - C3726 * C882 + C48520 * C888 - C3727 * C883) *
               C48483 +
           (C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
            C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
               C3729 +
           (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
            C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
               C48286) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
               C11041 +
           (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
               C11035 +
           (C11176 - C11177 + C11178 - C11179) * C11042 +
           (C11180 - C11181 + C11182 - C11183) * C11036 + C11598 * C11043 +
           C11599 * C11037 + C11600 * C11044 + C11601 * C48526) *
              C48239 * C867 +
          ((C47223 * C341 - C48461 * C347 + C47204 * C342 - C48132 * C348) *
               C11041 +
           (C47223 * C352 - C48461 * C359 + C47204 * C353 - C48132 * C360) *
               C11035 +
           (C11732 - C11733 + C11734 - C11735) * C11042 +
           (C11736 - C11737 + C11738 - C11739) * C11036 +
           (C11740 - C11741 + C11742 - C11743) * C11043 +
           (C11744 - C11745 + C11746 - C11747) * C11037 +
           (C11748 - C11749 + C11750 - C11751) * C11044 +
           (C11752 - C11753 + C11754 - C11755) * C48526) *
              C48239 * C868 +
          ((C48461 * C875 - C47223 * C870 + C48132 * C876 - C47204 * C871) *
               C11041 +
           (C48461 * C885 - C47223 * C880 + C48132 * C886 - C47204 * C881) *
               C11035 +
           (C48461 * C2264 - C47223 * C2258 + C48132 * C2265 - C47204 * C2259) *
               C11042 +
           (C48461 * C2276 - C47223 * C2267 + C48132 * C2277 - C47204 * C2268) *
               C11036 +
           (C48461 * C2270 - C47223 * C2261 + C48132 * C2271 - C47204 * C2262) *
               C11043 +
           (C48461 * C2279 - C47223 * C2273 + C48132 * C2280 - C47204 * C2274) *
               C11037 +
           (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 - C47204 * C9876) *
               C11044 +
           (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 - C47204 * C9878) *
               C48526) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C3728 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48483 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
               C48484 +
           ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
            (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
            (C1006 * C620 - C1000 * C625 + C1007 * C621 - C1001 * C626 +
             C1008 * C622 - C48503 * C627) *
                C3729 +
            (C1006 * C630 - C1000 * C635 + C1007 * C631 - C1001 * C636 +
             C1008 * C632 - C48503 * C637) *
                C48286) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
             C48503 * C130 - C1008 * C123) *
                C3728 +
            (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
             C48503 * C144 - C1008 * C135) *
                C48483 +
            (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
             C48503 * C243 - C1008 * C237) *
                C3729 +
            (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
             C48503 * C255 - C1008 * C248) *
                C48286) *
               C48484 +
           ((C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
             C48503 * C351 - C1008 * C345) *
                C3728 +
            (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
             C48503 * C363 - C1008 * C356) *
                C48483 +
            (C1000 * C626 - C1006 * C621 + C1001 * C627 - C1007 * C622 +
             C48503 * C628 - C1008 * C623) *
                C3729 +
            (C1000 * C636 - C1006 * C631 + C1001 * C637 - C1007 * C632 +
             C48503 * C638 - C1008 * C633) *
                C48286) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + (C9380 - C9379) * C11044 +
            (C9382 - C9381) * C48526) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C11041 +
            (C8908 * C132 - C48122 * C141) * C11035 + (C9021 - C9022) * C11042 +
            (C9023 - C9024) * C11036 + (C9025 - C9026) * C11043 +
            (C9027 - C9028) * C11037 + (C9029 - C9030) * C11044 +
            (C9031 - C9032) * C48526) *
               C48484 +
           ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
            (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
            (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
            (C8908 * C1821 - C48122 * C1824) * C11044 +
            (C8908 * C1827 - C48122 * C1830) * C48526) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C11041 +
            (C48122 * C142 - C8908 * C133) * C11035 +
            (C48122 * C241 - C8908 * C235) * C11042 +
            (C48122 * C253 - C8908 * C246) * C11036 +
            (C48122 * C524 - C8908 * C519) * C11043 +
            (C48122 * C534 - C8908 * C529) * C11037 +
            (C48122 * C1164 - C8908 * C1160) * C11044 +
            (C48122 * C1172 - C8908 * C1167) * C48526) *
               C48484 +
           ((C48122 * C349 - C8908 * C343) * C11041 +
            (C48122 * C361 - C8908 * C354) * C11035 +
            (C48122 * C626 - C8908 * C621) * C11042 +
            (C48122 * C636 - C8908 * C631) * C11036 +
            (C48122 * C1374 - C8908 * C1370) * C11043 +
            (C48122 * C1382 - C8908 * C1377) * C11037 +
            (C48122 * C1825 - C8908 * C1822) * C11044 +
            (C48122 * C1831 - C8908 * C1828) * C48526) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C48210 * C229 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C3728 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48483 +
             (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C3729 +
             (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48286) *
                C48484 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3728 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48483 +
             (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
              C48503 * C1378 - C1008 * C1371) *
                 C3729 +
             (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
              C48503 * C1383 - C1008 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + (C9379 - C9380) * C11043 +
             (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
             (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C229 +
           (((C9022 - C9021) * C11041 + (C9024 - C9023) * C11035 +
             (C9026 - C9025) * C11042 + (C9028 - C9027) * C11036 +
             (C9030 - C9029) * C11043 + (C9032 - C9031) * C11037 +
             (C9034 - C9033) * C11044 + (C9036 - C9035) * C48526) *
                C48484 +
            ((C9890 - C9889) * C11041 + (C9892 - C9891) * C11035 +
             (C9894 - C9893) * C11042 + (C9896 - C9895) * C11036 +
             (C14025 - C14024) * C11043 + (C14027 - C14026) * C11037 +
             (C48122 * C9122 - C8908 * C9119) * C11044 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3729 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C339 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C3728 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48483 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3729 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48286) *
                C48484 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C3728 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48483 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C3729 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + (C9379 - C9380) * C11044 +
             (C9381 - C9382) * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C339 +
           (((C10068 - C10067) * C11041 + (C10070 - C10069) * C11035 +
             (C9890 - C9889) * C11042 + (C9892 - C9891) * C11036 +
             (C9894 - C9893) * C11043 + (C9896 - C9895) * C11037 +
             (C14025 - C14024) * C11044 + (C14027 - C14026) * C48526) *
                C48484 +
            ((C10072 - C10071) * C11041 + (C10074 - C10073) * C11035 +
             (C9898 - C9897) * C11042 + (C9900 - C9899) * C11036 +
             (C9902 - C9901) * C11043 + (C9904 - C9903) * C11037 +
             (C48122 * C9877 - C8908 * C9876) * C11044 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C48210 * C447 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C3728 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48483 +
             (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C3729 +
             (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48286) *
                C48484 +
            ((C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3728 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48483 +
             (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
              C48503 * C1378 - C1008 * C1371) *
                 C3729 +
             (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
              C48503 * C1383 - C1008 * C1379) *
                 C48286) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + (C9380 - C9379) * C11044 +
             (C9382 - C9381) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + (C9379 - C9380) * C11043 +
             (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
             (C9385 - C9386) * C48526) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C48210 * C447 +
           (((C9022 - C9021) * C11041 + (C9024 - C9023) * C11035 +
             (C9026 - C9025) * C11042 + (C9028 - C9027) * C11036 +
             (C9030 - C9029) * C11043 + (C9032 - C9031) * C11037 +
             (C9034 - C9033) * C11044 + (C9036 - C9035) * C48526) *
                C48484 +
            ((C9890 - C9889) * C11041 + (C9892 - C9891) * C11035 +
             (C9894 - C9893) * C11042 + (C9896 - C9895) * C11036 +
             (C14025 - C14024) * C11043 + (C14027 - C14026) * C11037 +
             (C48122 * C9122 - C8908 * C9119) * C11044 +
             (C48122 * C9125 - C8908 * C9123) * C48526) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            (C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C3729 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48286) *
               C48326) *
              C48210 * C513 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
               C48484 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C3728 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48483 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
               C48326) *
              C48210 * C514 +
          ((C1673 * C3728 + C1674 * C48483 +
            (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C3729 +
            (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48286) *
               C48484 +
           ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3728 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48483 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C3729 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48286) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
               C48326) *
              C48210 * C513 +
          (((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
            (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
            (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
            (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
               C48484 +
           (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
            C10496 * C11036 + (C9379 - C9380) * C11043 +
            (C9381 - C9382) * C11037 + (C9383 - C9384) * C11044 +
            (C9385 - C9386) * C48526) *
               C48326) *
              C48210 * C514 +
          ((C9275 * C11041 + C9276 * C11035 + C9277 * C11042 + C9278 * C11036 +
            C9279 * C11043 + C9280 * C11037 + (C9282 - C9281) * C11044 +
            (C9284 - C9283) * C48526) *
               C48484 +
           (C10331 * C11041 + C10332 * C11035 + C14386 * C11042 +
            C14387 * C11036 + (C9384 - C9383) * C11043 +
            (C9386 - C9385) * C11037 +
            (C48122 * C9367 - C8908 * C9366) * C11044 +
            (C48122 * C9369 - C8908 * C9368) * C48526) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C447 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            (C6993 * C3728 + C6994 * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C339 +
           ((C6991 * C3728 + C6992 * C48483 +
             (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3729 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48286) *
                C48484 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3728 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48483 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48503 * C2272 - C1008 * C2263) *
                 C3729 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48503 * C2281 - C1008 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C339 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + C14518 * C11043 + C14519 * C11037 +
             (C9383 - C9384) * C11044 + (C9385 - C9386) * C48526) *
                C48326) *
               C339 +
           ((C10489 * C11041 + C10490 * C11035 + C10331 * C11042 +
             C10332 * C11036 + C14386 * C11043 + C14387 * C11037 +
             (C9384 - C9383) * C11044 + (C9386 - C9385) * C48526) *
                C48484 +
            (C10491 * C11041 + C10492 * C11035 + C10333 * C11042 +
             C10334 * C11036 + (C10336 - C10335) * C11043 +
             (C10338 - C10337) * C11037 +
             (C48122 * C9616 - C8908 * C9613) * C11044 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C3728 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48483 +
             (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C3729 +
             (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48286) *
                C48484 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C3728 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48483 +
             (C6235 - C6236 + C6237 - C6238 + C6239 - C6240) * C3729 +
             (C6241 - C6242 + C6243 - C6244 + C6245 - C6246) * C48286) *
                C48326) *
               C721 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C3728 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48483 +
             (C6236 - C6235 + C6238 - C6237 + C6240 - C6239) * C3729 +
             (C6242 - C6241 + C6244 - C6243 + C6246 - C6245) * C48286) *
                C48484 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C3728 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48483 +
             (C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C3729 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48286) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C11041 +
             (C8908 * C132 - C48122 * C141) * C11035 +
             (C9021 - C9022) * C11042 + (C9023 - C9024) * C11036 +
             (C9025 - C9026) * C11043 + (C9027 - C9028) * C11037 +
             (C9029 - C9030) * C11044 + (C9031 - C9032) * C48526) *
                C48484 +
            ((C10067 - C10068) * C11041 + (C10069 - C10070) * C11035 +
             (C9889 - C9890) * C11042 + (C9891 - C9892) * C11036 +
             (C9893 - C9894) * C11043 + (C9895 - C9896) * C11037 +
             (C14024 - C14025) * C11044 + (C14026 - C14027) * C48526) *
                C48326) *
               C721 +
           (((C10068 - C10067) * C11041 + (C10070 - C10069) * C11035 +
             (C9890 - C9889) * C11042 + (C9892 - C9891) * C11036 +
             (C9894 - C9893) * C11043 + (C9896 - C9895) * C11037 +
             (C14025 - C14024) * C11044 + (C14027 - C14026) * C48526) *
                C48484 +
            ((C10072 - C10071) * C11041 + (C10074 - C10073) * C11035 +
             (C9898 - C9897) * C11042 + (C9900 - C9899) * C11036 +
             (C9902 - C9901) * C11043 + (C9904 - C9903) * C11037 +
             (C48122 * C9877 - C8908 * C9876) * C11044 +
             (C48122 * C9879 - C8908 * C9878) * C48526) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C3728 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48483 +
             (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
             (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
                C48484 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
             C6991 * C3729 + C6992 * C48286) *
                C48326) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
             C6993 * C3729 + C6994 * C48286) *
                C48484 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
             (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
                C48326) *
               C48513) *
              C229 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C3728 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48483 +
             (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C3729 +
             (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48286) *
                C48484 +
            (C6993 * C3728 + C6994 * C48483 +
             (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C3729 +
             (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48286) *
                C48326) *
               C721 +
           ((C6991 * C3728 + C6992 * C48483 +
             (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C3729 +
             (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48286) *
                C48484 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3728 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48483 +
             (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
              C48503 * C2272 - C1008 * C2263) *
                 C3729 +
             (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
              C48503 * C2281 - C1008 * C2275) *
                 C48286) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C11041 +
             (C48122 * C140 - C8908 * C131) * C11035 +
             (C9005 - C9006) * C11042 + (C9007 - C9008) * C11036 +
             C9275 * C11043 + C9276 * C11037 + C9277 * C11044 +
             C9278 * C48526) *
                C48484 +
            ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
             C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
             C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
                C48326) *
               C721 +
           (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
             C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
             C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
                C48484 +
            ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
             C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
             C10500 * C11037 + (C10335 - C10336) * C11044 +
             (C10337 - C10338) * C48526) *
                C48326) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C11041 + (C9008 - C9007) * C11035 +
             (C9010 - C9009) * C11042 + (C9012 - C9011) * C11036 +
             (C9014 - C9013) * C11043 + (C9016 - C9015) * C11037 +
             (C9018 - C9017) * C11044 + (C9020 - C9019) * C48526) *
                C48484 +
            (C10493 * C11041 + C10494 * C11035 + C10495 * C11042 +
             C10496 * C11036 + C14518 * C11043 + C14519 * C11037 +
             (C9383 - C9384) * C11044 + (C9385 - C9386) * C48526) *
                C48326) *
               C721 +
           ((C10489 * C11041 + C10490 * C11035 + C10331 * C11042 +
             C10332 * C11036 + C14386 * C11043 + C14387 * C11037 +
             (C9384 - C9383) * C11044 + (C9386 - C9385) * C48526) *
                C48484 +
            (C10491 * C11041 + C10492 * C11035 + C10333 * C11042 +
             C10334 * C11036 + (C10336 - C10335) * C11043 +
             (C10338 - C10337) * C11037 +
             (C48122 * C9616 - C8908 * C9613) * C11044 +
             (C48122 * C9619 - C8908 * C9617) * C48526) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C3728 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48483 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C3729 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48286) *
               C48484 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C3728 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48483 +
            C6991 * C3729 + C6992 * C48286) *
               C48326) *
              C867 +
          (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C3728 +
            (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48483 +
            C6993 * C3729 + C6994 * C48286) *
               C48484 +
           ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C3728 +
            (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48483 +
            (C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C3729 +
            (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48286) *
               C48326) *
              C868 +
          ((C3616 * C3728 + C3617 * C48483 +
            (C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C3729 +
            (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48286) *
               C48484 +
           ((C3603 - C3602 + C3605 - C3604 + C3607 - C3606) * C3728 +
            (C3609 - C3608 + C3611 - C3610 + C3613 - C3612) * C48483 +
            (C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
             C48503 * C3162 - C1008 * C3159) *
                C3729 +
            (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
             C48503 * C3168 - C1008 * C3165) *
                C48286) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C11041 +
            (C48122 * C140 - C8908 * C131) * C11035 + (C9005 - C9006) * C11042 +
            (C9007 - C9008) * C11036 + C9275 * C11043 + C9276 * C11037 +
            C9277 * C11044 + C9278 * C48526) *
               C48484 +
           ((C10059 - C10060) * C11041 + (C10061 - C10062) * C11035 +
            C10489 * C11042 + C10490 * C11036 + C10331 * C11043 +
            C10332 * C11037 + C14386 * C11044 + C14387 * C48526) *
               C48326) *
              C867 +
          (((C10060 - C10059) * C11041 + (C10062 - C10061) * C11035 +
            C10493 * C11042 + C10494 * C11036 + C10495 * C11043 +
            C10496 * C11037 + C14518 * C11044 + C14519 * C48526) *
               C48484 +
           ((C10064 - C10063) * C11041 + (C10066 - C10065) * C11035 +
            C10497 * C11042 + C10498 * C11036 + C10499 * C11043 +
            C10500 * C11037 + (C10335 - C10336) * C11044 +
            (C10337 - C10338) * C48526) *
               C48326) *
              C868 +
          ((C10919 * C11041 + C10920 * C11035 + C10491 * C11042 +
            C10492 * C11036 + C10333 * C11043 + C10334 * C11037 +
            (C10336 - C10335) * C11044 + (C10338 - C10337) * C48526) *
               C48484 +
           ((C10926 - C10925) * C11041 + (C10928 - C10927) * C11035 +
            (C10502 - C10501) * C11042 + (C10504 - C10503) * C11036 +
            (C10506 - C10505) * C11043 + (C10508 - C10507) * C11037 +
            (C48122 * C10485 - C8908 * C10484) * C11044 +
            (C48122 * C10487 - C8908 * C10486) * C48526) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1000 * C239 - C1006 * C233 + C1001 * C240 - C1007 * C234 +
            C48503 * C241 - C1008 * C235) *
               C1010 +
           (C1000 * C251 - C1006 * C244 + C1001 * C252 - C1007 * C245 +
            C48503 * C253 - C1008 * C246) *
               C48539 +
           (C1000 * C522 - C1006 * C517 + C1001 * C523 - C1007 * C518 +
            C48503 * C524 - C1008 * C519) *
               C1011 +
           (C1000 * C532 - C1006 * C527 + C1001 * C533 - C1007 * C528 +
            C48503 * C534 - C1008 * C529) *
               C48516) *
              C48239 * C48210 * C48193 * C110 +
          ((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
            C1008 * C122 - C48503 * C129) *
               C1009 +
           (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
            C1008 * C134 - C48503 * C143) *
               C48551 +
           (C1006 * C234 - C1000 * C240 + C1007 * C235 - C1001 * C241 +
            C1008 * C236 - C48503 * C242) *
               C1010 +
           (C1006 * C245 - C1000 * C252 + C1007 * C246 - C1001 * C253 +
            C1008 * C247 - C48503 * C254) *
               C48539 +
           (C1006 * C518 - C1000 * C523 + C1007 * C519 - C1001 * C524 +
            C1008 * C520 - C48503 * C525) *
               C1011 +
           (C1006 * C528 - C1000 * C533 + C1007 * C529 - C1001 * C534 +
            C1008 * C530 - C48503 * C535) *
               C48516) *
              C48239 * C48210 * C48193 * C111 +
          ((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
            C48503 * C130 - C1008 * C123) *
               C1009 +
           (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
            C48503 * C144 - C1008 * C135) *
               C48551 +
           (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
            C48503 * C243 - C1008 * C237) *
               C1010 +
           (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
            C48503 * C255 - C1008 * C248) *
               C48539 +
           (C1000 * C524 - C1006 * C519 + C1001 * C525 - C1007 * C520 +
            C48503 * C526 - C1008 * C521) *
               C1011 +
           (C1000 * C534 - C1006 * C529 + C1001 * C535 - C1007 * C530 +
            C48503 * C536 - C1008 * C531) *
               C48516) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C48210 * C48193 * C110 +
          ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
            C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
            C117 * C124 - C105 * C136) *
               C118 +
           (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
            C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
            C117 * C137 - C105 * C145) *
               C48227) *
              C48239 * C48210 * C48193 * C111 +
          ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
            C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
            C105 * C138 - C117 * C125) *
               C118 +
           (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
            C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
            C105 * C146 - C117 * C139) *
               C48227) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48227) *
               C48552 +
           ((C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
             C48503 * C349 - C1008 * C343) *
                C118 +
            (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
             C48503 * C361 - C1008 * C354) *
                C48227) *
               C48541 +
           ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
             C48503 * C877 - C1008 * C872) *
                C118 +
            (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
             C48503 * C887 - C1008 * C882) *
                C48227) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C118 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48227) *
               C48552 +
           ((C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
             C1008 * C344 - C48503 * C350) *
                C118 +
            (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
             C1008 * C355 - C48503 * C362) *
                C48227) *
               C48541 +
           ((C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
             C1008 * C873 - C48503 * C878) *
                C118 +
            (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
             C1008 * C883 - C48503 * C888) *
                C48227) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
             C48503 * C130 - C1008 * C123) *
                C118 +
            (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
             C48503 * C144 - C1008 * C135) *
                C48227) *
               C48552 +
           ((C1000 * C349 - C1006 * C343 + C1001 * C350 - C1007 * C344 +
             C48503 * C351 - C1008 * C345) *
                C118 +
            (C1000 * C361 - C1006 * C354 + C1001 * C362 - C1007 * C355 +
             C48503 * C363 - C1008 * C356) *
                C48227) *
               C48541 +
           ((C1000 * C877 - C1006 * C872 + C1001 * C878 - C1007 * C873 +
             C48503 * C879 - C1008 * C874) *
                C118 +
            (C1000 * C887 - C1006 * C882 + C1001 * C888 - C1007 * C883 +
             C48503 * C889 - C1008 * C884) *
                C48227) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C48548 * C239 - C7644 * C233 + C48535 * C240 - C7645 * C234 +
            C48503 * C241 - C7646 * C235) *
               C7648 +
           (C48548 * C251 - C7644 * C244 + C48535 * C252 - C7645 * C245 +
            C48503 * C253 - C7646 * C246) *
               C7642 +
           (C48548 * C522 - C7644 * C517 + C48535 * C523 - C7645 * C518 +
            C48503 * C524 - C7646 * C519) *
               C7649 +
           (C48548 * C532 - C7644 * C527 + C48535 * C533 - C7645 * C528 +
            C48503 * C534 - C7646 * C529) *
               C48516) *
              C48239 * C48210 * C48193 * C110 +
          ((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
            C7646 * C122 - C48503 * C129) *
               C7647 +
           (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
            C7646 * C134 - C48503 * C143) *
               C7641 +
           (C7644 * C234 - C48548 * C240 + C7645 * C235 - C48535 * C241 +
            C7646 * C236 - C48503 * C242) *
               C7648 +
           (C7644 * C245 - C48548 * C252 + C7645 * C246 - C48535 * C253 +
            C7646 * C247 - C48503 * C254) *
               C7642 +
           (C7644 * C518 - C48548 * C523 + C7645 * C519 - C48535 * C524 +
            C7646 * C520 - C48503 * C525) *
               C7649 +
           (C7644 * C528 - C48548 * C533 + C7645 * C529 - C48535 * C534 +
            C7646 * C530 - C48503 * C535) *
               C48516) *
              C48239 * C48210 * C48193 * C111 +
          ((C48548 * C128 - C7644 * C121 + C48535 * C129 - C7645 * C122 +
            C48503 * C130 - C7646 * C123) *
               C7647 +
           (C48548 * C142 - C7644 * C133 + C48535 * C143 - C7645 * C134 +
            C48503 * C144 - C7646 * C135) *
               C7641 +
           (C48548 * C241 - C7644 * C235 + C48535 * C242 - C7645 * C236 +
            C48503 * C243 - C7646 * C237) *
               C7648 +
           (C48548 * C253 - C7644 * C246 + C48535 * C254 - C7645 * C247 +
            C48503 * C255 - C7646 * C248) *
               C7642 +
           (C48548 * C524 - C7644 * C519 + C48535 * C525 - C7645 * C520 +
            C48503 * C526 - C7646 * C521) *
               C7649 +
           (C48548 * C534 - C7644 * C529 + C48535 * C535 - C7645 * C530 +
            C48503 * C536 - C7646 * C531) *
               C48516) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 +
           (C48122 * C239 - C8908 * C233) * C8910 +
           (C48122 * C251 - C8908 * C244) * C8904 +
           (C48122 * C522 - C8908 * C517) * C8911 +
           (C48122 * C532 - C8908 * C527) * C8905 +
           (C48122 * C1162 - C8908 * C1158) * C8912 +
           (C48122 * C1170 - C8908 * C1165) * C8906 +
           (C48122 * C1643 - C8908 * C1640) * C8913 +
           (C48122 * C1649 - C8908 * C1646) * C8907) *
              C48239 * C48210 * C48193 * C110 +
          ((C8908 * C120 - C48122 * C127) * C8909 +
           (C8908 * C132 - C48122 * C141) * C8903 +
           (C8908 * C234 - C48122 * C240) * C8910 +
           (C8908 * C245 - C48122 * C252) * C8904 +
           (C8908 * C518 - C48122 * C523) * C8911 +
           (C8908 * C528 - C48122 * C533) * C8905 +
           (C8908 * C1159 - C48122 * C1163) * C8912 +
           (C8908 * C1166 - C48122 * C1171) * C8906 +
           (C8908 * C1641 - C48122 * C1644) * C8913 +
           (C8908 * C1647 - C48122 * C1650) * C8907) *
              C48239 * C48210 * C48193 * C111 +
          ((C48122 * C128 - C8908 * C121) * C8909 +
           (C48122 * C142 - C8908 * C133) * C8903 +
           (C48122 * C241 - C8908 * C235) * C8910 +
           (C48122 * C253 - C8908 * C246) * C8904 +
           (C48122 * C524 - C8908 * C519) * C8911 +
           (C48122 * C534 - C8908 * C529) * C8905 +
           (C48122 * C1164 - C8908 * C1160) * C8912 +
           (C48122 * C1172 - C8908 * C1167) * C8906 +
           (C48122 * C1645 - C8908 * C1642) * C8913 +
           (C48122 * C1651 - C8908 * C1648) * C8907) *
              C48239 * C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C48122 * C347 - C8908 * C341) * C7647 +
            (C48122 * C359 - C8908 * C352) * C7641 + (C9372 - C9371) * C7648 +
            (C9374 - C9373) * C7642 + (C9376 - C9375) * C7649 +
            (C9378 - C9377) * C48516) *
               C48541 +
           ((C48122 * C875 - C8908 * C870) * C7647 +
            (C48122 * C885 - C8908 * C880) * C7641 +
            (C48122 * C2264 - C8908 * C2258) * C7648 +
            (C48122 * C2276 - C8908 * C2267) * C7642 +
            (C48122 * C2270 - C8908 * C2261) * C7649 +
            (C48122 * C2279 - C8908 * C2273) * C48516) *
               C48519) *
              C48210 * C48193 * C110 +
          (((C8908 * C120 - C48122 * C127) * C7647 +
            (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
            (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
            (C9027 - C9028) * C48516) *
               C48552 +
           ((C8908 * C342 - C48122 * C348) * C7647 +
            (C8908 * C353 - C48122 * C360) * C7641 +
            (C8908 * C620 - C48122 * C625) * C7648 +
            (C8908 * C630 - C48122 * C635) * C7642 +
            (C8908 * C1369 - C48122 * C1373) * C7649 +
            (C8908 * C1376 - C48122 * C1381) * C48516) *
               C48541 +
           ((C8908 * C871 - C48122 * C876) * C7647 +
            (C8908 * C881 - C48122 * C886) * C7641 +
            (C8908 * C2259 - C48122 * C2265) * C7648 +
            (C8908 * C2268 - C48122 * C2277) * C7642 +
            (C8908 * C2262 - C48122 * C2271) * C7649 +
            (C8908 * C2274 - C48122 * C2280) * C48516) *
               C48519) *
              C48210 * C48193 * C111 +
          (((C48122 * C128 - C8908 * C121) * C7647 +
            (C48122 * C142 - C8908 * C133) * C7641 +
            (C48122 * C241 - C8908 * C235) * C7648 +
            (C48122 * C253 - C8908 * C246) * C7642 +
            (C48122 * C524 - C8908 * C519) * C7649 +
            (C48122 * C534 - C8908 * C529) * C48516) *
               C48552 +
           ((C48122 * C349 - C8908 * C343) * C7647 +
            (C48122 * C361 - C8908 * C354) * C7641 +
            (C48122 * C626 - C8908 * C621) * C7648 +
            (C48122 * C636 - C8908 * C631) * C7642 +
            (C48122 * C1374 - C8908 * C1370) * C7649 +
            (C48122 * C1382 - C8908 * C1377) * C48516) *
               C48541 +
           ((C48122 * C877 - C8908 * C872) * C7647 +
            (C48122 * C887 - C8908 * C882) * C7641 +
            (C48122 * C2266 - C8908 * C2260) * C7648 +
            (C48122 * C2278 - C8908 * C2269) * C7642 +
            (C48122 * C2272 - C8908 * C2263) * C7649 +
            (C48122 * C2281 - C8908 * C2275) * C48516) *
               C48519) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C48210 * C229 +
           ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
             C1008 * C1160 - C48503 * C1164) *
                C1011 +
            (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
             C1008 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C48210 * C229 +
           ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
            (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
            (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
            (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
            (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
             C48503 * C1168 - C1008 * C1161) *
                C1011 +
            (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
             C48503 * C1173 - C1008 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C48210 * C229 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C48210 * C229 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48227) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C1000 * C347 - C1006 * C341 + C1001 * C348 - C1007 * C342 +
              C48503 * C349 - C1008 * C343) *
                 C118 +
             (C1000 * C359 - C1006 * C352 + C1001 * C360 - C1007 * C353 +
              C48503 * C361 - C1008 * C354) *
                 C48227) *
                C48541 +
            ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
              C48503 * C877 - C1008 * C872) *
                 C118 +
             (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
              C48503 * C887 - C1008 * C882) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
              C1008 * C2260 - C48503 * C2266) *
                 C118 +
             (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
              C1008 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C1006 * C342 - C1000 * C348 + C1007 * C343 - C1001 * C349 +
              C1008 * C344 - C48503 * C350) *
                 C118 +
             (C1006 * C353 - C1000 * C360 + C1007 * C354 - C1001 * C361 +
              C1008 * C355 - C48503 * C362) *
                 C48227) *
                C48541 +
            ((C1006 * C871 - C1000 * C876 + C1007 * C872 - C1001 * C877 +
              C1008 * C873 - C48503 * C878) *
                 C118 +
             (C1006 * C881 - C1000 * C886 + C1007 * C882 - C1001 * C887 +
              C1008 * C883 - C48503 * C888) *
                 C48227) *
                C48519) *
               C48210 * C229 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C118 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48227) *
                C48552 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48503 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48503 * C637 - C1008 * C632) *
                 C48227) *
                C48541 +
            ((C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C118 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C229 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C229 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C229 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C229 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C48122 * C347 - C8908 * C341) * C7647 +
             (C48122 * C359 - C8908 * C352) * C7641 + (C9372 - C9371) * C7648 +
             (C9374 - C9373) * C7642 + (C9376 - C9375) * C7649 +
             (C9378 - C9377) * C48516) *
                C48541 +
            ((C48122 * C875 - C8908 * C870) * C7647 +
             (C48122 * C885 - C8908 * C880) * C7641 + (C9881 - C9882) * C7648 +
             (C9883 - C9884) * C7642 + (C9885 - C9886) * C7649 +
             (C9887 - C9888) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
             (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
             (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
             (C8908 * C9612 - C48122 * C9614) * C7649 +
             (C8908 * C9615 - C48122 * C9618) * C48516) *
                C48519) *
               C48210 * C48511) *
              C231 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C8908 * C342 - C48122 * C348) * C7647 +
             (C8908 * C353 - C48122 * C360) * C7641 + (C9889 - C9890) * C7648 +
             (C9891 - C9892) * C7642 + (C9893 - C9894) * C7649 +
             (C9895 - C9896) * C48516) *
                C48541 +
            ((C8908 * C871 - C48122 * C876) * C7647 +
             (C8908 * C881 - C48122 * C886) * C7641 + (C9897 - C9898) * C7648 +
             (C9899 - C9900) * C7642 + (C9901 - C9902) * C7649 +
             (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C229 +
           (((C9022 - C9021) * C7647 + (C9024 - C9023) * C7641 +
             (C9026 - C9025) * C7648 + (C9028 - C9027) * C7642 +
             (C9030 - C9029) * C7649 + (C9032 - C9031) * C48516) *
                C48552 +
            ((C9890 - C9889) * C7647 + (C9892 - C9891) * C7641 +
             (C9894 - C9893) * C7648 + (C9896 - C9895) * C7642 +
             (C48122 * C1824 - C8908 * C1821) * C7649 +
             (C48122 * C1830 - C8908 * C1827) * C48516) *
                C48541 +
            ((C9898 - C9897) * C7647 + (C9900 - C9899) * C7641 +
             (C9902 - C9901) * C7648 + (C9904 - C9903) * C7642 +
             (C48122 * C9877 - C8908 * C9876) * C7649 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C339 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1006 * C619 - C1000 * C624 + C1007 * C620 - C1001 * C625 +
             C1008 * C621 - C48503 * C626) *
                C1010 +
            (C1006 * C629 - C1000 * C634 + C1007 * C630 - C1001 * C635 +
             C1008 * C631 - C48503 * C636) *
                C48539 +
            (C1006 * C1368 - C1000 * C1372 + C1007 * C1369 - C1001 * C1373 +
             C1008 * C1370 - C48503 * C1374) *
                C1011 +
            (C1006 * C1375 - C1000 * C1380 + C1007 * C1376 - C1001 * C1381 +
             C1008 * C1377 - C48503 * C1382) *
                C48516) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C339 +
           ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
             C48503 * C350 - C1008 * C344) *
                C1009 +
            (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
             C48503 * C362 - C1008 * C355) *
                C48551 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48503 * C627 - C1008 * C622) *
                C1010 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48503 * C637 - C1008 * C632) *
                C48539 +
            (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
             C48503 * C1378 - C1008 * C1371) *
                C1011 +
            (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
             C48503 * C1383 - C1008 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C339 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48227) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C339 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C118 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48227) *
                C48552 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C118 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48227) *
                C48541 +
            ((C1000 * C2696 - C1006 * C2692 + C1001 * C2697 - C1007 * C2693 +
              C48503 * C2701 - C1008 * C2694) *
                 C118 +
             (C1000 * C2704 - C1006 * C2699 + C1001 * C2705 - C1007 * C2700 +
              C48503 * C2706 - C1008 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C7644 * C619 - C48548 * C624 + C7645 * C620 - C48535 * C625 +
             C7646 * C621 - C48503 * C626) *
                C7648 +
            (C7644 * C629 - C48548 * C634 + C7645 * C630 - C48535 * C635 +
             C7646 * C631 - C48503 * C636) *
                C7642 +
            (C7644 * C1368 - C48548 * C1372 + C7645 * C1369 - C48535 * C1373 +
             C7646 * C1370 - C48503 * C1374) *
                C7649 +
            (C7644 * C1375 - C48548 * C1380 + C7645 * C1376 - C48535 * C1381 +
             C7646 * C1377 - C48503 * C1382) *
                C48516) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C339 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 +
            (C8908 * C619 - C48122 * C624) * C8910 +
            (C8908 * C629 - C48122 * C634) * C8904 +
            (C8908 * C1368 - C48122 * C1372) * C8911 +
            (C8908 * C1375 - C48122 * C1380) * C8905 +
            (C8908 * C1820 - C48122 * C1823) * C8912 +
            (C8908 * C1826 - C48122 * C1829) * C8906 +
            (C8908 * C9118 - C48122 * C9120) * C8913 +
            (C8908 * C9121 - C48122 * C9124) * C8907) *
               C48239 * C48513) *
              C48193 * C231 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C339 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 +
             (C9376 - C9375) * C7649 + (C9378 - C9377) * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 +
             (C9885 - C9886) * C7649 + (C9887 - C9888) * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             (C9371 - C9372) * C7648 + (C9373 - C9374) * C7642 +
             (C9375 - C9376) * C7649 + (C9377 - C9378) * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             (C9882 - C9881) * C7648 + (C9884 - C9883) * C7642 +
             (C9886 - C9885) * C7649 + (C9888 - C9887) * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C8908 * C3157 - C48122 * C3160) * C7648 +
             (C8908 * C3163 - C48122 * C3166) * C7642 +
             (C8908 * C10050 - C48122 * C10052) * C7649 +
             (C8908 * C10053 - C48122 * C10056) * C48516) *
                C48519) *
               C48513) *
              C48193 * C231 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C339 +
           (((C10068 - C10067) * C7647 + (C10070 - C10069) * C7641 +
             (C9890 - C9889) * C7648 + (C9892 - C9891) * C7642 +
             (C9894 - C9893) * C7649 + (C9896 - C9895) * C48516) *
                C48552 +
            ((C10072 - C10071) * C7647 + (C10074 - C10073) * C7641 +
             (C9898 - C9897) * C7648 + (C9900 - C9899) * C7642 +
             (C9902 - C9901) * C7649 + (C9904 - C9903) * C48516) *
                C48541 +
            ((C48122 * C2696 - C8908 * C2692) * C7647 +
             (C48122 * C2704 - C8908 * C2699) * C7641 +
             (C48122 * C3161 - C8908 * C3158) * C7648 +
             (C48122 * C3167 - C8908 * C3164) * C7642 +
             (C48122 * C10054 - C8908 * C10051) * C7649 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
            (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
               C48239 * C48210 * C447 +
           ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 - C1001 * C1163 +
             C1008 * C1160 - C48503 * C1164) *
                C1011 +
            (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 - C1001 * C1171 +
             C1008 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C48210 * C447 +
           ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
            (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
            (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
            (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
            (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 - C1007 * C1160 +
             C48503 * C1168 - C1008 * C1161) *
                C1011 +
            (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 - C1007 * C1167 +
             C48503 * C1173 - C1008 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C48210 * C447 +
           ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C48210 * C447 +
           ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
             C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
             C105 * C249 - C117 * C238) *
                C118 +
            (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
             C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
             C105 * C256 - C117 * C250) *
                C48227) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
              C1008 * C2260 - C48503 * C2266) *
                 C118 +
             (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
              C1008 * C2269 - C48503 * C2278) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C48210 * C447 +
           (((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C118 +
             (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48227) *
                C48552 +
            ((C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
              C48503 * C627 - C1008 * C622) *
                 C118 +
             (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
              C48503 * C637 - C1008 * C632) *
                 C48227) *
                C48541 +
            ((C1000 * C2265 - C1006 * C2259 + C1001 * C2266 - C1007 * C2260 +
              C48503 * C2542 - C1008 * C2541) *
                 C118 +
             (C1000 * C2277 - C1006 * C2268 + C1001 * C2278 - C1007 * C2269 +
              C48503 * C2544 - C1008 * C2543) *
                 C48227) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
            (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
               C48239 * C48210 * C447 +
           ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 - C48535 * C1163 +
             C7646 * C1160 - C48503 * C1164) *
                C7649 +
            (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 - C48535 * C1171 +
             C7646 * C1167 - C48503 * C1172) *
                C48516) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C48210 * C447 +
           ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
            (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
            (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
            (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
            (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 - C7645 * C1160 +
             C48503 * C1168 - C7646 * C1161) *
                C7649 +
            (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 - C7645 * C1167 +
             C48503 * C1173 - C7646 * C1169) *
                C48516) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + (C9009 - C9010) * C8911 +
            (C9011 - C9012) * C8905 + (C9013 - C9014) * C8912 +
            (C9015 - C9016) * C8906 + (C9017 - C9018) * C8913 +
            (C9019 - C9020) * C8907) *
               C48239 * C48210 * C447 +
           ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C8908 * C8996 - C48122 * C8998) * C8913 +
            (C8908 * C8999 - C48122 * C9002) * C8907) *
               C48239 * C48210 * C48511) *
              C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C48210 * C447 +
           ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
            (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
            (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
            (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
            (C48122 * C9000 - C8908 * C8997) * C8913 +
            (C48122 * C9003 - C8908 * C9001) * C8907) *
               C48239 * C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 +
             (C9376 - C9375) * C7649 + (C9378 - C9377) * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 +
             (C9885 - C9886) * C7649 + (C9887 - C9888) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
             (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
             (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
             (C8908 * C9612 - C48122 * C9614) * C7649 +
             (C8908 * C9615 - C48122 * C9618) * C48516) *
                C48519) *
               C48210 * C48511) *
              C449 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C48210 * C447 +
           (((C9022 - C9021) * C7647 + (C9024 - C9023) * C7641 +
             (C9026 - C9025) * C7648 + (C9028 - C9027) * C7642 +
             (C9030 - C9029) * C7649 + (C9032 - C9031) * C48516) *
                C48552 +
            ((C9890 - C9889) * C7647 + (C9892 - C9891) * C7641 +
             (C9894 - C9893) * C7648 + (C9896 - C9895) * C7642 +
             (C48122 * C1824 - C8908 * C1821) * C7649 +
             (C48122 * C1830 - C8908 * C1827) * C48516) *
                C48541 +
            ((C9898 - C9897) * C7647 + (C9900 - C9899) * C7641 +
             (C9902 - C9901) * C7648 + (C9904 - C9903) * C7642 +
             (C48122 * C9877 - C8908 * C9876) * C7649 +
             (C48122 * C9879 - C8908 * C9878) * C48516) *
                C48519) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C48210 * C513 +
          ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
           (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
           (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
           (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
           (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
           (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
              C48239 * C48210 * C514 +
          (C1673 * C1009 + C1674 * C48551 +
           (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C1010 +
           (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48539 +
           (C1000 * C1643 - C1006 * C1640 + C1001 * C1644 - C1007 * C1641 +
            C48503 * C1645 - C1008 * C1642) *
               C1011 +
           (C1000 * C1649 - C1006 * C1646 + C1001 * C1650 - C1007 * C1647 +
            C48503 * C1651 - C1008 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C48210 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48227) *
              C48239 * C48210 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48227) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48227) *
               C48552 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
               C48541 +
           ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
            (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
               C48519) *
              C48210 * C513 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
               C48552 +
           ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
               C48541 +
           ((C1006 * C2258 - C1000 * C2264 + C1007 * C2259 - C1001 * C2265 +
             C1008 * C2260 - C48503 * C2266) *
                C118 +
            (C1006 * C2267 - C1000 * C2276 + C1007 * C2268 - C1001 * C2277 +
             C1008 * C2269 - C48503 * C2278) *
                C48227) *
               C48519) *
              C48210 * C514 +
          ((C1673 * C118 + C1674 * C48227) * C48552 +
           ((C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C118 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48227) *
               C48541 +
           ((C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
             C48503 * C2272 - C1008 * C2263) *
                C118 +
            (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
             C48503 * C2281 - C1008 * C2275) *
                C48227) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C48210 * C513 +
          ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
           (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
           (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
           (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
           (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
           (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
              C48239 * C48210 * C514 +
          (C8267 * C7647 + C8268 * C7641 +
           (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C7648 +
           (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C7642 +
           (C48548 * C1643 - C7644 * C1640 + C48535 * C1644 - C7645 * C1641 +
            C48503 * C1645 - C7646 * C1642) *
               C7649 +
           (C48548 * C1649 - C7644 * C1646 + C48535 * C1650 - C7645 * C1647 +
            C48503 * C1651 - C7646 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C48210 * C513 +
          ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
           (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
           (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
           (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
           (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
              C48239 * C48210 * C514 +
          (C9275 * C8909 + C9276 * C8903 + C9277 * C8910 + C9278 * C8904 +
           C9279 * C8911 + C9280 * C8905 + (C9282 - C9281) * C8912 +
           (C9284 - C9283) * C8906 + (C48122 * C9271 - C8908 * C9270) * C8913 +
           (C48122 * C9273 - C8908 * C9272) * C8907) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
            (C9372 - C9371) * C7648 + (C9374 - C9373) * C7642 + C10331 * C7649 +
            C10332 * C48516) *
               C48541 +
           ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
            (C9881 - C9882) * C7648 + (C9883 - C9884) * C7642 + C10333 * C7649 +
            C10334 * C48516) *
               C48519) *
              C48210 * C513 +
          (((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
            (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
            (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
               C48552 +
           ((C9371 - C9372) * C7647 + (C9373 - C9374) * C7641 +
            (C9375 - C9376) * C7648 + (C9377 - C9378) * C7642 +
            (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
               C48541 +
           ((C9882 - C9881) * C7647 + (C9884 - C9883) * C7641 +
            (C9886 - C9885) * C7648 + (C9888 - C9887) * C7642 +
            (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
               C48519) *
              C48210 * C514 +
          ((C9275 * C7647 + C9276 * C7641 + C9277 * C7648 + C9278 * C7642 +
            C9279 * C7649 + C9280 * C48516) *
               C48552 +
           (C10331 * C7647 + C10332 * C7641 + (C9380 - C9379) * C7648 +
            (C9382 - C9381) * C7642 + (C9384 - C9383) * C7649 +
            (C9386 - C9385) * C48516) *
               C48541 +
           (C10333 * C7647 + C10334 * C7641 + (C10336 - C10335) * C7648 +
            (C10338 - C10337) * C7642 +
            (C48122 * C9616 - C8908 * C9613) * C7649 +
            (C48122 * C9619 - C8908 * C9617) * C48516) *
               C48519) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C339 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C339 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C339 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C447 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C118 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48227) *
                C48519) *
               C339 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48227) *
                C48552 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C118 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48227) *
                C48541 +
            ((C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
              C48503 * C3162 - C1008 * C3159) *
                 C118 +
             (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
              C48503 * C3168 - C1008 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C447 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C339 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C339 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C447 +
          ((((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            (C10493 * C7647 + C10494 * C7641 + C10495 * C7648 + C10496 * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            (C10497 * C7647 + C10498 * C7641 + C10499 * C7648 + C10500 * C7642 +
             (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
                C48519) *
               C339 +
           ((C10489 * C7647 + C10490 * C7641 + C10331 * C7648 + C10332 * C7642 +
             (C9380 - C9379) * C7649 + (C9382 - C9381) * C48516) *
                C48552 +
            (C10491 * C7647 + C10492 * C7641 + C10333 * C7648 + C10334 * C7642 +
             (C10336 - C10335) * C7649 + (C10338 - C10337) * C48516) *
                C48541 +
            ((C10502 - C10501) * C7647 + (C10504 - C10503) * C7641 +
             (C10506 - C10505) * C7648 + (C10508 - C10507) * C7642 +
             (C48122 * C10485 - C8908 * C10484) * C7649 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C721 +
           ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
             C48503 * C350 - C1008 * C344) *
                C1009 +
            (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
             C48503 * C362 - C1008 * C355) *
                C48551 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48503 * C627 - C1008 * C622) *
                C1010 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48503 * C637 - C1008 * C632) *
                C48539 +
            (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
             C48503 * C1378 - C1008 * C1371) *
                C1011 +
            (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
             C48503 * C1383 - C1008 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48227) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
              C1008 * C122 - C48503 * C129) *
                 C118 +
             (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
              C1008 * C134 - C48503 * C143) *
                 C48227) *
                C48552 +
            ((C2732 - C2733 + C2734 - C2735 + C2736 - C2737) * C118 +
             (C2738 - C2739 + C2740 - C2741 + C2742 - C2743) * C48227) *
                C48541 +
            ((C2744 - C2745 + C2746 - C2747 + C2748 - C2749) * C118 +
             (C2750 - C2751 + C2752 - C2753 + C2754 - C2755) * C48227) *
                C48519) *
               C721 +
           (((C2733 - C2732 + C2735 - C2734 + C2737 - C2736) * C118 +
             (C2739 - C2738 + C2741 - C2740 + C2743 - C2742) * C48227) *
                C48552 +
            ((C2745 - C2744 + C2747 - C2746 + C2749 - C2748) * C118 +
             (C2751 - C2750 + C2753 - C2752 + C2755 - C2754) * C48227) *
                C48541 +
            ((C1000 * C2696 - C1006 * C2692 + C1001 * C2697 - C1007 * C2693 +
              C48503 * C2701 - C1008 * C2694) *
                 C118 +
             (C1000 * C2704 - C1006 * C2699 + C1001 * C2705 - C1007 * C2700 +
              C48503 * C2706 - C1008 * C2702) *
                 C48227) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C721 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C721 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C48193 * C449 +
          ((((C8908 * C120 - C48122 * C127) * C7647 +
             (C8908 * C132 - C48122 * C141) * C7641 + (C9021 - C9022) * C7648 +
             (C9023 - C9024) * C7642 + (C9025 - C9026) * C7649 +
             (C9027 - C9028) * C48516) *
                C48552 +
            ((C10067 - C10068) * C7647 + (C10069 - C10070) * C7641 +
             (C9889 - C9890) * C7648 + (C9891 - C9892) * C7642 +
             (C9893 - C9894) * C7649 + (C9895 - C9896) * C48516) *
                C48541 +
            ((C10071 - C10072) * C7647 + (C10073 - C10074) * C7641 +
             (C9897 - C9898) * C7648 + (C9899 - C9900) * C7642 +
             (C9901 - C9902) * C7649 + (C9903 - C9904) * C48516) *
                C48519) *
               C721 +
           (((C10068 - C10067) * C7647 + (C10070 - C10069) * C7641 +
             (C9890 - C9889) * C7648 + (C9892 - C9891) * C7642 +
             (C9894 - C9893) * C7649 + (C9896 - C9895) * C48516) *
                C48552 +
            ((C10072 - C10071) * C7647 + (C10074 - C10073) * C7641 +
             (C9898 - C9897) * C7648 + (C9900 - C9899) * C7642 +
             (C9902 - C9901) * C7649 + (C9904 - C9903) * C48516) *
                C48541 +
            ((C48122 * C2696 - C8908 * C2692) * C7647 +
             (C48122 * C2704 - C8908 * C2699) * C7641 +
             (C48122 * C3161 - C8908 * C3158) * C7648 +
             (C48122 * C3167 - C8908 * C3164) * C7642 +
             (C48122 * C10054 - C8908 * C10051) * C7649 +
             (C48122 * C10057 - C8908 * C10055) * C48516) *
                C48519) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C721 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
              C48503 * C128 - C1008 * C121) *
                 C118 +
             (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
              C48503 * C142 - C1008 * C133) *
                 C48227) *
                C48552 +
            ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
             (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
                C48541 +
            ((C2720 - C2721 + C2722 - C2723 + C2724 - C2725) * C118 +
             (C2726 - C2727 + C2728 - C2729 + C2730 - C2731) * C48227) *
                C48519) *
               C721 +
           (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
             (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
                C48552 +
            ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
             (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
                C48541 +
            ((C1006 * C2691 - C1000 * C2695 + C1007 * C2692 - C1001 * C2696 +
              C1008 * C2693 - C48503 * C2697) *
                 C118 +
             (C1006 * C2698 - C1000 * C2703 + C1007 * C2699 - C1001 * C2704 +
              C1008 * C2700 - C48503 * C2705) *
                 C48227) *
                C48519) *
               C48513) *
              C229 +
          ((((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C118 +
             (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48227) *
                C48552 +
            ((C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C118 +
             (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48227) *
                C48541 +
            ((C3170 - C3171 + C3172 - C3173 + C3174 - C3175) * C118 +
             (C3176 - C3177 + C3178 - C3179 + C3180 - C3181) * C48227) *
                C48519) *
               C721 +
           (((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C118 +
             (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48227) *
                C48552 +
            ((C3171 - C3170 + C3173 - C3172 + C3175 - C3174) * C118 +
             (C3177 - C3176 + C3179 - C3178 + C3181 - C3180) * C48227) *
                C48541 +
            ((C1000 * C3160 - C1006 * C3157 + C1001 * C3161 - C1007 * C3158 +
              C48503 * C3162 - C1008 * C3159) *
                 C118 +
             (C1000 * C3166 - C1006 * C3163 + C1001 * C3167 - C1007 * C3164 +
              C48503 * C3168 - C1008 * C3165) *
                 C48227) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C229 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C721 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48122 * C126 - C8908 * C119) * C7647 +
             (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
             (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
                C48552 +
            ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
             C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
             C10332 * C48516) *
                C48541 +
            ((C10063 - C10064) * C7647 + (C10065 - C10066) * C7641 +
             C10491 * C7648 + C10492 * C7642 + C10333 * C7649 +
             C10334 * C48516) *
                C48519) *
               C721 +
           (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
             C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
             C10496 * C48516) *
                C48552 +
            ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
             C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
             C10500 * C48516) *
                C48541 +
            ((C8908 * C2691 - C48122 * C2695) * C7647 +
             (C8908 * C2698 - C48122 * C2703) * C7641 +
             (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
             (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
                C48519) *
               C48513) *
              C229 +
          ((((C9006 - C9005) * C7647 + (C9008 - C9007) * C7641 +
             (C9010 - C9009) * C7648 + (C9012 - C9011) * C7642 +
             (C9014 - C9013) * C7649 + (C9016 - C9015) * C48516) *
                C48552 +
            (C10493 * C7647 + C10494 * C7641 + C10495 * C7648 + C10496 * C7642 +
             (C9379 - C9380) * C7649 + (C9381 - C9382) * C48516) *
                C48541 +
            (C10497 * C7647 + C10498 * C7641 + C10499 * C7648 + C10500 * C7642 +
             (C10335 - C10336) * C7649 + (C10337 - C10338) * C48516) *
                C48519) *
               C721 +
           ((C10489 * C7647 + C10490 * C7641 + C10331 * C7648 + C10332 * C7642 +
             (C9380 - C9379) * C7649 + (C9382 - C9381) * C48516) *
                C48552 +
            (C10491 * C7647 + C10492 * C7641 + C10333 * C7648 + C10334 * C7642 +
             (C10336 - C10335) * C7649 + (C10338 - C10337) * C48516) *
                C48541 +
            ((C10502 - C10501) * C7647 + (C10504 - C10503) * C7641 +
             (C10506 - C10505) * C7648 + (C10508 - C10507) * C7642 +
             (C48122 * C10485 - C8908 * C10484) * C7649 +
             (C48122 * C10487 - C8908 * C10486) * C48516) *
                C48519) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C867 +
          ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
            C1008 * C343 - C48503 * C349) *
               C1009 +
           (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
            C1008 * C354 - C48503 * C361) *
               C48551 +
           (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
           (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
           (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
           (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
              C48239 * C868 +
          ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
            C48503 * C877 - C1008 * C872) *
               C1009 +
           (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
            C48503 * C887 - C1008 * C882) *
               C48551 +
           (C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
            C48503 * C2266 - C1008 * C2260) *
               C1010 +
           (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
            C48503 * C2278 - C1008 * C2269) *
               C48539 +
           (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
            C48503 * C2272 - C1008 * C2263) *
               C1011 +
           (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
            C48503 * C2281 - C1008 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48227) *
              C48239 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48227) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C118 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48227) *
               C48552 +
           ((C2708 - C2709 + C2710 - C2711 + C2712 - C2713) * C118 +
            (C2714 - C2715 + C2716 - C2717 + C2718 - C2719) * C48227) *
               C48541 +
           C3620 * C48519) *
              C867 +
          (((C2709 - C2708 + C2711 - C2710 + C2713 - C2712) * C118 +
            (C2715 - C2714 + C2717 - C2716 + C2719 - C2718) * C48227) *
               C48552 +
           ((C2721 - C2720 + C2723 - C2722 + C2725 - C2724) * C118 +
            (C2727 - C2726 + C2729 - C2728 + C2731 - C2730) * C48227) *
               C48541 +
           ((C3602 - C3603 + C3604 - C3605 + C3606 - C3607) * C118 +
            (C3608 - C3609 + C3610 - C3611 + C3612 - C3613) * C48227) *
               C48519) *
              C868 +
          (C3620 * C48552 +
           ((C3603 - C3602 + C3605 - C3604 + C3607 - C3606) * C118 +
            (C3609 - C3608 + C3611 - C3610 + C3613 - C3612) * C48227) *
               C48541 +
           ((C1000 * C3586 - C1006 * C3583 + C1001 * C3587 - C1007 * C3584 +
             C48503 * C3588 - C1008 * C3585) *
                C118 +
            (C1000 * C3592 - C1006 * C3589 + C1001 * C3593 - C1007 * C3590 +
             C48503 * C3594 - C1008 * C3591) *
                C48227) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C867 +
          ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
            C7646 * C343 - C48503 * C349) *
               C7647 +
           (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
            C7646 * C354 - C48503 * C361) *
               C7641 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
           (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
           (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
              C48239 * C868 +
          ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
            C48503 * C877 - C7646 * C872) *
               C7647 +
           (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
            C48503 * C887 - C7646 * C882) *
               C7641 +
           (C48548 * C2264 - C7644 * C2258 + C48535 * C2265 - C7645 * C2259 +
            C48503 * C2266 - C7646 * C2260) *
               C7648 +
           (C48548 * C2276 - C7644 * C2267 + C48535 * C2277 - C7645 * C2268 +
            C48503 * C2278 - C7646 * C2269) *
               C7642 +
           (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
            C48503 * C2272 - C7646 * C2263) *
               C7649 +
           (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
            C48503 * C2281 - C7646 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C867 +
          ((C8908 * C341 - C48122 * C347) * C8909 +
           (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
           (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
           (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
           (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
           (C9385 - C9386) * C8907) *
              C48239 * C868 +
          ((C48122 * C875 - C8908 * C870) * C8909 +
           (C48122 * C885 - C8908 * C880) * C8903 +
           (C48122 * C2264 - C8908 * C2258) * C8910 +
           (C48122 * C2276 - C8908 * C2267) * C8904 +
           (C48122 * C2270 - C8908 * C2261) * C8911 +
           (C48122 * C2279 - C8908 * C2273) * C8905 +
           (C48122 * C9614 - C8908 * C9612) * C8912 +
           (C48122 * C9618 - C8908 * C9615) * C8906 +
           (C48122 * C9616 - C8908 * C9613) * C8913 +
           (C48122 * C9619 - C8908 * C9617) * C8907) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C7647 +
            (C48122 * C140 - C8908 * C131) * C7641 + (C9005 - C9006) * C7648 +
            (C9007 - C9008) * C7642 + C9275 * C7649 + C9276 * C48516) *
               C48552 +
           ((C10059 - C10060) * C7647 + (C10061 - C10062) * C7641 +
            C10489 * C7648 + C10490 * C7642 + C10331 * C7649 +
            C10332 * C48516) *
               C48541 +
           C10935 * C48519) *
              C867 +
          (((C10060 - C10059) * C7647 + (C10062 - C10061) * C7641 +
            C10493 * C7648 + C10494 * C7642 + C10495 * C7649 +
            C10496 * C48516) *
               C48552 +
           ((C10064 - C10063) * C7647 + (C10066 - C10065) * C7641 +
            C10497 * C7648 + C10498 * C7642 + C10499 * C7649 +
            C10500 * C48516) *
               C48541 +
           ((C10925 - C10926) * C7647 + (C10927 - C10928) * C7641 +
            (C10501 - C10502) * C7648 + (C10503 - C10504) * C7642 +
            (C10505 - C10506) * C7649 + (C10507 - C10508) * C48516) *
               C48519) *
              C868 +
          (C10935 * C48552 +
           ((C10926 - C10925) * C7647 + (C10928 - C10927) * C7641 +
            (C10502 - C10501) * C7648 + (C10504 - C10503) * C7642 +
            (C10506 - C10505) * C7649 + (C10508 - C10507) * C48516) *
               C48541 +
           ((C48122 * C3586 - C8908 * C3583) * C7647 +
            (C48122 * C3592 - C8908 * C3589) * C7641 +
            (C48122 * C10912 - C8908 * C10910) * C7648 +
            (C48122 * C10916 - C8908 * C10913) * C7642 +
            (C48122 * C10914 - C8908 * C10911) * C7649 +
            (C48122 * C10917 - C8908 * C10915) * C48516) *
               C48519) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
             C3720 * C349 - C3726 * C343 + C48520 * C350 - C3727 * C344) *
                C118 +
            (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
             C3720 * C361 - C3726 * C354 + C48520 * C362 - C3727 * C355) *
                C48227) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
             C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                C118 +
            (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
             C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                C48227) *
               C48484 +
           ((C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
             C3726 * C344 - C3720 * C350 + C3727 * C345 - C48520 * C351) *
                C118 +
            (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
             C3726 * C355 - C3720 * C362 + C3727 * C356 - C48520 * C363) *
                C48227) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C3718 * C128 - C3724 * C121 + C3719 * C129 - C3725 * C122 +
             C3720 * C130 - C3726 * C123 + C48520 * C136 - C3727 * C124) *
                C118 +
            (C3718 * C142 - C3724 * C133 + C3719 * C143 - C3725 * C134 +
             C3720 * C144 - C3726 * C135 + C48520 * C145 - C3727 * C137) *
                C48227) *
               C48484 +
           ((C3718 * C349 - C3724 * C343 + C3719 * C350 - C3725 * C344 +
             C3720 * C351 - C3726 * C345 + C48520 * C357 - C3727 * C346) *
                C118 +
            (C3718 * C361 - C3724 * C354 + C3719 * C362 - C3725 * C355 +
             C3720 * C363 - C3726 * C356 + C48520 * C364 - C3727 * C358) *
                C48227) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C48461 * C347 - C47223 * C341 + C48132 * C348 - C47204 * C342) *
                C7647 +
            (C48461 * C359 - C47223 * C352 + C48132 * C360 - C47204 * C353) *
                C7641 +
            (C11733 - C11732 + C11735 - C11734) * C7648 +
            (C11737 - C11736 + C11739 - C11738) * C7642 +
            (C11741 - C11740 + C11743 - C11742) * C7649 +
            (C11745 - C11744 + C11747 - C11746) * C48516) *
               C48326) *
              C48210 * C48193 * C110 +
          (((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                C7647 +
            (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                C7641 +
            (C11200 - C11201 + C11202 - C11203) * C7648 +
            (C11204 - C11205 + C11206 - C11207) * C7642 +
            (C11208 - C11209 + C11210 - C11211) * C7649 +
            (C11212 - C11213 + C11214 - C11215) * C48516) *
               C48484 +
           ((C47223 * C342 - C48461 * C348 + C47204 * C343 - C48132 * C349) *
                C7647 +
            (C47223 * C353 - C48461 * C360 + C47204 * C354 - C48132 * C361) *
                C7641 +
            (C47223 * C620 - C48461 * C625 + C47204 * C621 - C48132 * C626) *
                C7648 +
            (C47223 * C630 - C48461 * C635 + C47204 * C631 - C48132 * C636) *
                C7642 +
            (C47223 * C1369 - C48461 * C1373 + C47204 * C1370 -
             C48132 * C1374) *
                C7649 +
            (C47223 * C1376 - C48461 * C1381 + C47204 * C1377 -
             C48132 * C1382) *
                C48516) *
               C48326) *
              C48210 * C48193 * C111 +
          (((C48461 * C128 - C47223 * C121 + C48132 * C129 - C47204 * C122) *
                C7647 +
            (C48461 * C142 - C47223 * C133 + C48132 * C143 - C47204 * C134) *
                C7641 +
            (C48461 * C241 - C47223 * C235 + C48132 * C242 - C47204 * C236) *
                C7648 +
            (C48461 * C253 - C47223 * C246 + C48132 * C254 - C47204 * C247) *
                C7642 +
            (C48461 * C524 - C47223 * C519 + C48132 * C525 - C47204 * C520) *
                C7649 +
            (C48461 * C534 - C47223 * C529 + C48132 * C535 - C47204 * C530) *
                C48516) *
               C48484 +
           ((C48461 * C349 - C47223 * C343 + C48132 * C350 - C47204 * C344) *
                C7647 +
            (C48461 * C361 - C47223 * C354 + C48132 * C362 - C47204 * C355) *
                C7641 +
            (C48461 * C626 - C47223 * C621 + C48132 * C627 - C47204 * C622) *
                C7648 +
            (C48461 * C636 - C47223 * C631 + C48132 * C637 - C47204 * C632) *
                C7642 +
            (C48461 * C1374 - C47223 * C1370 + C48132 * C1378 -
             C47204 * C1371) *
                C7649 +
            (C48461 * C1382 - C47223 * C1377 + C48132 * C1383 -
             C47204 * C1379) *
                C48516) *
               C48326) *
              C48210 * C48193 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C3718 * C347 - C3724 * C341 + C3719 * C348 - C3725 * C342 +
              C3720 * C349 - C3726 * C343 + C48520 * C350 - C3727 * C344) *
                 C118 +
             (C3718 * C359 - C3724 * C352 + C3719 * C360 - C3725 * C353 +
              C3720 * C361 - C3726 * C354 + C48520 * C362 - C3727 * C355) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C3724 * C342 - C3718 * C348 + C3725 * C343 - C3719 * C349 +
              C3726 * C344 - C3720 * C350 + C3727 * C345 - C48520 * C351) *
                 C118 +
             (C3724 * C353 - C3718 * C360 + C3725 * C354 - C3719 * C361 +
              C3726 * C355 - C3720 * C362 + C3727 * C356 - C48520 * C363) *
                 C48227) *
                C48326) *
               C48210 * C229 +
           (((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                 C118 +
             (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                 C48227) *
                C48484 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C48461 * C347 - C47223 * C341 + C48132 * C348 - C47204 * C342) *
                 C7647 +
             (C48461 * C359 - C47223 * C352 + C48132 * C360 - C47204 * C353) *
                 C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            ((C11732 - C11733 + C11734 - C11735) * C7647 +
             (C11736 - C11737 + C11738 - C11739) * C7641 +
             (C11740 - C11741 + C11742 - C11743) * C7648 +
             (C11744 - C11745 + C11746 - C11747) * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C48210 * C48511) *
              C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C47223 * C342 - C48461 * C348 + C47204 * C343 - C48132 * C349) *
                 C7647 +
             (C47223 * C353 - C48461 * C360 + C47204 * C354 - C48132 * C361) *
                 C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C48210 * C229 +
           (((C11201 - C11200 + C11203 - C11202) * C7647 +
             (C11205 - C11204 + C11207 - C11206) * C7641 +
             (C11209 - C11208 + C11211 - C11210) * C7648 +
             (C11213 - C11212 + C11215 - C11214) * C7642 +
             (C11217 - C11216 + C11219 - C11218) * C7649 +
             (C11221 - C11220 + C11223 - C11222) * C48516) *
                C48484 +
            ((C12455 - C12454 + C12457 - C12456) * C7647 +
             (C12459 - C12458 + C12461 - C12460) * C7641 +
             (C12463 - C12462 + C12465 - C12464) * C7648 +
             (C12467 - C12466 + C12469 - C12468) * C7642 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C7649 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C339 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C339 +
           (((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                 C118 +
             (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                 C48227) *
                C48484 +
            ((C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
              C3720 * C878 - C3726 * C873 + C48520 * C879 - C3727 * C874) *
                 C118 +
             (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
              C3720 * C888 - C3726 * C883 + C48520 * C889 - C3727 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 +
             (C11732 - C11733 + C11734 - C11735) * C7648 +
             (C11736 - C11737 + C11738 - C11739) * C7642 +
             (C11740 - C11741 + C11742 - C11743) * C7649 +
             (C11744 - C11745 + C11746 - C11747) * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C47223 * C2258 - C48461 * C2264 + C47204 * C2259 -
              C48132 * C2265) *
                 C7648 +
             (C47223 * C2267 - C48461 * C2276 + C47204 * C2268 -
              C48132 * C2277) *
                 C7642 +
             (C47223 * C2261 - C48461 * C2270 + C47204 * C2262 -
              C48132 * C2271) *
                 C7649 +
             (C47223 * C2273 - C48461 * C2279 + C47204 * C2274 -
              C48132 * C2280) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C231 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C339 +
           (((C12673 - C12672 + C12675 - C12674) * C7647 +
             (C12677 - C12676 + C12679 - C12678) * C7641 +
             (C12455 - C12454 + C12457 - C12456) * C7648 +
             (C12459 - C12458 + C12461 - C12460) * C7642 +
             (C12463 - C12462 + C12465 - C12464) * C7649 +
             (C12467 - C12466 + C12469 - C12468) * C48516) *
                C48484 +
            ((C48461 * C876 - C47223 * C871 + C48132 * C877 - C47204 * C872) *
                 C7647 +
             (C48461 * C886 - C47223 * C881 + C48132 * C887 - C47204 * C882) *
                 C7641 +
             (C48461 * C2265 - C47223 * C2259 + C48132 * C2266 -
              C47204 * C2260) *
                 C7648 +
             (C48461 * C2277 - C47223 * C2268 + C48132 * C2278 -
              C47204 * C2269) *
                 C7642 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C7649 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C48210 * C447 +
           (((C3878 - C3877 + C3880 - C3879 + C3882 - C3881 + C3884 - C3883) *
                 C118 +
             (C3886 - C3885 + C3888 - C3887 + C3890 - C3889 + C3892 - C3891) *
                 C48227) *
                C48484 +
            ((C3718 * C625 - C3724 * C620 + C3719 * C626 - C3725 * C621 +
              C3720 * C627 - C3726 * C622 + C48520 * C628 - C3727 * C623) *
                 C118 +
             (C3718 * C635 - C3724 * C630 + C3719 * C636 - C3725 * C631 +
              C3720 * C637 - C3726 * C632 + C48520 * C638 - C3727 * C633) *
                 C48227) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 +
             (C11733 - C11732 + C11735 - C11734) * C7648 +
             (C11737 - C11736 + C11739 - C11738) * C7642 +
             (C11741 - C11740 + C11743 - C11742) * C7649 +
             (C11745 - C11744 + C11747 - C11746) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            ((C11732 - C11733 + C11734 - C11735) * C7647 +
             (C11736 - C11737 + C11738 - C11739) * C7641 +
             (C11740 - C11741 + C11742 - C11743) * C7648 +
             (C11744 - C11745 + C11746 - C11747) * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C48210 * C48511) *
              C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C48210 * C447 +
           (((C11201 - C11200 + C11203 - C11202) * C7647 +
             (C11205 - C11204 + C11207 - C11206) * C7641 +
             (C11209 - C11208 + C11211 - C11210) * C7648 +
             (C11213 - C11212 + C11215 - C11214) * C7642 +
             (C11217 - C11216 + C11219 - C11218) * C7649 +
             (C11221 - C11220 + C11223 - C11222) * C48516) *
                C48484 +
            ((C12455 - C12454 + C12457 - C12456) * C7647 +
             (C12459 - C12458 + C12461 - C12460) * C7641 +
             (C12463 - C12462 + C12465 - C12464) * C7648 +
             (C12467 - C12466 + C12469 - C12468) * C7642 +
             (C48461 * C1824 - C47223 * C1821 + C48132 * C1825 -
              C47204 * C1822) *
                 C7649 +
             (C48461 * C1830 - C47223 * C1827 + C48132 * C1831 -
              C47204 * C1828) *
                 C48516) *
                C48326) *
               C48210 * C48511) *
              C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C118 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48227) *
               C48326) *
              C48210 * C513 +
          (((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                C118 +
            (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                C48227) *
               C48484 +
           ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                C118 +
            (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                C48227) *
               C48326) *
              C48210 * C514 +
          (((C4252 - C4251 + C4254 - C4253 + C4256 - C4255 + C4258 - C4257) *
                C118 +
            (C4260 - C4259 + C4262 - C4261 + C4264 - C4263 + C4266 - C4265) *
                C48227) *
               C48484 +
           ((C3718 * C1372 - C3724 * C1368 + C3719 * C1373 - C3725 * C1369 +
             C3720 * C1374 - C3726 * C1370 + C48520 * C1378 - C3727 * C1371) *
                C118 +
            (C3718 * C1380 - C3724 * C1375 + C3719 * C1381 - C3725 * C1376 +
             C3720 * C1382 - C3726 * C1377 + C48520 * C1383 - C3727 * C1379) *
                C48227) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C12664 - C12665 + C12666 - C12667) * C7647 +
            (C12668 - C12669 + C12670 - C12671) * C7641 +
            (C11733 - C11732 + C11735 - C11734) * C7648 +
            (C11737 - C11736 + C11739 - C11738) * C7642 + C13024 * C7649 +
            C13025 * C48516) *
               C48326) *
              C48210 * C513 +
          (((C11177 - C11176 + C11179 - C11178) * C7647 +
            (C11181 - C11180 + C11183 - C11182) * C7641 +
            (C11185 - C11184 + C11187 - C11186) * C7648 +
            (C11189 - C11188 + C11191 - C11190) * C7642 +
            (C11193 - C11192 + C11195 - C11194) * C7649 +
            (C11197 - C11196 + C11199 - C11198) * C48516) *
               C48484 +
           ((C11732 - C11733 + C11734 - C11735) * C7647 +
            (C11736 - C11737 + C11738 - C11739) * C7641 +
            (C11740 - C11741 + C11742 - C11743) * C7648 +
            (C11744 - C11745 + C11746 - C11747) * C7642 +
            (C11748 - C11749 + C11750 - C11751) * C7649 +
            (C11752 - C11753 + C11754 - C11755) * C48516) *
               C48326) *
              C48210 * C514 +
          ((C11598 * C7647 + C11599 * C7641 + C11600 * C7648 + C11601 * C7642 +
            (C11591 - C11590 + C11593 - C11592) * C7649 +
            (C11595 - C11594 + C11597 - C11596) * C48516) *
               C48484 +
           (C13024 * C7647 + C13025 * C7641 +
            (C11749 - C11748 + C11751 - C11750) * C7648 +
            (C11753 - C11752 + C11755 - C11754) * C7642 +
            (C48461 * C9120 - C47223 * C9118 + C48132 * C9122 -
             C47204 * C9119) *
                C7649 +
            (C48461 * C9124 - C47223 * C9121 + C48132 * C9125 -
             C47204 * C9123) *
                C48516) *
               C48326) *
              C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C339 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C447 +
          ((((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C339 +
           (((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                 C118 +
             (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                 C48227) *
                C48484 +
            ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
              C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
                 C118 +
             (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
              C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C339 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C447 +
          ((((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            (C13250 * C7647 + C13251 * C7641 + C13252 * C7648 + C13253 * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C339 +
           ((C13248 * C7647 + C13249 * C7641 + C13024 * C7648 + C13025 * C7642 +
             (C11749 - C11748 + C11751 - C11750) * C7649 +
             (C11753 - C11752 + C11755 - C11754) * C48516) *
                C48484 +
            ((C13233 - C13232 + C13235 - C13234) * C7647 +
             (C13237 - C13236 + C13239 - C13238) * C7641 +
             (C13241 - C13240 + C13243 - C13242) * C7648 +
             (C13245 - C13244 + C13247 - C13246) * C7642 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C7649 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C721 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C3724 * C120 - C3718 * C127 + C3725 * C121 - C3719 * C128 +
              C3726 * C122 - C3720 * C129 + C3727 * C123 - C48520 * C130) *
                 C118 +
             (C3724 * C132 - C3718 * C141 + C3725 * C133 - C3719 * C142 +
              C3726 * C134 - C3720 * C143 + C3727 * C135 - C48520 * C144) *
                 C48227) *
                C48484 +
            ((C5147 - C5148 + C5149 - C5150 + C5151 - C5152 + C5153 - C5154) *
                 C118 +
             (C5155 - C5156 + C5157 - C5158 + C5159 - C5160 + C5161 - C5162) *
                 C48227) *
                C48326) *
               C721 +
           (((C5148 - C5147 + C5150 - C5149 + C5152 - C5151 + C5154 - C5153) *
                 C118 +
             (C5156 - C5155 + C5158 - C5157 + C5160 - C5159 + C5162 - C5161) *
                 C48227) *
                C48484 +
            ((C3718 * C876 - C3724 * C871 + C3719 * C877 - C3725 * C872 +
              C3720 * C878 - C3726 * C873 + C48520 * C879 - C3727 * C874) *
                 C118 +
             (C3718 * C886 - C3724 * C881 + C3719 * C887 - C3725 * C882 +
              C3720 * C888 - C3726 * C883 + C48520 * C889 - C3727 * C884) *
                 C48227) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C48193 * C449 +
          ((((C47223 * C120 - C48461 * C127 + C47204 * C121 - C48132 * C128) *
                 C7647 +
             (C47223 * C132 - C48461 * C141 + C47204 * C133 - C48132 * C142) *
                 C7641 +
             (C11200 - C11201 + C11202 - C11203) * C7648 +
             (C11204 - C11205 + C11206 - C11207) * C7642 +
             (C11208 - C11209 + C11210 - C11211) * C7649 +
             (C11212 - C11213 + C11214 - C11215) * C48516) *
                C48484 +
            ((C12672 - C12673 + C12674 - C12675) * C7647 +
             (C12676 - C12677 + C12678 - C12679) * C7641 +
             (C12454 - C12455 + C12456 - C12457) * C7648 +
             (C12458 - C12459 + C12460 - C12461) * C7642 +
             (C12462 - C12463 + C12464 - C12465) * C7649 +
             (C12466 - C12467 + C12468 - C12469) * C48516) *
                C48326) *
               C721 +
           (((C12673 - C12672 + C12675 - C12674) * C7647 +
             (C12677 - C12676 + C12679 - C12678) * C7641 +
             (C12455 - C12454 + C12457 - C12456) * C7648 +
             (C12459 - C12458 + C12461 - C12460) * C7642 +
             (C12463 - C12462 + C12465 - C12464) * C7649 +
             (C12467 - C12466 + C12469 - C12468) * C48516) *
                C48484 +
            ((C48461 * C876 - C47223 * C871 + C48132 * C877 - C47204 * C872) *
                 C7647 +
             (C48461 * C886 - C47223 * C881 + C48132 * C887 - C47204 * C882) *
                 C7641 +
             (C48461 * C2265 - C47223 * C2259 + C48132 * C2266 -
              C47204 * C2260) *
                 C7648 +
             (C48461 * C2277 - C47223 * C2268 + C48132 * C2278 -
              C47204 * C2269) *
                 C7642 +
             (C48461 * C2271 - C47223 * C2262 + C48132 * C2272 -
              C47204 * C2263) *
                 C7649 +
             (C48461 * C2280 - C47223 * C2274 + C48132 * C2281 -
              C47204 * C2275) *
                 C48516) *
                C48326) *
               C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
              C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                 C118 +
             (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
              C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                 C48227) *
                C48484 +
            ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                 C118 +
             (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                 C48227) *
                C48326) *
               C721 +
           (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                 C118 +
             (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                 C48227) *
                C48484 +
            ((C3724 * C870 - C3718 * C875 + C3725 * C871 - C3719 * C876 +
              C3726 * C872 - C3720 * C877 + C3727 * C873 - C48520 * C878) *
                 C118 +
             (C3724 * C880 - C3718 * C885 + C3725 * C881 - C3719 * C886 +
              C3726 * C882 - C3720 * C887 + C3727 * C883 - C48520 * C888) *
                 C48227) *
                C48326) *
               C48513) *
              C229 +
          ((((C3862 - C3861 + C3864 - C3863 + C3866 - C3865 + C3868 - C3867) *
                 C118 +
             (C3870 - C3869 + C3872 - C3871 + C3874 - C3873 + C3876 - C3875) *
                 C48227) *
                C48484 +
            ((C4397 - C4398 + C4399 - C4400 + C4401 - C4402 + C4403 - C4404) *
                 C118 +
             (C4405 - C4406 + C4407 - C4408 + C4409 - C4410 + C4411 - C4412) *
                 C48227) *
                C48326) *
               C721 +
           (((C4398 - C4397 + C4400 - C4399 + C4402 - C4401 + C4404 - C4403) *
                 C118 +
             (C4406 - C4405 + C4408 - C4407 + C4410 - C4409 + C4412 - C4411) *
                 C48227) *
                C48484 +
            ((C3718 * C2264 - C3724 * C2258 + C3719 * C2265 - C3725 * C2259 +
              C3720 * C2266 - C3726 * C2260 + C48520 * C2542 - C3727 * C2541) *
                 C118 +
             (C3718 * C2276 - C3724 * C2267 + C3719 * C2277 - C3725 * C2268 +
              C3720 * C2278 - C3726 * C2269 + C48520 * C2544 - C3727 * C2543) *
                 C48227) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                 C7647 +
             (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                 C7641 +
             (C11176 - C11177 + C11178 - C11179) * C7648 +
             (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
             C11599 * C48516) *
                C48484 +
            ((C12664 - C12665 + C12666 - C12667) * C7647 +
             (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
             C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
                C48326) *
               C721 +
           (((C12665 - C12664 + C12667 - C12666) * C7647 +
             (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
             C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
                C48484 +
            ((C47223 * C870 - C48461 * C875 + C47204 * C871 - C48132 * C876) *
                 C7647 +
             (C47223 * C880 - C48461 * C885 + C47204 * C881 - C48132 * C886) *
                 C7641 +
             (C13232 - C13233 + C13234 - C13235) * C7648 +
             (C13236 - C13237 + C13238 - C13239) * C7642 +
             (C13240 - C13241 + C13242 - C13243) * C7649 +
             (C13244 - C13245 + C13246 - C13247) * C48516) *
                C48326) *
               C48513) *
              C229 +
          ((((C11177 - C11176 + C11179 - C11178) * C7647 +
             (C11181 - C11180 + C11183 - C11182) * C7641 +
             (C11185 - C11184 + C11187 - C11186) * C7648 +
             (C11189 - C11188 + C11191 - C11190) * C7642 +
             (C11193 - C11192 + C11195 - C11194) * C7649 +
             (C11197 - C11196 + C11199 - C11198) * C48516) *
                C48484 +
            (C13250 * C7647 + C13251 * C7641 + C13252 * C7648 + C13253 * C7642 +
             (C11748 - C11749 + C11750 - C11751) * C7649 +
             (C11752 - C11753 + C11754 - C11755) * C48516) *
                C48326) *
               C721 +
           ((C13248 * C7647 + C13249 * C7641 + C13024 * C7648 + C13025 * C7642 +
             (C11749 - C11748 + C11751 - C11750) * C7649 +
             (C11753 - C11752 + C11755 - C11754) * C48516) *
                C48484 +
            ((C13233 - C13232 + C13235 - C13234) * C7647 +
             (C13237 - C13236 + C13239 - C13238) * C7641 +
             (C13241 - C13240 + C13243 - C13242) * C7648 +
             (C13245 - C13244 + C13247 - C13246) * C7642 +
             (C48461 * C9614 - C47223 * C9612 + C48132 * C9877 -
              C47204 * C9876) *
                 C7649 +
             (C48461 * C9618 - C47223 * C9615 + C48132 * C9879 -
              C47204 * C9878) *
                 C48516) *
                C48326) *
               C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3718 * C126 - C3724 * C119 + C3719 * C127 - C3725 * C120 +
             C3720 * C128 - C3726 * C121 + C48520 * C129 - C3727 * C122) *
                C118 +
            (C3718 * C140 - C3724 * C131 + C3719 * C141 - C3725 * C132 +
             C3720 * C142 - C3726 * C133 + C48520 * C143 - C3727 * C134) *
                C48227) *
               C48484 +
           ((C5131 - C5132 + C5133 - C5134 + C5135 - C5136 + C5137 - C5138) *
                C118 +
            (C5139 - C5140 + C5141 - C5142 + C5143 - C5144 + C5145 - C5146) *
                C48227) *
               C48326) *
              C867 +
          (((C5132 - C5131 + C5134 - C5133 + C5136 - C5135 + C5138 - C5137) *
                C118 +
            (C5140 - C5139 + C5142 - C5141 + C5144 - C5143 + C5146 - C5145) *
                C48227) *
               C48484 +
           ((C5879 - C5880 + C5881 - C5882 + C5883 - C5884 + C5885 - C5886) *
                C118 +
            (C5887 - C5888 + C5889 - C5890 + C5891 - C5892 + C5893 - C5894) *
                C48227) *
               C48326) *
              C868 +
          (((C5880 - C5879 + C5882 - C5881 + C5884 - C5883 + C5886 - C5885) *
                C118 +
            (C5888 - C5887 + C5890 - C5889 + C5892 - C5891 + C5894 - C5893) *
                C48227) *
               C48484 +
           ((C3718 * C2695 - C3724 * C2691 + C3719 * C2696 - C3725 * C2692 +
             C3720 * C2697 - C3726 * C2693 + C48520 * C2701 - C3727 * C2694) *
                C118 +
            (C3718 * C2703 - C3724 * C2698 + C3719 * C2704 - C3725 * C2699 +
             C3720 * C2705 - C3726 * C2700 + C48520 * C2706 - C3727 * C2702) *
                C48227) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48461 * C126 - C47223 * C119 + C48132 * C127 - C47204 * C120) *
                C7647 +
            (C48461 * C140 - C47223 * C131 + C48132 * C141 - C47204 * C132) *
                C7641 +
            (C11176 - C11177 + C11178 - C11179) * C7648 +
            (C11180 - C11181 + C11182 - C11183) * C7642 + C11598 * C7649 +
            C11599 * C48516) *
               C48484 +
           ((C12664 - C12665 + C12666 - C12667) * C7647 +
            (C12668 - C12669 + C12670 - C12671) * C7641 + C13248 * C7648 +
            C13249 * C7642 + C13024 * C7649 + C13025 * C48516) *
               C48326) *
              C867 +
          (((C12665 - C12664 + C12667 - C12666) * C7647 +
            (C12669 - C12668 + C12671 - C12670) * C7641 + C13250 * C7648 +
            C13251 * C7642 + C13252 * C7649 + C13253 * C48516) *
               C48484 +
           ((C13788 - C13789 + C13790 - C13791) * C7647 +
            (C13792 - C13793 + C13794 - C13795) * C7641 +
            (C13232 - C13233 + C13234 - C13235) * C7648 +
            (C13236 - C13237 + C13238 - C13239) * C7642 +
            (C13240 - C13241 + C13242 - C13243) * C7649 +
            (C13244 - C13245 + C13246 - C13247) * C48516) *
               C48326) *
              C868 +
          (((C13789 - C13788 + C13791 - C13790) * C7647 +
            (C13793 - C13792 + C13795 - C13794) * C7641 +
            (C13233 - C13232 + C13235 - C13234) * C7648 +
            (C13237 - C13236 + C13239 - C13238) * C7642 +
            (C13241 - C13240 + C13243 - C13242) * C7649 +
            (C13245 - C13244 + C13247 - C13246) * C48516) *
               C48484 +
           ((C48461 * C2695 - C47223 * C2691 + C48132 * C2696 -
             C47204 * C2692) *
                C7647 +
            (C48461 * C2703 - C47223 * C2698 + C48132 * C2704 -
             C47204 * C2699) *
                C7641 +
            (C48461 * C3160 - C47223 * C3157 + C48132 * C3161 -
             C47204 * C3158) *
                C7648 +
            (C48461 * C3166 - C47223 * C3163 + C48132 * C3167 -
             C47204 * C3164) *
                C7642 +
            (C48461 * C10052 - C47223 * C10050 + C48132 * C10054 -
             C47204 * C10051) *
                C7649 +
            (C48461 * C10056 - C47223 * C10053 + C48132 * C10057 -
             C47204 * C10055) *
                C48516) *
               C48326) *
              C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                     C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                     C105 * C130 - C117 * C123) *
                        C118 +
                    (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                     C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                     C105 * C144 - C117 * C135) *
                        C48227) *
                       C48239 * C48210 * C48193 * C110 +
                   ((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                     C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                     C117 * C124 - C105 * C136) *
                        C118 +
                    (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                     C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                     C117 * C137 - C105 * C145) *
                        C48227) *
                       C48239 * C48210 * C48193 * C111 +
                   ((C101 * C128 - C113 * C121 + C102 * C129 - C114 * C122 +
                     C103 * C130 - C115 * C123 + C104 * C136 - C116 * C124 +
                     C105 * C138 - C117 * C125) *
                        C118 +
                    (C101 * C142 - C113 * C133 + C102 * C143 - C114 * C134 +
                     C103 * C144 - C115 * C135 + C104 * C145 - C116 * C137 +
                     C105 * C146 - C117 * C139) *
                        C48227) *
                       C48239 * C48210 * C48193 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
                     C48503 * C128 - C1008 * C121) *
                        C1009 +
                    (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
                     C48503 * C142 - C1008 * C133) *
                        C48551 +
                    (C1000 * C239 - C1006 * C233 + C1001 * C240 - C1007 * C234 +
                     C48503 * C241 - C1008 * C235) *
                        C1010 +
                    (C1000 * C251 - C1006 * C244 + C1001 * C252 - C1007 * C245 +
                     C48503 * C253 - C1008 * C246) *
                        C48539 +
                    (C1000 * C522 - C1006 * C517 + C1001 * C523 - C1007 * C518 +
                     C48503 * C524 - C1008 * C519) *
                        C1011 +
                    (C1000 * C532 - C1006 * C527 + C1001 * C533 - C1007 * C528 +
                     C48503 * C534 - C1008 * C529) *
                        C48516) *
                       C48239 * C48210 * C48193 * C110 +
                   ((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
                     C1008 * C122 - C48503 * C129) *
                        C1009 +
                    (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
                     C1008 * C134 - C48503 * C143) *
                        C48551 +
                    (C1006 * C234 - C1000 * C240 + C1007 * C235 - C1001 * C241 +
                     C1008 * C236 - C48503 * C242) *
                        C1010 +
                    (C1006 * C245 - C1000 * C252 + C1007 * C246 - C1001 * C253 +
                     C1008 * C247 - C48503 * C254) *
                        C48539 +
                    (C1006 * C518 - C1000 * C523 + C1007 * C519 - C1001 * C524 +
                     C1008 * C520 - C48503 * C525) *
                        C1011 +
                    (C1006 * C528 - C1000 * C533 + C1007 * C529 - C1001 * C534 +
                     C1008 * C530 - C48503 * C535) *
                        C48516) *
                       C48239 * C48210 * C48193 * C111 +
                   ((C1000 * C128 - C1006 * C121 + C1001 * C129 - C1007 * C122 +
                     C48503 * C130 - C1008 * C123) *
                        C1009 +
                    (C1000 * C142 - C1006 * C133 + C1001 * C143 - C1007 * C134 +
                     C48503 * C144 - C1008 * C135) *
                        C48551 +
                    (C1000 * C241 - C1006 * C235 + C1001 * C242 - C1007 * C236 +
                     C48503 * C243 - C1008 * C237) *
                        C1010 +
                    (C1000 * C253 - C1006 * C246 + C1001 * C254 - C1007 * C247 +
                     C48503 * C255 - C1008 * C248) *
                        C48539 +
                    (C1000 * C524 - C1006 * C519 + C1001 * C525 - C1007 * C520 +
                     C48503 * C526 - C1008 * C521) *
                        C1011 +
                    (C1000 * C534 - C1006 * C529 + C1001 * C535 - C1007 * C530 +
                     C48503 * C536 - C1008 * C531) *
                        C48516) *
                       C48239 * C48210 * C48193 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C48548 * C126 - C7644 * C119 + C48535 * C127 -
                     C7645 * C120 + C48503 * C128 - C7646 * C121) *
                        C7647 +
                    (C48548 * C140 - C7644 * C131 + C48535 * C141 -
                     C7645 * C132 + C48503 * C142 - C7646 * C133) *
                        C7641 +
                    (C48548 * C239 - C7644 * C233 + C48535 * C240 -
                     C7645 * C234 + C48503 * C241 - C7646 * C235) *
                        C7648 +
                    (C48548 * C251 - C7644 * C244 + C48535 * C252 -
                     C7645 * C245 + C48503 * C253 - C7646 * C246) *
                        C7642 +
                    (C48548 * C522 - C7644 * C517 + C48535 * C523 -
                     C7645 * C518 + C48503 * C524 - C7646 * C519) *
                        C7649 +
                    (C48548 * C532 - C7644 * C527 + C48535 * C533 -
                     C7645 * C528 + C48503 * C534 - C7646 * C529) *
                        C48516) *
                       C48239 * C48210 * C48193 * C110 +
                   ((C7644 * C120 - C48548 * C127 + C7645 * C121 -
                     C48535 * C128 + C7646 * C122 - C48503 * C129) *
                        C7647 +
                    (C7644 * C132 - C48548 * C141 + C7645 * C133 -
                     C48535 * C142 + C7646 * C134 - C48503 * C143) *
                        C7641 +
                    (C7644 * C234 - C48548 * C240 + C7645 * C235 -
                     C48535 * C241 + C7646 * C236 - C48503 * C242) *
                        C7648 +
                    (C7644 * C245 - C48548 * C252 + C7645 * C246 -
                     C48535 * C253 + C7646 * C247 - C48503 * C254) *
                        C7642 +
                    (C7644 * C518 - C48548 * C523 + C7645 * C519 -
                     C48535 * C524 + C7646 * C520 - C48503 * C525) *
                        C7649 +
                    (C7644 * C528 - C48548 * C533 + C7645 * C529 -
                     C48535 * C534 + C7646 * C530 - C48503 * C535) *
                        C48516) *
                       C48239 * C48210 * C48193 * C111 +
                   ((C48548 * C128 - C7644 * C121 + C48535 * C129 -
                     C7645 * C122 + C48503 * C130 - C7646 * C123) *
                        C7647 +
                    (C48548 * C142 - C7644 * C133 + C48535 * C143 -
                     C7645 * C134 + C48503 * C144 - C7646 * C135) *
                        C7641 +
                    (C48548 * C241 - C7644 * C235 + C48535 * C242 -
                     C7645 * C236 + C48503 * C243 - C7646 * C237) *
                        C7648 +
                    (C48548 * C253 - C7644 * C246 + C48535 * C254 -
                     C7645 * C247 + C48503 * C255 - C7646 * C248) *
                        C7642 +
                    (C48548 * C524 - C7644 * C519 + C48535 * C525 -
                     C7645 * C520 + C48503 * C526 - C7646 * C521) *
                        C7649 +
                    (C48548 * C534 - C7644 * C529 + C48535 * C535 -
                     C7645 * C530 + C48503 * C536 - C7646 * C531) *
                        C48516) *
                       C48239 * C48210 * C48193 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C48122 * C126 - C8908 * C119) * C8909 +
                    (C48122 * C140 - C8908 * C131) * C8903 +
                    (C48122 * C239 - C8908 * C233) * C8910 +
                    (C48122 * C251 - C8908 * C244) * C8904 +
                    (C48122 * C522 - C8908 * C517) * C8911 +
                    (C48122 * C532 - C8908 * C527) * C8905 +
                    (C48122 * C1162 - C8908 * C1158) * C8912 +
                    (C48122 * C1170 - C8908 * C1165) * C8906 +
                    (C48122 * C1643 - C8908 * C1640) * C8913 +
                    (C48122 * C1649 - C8908 * C1646) * C8907) *
                       C48239 * C48210 * C48193 * C110 +
                   ((C8908 * C120 - C48122 * C127) * C8909 +
                    (C8908 * C132 - C48122 * C141) * C8903 +
                    (C8908 * C234 - C48122 * C240) * C8910 +
                    (C8908 * C245 - C48122 * C252) * C8904 +
                    (C8908 * C518 - C48122 * C523) * C8911 +
                    (C8908 * C528 - C48122 * C533) * C8905 +
                    (C8908 * C1159 - C48122 * C1163) * C8912 +
                    (C8908 * C1166 - C48122 * C1171) * C8906 +
                    (C8908 * C1641 - C48122 * C1644) * C8913 +
                    (C8908 * C1647 - C48122 * C1650) * C8907) *
                       C48239 * C48210 * C48193 * C111 +
                   ((C48122 * C128 - C8908 * C121) * C8909 +
                    (C48122 * C142 - C8908 * C133) * C8903 +
                    (C48122 * C241 - C8908 * C235) * C8910 +
                    (C48122 * C253 - C8908 * C246) * C8904 +
                    (C48122 * C524 - C8908 * C519) * C8911 +
                    (C48122 * C534 - C8908 * C529) * C8905 +
                    (C48122 * C1164 - C8908 * C1160) * C8912 +
                    (C48122 * C1172 - C8908 * C1167) * C8906 +
                    (C48122 * C1645 - C8908 * C1642) * C8913 +
                    (C48122 * C1651 - C8908 * C1648) * C8907) *
                       C48239 * C48210 * C48193 * C112)) /
                     (p * q * std::sqrt(p + q));
    d2ee[217] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                      C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                      C105 * C130 - C117 * C123) *
                         C118 +
                     (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                      C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                      C105 * C144 - C117 * C135) *
                         C48227) *
                        C48239 * C48210 * C229 +
                    ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                      C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                      C117 * C237 - C105 * C243) *
                         C118 +
                     (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                      C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                      C117 * C248 - C105 * C255) *
                         C48227) *
                        C48239 * C48210 * C48511) *
                       C231 +
                   (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                      C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                      C117 * C124 - C105 * C136) *
                         C118 +
                     (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                      C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                      C117 * C137 - C105 * C145) *
                         C48227) *
                        C48239 * C48210 * C229 +
                    ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                      C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                      C105 * C249 - C117 * C238) *
                         C118 +
                     (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                      C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                      C105 * C256 - C117 * C250) *
                         C48227) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48503 * C128 - C1008 * C121) *
                         C1009 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48503 * C142 - C1008 * C133) *
                         C48551 +
                     (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                     (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                     (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                     (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                        C48239 * C48210 * C229 +
                    ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                     (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                     (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                     (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                     (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 -
                      C1001 * C1163 + C1008 * C1160 - C48503 * C1164) *
                         C1011 +
                     (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 -
                      C1001 * C1171 + C1008 * C1167 - C48503 * C1172) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C231 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48503 * C129) *
                         C1009 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48503 * C143) *
                         C48551 +
                     (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                     (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                     (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                     (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                        C48239 * C48210 * C229 +
                    ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
                     (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
                     (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
                     (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
                     (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 -
                      C1007 * C1160 + C48503 * C1168 - C1008 * C1161) *
                         C1011 +
                     (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 -
                      C1007 * C1167 + C48503 * C1173 - C1008 * C1169) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48548 * C126 - C7644 * C119 + C48535 * C127 -
                      C7645 * C120 + C48503 * C128 - C7646 * C121) *
                         C7647 +
                     (C48548 * C140 - C7644 * C131 + C48535 * C141 -
                      C7645 * C132 + C48503 * C142 - C7646 * C133) *
                         C7641 +
                     (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
                     (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
                     (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
                     (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
                        C48239 * C48210 * C229 +
                    ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
                     (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
                     (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
                     (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
                     (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 -
                      C48535 * C1163 + C7646 * C1160 - C48503 * C1164) *
                         C7649 +
                     (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 -
                      C48535 * C1171 + C7646 * C1167 - C48503 * C1172) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C231 +
                   (((C7644 * C120 - C48548 * C127 + C7645 * C121 -
                      C48535 * C128 + C7646 * C122 - C48503 * C129) *
                         C7647 +
                     (C7644 * C132 - C48548 * C141 + C7645 * C133 -
                      C48535 * C142 + C7646 * C134 - C48503 * C143) *
                         C7641 +
                     (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
                     (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
                     (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
                     (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
                        C48239 * C48210 * C229 +
                    ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
                     (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
                     (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
                     (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
                     (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 -
                      C7645 * C1160 + C48503 * C1168 - C7646 * C1161) *
                         C7649 +
                     (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 -
                      C7645 * C1167 + C48503 * C1173 - C7646 * C1169) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48122 * C126 - C8908 * C119) * C8909 +
                     (C48122 * C140 - C8908 * C131) * C8903 +
                     (C9005 - C9006) * C8910 + (C9007 - C9008) * C8904 +
                     (C9009 - C9010) * C8911 + (C9011 - C9012) * C8905 +
                     (C9013 - C9014) * C8912 + (C9015 - C9016) * C8906 +
                     (C9017 - C9018) * C8913 + (C9019 - C9020) * C8907) *
                        C48239 * C48210 * C229 +
                    ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
                     (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
                     (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
                     (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
                     (C8908 * C8996 - C48122 * C8998) * C8913 +
                     (C8908 * C8999 - C48122 * C9002) * C8907) *
                        C48239 * C48210 * C48511) *
                       C231 +
                   (((C8908 * C120 - C48122 * C127) * C8909 +
                     (C8908 * C132 - C48122 * C141) * C8903 +
                     (C9021 - C9022) * C8910 + (C9023 - C9024) * C8904 +
                     (C9025 - C9026) * C8911 + (C9027 - C9028) * C8905 +
                     (C9029 - C9030) * C8912 + (C9031 - C9032) * C8906 +
                     (C9033 - C9034) * C8913 + (C9035 - C9036) * C8907) *
                        C48239 * C48210 * C229 +
                    ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
                     (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
                     (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
                     (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
                     (C48122 * C9000 - C8908 * C8997) * C8913 +
                     (C48122 * C9003 - C8908 * C9001) * C8907) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                      C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                      C105 * C130 - C117 * C123) *
                         C118 +
                     (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                      C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                      C105 * C144 - C117 * C135) *
                         C48227) *
                        C48239 * C339 +
                    ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
                      C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
                      C117 * C345 - C105 * C351) *
                         C118 +
                     (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
                      C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
                      C117 * C356 - C105 * C363) *
                         C48227) *
                        C48239 * C48513) *
                       C48193 * C231 +
                   (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                      C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                      C117 * C124 - C105 * C136) *
                         C118 +
                     (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                      C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                      C117 * C137 - C105 * C145) *
                         C48227) *
                        C48239 * C339 +
                    ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
                      C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
                      C105 * C357 - C117 * C346) *
                         C118 +
                     (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
                      C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
                      C105 * C364 - C117 * C358) *
                         C48227) *
                        C48239 * C48513) *
                       C48193 * C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48503 * C128 - C1008 * C121) *
                         C1009 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48503 * C142 - C1008 * C133) *
                         C48551 +
                     (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                     (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                     (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                     (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                        C48239 * C339 +
                    ((C1006 * C341 - C1000 * C347 + C1007 * C342 -
                      C1001 * C348 + C1008 * C343 - C48503 * C349) *
                         C1009 +
                     (C1006 * C352 - C1000 * C359 + C1007 * C353 -
                      C1001 * C360 + C1008 * C354 - C48503 * C361) *
                         C48551 +
                     (C1006 * C619 - C1000 * C624 + C1007 * C620 -
                      C1001 * C625 + C1008 * C621 - C48503 * C626) *
                         C1010 +
                     (C1006 * C629 - C1000 * C634 + C1007 * C630 -
                      C1001 * C635 + C1008 * C631 - C48503 * C636) *
                         C48539 +
                     (C1006 * C1368 - C1000 * C1372 + C1007 * C1369 -
                      C1001 * C1373 + C1008 * C1370 - C48503 * C1374) *
                         C1011 +
                     (C1006 * C1375 - C1000 * C1380 + C1007 * C1376 -
                      C1001 * C1381 + C1008 * C1377 - C48503 * C1382) *
                         C48516) *
                        C48239 * C48513) *
                       C48193 * C231 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48503 * C129) *
                         C1009 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48503 * C143) *
                         C48551 +
                     (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                     (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                     (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                     (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                        C48239 * C339 +
                    ((C1000 * C348 - C1006 * C342 + C1001 * C349 -
                      C1007 * C343 + C48503 * C350 - C1008 * C344) *
                         C1009 +
                     (C1000 * C360 - C1006 * C353 + C1001 * C361 -
                      C1007 * C354 + C48503 * C362 - C1008 * C355) *
                         C48551 +
                     (C1000 * C625 - C1006 * C620 + C1001 * C626 -
                      C1007 * C621 + C48503 * C627 - C1008 * C622) *
                         C1010 +
                     (C1000 * C635 - C1006 * C630 + C1001 * C636 -
                      C1007 * C631 + C48503 * C637 - C1008 * C632) *
                         C48539 +
                     (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 -
                      C1007 * C1370 + C48503 * C1378 - C1008 * C1371) *
                         C1011 +
                     (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 -
                      C1007 * C1377 + C48503 * C1383 - C1008 * C1379) *
                         C48516) *
                        C48239 * C48513) *
                       C48193 * C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48548 * C126 - C7644 * C119 + C48535 * C127 -
                      C7645 * C120 + C48503 * C128 - C7646 * C121) *
                         C7647 +
                     (C48548 * C140 - C7644 * C131 + C48535 * C141 -
                      C7645 * C132 + C48503 * C142 - C7646 * C133) *
                         C7641 +
                     (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
                     (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
                     (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
                     (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
                        C48239 * C339 +
                    ((C7644 * C341 - C48548 * C347 + C7645 * C342 -
                      C48535 * C348 + C7646 * C343 - C48503 * C349) *
                         C7647 +
                     (C7644 * C352 - C48548 * C359 + C7645 * C353 -
                      C48535 * C360 + C7646 * C354 - C48503 * C361) *
                         C7641 +
                     (C7644 * C619 - C48548 * C624 + C7645 * C620 -
                      C48535 * C625 + C7646 * C621 - C48503 * C626) *
                         C7648 +
                     (C7644 * C629 - C48548 * C634 + C7645 * C630 -
                      C48535 * C635 + C7646 * C631 - C48503 * C636) *
                         C7642 +
                     (C7644 * C1368 - C48548 * C1372 + C7645 * C1369 -
                      C48535 * C1373 + C7646 * C1370 - C48503 * C1374) *
                         C7649 +
                     (C7644 * C1375 - C48548 * C1380 + C7645 * C1376 -
                      C48535 * C1381 + C7646 * C1377 - C48503 * C1382) *
                         C48516) *
                        C48239 * C48513) *
                       C48193 * C231 +
                   (((C7644 * C120 - C48548 * C127 + C7645 * C121 -
                      C48535 * C128 + C7646 * C122 - C48503 * C129) *
                         C7647 +
                     (C7644 * C132 - C48548 * C141 + C7645 * C133 -
                      C48535 * C142 + C7646 * C134 - C48503 * C143) *
                         C7641 +
                     (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
                     (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
                     (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
                     (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
                        C48239 * C339 +
                    ((C48548 * C348 - C7644 * C342 + C48535 * C349 -
                      C7645 * C343 + C48503 * C350 - C7646 * C344) *
                         C7647 +
                     (C48548 * C360 - C7644 * C353 + C48535 * C361 -
                      C7645 * C354 + C48503 * C362 - C7646 * C355) *
                         C7641 +
                     (C48548 * C625 - C7644 * C620 + C48535 * C626 -
                      C7645 * C621 + C48503 * C627 - C7646 * C622) *
                         C7648 +
                     (C48548 * C635 - C7644 * C630 + C48535 * C636 -
                      C7645 * C631 + C48503 * C637 - C7646 * C632) *
                         C7642 +
                     (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 -
                      C7645 * C1370 + C48503 * C1378 - C7646 * C1371) *
                         C7649 +
                     (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 -
                      C7645 * C1377 + C48503 * C1383 - C7646 * C1379) *
                         C48516) *
                        C48239 * C48513) *
                       C48193 * C48509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48122 * C126 - C8908 * C119) * C8909 +
                     (C48122 * C140 - C8908 * C131) * C8903 +
                     (C9005 - C9006) * C8910 + (C9007 - C9008) * C8904 +
                     (C9009 - C9010) * C8911 + (C9011 - C9012) * C8905 +
                     (C9013 - C9014) * C8912 + (C9015 - C9016) * C8906 +
                     (C9017 - C9018) * C8913 + (C9019 - C9020) * C8907) *
                        C48239 * C339 +
                    ((C8908 * C341 - C48122 * C347) * C8909 +
                     (C8908 * C352 - C48122 * C359) * C8903 +
                     (C8908 * C619 - C48122 * C624) * C8910 +
                     (C8908 * C629 - C48122 * C634) * C8904 +
                     (C8908 * C1368 - C48122 * C1372) * C8911 +
                     (C8908 * C1375 - C48122 * C1380) * C8905 +
                     (C8908 * C1820 - C48122 * C1823) * C8912 +
                     (C8908 * C1826 - C48122 * C1829) * C8906 +
                     (C8908 * C9118 - C48122 * C9120) * C8913 +
                     (C8908 * C9121 - C48122 * C9124) * C8907) *
                        C48239 * C48513) *
                       C48193 * C231 +
                   (((C8908 * C120 - C48122 * C127) * C8909 +
                     (C8908 * C132 - C48122 * C141) * C8903 +
                     (C9021 - C9022) * C8910 + (C9023 - C9024) * C8904 +
                     (C9025 - C9026) * C8911 + (C9027 - C9028) * C8905 +
                     (C9029 - C9030) * C8912 + (C9031 - C9032) * C8906 +
                     (C9033 - C9034) * C8913 + (C9035 - C9036) * C8907) *
                        C48239 * C339 +
                    ((C48122 * C348 - C8908 * C342) * C8909 +
                     (C48122 * C360 - C8908 * C353) * C8903 +
                     (C48122 * C625 - C8908 * C620) * C8910 +
                     (C48122 * C635 - C8908 * C630) * C8904 +
                     (C48122 * C1373 - C8908 * C1369) * C8911 +
                     (C48122 * C1381 - C8908 * C1376) * C8905 +
                     (C48122 * C1824 - C8908 * C1821) * C8912 +
                     (C48122 * C1830 - C8908 * C1827) * C8906 +
                     (C48122 * C9122 - C8908 * C9119) * C8913 +
                     (C48122 * C9125 - C8908 * C9123) * C8907) *
                        C48239 * C48513) *
                       C48193 * C48509)) /
                     (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
                      C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
                      C105 * C130 - C117 * C123) *
                         C118 +
                     (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
                      C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
                      C105 * C144 - C117 * C135) *
                         C48227) *
                        C48239 * C48210 * C447 +
                    ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
                      C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
                      C117 * C237 - C105 * C243) *
                         C118 +
                     (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
                      C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
                      C117 * C248 - C105 * C255) *
                         C48227) *
                        C48239 * C48210 * C48511) *
                       C449 +
                   (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
                      C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
                      C117 * C124 - C105 * C136) *
                         C118 +
                     (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
                      C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
                      C117 * C137 - C105 * C145) *
                         C48227) *
                        C48239 * C48210 * C447 +
                    ((C101 * C240 - C113 * C234 + C102 * C241 - C114 * C235 +
                      C103 * C242 - C115 * C236 + C104 * C243 - C116 * C237 +
                      C105 * C249 - C117 * C238) *
                         C118 +
                     (C101 * C252 - C113 * C245 + C102 * C253 - C114 * C246 +
                      C103 * C254 - C115 * C247 + C104 * C255 - C116 * C248 +
                      C105 * C256 - C117 * C250) *
                         C48227) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C1000 * C126 - C1006 * C119 + C1001 * C127 -
                      C1007 * C120 + C48503 * C128 - C1008 * C121) *
                         C1009 +
                     (C1000 * C140 - C1006 * C131 + C1001 * C141 -
                      C1007 * C132 + C48503 * C142 - C1008 * C133) *
                         C48551 +
                     (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
                     (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
                     (C1187 - C1188 + C1189 - C1190 + C1191 - C1192) * C1011 +
                     (C1193 - C1194 + C1195 - C1196 + C1197 - C1198) * C48516) *
                        C48239 * C48210 * C447 +
                    ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
                     (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
                     (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
                     (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
                     (C1006 * C1158 - C1000 * C1162 + C1007 * C1159 -
                      C1001 * C1163 + C1008 * C1160 - C48503 * C1164) *
                         C1011 +
                     (C1006 * C1165 - C1000 * C1170 + C1007 * C1166 -
                      C1001 * C1171 + C1008 * C1167 - C48503 * C1172) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C449 +
                   (((C1006 * C120 - C1000 * C127 + C1007 * C121 -
                      C1001 * C128 + C1008 * C122 - C48503 * C129) *
                         C1009 +
                     (C1006 * C132 - C1000 * C141 + C1007 * C133 -
                      C1001 * C142 + C1008 * C134 - C48503 * C143) *
                         C48551 +
                     (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
                     (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
                     (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
                     (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
                        C48239 * C48210 * C447 +
                    ((C1200 - C1199 + C1202 - C1201 + C1204 - C1203) * C1009 +
                     (C1206 - C1205 + C1208 - C1207 + C1210 - C1209) * C48551 +
                     (C1212 - C1211 + C1214 - C1213 + C1216 - C1215) * C1010 +
                     (C1218 - C1217 + C1220 - C1219 + C1222 - C1221) * C48539 +
                     (C1000 * C1163 - C1006 * C1159 + C1001 * C1164 -
                      C1007 * C1160 + C48503 * C1168 - C1008 * C1161) *
                         C1011 +
                     (C1000 * C1171 - C1006 * C1166 + C1001 * C1172 -
                      C1007 * C1167 + C48503 * C1173 - C1008 * C1169) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48548 * C126 - C7644 * C119 + C48535 * C127 -
                      C7645 * C120 + C48503 * C128 - C7646 * C121) *
                         C7647 +
                     (C48548 * C140 - C7644 * C131 + C48535 * C141 -
                      C7645 * C132 + C48503 * C142 - C7646 * C133) *
                         C7641 +
                     (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
                     (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
                     (C7809 - C7810 + C7811 - C7812 + C7813 - C7814) * C7649 +
                     (C7815 - C7816 + C7817 - C7818 + C7819 - C7820) * C48516) *
                        C48239 * C48210 * C447 +
                    ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
                     (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
                     (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
                     (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
                     (C7644 * C1158 - C48548 * C1162 + C7645 * C1159 -
                      C48535 * C1163 + C7646 * C1160 - C48503 * C1164) *
                         C7649 +
                     (C7644 * C1165 - C48548 * C1170 + C7645 * C1166 -
                      C48535 * C1171 + C7646 * C1167 - C48503 * C1172) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C449 +
                   (((C7644 * C120 - C48548 * C127 + C7645 * C121 -
                      C48535 * C128 + C7646 * C122 - C48503 * C129) *
                         C7647 +
                     (C7644 * C132 - C48548 * C141 + C7645 * C133 -
                      C48535 * C142 + C7646 * C134 - C48503 * C143) *
                         C7641 +
                     (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
                     (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
                     (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
                     (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
                        C48239 * C48210 * C447 +
                    ((C7822 - C7821 + C7824 - C7823 + C7826 - C7825) * C7647 +
                     (C7828 - C7827 + C7830 - C7829 + C7832 - C7831) * C7641 +
                     (C7834 - C7833 + C7836 - C7835 + C7838 - C7837) * C7648 +
                     (C7840 - C7839 + C7842 - C7841 + C7844 - C7843) * C7642 +
                     (C48548 * C1163 - C7644 * C1159 + C48535 * C1164 -
                      C7645 * C1160 + C48503 * C1168 - C7646 * C1161) *
                         C7649 +
                     (C48548 * C1171 - C7644 * C1166 + C48535 * C1172 -
                      C7645 * C1167 + C48503 * C1173 - C7646 * C1169) *
                         C48516) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C48122 * C126 - C8908 * C119) * C8909 +
                     (C48122 * C140 - C8908 * C131) * C8903 +
                     (C9005 - C9006) * C8910 + (C9007 - C9008) * C8904 +
                     (C9009 - C9010) * C8911 + (C9011 - C9012) * C8905 +
                     (C9013 - C9014) * C8912 + (C9015 - C9016) * C8906 +
                     (C9017 - C9018) * C8913 + (C9019 - C9020) * C8907) *
                        C48239 * C48210 * C447 +
                    ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
                     (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
                     (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
                     (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
                     (C8908 * C8996 - C48122 * C8998) * C8913 +
                     (C8908 * C8999 - C48122 * C9002) * C8907) *
                        C48239 * C48210 * C48511) *
                       C449 +
                   (((C8908 * C120 - C48122 * C127) * C8909 +
                     (C8908 * C132 - C48122 * C141) * C8903 +
                     (C9021 - C9022) * C8910 + (C9023 - C9024) * C8904 +
                     (C9025 - C9026) * C8911 + (C9027 - C9028) * C8905 +
                     (C9029 - C9030) * C8912 + (C9031 - C9032) * C8906 +
                     (C9033 - C9034) * C8913 + (C9035 - C9036) * C8907) *
                        C48239 * C48210 * C447 +
                    ((C9022 - C9021) * C8909 + (C9024 - C9023) * C8903 +
                     (C9026 - C9025) * C8910 + (C9028 - C9027) * C8904 +
                     (C9030 - C9029) * C8911 + (C9032 - C9031) * C8905 +
                     (C9034 - C9033) * C8912 + (C9036 - C9035) * C8906 +
                     (C48122 * C9000 - C8908 * C8997) * C8913 +
                     (C48122 * C9003 - C8908 * C9001) * C8907) *
                        C48239 * C48210 * C48511) *
                       C48509)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C48210 * C513 +
          ((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
            C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
            C117 * C237 - C105 * C243) *
               C118 +
           (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
            C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
            C117 * C248 - C105 * C255) *
               C48227) *
              C48239 * C48210 * C514 +
          ((C101 * C522 - C113 * C517 + C102 * C523 - C114 * C518 +
            C103 * C524 - C115 * C519 + C104 * C525 - C116 * C520 +
            C105 * C526 - C117 * C521) *
               C118 +
           (C101 * C532 - C113 * C527 + C102 * C533 - C114 * C528 +
            C103 * C534 - C115 * C529 + C104 * C535 - C116 * C530 +
            C105 * C536 - C117 * C531) *
               C48227) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C48210 * C513 +
          ((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
           (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
           (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
           (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
           (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
           (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
              C48239 * C48210 * C514 +
          (C1673 * C1009 + C1674 * C48551 +
           (C1660 - C1659 + C1662 - C1661 + C1664 - C1663) * C1010 +
           (C1666 - C1665 + C1668 - C1667 + C1670 - C1669) * C48539 +
           (C1000 * C1643 - C1006 * C1640 + C1001 * C1644 - C1007 * C1641 +
            C48503 * C1645 - C1008 * C1642) *
               C1011 +
           (C1000 * C1649 - C1006 * C1646 + C1001 * C1650 - C1007 * C1647 +
            C48503 * C1651 - C1008 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C48210 * C513 +
          ((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
           (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
           (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
           (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
           (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
           (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
              C48239 * C48210 * C514 +
          (C8267 * C7647 + C8268 * C7641 +
           (C8254 - C8253 + C8256 - C8255 + C8258 - C8257) * C7648 +
           (C8260 - C8259 + C8262 - C8261 + C8264 - C8263) * C7642 +
           (C48548 * C1643 - C7644 * C1640 + C48535 * C1644 - C7645 * C1641 +
            C48503 * C1645 - C7646 * C1642) *
               C7649 +
           (C48548 * C1649 - C7644 * C1646 + C48535 * C1650 - C7645 * C1647 +
            C48503 * C1651 - C7646 * C1648) *
               C48516) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C48210 * C513 +
          ((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
           (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
           (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
           (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
           (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
              C48239 * C48210 * C514 +
          (C9275 * C8909 + C9276 * C8903 + C9277 * C8910 + C9278 * C8904 +
           C9279 * C8911 + C9280 * C8905 + (C9282 - C9281) * C8912 +
           (C9284 - C9283) * C8906 + (C48122 * C9271 - C8908 * C9270) * C8913 +
           (C48122 * C9273 - C8908 * C9272) * C8907) *
              C48239 * C48210 * C515) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C339 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C447 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C339 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C339 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C339 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C339 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C447 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C339 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C339 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C447 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C339 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C113 * C120 - C101 * C127 + C114 * C121 - C102 * C128 +
             C115 * C122 - C103 * C129 + C116 * C123 - C104 * C130 +
             C117 * C124 - C105 * C136) *
                C118 +
            (C113 * C132 - C101 * C141 + C114 * C133 - C102 * C142 +
             C115 * C134 - C103 * C143 + C116 * C135 - C104 * C144 +
             C117 * C137 - C105 * C145) *
                C48227) *
               C48239 * C721 +
           ((C101 * C348 - C113 * C342 + C102 * C349 - C114 * C343 +
             C103 * C350 - C115 * C344 + C104 * C351 - C116 * C345 +
             C105 * C357 - C117 * C346) *
                C118 +
            (C101 * C360 - C113 * C353 + C102 * C361 - C114 * C354 +
             C103 * C362 - C115 * C355 + C104 * C363 - C116 * C356 +
             C105 * C364 - C117 * C358) *
                C48227) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C1006 * C120 - C1000 * C127 + C1007 * C121 - C1001 * C128 +
             C1008 * C122 - C48503 * C129) *
                C1009 +
            (C1006 * C132 - C1000 * C141 + C1007 * C133 - C1001 * C142 +
             C1008 * C134 - C48503 * C143) *
                C48551 +
            (C1199 - C1200 + C1201 - C1202 + C1203 - C1204) * C1010 +
            (C1205 - C1206 + C1207 - C1208 + C1209 - C1210) * C48539 +
            (C1211 - C1212 + C1213 - C1214 + C1215 - C1216) * C1011 +
            (C1217 - C1218 + C1219 - C1220 + C1221 - C1222) * C48516) *
               C48239 * C721 +
           ((C1000 * C348 - C1006 * C342 + C1001 * C349 - C1007 * C343 +
             C48503 * C350 - C1008 * C344) *
                C1009 +
            (C1000 * C360 - C1006 * C353 + C1001 * C361 - C1007 * C354 +
             C48503 * C362 - C1008 * C355) *
                C48551 +
            (C1000 * C625 - C1006 * C620 + C1001 * C626 - C1007 * C621 +
             C48503 * C627 - C1008 * C622) *
                C1010 +
            (C1000 * C635 - C1006 * C630 + C1001 * C636 - C1007 * C631 +
             C48503 * C637 - C1008 * C632) *
                C48539 +
            (C1000 * C1373 - C1006 * C1369 + C1001 * C1374 - C1007 * C1370 +
             C48503 * C1378 - C1008 * C1371) *
                C1011 +
            (C1000 * C1381 - C1006 * C1376 + C1001 * C1382 - C1007 * C1377 +
             C48503 * C1383 - C1008 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C7644 * C120 - C48548 * C127 + C7645 * C121 - C48535 * C128 +
             C7646 * C122 - C48503 * C129) *
                C7647 +
            (C7644 * C132 - C48548 * C141 + C7645 * C133 - C48535 * C142 +
             C7646 * C134 - C48503 * C143) *
                C7641 +
            (C7821 - C7822 + C7823 - C7824 + C7825 - C7826) * C7648 +
            (C7827 - C7828 + C7829 - C7830 + C7831 - C7832) * C7642 +
            (C7833 - C7834 + C7835 - C7836 + C7837 - C7838) * C7649 +
            (C7839 - C7840 + C7841 - C7842 + C7843 - C7844) * C48516) *
               C48239 * C721 +
           ((C48548 * C348 - C7644 * C342 + C48535 * C349 - C7645 * C343 +
             C48503 * C350 - C7646 * C344) *
                C7647 +
            (C48548 * C360 - C7644 * C353 + C48535 * C361 - C7645 * C354 +
             C48503 * C362 - C7646 * C355) *
                C7641 +
            (C48548 * C625 - C7644 * C620 + C48535 * C626 - C7645 * C621 +
             C48503 * C627 - C7646 * C622) *
                C7648 +
            (C48548 * C635 - C7644 * C630 + C48535 * C636 - C7645 * C631 +
             C48503 * C637 - C7646 * C632) *
                C7642 +
            (C48548 * C1373 - C7644 * C1369 + C48535 * C1374 - C7645 * C1370 +
             C48503 * C1378 - C7646 * C1371) *
                C7649 +
            (C48548 * C1381 - C7644 * C1376 + C48535 * C1382 - C7645 * C1377 +
             C48503 * C1383 - C7646 * C1379) *
                C48516) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C48193 * C449 +
          (((C8908 * C120 - C48122 * C127) * C8909 +
            (C8908 * C132 - C48122 * C141) * C8903 + (C9021 - C9022) * C8910 +
            (C9023 - C9024) * C8904 + (C9025 - C9026) * C8911 +
            (C9027 - C9028) * C8905 + (C9029 - C9030) * C8912 +
            (C9031 - C9032) * C8906 + (C9033 - C9034) * C8913 +
            (C9035 - C9036) * C8907) *
               C48239 * C721 +
           ((C48122 * C348 - C8908 * C342) * C8909 +
            (C48122 * C360 - C8908 * C353) * C8903 +
            (C48122 * C625 - C8908 * C620) * C8910 +
            (C48122 * C635 - C8908 * C630) * C8904 +
            (C48122 * C1373 - C8908 * C1369) * C8911 +
            (C48122 * C1381 - C8908 * C1376) * C8905 +
            (C48122 * C1824 - C8908 * C1821) * C8912 +
            (C48122 * C1830 - C8908 * C1827) * C8906 +
            (C48122 * C9122 - C8908 * C9119) * C8913 +
            (C48122 * C9125 - C8908 * C9123) * C8907) *
               C48239 * C48513) *
              C48193 * C48509)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
             C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
             C105 * C130 - C117 * C123) *
                C118 +
            (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
             C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
             C105 * C144 - C117 * C135) *
                C48227) *
               C48239 * C721 +
           ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
             C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
             C117 * C345 - C105 * C351) *
                C118 +
            (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
             C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
             C117 * C356 - C105 * C363) *
                C48227) *
               C48239 * C48513) *
              C229 +
          (((C113 * C233 - C101 * C239 + C114 * C234 - C102 * C240 +
             C115 * C235 - C103 * C241 + C116 * C236 - C104 * C242 +
             C117 * C237 - C105 * C243) *
                C118 +
            (C113 * C244 - C101 * C251 + C114 * C245 - C102 * C252 +
             C115 * C246 - C103 * C253 + C116 * C247 - C104 * C254 +
             C117 * C248 - C105 * C255) *
                C48227) *
               C48239 * C721 +
           ((C101 * C624 - C113 * C619 + C102 * C625 - C114 * C620 +
             C103 * C626 - C115 * C621 + C104 * C627 - C116 * C622 +
             C105 * C628 - C117 * C623) *
                C118 +
            (C101 * C634 - C113 * C629 + C102 * C635 - C114 * C630 +
             C103 * C636 - C115 * C631 + C104 * C637 - C116 * C632 +
             C105 * C638 - C117 * C633) *
                C48227) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
             C48503 * C128 - C1008 * C121) *
                C1009 +
            (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
             C48503 * C142 - C1008 * C133) *
                C48551 +
            (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
            (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
            C1673 * C1011 + C1674 * C48516) *
               C48239 * C721 +
           ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
             C1008 * C343 - C48503 * C349) *
                C1009 +
            (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
             C1008 * C354 - C48503 * C361) *
                C48551 +
            (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
            (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
            (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
            (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C1176 - C1175 + C1178 - C1177 + C1180 - C1179) * C1009 +
            (C1182 - C1181 + C1184 - C1183 + C1186 - C1185) * C48551 +
            (C1188 - C1187 + C1190 - C1189 + C1192 - C1191) * C1010 +
            (C1194 - C1193 + C1196 - C1195 + C1198 - C1197) * C48539 +
            (C1659 - C1660 + C1661 - C1662 + C1663 - C1664) * C1011 +
            (C1665 - C1666 + C1667 - C1668 + C1669 - C1670) * C48516) *
               C48239 * C721 +
           ((C1834 - C1833 + C1836 - C1835 + C1838 - C1837) * C1009 +
            (C1840 - C1839 + C1842 - C1841 + C1844 - C1843) * C48551 +
            (C1846 - C1845 + C1848 - C1847 + C1850 - C1849) * C1010 +
            (C1852 - C1851 + C1854 - C1853 + C1856 - C1855) * C48539 +
            (C1000 * C1823 - C1006 * C1820 + C1001 * C1824 - C1007 * C1821 +
             C48503 * C1825 - C1008 * C1822) *
                C1011 +
            (C1000 * C1829 - C1006 * C1826 + C1001 * C1830 - C1007 * C1827 +
             C48503 * C1831 - C1008 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
             C48503 * C128 - C7646 * C121) *
                C7647 +
            (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
             C48503 * C142 - C7646 * C133) *
                C7641 +
            (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
            (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
            C8267 * C7649 + C8268 * C48516) *
               C48239 * C721 +
           ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
             C7646 * C343 - C48503 * C349) *
                C7647 +
            (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
             C7646 * C354 - C48503 * C361) *
                C7641 +
            (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
            (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
            (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
            (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
               C48239 * C48513) *
              C229 +
          (((C7798 - C7797 + C7800 - C7799 + C7802 - C7801) * C7647 +
            (C7804 - C7803 + C7806 - C7805 + C7808 - C7807) * C7641 +
            (C7810 - C7809 + C7812 - C7811 + C7814 - C7813) * C7648 +
            (C7816 - C7815 + C7818 - C7817 + C7820 - C7819) * C7642 +
            (C8253 - C8254 + C8255 - C8256 + C8257 - C8258) * C7649 +
            (C8259 - C8260 + C8261 - C8262 + C8263 - C8264) * C48516) *
               C48239 * C721 +
           ((C8416 - C8415 + C8418 - C8417 + C8420 - C8419) * C7647 +
            (C8422 - C8421 + C8424 - C8423 + C8426 - C8425) * C7641 +
            (C8428 - C8427 + C8430 - C8429 + C8432 - C8431) * C7648 +
            (C8434 - C8433 + C8436 - C8435 + C8438 - C8437) * C7642 +
            (C48548 * C1823 - C7644 * C1820 + C48535 * C1824 - C7645 * C1821 +
             C48503 * C1825 - C7646 * C1822) *
                C7649 +
            (C48548 * C1829 - C7644 * C1826 + C48535 * C1830 - C7645 * C1827 +
             C48503 * C1831 - C7646 * C1828) *
                C48516) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48122 * C126 - C8908 * C119) * C8909 +
            (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
            (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
            C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
               C48239 * C721 +
           ((C8908 * C341 - C48122 * C347) * C8909 +
            (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
            (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
            (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
            (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
            (C9385 - C9386) * C8907) *
               C48239 * C48513) *
              C229 +
          (((C9006 - C9005) * C8909 + (C9008 - C9007) * C8903 +
            (C9010 - C9009) * C8910 + (C9012 - C9011) * C8904 +
            (C9014 - C9013) * C8911 + (C9016 - C9015) * C8905 +
            (C9018 - C9017) * C8912 + (C9020 - C9019) * C8906 +
            (C9281 - C9282) * C8913 + (C9283 - C9284) * C8907) *
               C48239 * C721 +
           ((C9372 - C9371) * C8909 + (C9374 - C9373) * C8903 +
            (C9376 - C9375) * C8910 + (C9378 - C9377) * C8904 +
            (C9380 - C9379) * C8911 + (C9382 - C9381) * C8905 +
            (C9384 - C9383) * C8912 + (C9386 - C9385) * C8906 +
            (C48122 * C9367 - C8908 * C9366) * C8913 +
            (C48122 * C9369 - C8908 * C9368) * C8907) *
               C48239 * C48513) *
              C48511) *
         C48159) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C101 * C126 - C113 * C119 + C102 * C127 - C114 * C120 +
            C103 * C128 - C115 * C121 + C104 * C129 - C116 * C122 +
            C105 * C130 - C117 * C123) *
               C118 +
           (C101 * C140 - C113 * C131 + C102 * C141 - C114 * C132 +
            C103 * C142 - C115 * C133 + C104 * C143 - C116 * C134 +
            C105 * C144 - C117 * C135) *
               C48227) *
              C48239 * C867 +
          ((C113 * C341 - C101 * C347 + C114 * C342 - C102 * C348 +
            C115 * C343 - C103 * C349 + C116 * C344 - C104 * C350 +
            C117 * C345 - C105 * C351) *
               C118 +
           (C113 * C352 - C101 * C359 + C114 * C353 - C102 * C360 +
            C115 * C354 - C103 * C361 + C116 * C355 - C104 * C362 +
            C117 * C356 - C105 * C363) *
               C48227) *
              C48239 * C868 +
          ((C101 * C875 - C113 * C870 + C102 * C876 - C114 * C871 +
            C103 * C877 - C115 * C872 + C104 * C878 - C116 * C873 +
            C105 * C879 - C117 * C874) *
               C118 +
           (C101 * C885 - C113 * C880 + C102 * C886 - C114 * C881 +
            C103 * C887 - C115 * C882 + C104 * C888 - C116 * C883 +
            C105 * C889 - C117 * C884) *
               C48227) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1000 * C126 - C1006 * C119 + C1001 * C127 - C1007 * C120 +
            C48503 * C128 - C1008 * C121) *
               C1009 +
           (C1000 * C140 - C1006 * C131 + C1001 * C141 - C1007 * C132 +
            C48503 * C142 - C1008 * C133) *
               C48551 +
           (C1175 - C1176 + C1177 - C1178 + C1179 - C1180) * C1010 +
           (C1181 - C1182 + C1183 - C1184 + C1185 - C1186) * C48539 +
           C1673 * C1011 + C1674 * C48516) *
              C48239 * C867 +
          ((C1006 * C341 - C1000 * C347 + C1007 * C342 - C1001 * C348 +
            C1008 * C343 - C48503 * C349) *
               C1009 +
           (C1006 * C352 - C1000 * C359 + C1007 * C353 - C1001 * C360 +
            C1008 * C354 - C48503 * C361) *
               C48551 +
           (C1833 - C1834 + C1835 - C1836 + C1837 - C1838) * C1010 +
           (C1839 - C1840 + C1841 - C1842 + C1843 - C1844) * C48539 +
           (C1845 - C1846 + C1847 - C1848 + C1849 - C1850) * C1011 +
           (C1851 - C1852 + C1853 - C1854 + C1855 - C1856) * C48516) *
              C48239 * C868 +
          ((C1000 * C875 - C1006 * C870 + C1001 * C876 - C1007 * C871 +
            C48503 * C877 - C1008 * C872) *
               C1009 +
           (C1000 * C885 - C1006 * C880 + C1001 * C886 - C1007 * C881 +
            C48503 * C887 - C1008 * C882) *
               C48551 +
           (C1000 * C2264 - C1006 * C2258 + C1001 * C2265 - C1007 * C2259 +
            C48503 * C2266 - C1008 * C2260) *
               C1010 +
           (C1000 * C2276 - C1006 * C2267 + C1001 * C2277 - C1007 * C2268 +
            C48503 * C2278 - C1008 * C2269) *
               C48539 +
           (C1000 * C2270 - C1006 * C2261 + C1001 * C2271 - C1007 * C2262 +
            C48503 * C2272 - C1008 * C2263) *
               C1011 +
           (C1000 * C2279 - C1006 * C2273 + C1001 * C2280 - C1007 * C2274 +
            C48503 * C2281 - C1008 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48548 * C126 - C7644 * C119 + C48535 * C127 - C7645 * C120 +
            C48503 * C128 - C7646 * C121) *
               C7647 +
           (C48548 * C140 - C7644 * C131 + C48535 * C141 - C7645 * C132 +
            C48503 * C142 - C7646 * C133) *
               C7641 +
           (C7797 - C7798 + C7799 - C7800 + C7801 - C7802) * C7648 +
           (C7803 - C7804 + C7805 - C7806 + C7807 - C7808) * C7642 +
           C8267 * C7649 + C8268 * C48516) *
              C48239 * C867 +
          ((C7644 * C341 - C48548 * C347 + C7645 * C342 - C48535 * C348 +
            C7646 * C343 - C48503 * C349) *
               C7647 +
           (C7644 * C352 - C48548 * C359 + C7645 * C353 - C48535 * C360 +
            C7646 * C354 - C48503 * C361) *
               C7641 +
           (C8415 - C8416 + C8417 - C8418 + C8419 - C8420) * C7648 +
           (C8421 - C8422 + C8423 - C8424 + C8425 - C8426) * C7642 +
           (C8427 - C8428 + C8429 - C8430 + C8431 - C8432) * C7649 +
           (C8433 - C8434 + C8435 - C8436 + C8437 - C8438) * C48516) *
              C48239 * C868 +
          ((C48548 * C875 - C7644 * C870 + C48535 * C876 - C7645 * C871 +
            C48503 * C877 - C7646 * C872) *
               C7647 +
           (C48548 * C885 - C7644 * C880 + C48535 * C886 - C7645 * C881 +
            C48503 * C887 - C7646 * C882) *
               C7641 +
           (C48548 * C2264 - C7644 * C2258 + C48535 * C2265 - C7645 * C2259 +
            C48503 * C2266 - C7646 * C2260) *
               C7648 +
           (C48548 * C2276 - C7644 * C2267 + C48535 * C2277 - C7645 * C2268 +
            C48503 * C2278 - C7646 * C2269) *
               C7642 +
           (C48548 * C2270 - C7644 * C2261 + C48535 * C2271 - C7645 * C2262 +
            C48503 * C2272 - C7646 * C2263) *
               C7649 +
           (C48548 * C2279 - C7644 * C2273 + C48535 * C2280 - C7645 * C2274 +
            C48503 * C2281 - C7646 * C2275) *
               C48516) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48122 * C126 - C8908 * C119) * C8909 +
           (C48122 * C140 - C8908 * C131) * C8903 + (C9005 - C9006) * C8910 +
           (C9007 - C9008) * C8904 + C9275 * C8911 + C9276 * C8905 +
           C9277 * C8912 + C9278 * C8906 + C9279 * C8913 + C9280 * C8907) *
              C48239 * C867 +
          ((C8908 * C341 - C48122 * C347) * C8909 +
           (C8908 * C352 - C48122 * C359) * C8903 + (C9371 - C9372) * C8910 +
           (C9373 - C9374) * C8904 + (C9375 - C9376) * C8911 +
           (C9377 - C9378) * C8905 + (C9379 - C9380) * C8912 +
           (C9381 - C9382) * C8906 + (C9383 - C9384) * C8913 +
           (C9385 - C9386) * C8907) *
              C48239 * C868 +
          ((C48122 * C875 - C8908 * C870) * C8909 +
           (C48122 * C885 - C8908 * C880) * C8903 +
           (C48122 * C2264 - C8908 * C2258) * C8910 +
           (C48122 * C2276 - C8908 * C2267) * C8904 +
           (C48122 * C2270 - C8908 * C2261) * C8911 +
           (C48122 * C2279 - C8908 * C2273) * C8905 +
           (C48122 * C9614 - C8908 * C9612) * C8912 +
           (C48122 * C9618 - C8908 * C9615) * C8906 +
           (C48122 * C9616 - C8908 * C9613) * C8913 +
           (C48122 * C9619 - C8908 * C9617) * C8907) *
              C48239 * C869) *
         C48193 * C48159) /
            (p * q * std::sqrt(p + q));
}
