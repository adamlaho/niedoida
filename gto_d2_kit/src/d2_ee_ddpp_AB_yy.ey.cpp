/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47918 = ae + be;
    const double C47917 = ae * be;
    const double C47916 = yA - yB;
    const double C47925 = 0 * be;
    const double C47985 = 0 * ae;
    const double C47980 = 0 * be;
    const double C47979 = 0 * be;
    const double C48064 = 0 * be;
    const double C48140 = p + q;
    const double C48139 = p * q;
    const double C48146 = bs[3];
    const double C48145 = yP - yQ;
    const double C48153 = bs[4];
    const double C48151 = xP - xQ;
    const double C48161 = bs[5];
    const double C48170 = bs[6];
    const double C48181 = bs[7];
    const double C48208 = bs[2];
    const double C48289 = zP - zQ;
    const double C115 = bs[0];
    const double C48931 = xA - xB;
    const double C48968 = ce + de;
    const double C48967 = ce * de;
    const double C48966 = xC - xD;
    const double C48981 = yC - yD;
    const double C48990 = zC - zD;
    const double C49048 = zA - zB;
    const double C47926 = std::pow(C47918, 2);
    const double C47958 = 2 * C47918;
    const double C47933 = 2 * C47917;
    const double C47927 = C47917 * C47916;
    const double C49031 = std::pow(C47916, 2);
    const double C49090 = C47916 * be;
    const double C49088 = C47916 * ae;
    const double C47982 = C47916 * C47925;
    const double C47981 = C47925 / C47918;
    const double C48028 = -2 * C47925;
    const double C47992 = C47985 / C47918;
    const double C47987 = C47916 * C47980;
    const double C48027 = -2 * C47980;
    const double C48065 = C48064 / C47918;
    const double C48141 = 2 * C48139;
    const double C48148 = std::pow(C48145, 2);
    const double C48194 = C48145 * ae;
    const double C48193 = C48145 * be;
    const double C48163 = std::pow(C48151, 2);
    const double C48412 = std::pow(C48289, 2);
    const double C48934 = C48931 * be;
    const double C48933 = C48931 * ae;
    const double C48932 = std::pow(C48931, 2);
    const double C48978 = 2 * C48968;
    const double C49256 = std::pow(C48968, 2);
    const double C48969 = std::pow(C48966, 2);
    const double C49255 = C48966 * de;
    const double C49254 = C48966 * ce;
    const double C49003 = std::pow(C48981, 2);
    const double C49260 = C48981 * de;
    const double C49258 = C48981 * ce;
    const double C49020 = std::pow(C48990, 2);
    const double C49261 = C48990 * de;
    const double C49259 = C48990 * ce;
    const double C49049 = std::pow(C49048, 2);
    const double C49132 = C49048 * be;
    const double C49130 = C49048 * ae;
    const double C47928 = 2 * C47926;
    const double C48069 = 4 * C47926;
    const double C48026 = C47926 * C47958;
    const double C48946 = std::pow(C47958, -1);
    const double C49250 = std::pow(C47958, -2);
    const double C49032 = C49031 * C47917;
    const double C49262 = std::pow(C49088, 2);
    const double C47990 = C47982 / C47918;
    const double C48037 = ae * C48028;
    const double C47993 = C47987 / C47918;
    const double C48036 = ae * C48027;
    const double C48143 = C48141 / C48140;
    const double C136 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C48141 / C48140, 2) -
          (bs[1] * C48141) / C48140) *
         C47917) /
        C47926;
    const double C116 = -(C48151 * bs[1] * C48141) / C48140;
    const double C268 = -(C48145 * bs[1] * C48141) / C48140;
    const double C404 = -(C48289 * bs[1] * C48141) / C48140;
    const double C48155 = C48148 * C48153;
    const double C48164 = C48148 * C48161;
    const double C48172 = C48148 * C48170;
    const double C48184 = C48148 * C48181;
    const double C48196 = C48161 * C48194;
    const double C48201 = C48153 * C48194;
    const double C48211 = C48170 * C48194;
    const double C48227 = C48146 * C48194;
    const double C48265 = C48181 * C48194;
    const double C123 = (-(bs[1] * C48194 * C48141) / C48140) / C47918;
    const double C48195 = C48161 * C48193;
    const double C48200 = C48153 * C48193;
    const double C48210 = C48170 * C48193;
    const double C48226 = C48146 * C48193;
    const double C48259 = C48181 * C48193;
    const double C122 = (-(bs[1] * C48193 * C48141) / C48140) / C47918;
    const double C49243 = std::pow(C48933, 2);
    const double C48935 = C48932 * C47917;
    const double C49257 = std::pow(C48978, -1);
    const double C49292 = 2 * C49256;
    const double C48970 = C48969 * C48967;
    const double C49004 = C49003 * C48967;
    const double C49021 = C49020 * C48967;
    const double C49050 = C49049 * C47917;
    const double C49264 = std::pow(C49130, 2);
    const double C47984 = C47925 / C47928;
    const double C47989 = C47980 / C47928;
    const double C47988 = C47979 / C47928;
    const double C48071 = C47918 * C48069;
    const double C49253 = 4 * C48026;
    const double C49033 = C49032 / C47918;
    const double C47994 = 0 - C47990;
    const double C48042 = C48037 / C48026;
    const double C48041 = C47916 * C48037;
    const double C47997 = 0 - C47993;
    const double C48040 = C48036 / C48026;
    const double C48147 = -C48143;
    const double C48154 = std::pow(C48143, 4);
    const double C48171 = std::pow(C48143, 6);
    const double C48207 = std::pow(C48143, 2);
    const double C137 = ((xP - xQ) *
                         (bs[2] * std::pow(C48143, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C48143, 3)) *
                         C47917) /
                        C47926;
    const double C48936 = C48935 / C47918;
    const double C48971 = C48970 / C48968;
    const double C49005 = C49004 / C48968;
    const double C49022 = C49021 / C48968;
    const double C49051 = C49050 / C47918;
    const double C49034 = -C49033;
    const double C47998 = C47994 * ae;
    const double C48045 = C48041 / C47926;
    const double C48002 = C47997 * ae;
    const double C48149 = std::pow(C48147, 3);
    const double C48162 = std::pow(C48147, 5);
    const double C48182 = std::pow(C48147, 7);
    const double C48156 = C48155 * C48154;
    const double C48160 = C48153 * C48154;
    const double C48203 = C48154 * C48201;
    const double C48202 = C48154 * C48200;
    const double C48173 = C48172 * C48171;
    const double C48180 = C48170 * C48171;
    const double C48213 = C48171 * C48211;
    const double C48212 = C48171 * C48210;
    const double C48225 = C48208 * C48207;
    const double C124 = (C48151 * C48207 * C48208 * C48193) / C47918;
    const double C125 = (C48151 * C48207 * C48208 * C48194) / C47918;
    const double C278 = (C48145 * C48207 * C48208 * C48193) / C47918 -
                        (be * bs[1] * C48141) / (C48140 * C47918);
    const double C279 = (C48145 * C48207 * C48208 * C48194) / C47918 -
                        (ae * bs[1] * C48141) / (C48140 * C47918);
    const double C414 = (C48289 * C48207 * C48208 * C48193) / C47918;
    const double C415 = (C48289 * C48207 * C48208 * C48194) / C47918;
    const double C48937 = -C48936;
    const double C48972 = -C48971;
    const double C49006 = -C49005;
    const double C49023 = -C49022;
    const double C49052 = -C49051;
    const double C49035 = std::exp(C49034);
    const double C48003 = C47998 / C47918;
    const double C48006 = C48002 / C47918;
    const double C48152 = C48146 * C48149;
    const double C48229 = C48149 * C48227;
    const double C48228 = C48149 * C48226;
    const double C138 =
        ((bs[2] * std::pow(C48143, 2) + C48148 * C48146 * C48149) * C47917 +
         (C48146 * C48149 + C48148 * bs[4] * std::pow(C48143, 4)) * C47917 *
             std::pow(xP - xQ, 2)) /
        C47926;
    const double C286 =
        (ae * C48207 * C48208 * C48193 + be * C48207 * C48208 * C48194 +
         C48145 * (C48208 * C48207 + C48148 * C48146 * C48149) * C47917) /
        C47926;
    const double C422 =
        ((zP - zQ) * (C48208 * C48207 + C48148 * C48146 * C48149) * C47917) /
        C47926;
    const double C48165 = C48164 * C48162;
    const double C48169 = C48161 * C48162;
    const double C48198 = C48162 * C48196;
    const double C48197 = C48162 * C48195;
    const double C48185 = C48184 * C48182;
    const double C48271 = C48182 * C48265;
    const double C48267 = C48182 * C48259;
    const double C48236 = C48160 * C48163;
    const double C48244 = C48151 * C48160;
    const double C48345 = C48160 * ae;
    const double C48343 = C48160 * C48148;
    const double C48342 = C48145 * C48160;
    const double C48341 = C48160 * be;
    const double C48912 = C48160 * C48412;
    const double C48921 = C48289 * C48160;
    const double C48233 = C48151 * C48203;
    const double C48320 = C48145 * C48203;
    const double C48338 = be * C48203;
    const double C48231 = C48151 * C48202;
    const double C48317 = C48145 * C48202;
    const double C48337 = ae * C48202;
    const double C48262 = C48180 * C48163;
    const double C48479 = C48151 * C48180;
    const double C48555 = C48180 * ae;
    const double C48549 = C48180 * C48148;
    const double C48548 = C48145 * C48180;
    const double C48547 = C48180 * be;
    const double C48215 = C48213 * C48163;
    const double C48264 = C48151 * C48213;
    const double C48442 = C48145 * C48213;
    const double C48542 = be * C48213;
    const double C48601 = C48289 * C48213;
    const double C48619 = C48213 * C48412;
    const double C48214 = C48212 * C48163;
    const double C48258 = C48151 * C48212;
    const double C48436 = C48145 * C48212;
    const double C48541 = ae * C48212;
    const double C48600 = C48289 * C48212;
    const double C48618 = C48212 * C48412;
    const double C117 = C48225 * C48163 - (bs[1] * C48141) / C48140;
    const double C267 = C48145 * C48151 * C48225;
    const double C403 = C48289 * C48151 * C48225;
    const double C604 = C48225 * C48148 - (bs[1] * C48141) / C48140;
    const double C706 = C48289 * C48145 * C48225;
    const double C957 = C48225 * C48412 - (bs[1] * C48141) / C48140;
    const double C48938 = std::exp(C48937);
    const double C48973 = std::exp(C48972);
    const double C49007 = std::exp(C49006);
    const double C49024 = std::exp(C49023);
    const double C49053 = std::exp(C49052);
    const double C147 = C49035 * C137;
    const double C47929 = C47927 * C49035;
    const double C113 = -(2 * ae * be * (yA - yB) * C49035) / (ae + be);
    const double C114 =
        -((C49035 - (C47916 * 2 * C47917 * C47916 * C49035) / C47918) * 2 *
          C47917) /
        C47918;
    const double C49089 = C49035 / C47958;
    const double C49091 = C49035 * C49088;
    const double C49098 = C48946 * C49035;
    const double C49269 = C49035 * C49090;
    const double C49300 = C49250 * C49035;
    const double C49298 = C49035 * C49262;
    const double C48007 = C48003 - C47989;
    const double C48010 = C48006 - C47988;
    const double C48157 = C48152 + C48156;
    const double C48232 = C48151 * C48152;
    const double C48321 = C48152 * ae;
    const double C48319 = C48145 * C48152;
    const double C48318 = C48152 * be;
    const double C118 =
        2 * C48151 * C48225 + C48151 * (C48225 + C48152 * C48163);
    const double C266 = C48145 * (C48225 + C48152 * C48163);
    const double C402 = C48289 * (C48225 + C48152 * C48163);
    const double C1312 =
        2 * C48145 * C48225 + C48145 * (C48225 + C48152 * C48148);
    const double C1516 = C48289 * (C48225 + C48152 * C48148);
    const double C2884 =
        2 * C48289 * C48225 + C48289 * (C48225 + C48152 * C48412);
    const double C3774 =
        3 * (C48225 + C48152 * C48412) +
        C48289 * (2 * C48289 * C48152 + C48289 * (C48152 + C48160 * C48412));
    const double C127 = (C48207 * C48208 * C48194 + C48229 * C48163) / C47918;
    const double C129 =
        (2 * C48151 * C48229 + C48151 * (C48229 + C48203 * C48163)) / C47918;
    const double C275 = (C48145 * (C48229 + C48203 * C48163) +
                         (C48225 + C48152 * C48163) * ae) /
                        C47918;
    const double C277 =
        (C48145 * C48151 * C48229 + C48151 * C48225 * ae) / C47918;
    const double C411 = (C48289 * (C48229 + C48203 * C48163)) / C47918;
    const double C413 = (C48289 * C48151 * C48229) / C47918;
    const double C610 =
        (C48207 * C48208 * C48194 + C48145 * (C48145 * C48229 + C48225 * ae) +
         C48145 * C48225 * ae) /
        C47918;
    const double C712 = (C48289 * (C48145 * C48229 + C48225 * ae)) / C47918;
    const double C963 = (C48207 * C48208 * C48194 + C48229 * C48412) / C47918;
    const double C2891 =
        (2 * C48289 * C48229 + C48289 * (C48229 + C48203 * C48412)) / C47918;
    const double C126 = (C48207 * C48208 * C48193 + C48228 * C48163) / C47918;
    const double C128 =
        (2 * C48151 * C48228 + C48151 * (C48228 + C48202 * C48163)) / C47918;
    const double C274 = (C48145 * (C48228 + C48202 * C48163) +
                         (C48225 + C48152 * C48163) * be) /
                        C47918;
    const double C276 =
        (C48145 * C48151 * C48228 + C48151 * C48225 * be) / C47918;
    const double C410 = (C48289 * (C48228 + C48202 * C48163)) / C47918;
    const double C412 = (C48289 * C48151 * C48228) / C47918;
    const double C609 =
        (C48207 * C48208 * C48193 + C48145 * (C48145 * C48228 + C48225 * be) +
         C48145 * C48225 * be) /
        C47918;
    const double C711 = (C48289 * (C48145 * C48228 + C48225 * be)) / C47918;
    const double C962 = (C48207 * C48208 * C48193 + C48228 * C48412) / C47918;
    const double C2890 =
        (2 * C48289 * C48228 + C48289 * (C48228 + C48202 * C48412)) / C47918;
    const double C151 = C49035 * C138;
    const double C2902 = C49035 * C422;
    const double C48166 = C48160 + C48165;
    const double C48174 = C48169 + C48173;
    const double C48245 = C48169 * C48163;
    const double C48261 = C48151 * C48169;
    const double C48443 = C48169 * ae;
    const double C48439 = C48169 * C48148;
    const double C48438 = C48145 * C48169;
    const double C48437 = C48169 * be;
    const double C48922 = C48169 * C48412;
    const double C48237 = C48198 * C48163;
    const double C48246 = C48151 * C48198;
    const double C48344 = C48145 * C48198;
    const double C48433 = be * C48198;
    const double C48519 = C48289 * C48198;
    const double C48809 = C48198 * C48412;
    const double C3778 =
        (3 * (C48229 + C48203 * C48412) +
         C48289 * (2 * C48289 * C48203 + C48289 * (C48203 + C48198 * C48412))) /
        C47918;
    const double C48235 = C48197 * C48163;
    const double C48242 = C48151 * C48197;
    const double C48340 = C48145 * C48197;
    const double C48432 = ae * C48197;
    const double C48518 = C48289 * C48197;
    const double C48806 = C48197 * C48412;
    const double C3777 =
        (3 * (C48228 + C48202 * C48412) +
         C48289 * (2 * C48289 * C48202 + C48289 * (C48202 + C48197 * C48412))) /
        C47918;
    const double C48186 = C48180 + C48185;
    const double C48274 = C48271 * C48163;
    const double C48482 = C48151 * C48271;
    const double C48554 = C48145 * C48271;
    const double C48272 = C48267 * C48163;
    const double C48478 = C48151 * C48267;
    const double C48546 = C48145 * C48267;
    const double C48239 = C48152 + C48236;
    const double C48249 = 2 * C48244;
    const double C48313 = C48244 * ae;
    const double C48311 = C48145 * C48244;
    const double C48310 = C48244 * be;
    const double C48349 = C48152 + C48343;
    const double C48351 = C48342 * ae;
    const double C48348 = C48342 * be;
    const double C48440 = 2 * C48342;
    const double C48913 = C48152 + C48912;
    const double C48923 = 2 * C48921;
    const double C965 = (C48151 * C48229 + C48233 * C48412) / C47918;
    const double C964 = (C48151 * C48228 + C48231 * C48412) / C47918;
    const double C48346 = C48337 + C48338;
    const double C48269 = C48169 + C48262;
    const double C48491 = C48479 * ae;
    const double C48489 = C48479 * C48148;
    const double C48488 = C48145 * C48479;
    const double C48487 = C48479 * be;
    const double C48561 = C48169 + C48549;
    const double C48563 = C48548 * ae;
    const double C48560 = C48548 * be;
    const double C48217 = C48198 + C48215;
    const double C48270 = 2 * C48264;
    const double C48367 = C48145 * C48264;
    const double C48475 = be * C48264;
    const double C48528 = C48289 * C48264;
    const double C48815 = C48264 * C48412;
    const double C48606 = be * C48601;
    const double C48622 = C48198 + C48619;
    const double C48216 = C48197 + C48214;
    const double C48266 = 2 * C48258;
    const double C48363 = C48145 * C48258;
    const double C48474 = ae * C48258;
    const double C48527 = C48289 * C48258;
    const double C48812 = C48258 * C48412;
    const double C48558 = C48541 + C48542;
    const double C48605 = ae * C48600;
    const double C48621 = C48197 + C48618;
    const double C48940 = C48938 * C48933;
    const double C48939 = C48938 / C47958;
    const double C48948 = C48946 * C48938;
    const double C49246 = C48938 * C48934;
    const double C49289 = C49250 * C48938;
    const double C49283 = C48938 * C49243;
    const double C49293 = C49257 * C48973;
    const double C49291 = C48973 * C49254;
    const double C262 = -(C48973 * C49255) / C48968;
    const double C49295 = C49257 * C49007;
    const double C49294 = C49007 * C49258;
    const double C534 = -(C49007 * C49260) / C48968;
    const double C49297 = C49257 * C49024;
    const double C49296 = C49024 * C49259;
    const double C808 = -(C49024 * C49261) / C48968;
    const double C49131 = C49053 / C47958;
    const double C49133 = C49053 * C49130;
    const double C49140 = C48946 * C49053;
    const double C49276 = C49053 * C49132;
    const double C49303 = C49250 * C49053;
    const double C49301 = C49053 * C49264;
    const double C47932 = 2 * C47929;
    const double C47986 = C47929 / C47926;
    const double C48030 = -4 * C47929;
    const double C1097 = ((0 * ae) / C47918 - C47929 / C47926) / (2 * C47918) +
                         (0 * ae) / C47918;
    const double C3904 = (0 * ae) / C47918 - C47929 / C47926;
    const double C146 = C113 * C125;
    const double C144 = C113 * C124;
    const double C2901 = C113 * C415;
    const double C2899 = C113 * C414;
    const double C149 = C114 * C117;
    const double C145 = C114 * C116;
    const double C302 = C114 * C267;
    const double C438 = C114 * C403;
    const double C2906 = C114 * C957;
    const double C2900 = C114 * C404;
    const double C3354 = C114 * C706;
    const double C7937 = (C49035 * std::pow(C49090, 2)) / C47926 + C49089;
    const double C49092 = C49091 * C49090;
    const double C49097 = C49091 / C47928;
    const double C49266 = C49091 / C47918;
    const double C49263 = C48946 * C49091;
    const double C49099 = C49098 * C49090;
    const double C49275 = C49098 / C48069;
    const double C49273 = C49088 * C49098;
    const double C49272 = 2 * C49098;
    const double C9260 = C49098 / C49253;
    const double C26746 = C49098 / C47958;
    const double C49305 = C49269 / C47918;
    const double C7938 = (-2 * C48946 * C49269) / C47918;
    const double C49319 = C49298 / C47926;
    const double C48012 = C48007 / C47958;
    const double C48011 = C47916 * C48007;
    const double C48029 = 2 * C48007;
    const double C48015 = C48010 + C47981;
    const double C48158 = C48157 * C47917;
    const double C611 =
        (C48151 * C48228 + C48145 * (C48145 * C48231 + C48232 * be) +
         C48145 * C48232 * be) /
        C47918;
    const double C612 =
        (C48151 * C48229 + C48145 * (C48145 * C48233 + C48232 * ae) +
         C48145 * C48232 * ae) /
        C47918;
    const double C713 = (C48289 * (C48145 * C48231 + C48232 * be)) / C47918;
    const double C714 = (C48289 * (C48145 * C48233 + C48232 * ae)) / C47918;
    const double C605 = C48151 * C48225 + C48232 * C48148;
    const double C707 = C48289 * C48145 * C48232;
    const double C958 = C48151 * C48225 + C48232 * C48412;
    const double C1311 =
        2 * C48145 * C48232 + C48145 * (C48232 + C48244 * C48148);
    const double C1515 = C48289 * (C48232 + C48244 * C48148);
    const double C2883 =
        2 * C48289 * C48232 + C48289 * (C48232 + C48244 * C48412);
    const double C48323 = C48320 + C48321;
    const double C2400 = C48145 * C48225 + C48319 * C48412;
    const double C3340 =
        2 * C48289 * C48319 + C48289 * (C48319 + C48342 * C48412);
    const double C48322 = C48317 + C48318;
    const double C153 = C114 * C118;
    const double C298 = C114 * C266;
    const double C434 = C114 * C402;
    const double C3791 = C114 * C2884;
    const double C18079 = C114 * C3774;
    const double C150 = C113 * C127;
    const double C154 = C113 * C129;
    const double C299 = C113 * C275;
    const double C303 = C113 * C277;
    const double C435 = C113 * C411;
    const double C439 = C113 * C413;
    const double C3355 = C113 * C712;
    const double C2907 = C113 * C963;
    const double C3792 = C113 * C2891;
    const double C148 = C113 * C126;
    const double C152 = C113 * C128;
    const double C297 = C113 * C274;
    const double C301 = C113 * C276;
    const double C433 = C113 * C410;
    const double C437 = C113 * C412;
    const double C3353 = C113 * C711;
    const double C2905 = C113 * C962;
    const double C3790 = C113 * C2890;
    const double C48167 = C48166 * C47917;
    const double C48175 = C48174 * C47917;
    const double C48250 = C48160 + C48245;
    const double C48268 = 2 * C48261;
    const double C48368 = C48261 * ae;
    const double C48366 = C48261 * C48148;
    const double C48365 = C48145 * C48261;
    const double C48364 = C48261 * be;
    const double C48915 = C48261 * C48412;
    const double C3775 =
        3 * (C48232 + C48244 * C48412) +
        C48289 * (2 * C48289 * C48244 + C48289 * (C48244 + C48261 * C48412));
    const double C48449 = C48442 + C48443;
    const double C48448 = C48160 + C48439;
    const double C48450 = C48438 * ae;
    const double C48447 = C48438 * be;
    const double C48550 = 2 * C48438;
    const double C48918 = C48438 * C48412;
    const double C11247 =
        3 * (C48319 + C48342 * C48412) +
        C48289 * (2 * C48289 * C48342 + C48289 * (C48342 + C48438 * C48412));
    const double C48446 = C48436 + C48437;
    const double C48924 = C48160 + C48922;
    const double C48240 = C48203 + C48237;
    const double C48251 = 2 * C48246;
    const double C48312 = C48145 * C48246;
    const double C48361 = be * C48246;
    const double C2889 =
        (2 * C48289 * C48233 + C48289 * (C48233 + C48246 * C48412)) / C47918;
    const double C3780 =
        (3 * (C48233 + C48246 * C48412) +
         C48289 * (2 * C48289 * C48246 + C48289 * (C48246 + C48264 * C48412))) /
        C47918;
    const double C48350 = C48344 + C48345;
    const double C48522 = be * C48519;
    const double C48828 = 2 * C48519;
    const double C48810 = C48203 + C48809;
    const double C18080 = C113 * C3778;
    const double C48238 = C48202 + C48235;
    const double C48248 = 2 * C48242;
    const double C48309 = C48145 * C48242;
    const double C48360 = ae * C48242;
    const double C2888 =
        (2 * C48289 * C48231 + C48289 * (C48231 + C48242 * C48412)) / C47918;
    const double C3779 =
        (3 * (C48231 + C48242 * C48412) +
         C48289 * (2 * C48289 * C48242 + C48289 * (C48242 + C48258 * C48412))) /
        C47918;
    const double C48347 = C48340 + C48341;
    const double C48445 = C48432 + C48433;
    const double C48521 = ae * C48518;
    const double C48824 = 2 * C48518;
    const double C48807 = C48202 + C48806;
    const double C18078 = C113 * C3777;
    const double C48187 = C48186 * C47917;
    const double C48277 = C48213 + C48274;
    const double C48490 = C48145 * C48482;
    const double C48562 = C48554 + C48555;
    const double C48275 = C48212 + C48272;
    const double C48486 = C48145 * C48478;
    const double C48559 = C48546 + C48547;
    const double C119 = 3 * (C48225 + C48152 * C48163) +
                        C48151 * (2 * C48232 + C48151 * C48239);
    const double C265 = C48145 * (2 * C48232 + C48151 * C48239);
    const double C401 = C48289 * (2 * C48232 + C48151 * C48239);
    const double C606 = C48225 + C48152 * C48163 + C48239 * C48148;
    const double C708 = C48289 * C48145 * C48239;
    const double C959 = C48225 + C48152 * C48163 + C48239 * C48412;
    const double C2402 = C48145 * C48232 + C48311 * C48412;
    const double C1828 = 3 * (C48225 + C48152 * C48148) +
                         C48145 * (2 * C48319 + C48145 * C48349);
    const double C1986 = C48289 * (2 * C48319 + C48145 * C48349);
    const double C2401 = C48225 + C48152 * C48148 + C48349 * C48412;
    const double C18066 =
        4 * (2 * C48289 * C48152 + C48289 * C48913) +
        C48289 * (3 * C48913 + C48289 * (2 * C48289 * C48160 +
                                         C48289 * (C48160 + C48169 * C48412)));
    const double C2540 = C113 * C965;
    const double C2538 = C113 * C964;
    const double C48273 = C48151 * C48269;
    const double C48391 = C48269 * ae;
    const double C48389 = C48269 * C48148;
    const double C48388 = C48145 * C48269;
    const double C48387 = C48269 * be;
    const double C48496 = C48261 + C48489;
    const double C48498 = C48488 * ae;
    const double C48495 = C48488 * be;
    const double C48571 = C48561 * ae;
    const double C48569 = C48145 * C48561;
    const double C48568 = C48561 * be;
    const double C48247 = C48151 * C48217;
    const double C48263 = 3 * C48217;
    const double C48303 = C48145 * C48217;
    const double C48384 = be * C48217;
    const double C48531 = be * C48528;
    const double C48816 = C48246 + C48815;
    const double C48625 = be * C48622;
    const double C48829 = C48289 * C48622;
    const double C48243 = C48151 * C48216;
    const double C48257 = 3 * C48216;
    const double C48300 = C48145 * C48216;
    const double C48383 = ae * C48216;
    const double C48484 = C48474 + C48475;
    const double C48530 = ae * C48527;
    const double C48813 = C48242 + C48812;
    const double C48609 = C48605 + C48606;
    const double C48624 = ae * C48621;
    const double C48825 = C48289 * C48621;
    const double C48941 = C48940 * C48934;
    const double C48947 = C48940 / C47928;
    const double C49247 = C48946 * C48940;
    const double C49245 = C48940 / C47918;
    const double C1090 = (C48938 * std::pow(C48934, 2)) / C47926 + C48939;
    const double C48949 = C48948 * C48934;
    const double C49267 = C48948 / C48069;
    const double C49251 = C48933 * C48948;
    const double C49249 = 2 * C48948;
    const double C106 = C48948 / C49253;
    const double C26749 = C48948 / C47958;
    const double C49285 = C49246 / C47918;
    const double C1091 = (-2 * C48946 * C49246) / C47918;
    const double C49314 = C49283 / C47926;
    const double C112 = C49293 / C48978;
    const double C110 = C48973 / C48978 - (C49291 * C49255) / C49256;
    const double C111 = C49291 / C49292 - (C49293 * C49255) / C48968;
    const double C536 = C49291 / C48968;
    const double C602 = C49295 / C48978;
    const double C260 = C49294 / C48968;
    const double C600 = C49007 / C48978 - (C49294 * C49260) / C49256;
    const double C601 = C49294 / C49292 - (C49295 * C49260) / C48968;
    const double C956 = C49297 / C48978;
    const double C398 = C49296 / C48968;
    const double C954 = C49024 / C48978 - (C49296 * C49261) / C49256;
    const double C955 = C49296 / C49292 - (C49297 * C49261) / C48968;
    const double C15374 = (C49053 * std::pow(C49132, 2)) / C47926 + C49131;
    const double C49134 = C49133 * C49132;
    const double C49139 = C49133 / C47928;
    const double C49268 = C49133 / C47918;
    const double C49265 = C48946 * C49133;
    const double C49141 = C49140 * C49132;
    const double C49282 = C49140 / C48069;
    const double C49280 = C49130 * C49140;
    const double C49279 = 2 * C49140;
    const double C17897 = C49140 / C49253;
    const double C36863 = C49140 / C47958;
    const double C49310 = C49276 / C47918;
    const double C15375 = (-2 * C48946 * C49276) / C47918;
    const double C49321 = C49301 / C47926;
    const double C47934 = C47916 * C47932;
    const double C7947 =
        ((-C47932 / C47918) / C47958 - (0 * be) / C47918) / C47958 -
        (0 * be) / C47918;
    const double C22564 = (-C47932 / C47918) / C47958 - (0 * be) / C47918;
    const double C47996 = C47992 - C47986;
    const double C48038 = C48030 / C47918;
    const double C3921 = C3904 * C275;
    const double C3919 = C3904 * C274;
    const double C3913 = C3904 * C277;
    const double C3911 = C3904 * C276;
    const double C6693 = C3904 * C712;
    const double C6691 = C3904 * C711;
    const double C164 = C144 - C145;
    const double C2925 = C2899 - C2900;
    const double C7965 = C7937 * C138;
    const double C7953 = C7937 * C137;
    const double C10338 = C7937 * C422;
    const double C49093 = C49092 / C47926;
    const double C3918 = C49266 * C138;
    const double C3910 = C49266 * C137;
    const double C6690 = C49266 * C422;
    const double C1093 =
        (((0 - (C47916 * C47925) / C47918) * ae) / C47918 - (0 * be) / C47928) /
            (2 * C47918) +
        ((C47916 * (((C49035 - (C47916 * 2 * C47929) / C47918) * ae) / C47918 -
                    C47925 / C47928) +
          C49266) *
         ae) /
            C47918 +
        (0 * ae) / C47918 - C47929 / C47926;
    const double C49299 = 2 * C49263;
    const double C49100 = C49099 / C47918;
    const double C49308 = C49273 / C47928;
    const double C49323 = C49266 - C49305;
    const double C22556 = -C49305;
    const double C49332 = C49319 + C49089;
    const double C48016 = C48011 + 0;
    const double C48048 = C48045 + C48029;
    const double C48019 = C48015 / C47958;
    const double C139 =
        (2 * C48151 * C48158 +
         C48151 * (C48158 +
                   (C48153 * C48154 + C48148 * bs[5] * std::pow(C48147, 5)) *
                       C47917 * std::pow(C48151, 2))) /
        C47926;
    const double C285 =
        (ae * C48151 * C48149 * C48146 * C48193 +
         be * C48151 * C48149 * C48146 * C48194 + C48145 * C48151 * C48158) /
        C47926;
    const double C421 = ((zP - zQ) * C48151 * C48158) / C47926;
    const double C619 =
        ((C48225 + C48148 * C48146 * C48149) * C47917 +
         ae * (C48145 * C48228 + C48225 * be) +
         be * (C48145 * C48229 + C48225 * ae) +
         C48145 * (ae * C48228 + be * C48229 + C48145 * C48158)) /
        C47926;
    const double C721 = (ae * C48289 * C48228 + be * C48289 * C48229 +
                         C48145 * C48289 * C48158) /
                        C47926;
    const double C972 = ((C48225 + C48148 * C48146 * C48149) * C47917 +
                         C48158 * std::pow(C48289, 2)) /
                        C47926;
    const double C1108 = C1097 * C611;
    const double C4111 = C3904 * C611;
    const double C1110 = C1097 * C612;
    const double C4113 = C3904 * C612;
    const double C2721 = C113 * C713;
    const double C4283 = C3904 * C713;
    const double C2723 = C113 * C714;
    const double C4285 = C3904 * C714;
    const double C2722 = C114 * C707;
    const double C2539 = C114 * C958;
    const double C2916 = C114 * C2883;
    const double C1319 = (2 * (C48145 * C48229 + C48225 * ae) +
                          C48145 * (C48229 + C48145 * C48323 + C48319 * ae) +
                          (C48225 + C48152 * C48148) * ae) /
                         C47918;
    const double C1523 =
        (C48289 * (C48229 + C48145 * C48323 + C48319 * ae)) / C47918;
    const double C2407 =
        (C48145 * C48229 + C48225 * ae + C48323 * C48412) / C47918;
    const double C3360 = C114 * C2400;
    const double C18330 = C114 * C3340;
    const double C1318 = (2 * (C48145 * C48228 + C48225 * be) +
                          C48145 * (C48228 + C48145 * C48322 + C48319 * be) +
                          (C48225 + C48152 * C48148) * be) /
                         C47918;
    const double C1522 =
        (C48289 * (C48228 + C48145 * C48322 + C48319 * be)) / C47918;
    const double C2406 =
        (C48145 * C48228 + C48225 * be + C48322 * C48412) / C47918;
    const double C165 = C148 - C149;
    const double C166 = C152 - C153;
    const double C307 = C297 - C298;
    const double C308 = C301 - C302;
    const double C443 = C433 - C434;
    const double C444 = C437 - C438;
    const double C3365 = C3353 - C3354;
    const double C2926 = C2905 - C2906;
    const double C3795 = C3790 - C3791;
    const double C48308 = C48151 * C48167;
    const double C48339 = C48145 * C48167;
    const double C48406 = C48289 * C48167;
    const double C140 =
        (3 * (C48158 + C48167 * C48163) +
         C48151 * (2 * C48151 * C48167 +
                   C48151 * (C48167 + (C48161 * C48162 +
                                       C48148 * bs[6] * std::pow(C48143, 6)) *
                                          C47917 * C48163))) /
        C47926;
    const double C284 = (ae * (C48149 * C48146 * C48193 + C48202 * C48163) +
                         be * (C48149 * C48146 * C48194 + C48203 * C48163) +
                         C48145 * (C48158 + C48167 * C48163)) /
                        C47926;
    const double C420 = ((zP - zQ) * (C48158 + C48167 * C48163)) / C47926;
    const double C620 =
        (C48151 * C48158 + ae * (C48145 * C48231 + C48232 * be) +
         be * (C48145 * C48233 + C48232 * ae) +
         C48145 * (ae * C48231 + be * C48233 + C48145 * C48151 * C48167)) /
        C47926;
    const double C722 = (ae * C48289 * C48231 + be * C48289 * C48233 +
                         C48145 * C48289 * C48151 * C48167) /
                        C47926;
    const double C973 =
        (C48151 * C48158 + C48151 * C48167 * std::pow(C48289, 2)) / C47926;
    const double C1324 =
        (2 * (ae * C48228 + be * C48229 + C48145 * C48158) +
         ae * (C48228 + C48145 * C48322 + C48319 * be) +
         be * (C48229 + C48145 * C48323 + C48319 * ae) +
         C48145 * (C48158 + ae * C48322 + be * C48323 +
                   C48145 * (ae * C48202 + be * C48203 + C48145 * C48167))) /
        C47926;
    const double C1528 =
        (C48289 * C48158 + ae * C48289 * C48322 + be * C48289 * C48323 +
         C48145 * (ae * C48289 * C48202 + be * C48289 * C48203 +
                   C48145 * C48289 * C48167)) /
        C47926;
    const double C2418 =
        (ae * (C48228 + C48202 * C48412) + be * (C48229 + C48203 * C48412) +
         C48145 * (C48158 + C48167 * C48412)) /
        C47926;
    const double C2896 =
        (2 * C48289 * C48158 + C48289 * (C48158 + C48167 * C48412)) / C47926;
    const double C48176 = C48175 * C48163;
    const double C48179 = C48151 * C48175;
    const double C48434 = C48145 * C48175;
    const double C48520 = C48289 * C48175;
    const double C48615 = C48175 * C48412;
    const double C48253 = C48151 * C48250;
    const double C48260 = 3 * C48250;
    const double C48304 = C48250 * ae;
    const double C48302 = C48145 * C48250;
    const double C48301 = C48250 * be;
    const double C1310 =
        2 * C48145 * C48239 + C48145 * (C48239 + C48250 * C48148);
    const double C1514 = C48289 * (C48239 + C48250 * C48148);
    const double C2882 =
        2 * C48289 * C48239 + C48289 * (C48239 + C48250 * C48412);
    const double C3776 =
        3 * (C48239 + C48250 * C48412) +
        C48289 * (2 * C48289 * C48250 + C48289 * (C48250 + C48269 * C48412));
    const double C48373 = C48367 + C48368;
    const double C48372 = C48244 + C48366;
    const double C48374 = C48365 * ae;
    const double C48371 = C48365 * be;
    const double C48480 = 2 * C48365;
    const double C3341 =
        2 * C48289 * C48311 + C48289 * (C48311 + C48365 * C48412);
    const double C17980 =
        3 * (C48311 + C48365 * C48412) +
        C48289 * (2 * C48289 * C48365 + C48289 * (C48365 + C48488 * C48412));
    const double C48370 = C48363 + C48364;
    const double C48916 = C48244 + C48915;
    const double C18086 = C114 * C3775;
    const double C48456 = C48145 * C48449;
    const double C48553 = 2 * C48449;
    const double C48540 = be * C48449;
    const double C48599 = C48289 * C48449;
    const double C48821 = C48449 * C48412;
    const double C48457 = C48448 * ae;
    const double C48455 = C48145 * C48448;
    const double C48454 = C48448 * be;
    const double C48551 = 3 * C48448;
    const double C10326 =
        2 * C48289 * C48349 + C48289 * (C48349 + C48448 * C48412);
    const double C11248 =
        3 * (C48349 + C48448 * C48412) +
        C48289 * (2 * C48289 * C48448 + C48289 * (C48448 + C48561 * C48412));
    const double C48919 = C48342 + C48918;
    const double C18334 = C114 * C11247;
    const double C48453 = C48145 * C48446;
    const double C48545 = 2 * C48446;
    const double C48539 = ae * C48446;
    const double C48598 = C48289 * C48446;
    const double C48818 = C48446 * C48412;
    const double C48925 = C48289 * C48924;
    const double C131 = (3 * (C48229 + C48203 * C48163) +
                         C48151 * (2 * C48233 + C48151 * C48240)) /
                        C47918;
    const double C273 = (C48145 * (2 * C48233 + C48151 * C48240) +
                         (2 * C48232 + C48151 * C48239) * ae) /
                        C47918;
    const double C409 = (C48289 * (2 * C48233 + C48151 * C48240)) / C47918;
    const double C614 =
        (C48229 + C48203 * C48163 + C48145 * (C48145 * C48240 + C48239 * ae) +
         C48145 * C48239 * ae) /
        C47918;
    const double C716 = (C48289 * (C48145 * C48240 + C48239 * ae)) / C47918;
    const double C967 = (C48229 + C48203 * C48163 + C48240 * C48412) / C47918;
    const double C2887 =
        (2 * C48289 * C48240 + C48289 * (C48240 + C48217 * C48412)) / C47918;
    const double C48315 = C48312 + C48313;
    const double C2917 = C113 * C2889;
    const double C18087 = C113 * C3780;
    const double C48354 = C48145 * C48350;
    const double C48441 = 2 * C48350;
    const double C48431 = be * C48350;
    const double C3344 =
        (2 * C48289 * C48323 + C48289 * (C48323 + C48350 * C48412)) / C47918;
    const double C11250 =
        (3 * (C48323 + C48350 * C48412) +
         C48289 * (2 * C48289 * C48350 + C48289 * (C48350 + C48449 * C48412))) /
        C47918;
    const double C18069 =
        (4 * (2 * C48289 * C48203 + C48289 * C48810) +
         C48289 * (3 * C48810 + C48289 * (2 * C48519 + C48289 * C48622))) /
        C47918;
    const double C130 = (3 * (C48228 + C48202 * C48163) +
                         C48151 * (2 * C48231 + C48151 * C48238)) /
                        C47918;
    const double C272 = (C48145 * (2 * C48231 + C48151 * C48238) +
                         (2 * C48232 + C48151 * C48239) * be) /
                        C47918;
    const double C408 = (C48289 * (2 * C48231 + C48151 * C48238)) / C47918;
    const double C613 =
        (C48228 + C48202 * C48163 + C48145 * (C48145 * C48238 + C48239 * be) +
         C48145 * C48239 * be) /
        C47918;
    const double C715 = (C48289 * (C48145 * C48238 + C48239 * be)) / C47918;
    const double C966 = (C48228 + C48202 * C48163 + C48238 * C48412) / C47918;
    const double C2886 =
        (2 * C48289 * C48238 + C48289 * (C48238 + C48216 * C48412)) / C47918;
    const double C48314 = C48309 + C48310;
    const double C48369 = C48360 + C48361;
    const double C2915 = C113 * C2888;
    const double C18085 = C113 * C3779;
    const double C48353 = C48145 * C48347;
    const double C48435 = 2 * C48347;
    const double C48430 = ae * C48347;
    const double C2419 =
        (C48158 + C48167 * C48412 + ae * (C48322 + C48347 * C48412) +
         be * (C48323 + C48350 * C48412) +
         C48145 * (ae * (C48202 + C48197 * C48412) +
                   be * (C48203 + C48198 * C48412) +
                   C48145 * (C48167 + C48175 * C48412))) /
        C47926;
    const double C3343 =
        (2 * C48289 * C48322 + C48289 * (C48322 + C48347 * C48412)) / C47918;
    const double C11249 =
        (3 * (C48322 + C48347 * C48412) +
         C48289 * (2 * C48289 * C48347 + C48289 * (C48347 + C48446 * C48412))) /
        C47918;
    const double C48524 = C48521 + C48522;
    const double C18068 =
        (4 * (2 * C48289 * C48202 + C48289 * C48807) +
         C48289 * (3 * C48807 + C48289 * (2 * C48518 + C48289 * C48621))) /
        C47918;
    const double C18089 = C18078 - C18079;
    const double C48188 = C48187 * C48163;
    const double C48476 = C48151 * C48187;
    const double C48543 = C48145 * C48187;
    const double C48602 = C48289 * C48187;
    const double C48620 = C48187 * C48412;
    const double C48280 = C48151 * C48277;
    const double C48390 = C48145 * C48277;
    const double C3782 =
        (3 * (C48240 + C48217 * C48412) +
         C48289 * (2 * C48289 * C48217 + C48289 * (C48217 + C48277 * C48412))) /
        C47918;
    const double C48497 = C48490 + C48491;
    const double C48570 = C48145 * C48562;
    const double C48278 = C48151 * C48275;
    const double C48386 = C48145 * C48275;
    const double C3781 =
        (3 * (C48238 + C48216 * C48412) +
         C48289 * (2 * C48289 * C48216 + C48289 * (C48216 + C48275 * C48412))) /
        C47918;
    const double C48494 = C48486 + C48487;
    const double C48567 = C48145 * C48559;
    const double C157 = C114 * C119;
    const double C294 = C114 * C265;
    const double C430 = C114 * C401;
    const double C2718 = C114 * C708;
    const double C2543 = C114 * C959;
    const double C2714 = C114 * C2402;
    const double C18576 = C114 * C18066;
    const double C48276 = C48268 + C48273;
    const double C48395 = C48250 + C48389;
    const double C48397 = C48388 * ae;
    const double C48394 = C48388 * be;
    const double C48504 = C48496 * ae;
    const double C48502 = C48145 * C48496;
    const double C48501 = C48496 * be;
    const double C48574 = C48550 + C48569;
    const double C48254 = C48251 + C48247;
    const double C18071 =
        (4 * (2 * C48289 * C48246 + C48289 * C48816) +
         C48289 *
             (3 * C48816 +
              C48289 * (2 * C48528 + C48289 * (C48264 + C48482 * C48412)))) /
        C47918;
    const double C48830 = C48828 + C48829;
    const double C48252 = C48248 + C48243;
    const double C48392 = C48383 + C48384;
    const double C48533 = C48530 + C48531;
    const double C18070 =
        (4 * (2 * C48289 * C48242 + C48289 * C48813) +
         C48289 *
             (3 * C48813 +
              C48289 * (2 * C48527 + C48289 * (C48258 + C48478 * C48412)))) /
        C47918;
    const double C48627 = C48624 + C48625;
    const double C48826 = C48824 + C48825;
    const double C48942 = C48941 / C47926;
    const double C49286 = 2 * C49247;
    const double C48950 = C48949 / C47918;
    const double C49290 = C49251 / C47928;
    const double C49315 = C49245 - C49285;
    const double C23786 = -C49285;
    const double C49329 = C49314 + C48939;
    const double C49135 = C49134 / C47926;
    const double C49302 = 2 * C49265;
    const double C49142 = C49141 / C47918;
    const double C49313 = C49280 / C47928;
    const double C49326 = C49268 - C49310;
    const double C31428 = -C49310;
    const double C49333 = C49321 + C49131;
    const double C47935 = C47934 / C47918;
    const double C7960 = C7947 * C612;
    const double C7958 = C7947 * C611;
    const double C22581 = C22564 * C275;
    const double C22579 = C22564 * C274;
    const double C22573 = C22564 * C277;
    const double C22571 = C22564 * C276;
    const double C22773 = C22564 * C612;
    const double C22771 = C22564 * C611;
    const double C22945 = C22564 * C714;
    const double C22943 = C22564 * C713;
    const double C25481 = C22564 * C712;
    const double C25479 = C22564 * C711;
    const double C48001 = C47916 * C47996;
    const double C48034 = 2 * C47996;
    const double C48063 = C47996 / C47958;
    const double C169 = C164 - C146;
    const double C2929 = C2925 - C2901;
    const double C49094 = C49089 - C49093;
    const double C1134 = C1093 * C129;
    const double C1132 = C1093 * C128;
    const double C1114 = C1093 * C127;
    const double C1112 = C1093 * C126;
    const double C1102 = C1093 * C125;
    const double C1100 = C1093 * C124;
    const double C1349 = C1093 * C277;
    const double C1347 = C1093 * C276;
    const double C1337 = C1093 * C275;
    const double C1335 = C1093 * C274;
    const double C1553 = C1093 * C413;
    const double C1551 = C1093 * C412;
    const double C1541 = C1093 * C411;
    const double C1539 = C1093 * C410;
    const double C16925 = C1093 * C965;
    const double C16923 = C1093 * C964;
    const double C16913 = C1093 * C963;
    const double C16911 = C1093 * C962;
    const double C16901 = C1093 * C415;
    const double C16899 = C1093 * C414;
    const double C17366 = C1093 * C712;
    const double C17364 = C1093 * C711;
    const double C17819 = C1093 * C2891;
    const double C17817 = C1093 * C2890;
    const double C32773 = C1093 * C714;
    const double C32771 = C1093 * C713;
    const double C49320 = C49299 / C47918;
    const double C49101 = C49097 - C49100;
    const double C49334 = C49323 / C47958;
    const double C22578 = C22556 * C138;
    const double C22570 = C22556 * C137;
    const double C25478 = C22556 * C422;
    const double C1115 = C49332 * C138;
    const double C1103 = C49332 * C137;
    const double C16902 = C49332 * C422;
    const double C48020 = C48016 * be;
    const double C48051 = C48048 * be;
    const double C155 = C49035 * C139;
    const double C1135 = C49332 * C139;
    const double C3926 = C49266 * C139;
    const double C7985 = C7937 * C139;
    const double C22586 = C22556 * C139;
    const double C304 = C49035 * C285;
    const double C1350 = C49332 * C285;
    const double C3914 = C49098 * C285;
    const double C4118 = C49266 * C285;
    const double C7957 = C7938 * C285;
    const double C8184 = C7937 * C285;
    const double C22574 = C49098 * C285;
    const double C22778 = C22556 * C285;
    const double C440 = C49035 * C421;
    const double C1554 = C49332 * C421;
    const double C4290 = C49266 * C421;
    const double C8372 = C7937 * C421;
    const double C22950 = C22556 * C421;
    const double C3356 = C49035 * C721;
    const double C6694 = C49098 * C721;
    const double C7269 = C49266 * C721;
    const double C10342 = C7938 * C721;
    const double C10807 = C7937 * C721;
    const double C17367 = C49332 * C721;
    const double C25482 = C49098 * C721;
    const double C26058 = C22556 * C721;
    const double C2908 = C49035 * C972;
    const double C7821 = C49266 * C972;
    const double C10350 = C7937 * C972;
    const double C16914 = C49332 * C972;
    const double C25487 = C22556 * C972;
    const double C2728 = C2721 - C2722;
    const double C2550 = C2538 - C2539;
    const double C7272 = C3904 * C1523;
    const double C10345 = C7947 * C1523;
    const double C16909 = C1097 * C1523;
    const double C26061 = C22564 * C1523;
    const double C3361 = C113 * C2407;
    const double C7816 = C3904 * C2407;
    const double C17378 = C1093 * C2407;
    const double C25490 = C22564 * C2407;
    const double C7270 = C3904 * C1522;
    const double C10343 = C7947 * C1522;
    const double C16907 = C1097 * C1522;
    const double C26059 = C22564 * C1522;
    const double C3359 = C113 * C2406;
    const double C7814 = C3904 * C2406;
    const double C17376 = C1093 * C2406;
    const double C25488 = C22564 * C2406;
    const double C170 = C165 - C150;
    const double C171 = C166 - C154;
    const double C311 = C307 - C299;
    const double C312 = C308 - C303;
    const double C447 = C443 - C435;
    const double C448 = C444 - C439;
    const double C3367 = C3365 - C3355;
    const double C2930 = C2926 - C2907;
    const double C3796 = C3795 - C3792;
    const double C48352 = C48346 + C48339;
    const double C3349 =
        (ae * (2 * C48289 * C48202 + C48289 * (C48202 + C48197 * C48412)) +
         be * (2 * C48289 * C48203 + C48289 * (C48203 + C48198 * C48412)) +
         C48145 * (2 * C48406 + C48289 * (C48167 + C48175 * C48412))) /
        C47926;
    const double C3783 =
        (3 * (C48158 + C48167 * C48412) +
         C48289 * (2 * C48406 + C48289 * (C48167 + C48175 * C48412))) /
        C47926;
    const double C159 = C49035 * C140;
    const double C3938 = C49266 * C140;
    const double C22598 = C22556 * C140;
    const double C300 = C49035 * C284;
    const double C1338 = C49332 * C284;
    const double C3922 = C49098 * C284;
    const double C4110 = C49266 * C284;
    const double C7969 = C7938 * C284;
    const double C8172 = C7937 * C284;
    const double C22582 = C49098 * C284;
    const double C22770 = C22556 * C284;
    const double C436 = C49035 * C420;
    const double C1542 = C49332 * C420;
    const double C4282 = C49266 * C420;
    const double C8360 = C7937 * C420;
    const double C22942 = C22556 * C420;
    const double C1111 = C49300 * C620;
    const double C4114 = C49098 * C620;
    const double C7961 = C49300 * C620;
    const double C8180 = C7938 * C620;
    const double C22774 = C49098 * C620;
    const double C26768 = C26746 * C620;
    const double C2724 = C49035 * C722;
    const double C4286 = C49098 * C722;
    const double C6480 = C49266 * C722;
    const double C8368 = C7938 * C722;
    const double C12831 = C7937 * C722;
    const double C22946 = C49098 * C722;
    const double C25268 = C22556 * C722;
    const double C32774 = C49332 * C722;
    const double C2541 = C49035 * C973;
    const double C6711 = C49266 * C973;
    const double C10362 = C7937 * C973;
    const double C16926 = C49332 * C973;
    const double C25034 = C22556 * C973;
    const double C7273 = C49098 * C1528;
    const double C10346 = C49300 * C1528;
    const double C10811 = C7938 * C1528;
    const double C16910 = C49300 * C1528;
    const double C26062 = C49098 * C1528;
    const double C30186 = C26746 * C1528;
    const double C3362 = C49035 * C2418;
    const double C7817 = C49098 * C2418;
    const double C10354 = C7938 * C2418;
    const double C10819 = C7937 * C2418;
    const double C17379 = C49332 * C2418;
    const double C19684 = C49266 * C2418;
    const double C25491 = C49098 * C2418;
    const double C26066 = C22556 * C2418;
    const double C3793 = C49035 * C2896;
    const double C11268 = C7937 * C2896;
    const double C17820 = C49332 * C2896;
    const double C20238 = C49266 * C2896;
    const double C26626 = C22556 * C2896;
    const double C48177 = C48167 + C48176;
    const double C48183 = 2 * C48179;
    const double C48362 = C48145 * C48179;
    const double C48408 = C48289 * C48179;
    const double C2420 =
        (ae * (C48231 + C48242 * C48412) + be * (C48233 + C48246 * C48412) +
         C48145 * (C48308 + C48179 * C48412)) /
        C47926;
    const double C2895 =
        (2 * C48289 * C48308 + C48289 * (C48308 + C48179 * C48412)) / C47926;
    const double C48452 = C48445 + C48434;
    const double C48523 = C48145 * C48520;
    const double C48635 = 2 * C48520;
    const double C48616 = C48167 + C48615;
    const double C48255 = C48249 + C48253;
    const double C48306 = C48303 + C48304;
    const double C2404 = C48145 * C48239 + C48302 * C48412;
    const double C3342 =
        2 * C48289 * C48302 + C48289 * (C48302 + C48388 * C48412);
    const double C48305 = C48300 + C48301;
    const double C2912 = C114 * C2882;
    const double C48377 = C48145 * C48373;
    const double C48481 = 2 * C48373;
    const double C48473 = be * C48373;
    const double C1829 = 3 * (C48232 + C48244 * C48148) +
                         C48145 * (2 * C48311 + C48145 * C48372);
    const double C1987 = C48289 * (2 * C48311 + C48145 * C48372);
    const double C2403 = C48232 + C48244 * C48148 + C48372 * C48412;
    const double C10327 =
        2 * C48289 * C48372 + C48289 * (C48372 + C48496 * C48412);
    const double C20480 = C114 * C3341;
    const double C48376 = C48145 * C48370;
    const double C48477 = 2 * C48370;
    const double C48472 = ae * C48370;
    const double C18067 =
        4 * (2 * C48289 * C48244 + C48289 * C48916) +
        C48289 * (3 * C48916 + C48289 * (2 * C48289 * C48261 +
                                         C48289 * (C48261 + C48479 * C48412)));
    const double C48461 = C48198 + C48456;
    const double C48604 = be * C48599;
    const double C48822 = C48350 + C48821;
    const double C48460 = C48440 + C48455;
    const double C18322 =
        4 * (2 * C48289 * C48342 + C48289 * C48919) +
        C48289 * (3 * C48919 + C48289 * (2 * C48289 * C48438 +
                                         C48289 * (C48438 + C48548 * C48412)));
    const double C48459 = C48197 + C48453;
    const double C48557 = C48175 + C48539;
    const double C48603 = ae * C48598;
    const double C48819 = C48347 + C48818;
    const double C48926 = C48923 + C48925;
    const double C158 = C113 * C131;
    const double C295 = C113 * C273;
    const double C3929 = C3904 * C273;
    const double C22589 = C22564 * C273;
    const double C431 = C113 * C409;
    const double C1122 = C1097 * C614;
    const double C4105 = C3904 * C614;
    const double C7972 = C7947 * C614;
    const double C22765 = C22564 * C614;
    const double C2719 = C113 * C716;
    const double C4277 = C3904 * C716;
    const double C22937 = C22564 * C716;
    const double C2544 = C113 * C967;
    const double C2913 = C113 * C2887;
    const double C1317 = (2 * (C48145 * C48233 + C48232 * ae) +
                          C48145 * (C48233 + C48145 * C48315 + C48311 * ae) +
                          (C48232 + C48244 * C48148) * ae) /
                         C47918;
    const double C1521 =
        (C48289 * (C48233 + C48145 * C48315 + C48311 * ae)) / C47918;
    const double C2411 =
        (C48145 * C48233 + C48232 * ae + C48315 * C48412) / C47918;
    const double C3346 =
        (2 * C48289 * C48315 + C48289 * (C48315 + C48373 * C48412)) / C47918;
    const double C48356 = C48203 + C48354;
    const double C18331 = C113 * C3344;
    const double C20233 = C3904 * C3344;
    const double C26621 = C22564 * C3344;
    const double C18335 = C113 * C11250;
    const double C22446 = C3904 * C11250;
    const double C43441 = C22564 * C11250;
    const double C18577 = C113 * C18069;
    const double C156 = C113 * C130;
    const double C293 = C113 * C272;
    const double C3927 = C3904 * C272;
    const double C22587 = C22564 * C272;
    const double C429 = C113 * C408;
    const double C1120 = C1097 * C613;
    const double C4103 = C3904 * C613;
    const double C7970 = C7947 * C613;
    const double C22763 = C22564 * C613;
    const double C2717 = C113 * C715;
    const double C4275 = C3904 * C715;
    const double C22935 = C22564 * C715;
    const double C2542 = C113 * C966;
    const double C2911 = C113 * C2886;
    const double C1323 =
        (2 * (ae * C48231 + be * C48233 + C48145 * C48308) +
         ae * (C48231 + C48145 * C48314 + C48311 * be) +
         be * (C48233 + C48145 * C48315 + C48311 * ae) +
         C48145 * (C48308 + ae * C48314 + be * C48315 +
                   C48145 * (ae * C48242 + be * C48246 + C48145 * C48179))) /
        C47926;
    const double C1527 =
        (C48289 * C48308 + ae * C48289 * C48314 + be * C48289 * C48315 +
         C48145 * (ae * C48289 * C48242 + be * C48289 * C48246 +
                   C48145 * C48289 * C48179)) /
        C47926;
    const double C2421 =
        (C48308 + C48179 * C48412 + ae * (C48314 + C48370 * C48412) +
         be * (C48315 + C48373 * C48412) +
         C48145 * (ae * (C48242 + C48258 * C48412) +
                   be * (C48246 + C48264 * C48412) +
                   C48145 * (C48179 + C48151 * C48187 * C48412))) /
        C47926;
    const double C1316 = (2 * (C48145 * C48231 + C48232 * be) +
                          C48145 * (C48231 + C48145 * C48314 + C48311 * be) +
                          (C48232 + C48244 * C48148) * be) /
                         C47918;
    const double C1520 =
        (C48289 * (C48231 + C48145 * C48314 + C48311 * be)) / C47918;
    const double C2410 =
        (C48145 * C48231 + C48232 * be + C48314 * C48412) / C47918;
    const double C3345 =
        (2 * C48289 * C48314 + C48289 * (C48314 + C48370 * C48412)) / C47918;
    const double C2928 = C2915 - C2916;
    const double C18090 = C18085 - C18086;
    const double C48355 = C48202 + C48353;
    const double C48444 = C48167 + C48430;
    const double C10358 = C49300 * C2419;
    const double C10823 = C7938 * C2419;
    const double C16922 = C49300 * C2419;
    const double C19688 = C49098 * C2419;
    const double C26070 = C49098 * C2419;
    const double C31313 = C26746 * C2419;
    const double C18329 = C113 * C3343;
    const double C20231 = C3904 * C3343;
    const double C26619 = C22564 * C3343;
    const double C18333 = C113 * C11249;
    const double C22444 = C3904 * C11249;
    const double C43439 = C22564 * C11249;
    const double C18575 = C113 * C18068;
    const double C18091 = C18089 - C18080;
    const double C48189 = C48175 + C48188;
    const double C48485 = C48145 * C48476;
    const double C48529 = C48289 * C48476;
    const double C48630 = C48476 * C48412;
    const double C48566 = C48558 + C48543;
    const double C48607 = C48145 * C48602;
    const double C48623 = C48175 + C48620;
    const double C48283 = C48270 + C48280;
    const double C48396 = C48390 + C48391;
    const double C48503 = C48145 * C48497;
    const double C17982 =
        (3 * (C48315 + C48373 * C48412) +
         C48289 * (2 * C48289 * C48373 + C48289 * (C48373 + C48497 * C48412))) /
        C47918;
    const double C48575 = C48213 + C48570;
    const double C48281 = C48266 + C48278;
    const double C48393 = C48386 + C48387;
    const double C48500 = C48145 * C48494;
    const double C17981 =
        (3 * (C48314 + C48370 * C48412) +
         C48289 * (2 * C48289 * C48370 + C48289 * (C48370 + C48494 * C48412))) /
        C47918;
    const double C48573 = C48212 + C48567;
    const double C48279 = C48151 * C48276;
    const double C48329 = C48276 * ae;
    const double C48327 = C48145 * C48276;
    const double C48326 = C48276 * be;
    const double C1830 = 3 * (C48239 + C48250 * C48148) +
                         C48145 * (2 * C48302 + C48145 * C48395);
    const double C1988 = C48289 * (2 * C48302 + C48145 * C48395);
    const double C2405 = C48239 + C48250 * C48148 + C48395 * C48412;
    const double C48507 = C48480 + C48502;
    const double C48581 = C48574 * ae;
    const double C48579 = C48145 * C48574;
    const double C48578 = C48574 * be;
    const double C133 = (4 * (2 * C48233 + C48151 * C48240) +
                         C48151 * (3 * C48240 + C48151 * C48254)) /
                        C47918;
    const double C407 = (C48289 * (3 * C48240 + C48151 * C48254)) / C47918;
    const double C969 =
        (2 * C48233 + C48151 * C48240 + C48254 * C48412) / C47918;
    const double C18572 =
        (5 * (3 * C48810 + C48289 * C48830) +
         C48289 * (4 * C48830 +
                   C48289 * (3 * C48622 +
                             C48289 * (2 * C48601 +
                                       C48289 * (C48213 + C48271 * C48412))))) /
        C47918;
    const double C132 = (4 * (2 * C48231 + C48151 * C48238) +
                         C48151 * (3 * C48238 + C48151 * C48252)) /
                        C47918;
    const double C406 = (C48289 * (3 * C48238 + C48151 * C48252)) / C47918;
    const double C968 =
        (2 * C48231 + C48151 * C48238 + C48252 * C48412) / C47918;
    const double C18571 =
        (5 * (3 * C48807 + C48289 * C48826) +
         C48289 * (4 * C48826 +
                   C48289 * (3 * C48621 +
                             C48289 * (2 * C48600 +
                                       C48289 * (C48212 + C48267 * C48412))))) /
        C47918;
    const double C48943 = C48939 - C48942;
    const double C49316 = C49286 / C47918;
    const double C48951 = C48947 - C48950;
    const double C49330 = C49315 / C47958;
    const double C49136 = C49131 - C49135;
    const double C49322 = C49302 / C47918;
    const double C49143 = C49139 - C49142;
    const double C49336 = C49326 / C47958;
    const double C47936 = C49035 - C47935;
    const double C48005 = C48001 + C49098;
    const double C48066 = C48063 - C48065;
    const double C174 = C169 + C147;
    const double C2933 = C2929 + C2902;
    const double C26792 = C49094 * C139;
    const double C26772 = C49094 * C138;
    const double C26760 = C49094 * C137;
    const double C26991 = C49094 * C285;
    const double C26979 = C49094 * C284;
    const double C27179 = C49094 * C421;
    const double C27167 = C49094 * C420;
    const double C29971 = C49094 * C722;
    const double C30199 = C49094 * C973;
    const double C30178 = C49094 * C422;
    const double C30758 = C49094 * C721;
    const double C31321 = C49094 * C972;
    const double C47468 = C49094 * C2418;
    const double C47900 = C49094 * C2896;
    const double C49270 = C49094 * C49088;
    const double C49307 = C49272 + C49094;
    const double C1119 = C49320 * C284;
    const double C1107 = C49320 * C285;
    const double C1346 = C49320 * C620;
    const double C1550 = C49320 * C722;
    const double C16918 = C49320 * C2418;
    const double C16906 = C49320 * C721;
    const double C17383 = C49320 * C2419;
    const double C17371 = C49320 * C1528;
    const double C26776 = C49101 * C284;
    const double C26764 = C49101 * C285;
    const double C26987 = C49101 * C620;
    const double C27175 = C49101 * C722;
    const double C30182 = C49101 * C721;
    const double C30762 = C49101 * C1528;
    const double C31317 = C49101 * C2418;
    const double C47472 = C49101 * C2419;
    const double C49274 = C49101 / C47958;
    const double C49271 = C49101 * C49088;
    const double C11377 = C49334 - (C49094 * C49090) / C47918;
    const double C48022 = C48020 / C47918;
    const double C48054 = C48051 / C47918;
    const double C2732 = C2728 - C2723;
    const double C2553 = C2550 - C2540;
    const double C3366 = C3359 - C3360;
    const double C175 = C170 + C151;
    const double C176 = C171 + C155;
    const double C316 = C312 + C304;
    const double C452 = C448 + C440;
    const double C3369 = C3367 + C3356;
    const double C2934 = C2930 + C2908;
    const double C11264 = C7938 * C3349;
    const double C17816 = C49320 * C3349;
    const double C18332 = C49035 * C3349;
    const double C20234 = C49098 * C3349;
    const double C22073 = C49266 * C3349;
    const double C26622 = C49098 * C3349;
    const double C43068 = C22556 * C3349;
    const double C47896 = C49101 * C3349;
    const double C18081 = C49035 * C3783;
    const double C22451 = C49266 * C3783;
    const double C43446 = C22556 * C3783;
    const double C315 = C311 + C300;
    const double C451 = C447 + C436;
    const double C3797 = C3796 + C3793;
    const double C141 =
        (4 * (2 * C48151 * C48167 + C48151 * C48177) +
         C48151 * (3 * C48177 +
                   C48151 * (2 * C48151 * C48175 +
                             C48151 * (C48175 +
                                       (C48170 * C48171 +
                                        C48148 * bs[7] * std::pow(C48147, 7)) *
                                           C47917 * C48163)))) /
        C47926;
    const double C283 =
        (ae * (2 * C48151 * C48202 + C48151 * (C48202 + C48197 * C48163)) +
         be * (2 * C48151 * C48203 + C48151 * (C48203 + C48198 * C48163)) +
         C48145 * (2 * C48151 * C48167 + C48151 * C48177)) /
        C47926;
    const double C419 =
        ((zP - zQ) * (2 * C48151 * C48167 + C48151 * C48177)) / C47926;
    const double C621 =
        (C48158 + C48167 * C48163 + ae * (C48145 * C48238 + C48239 * be) +
         be * (C48145 * C48240 + C48239 * ae) +
         C48145 * (ae * C48238 + be * C48240 + C48145 * C48177)) /
        C47926;
    const double C723 = (ae * C48289 * C48238 + be * C48289 * C48240 +
                         C48145 * C48289 * C48177) /
                        C47926;
    const double C974 =
        (C48158 + C48167 * C48163 + C48177 * std::pow(C48289, 2)) / C47926;
    const double C48375 = C48369 + C48362;
    const double C3350 =
        (ae * (2 * C48289 * C48242 + C48289 * (C48242 + C48258 * C48412)) +
         be * (2 * C48289 * C48246 + C48289 * (C48246 + C48264 * C48412)) +
         C48145 * (2 * C48408 + C48289 * (C48179 + C48151 * C48187 * C48412))) /
        C47926;
    const double C3784 =
        (3 * (C48308 + C48179 * C48412) +
         C48289 * (2 * C48408 + C48289 * (C48179 + C48151 * C48187 * C48412))) /
        C47926;
    const double C2716 = C49035 * C2420;
    const double C6707 = C49098 * C2420;
    const double C10366 = C7938 * C2420;
    const double C16930 = C49320 * C2420;
    const double C18930 = C49266 * C2420;
    const double C25038 = C49098 * C2420;
    const double C25260 = C22556 * C2420;
    const double C30195 = C49101 * C2420;
    const double C2918 = C49035 * C2895;
    const double C19139 = C49266 * C2895;
    const double C25500 = C22556 * C2895;
    const double C48458 = C48145 * C48452;
    const double C48536 = 2 * C48452;
    const double C48525 = C48524 + C48523;
    const double C270 = (C48145 * (3 * C48238 + C48151 * C48252) +
                         (3 * C48239 + C48151 * C48255) * be) /
                        C47918;
    const double C271 = (C48145 * (3 * C48240 + C48151 * C48254) +
                         (3 * C48239 + C48151 * C48255) * ae) /
                        C47918;
    const double C615 =
        (2 * C48231 + C48151 * C48238 +
         C48145 * (C48145 * C48252 + C48255 * be) + C48145 * C48255 * be) /
        C47918;
    const double C616 =
        (2 * C48233 + C48151 * C48240 +
         C48145 * (C48145 * C48254 + C48255 * ae) + C48145 * C48255 * ae) /
        C47918;
    const double C717 = (C48289 * (C48145 * C48252 + C48255 * be)) / C47918;
    const double C718 = (C48289 * (C48145 * C48254 + C48255 * ae)) / C47918;
    const double C120 = 4 * (2 * C48232 + C48151 * C48239) +
                        C48151 * (3 * C48239 + C48151 * C48255);
    const double C264 = C48145 * (3 * C48239 + C48151 * C48255);
    const double C400 = C48289 * (3 * C48239 + C48151 * C48255);
    const double C607 = 2 * C48232 + C48151 * C48239 + C48255 * C48148;
    const double C709 = C48289 * C48145 * C48255;
    const double C960 = 2 * C48232 + C48151 * C48239 + C48255 * C48412;
    const double C1313 =
        2 * C48145 * C48255 + C48145 * (C48255 + C48276 * C48148);
    const double C1517 = C48289 * (C48255 + C48276 * C48148);
    const double C2885 =
        2 * C48289 * C48255 + C48289 * (C48255 + C48276 * C48412);
    const double C1315 = (2 * (C48145 * C48240 + C48239 * ae) +
                          C48145 * (C48240 + C48145 * C48306 + C48302 * ae) +
                          (C48239 + C48250 * C48148) * ae) /
                         C47918;
    const double C1519 =
        (C48289 * (C48240 + C48145 * C48306 + C48302 * ae)) / C47918;
    const double C2415 =
        (C48145 * C48240 + C48239 * ae + C48306 * C48412) / C47918;
    const double C2710 = C114 * C2404;
    const double C1314 = (2 * (C48145 * C48238 + C48239 * be) +
                          C48145 * (C48238 + C48145 * C48305 + C48302 * be) +
                          (C48239 + C48250 * C48148) * be) /
                         C47918;
    const double C1518 =
        (C48289 * (C48238 + C48145 * C48305 + C48302 * be)) / C47918;
    const double C2414 =
        (C48145 * C48238 + C48239 * be + C48305 * C48412) / C47918;
    const double C48379 = C48246 + C48377;
    const double C48378 = C48242 + C48376;
    const double C48483 = C48179 + C48472;
    const double C48464 = C48461 + C48450;
    const double C18324 =
        (4 * (2 * C48289 * C48350 + C48289 * C48822) +
         C48289 *
             (3 * C48822 +
              C48289 * (2 * C48599 + C48289 * (C48449 + C48562 * C48412)))) /
        C47918;
    const double C9354 = 4 * (2 * C48319 + C48145 * C48349) +
                         C48145 * (3 * C48349 + C48145 * C48460);
    const double C9444 = C48289 * (3 * C48349 + C48145 * C48460);
    const double C9912 = 2 * C48319 + C48145 * C48349 + C48460 * C48412;
    const double C10799 =
        2 * C48289 * C48460 + C48289 * (C48460 + C48574 * C48412);
    const double C48463 = C48459 + C48447;
    const double C48565 = C48557 + C48540;
    const double C48608 = C48520 + C48603;
    const double C18323 =
        (4 * (2 * C48289 * C48347 + C48289 * C48819) +
         C48289 *
             (3 * C48819 +
              C48289 * (2 * C48598 + C48289 * (C48446 + C48559 * C48412)))) /
        C47918;
    const double C18570 =
        5 * (3 * C48913 + C48289 * C48926) +
        C48289 * (4 * C48926 +
                  C48289 * (3 * C48924 +
                            C48289 * (2 * C48289 * C48169 +
                                      C48289 * (C48169 + C48180 * C48412))));
    const double C1341 = C1097 * C1317;
    const double C8175 = C7947 * C1317;
    const double C1545 = C1097 * C1521;
    const double C6475 = C3904 * C1521;
    const double C8363 = C7947 * C1521;
    const double C25263 = C22564 * C1521;
    const double C2715 = C113 * C2411;
    const double C6706 = C3904 * C2411;
    const double C25037 = C22564 * C2411;
    const double C19134 = C3904 * C3346;
    const double C20481 = C113 * C3346;
    const double C25495 = C22564 * C3346;
    const double C48358 = C48356 + C48351;
    const double C167 = C156 - C157;
    const double C306 = C293 - C294;
    const double C442 = C429 - C430;
    const double C2727 = C2717 - C2718;
    const double C2551 = C2542 - C2543;
    const double C2927 = C2911 - C2912;
    const double C1342 = C49300 * C1323;
    const double C8176 = C49300 * C1323;
    const double C11407 = C49275 * C1323;
    const double C23812 = C49275 * C1323;
    const double C26983 = C26746 * C1323;
    const double C1546 = C49300 * C1527;
    const double C6476 = C49098 * C1527;
    const double C8364 = C49300 * C1527;
    const double C12827 = C7938 * C1527;
    const double C25264 = C49098 * C1527;
    const double C27171 = C26746 * C1527;
    const double C29967 = C49101 * C1527;
    const double C32770 = C49320 * C1527;
    const double C10370 = C49300 * C2421;
    const double C16934 = C49300 * C2421;
    const double C18926 = C49098 * C2421;
    const double C25256 = C49098 * C2421;
    const double C30191 = C26746 * C2421;
    const double C1339 = C1097 * C1316;
    const double C8173 = C7947 * C1316;
    const double C1543 = C1097 * C1520;
    const double C6473 = C3904 * C1520;
    const double C8361 = C7947 * C1520;
    const double C25261 = C22564 * C1520;
    const double C2713 = C113 * C2410;
    const double C6704 = C3904 * C2410;
    const double C25035 = C22564 * C2410;
    const double C19132 = C3904 * C3345;
    const double C20479 = C113 * C3345;
    const double C25493 = C22564 * C3345;
    const double C2932 = C2928 - C2917;
    const double C18092 = C18090 - C18087;
    const double C48357 = C48355 + C48348;
    const double C48451 = C48444 + C48431;
    const double C18337 = C18329 - C18330;
    const double C18338 = C18333 - C18334;
    const double C18579 = C18575 - C18576;
    const double C48190 = C48151 * C48189;
    const double C48385 = C48145 * C48189;
    const double C48410 = C48289 * C48189;
    const double C1322 =
        (2 * (ae * C48238 + be * C48240 + C48145 * C48177) +
         ae * (C48238 + C48145 * C48305 + C48302 * be) +
         be * (C48240 + C48145 * C48306 + C48302 * ae) +
         C48145 * (C48177 + ae * C48305 + be * C48306 +
                   C48145 * (ae * C48216 + be * C48217 + C48145 * C48189))) /
        C47926;
    const double C1526 =
        (C48289 * C48177 + ae * C48289 * C48305 + be * C48289 * C48306 +
         C48145 * (ae * C48289 * C48216 + be * C48289 * C48217 +
                   C48145 * C48289 * C48189)) /
        C47926;
    const double C2422 =
        (ae * (C48238 + C48216 * C48412) + be * (C48240 + C48217 * C48412) +
         C48145 * (C48177 + C48189 * C48412)) /
        C47926;
    const double C2894 =
        (2 * C48289 * C48177 + C48289 * (C48177 + C48189 * C48412)) / C47926;
    const double C48493 = C48484 + C48485;
    const double C48532 = C48145 * C48529;
    const double C48631 = C48179 + C48630;
    const double C48572 = C48145 * C48566;
    const double C48611 = C48609 + C48607;
    const double C48626 = C48145 * C48623;
    const double C48636 = C48289 * C48623;
    const double C10332 =
        (2 * C48406 + C48289 * C48616 +
         ae * (2 * C48289 * C48347 + C48289 * (C48347 + C48446 * C48412)) +
         be * (2 * C48289 * C48350 + C48289 * (C48350 + C48449 * C48412)) +
         C48145 * (ae * (2 * C48518 + C48289 * C48621) +
                   be * (2 * C48519 + C48289 * C48622) +
                   C48145 * (2 * C48520 + C48289 * C48623))) /
        C47926;
    const double C48285 = C48151 * C48283;
    const double C48328 = C48145 * C48283;
    const double C2893 =
        (2 * C48289 * C48254 + C48289 * (C48254 + C48283 * C48412)) / C47918;
    const double C48400 = C48145 * C48396;
    const double C3348 =
        (2 * C48289 * C48306 + C48289 * (C48306 + C48396 * C48412)) / C47918;
    const double C48508 = C48264 + C48503;
    const double C48580 = C48575 + C48563;
    const double C48284 = C48151 * C48281;
    const double C48325 = C48145 * C48281;
    const double C2892 =
        (2 * C48289 * C48252 + C48289 * (C48252 + C48281 * C48412)) / C47918;
    const double C48399 = C48145 * C48393;
    const double C2423 =
        (C48177 + C48189 * C48412 + ae * (C48305 + C48393 * C48412) +
         be * (C48306 + C48396 * C48412) +
         C48145 * (ae * (C48216 + C48275 * C48412) +
                   be * (C48217 + C48277 * C48412) +
                   C48145 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48412))) /
        C47926;
    const double C3347 =
        (2 * C48289 * C48305 + C48289 * (C48305 + C48393 * C48412)) / C47918;
    const double C48506 = C48258 + C48500;
    const double C48577 = C48573 + C48560;
    const double C48282 = C48260 + C48279;
    const double C2704 = C48145 * C48255 + C48327 * C48412;
    const double C9355 = 4 * (2 * C48311 + C48145 * C48372) +
                         C48145 * (3 * C48372 + C48145 * C48507);
    const double C9445 = C48289 * (3 * C48372 + C48145 * C48507);
    const double C10176 = 2 * C48311 + C48145 * C48372 + C48507 * C48412;
    const double C48584 = C48551 + C48579;
    const double C162 = C113 * C133;
    const double C427 = C113 * C407;
    const double C2548 = C113 * C969;
    const double C160 = C113 * C132;
    const double C425 = C113 * C406;
    const double C2546 = C113 * C968;
    const double C49244 = C48943 * C48933;
    const double C49288 = C49249 + C48943;
    const double C49252 = C48951 / C47958;
    const double C49248 = C48951 * C48933;
    const double C3898 = C49330 - (C48943 * C48934) / C47918;
    const double C49277 = C49136 * C49130;
    const double C49312 = C49279 + C49136;
    const double C49281 = C49143 / C47958;
    const double C49278 = C49143 * C49130;
    const double C20344 = C49336 - (C49136 * C49132) / C47918;
    const double C47937 = C47936 * C47933;
    const double C47983 = C47936 * ae;
    const double C1095 =
        ((C47936 * ae) / C47918 - C47925 / C47928) / (2 * C47918) +
        ((C47916 * ((0 * ae) / C47918 - C47929 / C47926) + C49098) * ae) /
            C47918;
    const double C3902 = (C47936 * ae) / C47918 - C47925 / C47928;
    const double C7943 =
        ((-(0 * be) / C47918) / C47958 -
         ((0 - (C47916 * C47925) / C47918) * be) / C47918) /
            C47958 -
        ((C47916 * ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) +
          C22556) *
         be) /
            C47918 +
        (-C47932 / C47918) / C47958 - (0 * be) / C47918;
    const double C7945 =
        ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) / C47958 -
        ((C47916 * ((-C47932 / C47918) / C47958 - (0 * be) / C47918) + C49098) *
         be) /
            C47918;
    const double C22562 = (-C47981) / C47958 - (C47936 * be) / C47918;
    const double C48009 = C48005 * be;
    const double C26779 = C48066 * C614;
    const double C26777 = C48066 * C613;
    const double C26767 = C48066 * C612;
    const double C26765 = C48066 * C611;
    const double C26982 = C48066 * C1317;
    const double C26980 = C48066 * C1316;
    const double C27170 = C48066 * C1521;
    const double C27168 = C48066 * C1520;
    const double C30185 = C48066 * C1523;
    const double C30183 = C48066 * C1522;
    const double C48070 = 2 * C48066;
    const double C9270 =
        (C48066 / C47958 + (0 * ae) / C47918) / C47958 - (0 * be) / C47918;
    const double C11389 = C48066 / C47958 - (0 * be) / C47918;
    const double C23794 = C48066 / C47958 + (0 * ae) / C47918;
    const double C2937 = C2933 * C1090;
    const double C15670 = C2933 * C49329;
    const double C18075 = C2933 * C48938;
    const double C20616 = C2933 * C49245;
    const double C34412 = C2933 * C23786;
    const double C37157 = C2933 * C48943;
    const double C49304 = C49270 / C47918;
    const double C49324 = C49307 / C47958;
    const double C49325 = C49308 + C49274;
    const double C11379 = C49274 - C49099 / C47928;
    const double C49306 = C49271 / C47918;
    const double C11423 = C11377 * C138;
    const double C11395 = C11377 * C137;
    const double C11593 = C11377 * C285;
    const double C11751 = C11377 * C421;
    const double C14468 = C11377 * C422;
    const double C14854 = C11377 * C721;
    const double C15252 = C11377 * C972;
    const double C48023 = C48019 - C48022;
    const double C48056 = C48040 - C48054;
    const double C2736 = C2732 + C2724;
    const double C2556 = C2553 + C2541;
    const double C3368 = C3366 - C3361;
    const double C2919 = C452 * C1090;
    const double C2903 = C452 * C1091;
    const double C15676 = C452 * C49329;
    const double C15671 = C452 * C49316;
    const double C18082 = C452 * C48938;
    const double C20622 = C452 * C49245;
    const double C20617 = C452 * C48948;
    const double C34418 = C452 * C23786;
    const double C34413 = C452 * C48948;
    const double C37163 = C452 * C48943;
    const double C37158 = C452 * C48951;
    const double C3371 = C3369 * C1090;
    const double C16084 = C3369 * C49329;
    const double C18327 = C3369 * C48938;
    const double C20986 = C3369 * C49245;
    const double C34782 = C3369 * C23786;
    const double C37571 = C3369 * C48943;
    const double C2938 = C2934 * C1090;
    const double C15673 = C2934 * C49329;
    const double C18076 = C2934 * C48938;
    const double C20618 = C2934 * C49245;
    const double C34414 = C2934 * C23786;
    const double C37160 = C2934 * C48943;
    const double C18093 = C18091 + C18081;
    const double C2920 = C451 * C1091;
    const double C2904 = C451 * C49289;
    const double C15677 = C451 * C49316;
    const double C15672 = C451 * C49289;
    const double C20623 = C451 * C48948;
    const double C34419 = C451 * C48948;
    const double C37164 = C451 * C48951;
    const double C37159 = C451 * C26749;
    const double C3798 = C3797 * C1090;
    const double C16495 = C3797 * C49329;
    const double C18077 = C3797 * C48938;
    const double C20620 = C3797 * C49245;
    const double C34416 = C3797 * C23786;
    const double C37982 = C3797 * C48943;
    const double C163 = C49035 * C141;
    const double C296 = C49035 * C283;
    const double C1131 = C49320 * C283;
    const double C3930 = C49098 * C283;
    const double C4102 = C49266 * C283;
    const double C7981 = C7938 * C283;
    const double C22590 = C49098 * C283;
    const double C22762 = C22556 * C283;
    const double C26788 = C49101 * C283;
    const double C432 = C49035 * C419;
    const double C4274 = C49266 * C419;
    const double C22934 = C22556 * C419;
    const double C1123 = C49300 * C621;
    const double C1334 = C49320 * C621;
    const double C4106 = C49098 * C621;
    const double C7973 = C49300 * C621;
    const double C8168 = C7938 * C621;
    const double C22766 = C49098 * C621;
    const double C26780 = C26746 * C621;
    const double C26975 = C49101 * C621;
    const double C1538 = C49320 * C723;
    const double C2720 = C49035 * C723;
    const double C4278 = C49098 * C723;
    const double C6472 = C49266 * C723;
    const double C8356 = C7938 * C723;
    const double C22938 = C49098 * C723;
    const double C27163 = C49101 * C723;
    const double C28350 = C22556 * C723;
    const double C2545 = C49035 * C974;
    const double C6703 = C49266 * C974;
    const double C25046 = C22556 * C974;
    const double C19135 = C49098 * C3350;
    const double C20482 = C49035 * C3350;
    const double C25496 = C49098 * C3350;
    const double C18088 = C49035 * C3784;
    const double C289 = C113 * C270;
    const double C3931 = C3904 * C270;
    const double C22591 = C22564 * C270;
    const double C291 = C113 * C271;
    const double C3933 = C3904 * C271;
    const double C22593 = C22564 * C271;
    const double C1124 = C1097 * C615;
    const double C4095 = C3904 * C615;
    const double C7974 = C7947 * C615;
    const double C22755 = C22564 * C615;
    const double C26781 = C48066 * C615;
    const double C1126 = C1097 * C616;
    const double C4097 = C3904 * C616;
    const double C7976 = C7947 * C616;
    const double C22757 = C22564 * C616;
    const double C26783 = C48066 * C616;
    const double C4267 = C3904 * C717;
    const double C5255 = C113 * C717;
    const double C22927 = C22564 * C717;
    const double C4269 = C3904 * C718;
    const double C5257 = C113 * C718;
    const double C22929 = C22564 * C718;
    const double C161 = C114 * C120;
    const double C290 = C114 * C264;
    const double C426 = C114 * C400;
    const double C5256 = C114 * C709;
    const double C2547 = C114 * C960;
    const double C1329 = C1097 * C1315;
    const double C8163 = C7947 * C1315;
    const double C26970 = C48066 * C1315;
    const double C1533 = C1097 * C1519;
    const double C6467 = C3904 * C1519;
    const double C8351 = C7947 * C1519;
    const double C27158 = C48066 * C1519;
    const double C28345 = C22564 * C1519;
    const double C2711 = C113 * C2415;
    const double C6698 = C3904 * C2415;
    const double C25041 = C22564 * C2415;
    const double C1327 = C1097 * C1314;
    const double C8161 = C7947 * C1314;
    const double C26968 = C48066 * C1314;
    const double C1531 = C1097 * C1518;
    const double C6465 = C3904 * C1518;
    const double C8349 = C7947 * C1518;
    const double C27156 = C48066 * C1518;
    const double C28343 = C22564 * C1518;
    const double C2709 = C113 * C2414;
    const double C6696 = C3904 * C2414;
    const double C25039 = C22564 * C2414;
    const double C48381 = C48379 + C48374;
    const double C48380 = C48378 + C48371;
    const double C48492 = C48483 + C48473;
    const double C48466 = C48145 * C48464;
    const double C48552 = 3 * C48464;
    const double C48538 = be * C48464;
    const double C48465 = C48145 * C48463;
    const double C48544 = 3 * C48463;
    const double C48537 = ae * C48463;
    const double C48610 = C48608 + C48604;
    const double C1832 =
        (3 * (C48229 + C48145 * C48323 + C48319 * ae) +
         C48145 * (2 * C48323 + C48145 * C48358 + C48349 * ae) +
         (2 * C48319 + C48145 * C48349) * ae) /
        C47918;
    const double C1990 =
        (C48289 * (2 * C48323 + C48145 * C48358 + C48349 * ae)) / C47918;
    const double C2409 =
        (C48229 + C48145 * C48323 + C48319 * ae + C48358 * C48412) / C47918;
    const double C10329 =
        (2 * C48289 * C48358 + C48289 * (C48358 + C48464 * C48412)) / C47918;
    const double C172 = C167 - C158;
    const double C310 = C306 - C295;
    const double C446 = C442 - C431;
    const double C2731 = C2727 - C2719;
    const double C2554 = C2551 - C2544;
    const double C2931 = C2927 - C2913;
    const double C2726 = C2713 - C2714;
    const double C20483 = C20479 - C20480;
    const double C2936 = C2932 + C2918;
    const double C1837 =
        (3 * (C48158 + ae * C48322 + be * C48323 + C48145 * C48352) +
         ae * (2 * C48322 + C48145 * C48357 + C48349 * be) +
         be * (2 * C48323 + C48145 * C48358 + C48349 * ae) +
         C48145 * (2 * C48352 + ae * C48357 + be * C48358 +
                   C48145 * (C48167 + ae * C48347 + be * C48350 +
                             C48145 * (ae * C48197 + be * C48198 +
                                       C48145 * C48175)))) /
        C47926;
    const double C1995 =
        (2 * (ae * C48289 * C48202 + be * C48289 * C48203 + C48145 * C48406) +
         ae * C48289 * C48357 + be * C48289 * C48358 +
         C48145 * (C48406 + ae * C48289 * C48347 + be * C48289 * C48350 +
                   C48145 * (ae * C48289 * C48197 + be * C48289 * C48198 +
                             C48145 * C48289 * C48175))) /
        C47926;
    const double C9918 =
        (2 * (ae * (C48202 + C48197 * C48412) +
              be * (C48203 + C48198 * C48412) + C48145 * C48616) +
         ae * (C48357 + C48463 * C48412) + be * (C48358 + C48464 * C48412) +
         C48145 * (C48616 + ae * (C48347 + C48446 * C48412) +
                   be * (C48350 + C48449 * C48412) +
                   C48145 * (ae * (C48197 + C48212 * C48412) +
                             be * (C48198 + C48213 * C48412) +
                             C48145 * (C48175 + C48187 * C48412)))) /
        C47926;
    const double C1831 =
        (3 * (C48228 + C48145 * C48322 + C48319 * be) +
         C48145 * (2 * C48322 + C48145 * C48357 + C48349 * be) +
         (2 * C48319 + C48145 * C48349) * be) /
        C47918;
    const double C1989 =
        (C48289 * (2 * C48322 + C48145 * C48357 + C48349 * be)) / C47918;
    const double C2408 =
        (C48228 + C48145 * C48322 + C48319 * be + C48357 * C48412) / C47918;
    const double C10328 =
        (2 * C48289 * C48357 + C48289 * (C48357 + C48463 * C48412)) / C47918;
    const double C48462 = C48451 + C48458;
    const double C18339 = C18337 - C18331;
    const double C18340 = C18338 - C18335;
    const double C18580 = C18579 - C18577;
    const double C48191 = C48183 + C48190;
    const double C48398 = C48392 + C48385;
    const double C3351 =
        (ae * (2 * C48289 * C48216 + C48289 * (C48216 + C48275 * C48412)) +
         be * (2 * C48289 * C48217 + C48289 * (C48217 + C48277 * C48412)) +
         C48145 * (2 * C48410 +
                   C48289 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48412))) /
        C47926;
    const double C3785 =
        (3 * (C48177 + C48189 * C48412) +
         C48289 * (2 * C48410 +
                   C48289 * (C48189 +
                             (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163) *
                                 C48412))) /
        C47926;
    const double C1330 = C49300 * C1322;
    const double C8164 = C49300 * C1322;
    const double C11411 = C49275 * C1322;
    const double C23816 = C49275 * C1322;
    const double C26971 = C26746 * C1322;
    const double C1534 = C49300 * C1526;
    const double C6468 = C49098 * C1526;
    const double C8352 = C49300 * C1526;
    const double C27159 = C26746 * C1526;
    const double C28346 = C49098 * C1526;
    const double C2712 = C49035 * C2422;
    const double C6699 = C49098 * C2422;
    const double C25042 = C49098 * C2422;
    const double C2914 = C49035 * C2894;
    const double C48499 = C48145 * C48493;
    const double C48534 = C48533 + C48532;
    const double C10333 =
        (2 * C48408 + C48289 * C48631 +
         ae * (2 * C48289 * C48370 + C48289 * (C48370 + C48494 * C48412)) +
         be * (2 * C48289 * C48373 + C48289 * (C48373 + C48497 * C48412)) +
         C48145 * (ae * (2 * C48527 + C48289 * (C48258 + C48478 * C48412)) +
                   be * (2 * C48528 + C48289 * (C48264 + C48482 * C48412)) +
                   C48145 * (2 * C48529 +
                             C48289 * (C48476 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48412)))) /
        C47926;
    const double C17983 =
        (ae * (3 * (C48242 + C48258 * C48412) +
               C48289 * (2 * C48527 + C48289 * (C48258 + C48478 * C48412))) +
         be * (3 * (C48246 + C48264 * C48412) +
               C48289 * (2 * C48528 + C48289 * (C48264 + C48482 * C48412))) +
         C48145 * (3 * C48631 +
                   C48289 * (2 * C48529 +
                             C48289 * (C48476 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48412)))) /
        C47926;
    const double C18073 =
        (4 * (2 * C48408 + C48289 * C48631) +
         C48289 * (3 * C48631 +
                   C48289 * (2 * C48529 +
                             C48289 * (C48476 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48412)))) /
        C47926;
    const double C48576 = C48565 + C48572;
    const double C48612 = C48145 * C48611;
    const double C48628 = C48627 + C48626;
    const double C48637 = C48635 + C48636;
    const double C11260 = C49300 * C10332;
    const double C17812 = C49300 * C10332;
    const double C22077 = C49098 * C10332;
    const double C43072 = C49098 * C10332;
    const double C47892 = C26746 * C10332;
    const double C48287 = C48263 + C48285;
    const double C48331 = C48328 + C48329;
    const double C48402 = C48217 + C48400;
    const double C48510 = C48508 + C48498;
    const double C48585 = C48145 * C48580;
    const double C11252 =
        (3 * (C48358 + C48464 * C48412) +
         C48289 * (2 * C48289 * C48464 + C48289 * (C48464 + C48580 * C48412))) /
        C47918;
    const double C48286 = C48257 + C48284;
    const double C48330 = C48325 + C48326;
    const double C48401 = C48216 + C48399;
    const double C48509 = C48506 + C48495;
    const double C48583 = C48145 * C48577;
    const double C11251 =
        (3 * (C48357 + C48463 * C48412) +
         C48289 * (2 * C48289 * C48463 + C48289 * (C48463 + C48577 * C48412))) /
        C47918;
    const double C121 = 5 * (3 * C48239 + C48151 * C48255) +
                        C48151 * (4 * C48255 + C48151 * C48282);
    const double C269 = C48145 * (4 * C48255 + C48151 * C48282);
    const double C405 = C48289 * (4 * C48255 + C48151 * C48282);
    const double C608 = 3 * C48239 + C48151 * C48255 + C48282 * C48148;
    const double C710 = C48289 * C48145 * C48282;
    const double C961 = 3 * C48239 + C48151 * C48255 + C48282 * C48412;
    const double C9596 = 5 * (3 * C48349 + C48145 * C48460) +
                         C48145 * (4 * C48460 + C48145 * C48584);
    const double C9682 = C48289 * (4 * C48460 + C48145 * C48584);
    const double C9913 = 3 * C48349 + C48145 * C48460 + C48584 * C48412;
    const double C49284 = C49244 / C47918;
    const double C49317 = C49288 / C47958;
    const double C49318 = C49290 + C49252;
    const double C3900 = C49252 - C48949 / C47928;
    const double C49287 = C49248 / C47918;
    const double C5396 = C452 * C3898;
    const double C5392 = C2933 * C3898;
    const double C5758 = C3369 * C3898;
    const double C6123 = C2934 * C3898;
    const double C49309 = C49277 / C47918;
    const double C49327 = C49312 / C47958;
    const double C49328 = C49313 + C49281;
    const double C20346 = C49281 - C49141 / C47928;
    const double C49311 = C49278 / C47918;
    const double C47942 = C47916 * C47937;
    const double C48033 = C47937 / C47928;
    const double C1094 =
        (ae * -2 * C47925) / (C47926 * 2 * C47918) +
        (((C47916 * ((-4 * C47929) / C47918 - (C47916 * C47937) / C47918) *
           ae) /
              C47918 +
          2 * ((C47936 * ae) / C47918 - C47925 / C47928)) *
         ae) /
            C47918 -
        C47937 / C47928;
    const double C1098 = (-C47937 / C47918) / (4 * C47926);
    const double C3905 = (-C47937 / C47918) / (2 * C47918);
    const double C7948 = (-C47937 / C47918) / (4 * C47926);
    const double C9271 =
        (-C47937 / C47918) / (4 * C47926 * std::pow(C47958, 2));
    const double C11390 = (-C47937 / C47918) / (4 * C48026);
    const double C22565 = (-C47937 / C47918) / C47958;
    const double C23795 = (-C47937 / C47918) / (4 * C48026);
    const double C26755 = (-C47937 / C47918) / C48069;
    const double C47991 = C47983 / C47918;
    const double C1130 = C1095 * C273;
    const double C1128 = C1095 * C272;
    const double C1118 = C1095 * C275;
    const double C1116 = C1095 * C274;
    const double C1106 = C1095 * C277;
    const double C1104 = C1095 * C276;
    const double C1345 = C1095 * C612;
    const double C1343 = C1095 * C611;
    const double C1333 = C1095 * C614;
    const double C1331 = C1095 * C613;
    const double C1549 = C1095 * C714;
    const double C1547 = C1095 * C713;
    const double C1537 = C1095 * C716;
    const double C1535 = C1095 * C715;
    const double C16929 = C1095 * C2411;
    const double C16927 = C1095 * C2410;
    const double C16917 = C1095 * C2407;
    const double C16915 = C1095 * C2406;
    const double C16905 = C1095 * C712;
    const double C16903 = C1095 * C711;
    const double C17370 = C1095 * C1523;
    const double C17368 = C1095 * C1522;
    const double C17815 = C1095 * C3344;
    const double C17813 = C1095 * C3343;
    const double C32769 = C1095 * C1521;
    const double C32767 = C1095 * C1520;
    const double C3937 = C3902 * C131;
    const double C3935 = C3902 * C130;
    const double C3925 = C3902 * C129;
    const double C3923 = C3902 * C128;
    const double C3917 = C3902 * C127;
    const double C3915 = C3902 * C126;
    const double C3909 = C3902 * C125;
    const double C3907 = C3902 * C124;
    const double C4117 = C3902 * C277;
    const double C4115 = C3902 * C276;
    const double C4109 = C3902 * C275;
    const double C4107 = C3902 * C274;
    const double C4101 = C3902 * C273;
    const double C4099 = C3902 * C272;
    const double C4289 = C3902 * C413;
    const double C4287 = C3902 * C412;
    const double C4281 = C3902 * C411;
    const double C4279 = C3902 * C410;
    const double C4273 = C3902 * C409;
    const double C4271 = C3902 * C408;
    const double C6479 = C3902 * C714;
    const double C6477 = C3902 * C713;
    const double C6471 = C3902 * C716;
    const double C6469 = C3902 * C715;
    const double C6710 = C3902 * C965;
    const double C6708 = C3902 * C964;
    const double C6702 = C3902 * C967;
    const double C6700 = C3902 * C966;
    const double C6689 = C3902 * C415;
    const double C6687 = C3902 * C414;
    const double C7268 = C3902 * C712;
    const double C7266 = C3902 * C711;
    const double C7820 = C3902 * C963;
    const double C7818 = C3902 * C962;
    const double C18929 = C3902 * C2411;
    const double C18927 = C3902 * C2410;
    const double C19138 = C3902 * C2889;
    const double C19136 = C3902 * C2888;
    const double C19683 = C3902 * C2407;
    const double C19681 = C3902 * C2406;
    const double C20237 = C3902 * C2891;
    const double C20235 = C3902 * C2890;
    const double C22072 = C3902 * C3344;
    const double C22070 = C3902 * C3343;
    const double C22450 = C3902 * C3778;
    const double C22448 = C3902 * C3777;
    const double C7984 = C7943 * C129;
    const double C7982 = C7943 * C128;
    const double C7964 = C7943 * C127;
    const double C7962 = C7943 * C126;
    const double C7952 = C7943 * C125;
    const double C7950 = C7943 * C124;
    const double C8183 = C7943 * C277;
    const double C8181 = C7943 * C276;
    const double C8171 = C7943 * C275;
    const double C8169 = C7943 * C274;
    const double C8371 = C7943 * C413;
    const double C8369 = C7943 * C412;
    const double C8359 = C7943 * C411;
    const double C8357 = C7943 * C410;
    const double C10361 = C7943 * C965;
    const double C10359 = C7943 * C964;
    const double C10349 = C7943 * C963;
    const double C10347 = C7943 * C962;
    const double C10337 = C7943 * C415;
    const double C10335 = C7943 * C414;
    const double C10818 = C7943 * C2407;
    const double C10816 = C7943 * C2406;
    const double C10806 = C7943 * C712;
    const double C10804 = C7943 * C711;
    const double C11267 = C7943 * C2891;
    const double C11265 = C7943 * C2890;
    const double C12830 = C7943 * C714;
    const double C12828 = C7943 * C713;
    const double C7980 = C7945 * C273;
    const double C7978 = C7945 * C272;
    const double C7968 = C7945 * C275;
    const double C7966 = C7945 * C274;
    const double C7956 = C7945 * C277;
    const double C7954 = C7945 * C276;
    const double C8179 = C7945 * C612;
    const double C8177 = C7945 * C611;
    const double C8167 = C7945 * C614;
    const double C8165 = C7945 * C613;
    const double C8367 = C7945 * C714;
    const double C8365 = C7945 * C713;
    const double C8355 = C7945 * C716;
    const double C8353 = C7945 * C715;
    const double C10365 = C7945 * C2411;
    const double C10363 = C7945 * C2410;
    const double C10353 = C7945 * C2407;
    const double C10351 = C7945 * C2406;
    const double C10341 = C7945 * C712;
    const double C10339 = C7945 * C711;
    const double C10810 = C7945 * C1523;
    const double C10808 = C7945 * C1522;
    const double C11263 = C7945 * C3344;
    const double C11261 = C7945 * C3343;
    const double C12826 = C7945 * C1521;
    const double C12824 = C7945 * C1520;
    const double C22597 = C22562 * C131;
    const double C22595 = C22562 * C130;
    const double C22585 = C22562 * C129;
    const double C22583 = C22562 * C128;
    const double C22577 = C22562 * C127;
    const double C22575 = C22562 * C126;
    const double C22569 = C22562 * C125;
    const double C22567 = C22562 * C124;
    const double C22777 = C22562 * C277;
    const double C22775 = C22562 * C276;
    const double C22769 = C22562 * C275;
    const double C22767 = C22562 * C274;
    const double C22761 = C22562 * C273;
    const double C22759 = C22562 * C272;
    const double C22949 = C22562 * C413;
    const double C22947 = C22562 * C412;
    const double C22941 = C22562 * C411;
    const double C22939 = C22562 * C410;
    const double C22933 = C22562 * C409;
    const double C22931 = C22562 * C408;
    const double C25045 = C22562 * C967;
    const double C25043 = C22562 * C966;
    const double C25033 = C22562 * C965;
    const double C25031 = C22562 * C964;
    const double C25267 = C22562 * C714;
    const double C25265 = C22562 * C713;
    const double C25259 = C22562 * C2411;
    const double C25257 = C22562 * C2410;
    const double C25499 = C22562 * C2889;
    const double C25497 = C22562 * C2888;
    const double C25486 = C22562 * C963;
    const double C25484 = C22562 * C962;
    const double C25477 = C22562 * C415;
    const double C25475 = C22562 * C414;
    const double C26065 = C22562 * C2407;
    const double C26063 = C22562 * C2406;
    const double C26057 = C22562 * C712;
    const double C26055 = C22562 * C711;
    const double C26625 = C22562 * C2891;
    const double C26623 = C22562 * C2890;
    const double C28349 = C22562 * C716;
    const double C28347 = C22562 * C715;
    const double C43067 = C22562 * C3344;
    const double C43065 = C22562 * C3343;
    const double C43445 = C22562 * C3778;
    const double C43443 = C22562 * C3777;
    const double C48014 = C48009 / C47918;
    const double C11410 = C11389 * C1315;
    const double C11408 = C11389 * C1314;
    const double C11406 = C11389 * C1317;
    const double C11404 = C11389 * C1316;
    const double C23815 = C23794 * C1315;
    const double C23813 = C23794 * C1314;
    const double C23811 = C23794 * C1317;
    const double C23809 = C23794 * C1316;
    const double C49339 = C49304 + C49334;
    const double C11378 = C49324 - (C49101 * C49090) / C47918;
    const double C23820 = C49325 * C621;
    const double C23808 = C49325 * C620;
    const double C23990 = C49325 * C1323;
    const double C24148 = C49325 * C1527;
    const double C41560 = C49325 * C1528;
    const double C42328 = C49325 * C2419;
    const double C9259 = C49325 / C47958 - C49099 / C48071;
    const double C11415 = C11379 * C621;
    const double C11403 = C11379 * C620;
    const double C11585 = C11379 * C1323;
    const double C11743 = C11379 * C1527;
    const double C14476 = C11379 * C1528;
    const double C15244 = C11379 * C2419;
    const double C49335 = C49306 + C49324;
    const double C3357 = C2736 * C1091;
    const double C16085 = C2736 * C49316;
    const double C20987 = C2736 * C48948;
    const double C34783 = C2736 * C48948;
    const double C37572 = C2736 * C48951;
    const double C2922 = C2556 * C1090;
    const double C2909 = C2556 * C1091;
    const double C15679 = C2556 * C49329;
    const double C15674 = C2556 * C49316;
    const double C18083 = C2556 * C48938;
    const double C20624 = C2556 * C49245;
    const double C20619 = C2556 * C48948;
    const double C34420 = C2556 * C23786;
    const double C34415 = C2556 * C48948;
    const double C37166 = C2556 * C48943;
    const double C37161 = C2556 * C48951;
    const double C3370 = C3368 + C3362;
    const double C18095 = C18093 * C48938;
    const double C21353 = C18093 * C49245;
    const double C35149 = C18093 * C23786;
    const double C18094 = C18092 + C18088;
    const double C168 = C160 - C161;
    const double C305 = C289 - C290;
    const double C441 = C425 - C426;
    const double C5259 = C5255 - C5256;
    const double C2552 = C2546 - C2547;
    const double C2725 = C2709 - C2710;
    const double C1834 =
        (3 * (C48233 + C48145 * C48315 + C48311 * ae) +
         C48145 * (2 * C48315 + C48145 * C48381 + C48372 * ae) +
         (2 * C48311 + C48145 * C48372) * ae) /
        C47918;
    const double C1992 =
        (C48289 * (2 * C48315 + C48145 * C48381 + C48372 * ae)) / C47918;
    const double C2413 =
        (C48233 + C48145 * C48315 + C48311 * ae + C48381 * C48412) / C47918;
    const double C1838 =
        (3 * (C48308 + ae * C48314 + be * C48315 + C48145 * C48375) +
         ae * (2 * C48314 + C48145 * C48380 + C48372 * be) +
         be * (2 * C48315 + C48145 * C48381 + C48372 * ae) +
         C48145 * (2 * C48375 + ae * C48380 + be * C48381 +
                   C48145 * (C48179 + ae * C48370 + be * C48373 +
                             C48145 * (ae * C48258 + be * C48264 +
                                       C48145 * C48151 * C48187)))) /
        C47926;
    const double C1996 =
        (2 * (ae * C48289 * C48242 + be * C48289 * C48246 + C48145 * C48408) +
         ae * C48289 * C48380 + be * C48289 * C48381 +
         C48145 * (C48408 + ae * C48289 * C48370 + be * C48289 * C48373 +
                   C48145 * (ae * C48289 * C48258 + be * C48289 * C48264 +
                             C48145 * C48289 * C48151 * C48187))) /
        C47926;
    const double C1833 =
        (3 * (C48231 + C48145 * C48314 + C48311 * be) +
         C48145 * (2 * C48314 + C48145 * C48380 + C48372 * be) +
         (2 * C48311 + C48145 * C48372) * be) /
        C47918;
    const double C1991 =
        (C48289 * (2 * C48314 + C48145 * C48380 + C48372 * be)) / C47918;
    const double C2412 =
        (C48231 + C48145 * C48314 + C48311 * be + C48380 * C48412) / C47918;
    const double C48468 = C48441 + C48466;
    const double C48467 = C48435 + C48465;
    const double C48556 = C48536 + C48537;
    const double C10814 = C7947 * C1990;
    const double C14479 = C11389 * C1990;
    const double C17374 = C1097 * C1990;
    const double C30765 = C48066 * C1990;
    const double C41563 = C23794 * C1990;
    const double C10357 = C7947 * C2409;
    const double C10822 = C7945 * C2409;
    const double C16921 = C1097 * C2409;
    const double C17382 = C1095 * C2409;
    const double C19687 = C3904 * C2409;
    const double C26069 = C22564 * C2409;
    const double C31312 = C48066 * C2409;
    const double C11259 = C7947 * C10329;
    const double C17811 = C1097 * C10329;
    const double C22076 = C3904 * C10329;
    const double C43071 = C22564 * C10329;
    const double C47891 = C48066 * C10329;
    const double C177 = C172 + C159;
    const double C314 = C310 + C296;
    const double C450 = C446 + C432;
    const double C2735 = C2731 + C2720;
    const double C2557 = C2554 + C2545;
    const double C2730 = C2726 - C2715;
    const double C20484 = C20483 - C20481;
    const double C3789 = C2936 * C1091;
    const double C16494 = C2936 * C49316;
    const double C18084 = C2936 * C48938;
    const double C20626 = C2936 * C49245;
    const double C20621 = C2936 * C48948;
    const double C34422 = C2936 * C23786;
    const double C34417 = C2936 * C48948;
    const double C37981 = C2936 * C48951;
    const double C10815 = C49300 * C1995;
    const double C14480 = C49275 * C1995;
    const double C14862 = C11379 * C1995;
    const double C17375 = C49300 * C1995;
    const double C30766 = C26746 * C1995;
    const double C41564 = C49275 * C1995;
    const double C41946 = C49325 * C1995;
    const double C10827 = C49300 * C9918;
    const double C15240 = C49275 * C9918;
    const double C17387 = C49300 * C9918;
    const double C42324 = C49275 * C9918;
    const double C47476 = C26746 * C9918;
    const double C10812 = C7947 * C1989;
    const double C14477 = C11389 * C1989;
    const double C17372 = C1097 * C1989;
    const double C30763 = C48066 * C1989;
    const double C41561 = C23794 * C1989;
    const double C10355 = C7947 * C2408;
    const double C10820 = C7945 * C2408;
    const double C16919 = C1097 * C2408;
    const double C17380 = C1095 * C2408;
    const double C19685 = C3904 * C2408;
    const double C26067 = C22564 * C2408;
    const double C31310 = C48066 * C2408;
    const double C11257 = C7947 * C10328;
    const double C17809 = C1097 * C10328;
    const double C22074 = C3904 * C10328;
    const double C43069 = C22564 * C10328;
    const double C47889 = C48066 * C10328;
    const double C18341 = C18339 + C18332;
    const double C142 =
        (5 * (3 * C48177 + C48151 * C48191) +
         C48151 *
             (4 * C48191 +
              C48151 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C282 =
        (ae * (3 * (C48154 * C48153 * C48193 + C48197 * C48163) +
               C48151 *
                   (2 * C48151 * C48197 +
                    C48151 * (C48197 + C48171 * C48170 * C48193 * C48163))) +
         be * (3 * (C48154 * C48153 * C48194 + C48198 * C48163) +
               C48151 *
                   (2 * C48151 * C48198 +
                    C48151 * (C48198 + C48171 * C48170 * C48194 * C48163))) +
         C48145 * (3 * C48177 + C48151 * C48191)) /
        C47926;
    const double C287 =
        (ae * (4 * (2 * C48151 * C48197 + C48151 * C48216) +
               C48151 * (3 * C48216 +
                         C48151 * (2 * C48151 * C48212 +
                                   C48151 * (C48212 + C48182 * C48181 * C48193 *
                                                          C48163)))) +
         be * (4 * (2 * C48151 * C48198 + C48151 * C48217) +
               C48151 * (3 * C48217 +
                         C48151 * (2 * C48151 * C48213 +
                                   C48151 * (C48213 + C48182 * C48181 * C48194 *
                                                          C48163)))) +
         C48145 *
             (4 * C48191 +
              C48151 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C418 = ((zP - zQ) * (3 * C48177 + C48151 * C48191)) / C47926;
    const double C423 =
        ((zP - zQ) *
         (4 * C48191 +
          C48151 * (3 * C48189 +
                    C48151 * (2 * C48151 * C48187 +
                              C48151 * (C48187 +
                                        (C48181 * C48182 +
                                         C48148 * bs[8] * std::pow(C48143, 8)) *
                                            C47917 * C48163))))) /
        C47926;
    const double C622 =
        (2 * C48151 * C48167 + C48151 * C48177 +
         ae * (C48145 * C48252 + C48255 * be) +
         be * (C48145 * C48254 + C48255 * ae) +
         C48145 * (ae * C48252 + be * C48254 + C48145 * C48191)) /
        C47926;
    const double C724 = (ae * C48289 * C48252 + be * C48289 * C48254 +
                         C48145 * C48289 * C48191) /
                        C47926;
    const double C975 =
        (2 * C48151 * C48167 + C48151 * C48177 + C48191 * std::pow(C48289, 2)) /
        C47926;
    const double C976 =
        (3 * C48177 + C48151 * C48191 +
         (3 * C48189 +
          C48151 * (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163))) *
             std::pow(C48289, 2)) /
        C47926;
    const double C2707 =
        (ae * (C48252 + C48281 * C48412) + be * (C48254 + C48283 * C48412) +
         C48145 * (C48191 +
                   (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163)) *
                       C48412)) /
        C47926;
    const double C2897 =
        (2 * C48289 * C48191 +
         C48289 * (C48191 +
                   (2 * C48151 * C48187 +
                    C48151 * (C48187 + (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48163)) *
                       C48412)) /
        C47926;
    const double C2935 = C2931 + C2914;
    const double C48505 = C48492 + C48499;
    const double C48582 = C48145 * C48576;
    const double C48613 = C48610 + C48612;
    const double C10802 =
        (2 * (ae * (2 * C48518 + C48289 * C48621) +
              be * (2 * C48519 + C48289 * C48622) + C48145 * C48637) +
         ae * (2 * C48289 * C48463 + C48289 * (C48463 + C48577 * C48412)) +
         be * (2 * C48289 * C48464 + C48289 * (C48464 + C48580 * C48412)) +
         C48145 *
             (C48637 + ae * (2 * C48598 + C48289 * (C48446 + C48559 * C48412)) +
              be * (2 * C48599 + C48289 * (C48449 + C48562 * C48412)) +
              C48145 *
                  (ae * (2 * C48600 + C48289 * (C48212 + C48267 * C48412)) +
                   be * (2 * C48601 + C48289 * (C48213 + C48271 * C48412)) +
                   C48145 * (2 * C48602 +
                             C48289 * (C48187 +
                                       (C48181 * C48182 +
                                        C48148 * bs[8] * std::pow(C48143, 8)) *
                                           C47917 * C48412))))) /
        C47926;
    const double C11253 = (ae * (3 * (C48202 + C48197 * C48412) +
                                 C48289 * (2 * C48518 + C48289 * C48621)) +
                           be * (3 * (C48203 + C48198 * C48412) +
                                 C48289 * (2 * C48519 + C48289 * C48622)) +
                           C48145 * (3 * C48616 + C48289 * C48637)) /
                          C47926;
    const double C11254 =
        (3 * C48616 + C48289 * C48637 +
         ae * (3 * (C48347 + C48446 * C48412) +
               C48289 * (2 * C48598 + C48289 * (C48446 + C48559 * C48412))) +
         be * (3 * (C48350 + C48449 * C48412) +
               C48289 * (2 * C48599 + C48289 * (C48449 + C48562 * C48412))) +
         C48145 *
             (ae * (3 * C48621 +
                    C48289 *
                        (2 * C48600 + C48289 * (C48212 + C48267 * C48412))) +
              be * (3 * C48622 +
                    C48289 *
                        (2 * C48601 + C48289 * (C48213 + C48271 * C48412))) +
              C48145 * (3 * C48623 +
                        C48289 * (2 * C48602 +
                                  C48289 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48412))))) /
        C47926;
    const double C18072 = (4 * (2 * C48406 + C48289 * C48616) +
                           C48289 * (3 * C48616 + C48289 * C48637)) /
                          C47926;
    const double C18325 =
        (ae * (4 * (2 * C48518 + C48289 * C48621) +
               C48289 * (3 * C48621 +
                         C48289 * (2 * C48600 +
                                   C48289 * (C48212 + C48267 * C48412)))) +
         be * (4 * (2 * C48519 + C48289 * C48622) +
               C48289 * (3 * C48622 +
                         C48289 * (2 * C48601 +
                                   C48289 * (C48213 + C48271 * C48412)))) +
         C48145 *
             (4 * C48637 +
              C48289 * (3 * C48623 +
                        C48289 * (2 * C48602 +
                                  C48289 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48412))))) /
        C47926;
    const double C18573 =
        (5 * (3 * C48616 + C48289 * C48637) +
         C48289 *
             (4 * C48637 +
              C48289 * (3 * C48623 +
                        C48289 * (2 * C48602 +
                                  C48289 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48412))))) /
        C47926;
    const double C135 = (5 * (3 * C48240 + C48151 * C48254) +
                         C48151 * (4 * C48254 + C48151 * C48287)) /
                        C47918;
    const double C281 = (C48145 * (4 * C48254 + C48151 * C48287) +
                         (4 * C48255 + C48151 * C48282) * ae) /
                        C47918;
    const double C417 = (C48289 * (4 * C48254 + C48151 * C48287)) / C47918;
    const double C618 =
        (3 * C48240 + C48151 * C48254 +
         C48145 * (C48145 * C48287 + C48282 * ae) + C48145 * C48282 * ae) /
        C47918;
    const double C720 = (C48289 * (C48145 * C48287 + C48282 * ae)) / C47918;
    const double C971 =
        (3 * C48240 + C48151 * C48254 + C48287 * C48412) / C47918;
    const double C1321 = (2 * (C48145 * C48254 + C48255 * ae) +
                          C48145 * (C48254 + C48145 * C48331 + C48327 * ae) +
                          (C48255 + C48276 * C48148) * ae) /
                         C47918;
    const double C1525 =
        (C48289 * (C48254 + C48145 * C48331 + C48327 * ae)) / C47918;
    const double C2706 =
        (C48145 * C48254 + C48255 * ae + C48331 * C48412) / C47918;
    const double C48404 = C48402 + C48397;
    const double C48512 = C48145 * C48510;
    const double C10331 =
        (2 * C48289 * C48381 + C48289 * (C48381 + C48510 * C48412)) / C47918;
    const double C48588 = C48553 + C48585;
    const double C623 =
        (3 * C48177 + C48151 * C48191 + ae * (C48145 * C48286 + C48282 * be) +
         be * (C48145 * C48287 + C48282 * ae) +
         C48145 *
             (ae * C48286 + be * C48287 +
              C48145 * (3 * C48189 +
                        C48151 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C725 =
        (ae * C48289 * C48286 + be * C48289 * C48287 +
         C48145 * C48289 *
             (3 * C48189 +
              C48151 *
                  (2 * C48151 * C48187 +
                   C48151 * (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C134 = (5 * (3 * C48238 + C48151 * C48252) +
                         C48151 * (4 * C48252 + C48151 * C48286)) /
                        C47918;
    const double C280 = (C48145 * (4 * C48252 + C48151 * C48286) +
                         (4 * C48255 + C48151 * C48282) * be) /
                        C47918;
    const double C416 = (C48289 * (4 * C48252 + C48151 * C48286)) / C47918;
    const double C617 =
        (3 * C48238 + C48151 * C48252 +
         C48145 * (C48145 * C48286 + C48282 * be) + C48145 * C48282 * be) /
        C47918;
    const double C719 = (C48289 * (C48145 * C48286 + C48282 * be)) / C47918;
    const double C970 =
        (3 * C48238 + C48151 * C48252 + C48286 * C48412) / C47918;
    const double C1325 =
        (2 * (ae * C48252 + be * C48254 + C48145 * C48191) +
         ae * (C48252 + C48145 * C48330 + C48327 * be) +
         be * (C48254 + C48145 * C48331 + C48327 * ae) +
         C48145 *
             (C48191 + ae * C48330 + be * C48331 +
              C48145 * (ae * C48281 + be * C48283 +
                        C48145 * (2 * C48151 * C48187 +
                                  C48151 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C1529 =
        (C48289 * C48191 + ae * C48289 * C48330 + be * C48289 * C48331 +
         C48145 *
             (ae * C48289 * C48281 + be * C48289 * C48283 +
              C48145 * C48289 *
                  (2 * C48151 * C48187 +
                   C48151 * (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C1320 = (2 * (C48145 * C48252 + C48255 * be) +
                          C48145 * (C48252 + C48145 * C48330 + C48327 * be) +
                          (C48255 + C48276 * C48148) * be) /
                         C47918;
    const double C1524 =
        (C48289 * (C48252 + C48145 * C48330 + C48327 * be)) / C47918;
    const double C2705 =
        (C48145 * C48252 + C48255 * be + C48330 * C48412) / C47918;
    const double C48403 = C48401 + C48394;
    const double C48511 = C48145 * C48509;
    const double C10179 =
        (2 * (ae * (C48242 + C48258 * C48412) +
              be * (C48246 + C48264 * C48412) + C48145 * C48631) +
         ae * (C48380 + C48509 * C48412) + be * (C48381 + C48510 * C48412) +
         C48145 * (C48631 + ae * (C48370 + C48494 * C48412) +
                   be * (C48373 + C48497 * C48412) +
                   C48145 * (ae * (C48258 + C48478 * C48412) +
                             be * (C48264 + C48482 * C48412) +
                             C48145 * (C48476 + C48151 *
                                                    (C48181 * C48182 +
                                                     C48148 * bs[8] *
                                                         std::pow(C48143, 8)) *
                                                    C47917 * C48412)))) /
        C47926;
    const double C10330 =
        (2 * C48289 * C48380 + C48289 * (C48380 + C48509 * C48412)) / C47918;
    const double C48587 = C48545 + C48583;
    const double C49338 = C49284 + C49330;
    const double C3899 = C49317 - (C48951 * C48934) / C47918;
    const double C31693 = C451 * C49318;
    const double C105 = C49318 / C47958 - C48949 / C48071;
    const double C5394 = C451 * C3900;
    const double C49331 = C49287 + C49317;
    const double C49340 = C49309 + C49336;
    const double C20345 = C49327 - (C49143 * C49132) / C47918;
    const double C17896 = C49328 / C47958 - C49141 / C48071;
    const double C49337 = C49311 + C49327;
    const double C48035 = C47942 / C47928;
    const double C48031 = C47942 / C47918;
    const double C1096 =
        (((-4 * C47929) / C47918 - C47942 / C47918) * ae) / C47928 +
        ((2 * ((0 * ae) / C47918 - C47929 / C47926) - C47942 / C47928) * ae) /
            C47918;
    const double C3903 =
        (((-4 * C47929) / C47918 - C47942 / C47918) * ae) / C47918;
    const double C7944 =
        (-(be * -2 * C47925) / C47926) / C47958 -
        ((2 * ((-C47925 / C47918) / C47958 - (C47936 * be) / C47918) -
          (C47916 * ((-4 * C47929) / C47918 - C47942 / C47918) * be) / C47918) *
         be) /
            C47918 -
        C47937 / C47928;
    const double C7946 =
        (-(((-4 * C47929) / C47918 - C47942 / C47918) * be) / C47918) / C47958 -
        ((2 * ((-C47932 / C47918) / C47958 - (0 * be) / C47918) -
          C47942 / C47928) *
         be) /
            C47918;
    const double C1133 = C1094 * C118;
    const double C1113 = C1094 * C117;
    const double C1101 = C1094 * C116;
    const double C1348 = C1094 * C267;
    const double C1336 = C1094 * C266;
    const double C1552 = C1094 * C403;
    const double C1540 = C1094 * C402;
    const double C16924 = C1094 * C958;
    const double C16912 = C1094 * C957;
    const double C16900 = C1094 * C404;
    const double C17377 = C1094 * C2400;
    const double C17365 = C1094 * C706;
    const double C17818 = C1094 * C2884;
    const double C32772 = C1094 * C707;
    const double C1125 = C1098 * C607;
    const double C1121 = C1098 * C606;
    const double C1109 = C1098 * C605;
    const double C1340 = C1098 * C1311;
    const double C1328 = C1098 * C1310;
    const double C1544 = C1098 * C1515;
    const double C1532 = C1098 * C1514;
    const double C16932 = C1098 * C2403;
    const double C16920 = C1098 * C2401;
    const double C16908 = C1098 * C1516;
    const double C17385 = C1098 * C9912;
    const double C17373 = C1098 * C1986;
    const double C17810 = C1098 * C10326;
    const double C32764 = C1098 * C1987;
    const double C3932 = C3905 * C264;
    const double C3928 = C3905 * C265;
    const double C3920 = C3905 * C266;
    const double C3912 = C3905 * C267;
    const double C4112 = C3905 * C605;
    const double C4104 = C3905 * C606;
    const double C4096 = C3905 * C607;
    const double C4284 = C3905 * C707;
    const double C4276 = C3905 * C708;
    const double C4268 = C3905 * C709;
    const double C6474 = C3905 * C1515;
    const double C6466 = C3905 * C1514;
    const double C6705 = C3905 * C2402;
    const double C6697 = C3905 * C2404;
    const double C6692 = C3905 * C706;
    const double C7271 = C3905 * C1516;
    const double C7815 = C3905 * C2400;
    const double C18924 = C3905 * C2403;
    const double C19133 = C3905 * C3341;
    const double C19686 = C3905 * C2401;
    const double C20232 = C3905 * C3340;
    const double C22075 = C3905 * C10326;
    const double C22445 = C3905 * C11247;
    const double C7975 = C7948 * C607;
    const double C7971 = C7948 * C606;
    const double C7959 = C7948 * C605;
    const double C8174 = C7948 * C1311;
    const double C8162 = C7948 * C1310;
    const double C8362 = C7948 * C1515;
    const double C8350 = C7948 * C1514;
    const double C10368 = C7948 * C2403;
    const double C10356 = C7948 * C2401;
    const double C10344 = C7948 * C1516;
    const double C10825 = C7948 * C9912;
    const double C10813 = C7948 * C1986;
    const double C11258 = C7948 * C10326;
    const double C12821 = C7948 * C1987;
    const double C11409 = C11390 * C1310;
    const double C11405 = C11390 * C1311;
    const double C11579 = C11390 * C1829;
    const double C11737 = C11390 * C1987;
    const double C14478 = C11390 * C1986;
    const double C14864 = C11390 * C9444;
    const double C15238 = C11390 * C9912;
    const double C22592 = C22565 * C264;
    const double C22588 = C22565 * C265;
    const double C22580 = C22565 * C266;
    const double C22572 = C22565 * C267;
    const double C22772 = C22565 * C605;
    const double C22764 = C22565 * C606;
    const double C22756 = C22565 * C607;
    const double C22944 = C22565 * C707;
    const double C22936 = C22565 * C708;
    const double C22928 = C22565 * C709;
    const double C25040 = C22565 * C2404;
    const double C25036 = C22565 * C2402;
    const double C25262 = C22565 * C1515;
    const double C25254 = C22565 * C2403;
    const double C25494 = C22565 * C3341;
    const double C25489 = C22565 * C2400;
    const double C25480 = C22565 * C706;
    const double C26068 = C22565 * C2401;
    const double C26060 = C22565 * C1516;
    const double C26620 = C22565 * C3340;
    const double C28344 = C22565 * C1514;
    const double C43070 = C22565 * C10326;
    const double C43440 = C22565 * C11247;
    const double C23814 = C23795 * C1310;
    const double C23810 = C23795 * C1311;
    const double C23984 = C23795 * C1829;
    const double C24142 = C23795 * C1987;
    const double C41562 = C23795 * C1986;
    const double C41948 = C23795 * C9444;
    const double C42322 = C23795 * C9912;
    const double C26782 = C26755 * C607;
    const double C26778 = C26755 * C606;
    const double C26766 = C26755 * C605;
    const double C26981 = C26755 * C1311;
    const double C26969 = C26755 * C1310;
    const double C27169 = C26755 * C1515;
    const double C27157 = C26755 * C1514;
    const double C29961 = C26755 * C1987;
    const double C30189 = C26755 * C2403;
    const double C30184 = C26755 * C1516;
    const double C30764 = C26755 * C1986;
    const double C31311 = C26755 * C2401;
    const double C47474 = C26755 * C9912;
    const double C47890 = C26755 * C10326;
    const double C47995 = C47991 - C47984;
    const double C23828 = C49339 * C138;
    const double C23800 = C49339 * C137;
    const double C23998 = C49339 * C285;
    const double C24156 = C49339 * C421;
    const double C41552 = C49339 * C422;
    const double C41938 = C49339 * C721;
    const double C42336 = C49339 * C972;
    const double C9256 =
        (C49332 + 2 * C49094) / C47958 - (C49339 * C49090) / C47918;
    const double C11419 = C11378 * C284;
    const double C11399 = C11378 * C285;
    const double C11589 = C11378 * C620;
    const double C11747 = C11378 * C722;
    const double C14472 = C11378 * C721;
    const double C14858 = C11378 * C1528;
    const double C15248 = C11378 * C2418;
    const double C23824 = C49335 * C284;
    const double C23804 = C49335 * C285;
    const double C23994 = C49335 * C620;
    const double C24152 = C49335 * C722;
    const double C41556 = C49335 * C721;
    const double C41942 = C49335 * C1528;
    const double C42332 = C49335 * C2418;
    const double C9257 =
        (C49320 + 2 * C49101 + C49339) / C47958 - (C49335 * C49090) / C47918;
    const double C9258 = (C49300 + C49098 / C47918 + C49335) / C47958 -
                         (C49325 * C49090) / C47918;
    const double C3787 = C2938 + C2909;
    const double C16492 = C15673 + C15674;
    const double C21350 = C20618 + C20619;
    const double C35146 = C34414 + C34415;
    const double C37979 = C37160 + C37161;
    const double C3372 = C3370 * C1090;
    const double C16087 = C3370 * C49329;
    const double C18328 = C3370 * C48938;
    const double C20988 = C3370 * C49245;
    const double C34784 = C3370 * C23786;
    const double C37574 = C3370 * C48943;
    const double C18096 = C18094 * C48938;
    const double C21352 = C18094 * C48948;
    const double C35148 = C18094 * C48948;
    const double C173 = C168 - C162;
    const double C309 = C305 - C291;
    const double C445 = C441 - C427;
    const double C5260 = C5259 - C5257;
    const double C2555 = C2552 - C2548;
    const double C2729 = C2725 - C2711;
    const double C11580 = C11389 * C1834;
    const double C23985 = C23794 * C1834;
    const double C11738 = C11389 * C1992;
    const double C12822 = C7947 * C1992;
    const double C24143 = C23794 * C1992;
    const double C29962 = C48066 * C1992;
    const double C32765 = C1097 * C1992;
    const double C10369 = C7947 * C2413;
    const double C16933 = C1097 * C2413;
    const double C18925 = C3904 * C2413;
    const double C25255 = C22564 * C2413;
    const double C30190 = C48066 * C2413;
    const double C11581 = C49275 * C1838;
    const double C23986 = C49275 * C1838;
    const double C11739 = C49275 * C1996;
    const double C12823 = C49300 * C1996;
    const double C24144 = C49275 * C1996;
    const double C29963 = C26746 * C1996;
    const double C32766 = C49300 * C1996;
    const double C11578 = C11389 * C1833;
    const double C23983 = C23794 * C1833;
    const double C11736 = C11389 * C1991;
    const double C12820 = C7947 * C1991;
    const double C24141 = C23794 * C1991;
    const double C29960 = C48066 * C1991;
    const double C32763 = C1097 * C1991;
    const double C10367 = C7947 * C2412;
    const double C16931 = C1097 * C2412;
    const double C18923 = C3904 * C2412;
    const double C25253 = C22564 * C2412;
    const double C30188 = C48066 * C2412;
    const double C48470 = C48468 + C48457;
    const double C48469 = C48467 + C48454;
    const double C48564 = C48556 + C48538;
    const double C2921 = C450 * C49289;
    const double C5398 = C450 * C3900;
    const double C5395 = C450 * C49267;
    const double C15678 = C450 * C49289;
    const double C31697 = C450 * C49318;
    const double C31694 = C450 * C49267;
    const double C37165 = C450 * C26749;
    const double C3358 = C2735 * C49289;
    const double C5760 = C2735 * C3900;
    const double C16086 = C2735 * C49289;
    const double C32059 = C2735 * C49318;
    const double C37573 = C2735 * C26749;
    const double C2923 = C2557 * C1091;
    const double C2910 = C2557 * C49289;
    const double C6121 = C2557 * C3900;
    const double C15680 = C2557 * C49316;
    const double C15675 = C2557 * C49289;
    const double C20625 = C2557 * C48948;
    const double C32420 = C2557 * C49318;
    const double C34421 = C2557 * C48948;
    const double C37167 = C2557 * C48951;
    const double C37162 = C2557 * C26749;
    const double C2734 = C2730 + C2716;
    const double C20485 = C20484 + C20482;
    const double C21351 = C20620 + C20621;
    const double C35147 = C34416 + C34417;
    const double C18343 = C18341 * C48938;
    const double C20990 = C18341 * C49245;
    const double C34786 = C18341 * C23786;
    const double C292 = C49035 * C282;
    const double C3934 = C49098 * C282;
    const double C22594 = C49098 * C282;
    const double C428 = C49035 * C418;
    const double C1127 = C49300 * C622;
    const double C4098 = C49098 * C622;
    const double C7977 = C49300 * C622;
    const double C22758 = C49098 * C622;
    const double C26784 = C26746 * C622;
    const double C4270 = C49098 * C724;
    const double C5258 = C49035 * C724;
    const double C22930 = C49098 * C724;
    const double C2549 = C49035 * C975;
    const double C3788 = C2935 * C49289;
    const double C16493 = C2935 * C49289;
    const double C20627 = C2935 * C48948;
    const double C34423 = C2935 * C48948;
    const double C37980 = C2935 * C26749;
    const double C18336 = C49035 * C11253;
    const double C22447 = C49098 * C11253;
    const double C43442 = C49098 * C11253;
    const double C18578 = C49035 * C18072;
    const double C1836 =
        (3 * (C48240 + C48145 * C48306 + C48302 * ae) +
         C48145 * (2 * C48306 + C48145 * C48404 + C48395 * ae) +
         (2 * C48302 + C48145 * C48395) * ae) /
        C47918;
    const double C1994 =
        (C48289 * (2 * C48306 + C48145 * C48404 + C48395 * ae)) / C47918;
    const double C2417 =
        (C48240 + C48145 * C48306 + C48302 * ae + C48404 * C48412) / C47918;
    const double C48514 = C48481 + C48512;
    const double C48590 = C48588 + C48571;
    const double C1839 =
        (3 * (C48177 + ae * C48305 + be * C48306 + C48145 * C48398) +
         ae * (2 * C48305 + C48145 * C48403 + C48395 * be) +
         be * (2 * C48306 + C48145 * C48404 + C48395 * ae) +
         C48145 *
             (2 * C48398 + ae * C48403 + be * C48404 +
              C48145 * (C48189 + ae * C48393 + be * C48396 +
                        C48145 * (ae * C48275 + be * C48277 +
                                  C48145 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48163))))) /
        C47926;
    const double C1997 =
        (2 * (ae * C48289 * C48216 + be * C48289 * C48217 + C48145 * C48410) +
         ae * C48289 * C48403 + be * C48289 * C48404 +
         C48145 *
             (C48410 + ae * C48289 * C48393 + be * C48289 * C48396 +
              C48145 * (ae * C48289 * C48275 + be * C48289 * C48277 +
                        C48145 * C48289 *
                            (C48187 + (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                          C47917 * C48163)))) /
        C47926;
    const double C1835 =
        (3 * (C48238 + C48145 * C48305 + C48302 * be) +
         C48145 * (2 * C48305 + C48145 * C48403 + C48395 * be) +
         (2 * C48302 + C48145 * C48395) * be) /
        C47918;
    const double C1993 =
        (C48289 * (2 * C48305 + C48145 * C48403 + C48395 * be)) / C47918;
    const double C2416 =
        (C48238 + C48145 * C48305 + C48302 * be + C48403 * C48412) / C47918;
    const double C48513 = C48477 + C48511;
    const double C48589 = C48587 + C48568;
    const double C31695 = C452 * C49338;
    const double C31691 = C2933 * C49338;
    const double C32057 = C3369 * C49338;
    const double C32422 = C2934 * C49338;
    const double C102 =
        (C49329 + 2 * C48943) / C47958 - (C49338 * C48934) / C47918;
    const double C5397 = C451 * C3899;
    const double C5393 = C452 * C3899;
    const double C5759 = C2736 * C3899;
    const double C6122 = C2556 * C3899;
    const double C31696 = C451 * C49331;
    const double C31692 = C452 * C49331;
    const double C32058 = C2736 * C49331;
    const double C32421 = C2556 * C49331;
    const double C103 =
        (C49316 + 2 * C48951 + C49338) / C47958 - (C49331 * C48934) / C47918;
    const double C104 = (C49289 + C48948 / C47918 + C49331) / C47958 -
                        (C49318 * C48934) / C47918;
    const double C17893 =
        (C49333 + 2 * C49136) / C47958 - (C49340 * C49132) / C47918;
    const double C17894 =
        (C49322 + 2 * C49143 + C49340) / C47958 - (C49337 * C49132) / C47918;
    const double C17895 = (C49303 + C49140 / C47918 + C49337) / C47958 -
                          (C49328 * C49132) / C47918;
    const double C48039 = C48034 - C48035;
    const double C48043 = C48038 - C48031;
    const double C1129 = C1096 * C265;
    const double C1117 = C1096 * C266;
    const double C1105 = C1096 * C267;
    const double C1344 = C1096 * C605;
    const double C1332 = C1096 * C606;
    const double C1548 = C1096 * C707;
    const double C1536 = C1096 * C708;
    const double C16928 = C1096 * C2402;
    const double C16916 = C1096 * C2400;
    const double C16904 = C1096 * C706;
    const double C17381 = C1096 * C2401;
    const double C17369 = C1096 * C1516;
    const double C17814 = C1096 * C3340;
    const double C32768 = C1096 * C1515;
    const double C3936 = C3903 * C119;
    const double C3924 = C3903 * C118;
    const double C3916 = C3903 * C117;
    const double C3908 = C3903 * C116;
    const double C4116 = C3903 * C267;
    const double C4108 = C3903 * C266;
    const double C4100 = C3903 * C265;
    const double C4288 = C3903 * C403;
    const double C4280 = C3903 * C402;
    const double C4272 = C3903 * C401;
    const double C6478 = C3903 * C707;
    const double C6470 = C3903 * C708;
    const double C6709 = C3903 * C958;
    const double C6701 = C3903 * C959;
    const double C6688 = C3903 * C404;
    const double C7267 = C3903 * C706;
    const double C7819 = C3903 * C957;
    const double C18928 = C3903 * C2402;
    const double C19137 = C3903 * C2883;
    const double C19682 = C3903 * C2400;
    const double C20236 = C3903 * C2884;
    const double C22071 = C3903 * C3340;
    const double C22449 = C3903 * C3774;
    const double C7983 = C7944 * C118;
    const double C7963 = C7944 * C117;
    const double C7951 = C7944 * C116;
    const double C8182 = C7944 * C267;
    const double C8170 = C7944 * C266;
    const double C8370 = C7944 * C403;
    const double C8358 = C7944 * C402;
    const double C10360 = C7944 * C958;
    const double C10348 = C7944 * C957;
    const double C10336 = C7944 * C404;
    const double C10817 = C7944 * C2400;
    const double C10805 = C7944 * C706;
    const double C11266 = C7944 * C2884;
    const double C12829 = C7944 * C707;
    const double C7979 = C7946 * C265;
    const double C7967 = C7946 * C266;
    const double C7955 = C7946 * C267;
    const double C8178 = C7946 * C605;
    const double C8166 = C7946 * C606;
    const double C8366 = C7946 * C707;
    const double C8354 = C7946 * C708;
    const double C10364 = C7946 * C2402;
    const double C10352 = C7946 * C2400;
    const double C10340 = C7946 * C706;
    const double C10821 = C7946 * C2401;
    const double C10809 = C7946 * C1516;
    const double C11262 = C7946 * C3340;
    const double C12825 = C7946 * C1515;
    const double C1144 = C1132 - C1133;
    const double C1139 = C1112 - C1113;
    const double C1136 = C1100 - C1101;
    const double C1356 = C1347 - C1348;
    const double C1353 = C1335 - C1336;
    const double C1560 = C1551 - C1552;
    const double C1557 = C1539 - C1540;
    const double C16941 = C16923 - C16924;
    const double C16938 = C16911 - C16912;
    const double C16935 = C16899 - C16900;
    const double C17391 = C17376 - C17377;
    const double C17388 = C17364 - C17365;
    const double C17824 = C17817 - C17818;
    const double C32777 = C32771 - C32772;
    const double C1142 = C1124 - C1125;
    const double C1141 = C1120 - C1121;
    const double C1138 = C1108 - C1109;
    const double C1354 = C1339 - C1340;
    const double C1351 = C1327 - C1328;
    const double C1558 = C1543 - C1544;
    const double C1555 = C1531 - C1532;
    const double C16940 = C16919 - C16920;
    const double C16937 = C16907 - C16908;
    const double C17390 = C17372 - C17373;
    const double C17822 = C17809 - C17810;
    const double C3945 = C3931 - C3932;
    const double C3944 = C3927 - C3928;
    const double C3942 = C3919 - C3920;
    const double C3940 = C3911 - C3912;
    const double C4123 = C4111 - C4112;
    const double C4121 = C4103 - C4104;
    const double C4119 = C4095 - C4096;
    const double C4295 = C4283 - C4284;
    const double C4293 = C4275 - C4276;
    const double C4291 = C4267 - C4268;
    const double C6483 = C6473 - C6474;
    const double C6481 = C6465 - C6466;
    const double C6718 = C6704 - C6705;
    const double C6716 = C6696 - C6697;
    const double C6715 = C6691 - C6692;
    const double C7275 = C7270 - C7271;
    const double C7822 = C7814 - C7815;
    const double C19141 = C19132 - C19133;
    const double C19690 = C19685 - C19686;
    const double C20240 = C20231 - C20232;
    const double C22079 = C22074 - C22075;
    const double C22453 = C22444 - C22445;
    const double C7992 = C7974 - C7975;
    const double C7991 = C7970 - C7971;
    const double C7988 = C7958 - C7959;
    const double C8188 = C8173 - C8174;
    const double C8185 = C8161 - C8162;
    const double C8376 = C8361 - C8362;
    const double C8373 = C8349 - C8350;
    const double C10376 = C10355 - C10356;
    const double C10373 = C10343 - C10344;
    const double C10830 = C10812 - C10813;
    const double C11270 = C11257 - C11258;
    const double C11428 = C11408 - C11409;
    const double C11427 = C11404 - C11405;
    const double C14484 = C14477 - C14478;
    const double C22605 = C22591 - C22592;
    const double C22604 = C22587 - C22588;
    const double C22602 = C22579 - C22580;
    const double C22600 = C22571 - C22572;
    const double C22783 = C22771 - C22772;
    const double C22781 = C22763 - C22764;
    const double C22779 = C22755 - C22756;
    const double C22955 = C22943 - C22944;
    const double C22953 = C22935 - C22936;
    const double C22951 = C22927 - C22928;
    const double C25049 = C25039 - C25040;
    const double C25048 = C25035 - C25036;
    const double C25271 = C25261 - C25262;
    const double C25507 = C25493 - C25494;
    const double C25506 = C25488 - C25489;
    const double C25504 = C25479 - C25480;
    const double C26074 = C26067 - C26068;
    const double C26072 = C26059 - C26060;
    const double C26628 = C26619 - C26620;
    const double C28351 = C28343 - C28344;
    const double C43074 = C43069 - C43070;
    const double C43448 = C43439 - C43440;
    const double C23833 = C23813 - C23814;
    const double C23832 = C23809 - C23810;
    const double C41568 = C41561 - C41562;
    const double C26799 = C26781 - C26782;
    const double C26798 = C26777 - C26778;
    const double C26795 = C26765 - C26766;
    const double C26995 = C26980 - C26981;
    const double C26992 = C26968 - C26969;
    const double C27183 = C27168 - C27169;
    const double C27180 = C27156 - C27157;
    const double C30203 = C30183 - C30184;
    const double C30769 = C30763 - C30764;
    const double C31322 = C31310 - C31311;
    const double C47902 = C47889 - C47890;
    const double C48000 = C47995 / C47958;
    const double C47999 = C47916 * C47995;
    const double C48032 = 2 * C47995;
    const double C178 = C173 + C163;
    const double C2733 = C2729 + C2712;
    const double C11594 = C11578 - C11579;
    const double C23999 = C23983 - C23984;
    const double C11752 = C11736 - C11737;
    const double C12832 = C12820 - C12821;
    const double C24157 = C24141 - C24142;
    const double C29972 = C29960 - C29961;
    const double C32775 = C32763 - C32764;
    const double C10379 = C10367 - C10368;
    const double C16943 = C16931 - C16932;
    const double C18931 = C18923 - C18924;
    const double C25269 = C25253 - C25254;
    const double C30205 = C30188 - C30189;
    const double C9357 =
        (4 * (2 * C48323 + C48145 * C48358 + C48349 * ae) +
         C48145 * (3 * C48358 + C48145 * C48470 + C48460 * ae) +
         (3 * C48349 + C48145 * C48460) * ae) /
        C47918;
    const double C9447 =
        (C48289 * (3 * C48358 + C48145 * C48470 + C48460 * ae)) / C47918;
    const double C9915 =
        (2 * C48323 + C48145 * C48358 + C48349 * ae + C48470 * C48412) / C47918;
    const double C9360 =
        (4 * (2 * C48352 + ae * C48357 + be * C48358 + C48145 * C48462) +
         ae * (3 * C48357 + C48145 * C48469 + C48460 * be) +
         be * (3 * C48358 + C48145 * C48470 + C48460 * ae) +
         C48145 * (3 * C48462 + ae * C48469 + be * C48470 +
                   C48145 * (2 * C48452 + ae * C48463 + be * C48464 +
                             C48145 * (C48175 + ae * C48446 + be * C48449 +
                                       C48145 * (ae * C48212 + be * C48213 +
                                                 C48145 * C48187))))) /
        C47926;
    const double C9450 =
        (3 * (C48406 + ae * C48289 * C48347 + be * C48289 * C48350 +
              C48145 * C48525) +
         ae * C48289 * C48469 + be * C48289 * C48470 +
         C48145 *
             (2 * C48525 + ae * C48289 * C48463 + be * C48289 * C48464 +
              C48145 * (C48520 + ae * C48289 * C48446 + be * C48289 * C48449 +
                        C48145 * (ae * C48289 * C48212 + be * C48289 * C48213 +
                                  C48145 * C48289 * C48187)))) /
        C47926;
    const double C9356 =
        (4 * (2 * C48322 + C48145 * C48357 + C48349 * be) +
         C48145 * (3 * C48357 + C48145 * C48469 + C48460 * be) +
         (3 * C48349 + C48145 * C48460) * be) /
        C47918;
    const double C9446 =
        (C48289 * (3 * C48357 + C48145 * C48469 + C48460 * be)) / C47918;
    const double C9914 =
        (2 * C48322 + C48145 * C48357 + C48349 * be + C48469 * C48412) / C47918;
    const double C48586 = C48564 + C48582;
    const double C3794 = C3787 + C2910;
    const double C16496 = C16492 + C15675;
    const double C37983 = C37979 + C37162;
    const double C3363 = C2734 * C1091;
    const double C16088 = C2734 * C49316;
    const double C20989 = C2734 * C48948;
    const double C34785 = C2734 * C48948;
    const double C37575 = C2734 * C48951;
    const double C20991 = C20485 * C48948;
    const double C34787 = C20485 * C48948;
    const double C313 = C309 + C292;
    const double C449 = C445 + C428;
    const double C5261 = C5260 + C5258;
    const double C2558 = C2555 + C2549;
    const double C18342 = C18340 + C18336;
    const double C18581 = C18580 + C18578;
    const double C48516 = C48514 + C48504;
    const double C48592 = C48145 * C48590;
    const double C10801 =
        (2 * C48289 * C48470 + C48289 * (C48470 + C48590 * C48412)) / C47918;
    const double C48515 = C48513 + C48501;
    const double C48591 = C48145 * C48589;
    const double C9919 =
        (3 * (C48616 + ae * (C48347 + C48446 * C48412) +
              be * (C48350 + C48449 * C48412) + C48145 * C48628) +
         ae * (C48469 + C48589 * C48412) + be * (C48470 + C48590 * C48412) +
         C48145 *
             (2 * C48628 + ae * (C48463 + C48577 * C48412) +
              be * (C48464 + C48580 * C48412) +
              C48145 * (C48623 + ae * (C48446 + C48559 * C48412) +
                        be * (C48449 + C48562 * C48412) +
                        C48145 * (ae * (C48212 + C48267 * C48412) +
                                  be * (C48213 + C48271 * C48412) +
                                  C48145 * (C48187 + (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                         C47917 * C48412))))) /
        C47926;
    const double C10800 =
        (2 * C48289 * C48469 + C48289 * (C48469 + C48589 * C48412)) / C47918;
    const double C48044 = C48039 * be;
    const double C48046 = C48043 * ae;
    const double C22563 = -(C48043 * be) / C47918;
    const double C1143 = C1128 - C1129;
    const double C1140 = C1116 - C1117;
    const double C1137 = C1104 - C1105;
    const double C1355 = C1343 - C1344;
    const double C1352 = C1331 - C1332;
    const double C1559 = C1547 - C1548;
    const double C1556 = C1535 - C1536;
    const double C16942 = C16927 - C16928;
    const double C16939 = C16915 - C16916;
    const double C16936 = C16903 - C16904;
    const double C17392 = C17380 - C17381;
    const double C17389 = C17368 - C17369;
    const double C17823 = C17813 - C17814;
    const double C32776 = C32767 - C32768;
    const double C3946 = C3935 - C3936;
    const double C3943 = C3923 - C3924;
    const double C3941 = C3915 - C3916;
    const double C3939 = C3907 - C3908;
    const double C4124 = C4115 - C4116;
    const double C4122 = C4107 - C4108;
    const double C4120 = C4099 - C4100;
    const double C4296 = C4287 - C4288;
    const double C4294 = C4279 - C4280;
    const double C4292 = C4271 - C4272;
    const double C6484 = C6477 - C6478;
    const double C6482 = C6469 - C6470;
    const double C6719 = C6708 - C6709;
    const double C6717 = C6700 - C6701;
    const double C6714 = C6687 - C6688;
    const double C7274 = C7266 - C7267;
    const double C7823 = C7818 - C7819;
    const double C18932 = C18927 - C18928;
    const double C19142 = C19136 - C19137;
    const double C19689 = C19681 - C19682;
    const double C20241 = C20235 - C20236;
    const double C22078 = C22070 - C22071;
    const double C22454 = C22448 - C22449;
    const double C7994 = C7982 - C7983;
    const double C7989 = C7962 - C7963;
    const double C7986 = C7950 - C7951;
    const double C8190 = C8181 - C8182;
    const double C8187 = C8169 - C8170;
    const double C8378 = C8369 - C8370;
    const double C8375 = C8357 - C8358;
    const double C10377 = C10359 - C10360;
    const double C10374 = C10347 - C10348;
    const double C10371 = C10335 - C10336;
    const double C10831 = C10816 - C10817;
    const double C10828 = C10804 - C10805;
    const double C11272 = C11265 - C11266;
    const double C12834 = C12828 - C12829;
    const double C7993 = C7978 - C7979;
    const double C7990 = C7966 - C7967;
    const double C7987 = C7954 - C7955;
    const double C8189 = C8177 - C8178;
    const double C8186 = C8165 - C8166;
    const double C8377 = C8365 - C8366;
    const double C8374 = C8353 - C8354;
    const double C10378 = C10363 - C10364;
    const double C10375 = C10351 - C10352;
    const double C10372 = C10339 - C10340;
    const double C10832 = C10820 - C10821;
    const double C10829 = C10808 - C10809;
    const double C11271 = C11261 - C11262;
    const double C12833 = C12824 - C12825;
    const double C1153 = C1144 - C1134;
    const double C1148 = C1139 - C1114;
    const double C1145 = C1136 - C1102;
    const double C1362 = C1356 - C1349;
    const double C1359 = C1353 - C1337;
    const double C1566 = C1560 - C1553;
    const double C1563 = C1557 - C1541;
    const double C16950 = C16941 - C16925;
    const double C16947 = C16938 - C16913;
    const double C16944 = C16935 - C16901;
    const double C17397 = C17391 - C17378;
    const double C17394 = C17388 - C17366;
    const double C17828 = C17824 - C17819;
    const double C32780 = C32777 - C32773;
    const double C1151 = C1142 - C1126;
    const double C1150 = C1141 - C1122;
    const double C1147 = C1138 - C1110;
    const double C1360 = C1354 - C1341;
    const double C1357 = C1351 - C1329;
    const double C1564 = C1558 - C1545;
    const double C1561 = C1555 - C1533;
    const double C16949 = C16940 - C16921;
    const double C16946 = C16937 - C16909;
    const double C17396 = C17390 - C17374;
    const double C17826 = C17822 - C17811;
    const double C3953 = C3945 - C3933;
    const double C3952 = C3944 - C3929;
    const double C3950 = C3942 - C3921;
    const double C3948 = C3940 - C3913;
    const double C4129 = C4123 - C4113;
    const double C4127 = C4121 - C4105;
    const double C4125 = C4119 - C4097;
    const double C4301 = C4295 - C4285;
    const double C4299 = C4293 - C4277;
    const double C4297 = C4291 - C4269;
    const double C6487 = C6483 - C6475;
    const double C6485 = C6481 - C6467;
    const double C6724 = C6718 - C6706;
    const double C6722 = C6716 - C6698;
    const double C6721 = C6715 - C6693;
    const double C7277 = C7275 - C7272;
    const double C7824 = C7822 - C7816;
    const double C19143 = C19141 - C19134;
    const double C19692 = C19690 - C19687;
    const double C20243 = C20240 - C20233;
    const double C22081 = C22079 - C22076;
    const double C22455 = C22453 - C22446;
    const double C8001 = C7992 - C7976;
    const double C8000 = C7991 - C7972;
    const double C7997 = C7988 - C7960;
    const double C8194 = C8188 - C8175;
    const double C8191 = C8185 - C8163;
    const double C8382 = C8376 - C8363;
    const double C8379 = C8373 - C8351;
    const double C10385 = C10376 - C10357;
    const double C10382 = C10373 - C10345;
    const double C10836 = C10830 - C10814;
    const double C11274 = C11270 - C11259;
    const double C11436 = C11428 - C11410;
    const double C11435 = C11427 - C11406;
    const double C14488 = C14484 - C14479;
    const double C22613 = C22605 - C22593;
    const double C22612 = C22604 - C22589;
    const double C22610 = C22602 - C22581;
    const double C22608 = C22600 - C22573;
    const double C22789 = C22783 - C22773;
    const double C22787 = C22781 - C22765;
    const double C22785 = C22779 - C22757;
    const double C22961 = C22955 - C22945;
    const double C22959 = C22953 - C22937;
    const double C22957 = C22951 - C22929;
    const double C25053 = C25049 - C25041;
    const double C25052 = C25048 - C25037;
    const double C25275 = C25271 - C25263;
    const double C25513 = C25507 - C25495;
    const double C25512 = C25506 - C25490;
    const double C25510 = C25504 - C25481;
    const double C26078 = C26074 - C26069;
    const double C26076 = C26072 - C26061;
    const double C26631 = C26628 - C26621;
    const double C28353 = C28351 - C28345;
    const double C43076 = C43074 - C43071;
    const double C43450 = C43448 - C43441;
    const double C23841 = C23833 - C23815;
    const double C23840 = C23832 - C23811;
    const double C41572 = C41568 - C41563;
    const double C26808 = C26799 - C26783;
    const double C26807 = C26798 - C26779;
    const double C26804 = C26795 - C26767;
    const double C27001 = C26995 - C26982;
    const double C26998 = C26992 - C26970;
    const double C27189 = C27183 - C27170;
    const double C27186 = C27180 - C27158;
    const double C30211 = C30203 - C30185;
    const double C30772 = C30769 - C30765;
    const double C31325 = C31322 - C31312;
    const double C47906 = C47902 - C47891;
    const double C48018 = C48000 - C48014;
    const double C48004 = C47999 + C49266;
    const double C3364 = C2733 * C49289;
    const double C16089 = C2733 * C49289;
    const double C37576 = C2733 * C26749;
    const double C11598 = C11594 - C11580;
    const double C24003 = C23999 - C23985;
    const double C11756 = C11752 - C11738;
    const double C12835 = C12832 - C12822;
    const double C24161 = C24157 - C24143;
    const double C29975 = C29972 - C29962;
    const double C32778 = C32775 - C32765;
    const double C10388 = C10379 - C10369;
    const double C16952 = C16943 - C16933;
    const double C18933 = C18931 - C18925;
    const double C25273 = C25269 - C25255;
    const double C30212 = C30205 - C30190;
    const double C14865 = C11389 * C9447;
    const double C41949 = C23794 * C9447;
    const double C10826 = C7947 * C9915;
    const double C15239 = C11389 * C9915;
    const double C17386 = C1097 * C9915;
    const double C42323 = C23794 * C9915;
    const double C47475 = C48066 * C9915;
    const double C14866 = C49275 * C9450;
    const double C41950 = C49275 * C9450;
    const double C14863 = C11389 * C9446;
    const double C41947 = C23794 * C9446;
    const double C10824 = C7947 * C9914;
    const double C15237 = C11389 * C9914;
    const double C17384 = C1097 * C9914;
    const double C42321 = C23794 * C9914;
    const double C47473 = C48066 * C9914;
    const double C5399 = C449 * C49267;
    const double C31698 = C449 * C49267;
    const double C5761 = C5261 * C49267;
    const double C32060 = C5261 * C49267;
    const double C2924 = C2558 * C49289;
    const double C6120 = C2558 * C49267;
    const double C15681 = C2558 * C49289;
    const double C32419 = C2558 * C49267;
    const double C37168 = C2558 * C26749;
    const double C18344 = C18342 * C48938;
    const double C18582 = C18581 * C48938;
    const double C9359 =
        (4 * (2 * C48315 + C48145 * C48381 + C48372 * ae) +
         C48145 * (3 * C48381 + C48145 * C48516 + C48507 * ae) +
         (3 * C48372 + C48145 * C48507) * ae) /
        C47918;
    const double C9449 =
        (C48289 * (3 * C48381 + C48145 * C48516 + C48507 * ae)) / C47918;
    const double C10178 =
        (2 * C48315 + C48145 * C48381 + C48372 * ae + C48516 * C48412) / C47918;
    const double C48594 = C48552 + C48592;
    const double C9361 =
        (4 * (2 * C48375 + ae * C48380 + be * C48381 + C48145 * C48505) +
         ae * (3 * C48380 + C48145 * C48515 + C48507 * be) +
         be * (3 * C48381 + C48145 * C48516 + C48507 * ae) +
         C48145 * (3 * C48505 + ae * C48515 + be * C48516 +
                   C48145 * (2 * C48493 + ae * C48509 + be * C48510 +
                             C48145 * (C48476 + ae * C48494 + be * C48497 +
                                       C48145 * (ae * C48478 + be * C48482 +
                                                 C48145 * C48151 *
                                                     (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47917))))) /
        C47926;
    const double C9451 =
        (3 * (C48408 + ae * C48289 * C48370 + be * C48289 * C48373 +
              C48145 * C48534) +
         ae * C48289 * C48515 + be * C48289 * C48516 +
         C48145 *
             (2 * C48534 + ae * C48289 * C48509 + be * C48289 * C48510 +
              C48145 * (C48529 + ae * C48289 * C48494 + be * C48289 * C48497 +
                        C48145 * (ae * C48289 * C48478 + be * C48289 * C48482 +
                                  C48145 * C48289 * C48151 *
                                      (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                      C47917)))) /
        C47926;
    const double C9358 =
        (4 * (2 * C48314 + C48145 * C48380 + C48372 * be) +
         C48145 * (3 * C48380 + C48145 * C48515 + C48507 * be) +
         (3 * C48372 + C48145 * C48507) * be) /
        C47918;
    const double C9448 =
        (C48289 * (3 * C48380 + C48145 * C48515 + C48507 * be)) / C47918;
    const double C10177 =
        (2 * C48314 + C48145 * C48380 + C48372 * be + C48515 * C48412) / C47918;
    const double C48593 = C48544 + C48591;
    const double C48047 = C48044 / C47918;
    const double C48050 = C48046 / C47928;
    const double C48049 = C47916 * C48046;
    const double C22596 = C22563 * C119;
    const double C22584 = C22563 * C118;
    const double C22576 = C22563 * C117;
    const double C22568 = C22563 * C116;
    const double C22776 = C22563 * C267;
    const double C22768 = C22563 * C266;
    const double C22760 = C22563 * C265;
    const double C22948 = C22563 * C403;
    const double C22940 = C22563 * C402;
    const double C22932 = C22563 * C401;
    const double C25044 = C22563 * C959;
    const double C25032 = C22563 * C958;
    const double C25266 = C22563 * C707;
    const double C25258 = C22563 * C2402;
    const double C25498 = C22563 * C2883;
    const double C25485 = C22563 * C957;
    const double C25476 = C22563 * C404;
    const double C26064 = C22563 * C2400;
    const double C26056 = C22563 * C706;
    const double C26624 = C22563 * C2884;
    const double C28348 = C22563 * C708;
    const double C43066 = C22563 * C3340;
    const double C43444 = C22563 * C3774;
    const double C1152 = C1143 - C1130;
    const double C1149 = C1140 - C1118;
    const double C1146 = C1137 - C1106;
    const double C1361 = C1355 - C1345;
    const double C1358 = C1352 - C1333;
    const double C1565 = C1559 - C1549;
    const double C1562 = C1556 - C1537;
    const double C16951 = C16942 - C16929;
    const double C16948 = C16939 - C16917;
    const double C16945 = C16936 - C16905;
    const double C17398 = C17392 - C17382;
    const double C17395 = C17389 - C17370;
    const double C17827 = C17823 - C17815;
    const double C32779 = C32776 - C32769;
    const double C3954 = C3946 - C3937;
    const double C3951 = C3943 - C3925;
    const double C3949 = C3941 - C3917;
    const double C3947 = C3939 - C3909;
    const double C4130 = C4124 - C4117;
    const double C4128 = C4122 - C4109;
    const double C4126 = C4120 - C4101;
    const double C4302 = C4296 - C4289;
    const double C4300 = C4294 - C4281;
    const double C4298 = C4292 - C4273;
    const double C6488 = C6484 - C6479;
    const double C6486 = C6482 - C6471;
    const double C6725 = C6719 - C6710;
    const double C6723 = C6717 - C6702;
    const double C6720 = C6714 - C6689;
    const double C7276 = C7274 - C7268;
    const double C7825 = C7823 - C7820;
    const double C18934 = C18932 - C18929;
    const double C19144 = C19142 - C19138;
    const double C19691 = C19689 - C19683;
    const double C20244 = C20241 - C20237;
    const double C22080 = C22078 - C22072;
    const double C22456 = C22454 - C22450;
    const double C8003 = C7994 - C7984;
    const double C7998 = C7989 - C7964;
    const double C7995 = C7986 - C7952;
    const double C8196 = C8190 - C8183;
    const double C8193 = C8187 - C8171;
    const double C8384 = C8378 - C8371;
    const double C8381 = C8375 - C8359;
    const double C10386 = C10377 - C10361;
    const double C10383 = C10374 - C10349;
    const double C10380 = C10371 - C10337;
    const double C10837 = C10831 - C10818;
    const double C10834 = C10828 - C10806;
    const double C11276 = C11272 - C11267;
    const double C12837 = C12834 - C12830;
    const double C8002 = C7993 - C7980;
    const double C7999 = C7990 - C7968;
    const double C7996 = C7987 - C7956;
    const double C8195 = C8189 - C8179;
    const double C8192 = C8186 - C8167;
    const double C8383 = C8377 - C8367;
    const double C8380 = C8374 - C8355;
    const double C10387 = C10378 - C10365;
    const double C10384 = C10375 - C10353;
    const double C10381 = C10372 - C10341;
    const double C10838 = C10832 - C10822;
    const double C10835 = C10829 - C10810;
    const double C11275 = C11271 - C11263;
    const double C12836 = C12833 - C12826;
    const double C1162 = C1153 + C1135;
    const double C1157 = C1148 + C1115;
    const double C1154 = C1145 + C1103;
    const double C1368 = C1362 + C1350;
    const double C1365 = C1359 + C1338;
    const double C1572 = C1566 + C1554;
    const double C1569 = C1563 + C1542;
    const double C16959 = C16950 + C16926;
    const double C16956 = C16947 + C16914;
    const double C16953 = C16944 + C16902;
    const double C17403 = C17397 + C17379;
    const double C17400 = C17394 + C17367;
    const double C17831 = C17828 + C17820;
    const double C32783 = C32780 + C32774;
    const double C1160 = C1151 + C1127;
    const double C1159 = C1150 + C1123;
    const double C1156 = C1147 + C1111;
    const double C1366 = C1360 + C1342;
    const double C1363 = C1357 + C1330;
    const double C1570 = C1564 + C1546;
    const double C1567 = C1561 + C1534;
    const double C16958 = C16949 + C16922;
    const double C16955 = C16946 + C16910;
    const double C17402 = C17396 + C17375;
    const double C17829 = C17826 + C17812;
    const double C3961 = C3953 + C3934;
    const double C3960 = C3952 + C3930;
    const double C3958 = C3950 + C3922;
    const double C3956 = C3948 + C3914;
    const double C4135 = C4129 + C4114;
    const double C4133 = C4127 + C4106;
    const double C4131 = C4125 + C4098;
    const double C4307 = C4301 + C4286;
    const double C4305 = C4299 + C4278;
    const double C4303 = C4297 + C4270;
    const double C6491 = C6487 + C6476;
    const double C6489 = C6485 + C6468;
    const double C6730 = C6724 + C6707;
    const double C6728 = C6722 + C6699;
    const double C6727 = C6721 + C6694;
    const double C7279 = C7277 + C7273;
    const double C7826 = C7824 + C7817;
    const double C19145 = C19143 + C19135;
    const double C19694 = C19692 + C19688;
    const double C20245 = C20243 + C20234;
    const double C22083 = C22081 + C22077;
    const double C22457 = C22455 + C22447;
    const double C8010 = C8001 + C7977;
    const double C8009 = C8000 + C7973;
    const double C8006 = C7997 + C7961;
    const double C8200 = C8194 + C8176;
    const double C8197 = C8191 + C8164;
    const double C8388 = C8382 + C8364;
    const double C8385 = C8379 + C8352;
    const double C10394 = C10385 + C10358;
    const double C10391 = C10382 + C10346;
    const double C10842 = C10836 + C10815;
    const double C11277 = C11274 + C11260;
    const double C11444 = C11436 + C11411;
    const double C11443 = C11435 + C11407;
    const double C14492 = C14488 + C14480;
    const double C22621 = C22613 + C22594;
    const double C22620 = C22612 + C22590;
    const double C22618 = C22610 + C22582;
    const double C22616 = C22608 + C22574;
    const double C22795 = C22789 + C22774;
    const double C22793 = C22787 + C22766;
    const double C22791 = C22785 + C22758;
    const double C22967 = C22961 + C22946;
    const double C22965 = C22959 + C22938;
    const double C22963 = C22957 + C22930;
    const double C25057 = C25053 + C25042;
    const double C25056 = C25052 + C25038;
    const double C25279 = C25275 + C25264;
    const double C25519 = C25513 + C25496;
    const double C25518 = C25512 + C25491;
    const double C25516 = C25510 + C25482;
    const double C26082 = C26078 + C26070;
    const double C26080 = C26076 + C26062;
    const double C26633 = C26631 + C26622;
    const double C28355 = C28353 + C28346;
    const double C43078 = C43076 + C43072;
    const double C43452 = C43450 + C43442;
    const double C23849 = C23841 + C23816;
    const double C23848 = C23840 + C23812;
    const double C41576 = C41572 + C41564;
    const double C26817 = C26808 + C26784;
    const double C26816 = C26807 + C26780;
    const double C26813 = C26804 + C26768;
    const double C27007 = C27001 + C26983;
    const double C27004 = C26998 + C26971;
    const double C27195 = C27189 + C27171;
    const double C27192 = C27186 + C27159;
    const double C30217 = C30211 + C30186;
    const double C30775 = C30772 + C30766;
    const double C31328 = C31325 + C31313;
    const double C47909 = C47906 + C47892;
    const double C26787 = C48018 * C273;
    const double C26785 = C48018 * C272;
    const double C26775 = C48018 * C275;
    const double C26773 = C48018 * C274;
    const double C26763 = C48018 * C277;
    const double C26761 = C48018 * C276;
    const double C26986 = C48018 * C612;
    const double C26984 = C48018 * C611;
    const double C26974 = C48018 * C614;
    const double C26972 = C48018 * C613;
    const double C27174 = C48018 * C714;
    const double C27172 = C48018 * C713;
    const double C27162 = C48018 * C716;
    const double C27160 = C48018 * C715;
    const double C29966 = C48018 * C1521;
    const double C29964 = C48018 * C1520;
    const double C30194 = C48018 * C2411;
    const double C30192 = C48018 * C2410;
    const double C30181 = C48018 * C712;
    const double C30179 = C48018 * C711;
    const double C30761 = C48018 * C1523;
    const double C30759 = C48018 * C1522;
    const double C31316 = C48018 * C2407;
    const double C31314 = C48018 * C2406;
    const double C47471 = C48018 * C2409;
    const double C47469 = C48018 * C2408;
    const double C47895 = C48018 * C3344;
    const double C47893 = C48018 * C3343;
    const double C9268 =
        (C48018 / C47958 + ((C47916 * C48066 + C26746) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48066 / C47958 + (0 * ae) / C47918) + C49275) * be) /
            C47918;
    const double C11387 =
        C48018 / C47958 - ((C47916 * C48066 + C26746) * be) / C47918;
    const double C23792 =
        C48018 / C47958 + ((C47916 * C48066 + C26746) * ae) / C47918;
    const double C48008 = C48004 * be;
    const double C11602 = C11598 + C11581;
    const double C24007 = C24003 + C23986;
    const double C11760 = C11756 + C11739;
    const double C12838 = C12835 + C12823;
    const double C24165 = C24161 + C24144;
    const double C29978 = C29975 + C29963;
    const double C32781 = C32778 + C32766;
    const double C10397 = C10388 + C10370;
    const double C16961 = C16952 + C16934;
    const double C18935 = C18933 + C18926;
    const double C25277 = C25273 + C25256;
    const double C30218 = C30212 + C30191;
    const double C14870 = C14863 - C14864;
    const double C41954 = C41947 - C41948;
    const double C10833 = C10824 - C10825;
    const double C15253 = C15237 - C15238;
    const double C17393 = C17384 - C17385;
    const double C42337 = C42321 - C42322;
    const double C47479 = C47473 - C47474;
    const double C48596 = C48594 + C48581;
    const double C48595 = C48593 + C48578;
    const double C48053 = C48050 - C48047;
    const double C48052 = C48049 / C47918;
    const double C22606 = C22595 - C22596;
    const double C22603 = C22583 - C22584;
    const double C22601 = C22575 - C22576;
    const double C22599 = C22567 - C22568;
    const double C22784 = C22775 - C22776;
    const double C22782 = C22767 - C22768;
    const double C22780 = C22759 - C22760;
    const double C22956 = C22947 - C22948;
    const double C22954 = C22939 - C22940;
    const double C22952 = C22931 - C22932;
    const double C25050 = C25043 - C25044;
    const double C25047 = C25031 - C25032;
    const double C25272 = C25265 - C25266;
    const double C25270 = C25257 - C25258;
    const double C25508 = C25497 - C25498;
    const double C25505 = C25484 - C25485;
    const double C25503 = C25475 - C25476;
    const double C26073 = C26063 - C26064;
    const double C26071 = C26055 - C26056;
    const double C26629 = C26623 - C26624;
    const double C28352 = C28347 - C28348;
    const double C43073 = C43065 - C43066;
    const double C43449 = C43443 - C43444;
    const double C1161 = C1152 + C1131;
    const double C1158 = C1149 + C1119;
    const double C1155 = C1146 + C1107;
    const double C1367 = C1361 + C1346;
    const double C1364 = C1358 + C1334;
    const double C1571 = C1565 + C1550;
    const double C1568 = C1562 + C1538;
    const double C16960 = C16951 + C16930;
    const double C16957 = C16948 + C16918;
    const double C16954 = C16945 + C16906;
    const double C17404 = C17398 + C17383;
    const double C17401 = C17395 + C17371;
    const double C17830 = C17827 + C17816;
    const double C32782 = C32779 + C32770;
    const double C3962 = C3954 + C3938;
    const double C3959 = C3951 + C3926;
    const double C3957 = C3949 + C3918;
    const double C3955 = C3947 + C3910;
    const double C4136 = C4130 + C4118;
    const double C4134 = C4128 + C4110;
    const double C4132 = C4126 + C4102;
    const double C4308 = C4302 + C4290;
    const double C4306 = C4300 + C4282;
    const double C4304 = C4298 + C4274;
    const double C6492 = C6488 + C6480;
    const double C6490 = C6486 + C6472;
    const double C6731 = C6725 + C6711;
    const double C6729 = C6723 + C6703;
    const double C6726 = C6720 + C6690;
    const double C7278 = C7276 + C7269;
    const double C7827 = C7825 + C7821;
    const double C18936 = C18934 + C18930;
    const double C19146 = C19144 + C19139;
    const double C19693 = C19691 + C19684;
    const double C20246 = C20244 + C20238;
    const double C22082 = C22080 + C22073;
    const double C22458 = C22456 + C22451;
    const double C8012 = C8003 + C7985;
    const double C8007 = C7998 + C7965;
    const double C8004 = C7995 + C7953;
    const double C8202 = C8196 + C8184;
    const double C8199 = C8193 + C8172;
    const double C8390 = C8384 + C8372;
    const double C8387 = C8381 + C8360;
    const double C10395 = C10386 + C10362;
    const double C10392 = C10383 + C10350;
    const double C10389 = C10380 + C10338;
    const double C10843 = C10837 + C10819;
    const double C10840 = C10834 + C10807;
    const double C11279 = C11276 + C11268;
    const double C12840 = C12837 + C12831;
    const double C8011 = C8002 + C7981;
    const double C8008 = C7999 + C7969;
    const double C8005 = C7996 + C7957;
    const double C8201 = C8195 + C8180;
    const double C8198 = C8192 + C8168;
    const double C8389 = C8383 + C8368;
    const double C8386 = C8380 + C8356;
    const double C10396 = C10387 + C10366;
    const double C10393 = C10384 + C10354;
    const double C10390 = C10381 + C10342;
    const double C10844 = C10838 + C10823;
    const double C10841 = C10835 + C10811;
    const double C11278 = C11275 + C11264;
    const double C12839 = C12836 + C12827;
    const double C11414 = C11387 * C614;
    const double C11412 = C11387 * C613;
    const double C11402 = C11387 * C612;
    const double C11400 = C11387 * C611;
    const double C11584 = C11387 * C1317;
    const double C11582 = C11387 * C1316;
    const double C11742 = C11387 * C1521;
    const double C11740 = C11387 * C1520;
    const double C14475 = C11387 * C1523;
    const double C14473 = C11387 * C1522;
    const double C14861 = C11387 * C1990;
    const double C14859 = C11387 * C1989;
    const double C15243 = C11387 * C2409;
    const double C15241 = C11387 * C2408;
    const double C23819 = C23792 * C614;
    const double C23817 = C23792 * C613;
    const double C23807 = C23792 * C612;
    const double C23805 = C23792 * C611;
    const double C23989 = C23792 * C1317;
    const double C23987 = C23792 * C1316;
    const double C24147 = C23792 * C1521;
    const double C24145 = C23792 * C1520;
    const double C41559 = C23792 * C1523;
    const double C41557 = C23792 * C1522;
    const double C41945 = C23792 * C1990;
    const double C41943 = C23792 * C1989;
    const double C42327 = C23792 * C2409;
    const double C42325 = C23792 * C2408;
    const double C48013 = C48008 / C47918;
    const double C14874 = C14870 - C14865;
    const double C41958 = C41954 - C41949;
    const double C10839 = C10833 - C10826;
    const double C15257 = C15253 - C15239;
    const double C17399 = C17393 - C17386;
    const double C42341 = C42337 - C42323;
    const double C47482 = C47479 - C47475;
    const double C9598 =
        (5 * (3 * C48358 + C48145 * C48470 + C48460 * ae) +
         C48145 * (4 * C48470 + C48145 * C48596 + C48584 * ae) +
         (4 * C48460 + C48145 * C48584) * ae) /
        C47918;
    const double C9684 =
        (C48289 * (4 * C48470 + C48145 * C48596 + C48584 * ae)) / C47918;
    const double C9917 =
        (3 * C48358 + C48145 * C48470 + C48460 * ae + C48596 * C48412) / C47918;
    const double C9599 =
        (5 * (3 * C48462 + ae * C48469 + be * C48470 + C48145 * C48586) +
         ae * (4 * C48469 + C48145 * C48595 + C48584 * be) +
         be * (4 * C48470 + C48145 * C48596 + C48584 * ae) +
         C48145 *
             (4 * C48586 + ae * C48595 + be * C48596 +
              C48145 *
                  (3 * C48576 + ae * C48589 + be * C48590 +
                   C48145 * (2 * C48566 + ae * C48577 + be * C48580 +
                             C48145 * (C48187 + ae * C48559 + be * C48562 +
                                       C48145 * (ae * C48267 + be * C48271 +
                                                 C48145 *
                                                     (C48181 * C48182 +
                                                      C48148 * bs[8] *
                                                          std::pow(C48143, 8)) *
                                                     C47917)))))) /
        C47926;
    const double C9685 =
        (4 * (2 * C48525 + ae * C48289 * C48463 + be * C48289 * C48464 +
              C48145 * C48613) +
         ae * C48289 * C48595 + be * C48289 * C48596 +
         C48145 *
             (3 * C48613 + ae * C48289 * C48589 + be * C48289 * C48590 +
              C48145 *
                  (2 * C48611 + ae * C48289 * C48577 + be * C48289 * C48580 +
                   C48145 *
                       (C48602 + ae * C48289 * C48559 + be * C48289 * C48562 +
                        C48145 * (ae * C48289 * C48267 + be * C48289 * C48271 +
                                  C48145 * C48289 *
                                      (C48181 * C48182 +
                                       C48148 * bs[8] * std::pow(C48143, 8)) *
                                      C47917))))) /
        C47926;
    const double C9597 =
        (5 * (3 * C48357 + C48145 * C48469 + C48460 * be) +
         C48145 * (4 * C48469 + C48145 * C48595 + C48584 * be) +
         (4 * C48460 + C48145 * C48584) * be) /
        C47918;
    const double C9683 =
        (C48289 * (4 * C48469 + C48145 * C48595 + C48584 * be)) / C47918;
    const double C9916 =
        (3 * C48357 + C48145 * C48469 + C48460 * be + C48595 * C48412) / C47918;
    const double C26786 = C48053 * C265;
    const double C26774 = C48053 * C266;
    const double C26762 = C48053 * C267;
    const double C26985 = C48053 * C605;
    const double C26973 = C48053 * C606;
    const double C27173 = C48053 * C707;
    const double C27161 = C48053 * C708;
    const double C29965 = C48053 * C1515;
    const double C30193 = C48053 * C2402;
    const double C30180 = C48053 * C706;
    const double C30760 = C48053 * C1516;
    const double C31315 = C48053 * C2400;
    const double C47470 = C48053 * C2401;
    const double C47894 = C48053 * C3340;
    const double C9269 =
        (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918) /
            C47958 -
        ((2 * (C48066 / C47958 + (0 * ae) / C47918) -
          C47942 / (C47918 * 4 * C48026)) *
         be) /
            C47918;
    const double C11388 =
        C48053 / C47958 - ((C48070 - C47942 / C48071) * be) / C47918;
    const double C23793 =
        C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918;
    const double C48055 = C48052 + C48032;
    const double C22614 = C22606 - C22597;
    const double C22611 = C22603 - C22585;
    const double C22609 = C22601 - C22577;
    const double C22607 = C22599 - C22569;
    const double C22790 = C22784 - C22777;
    const double C22788 = C22782 - C22769;
    const double C22786 = C22780 - C22761;
    const double C22962 = C22956 - C22949;
    const double C22960 = C22954 - C22941;
    const double C22958 = C22952 - C22933;
    const double C25054 = C25050 - C25045;
    const double C25051 = C25047 - C25033;
    const double C25276 = C25272 - C25267;
    const double C25274 = C25270 - C25259;
    const double C25514 = C25508 - C25499;
    const double C25511 = C25505 - C25486;
    const double C25509 = C25503 - C25477;
    const double C26077 = C26073 - C26065;
    const double C26075 = C26071 - C26057;
    const double C26632 = C26629 - C26625;
    const double C28354 = C28352 - C28349;
    const double C43075 = C43073 - C43067;
    const double C43451 = C43449 - C43445;
    const double C1163 = C1157 + C1158;
    const double C32979 = C1571 + C1572;
    const double C32978 = C1572 + C1571;
    const double C17808 = C16956 + C16957;
    const double C3964 = C3959 + C3960;
    const double C3963 = C3957 + C3958;
    const double C6713 = C4307 + C4308;
    const double C6695 = C4308 + C4307;
    const double C6270 = C4306 + C4305;
    const double C6712 = C4305 + C4306;
    const double C19140 = C6730 + C6731;
    const double C19131 = C6731 + C6730;
    const double C20229 = C7827 + C7826;
    const double C22443 = C20246 + C20245;
    const double C8013 = C8007 + C8008;
    const double C13036 = C8389 + C8390;
    const double C13035 = C8390 + C8389;
    const double C11256 = C10392 + C10393;
    const double C48017 = C48012 - C48013;
    const double C14878 = C14874 + C14866;
    const double C41962 = C41958 + C41950;
    const double C10845 = C10839 + C10827;
    const double C15261 = C15257 + C15240;
    const double C17405 = C17399 + C17387;
    const double C42345 = C42341 + C42324;
    const double C47485 = C47482 + C47476;
    const double C26800 = C26785 - C26786;
    const double C26797 = C26773 - C26774;
    const double C26794 = C26761 - C26762;
    const double C26996 = C26984 - C26985;
    const double C26993 = C26972 - C26973;
    const double C27184 = C27172 - C27173;
    const double C27181 = C27160 - C27161;
    const double C29973 = C29964 - C29965;
    const double C30206 = C30192 - C30193;
    const double C30202 = C30179 - C30180;
    const double C30768 = C30759 - C30760;
    const double C31323 = C31314 - C31315;
    const double C47478 = C47469 - C47470;
    const double C47903 = C47893 - C47894;
    const double C11413 = C11388 * C606;
    const double C11401 = C11388 * C605;
    const double C11583 = C11388 * C1311;
    const double C11741 = C11388 * C1515;
    const double C14474 = C11388 * C1516;
    const double C14860 = C11388 * C1986;
    const double C15242 = C11388 * C2401;
    const double C23818 = C23793 * C606;
    const double C23806 = C23793 * C605;
    const double C23988 = C23793 * C1311;
    const double C24146 = C23793 * C1515;
    const double C41558 = C23793 * C1516;
    const double C41944 = C23793 * C1986;
    const double C42326 = C23793 * C2401;
    const double C48057 = C48055 * be;
    const double C22622 = C22614 + C22598;
    const double C22619 = C22611 + C22586;
    const double C22617 = C22609 + C22578;
    const double C22615 = C22607 + C22570;
    const double C22796 = C22790 + C22778;
    const double C22794 = C22788 + C22770;
    const double C22792 = C22786 + C22762;
    const double C22968 = C22962 + C22950;
    const double C22966 = C22960 + C22942;
    const double C22964 = C22958 + C22934;
    const double C25058 = C25054 + C25046;
    const double C25055 = C25051 + C25034;
    const double C25280 = C25276 + C25268;
    const double C25278 = C25274 + C25260;
    const double C25520 = C25514 + C25500;
    const double C25517 = C25511 + C25487;
    const double C25515 = C25509 + C25478;
    const double C26081 = C26077 + C26066;
    const double C26079 = C26075 + C26058;
    const double C26634 = C26632 + C26626;
    const double C28356 = C28354 + C28350;
    const double C43077 = C43075 + C43068;
    const double C43453 = C43451 + C43446;
    const double C1164 = C1163 + C1159;
    const double C32981 = C1570 + C32979;
    const double C32980 = C32978 + C1570;
    const double C17821 = C17808 + C16958;
    const double C20230 = C19131 * C48948;
    const double C39587 = C19131 * C48948;
    const double C20239 = C20229 * C49245;
    const double C22442 = C20229 * C48938;
    const double C39586 = C20229 * C23786;
    const double C22452 = C22443 * C48938;
    const double C8014 = C8013 + C8009;
    const double C13038 = C8388 + C13036;
    const double C13037 = C13035 + C8388;
    const double C11269 = C11256 + C10394;
    const double C48021 = C48017 + C47996;
    const double C26809 = C26800 - C26787;
    const double C26806 = C26797 - C26775;
    const double C26803 = C26794 - C26763;
    const double C27002 = C26996 - C26986;
    const double C26999 = C26993 - C26974;
    const double C27190 = C27184 - C27174;
    const double C27187 = C27181 - C27162;
    const double C29976 = C29973 - C29966;
    const double C30213 = C30206 - C30194;
    const double C30210 = C30202 - C30181;
    const double C30771 = C30768 - C30761;
    const double C31326 = C31323 - C31316;
    const double C47481 = C47478 - C47471;
    const double C47907 = C47903 - C47895;
    const double C11429 = C11412 - C11413;
    const double C11426 = C11400 - C11401;
    const double C11595 = C11582 - C11583;
    const double C11753 = C11740 - C11741;
    const double C14483 = C14473 - C14474;
    const double C14869 = C14859 - C14860;
    const double C15254 = C15241 - C15242;
    const double C23834 = C23817 - C23818;
    const double C23831 = C23805 - C23806;
    const double C24000 = C23987 - C23988;
    const double C24158 = C24145 - C24146;
    const double C41567 = C41557 - C41558;
    const double C41953 = C41943 - C41944;
    const double C42338 = C42325 - C42326;
    const double C48058 = C48057 / C47918;
    const double C22624 = C22619 + C22620;
    const double C22623 = C22617 + C22618;
    const double C25502 = C22967 + C22968;
    const double C25483 = C22968 + C22967;
    const double C28148 = C22966 + C22965;
    const double C28551 = C22965 + C22966;
    const double C25501 = C25056 + C25055;
    const double C25492 = C25055 + C25056;
    const double C26617 = C25517 + C25518;
    const double C43438 = C26634 + C26633;
    const double C17825 = C17821 * C48938;
    const double C20242 = C20239 + C20230;
    const double C39588 = C39586 + C39587;
    const double C11273 = C11269 * C48938;
    const double C26791 = C48021 * C129;
    const double C26789 = C48021 * C128;
    const double C26771 = C48021 * C127;
    const double C26769 = C48021 * C126;
    const double C26759 = C48021 * C125;
    const double C26757 = C48021 * C124;
    const double C26990 = C48021 * C277;
    const double C26988 = C48021 * C276;
    const double C26978 = C48021 * C275;
    const double C26976 = C48021 * C274;
    const double C27178 = C48021 * C413;
    const double C27176 = C48021 * C412;
    const double C27166 = C48021 * C411;
    const double C27164 = C48021 * C410;
    const double C29970 = C48021 * C714;
    const double C29968 = C48021 * C713;
    const double C30198 = C48021 * C965;
    const double C30196 = C48021 * C964;
    const double C30177 = C48021 * C415;
    const double C30175 = C48021 * C414;
    const double C30757 = C48021 * C712;
    const double C30755 = C48021 * C711;
    const double C31320 = C48021 * C963;
    const double C31318 = C48021 * C962;
    const double C47467 = C48021 * C2407;
    const double C47465 = C48021 * C2406;
    const double C47899 = C48021 * C2891;
    const double C47897 = C48021 * C2890;
    const double C9262 =
        (((((0 - (C47916 * C47979) / C47918) * ae) / C47918 -
           (0 * be) / C47928 + (2 * C47980) / C47918) /
              C47958 -
          ((C47916 * C48015 + 0) * be) / C47918 + C47989 - C48003) /
             C47958 +
         ((C47916 * C48023 + 0) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48023 / C47958 +
                    ((C47916 * C48021 + C49094) * ae) / C47918 + C48018) +
          C49339) *
         be) /
            C47918 +
        C48021 / C47958 + ((C47916 * C48018 + C49101) * ae) / C47918 +
        2 * (C47996 / C47958 - (0 * be) / C47918);
    const double C9264 =
        (C48023 / C47958 + ((C47916 * C48021 + C49094) * ae) / C47918 +
         C48018) /
            C47958 -
        ((C47916 * (C48021 / C47958 +
                    ((C47916 * C48018 + C49101) * ae) / C47918 + 2 * C48066) +
          C49335) *
         be) /
            C47918 +
        2 * (C48018 / C47958 + ((C47916 * C48066 + C26746) * ae) / C47918);
    const double C9266 =
        (C48021 / C47958 + ((C47916 * C48018 + C49101) * ae) / C47918 +
         C48070) /
            C47958 -
        ((C47916 *
              (C48018 / C47958 + ((C47916 * C48066 + C26746) * ae) / C47918) +
          C49325) *
         be) /
            C47918 +
        3 * (C48066 / C47958 + (0 * ae) / C47918);
    const double C11383 =
        C48023 / C47958 - ((C47916 * C48021 + C49094) * be) / C47918 + C48018;
    const double C11385 =
        C48021 / C47958 - ((C47916 * C48018 + C49101) * be) / C47918 + C48070;
    const double C23788 =
        C48023 / C47958 + ((C47916 * C48021 + C49094) * ae) / C47918 + C48018;
    const double C23790 =
        C48021 / C47958 + ((C47916 * C48018 + C49101) * ae) / C47918 + C48070;
    const double C26818 = C26809 + C26788;
    const double C26815 = C26806 + C26776;
    const double C26812 = C26803 + C26764;
    const double C27008 = C27002 + C26987;
    const double C27005 = C26999 + C26975;
    const double C27196 = C27190 + C27175;
    const double C27193 = C27187 + C27163;
    const double C29979 = C29976 + C29967;
    const double C30219 = C30213 + C30195;
    const double C30216 = C30210 + C30182;
    const double C30774 = C30771 + C30762;
    const double C31329 = C31326 + C31317;
    const double C47484 = C47481 + C47472;
    const double C47910 = C47907 + C47896;
    const double C11437 = C11429 - C11414;
    const double C11434 = C11426 - C11402;
    const double C11599 = C11595 - C11584;
    const double C11757 = C11753 - C11742;
    const double C14487 = C14483 - C14475;
    const double C14873 = C14869 - C14861;
    const double C15258 = C15254 - C15243;
    const double C23842 = C23834 - C23819;
    const double C23839 = C23831 - C23807;
    const double C24004 = C24000 - C23989;
    const double C24162 = C24158 - C24147;
    const double C41571 = C41567 - C41559;
    const double C41957 = C41953 - C41945;
    const double C42342 = C42338 - C42327;
    const double C48059 = C48042 - C48058;
    const double C26618 = C25492 * C48948;
    const double C46659 = C25492 * C48948;
    const double C26627 = C26617 * C23786;
    const double C43437 = C26617 * C48938;
    const double C46658 = C26617 * C49245;
    const double C43447 = C43438 * C48938;
    const double C11422 = C11383 * C127;
    const double C11420 = C11383 * C126;
    const double C11394 = C11383 * C125;
    const double C11392 = C11383 * C124;
    const double C11592 = C11383 * C277;
    const double C11590 = C11383 * C276;
    const double C11750 = C11383 * C413;
    const double C11748 = C11383 * C412;
    const double C14467 = C11383 * C415;
    const double C14465 = C11383 * C414;
    const double C14853 = C11383 * C712;
    const double C14851 = C11383 * C711;
    const double C15251 = C11383 * C963;
    const double C15249 = C11383 * C962;
    const double C11418 = C11385 * C275;
    const double C11416 = C11385 * C274;
    const double C11398 = C11385 * C277;
    const double C11396 = C11385 * C276;
    const double C11588 = C11385 * C612;
    const double C11586 = C11385 * C611;
    const double C11746 = C11385 * C714;
    const double C11744 = C11385 * C713;
    const double C14471 = C11385 * C712;
    const double C14469 = C11385 * C711;
    const double C14857 = C11385 * C1523;
    const double C14855 = C11385 * C1522;
    const double C15247 = C11385 * C2407;
    const double C15245 = C11385 * C2406;
    const double C23827 = C23788 * C127;
    const double C23825 = C23788 * C126;
    const double C23799 = C23788 * C125;
    const double C23797 = C23788 * C124;
    const double C23997 = C23788 * C277;
    const double C23995 = C23788 * C276;
    const double C24155 = C23788 * C413;
    const double C24153 = C23788 * C412;
    const double C41551 = C23788 * C415;
    const double C41549 = C23788 * C414;
    const double C41937 = C23788 * C712;
    const double C41935 = C23788 * C711;
    const double C42335 = C23788 * C963;
    const double C42333 = C23788 * C962;
    const double C23823 = C23790 * C275;
    const double C23821 = C23790 * C274;
    const double C23803 = C23790 * C277;
    const double C23801 = C23790 * C276;
    const double C23993 = C23790 * C612;
    const double C23991 = C23790 * C611;
    const double C24151 = C23790 * C714;
    const double C24149 = C23790 * C713;
    const double C41555 = C23790 * C712;
    const double C41553 = C23790 * C711;
    const double C41941 = C23790 * C1523;
    const double C41939 = C23790 * C1522;
    const double C42331 = C23790 * C2407;
    const double C42329 = C23790 * C2406;
    const double C11445 = C11437 + C11415;
    const double C11442 = C11434 + C11403;
    const double C11603 = C11599 + C11585;
    const double C11761 = C11757 + C11743;
    const double C14491 = C14487 + C14476;
    const double C14877 = C14873 + C14862;
    const double C15262 = C15258 + C15244;
    const double C23850 = C23842 + C23820;
    const double C23847 = C23839 + C23808;
    const double C24008 = C24004 + C23990;
    const double C24166 = C24162 + C24148;
    const double C41575 = C41571 + C41560;
    const double C41961 = C41957 + C41946;
    const double C42346 = C42342 + C42328;
    const double C48060 = C48059 - C48033;
    const double C26630 = C26627 + C26618;
    const double C46660 = C46658 + C46659;
    const double C26790 = C48060 * C118;
    const double C26770 = C48060 * C117;
    const double C26758 = C48060 * C116;
    const double C26989 = C48060 * C267;
    const double C26977 = C48060 * C266;
    const double C27177 = C48060 * C403;
    const double C27165 = C48060 * C402;
    const double C29969 = C48060 * C707;
    const double C30197 = C48060 * C958;
    const double C30176 = C48060 * C404;
    const double C30756 = C48060 * C706;
    const double C31319 = C48060 * C957;
    const double C47466 = C48060 * C2400;
    const double C47898 = C48060 * C2884;
    const double C9263 =
        (((ae * -2 * C47979) / C48026 -
          (((C47916 * C48036) / C47926 + 2 * C48015) * be) / C47918 -
          C48037 / C47926) /
             C47958 +
         ((C47916 * C48056 + 2 * C48023) * ae) / C47918) /
            C47958 -
        ((C47916 * (C48056 / C47958 +
                    ((C47916 * C48060 + 2 * C48021) * ae) / C47918 + C48053) +
          2 * (C48023 / C47958 + ((C47916 * C48021 + C49094) * ae) / C47918 +
               C48018)) *
         be) /
            C47918 +
        C48060 / C47958 + ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
        (-2 * C47937) / (C47918 * 4 * C47926);
    const double C9265 =
        (C48056 / C47958 + ((C47916 * C48060 + 2 * C48021) * ae) / C47918 +
         C48053) /
            C47958 -
        ((C47916 * (C48060 / C47958 +
                    ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
                    (-2 * C47937) / C48071) +
          2 * (C48021 / C47958 + ((C47916 * C48018 + C49101) * ae) / C47918 +
               C48070)) *
         be) /
            C47918 +
        2 * (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918);
    const double C9267 =
        (C48060 / C47958 + ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
         (-2 * C47937) / C48071) /
            C47958 -
        ((C47916 *
              (C48053 / C47958 + ((C48070 - C47942 / C48071) * ae) / C47918) +
          2 * (C48018 / C47958 + ((C47916 * C48066 + C26746) * ae) / C47918)) *
         be) /
            C47918 +
        (-3 * C47937) / (C47918 * 4 * C48026);
    const double C11384 = C48056 / C47958 -
                          ((C47916 * C48060 + 2 * C48021) * be) / C47918 +
                          C48053;
    const double C11386 = C48060 / C47958 -
                          ((C47916 * C48053 + 2 * C48018) * be) / C47918 +
                          (-2 * C47937) / C48071;
    const double C23789 = C48056 / C47958 +
                          ((C47916 * C48060 + 2 * C48021) * ae) / C47918 +
                          C48053;
    const double C23791 = C48060 / C47958 +
                          ((C47916 * C48053 + 2 * C48018) * ae) / C47918 +
                          (-2 * C47937) / C48071;
    const double C26801 = C26789 - C26790;
    const double C26796 = C26769 - C26770;
    const double C26793 = C26757 - C26758;
    const double C26997 = C26988 - C26989;
    const double C26994 = C26976 - C26977;
    const double C27185 = C27176 - C27177;
    const double C27182 = C27164 - C27165;
    const double C29974 = C29968 - C29969;
    const double C30207 = C30196 - C30197;
    const double C30201 = C30175 - C30176;
    const double C30767 = C30755 - C30756;
    const double C31324 = C31318 - C31319;
    const double C47477 = C47465 - C47466;
    const double C47904 = C47897 - C47898;
    const double C11421 = C11384 * C117;
    const double C11393 = C11384 * C116;
    const double C11591 = C11384 * C267;
    const double C11749 = C11384 * C403;
    const double C14466 = C11384 * C404;
    const double C14852 = C11384 * C706;
    const double C15250 = C11384 * C957;
    const double C11417 = C11386 * C266;
    const double C11397 = C11386 * C267;
    const double C11587 = C11386 * C605;
    const double C11745 = C11386 * C707;
    const double C14470 = C11386 * C706;
    const double C14856 = C11386 * C1516;
    const double C15246 = C11386 * C2400;
    const double C23826 = C23789 * C117;
    const double C23798 = C23789 * C116;
    const double C23996 = C23789 * C267;
    const double C24154 = C23789 * C403;
    const double C41550 = C23789 * C404;
    const double C41936 = C23789 * C706;
    const double C42334 = C23789 * C957;
    const double C23822 = C23791 * C266;
    const double C23802 = C23791 * C267;
    const double C23992 = C23791 * C605;
    const double C24150 = C23791 * C707;
    const double C41554 = C23791 * C706;
    const double C41940 = C23791 * C1516;
    const double C42330 = C23791 * C2400;
    const double C26810 = C26801 - C26791;
    const double C26805 = C26796 - C26771;
    const double C26802 = C26793 - C26759;
    const double C27003 = C26997 - C26990;
    const double C27000 = C26994 - C26978;
    const double C27191 = C27185 - C27178;
    const double C27188 = C27182 - C27166;
    const double C29977 = C29974 - C29970;
    const double C30214 = C30207 - C30198;
    const double C30209 = C30201 - C30177;
    const double C30770 = C30767 - C30757;
    const double C31327 = C31324 - C31320;
    const double C47480 = C47477 - C47467;
    const double C47908 = C47904 - C47899;
    const double C11431 = C11420 - C11421;
    const double C11424 = C11392 - C11393;
    const double C11597 = C11590 - C11591;
    const double C11755 = C11748 - C11749;
    const double C14481 = C14465 - C14466;
    const double C14867 = C14851 - C14852;
    const double C15256 = C15249 - C15250;
    const double C11430 = C11416 - C11417;
    const double C11425 = C11396 - C11397;
    const double C11596 = C11586 - C11587;
    const double C11754 = C11744 - C11745;
    const double C14482 = C14469 - C14470;
    const double C14868 = C14855 - C14856;
    const double C15255 = C15245 - C15246;
    const double C23836 = C23825 - C23826;
    const double C23829 = C23797 - C23798;
    const double C24002 = C23995 - C23996;
    const double C24160 = C24153 - C24154;
    const double C41565 = C41549 - C41550;
    const double C41951 = C41935 - C41936;
    const double C42340 = C42333 - C42334;
    const double C23835 = C23821 - C23822;
    const double C23830 = C23801 - C23802;
    const double C24001 = C23991 - C23992;
    const double C24159 = C24149 - C24150;
    const double C41566 = C41553 - C41554;
    const double C41952 = C41939 - C41940;
    const double C42339 = C42329 - C42330;
    const double C26819 = C26810 + C26792;
    const double C26814 = C26805 + C26772;
    const double C26811 = C26802 + C26760;
    const double C27009 = C27003 + C26991;
    const double C27006 = C27000 + C26979;
    const double C27197 = C27191 + C27179;
    const double C27194 = C27188 + C27167;
    const double C29980 = C29977 + C29971;
    const double C30220 = C30214 + C30199;
    const double C30215 = C30209 + C30178;
    const double C30773 = C30770 + C30758;
    const double C31330 = C31327 + C31321;
    const double C47483 = C47480 + C47468;
    const double C47911 = C47908 + C47900;
    const double C11439 = C11431 - C11422;
    const double C11432 = C11424 - C11394;
    const double C11601 = C11597 - C11592;
    const double C11759 = C11755 - C11750;
    const double C14485 = C14481 - C14467;
    const double C14871 = C14867 - C14853;
    const double C15260 = C15256 - C15251;
    const double C11438 = C11430 - C11418;
    const double C11433 = C11425 - C11398;
    const double C11600 = C11596 - C11588;
    const double C11758 = C11754 - C11746;
    const double C14486 = C14482 - C14471;
    const double C14872 = C14868 - C14857;
    const double C15259 = C15255 - C15247;
    const double C23844 = C23836 - C23827;
    const double C23837 = C23829 - C23799;
    const double C24006 = C24002 - C23997;
    const double C24164 = C24160 - C24155;
    const double C41569 = C41565 - C41551;
    const double C41955 = C41951 - C41937;
    const double C42344 = C42340 - C42335;
    const double C23843 = C23835 - C23823;
    const double C23838 = C23830 - C23803;
    const double C24005 = C24001 - C23993;
    const double C24163 = C24159 - C24151;
    const double C41570 = C41566 - C41555;
    const double C41956 = C41952 - C41941;
    const double C42343 = C42339 - C42331;
    const double C26820 = C26814 + C26815;
    const double C30200 = C27196 + C27197;
    const double C30187 = C27197 + C27196;
    const double C47888 = C31330 + C31329;
    const double C11447 = C11439 + C11423;
    const double C11440 = C11432 + C11395;
    const double C11605 = C11601 + C11593;
    const double C11763 = C11759 + C11751;
    const double C14489 = C14485 + C14468;
    const double C14875 = C14871 + C14854;
    const double C15264 = C15260 + C15252;
    const double C11446 = C11438 + C11419;
    const double C11441 = C11433 + C11399;
    const double C11604 = C11600 + C11589;
    const double C11762 = C11758 + C11747;
    const double C14490 = C14486 + C14472;
    const double C14876 = C14872 + C14858;
    const double C15263 = C15259 + C15248;
    const double C23852 = C23844 + C23828;
    const double C23845 = C23837 + C23800;
    const double C24010 = C24006 + C23998;
    const double C24168 = C24164 + C24156;
    const double C41573 = C41569 + C41552;
    const double C41959 = C41955 + C41938;
    const double C42348 = C42344 + C42336;
    const double C23851 = C23843 + C23824;
    const double C23846 = C23838 + C23804;
    const double C24009 = C24005 + C23994;
    const double C24167 = C24163 + C24152;
    const double C41574 = C41570 + C41556;
    const double C41960 = C41956 + C41942;
    const double C42347 = C42343 + C42332;
    const double C26821 = C26820 + C26816;
    const double C30208 = C27195 + C30200;
    const double C30204 = C30187 + C27195;
    const double C47901 = C47888 + C31328;
    const double C47905 = C47901 * C48938;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48943 +
           (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
              C49053 * C49024 * C49007 * C110 -
          ((C26817 + C26818 + C26819) * C26749 +
           (C26816 + C26815 + C26814) * C48951 +
           (C26813 + C26812 + C26811) * C48943) *
              C49053 * C49024 * C49007 * C111 +
          (C26821 * C48943 + (C26819 + C26818 + C26817) * C48951 +
           (C48021 * C130 - C48060 * C119 - C48021 * C131 + C49094 * C140 +
            C48018 * C270 - C48053 * C264 - C48018 * C271 + C49101 * C282 +
            C48066 * C617 - C26755 * C608 - C48066 * C618 + C26746 * C623) *
               C26749) *
              C49053 * C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C49024 * C260 -
           ((C27004 + C27005 + C27006) * C26749 +
            (C27007 + C27008 + C27009) * C48951 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48943) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C27009 + C27008 + C27007) * C48943 +
            (C27006 + C27005 + C27004) * C48951 +
            (C48021 * C272 - C48060 * C265 - C48021 * C273 + C49094 * C283 +
             C48018 * C615 - C48053 * C607 - C48018 * C616 + C49101 * C622 +
             C48066 * C1320 - C26755 * C1313 - C48066 * C1321 +
             C26746 * C1325) *
                C26749) *
               C49053 * C49024 * C49295 -
           ((C26817 + C26818 + C26819) * C26749 +
            (C26816 + C26815 + C26814) * C48951 +
            (C26813 + C26812 + C26811) * C48943) *
               C49053 * C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C398 -
           ((C27192 + C27193 + C27194) * C26749 +
            (C27195 + C27196 + C27197) * C48951 +
            (C48066 * C1522 - C26755 * C1516 - C48066 * C1523 + C26746 * C1528 +
             C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
             C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422) *
                C48943) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C27197 + C27196 + C27195) * C48943 +
            (C27194 + C27193 + C27192) * C48951 +
            (C48021 * C408 - C48060 * C401 - C48021 * C409 + C49094 * C419 +
             C48018 * C717 - C48053 * C709 - C48018 * C718 + C49101 * C724 +
             C48066 * C1524 - C26755 * C1517 - C48066 * C1525 +
             C26746 * C1529) *
                C26749) *
               C49053 * C49297 -
           ((C26817 + C26818 + C26819) * C26749 +
            (C26816 + C26815 + C26814) * C48951 +
            (C26813 + C26812 + C26811) * C48943) *
               C49053 * C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C49024 * C534 -
           ((C27004 + C27005 + C27006) * C26749 +
            (C27007 + C27008 + C27009) * C48951 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48943) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C27009 + C27008 + C27007) * C48943 +
            (C27006 + C27005 + C27004) * C48951 +
            (C48021 * C272 - C48060 * C265 - C48021 * C273 + C49094 * C283 +
             C48018 * C615 - C48053 * C607 - C48018 * C616 + C49101 * C622 +
             C48066 * C1320 - C26755 * C1313 - C48066 * C1321 +
             C26746 * C1325) *
                C26749) *
               C49053 * C49024 * C49295 -
           ((C26817 + C26818 + C26819) * C26749 +
            (C26816 + C26815 + C26814) * C48951 +
            (C26813 + C26812 + C26811) * C48943) *
               C49053 * C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48943 +
           (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
              C49053 * C49024 * C600 -
          ((C27004 + C27005 + C27006) * C26749 +
           (C27007 + C27008 + C27009) * C48951 +
           (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
            C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
            C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
               C48943) *
              C49053 * C49024 * C601 +
          ((C48021 * C609 - C48060 * C604 - C48021 * C610 + C49094 * C619 +
            C48018 * C1318 - C48053 * C1312 - C48018 * C1319 + C49101 * C1324 +
            C48066 * C1831 - C26755 * C1828 - C48066 * C1832 + C26746 * C1837) *
               C48943 +
           (C48021 * C611 - C48060 * C605 - C48021 * C612 + C49094 * C620 +
            C48018 * C1316 - C48053 * C1311 - C48018 * C1317 + C49101 * C1323 +
            C48066 * C1833 - C26755 * C1829 - C48066 * C1834 + C26746 * C1838) *
               C48951 +
           (C48021 * C613 - C48060 * C606 - C48021 * C614 + C49094 * C621 +
            C48018 * C1314 - C48053 * C1310 - C48018 * C1315 + C49101 * C1322 +
            C48066 * C1835 - C26755 * C1830 - C48066 * C1836 + C26746 * C1839) *
               C26749) *
              C49053 * C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C398 -
           ((C27192 + C27193 + C27194) * C26749 +
            (C27195 + C27196 + C27197) * C48951 +
            (C48066 * C1522 - C26755 * C1516 - C48066 * C1523 + C26746 * C1528 +
             C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
             C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422) *
                C48943) *
               C49053 * C49297) *
              C534 +
          (((C48021 * C711 - C48060 * C706 - C48021 * C712 + C49094 * C721 +
             C48018 * C1522 - C48053 * C1516 - C48018 * C1523 + C49101 * C1528 +
             C48066 * C1989 - C26755 * C1986 - C48066 * C1990 +
             C26746 * C1995) *
                C48943 +
            (C48021 * C713 - C48060 * C707 - C48021 * C714 + C49094 * C722 +
             C48018 * C1520 - C48053 * C1515 - C48018 * C1521 + C49101 * C1527 +
             C48066 * C1991 - C26755 * C1987 - C48066 * C1992 +
             C26746 * C1996) *
                C48951 +
            (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
             C48018 * C1518 - C48053 * C1514 - C48018 * C1519 + C49101 * C1526 +
             C48066 * C1993 - C26755 * C1988 - C48066 * C1994 +
             C26746 * C1997) *
                C26749) *
               C49053 * C49297 -
           ((C27004 + C27005 + C27006) * C26749 +
            (C27007 + C27008 + C27009) * C48951 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48943) *
               C49053 * C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C808 -
           ((C27192 + C27193 + C27194) * C26749 +
            (C27195 + C27196 + C27197) * C48951 +
            (C48066 * C1522 - C26755 * C1516 - C48066 * C1523 + C26746 * C1528 +
             C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
             C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422) *
                C48943) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C27197 + C27196 + C27195) * C48943 +
            (C27194 + C27193 + C27192) * C48951 +
            (C48021 * C408 - C48060 * C401 - C48021 * C409 + C49094 * C419 +
             C48018 * C717 - C48053 * C709 - C48018 * C718 + C49101 * C724 +
             C48066 * C1524 - C26755 * C1517 - C48066 * C1525 +
             C26746 * C1529) *
                C26749) *
               C49053 * C49297 -
           ((C26817 + C26818 + C26819) * C26749 +
            (C26816 + C26815 + C26814) * C48951 +
            (C26813 + C26812 + C26811) * C48943) *
               C49053 * C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48943 +
            (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
               C49053 * C808 -
           ((C27192 + C27193 + C27194) * C26749 +
            (C27195 + C27196 + C27197) * C48951 +
            (C48066 * C1522 - C26755 * C1516 - C48066 * C1523 + C26746 * C1528 +
             C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
             C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422) *
                C48943) *
               C49053 * C49297) *
              C260 +
          (((C48021 * C711 - C48060 * C706 - C48021 * C712 + C49094 * C721 +
             C48018 * C1522 - C48053 * C1516 - C48018 * C1523 + C49101 * C1528 +
             C48066 * C1989 - C26755 * C1986 - C48066 * C1990 +
             C26746 * C1995) *
                C48943 +
            (C48021 * C713 - C48060 * C707 - C48021 * C714 + C49094 * C722 +
             C48018 * C1520 - C48053 * C1515 - C48018 * C1521 + C49101 * C1527 +
             C48066 * C1991 - C26755 * C1987 - C48066 * C1992 +
             C26746 * C1996) *
                C48951 +
            (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
             C48018 * C1518 - C48053 * C1514 - C48018 * C1519 + C49101 * C1526 +
             C48066 * C1993 - C26755 * C1988 - C48066 * C1994 +
             C26746 * C1997) *
                C26749) *
               C49053 * C49297 -
           ((C27004 + C27005 + C27006) * C26749 +
            (C27007 + C27008 + C27009) * C48951 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48943) *
               C49053 * C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48943 +
           (C26811 + C26812 + C26813) * C48951 + C26821 * C26749) *
              C49053 * C954 -
          ((C27192 + C27193 + C27194) * C26749 +
           (C27195 + C27196 + C27197) * C48951 +
           (C48066 * C1522 - C26755 * C1516 - C48066 * C1523 + C26746 * C1528 +
            C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
            C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422) *
               C48943) *
              C49053 * C955 +
          ((C48021 * C962 - C48060 * C957 - C48021 * C963 + C49094 * C972 +
            C48018 * C2406 - C48053 * C2400 - C48018 * C2407 + C49101 * C2418 +
            C48066 * C2408 - C26755 * C2401 - C48066 * C2409 + C26746 * C2419) *
               C48943 +
           (C48021 * C964 - C48060 * C958 - C48021 * C965 + C49094 * C973 +
            C48018 * C2410 - C48053 * C2402 - C48018 * C2411 + C49101 * C2420 +
            C48066 * C2412 - C26755 * C2403 - C48066 * C2413 + C26746 * C2421) *
               C48951 +
           (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
            C48018 * C2414 - C48053 * C2404 - C48018 * C2415 + C49101 * C2422 +
            C48066 * C2416 - C26755 * C2405 - C48066 * C2417 + C26746 * C2423) *
               C26749) *
              C49053 * C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C23786 +
            (C26811 + C26812 + C26813) * C48948) *
               C49268 +
           ((C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422 +
             C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
             C48066 * C1522 - C26755 * C1516 - C48066 * C1523 +
             C26746 * C1528) *
                C23786 +
            (C27197 + C27196 + C27195) * C48948) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C27192 + C27193 + C27194) * C48948 +
            (C27195 + C27196 + C27197) * C23786) *
               C49140 +
           ((C26816 + C26815 + C26814) * C48948 +
            (C26813 + C26812 + C26811) * C23786) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C26821 * C23786 + (C26819 + C26818 + C26817) * C48948) * C49268 +
           ((C27194 + C27193 + C27192) * C23786 +
            (C48021 * C408 - C48060 * C401 - C48021 * C409 + C49094 * C419 +
             C48018 * C717 - C48053 * C709 - C48018 * C718 + C49101 * C724 +
             C48066 * C1524 - C26755 * C1517 - C48066 * C1525 +
             C26746 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C48021 * C414 - C48060 * C404 - C48021 * C415 + C49094 * C422 +
              C48018 * C711 - C48053 * C706 - C48018 * C712 + C49101 * C721 +
              C48066 * C1522 - C26755 * C1516 - C48066 * C1523 +
              C26746 * C1528) *
                 C23786 +
             (C27197 + C27196 + C27195) * C48948) *
                C49140) *
               C49024 * C260 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C48066 * C1989 - C26755 * C1986 - C48066 * C1990 +
              C26746 * C1995 + C48018 * C1522 - C48053 * C1516 -
              C48018 * C1523 + C49101 * C1528 + C48021 * C711 - C48060 * C706 -
              C48021 * C712 + C49094 * C721) *
                 C23786) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C23786) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C27009 + C27008 + C27007) * C23786 +
             (C27006 + C27005 + C27004) * C48948) *
                C49268 +
            ((C29980 + C29979 + C29978) * C23786 +
             (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
              C48018 * C1518 - C48053 * C1514 - C48018 * C1519 +
              C49101 * C1526 + C48066 * C1993 - C26755 * C1988 -
              C48066 * C1994 + C26746 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C27192 + C27193 + C27194) * C48948 +
             (C27195 + C27196 + C27197) * C23786) *
                C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C23786) *
                C49268) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
               C398 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C48066 * C2408 - C26755 * C2401 - C48066 * C2409 +
              C26746 * C2419 + C48018 * C2406 - C48053 * C2400 -
              C48018 * C2407 + C49101 * C2418 + C48021 * C962 - C48060 * C957 -
              C48021 * C963 + C49094 * C972) *
                 C23786) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C23786) * C49268) *
               C49297) *
              C49007 * C262 +
          (((C30204 * C23786 + (C27194 + C27193 + C27192) * C48948) * C49268 +
            ((C30220 + C30219 + C30218) * C23786 +
             (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
              C48018 * C2414 - C48053 * C2404 - C48018 * C2415 +
              C49101 * C2422 + C48066 * C2416 - C26755 * C2405 -
              C48066 * C2417 + C26746 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C23786) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C23786) *
                C49268) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
               C49024 * C534 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C48066 * C1989 - C26755 * C1986 - C48066 * C1990 +
              C26746 * C1995 + C48018 * C1522 - C48053 * C1516 -
              C48018 * C1523 + C49101 * C1528 + C48021 * C711 - C48060 * C706 -
              C48021 * C712 + C49094 * C721) *
                 C23786) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C23786) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C27009 + C27008 + C27007) * C23786 +
             (C27006 + C27005 + C27004) * C48948) *
                C49268 +
            ((C29980 + C29979 + C29978) * C23786 +
             (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
              C48018 * C1518 - C48053 * C1514 - C48018 * C1519 +
              C49101 * C1526 + C48066 * C1993 - C26755 * C1988 -
              C48066 * C1994 + C26746 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C23786) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C23786) *
                C49268) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C23786 +
            (C26811 + C26812 + C26813) * C48948) *
               C49268 +
           ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
              C49024 * C600 -
          (((C29978 + C29979 + C29980) * C48948 +
            (C48066 * C1989 - C26755 * C1986 - C48066 * C1990 + C26746 * C1995 +
             C48018 * C1522 - C48053 * C1516 - C48018 * C1523 + C49101 * C1528 +
             C48021 * C711 - C48060 * C706 - C48021 * C712 + C49094 * C721) *
                C23786) *
               C49140 +
           ((C27007 + C27008 + C27009) * C48948 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C23786) *
               C49268) *
              C49024 * C601 +
          (((C48021 * C609 - C48060 * C604 - C48021 * C610 + C49094 * C619 +
             C48018 * C1318 - C48053 * C1312 - C48018 * C1319 + C49101 * C1324 +
             C48066 * C1831 - C26755 * C1828 - C48066 * C1832 +
             C26746 * C1837) *
                C23786 +
            (C48021 * C611 - C48060 * C605 - C48021 * C612 + C49094 * C620 +
             C48018 * C1316 - C48053 * C1311 - C48018 * C1317 + C49101 * C1323 +
             C48066 * C1833 - C26755 * C1829 - C48066 * C1834 +
             C26746 * C1838) *
                C48948) *
               C49268 +
           ((C48021 * C1522 - C48060 * C1516 - C48021 * C1523 + C49094 * C1528 +
             C48018 * C1989 - C48053 * C1986 - C48018 * C1990 + C49101 * C1995 +
             C48066 * C9446 - C26755 * C9444 - C48066 * C9447 +
             C26746 * C9450) *
                C23786 +
            (C48021 * C1520 - C48060 * C1515 - C48021 * C1521 + C49094 * C1527 +
             C48018 * C1991 - C48053 * C1987 - C48018 * C1992 + C49101 * C1996 +
             C48066 * C9448 - C26755 * C9445 - C48066 * C9449 +
             C26746 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
               C398 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C48066 * C2408 - C26755 * C2401 - C48066 * C2409 +
              C26746 * C2419 + C48018 * C2406 - C48053 * C2400 -
              C48018 * C2407 + C49101 * C2418 + C48021 * C962 - C48060 * C957 -
              C48021 * C963 + C49094 * C972) *
                 C23786) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C23786) * C49268) *
               C49297) *
              C534 +
          ((((C30773 + C30774 + C30775) * C23786 +
             (C29980 + C29979 + C29978) * C48948) *
                C49268 +
            ((C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
              C49094 * C2418 + C48018 * C2408 - C48053 * C2401 -
              C48018 * C2409 + C49101 * C2419 + C48066 * C9914 -
              C26755 * C9912 - C48066 * C9915 + C26746 * C9918) *
                 C23786 +
             (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 +
              C49094 * C2420 + C48018 * C2412 - C48053 * C2403 -
              C48018 * C2413 + C49101 * C2421 + C48066 * C10177 -
              C26755 * C10176 - C48066 * C10178 + C26746 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C23786) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C23786) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
               C808 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C48066 * C2408 - C26755 * C2401 - C48066 * C2409 +
              C26746 * C2419 + C48018 * C2406 - C48053 * C2400 -
              C48018 * C2407 + C49101 * C2418 + C48021 * C962 - C48060 * C957 -
              C48021 * C963 + C49094 * C972) *
                 C23786) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C23786) * C49268) *
               C49297) *
              C49007 * C536 +
          (((C30204 * C23786 + (C27194 + C27193 + C27192) * C48948) * C49268 +
            ((C30220 + C30219 + C30218) * C23786 +
             (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
              C48018 * C2414 - C48053 * C2404 - C48018 * C2415 +
              C49101 * C2422 + C48066 * C2416 - C26755 * C2405 -
              C48066 * C2417 + C26746 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C23786) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C23786) *
                C49268) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C23786 +
             (C26811 + C26812 + C26813) * C48948) *
                C49268 +
            ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
               C808 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C48066 * C2408 - C26755 * C2401 - C48066 * C2409 +
              C26746 * C2419 + C48018 * C2406 - C48053 * C2400 -
              C48018 * C2407 + C49101 * C2418 + C48021 * C962 - C48060 * C957 -
              C48021 * C963 + C49094 * C972) *
                 C23786) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C23786) * C49268) *
               C49297) *
              C260 +
          ((((C30773 + C30774 + C30775) * C23786 +
             (C29980 + C29979 + C29978) * C48948) *
                C49268 +
            ((C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
              C49094 * C2418 + C48018 * C2408 - C48053 * C2401 -
              C48018 * C2409 + C49101 * C2419 + C48066 * C9914 -
              C26755 * C9912 - C48066 * C9915 + C26746 * C9918) *
                 C23786 +
             (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 +
              C49094 * C2420 + C48018 * C2412 - C48053 * C2403 -
              C48018 * C2413 + C49101 * C2421 + C48066 * C10177 -
              C26755 * C10176 - C48066 * C10178 + C26746 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C23786) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C23786) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C23786 +
            (C26811 + C26812 + C26813) * C48948) *
               C49268 +
           ((C30215 + C30216 + C30217) * C23786 + C30204 * C48948) * C49140) *
              C954 -
          (((C30218 + C30219 + C30220) * C48948 +
            (C31328 + C31329 + C31330) * C23786) *
               C49140 +
           (C30208 * C48948 + (C30217 + C30216 + C30215) * C23786) * C49268) *
              C955 +
          (((C31330 + C31329 + C31328) * C23786 +
            (C30220 + C30219 + C30218) * C48948) *
               C49268 +
           ((C48021 * C2890 - C48060 * C2884 - C48021 * C2891 + C49094 * C2896 +
             C48018 * C3343 - C48053 * C3340 - C48018 * C3344 + C49101 * C3349 +
             C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332) *
                C23786 +
            (C48021 * C2888 - C48060 * C2883 - C48021 * C2889 + C49094 * C2895 +
             C48018 * C3345 - C48053 * C3341 - C48018 * C3346 + C49101 * C3350 +
             C48066 * C10330 - C26755 * C10327 - C48066 * C10331 +
             C26746 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C49024 * C49007 * C110 -
          ((C23849 + C23850 + C23851 + C23852) * C48948 +
           (C23848 + C23847 + C23846 + C23845) * C23786) *
              C49053 * C49024 * C49007 * C111 +
          ((C23852 + C23851 + C23850 + C23849) * C23786 +
           (C23788 * C128 - C23789 * C118 - C23788 * C129 + C49339 * C139 +
            C23790 * C272 - C23791 * C265 - C23790 * C273 + C49335 * C283 +
            C23792 * C615 - C23793 * C607 - C23792 * C616 + C49325 * C622 +
            C23794 * C1320 - C23795 * C1313 - C23794 * C1321 + C49275 * C1325) *
               C48948) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C49024 * C49007 * C110 -
          ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
           (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
              C49053 * C49024 * C49007 * C111 +
          (C22623 * C49338 + C22624 * C49331 + (C22622 + C22621) * C49318 +
           (C22562 * C132 - C22563 * C120 - C22562 * C133 + C22556 * C141 +
            C22564 * C280 - C22565 * C269 - C22564 * C281 + C49098 * C287) *
               C49267) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C23786 +
            (C22615 + C22616) * C48948) *
               C49333 +
           ((C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422 +
             C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721) *
                C23786 +
            (C22968 + C22967) * C48948) *
               C49322 +
           ((C22562 * C962 - C22563 * C957 - C22562 * C963 + C22556 * C972 +
             C22564 * C2406 - C22565 * C2400 - C22564 * C2407 +
             C49098 * C2418) *
                C23786 +
            (C25055 + C25056) * C48948) *
               C49303) *
              C49024 * C49007 * C110 -
          (((C25057 + C25058) * C48948 + (C25056 + C25055) * C23786) * C49303 +
           ((C22965 + C22966) * C48948 + (C22967 + C22968) * C23786) * C49322 +
           ((C22618 + C22617) * C48948 + (C22616 + C22615) * C23786) * C49333) *
              C49024 * C49007 * C111 +
          ((C22623 * C23786 + C22624 * C48948) * C49333 +
           ((C22966 + C22965) * C23786 + (C22964 + C22963) * C48948) * C49322 +
           ((C25058 + C25057) * C23786 +
            (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
             C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
             C49098 * C2707) *
                C48948) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C49024 * C260 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C24010 + C24009 + C24008 + C24007) * C23786 +
            (C23788 * C274 - C23789 * C266 - C23788 * C275 + C49339 * C284 +
             C23790 * C613 - C23791 * C606 - C23790 * C614 + C49335 * C621 +
             C23792 * C1314 - C23793 * C1310 - C23792 * C1315 + C49325 * C1322 +
             C23794 * C1835 - C23795 * C1830 - C23794 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C49024 * C260 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C22796 + C22795) * C49338 + (C22794 + C22793) * C49331 +
            (C22792 + C22791) * C49318 +
            (C22562 * C270 - C22563 * C264 - C22562 * C271 + C22556 * C282 +
             C22564 * C617 - C22565 * C608 - C22564 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422 +
              C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721) *
                 C23786 +
             (C22968 + C22967) * C48948) *
                C49322 +
            ((C22562 * C962 - C22563 * C957 - C22562 * C963 + C22556 * C972 +
              C22564 * C2406 - C22565 * C2400 - C22564 * C2407 +
              C49098 * C2418) *
                 C23786 +
             (C25055 + C25056) * C48948) *
                C49303) *
               C49024 * C260 -
           (((C25277 + C25278) * C48948 +
             (C22564 * C2408 - C22565 * C2401 - C22564 * C2409 +
              C49098 * C2419 + C22562 * C2406 - C22563 * C2400 -
              C22562 * C2407 + C22556 * C2418) *
                 C23786) *
                C49303 +
            ((C25279 + C25280) * C48948 +
             (C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
              C49098 * C1528 + C22562 * C711 - C22563 * C706 - C22562 * C712 +
              C22556 * C721) *
                 C23786) *
                C49322 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C23786) *
                C49333) *
               C49024 * C49295) *
              C262 +
          ((((C22796 + C22795) * C23786 + (C22794 + C22793) * C48948) * C49333 +
            ((C25280 + C25279) * C23786 +
             (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
              C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
              C49098 * C1526) *
                 C48948) *
                C49322 +
            ((C25278 + C25277) * C23786 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C48948) *
                C49303) *
               C49024 * C49295 -
           (((C25057 + C25058) * C48948 + (C25056 + C25055) * C23786) * C49303 +
            ((C22965 + C22966) * C48948 + (C22967 + C22968) * C23786) * C49322 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C23786) *
                C49333) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C398 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C24168 + C24167 + C24166 + C24165) * C23786 +
            (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
             C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
             C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
             C23794 * C1993 - C23795 * C1988 - C23794 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C398 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C22968 + C22967) * C49338 + (C22966 + C22965) * C49331 +
            (C22964 + C22963) * C49318 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
            ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
               C398 -
           (((C25519 + C25520) * C48948 +
             (C22564 * C3343 - C22565 * C3340 - C22564 * C3344 +
              C49098 * C3349 + C22562 * C2890 - C22563 * C2884 -
              C22562 * C2891 + C22556 * C2896) *
                 C23786) *
                C49303 +
            (C25501 * C48948 + (C25518 + C25517) * C23786) * C49322 +
            (C25502 * C48948 + (C25516 + C25515) * C23786) * C49333) *
               C49297) *
              C49007 * C262 +
          (((C25483 * C23786 + (C22966 + C22965) * C48948) * C49333 +
            (C25492 * C23786 + (C25058 + C25057) * C48948) * C49322 +
            ((C25520 + C25519) * C23786 +
             (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 +
              C22556 * C2894 + C22564 * C3347 - C22565 * C3342 -
              C22564 * C3348 + C49098 * C3351) *
                 C48948) *
                C49303) *
               C49297 -
           (((C25057 + C25058) * C48948 + C25501 * C23786) * C49303 +
            ((C22965 + C22966) * C48948 + C25502 * C23786) * C49322 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C23786) *
                C49333) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C49024 * C534 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C24010 + C24009 + C24008 + C24007) * C23786 +
            (C23788 * C274 - C23789 * C266 - C23788 * C275 + C49339 * C284 +
             C23790 * C613 - C23791 * C606 - C23790 * C614 + C49335 * C621 +
             C23792 * C1314 - C23793 * C1310 - C23792 * C1315 + C49325 * C1322 +
             C23794 * C1835 - C23795 * C1830 - C23794 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C49024 * C534 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C22796 + C22795) * C49338 + (C22794 + C22793) * C49331 +
            (C22792 + C22791) * C49318 +
            (C22562 * C270 - C22563 * C264 - C22562 * C271 + C22556 * C282 +
             C22564 * C617 - C22565 * C608 - C22564 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
            ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
               C49024 * C534 -
           (((C25277 + C25278) * C48948 +
             (C22564 * C2408 - C22565 * C2401 - C22564 * C2409 +
              C49098 * C2419 + C22562 * C2406 - C22563 * C2400 -
              C22562 * C2407 + C22556 * C2418) *
                 C23786) *
                C49303 +
            ((C25279 + C25280) * C48948 +
             (C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
              C49098 * C1528 + C22562 * C711 - C22563 * C706 - C22562 * C712 +
              C22556 * C721) *
                 C23786) *
                C49322 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C23786) *
                C49333) *
               C49024 * C49295) *
              C536 +
          ((((C22796 + C22795) * C23786 + (C22794 + C22793) * C48948) * C49333 +
            ((C25280 + C25279) * C23786 +
             (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
              C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
              C49098 * C1526) *
                 C48948) *
                C49322 +
            ((C25278 + C25277) * C23786 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C48948) *
                C49303) *
               C49024 * C49295 -
           (((C25057 + C25058) * C48948 + C25501 * C23786) * C49303 +
            ((C22965 + C22966) * C48948 + C25502 * C23786) * C49322 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C23786) *
                C49333) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C49024 * C600 -
          ((C24007 + C24008 + C24009 + C24010) * C48948 +
           (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
            C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
            C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
            C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
               C23786) *
              C49053 * C49024 * C601 +
          ((C23788 * C609 - C23789 * C604 - C23788 * C610 + C49339 * C619 +
            C23790 * C1318 - C23791 * C1312 - C23790 * C1319 + C49335 * C1324 +
            C23792 * C1831 - C23793 * C1828 - C23792 * C1832 + C49325 * C1837 +
            C23794 * C9356 - C23795 * C9354 - C23794 * C9357 + C49275 * C9360) *
               C23786 +
           (C23788 * C611 - C23789 * C605 - C23788 * C612 + C49339 * C620 +
            C23790 * C1316 - C23791 * C1311 - C23790 * C1317 + C49335 * C1323 +
            C23792 * C1833 - C23793 * C1829 - C23792 * C1834 + C49325 * C1838 +
            C23794 * C9358 - C23795 * C9355 - C23794 * C9359 + C49275 * C9361) *
               C48948) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C49024 * C600 -
          ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
           (C22795 + C22796) * C49331 +
           (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
            C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
               C49338) *
              C49053 * C49024 * C601 +
          ((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
            C22564 * C1318 - C22565 * C1312 - C22564 * C1319 + C49098 * C1324) *
               C49338 +
           (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
            C22564 * C1316 - C22565 * C1311 - C22564 * C1317 + C49098 * C1323) *
               C49331 +
           (C22562 * C613 - C22563 * C606 - C22562 * C614 + C22556 * C621 +
            C22564 * C1314 - C22565 * C1310 - C22564 * C1315 + C49098 * C1322) *
               C49318 +
           (C22562 * C615 - C22563 * C607 - C22562 * C616 + C22556 * C622 +
            C22564 * C1320 - C22565 * C1313 - C22564 * C1321 + C49098 * C1325) *
               C49267) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C23786 +
            (C22615 + C22616) * C48948) *
               C49333 +
           ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
           ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
              C49024 * C600 -
          (((C25277 + C25278) * C48948 +
            (C22564 * C2408 - C22565 * C2401 - C22564 * C2409 + C49098 * C2419 +
             C22562 * C2406 - C22563 * C2400 - C22562 * C2407 +
             C22556 * C2418) *
                C23786) *
               C49303 +
           ((C25279 + C25280) * C48948 +
            (C22564 * C1522 - C22565 * C1516 - C22564 * C1523 + C49098 * C1528 +
             C22562 * C711 - C22563 * C706 - C22562 * C712 + C22556 * C721) *
                C23786) *
               C49322 +
           ((C22795 + C22796) * C48948 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C23786) *
               C49333) *
              C49024 * C601 +
          (((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
             C22564 * C1318 - C22565 * C1312 - C22564 * C1319 +
             C49098 * C1324) *
                C23786 +
            (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
             C22564 * C1316 - C22565 * C1311 - C22564 * C1317 +
             C49098 * C1323) *
                C48948) *
               C49333 +
           ((C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
             C22564 * C1989 - C22565 * C1986 - C22564 * C1990 +
             C49098 * C1995) *
                C23786 +
            (C22562 * C1520 - C22563 * C1515 - C22562 * C1521 + C22556 * C1527 +
             C22564 * C1991 - C22565 * C1987 - C22564 * C1992 +
             C49098 * C1996) *
                C48948) *
               C49322 +
           ((C22562 * C2408 - C22563 * C2401 - C22562 * C2409 + C22556 * C2419 +
             C22564 * C9914 - C22565 * C9912 - C22564 * C9915 +
             C49098 * C9918) *
                C23786 +
            (C22562 * C2412 - C22563 * C2403 - C22562 * C2413 + C22556 * C2421 +
             C22564 * C10177 - C22565 * C10176 - C22564 * C10178 +
             C49098 * C10179) *
                C48948) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C398 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C534 +
          (((C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23794 * C9446 - C23795 * C9444 - C23794 * C9447 +
             C49275 * C9450) *
                C23786 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C398 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C534 +
          (((C22562 * C711 - C22563 * C706 - C22562 * C712 + C22556 * C721 +
             C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
             C49098 * C1528) *
                C49338 +
            (C22562 * C713 - C22563 * C707 - C22562 * C714 + C22556 * C722 +
             C22564 * C1520 - C22565 * C1515 - C22564 * C1521 +
             C49098 * C1527) *
                C49331 +
            (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
             C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
             C49098 * C1526) *
                C49318 +
            (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
             C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
             C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
            ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
               C398 -
           (((C25519 + C25520) * C48948 +
             (C22564 * C3343 - C22565 * C3340 - C22564 * C3344 +
              C49098 * C3349 + C22562 * C2890 - C22563 * C2884 -
              C22562 * C2891 + C22556 * C2896) *
                 C23786) *
                C49303 +
            (C25501 * C48948 + (C25518 + C25517) * C23786) * C49322 +
            (C25502 * C48948 + (C25516 + C25515) * C23786) * C49333) *
               C49297) *
              C534 +
          ((((C26079 + C26080) * C23786 + (C25280 + C25279) * C48948) * C49333 +
            ((C26081 + C26082) * C23786 + (C25278 + C25277) * C48948) * C49322 +
            ((C22562 * C3343 - C22563 * C3340 - C22562 * C3344 +
              C22556 * C3349 + C22564 * C10328 - C22565 * C10326 -
              C22564 * C10329 + C49098 * C10332) *
                 C23786 +
             (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 +
              C22556 * C3350 + C22564 * C10330 - C22565 * C10327 -
              C22564 * C10331 + C49098 * C10333) *
                 C48948) *
                C49303) *
               C49297 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C23786) * C49303 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C23786) * C49322 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C23786) *
                C49333) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C808 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C24168 + C24167 + C24166 + C24165) * C23786 +
            (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
             C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
             C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
             C23794 * C1993 - C23795 * C1988 - C23794 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C808 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C22968 + C22967) * C49338 + (C22966 + C22965) * C49331 +
            (C22964 + C22963) * C49318 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
            ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
               C808 -
           (((C25519 + C25520) * C48948 +
             (C22564 * C3343 - C22565 * C3340 - C22564 * C3344 +
              C49098 * C3349 + C22562 * C2890 - C22563 * C2884 -
              C22562 * C2891 + C22556 * C2896) *
                 C23786) *
                C49303 +
            (C25501 * C48948 + (C25518 + C25517) * C23786) * C49322 +
            (C25502 * C48948 + (C25516 + C25515) * C23786) * C49333) *
               C49297) *
              C49007 * C536 +
          (((C25483 * C23786 + (C22966 + C22965) * C48948) * C49333 +
            (C25492 * C23786 + (C25058 + C25057) * C48948) * C49322 +
            ((C25520 + C25519) * C23786 +
             (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 +
              C22556 * C2894 + C22564 * C3347 - C22565 * C3342 -
              C22564 * C3348 + C49098 * C3351) *
                 C48948) *
                C49303) *
               C49297 -
           (((C25057 + C25058) * C48948 + C25501 * C23786) * C49303 +
            ((C22965 + C22966) * C48948 + C25502 * C23786) * C49322 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C23786) *
                C49333) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C808 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C260 +
          (((C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23794 * C9446 - C23795 * C9444 - C23794 * C9447 +
             C49275 * C9450) *
                C23786 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C808 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C260 +
          (((C22562 * C711 - C22563 * C706 - C22562 * C712 + C22556 * C721 +
             C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
             C49098 * C1528) *
                C49338 +
            (C22562 * C713 - C22563 * C707 - C22562 * C714 + C22556 * C722 +
             C22564 * C1520 - C22565 * C1515 - C22564 * C1521 +
             C49098 * C1527) *
                C49331 +
            (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
             C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
             C49098 * C1526) *
                C49318 +
            (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
             C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
             C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C23786 +
             (C22615 + C22616) * C48948) *
                C49333 +
            ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
            ((C25517 + C25518) * C23786 + C25492 * C48948) * C49303) *
               C808 -
           (((C25519 + C25520) * C48948 +
             (C22564 * C3343 - C22565 * C3340 - C22564 * C3344 +
              C49098 * C3349 + C22562 * C2890 - C22563 * C2884 -
              C22562 * C2891 + C22556 * C2896) *
                 C23786) *
                C49303 +
            (C25501 * C48948 + (C25518 + C25517) * C23786) * C49322 +
            (C25502 * C48948 + (C25516 + C25515) * C23786) * C49333) *
               C49297) *
              C260 +
          ((((C26079 + C26080) * C23786 + (C25280 + C25279) * C48948) * C49333 +
            ((C26081 + C26082) * C23786 + (C25278 + C25277) * C48948) * C49322 +
            ((C22562 * C3343 - C22563 * C3340 - C22562 * C3344 +
              C22556 * C3349 + C22564 * C10328 - C22565 * C10326 -
              C22564 * C10329 + C49098 * C10332) *
                 C23786 +
             (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 +
              C22556 * C3350 + C22564 * C10330 - C22565 * C10327 -
              C22564 * C10331 + C49098 * C10333) *
                 C48948) *
                C49303) *
               C49297 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C23786) * C49303 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C23786) * C49322 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C23786) *
                C49333) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C954 -
          ((C24165 + C24166 + C24167 + C24168) * C48948 +
           (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
            C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
            C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
            C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
               C23786) *
              C49053 * C955 +
          ((C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972 +
            C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
            C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
            C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918) *
               C23786 +
           (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
            C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
            C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
            C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
            C49275 * C10179) *
               C48948) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C954 -
          ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
           (C22967 + C22968) * C49331 +
           (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
            C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
               C49338) *
              C49053 * C955 +
          ((C22562 * C962 - C22563 * C957 - C22562 * C963 + C22556 * C972 +
            C22564 * C2406 - C22565 * C2400 - C22564 * C2407 + C49098 * C2418) *
               C49338 +
           (C22562 * C964 - C22563 * C958 - C22562 * C965 + C22556 * C973 +
            C22564 * C2410 - C22565 * C2402 - C22564 * C2411 + C49098 * C2420) *
               C49331 +
           (C22562 * C966 - C22563 * C959 - C22562 * C967 + C22556 * C974 +
            C22564 * C2414 - C22565 * C2404 - C22564 * C2415 + C49098 * C2422) *
               C49318 +
           (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
            C22564 * C2705 - C22565 * C2704 - C22564 * C2706 + C49098 * C2707) *
               C49267) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C23786 +
            (C22615 + C22616) * C48948) *
               C49333 +
           ((C25515 + C25516) * C23786 + C25483 * C48948) * C49322 +
           C26630 * C49303) *
              C954 -
          (((C25519 + C25520) * C48948 + (C26633 + C26634) * C23786) * C49303 +
           (C25501 * C48948 + (C25518 + C25517) * C23786) * C49322 +
           (C25502 * C48948 + (C25516 + C25515) * C23786) * C49333) *
              C955 +
          (C26630 * C49333 +
           ((C26634 + C26633) * C23786 + (C25520 + C25519) * C48948) * C49322 +
           ((C22562 * C3777 - C22563 * C3774 - C22562 * C3778 + C22556 * C3783 +
             C22564 * C11249 - C22565 * C11247 - C22564 * C11250 +
             C49098 * C11253) *
                C23786 +
            (C22562 * C3779 - C22563 * C3775 - C22562 * C3780 + C22556 * C3784 +
             C22564 * C17981 - C22565 * C17980 - C22564 * C17982 +
             C49098 * C17983) *
                C48948) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48943 +
            (C22615 + C22616) * C48951 + C22623 * C26749) *
               C49268 +
           ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C22963 + C22964) * C26749 + (C22965 + C22966) * C48951 +
            C25502 * C48943) *
               C49140 +
           ((C22620 + C22619) * C26749 + (C22618 + C22617) * C48951 +
            (C22616 + C22615) * C48943) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C22623 * C48943 + C22624 * C48951 + (C22622 + C22621) * C26749) *
               C49268 +
           (C28148 * C48943 + (C22964 + C22963) * C48951 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C26749) *
               C49140) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C49024 * C260 -
           (((C28355 + C28356) * C26749 + (C25279 + C25280) * C48951 +
             (C26080 + C26079) * C48943) *
                C49140 +
            ((C22793 + C22794) * C26749 + (C22795 + C22796) * C48951 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C48943) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C22796 + C22795) * C48943 + (C22794 + C22793) * C48951 +
             (C22792 + C22791) * C26749) *
                C49268 +
            ((C25280 + C25279) * C48943 + (C28356 + C28355) * C48951 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C26749) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C26749 + (C22965 + C22966) * C48951 +
             C25502 * C48943) *
                C49140 +
            ((C22620 + C22619) * C26749 + (C22618 + C22617) * C48951 +
             (C22616 + C22615) * C48943) *
                C49268) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C26749 + C25501 * C48951 +
             (C25518 + C25517) * C48943) *
                C49140 +
            (C28551 * C26749 + C25502 * C48951 + (C25516 + C25515) * C48943) *
                C49268) *
               C49297) *
              C49007 * C262 +
          (((C25483 * C48943 + C28148 * C48951 + (C22964 + C22963) * C26749) *
                C49268 +
            (C25492 * C48943 + (C25058 + C25057) * C48951 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C26749) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C26749 + C28551 * C48951 + C25502 * C48943) *
                C49140 +
            ((C22620 + C22619) * C26749 + (C22618 + C22617) * C48951 +
             (C22616 + C22615) * C48943) *
                C49268) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C49024 * C534 -
           (((C28355 + C28356) * C26749 + (C25279 + C25280) * C48951 +
             (C26080 + C26079) * C48943) *
                C49140 +
            ((C22793 + C22794) * C26749 + (C22795 + C22796) * C48951 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C48943) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C22796 + C22795) * C48943 + (C22794 + C22793) * C48951 +
             (C22792 + C22791) * C26749) *
                C49268 +
            ((C25280 + C25279) * C48943 + (C28356 + C28355) * C48951 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C26749) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C26749 + C28551 * C48951 + C25502 * C48943) *
                C49140 +
            ((C22620 + C22619) * C26749 + (C22618 + C22617) * C48951 +
             (C22616 + C22615) * C48943) *
                C49268) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48943 +
            (C22615 + C22616) * C48951 + C22623 * C26749) *
               C49268 +
           ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
               C49140) *
              C49024 * C600 -
          (((C28355 + C28356) * C26749 + (C25279 + C25280) * C48951 +
            (C26080 + C26079) * C48943) *
               C49140 +
           ((C22793 + C22794) * C26749 + (C22795 + C22796) * C48951 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C48943) *
               C49268) *
              C49024 * C601 +
          (((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
             C22564 * C1318 - C22565 * C1312 - C22564 * C1319 +
             C49098 * C1324) *
                C48943 +
            (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
             C22564 * C1316 - C22565 * C1311 - C22564 * C1317 +
             C49098 * C1323) *
                C48951 +
            (C22562 * C613 - C22563 * C606 - C22562 * C614 + C22556 * C621 +
             C22564 * C1314 - C22565 * C1310 - C22564 * C1315 +
             C49098 * C1322) *
                C26749) *
               C49268 +
           ((C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
             C22564 * C1989 - C22565 * C1986 - C22564 * C1990 +
             C49098 * C1995) *
                C48943 +
            (C22562 * C1520 - C22563 * C1515 - C22562 * C1521 + C22556 * C1527 +
             C22564 * C1991 - C22565 * C1987 - C22564 * C1992 +
             C49098 * C1996) *
                C48951 +
            (C22562 * C1518 - C22563 * C1514 - C22562 * C1519 + C22556 * C1526 +
             C22564 * C1993 - C22565 * C1988 - C22564 * C1994 +
             C49098 * C1997) *
                C26749) *
               C49140) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C26749 + C25501 * C48951 +
             (C25518 + C25517) * C48943) *
                C49140 +
            (C28551 * C26749 + C25502 * C48951 + (C25516 + C25515) * C48943) *
                C49268) *
               C49297) *
              C534 +
          ((((C26079 + C26080) * C48943 + (C25280 + C25279) * C48951 +
             (C28356 + C28355) * C26749) *
                C49268 +
            ((C26081 + C26082) * C48943 + (C25278 + C25277) * C48951 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C26749) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C26749 + (C25279 + C25280) * C48951 +
             (C26080 + C26079) * C48943) *
                C49140 +
            ((C22793 + C22794) * C26749 + (C22795 + C22796) * C48951 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C48943) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C26749 + C25501 * C48951 +
             (C25518 + C25517) * C48943) *
                C49140 +
            (C28551 * C26749 + C25502 * C48951 + (C25516 + C25515) * C48943) *
                C49268) *
               C49297) *
              C49007 * C536 +
          (((C25483 * C48943 + C28148 * C48951 + (C22964 + C22963) * C26749) *
                C49268 +
            (C25492 * C48943 + (C25058 + C25057) * C48951 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C26749) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C26749 + C28551 * C48951 + C25502 * C48943) *
                C49140 +
            ((C22620 + C22619) * C26749 + (C22618 + C22617) * C48951 +
             (C22616 + C22615) * C48943) *
                C49268) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C48943 +
             (C22615 + C22616) * C48951 + C22623 * C26749) *
                C49268 +
            ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C26749 + C25501 * C48951 +
             (C25518 + C25517) * C48943) *
                C49140 +
            (C28551 * C26749 + C25502 * C48951 + (C25516 + C25515) * C48943) *
                C49268) *
               C49297) *
              C260 +
          ((((C26079 + C26080) * C48943 + (C25280 + C25279) * C48951 +
             (C28356 + C28355) * C26749) *
                C49268 +
            ((C26081 + C26082) * C48943 + (C25278 + C25277) * C48951 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C26749) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C26749 + (C25279 + C25280) * C48951 +
             (C26080 + C26079) * C48943) *
                C49140 +
            ((C22793 + C22794) * C26749 + (C22795 + C22796) * C48951 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C48943) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48943 +
            (C22615 + C22616) * C48951 + C22623 * C26749) *
               C49268 +
           ((C25515 + C25516) * C48943 + C25483 * C48951 + C28148 * C26749) *
               C49140) *
              C954 -
          (((C25057 + C25058) * C26749 + C25501 * C48951 +
            (C25518 + C25517) * C48943) *
               C49140 +
           (C28551 * C26749 + C25502 * C48951 + (C25516 + C25515) * C48943) *
               C49268) *
              C955 +
          ((C26617 * C48943 + C25492 * C48951 + (C25058 + C25057) * C26749) *
               C49268 +
           ((C26634 + C26633) * C48943 + (C25520 + C25519) * C48951 +
            (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 + C22556 * C2894 +
             C22564 * C3347 - C22565 * C3342 - C22564 * C3348 +
             C49098 * C3351) *
                C26749) *
               C49140) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C49024 * C49007 * C110 -
          ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
           (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
              C49053 * C49024 * C49007 * C111 +
          (C22623 * C49338 + C22624 * C49331 + (C22622 + C22621) * C49318 +
           (C22562 * C132 - C22563 * C120 - C22562 * C133 + C22556 * C141 +
            C22564 * C280 - C22565 * C269 - C22564 * C281 + C49098 * C287) *
               C49267) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C49024 * C49007 * C110 -
          ((C23849 + C23850 + C23851 + C23852) * C48948 +
           (C23848 + C23847 + C23846 + C23845) * C23786) *
              C49053 * C49024 * C49007 * C111 +
          ((C23852 + C23851 + C23850 + C23849) * C23786 +
           (C23788 * C128 - C23789 * C118 - C23788 * C129 + C49339 * C139 +
            C23790 * C272 - C23791 * C265 - C23790 * C273 + C49335 * C283 +
            C23792 * C615 - C23793 * C607 - C23792 * C616 + C49325 * C622 +
            C23794 * C1320 - C23795 * C1313 - C23794 * C1321 + C49275 * C1325) *
               C48948) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C49024 * C260 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C22796 + C22795) * C49338 + (C22794 + C22793) * C49331 +
            (C22792 + C22791) * C49318 +
            (C22562 * C270 - C22563 * C264 - C22562 * C271 + C22556 * C282 +
             C22564 * C617 - C22565 * C608 - C22564 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C49024 * C260 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C24010 + C24009 + C24008 + C24007) * C23786 +
            (C23788 * C274 - C23789 * C266 - C23788 * C275 + C49339 * C284 +
             C23790 * C613 - C23791 * C606 - C23790 * C614 + C49335 * C621 +
             C23792 * C1314 - C23793 * C1310 - C23792 * C1315 + C49325 * C1322 +
             C23794 * C1835 - C23795 * C1830 - C23794 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C398 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C22968 + C22967) * C49338 + (C22966 + C22965) * C49331 +
            (C22964 + C22963) * C49318 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C398 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C24168 + C24167 + C24166 + C24165) * C23786 +
            (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
             C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
             C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
             C23794 * C1993 - C23795 * C1988 - C23794 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C49024 * C534 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C22796 + C22795) * C49338 + (C22794 + C22793) * C49331 +
            (C22792 + C22791) * C49318 +
            (C22562 * C270 - C22563 * C264 - C22562 * C271 + C22556 * C282 +
             C22564 * C617 - C22565 * C608 - C22564 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C49024 * C534 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C24010 + C24009 + C24008 + C24007) * C23786 +
            (C23788 * C274 - C23789 * C266 - C23788 * C275 + C49339 * C284 +
             C23790 * C613 - C23791 * C606 - C23790 * C614 + C49335 * C621 +
             C23792 * C1314 - C23793 * C1310 - C23792 * C1315 + C49325 * C1322 +
             C23794 * C1835 - C23795 * C1830 - C23794 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C49024 * C600 -
          ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
           (C22795 + C22796) * C49331 +
           (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
            C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
               C49338) *
              C49053 * C49024 * C601 +
          ((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
            C22564 * C1318 - C22565 * C1312 - C22564 * C1319 + C49098 * C1324) *
               C49338 +
           (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
            C22564 * C1316 - C22565 * C1311 - C22564 * C1317 + C49098 * C1323) *
               C49331 +
           (C22562 * C613 - C22563 * C606 - C22562 * C614 + C22556 * C621 +
            C22564 * C1314 - C22565 * C1310 - C22564 * C1315 + C49098 * C1322) *
               C49318 +
           (C22562 * C615 - C22563 * C607 - C22562 * C616 + C22556 * C622 +
            C22564 * C1320 - C22565 * C1313 - C22564 * C1321 + C49098 * C1325) *
               C49267) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C49024 * C600 -
          ((C24007 + C24008 + C24009 + C24010) * C48948 +
           (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
            C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
            C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
            C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
               C23786) *
              C49053 * C49024 * C601 +
          ((C23788 * C609 - C23789 * C604 - C23788 * C610 + C49339 * C619 +
            C23790 * C1318 - C23791 * C1312 - C23790 * C1319 + C49335 * C1324 +
            C23792 * C1831 - C23793 * C1828 - C23792 * C1832 + C49325 * C1837 +
            C23794 * C9356 - C23795 * C9354 - C23794 * C9357 + C49275 * C9360) *
               C23786 +
           (C23788 * C611 - C23789 * C605 - C23788 * C612 + C49339 * C620 +
            C23790 * C1316 - C23791 * C1311 - C23790 * C1317 + C49335 * C1323 +
            C23792 * C1833 - C23793 * C1829 - C23792 * C1834 + C49325 * C1838 +
            C23794 * C9358 - C23795 * C9355 - C23794 * C9359 + C49275 * C9361) *
               C48948) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C398 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C534 +
          (((C22562 * C711 - C22563 * C706 - C22562 * C712 + C22556 * C721 +
             C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
             C49098 * C1528) *
                C49338 +
            (C22562 * C713 - C22563 * C707 - C22562 * C714 + C22556 * C722 +
             C22564 * C1520 - C22565 * C1515 - C22564 * C1521 +
             C49098 * C1527) *
                C49331 +
            (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
             C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
             C49098 * C1526) *
                C49318 +
            (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
             C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
             C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C398 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C534 +
          (((C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23794 * C9446 - C23795 * C9444 - C23794 * C9447 +
             C49275 * C9450) *
                C23786 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C808 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C22968 + C22967) * C49338 + (C22966 + C22965) * C49331 +
            (C22964 + C22963) * C49318 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C22621 + C22622) * C49267 + (C22620 + C22619) * C49318 +
            (C22618 + C22617) * C49331 + (C22616 + C22615) * C49338) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C808 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C24168 + C24167 + C24166 + C24165) * C23786 +
            (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
             C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
             C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
             C23794 * C1993 - C23795 * C1988 - C23794 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C23849 + C23850 + C23851 + C23852) * C48948 +
            (C23848 + C23847 + C23846 + C23845) * C23786) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49338 +
            (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
               C49053 * C808 -
           ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
            (C22967 + C22968) * C49331 +
            (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
             C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
                C49338) *
               C49053 * C49297) *
              C260 +
          (((C22562 * C711 - C22563 * C706 - C22562 * C712 + C22556 * C721 +
             C22564 * C1522 - C22565 * C1516 - C22564 * C1523 +
             C49098 * C1528) *
                C49338 +
            (C22562 * C713 - C22563 * C707 - C22562 * C714 + C22556 * C722 +
             C22564 * C1520 - C22565 * C1515 - C22564 * C1521 +
             C49098 * C1527) *
                C49331 +
            (C22562 * C715 - C22563 * C708 - C22562 * C716 + C22556 * C723 +
             C22564 * C1518 - C22565 * C1514 - C22564 * C1519 +
             C49098 * C1526) *
                C49318 +
            (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
             C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
             C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C22791 + C22792) * C49267 + (C22793 + C22794) * C49318 +
            (C22795 + C22796) * C49331 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49338) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C23786 +
            (C23845 + C23846 + C23847 + C23848) * C48948) *
               C49053 * C808 -
           ((C24165 + C24166 + C24167 + C24168) * C48948 +
            (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
                C23786) *
               C49053 * C49297) *
              C260 +
          (((C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23794 * C9446 - C23795 * C9444 - C23794 * C9447 +
             C49275 * C9450) *
                C23786 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C24007 + C24008 + C24009 + C24010) * C48948 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C23786) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C49338 +
           (C22615 + C22616) * C49331 + C22623 * C49318 + C22624 * C49267) *
              C49053 * C954 -
          ((C22963 + C22964) * C49267 + (C22965 + C22966) * C49318 +
           (C22967 + C22968) * C49331 +
           (C22564 * C711 - C22565 * C706 - C22564 * C712 + C49098 * C721 +
            C22562 * C414 - C22563 * C404 - C22562 * C415 + C22556 * C422) *
               C49338) *
              C49053 * C955 +
          ((C22562 * C962 - C22563 * C957 - C22562 * C963 + C22556 * C972 +
            C22564 * C2406 - C22565 * C2400 - C22564 * C2407 + C49098 * C2418) *
               C49338 +
           (C22562 * C964 - C22563 * C958 - C22562 * C965 + C22556 * C973 +
            C22564 * C2410 - C22565 * C2402 - C22564 * C2411 + C49098 * C2420) *
               C49331 +
           (C22562 * C966 - C22563 * C959 - C22562 * C967 + C22556 * C974 +
            C22564 * C2414 - C22565 * C2404 - C22564 * C2415 + C49098 * C2422) *
               C49318 +
           (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
            C22564 * C2705 - C22565 * C2704 - C22564 * C2706 + C49098 * C2707) *
               C49267) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C23786 +
           (C23845 + C23846 + C23847 + C23848) * C48948) *
              C49053 * C954 -
          ((C24165 + C24166 + C24167 + C24168) * C48948 +
           (C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995 +
            C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
            C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
            C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422) *
               C23786) *
              C49053 * C955 +
          ((C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972 +
            C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
            C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
            C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918) *
               C23786 +
           (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
            C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
            C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
            C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
            C49275 * C10179) *
               C48948) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C49245 +
            (C26811 + C26812 + C26813) * C48948) *
               C31428 +
           ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
              C49024 * C49007 * C110 -
          (((C27192 + C27193 + C27194) * C48948 + C30208 * C49245) * C49140 +
           ((C26816 + C26815 + C26814) * C48948 +
            (C26813 + C26812 + C26811) * C49245) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C26821 * C49245 + (C26819 + C26818 + C26817) * C48948) * C31428 +
           ((C27194 + C27193 + C27192) * C49245 +
            (C48021 * C408 - C48060 * C401 - C48021 * C409 + C49094 * C419 +
             C48018 * C717 - C48053 * C709 - C48018 * C718 + C49101 * C724 +
             C48066 * C1524 - C26755 * C1517 - C48066 * C1525 +
             C26746 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C49024 * C260 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C49245) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C49245) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C27009 + C27008 + C27007) * C49245 +
             (C27006 + C27005 + C27004) * C48948) *
                C31428 +
            ((C29980 + C29979 + C29978) * C49245 +
             (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
              C48018 * C1518 - C48053 * C1514 - C48018 * C1519 +
              C49101 * C1526 + C48066 * C1993 - C26755 * C1988 -
              C48066 * C1994 + C26746 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C49245) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C49245) *
                C31428) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C398 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C31328 + C31329 + C31330) * C49245) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C49245) * C31428) *
               C49297) *
              C49007 * C262 +
          (((C30204 * C49245 + (C27194 + C27193 + C27192) * C48948) * C31428 +
            ((C30220 + C30219 + C30218) * C49245 +
             (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
              C48018 * C2414 - C48053 * C2404 - C48018 * C2415 +
              C49101 * C2422 + C48066 * C2416 - C26755 * C2405 -
              C48066 * C2417 + C26746 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C49245) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C49245) *
                C31428) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C49024 * C534 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C49245) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C49245) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C27009 + C27008 + C27007) * C49245 +
             (C27006 + C27005 + C27004) * C48948) *
                C31428 +
            ((C29980 + C29979 + C29978) * C49245 +
             (C48021 * C715 - C48060 * C708 - C48021 * C716 + C49094 * C723 +
              C48018 * C1518 - C48053 * C1514 - C48018 * C1519 +
              C49101 * C1526 + C48066 * C1993 - C26755 * C1988 -
              C48066 * C1994 + C26746 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C49245) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C49245) *
                C31428) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C49245 +
            (C26811 + C26812 + C26813) * C48948) *
               C31428 +
           ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
              C49024 * C600 -
          (((C29978 + C29979 + C29980) * C48948 +
            (C30775 + C30774 + C30773) * C49245) *
               C49140 +
           ((C27007 + C27008 + C27009) * C48948 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C49245) *
               C31428) *
              C49024 * C601 +
          (((C48021 * C609 - C48060 * C604 - C48021 * C610 + C49094 * C619 +
             C48018 * C1318 - C48053 * C1312 - C48018 * C1319 + C49101 * C1324 +
             C48066 * C1831 - C26755 * C1828 - C48066 * C1832 +
             C26746 * C1837) *
                C49245 +
            (C48021 * C611 - C48060 * C605 - C48021 * C612 + C49094 * C620 +
             C48018 * C1316 - C48053 * C1311 - C48018 * C1317 + C49101 * C1323 +
             C48066 * C1833 - C26755 * C1829 - C48066 * C1834 +
             C26746 * C1838) *
                C48948) *
               C31428 +
           ((C48021 * C1522 - C48060 * C1516 - C48021 * C1523 + C49094 * C1528 +
             C48018 * C1989 - C48053 * C1986 - C48018 * C1990 + C49101 * C1995 +
             C48066 * C9446 - C26755 * C9444 - C48066 * C9447 +
             C26746 * C9450) *
                C49245 +
            (C48021 * C1520 - C48060 * C1515 - C48021 * C1521 + C49094 * C1527 +
             C48018 * C1991 - C48053 * C1987 - C48018 * C1992 + C49101 * C1996 +
             C48066 * C9448 - C26755 * C9445 - C48066 * C9449 +
             C26746 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C398 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C31328 + C31329 + C31330) * C49245) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C49245) * C31428) *
               C49297) *
              C534 +
          ((((C30773 + C30774 + C30775) * C49245 +
             (C29980 + C29979 + C29978) * C48948) *
                C31428 +
            ((C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
              C49094 * C2418 + C48018 * C2408 - C48053 * C2401 -
              C48018 * C2409 + C49101 * C2419 + C48066 * C9914 -
              C26755 * C9912 - C48066 * C9915 + C26746 * C9918) *
                 C49245 +
             (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 +
              C49094 * C2420 + C48018 * C2412 - C48053 * C2403 -
              C48018 * C2413 + C49101 * C2421 + C48066 * C10177 -
              C26755 * C10176 - C48066 * C10178 + C26746 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C49245) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C49245) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C808 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C31328 + C31329 + C31330) * C49245) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C49245) * C31428) *
               C49297) *
              C49007 * C536 +
          (((C30204 * C49245 + (C27194 + C27193 + C27192) * C48948) * C31428 +
            ((C30220 + C30219 + C30218) * C49245 +
             (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
              C48018 * C2414 - C48053 * C2404 - C48018 * C2415 +
              C49101 * C2422 + C48066 * C2416 - C26755 * C2405 -
              C48066 * C2417 + C26746 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C27192 + C27193 + C27194) * C48948 + C30208 * C49245) * C49140 +
            ((C26816 + C26815 + C26814) * C48948 +
             (C26813 + C26812 + C26811) * C49245) *
                C31428) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
              C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
              C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                 C49245 +
             (C26811 + C26812 + C26813) * C48948) *
                C31428 +
            ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
               C808 -
           (((C30218 + C30219 + C30220) * C48948 +
             (C31328 + C31329 + C31330) * C49245) *
                C49140 +
            (C30208 * C48948 + (C30217 + C30216 + C30215) * C49245) * C31428) *
               C49297) *
              C260 +
          ((((C30773 + C30774 + C30775) * C49245 +
             (C29980 + C29979 + C29978) * C48948) *
                C31428 +
            ((C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
              C49094 * C2418 + C48018 * C2408 - C48053 * C2401 -
              C48018 * C2409 + C49101 * C2419 + C48066 * C9914 -
              C26755 * C9912 - C48066 * C9915 + C26746 * C9918) *
                 C49245 +
             (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 +
              C49094 * C2420 + C48018 * C2412 - C48053 * C2403 -
              C48018 * C2413 + C49101 * C2421 + C48066 * C10177 -
              C26755 * C10176 - C48066 * C10178 + C26746 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C29978 + C29979 + C29980) * C48948 +
             (C30775 + C30774 + C30773) * C49245) *
                C49140 +
            ((C27007 + C27008 + C27009) * C48948 +
             (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 +
              C26746 * C1324 + C48018 * C609 - C48053 * C604 - C48018 * C610 +
              C49101 * C619 + C48021 * C278 - C48060 * C268 - C48021 * C279 +
              C49094 * C286) *
                 C49245) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C49245 +
            (C26811 + C26812 + C26813) * C48948) *
               C31428 +
           ((C30215 + C30216 + C30217) * C49245 + C30204 * C48948) * C49140) *
              C954 -
          (((C30218 + C30219 + C30220) * C48948 +
            (C31328 + C31329 + C31330) * C49245) *
               C49140 +
           (C30208 * C48948 + (C30217 + C30216 + C30215) * C49245) * C31428) *
              C955 +
          (((C31330 + C31329 + C31328) * C49245 +
            (C30220 + C30219 + C30218) * C48948) *
               C31428 +
           ((C48021 * C2890 - C48060 * C2884 - C48021 * C2891 + C49094 * C2896 +
             C48018 * C3343 - C48053 * C3340 - C48018 * C3344 + C49101 * C3349 +
             C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332) *
                C49245 +
            (C48021 * C2888 - C48060 * C2883 - C48021 * C2889 + C49094 * C2895 +
             C48018 * C3345 - C48053 * C3341 - C48018 * C3346 + C49101 * C3350 +
             C48066 * C10330 - C26755 * C10327 - C48066 * C10331 +
             C26746 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48938 * C49136 +
           (C30215 + C30216 + C30217) * C48938 * C49143 +
           (C31330 + C31329 + C31328) * C48938 * C36863) *
              C49024 * C49007 * C110 -
          ((C30218 + C30219 + C30220) * C48938 * C36863 +
           C30208 * C48938 * C49143 +
           (C26813 + C26812 + C26811) * C48938 * C49136) *
              C49024 * C49007 * C111 +
          (C26821 * C48938 * C49136 +
           (C27194 + C27193 + C27192) * C48938 * C49143 +
           (C48021 * C966 - C48060 * C959 - C48021 * C967 + C49094 * C974 +
            C48018 * C2414 - C48053 * C2404 - C48018 * C2415 + C49101 * C2422 +
            C48066 * C2416 - C26755 * C2405 - C48066 * C2417 + C26746 * C2423) *
               C48938 * C36863) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C49024 * C260 -
           ((C48066 * C9914 - C26755 * C9912 - C48066 * C9915 + C26746 * C9918 +
             C48018 * C2408 - C48053 * C2401 - C48018 * C2409 + C49101 * C2419 +
             C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
             C49094 * C2418) *
                C48938 * C36863 +
            (C30775 + C30774 + C30773) * C48938 * C49143 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48938 * C49136) *
               C49024 * C49295) *
              C262 +
          (((C27009 + C27008 + C27007) * C48938 * C49136 +
            (C29980 + C29979 + C29978) * C48938 * C49143 +
            (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 + C49094 * C2420 +
             C48018 * C2412 - C48053 * C2403 - C48018 * C2413 + C49101 * C2421 +
             C48066 * C10177 - C26755 * C10176 - C48066 * C10178 +
             C26746 * C10179) *
                C48938 * C36863) *
               C49024 * C49295 -
           ((C30218 + C30219 + C30220) * C48938 * C36863 +
            C30208 * C48938 * C49143 +
            (C26813 + C26812 + C26811) * C48938 * C49136) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C398 -
           ((C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332 + C48018 * C3343 - C48053 * C3340 -
             C48018 * C3344 + C49101 * C3349 + C48021 * C2890 - C48060 * C2884 -
             C48021 * C2891 + C49094 * C2896) *
                C48938 * C36863 +
            (C31328 + C31329 + C31330) * C48938 * C49143 +
            (C30217 + C30216 + C30215) * C48938 * C49136) *
               C49297) *
              C49007 * C262 +
          ((C30204 * C48938 * C49136 +
            (C30220 + C30219 + C30218) * C48938 * C49143 +
            (C48021 * C2888 - C48060 * C2883 - C48021 * C2889 + C49094 * C2895 +
             C48018 * C3345 - C48053 * C3341 - C48018 * C3346 + C49101 * C3350 +
             C48066 * C10330 - C26755 * C10327 - C48066 * C10331 +
             C26746 * C10333) *
                C48938 * C36863) *
               C49297 -
           ((C30218 + C30219 + C30220) * C48938 * C36863 +
            C30208 * C48938 * C49143 +
            (C26813 + C26812 + C26811) * C48938 * C49136) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C49024 * C534 -
           ((C48066 * C9914 - C26755 * C9912 - C48066 * C9915 + C26746 * C9918 +
             C48018 * C2408 - C48053 * C2401 - C48018 * C2409 + C49101 * C2419 +
             C48021 * C2406 - C48060 * C2400 - C48021 * C2407 +
             C49094 * C2418) *
                C48938 * C36863 +
            (C30775 + C30774 + C30773) * C48938 * C49143 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48938 * C49136) *
               C49024 * C49295) *
              C536 +
          (((C27009 + C27008 + C27007) * C48938 * C49136 +
            (C29980 + C29979 + C29978) * C48938 * C49143 +
            (C48021 * C2410 - C48060 * C2402 - C48021 * C2411 + C49094 * C2420 +
             C48018 * C2412 - C48053 * C2403 - C48018 * C2413 + C49101 * C2421 +
             C48066 * C10177 - C26755 * C10176 - C48066 * C10178 +
             C26746 * C10179) *
                C48938 * C36863) *
               C49024 * C49295 -
           ((C30218 + C30219 + C30220) * C48938 * C36863 +
            C30208 * C48938 * C49143 +
            (C26813 + C26812 + C26811) * C48938 * C49136) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48938 * C49136 +
           (C30215 + C30216 + C30217) * C48938 * C49143 +
           (C31330 + C31329 + C31328) * C48938 * C36863) *
              C49024 * C600 -
          ((C48066 * C9914 - C26755 * C9912 - C48066 * C9915 + C26746 * C9918 +
            C48018 * C2408 - C48053 * C2401 - C48018 * C2409 + C49101 * C2419 +
            C48021 * C2406 - C48060 * C2400 - C48021 * C2407 + C49094 * C2418) *
               C48938 * C36863 +
           (C30775 + C30774 + C30773) * C48938 * C49143 +
           (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
            C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
            C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
               C48938 * C49136) *
              C49024 * C601 +
          ((C48021 * C609 - C48060 * C604 - C48021 * C610 + C49094 * C619 +
            C48018 * C1318 - C48053 * C1312 - C48018 * C1319 + C49101 * C1324 +
            C48066 * C1831 - C26755 * C1828 - C48066 * C1832 + C26746 * C1837) *
               C48938 * C49136 +
           (C48021 * C1522 - C48060 * C1516 - C48021 * C1523 + C49094 * C1528 +
            C48018 * C1989 - C48053 * C1986 - C48018 * C1990 + C49101 * C1995 +
            C48066 * C9446 - C26755 * C9444 - C48066 * C9447 + C26746 * C9450) *
               C48938 * C49143 +
           (C48021 * C2408 - C48060 * C2401 - C48021 * C2409 + C49094 * C2419 +
            C48018 * C9914 - C48053 * C9912 - C48018 * C9915 + C49101 * C9918 +
            C48066 * C9916 - C26755 * C9913 - C48066 * C9917 + C26746 * C9919) *
               C48938 * C36863) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C398 -
           ((C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332 + C48018 * C3343 - C48053 * C3340 -
             C48018 * C3344 + C49101 * C3349 + C48021 * C2890 - C48060 * C2884 -
             C48021 * C2891 + C49094 * C2896) *
                C48938 * C36863 +
            (C31328 + C31329 + C31330) * C48938 * C49143 +
            (C30217 + C30216 + C30215) * C48938 * C49136) *
               C49297) *
              C534 +
          (((C30773 + C30774 + C30775) * C48938 * C49136 +
            (C47483 + C47484 + C47485) * C48938 * C49143 +
            (C48021 * C3343 - C48060 * C3340 - C48021 * C3344 + C49094 * C3349 +
             C48018 * C10328 - C48053 * C10326 - C48018 * C10329 +
             C49101 * C10332 + C48066 * C10800 - C26755 * C10799 -
             C48066 * C10801 + C26746 * C10802) *
                C48938 * C36863) *
               C49297 -
           ((C47485 + C47484 + C47483) * C48938 * C36863 +
            (C30775 + C30774 + C30773) * C48938 * C49143 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48938 * C49136) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C808 -
           ((C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332 + C48018 * C3343 - C48053 * C3340 -
             C48018 * C3344 + C49101 * C3349 + C48021 * C2890 - C48060 * C2884 -
             C48021 * C2891 + C49094 * C2896) *
                C48938 * C36863 +
            (C31328 + C31329 + C31330) * C48938 * C49143 +
            (C30217 + C30216 + C30215) * C48938 * C49136) *
               C49297) *
              C49007 * C536 +
          ((C30204 * C48938 * C49136 +
            (C30220 + C30219 + C30218) * C48938 * C49143 +
            (C48021 * C2888 - C48060 * C2883 - C48021 * C2889 + C49094 * C2895 +
             C48018 * C3345 - C48053 * C3341 - C48018 * C3346 + C49101 * C3350 +
             C48066 * C10330 - C26755 * C10327 - C48066 * C10331 +
             C26746 * C10333) *
                C48938 * C36863) *
               C49297 -
           ((C30218 + C30219 + C30220) * C48938 * C36863 +
            C30208 * C48938 * C49143 +
            (C26813 + C26812 + C26811) * C48938 * C49136) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
             C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
             C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
                C48938 * C49136 +
            (C30215 + C30216 + C30217) * C48938 * C49143 +
            (C31330 + C31329 + C31328) * C48938 * C36863) *
               C808 -
           ((C48066 * C10328 - C26755 * C10326 - C48066 * C10329 +
             C26746 * C10332 + C48018 * C3343 - C48053 * C3340 -
             C48018 * C3344 + C49101 * C3349 + C48021 * C2890 - C48060 * C2884 -
             C48021 * C2891 + C49094 * C2896) *
                C48938 * C36863 +
            (C31328 + C31329 + C31330) * C48938 * C49143 +
            (C30217 + C30216 + C30215) * C48938 * C49136) *
               C49297) *
              C260 +
          (((C30773 + C30774 + C30775) * C48938 * C49136 +
            (C47483 + C47484 + C47485) * C48938 * C49143 +
            (C48021 * C3343 - C48060 * C3340 - C48021 * C3344 + C49094 * C3349 +
             C48018 * C10328 - C48053 * C10326 - C48018 * C10329 +
             C49101 * C10332 + C48066 * C10800 - C26755 * C10799 -
             C48066 * C10801 + C26746 * C10802) *
                C48938 * C36863) *
               C49297 -
           ((C47485 + C47484 + C47483) * C48938 * C36863 +
            (C30775 + C30774 + C30773) * C48938 * C49143 +
            (C48066 * C1318 - C26755 * C1312 - C48066 * C1319 + C26746 * C1324 +
             C48018 * C609 - C48053 * C604 - C48018 * C610 + C49101 * C619 +
             C48021 * C278 - C48060 * C268 - C48021 * C279 + C49094 * C286) *
                C48938 * C49136) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48021 * C122 - C48060 * C115 - C48021 * C123 + C49094 * C136 +
            C48018 * C278 - C48053 * C268 - C48018 * C279 + C49101 * C286 +
            C48066 * C609 - C26755 * C604 - C48066 * C610 + C26746 * C619) *
               C48938 * C49136 +
           (C30215 + C30216 + C30217) * C48938 * C49143 + C47905 * C36863) *
              C954 -
          ((C47909 + C47910 + C47911) * C48938 * C36863 +
           (C31328 + C31329 + C31330) * C48938 * C49143 +
           (C30217 + C30216 + C30215) * C48938 * C49136) *
              C955 +
          (C47905 * C49136 + (C47911 + C47910 + C47909) * C48938 * C49143 +
           (C48021 * C3777 - C48060 * C3774 - C48021 * C3778 + C49094 * C3783 +
            C48018 * C11249 - C48053 * C11247 - C48018 * C11250 +
            C49101 * C11253 + C48066 * C11251 - C26755 * C11248 -
            C48066 * C11252 + C26746 * C11254) *
               C48938 * C36863) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422 +
            C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
            C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
            C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995) *
               C48938 * C49140) *
              C49024 * C49007 * C110 -
          ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
           (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
              C49024 * C49007 * C111 +
          ((C23852 + C23851 + C23850 + C23849) * C48938 * C31428 +
           (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
            C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
            C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
            C23794 * C1993 - C23795 * C1988 - C23794 * C1994 + C49275 * C1997) *
               C48938 * C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
               C49140 +
           ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
            (C22616 + C22615) * C49329) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C22623 * C49329 + C22624 * C49316 + (C22622 + C22621) * C49289) *
               C31428 +
           (C28148 * C49329 + (C22964 + C22963) * C49316 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49289) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C48938 * C49340 +
           (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
           (C26634 + C26633) * C48938 * C49282) *
              C49024 * C49007 * C110 -
          ((C25519 + C25520) * C48938 * C49282 + C25501 * C48938 * C49328 +
           C25502 * C48938 * C49337 + (C22616 + C22615) * C48938 * C49340) *
              C49024 * C49007 * C111 +
          (C22623 * C48938 * C49340 + C28148 * C48938 * C49337 +
           (C25058 + C25057) * C48938 * C49328 +
           (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 + C22556 * C2894 +
            C22564 * C3347 - C22565 * C3342 - C22564 * C3348 + C49098 * C3351) *
               C48938 * C49282) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23794 * C1989 - C23795 * C1986 - C23794 * C1990 +
             C49275 * C1995) *
                C48938 * C49140) *
               C49024 * C260 -
           ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
                C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C49024 * C49295) *
              C262 +
          (((C24010 + C24009 + C24008 + C24007) * C48938 * C31428 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C49024 * C260 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C22796 + C22795) * C49329 + (C22794 + C22793) * C49316 +
             (C22792 + C22791) * C49289) *
                C31428 +
            ((C25280 + C25279) * C49329 + (C28356 + C28355) * C49316 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C49024 * C260 -
           ((C22564 * C10328 - C22565 * C10326 - C22564 * C10329 +
             C49098 * C10332 + C22562 * C3343 - C22563 * C3340 -
             C22562 * C3344 + C22556 * C3349) *
                C48938 * C49282 +
            (C26082 + C26081) * C48938 * C49328 +
            (C26080 + C26079) * C48938 * C49337 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C48938 * C49340) *
               C49024 * C49295) *
              C262 +
          (((C22796 + C22795) * C48938 * C49340 +
            (C25280 + C25279) * C48938 * C49337 +
            (C25278 + C25277) * C48938 * C49328 +
            (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 + C22556 * C3350 +
             C22564 * C10330 - C22565 * C10327 - C22564 * C10331 +
             C49098 * C10333) *
                C48938 * C49282) *
               C49024 * C49295 -
           ((C25519 + C25520) * C48938 * C49282 + C25501 * C48938 * C49328 +
            C25502 * C48938 * C49337 + (C22616 + C22615) * C48938 * C49340) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C398 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C49007 * C262 +
          (((C24168 + C24167 + C24166 + C24165) * C48938 * C31428 +
            (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
             C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
             C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
             C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C49007 * C262 +
          (((C25483 * C49329 + C28148 * C49316 + (C22964 + C22963) * C49289) *
                C31428 +
            (C25492 * C49329 + (C25058 + C25057) * C49316 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C398 -
           ((C22564 * C11249 - C22565 * C11247 - C22564 * C11250 +
             C49098 * C11253 + C22562 * C3777 - C22563 * C3774 -
             C22562 * C3778 + C22556 * C3783) *
                C48938 * C49282 +
            (C26633 + C26634) * C48938 * C49328 +
            (C25518 + C25517) * C48938 * C49337 +
            (C25516 + C25515) * C48938 * C49340) *
               C49297) *
              C49007 * C262 +
          ((C25483 * C48938 * C49340 + C25492 * C48938 * C49337 +
            (C25520 + C25519) * C48938 * C49328 +
            (C22562 * C3779 - C22563 * C3775 - C22562 * C3780 + C22556 * C3784 +
             C22564 * C17981 - C22565 * C17980 - C22564 * C17982 +
             C49098 * C17983) *
                C48938 * C49282) *
               C49297 -
           ((C25519 + C25520) * C48938 * C49282 + C25501 * C48938 * C49328 +
            C25502 * C48938 * C49337 + (C22616 + C22615) * C48938 * C49340) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C49024 * C534 -
           ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
                C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C49024 * C49295) *
              C536 +
          (((C24010 + C24009 + C24008 + C24007) * C48938 * C31428 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C49024 * C534 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C22796 + C22795) * C49329 + (C22794 + C22793) * C49316 +
             (C22792 + C22791) * C49289) *
                C31428 +
            ((C25280 + C25279) * C49329 + (C28356 + C28355) * C49316 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C49024 * C534 -
           ((C22564 * C10328 - C22565 * C10326 - C22564 * C10329 +
             C49098 * C10332 + C22562 * C3343 - C22563 * C3340 -
             C22562 * C3344 + C22556 * C3349) *
                C48938 * C49282 +
            (C26082 + C26081) * C48938 * C49328 +
            (C26080 + C26079) * C48938 * C49337 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C48938 * C49340) *
               C49024 * C49295) *
              C536 +
          (((C22796 + C22795) * C48938 * C49340 +
            (C25280 + C25279) * C48938 * C49337 +
            (C25278 + C25277) * C48938 * C49328 +
            (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 + C22556 * C3350 +
             C22564 * C10330 - C22565 * C10327 - C22564 * C10331 +
             C49098 * C10333) *
                C48938 * C49282) *
               C49024 * C49295 -
           ((C25519 + C25520) * C48938 * C49282 + C25501 * C48938 * C49328 +
            C25502 * C48938 * C49337 + (C22616 + C22615) * C48938 * C49340) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
              C49024 * C600 -
          ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
            C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
            C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
            C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
               C48938 * C49140 +
           (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
            C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
            C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
            C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
               C48938 * C31428) *
              C49024 * C601 +
          ((C23788 * C609 - C23789 * C604 - C23788 * C610 + C49339 * C619 +
            C23790 * C1318 - C23791 * C1312 - C23790 * C1319 + C49335 * C1324 +
            C23792 * C1831 - C23793 * C1828 - C23792 * C1832 + C49325 * C1837 +
            C23794 * C9356 - C23795 * C9354 - C23794 * C9357 + C49275 * C9360) *
               C48938 * C31428 +
           (C23788 * C1522 - C23789 * C1516 - C23788 * C1523 + C49339 * C1528 +
            C23790 * C1989 - C23791 * C1986 - C23790 * C1990 + C49335 * C1995 +
            C23792 * C9446 - C23793 * C9444 - C23792 * C9447 + C49325 * C9450 +
            C23794 * C9683 - C23795 * C9682 - C23794 * C9684 + C49275 * C9685) *
               C48938 * C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C49024 * C600 -
          (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
            (C26080 + C26079) * C49329) *
               C49140 +
           ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49329) *
               C31428) *
              C49024 * C601 +
          (((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
             C22564 * C1318 - C22565 * C1312 - C22564 * C1319 +
             C49098 * C1324) *
                C49329 +
            (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
             C22564 * C1316 - C22565 * C1311 - C22564 * C1317 +
             C49098 * C1323) *
                C49316 +
            (C22562 * C613 - C22563 * C606 - C22562 * C614 + C22556 * C621 +
             C22564 * C1314 - C22565 * C1310 - C22564 * C1315 +
             C49098 * C1322) *
                C49289) *
               C31428 +
           ((C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
             C22564 * C1989 - C22565 * C1986 - C22564 * C1990 +
             C49098 * C1995) *
                C49329 +
            (C22562 * C1520 - C22563 * C1515 - C22562 * C1521 + C22556 * C1527 +
             C22564 * C1991 - C22565 * C1987 - C22564 * C1992 +
             C49098 * C1996) *
                C49316 +
            (C22562 * C1518 - C22563 * C1514 - C22562 * C1519 + C22556 * C1526 +
             C22564 * C1993 - C22565 * C1988 - C22564 * C1994 +
             C49098 * C1997) *
                C49289) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C48938 * C49340 +
           (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
           (C26634 + C26633) * C48938 * C49282) *
              C49024 * C600 -
          ((C22564 * C10328 - C22565 * C10326 - C22564 * C10329 +
            C49098 * C10332 + C22562 * C3343 - C22563 * C3340 - C22562 * C3344 +
            C22556 * C3349) *
               C48938 * C49282 +
           (C26082 + C26081) * C48938 * C49328 +
           (C26080 + C26079) * C48938 * C49337 +
           (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
            C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
               C48938 * C49340) *
              C49024 * C601 +
          ((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
            C22564 * C1318 - C22565 * C1312 - C22564 * C1319 + C49098 * C1324) *
               C48938 * C49340 +
           (C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
            C22564 * C1989 - C22565 * C1986 - C22564 * C1990 + C49098 * C1995) *
               C48938 * C49337 +
           (C22562 * C2408 - C22563 * C2401 - C22562 * C2409 + C22556 * C2419 +
            C22564 * C9914 - C22565 * C9912 - C22564 * C9915 + C49098 * C9918) *
               C48938 * C49328 +
           (C22562 * C10328 - C22563 * C10326 - C22562 * C10329 +
            C22556 * C10332 + C22564 * C10800 - C22565 * C10799 -
            C22564 * C10801 + C49098 * C10802) *
               C48938 * C49282) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C398 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C534 +
          (((C41959 + C41960 + C41961 + C41962) * C48938 * C31428 +
            (C23788 * C2406 - C23789 * C2400 - C23788 * C2407 + C49339 * C2418 +
             C23790 * C2408 - C23791 * C2401 - C23790 * C2409 + C49335 * C2419 +
             C23792 * C9914 - C23793 * C9912 - C23792 * C9915 + C49325 * C9918 +
             C23794 * C9916 - C23795 * C9913 - C23794 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C41962 + C41961 + C41960 + C41959) * C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C534 +
          ((((C26079 + C26080) * C49329 + (C25280 + C25279) * C49316 +
             (C28356 + C28355) * C49289) *
                C31428 +
            ((C26081 + C26082) * C49329 + (C25278 + C25277) * C49316 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C398 -
           ((C22564 * C11249 - C22565 * C11247 - C22564 * C11250 +
             C49098 * C11253 + C22562 * C3777 - C22563 * C3774 -
             C22562 * C3778 + C22556 * C3783) *
                C48938 * C49282 +
            (C26633 + C26634) * C48938 * C49328 +
            (C25518 + C25517) * C48938 * C49337 +
            (C25516 + C25515) * C48938 * C49340) *
               C49297) *
              C534 +
          (((C26079 + C26080) * C48938 * C49340 +
            (C26081 + C26082) * C48938 * C49337 +
            (C43077 + C43078) * C48938 * C49328 +
            (C22562 * C11249 - C22563 * C11247 - C22562 * C11250 +
             C22556 * C11253 + C22564 * C11251 - C22565 * C11248 -
             C22564 * C11252 + C49098 * C11254) *
                C48938 * C49282) *
               C49297 -
           ((C43078 + C43077) * C48938 * C49282 +
            (C26082 + C26081) * C48938 * C49328 +
            (C26080 + C26079) * C48938 * C49337 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C48938 * C49340) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C808 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C49007 * C536 +
          (((C24168 + C24167 + C24166 + C24165) * C48938 * C31428 +
            (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
             C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
             C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
             C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C49007 * C536 +
          (((C25483 * C49329 + C28148 * C49316 + (C22964 + C22963) * C49289) *
                C31428 +
            (C25492 * C49329 + (C25058 + C25057) * C49316 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C808 -
           ((C22564 * C11249 - C22565 * C11247 - C22564 * C11250 +
             C49098 * C11253 + C22562 * C3777 - C22563 * C3774 -
             C22562 * C3778 + C22556 * C3783) *
                C48938 * C49282 +
            (C26633 + C26634) * C48938 * C49328 +
            (C25518 + C25517) * C48938 * C49337 +
            (C25516 + C25515) * C48938 * C49340) *
               C49297) *
              C49007 * C536 +
          ((C25483 * C48938 * C49340 + C25492 * C48938 * C49337 +
            (C25520 + C25519) * C48938 * C49328 +
            (C22562 * C3779 - C22563 * C3775 - C22562 * C3780 + C22556 * C3784 +
             C22564 * C17981 - C22565 * C17980 - C22564 * C17982 +
             C49098 * C17983) *
                C48938 * C49282) *
               C49297 -
           ((C25519 + C25520) * C48938 * C49282 + C25501 * C48938 * C49328 +
            C25502 * C48938 * C49337 + (C22616 + C22615) * C48938 * C49340) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C808 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C260 +
          (((C41959 + C41960 + C41961 + C41962) * C48938 * C31428 +
            (C23788 * C2406 - C23789 * C2400 - C23788 * C2407 + C49339 * C2418 +
             C23790 * C2408 - C23791 * C2401 - C23790 * C2409 + C49335 * C2419 +
             C23792 * C9914 - C23793 * C9912 - C23792 * C9915 + C49325 * C9918 +
             C23794 * C9916 - C23795 * C9913 - C23794 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C41962 + C41961 + C41960 + C41959) * C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C260 +
          ((((C26079 + C26080) * C49329 + (C25280 + C25279) * C49316 +
             (C28356 + C28355) * C49289) *
                C31428 +
            ((C26081 + C26082) * C49329 + (C25278 + C25277) * C49316 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C48938 * C49340 +
            (C25515 + C25516) * C48938 * C49337 + C26617 * C48938 * C49328 +
            (C26634 + C26633) * C48938 * C49282) *
               C808 -
           ((C22564 * C11249 - C22565 * C11247 - C22564 * C11250 +
             C49098 * C11253 + C22562 * C3777 - C22563 * C3774 -
             C22562 * C3778 + C22556 * C3783) *
                C48938 * C49282 +
            (C26633 + C26634) * C48938 * C49328 +
            (C25518 + C25517) * C48938 * C49337 +
            (C25516 + C25515) * C48938 * C49340) *
               C49297) *
              C260 +
          (((C26079 + C26080) * C48938 * C49340 +
            (C26081 + C26082) * C48938 * C49337 +
            (C43077 + C43078) * C48938 * C49328 +
            (C22562 * C11249 - C22563 * C11247 - C22562 * C11250 +
             C22556 * C11253 + C22564 * C11251 - C22565 * C11248 -
             C22564 * C11252 + C49098 * C11254) *
                C48938 * C49282) *
               C49297 -
           ((C43078 + C43077) * C48938 * C49282 +
            (C26082 + C26081) * C48938 * C49328 +
            (C26080 + C26079) * C48938 * C49337 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C48938 * C49340) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
              C954 -
          ((C42345 + C42346 + C42347 + C42348) * C48938 * C49140 +
           (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
              C955 +
          ((C42348 + C42347 + C42346 + C42345) * C48938 * C31428 +
           (C23788 * C2890 - C23789 * C2884 - C23788 * C2891 + C49339 * C2896 +
            C23790 * C3343 - C23791 * C3340 - C23790 * C3344 + C49335 * C3349 +
            C23792 * C10328 - C23793 * C10326 - C23792 * C10329 +
            C49325 * C10332 + C23794 * C10800 - C23795 * C10799 -
            C23794 * C10801 + C49275 * C10802) *
               C48938 * C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C954 -
          (((C25057 + C25058) * C49289 + C25501 * C49316 +
            (C25518 + C25517) * C49329) *
               C49140 +
           (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
               C31428) *
              C955 +
          ((C26617 * C49329 + C25492 * C49316 + (C25058 + C25057) * C49289) *
               C31428 +
           ((C26634 + C26633) * C49329 + (C25520 + C25519) * C49316 +
            (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 + C22556 * C2894 +
             C22564 * C3347 - C22565 * C3342 - C22564 * C3348 +
             C49098 * C3351) *
                C49289) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
            C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
               C48938 * C49340 +
           (C25515 + C25516) * C48938 * C49337 + C43437 * C49328 +
           C43447 * C49282) *
              C954 -
          ((C43452 + C43453) * C48938 * C49282 +
           (C26633 + C26634) * C48938 * C49328 +
           (C25518 + C25517) * C48938 * C49337 +
           (C25516 + C25515) * C48938 * C49340) *
              C955 +
          (C43437 * C49340 + C43447 * C49337 +
           (C43453 + C43452) * C48938 * C49328 +
           (C22562 * C18068 - C22563 * C18066 - C22562 * C18069 +
            C22556 * C18072 + C22564 * C18323 - C22565 * C18322 -
            C22564 * C18324 + C49098 * C18325) *
               C48938 * C49282) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49245 +
            (C22615 + C22616) * C48948) *
               C49136 +
           ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
           (C26617 * C49245 + C25492 * C48948) * C36863) *
              C49024 * C49007 * C110 -
          (((C25057 + C25058) * C48948 + C25501 * C49245) * C36863 +
           (C28551 * C48948 + C25502 * C49245) * C49143 +
           ((C22618 + C22617) * C48948 + (C22616 + C22615) * C49245) * C49136) *
              C49024 * C49007 * C111 +
          ((C22623 * C49245 + C22624 * C48948) * C49136 +
           (C28148 * C49245 + (C22964 + C22963) * C48948) * C49143 +
           ((C25058 + C25057) * C49245 +
            (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
             C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
             C49098 * C2707) *
                C48948) *
               C36863) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C49024 * C260 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C49245) * C36863 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C49245) * C49143 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49245) *
                C49136) *
               C49024 * C49295) *
              C262 +
          ((((C22796 + C22795) * C49245 + (C22794 + C22793) * C48948) * C49136 +
            ((C25280 + C25279) * C49245 + (C28356 + C28355) * C48948) * C49143 +
            ((C25278 + C25277) * C49245 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C48948) *
                C36863) *
               C49024 * C49295 -
           (((C25057 + C25058) * C48948 + C25501 * C49245) * C36863 +
            (C28551 * C48948 + C25502 * C49245) * C49143 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C49245) *
                C49136) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C398 -
           (((C25519 + C25520) * C48948 + (C26633 + C26634) * C49245) * C36863 +
            (C25501 * C48948 + (C25518 + C25517) * C49245) * C49143 +
            (C25502 * C48948 + (C25516 + C25515) * C49245) * C49136) *
               C49297) *
              C49007 * C262 +
          (((C25483 * C49245 + C28148 * C48948) * C49136 +
            (C25492 * C49245 + (C25058 + C25057) * C48948) * C49143 +
            ((C25520 + C25519) * C49245 +
             (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 +
              C22556 * C2894 + C22564 * C3347 - C22565 * C3342 -
              C22564 * C3348 + C49098 * C3351) *
                 C48948) *
                C36863) *
               C49297 -
           (((C25057 + C25058) * C48948 + C25501 * C49245) * C36863 +
            (C28551 * C48948 + C25502 * C49245) * C49143 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C49245) *
                C49136) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C49024 * C534 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C49245) * C36863 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C49245) * C49143 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49245) *
                C49136) *
               C49024 * C49295) *
              C536 +
          ((((C22796 + C22795) * C49245 + (C22794 + C22793) * C48948) * C49136 +
            ((C25280 + C25279) * C49245 + (C28356 + C28355) * C48948) * C49143 +
            ((C25278 + C25277) * C49245 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C48948) *
                C36863) *
               C49024 * C49295 -
           (((C25057 + C25058) * C48948 + C25501 * C49245) * C36863 +
            (C28551 * C48948 + C25502 * C49245) * C49143 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C49245) *
                C49136) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49245 +
            (C22615 + C22616) * C48948) *
               C49136 +
           ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
           (C26617 * C49245 + C25492 * C48948) * C36863) *
              C49024 * C600 -
          (((C25277 + C25278) * C48948 + (C26082 + C26081) * C49245) * C36863 +
           ((C25279 + C25280) * C48948 + (C26080 + C26079) * C49245) * C49143 +
           ((C22795 + C22796) * C48948 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49245) *
               C49136) *
              C49024 * C601 +
          (((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
             C22564 * C1318 - C22565 * C1312 - C22564 * C1319 +
             C49098 * C1324) *
                C49245 +
            (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
             C22564 * C1316 - C22565 * C1311 - C22564 * C1317 +
             C49098 * C1323) *
                C48948) *
               C49136 +
           ((C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
             C22564 * C1989 - C22565 * C1986 - C22564 * C1990 +
             C49098 * C1995) *
                C49245 +
            (C22562 * C1520 - C22563 * C1515 - C22562 * C1521 + C22556 * C1527 +
             C22564 * C1991 - C22565 * C1987 - C22564 * C1992 +
             C49098 * C1996) *
                C48948) *
               C49143 +
           ((C22562 * C2408 - C22563 * C2401 - C22562 * C2409 + C22556 * C2419 +
             C22564 * C9914 - C22565 * C9912 - C22564 * C9915 +
             C49098 * C9918) *
                C49245 +
            (C22562 * C2412 - C22563 * C2403 - C22562 * C2413 + C22556 * C2421 +
             C22564 * C10177 - C22565 * C10176 - C22564 * C10178 +
             C49098 * C10179) *
                C48948) *
               C36863) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C398 -
           (((C25519 + C25520) * C48948 + (C26633 + C26634) * C49245) * C36863 +
            (C25501 * C48948 + (C25518 + C25517) * C49245) * C49143 +
            (C25502 * C48948 + (C25516 + C25515) * C49245) * C49136) *
               C49297) *
              C534 +
          ((((C26079 + C26080) * C49245 + (C25280 + C25279) * C48948) * C49136 +
            ((C26081 + C26082) * C49245 + (C25278 + C25277) * C48948) * C49143 +
            ((C43077 + C43078) * C49245 +
             (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 +
              C22556 * C3350 + C22564 * C10330 - C22565 * C10327 -
              C22564 * C10331 + C49098 * C10333) *
                 C48948) *
                C36863) *
               C49297 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C49245) * C36863 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C49245) * C49143 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49245) *
                C49136) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C808 -
           (((C25519 + C25520) * C48948 + (C26633 + C26634) * C49245) * C36863 +
            (C25501 * C48948 + (C25518 + C25517) * C49245) * C49143 +
            (C25502 * C48948 + (C25516 + C25515) * C49245) * C49136) *
               C49297) *
              C49007 * C536 +
          (((C25483 * C49245 + C28148 * C48948) * C49136 +
            (C25492 * C49245 + (C25058 + C25057) * C48948) * C49143 +
            ((C25520 + C25519) * C49245 +
             (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 +
              C22556 * C2894 + C22564 * C3347 - C22565 * C3342 -
              C22564 * C3348 + C49098 * C3351) *
                 C48948) *
                C36863) *
               C49297 -
           (((C25057 + C25058) * C48948 + C25501 * C49245) * C36863 +
            (C28551 * C48948 + C25502 * C49245) * C49143 +
            ((C22618 + C22617) * C48948 + (C22616 + C22615) * C49245) *
                C49136) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49245 +
             (C22615 + C22616) * C48948) *
                C49136 +
            ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
            (C26617 * C49245 + C25492 * C48948) * C36863) *
               C808 -
           (((C25519 + C25520) * C48948 + (C26633 + C26634) * C49245) * C36863 +
            (C25501 * C48948 + (C25518 + C25517) * C49245) * C49143 +
            (C25502 * C48948 + (C25516 + C25515) * C49245) * C49136) *
               C49297) *
              C260 +
          ((((C26079 + C26080) * C49245 + (C25280 + C25279) * C48948) * C49136 +
            ((C26081 + C26082) * C49245 + (C25278 + C25277) * C48948) * C49143 +
            ((C43077 + C43078) * C49245 +
             (C22562 * C3345 - C22563 * C3341 - C22562 * C3346 +
              C22556 * C3350 + C22564 * C10330 - C22565 * C10327 -
              C22564 * C10331 + C49098 * C10333) *
                 C48948) *
                C36863) *
               C49297 -
           (((C25277 + C25278) * C48948 + (C26082 + C26081) * C49245) * C36863 +
            ((C25279 + C25280) * C48948 + (C26080 + C26079) * C49245) * C49143 +
            ((C22795 + C22796) * C48948 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49245) *
                C49136) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49245 +
            (C22615 + C22616) * C48948) *
               C49136 +
           ((C25515 + C25516) * C49245 + C25483 * C48948) * C49143 +
           C46660 * C36863) *
              C954 -
          (((C25519 + C25520) * C48948 + (C26633 + C26634) * C49245) * C36863 +
           (C25501 * C48948 + (C25518 + C25517) * C49245) * C49143 +
           (C25502 * C48948 + (C25516 + C25515) * C49245) * C49136) *
              C955 +
          (C46660 * C49136 +
           (C43438 * C49245 + (C25520 + C25519) * C48948) * C49143 +
           ((C43453 + C43452) * C49245 +
            (C22562 * C3779 - C22563 * C3775 - C22562 * C3780 + C22556 * C3784 +
             C22564 * C17981 - C22565 * C17980 - C22564 * C17982 +
             C49098 * C17983) *
                C48948) *
               C36863) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
               C49140 +
           ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
            (C22616 + C22615) * C49329) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C22623 * C49329 + C22624 * C49316 + (C22622 + C22621) * C49289) *
               C31428 +
           (C28148 * C49329 + (C22964 + C22963) * C49316 +
            (C22562 * C406 - C22563 * C400 - C22562 * C407 + C22556 * C418 +
             C22564 * C719 - C22565 * C710 - C22564 * C720 + C49098 * C725) *
                C49289) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422 +
            C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
            C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
            C23794 * C1989 - C23795 * C1986 - C23794 * C1990 + C49275 * C1995) *
               C48938 * C49140) *
              C49024 * C49007 * C110 -
          ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
           (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
              C49024 * C49007 * C111 +
          ((C23852 + C23851 + C23850 + C23849) * C48938 * C31428 +
           (C23788 * C410 - C23789 * C402 - C23788 * C411 + C49339 * C420 +
            C23790 * C715 - C23791 * C708 - C23790 * C716 + C49335 * C723 +
            C23792 * C1518 - C23793 * C1514 - C23792 * C1519 + C49325 * C1526 +
            C23794 * C1993 - C23795 * C1988 - C23794 * C1994 + C49275 * C1997) *
               C48938 * C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C49024 * C260 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C22796 + C22795) * C49329 + (C22794 + C22793) * C49316 +
             (C22792 + C22791) * C49289) *
                C31428 +
            ((C25280 + C25279) * C49329 + (C28356 + C28355) * C49316 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C23788 * C414 - C23789 * C404 - C23788 * C415 + C49339 * C422 +
             C23790 * C711 - C23791 * C706 - C23790 * C712 + C49335 * C721 +
             C23792 * C1522 - C23793 * C1516 - C23792 * C1523 + C49325 * C1528 +
             C23794 * C1989 - C23795 * C1986 - C23794 * C1990 +
             C49275 * C1995) *
                C48938 * C49140) *
               C49024 * C260 -
           ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
                C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C49024 * C49295) *
              C262 +
          (((C24010 + C24009 + C24008 + C24007) * C48938 * C31428 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C49007 * C262 +
          (((C25483 * C49329 + C28148 * C49316 + (C22964 + C22963) * C49289) *
                C31428 +
            (C25492 * C49329 + (C25058 + C25057) * C49316 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C398 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C49007 * C262 +
          (((C24168 + C24167 + C24166 + C24165) * C48938 * C31428 +
            (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
             C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
             C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
             C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C49024 * C534 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C22796 + C22795) * C49329 + (C22794 + C22793) * C49316 +
             (C22792 + C22791) * C49289) *
                C31428 +
            ((C25280 + C25279) * C49329 + (C28356 + C28355) * C49316 +
             (C22562 * C717 - C22563 * C709 - C22562 * C718 + C22556 * C724 +
              C22564 * C1524 - C22565 * C1517 - C22564 * C1525 +
              C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C49024 * C534 -
           ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
             C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
             C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
             C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
                C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C49024 * C49295) *
              C536 +
          (((C24010 + C24009 + C24008 + C24007) * C48938 * C31428 +
            (C23788 * C713 - C23789 * C707 - C23788 * C714 + C49339 * C722 +
             C23790 * C1520 - C23791 * C1515 - C23790 * C1521 + C49335 * C1527 +
             C23792 * C1991 - C23793 * C1987 - C23792 * C1992 + C49325 * C1996 +
             C23794 * C9448 - C23795 * C9445 - C23794 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C49024 * C600 -
          (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
            (C26080 + C26079) * C49329) *
               C49140 +
           ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
            (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
             C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                C49329) *
               C31428) *
              C49024 * C601 +
          (((C22562 * C609 - C22563 * C604 - C22562 * C610 + C22556 * C619 +
             C22564 * C1318 - C22565 * C1312 - C22564 * C1319 +
             C49098 * C1324) *
                C49329 +
            (C22562 * C611 - C22563 * C605 - C22562 * C612 + C22556 * C620 +
             C22564 * C1316 - C22565 * C1311 - C22564 * C1317 +
             C49098 * C1323) *
                C49316 +
            (C22562 * C613 - C22563 * C606 - C22562 * C614 + C22556 * C621 +
             C22564 * C1314 - C22565 * C1310 - C22564 * C1315 +
             C49098 * C1322) *
                C49289) *
               C31428 +
           ((C22562 * C1522 - C22563 * C1516 - C22562 * C1523 + C22556 * C1528 +
             C22564 * C1989 - C22565 * C1986 - C22564 * C1990 +
             C49098 * C1995) *
                C49329 +
            (C22562 * C1520 - C22563 * C1515 - C22562 * C1521 + C22556 * C1527 +
             C22564 * C1991 - C22565 * C1987 - C22564 * C1992 +
             C49098 * C1996) *
                C49316 +
            (C22562 * C1518 - C22563 * C1514 - C22562 * C1519 + C22556 * C1526 +
             C22564 * C1993 - C22565 * C1988 - C22564 * C1994 +
             C49098 * C1997) *
                C49289) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
              C49024 * C600 -
          ((C23794 * C9446 - C23795 * C9444 - C23794 * C9447 + C49275 * C9450 +
            C23792 * C1989 - C23793 * C1986 - C23792 * C1990 + C49325 * C1995 +
            C23790 * C1522 - C23791 * C1516 - C23790 * C1523 + C49335 * C1528 +
            C23788 * C711 - C23789 * C706 - C23788 * C712 + C49339 * C721) *
               C48938 * C49140 +
           (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
            C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
            C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
            C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
               C48938 * C31428) *
              C49024 * C601 +
          ((C23788 * C609 - C23789 * C604 - C23788 * C610 + C49339 * C619 +
            C23790 * C1318 - C23791 * C1312 - C23790 * C1319 + C49335 * C1324 +
            C23792 * C1831 - C23793 * C1828 - C23792 * C1832 + C49325 * C1837 +
            C23794 * C9356 - C23795 * C9354 - C23794 * C9357 + C49275 * C9360) *
               C48938 * C31428 +
           (C23788 * C1522 - C23789 * C1516 - C23788 * C1523 + C49339 * C1528 +
            C23790 * C1989 - C23791 * C1986 - C23790 * C1990 + C49335 * C1995 +
            C23792 * C9446 - C23793 * C9444 - C23792 * C9447 + C49325 * C9450 +
            C23794 * C9683 - C23795 * C9682 - C23794 * C9684 + C49275 * C9685) *
               C48938 * C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C398 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C534 +
          ((((C26079 + C26080) * C49329 + (C25280 + C25279) * C49316 +
             (C28356 + C28355) * C49289) *
                C31428 +
            ((C26081 + C26082) * C49329 + (C25278 + C25277) * C49316 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C398 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C534 +
          (((C41959 + C41960 + C41961 + C41962) * C48938 * C31428 +
            (C23788 * C2406 - C23789 * C2400 - C23788 * C2407 + C49339 * C2418 +
             C23790 * C2408 - C23791 * C2401 - C23790 * C2409 + C49335 * C2419 +
             C23792 * C9914 - C23793 * C9912 - C23792 * C9915 + C49325 * C9918 +
             C23794 * C9916 - C23795 * C9913 - C23794 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C41962 + C41961 + C41960 + C41959) * C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C49007 * C536 +
          (((C25483 * C49329 + C28148 * C49316 + (C22964 + C22963) * C49289) *
                C31428 +
            (C25492 * C49329 + (C25058 + C25057) * C49316 +
             (C22562 * C968 - C22563 * C960 - C22562 * C969 + C22556 * C975 +
              C22564 * C2705 - C22565 * C2704 - C22564 * C2706 +
              C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C22963 + C22964) * C49289 + C28551 * C49316 + C25502 * C49329) *
                C49140 +
            ((C22620 + C22619) * C49289 + (C22618 + C22617) * C49316 +
             (C22616 + C22615) * C49329) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C808 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C49007 * C536 +
          (((C24168 + C24167 + C24166 + C24165) * C48938 * C31428 +
            (C23788 * C964 - C23789 * C958 - C23788 * C965 + C49339 * C973 +
             C23790 * C2410 - C23791 * C2402 - C23790 * C2411 + C49335 * C2420 +
             C23792 * C2412 - C23793 * C2403 - C23792 * C2413 + C49325 * C2421 +
             C23794 * C10177 - C23795 * C10176 - C23794 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C24165 + C24166 + C24167 + C24168) * C48938 * C49140 +
            (C23848 + C23847 + C23846 + C23845) * C48938 * C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
              C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                 C49329 +
             (C22615 + C22616) * C49316 + C22623 * C49289) *
                C31428 +
            ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
                C49140) *
               C808 -
           (((C25057 + C25058) * C49289 + C25501 * C49316 +
             (C25518 + C25517) * C49329) *
                C49140 +
            (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
                C31428) *
               C49297) *
              C260 +
          ((((C26079 + C26080) * C49329 + (C25280 + C25279) * C49316 +
             (C28356 + C28355) * C49289) *
                C31428 +
            ((C26081 + C26082) * C49329 + (C25278 + C25277) * C49316 +
             (C22562 * C2414 - C22563 * C2404 - C22562 * C2415 +
              C22556 * C2422 + C22564 * C2416 - C22565 * C2405 -
              C22564 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C28355 + C28356) * C49289 + (C25279 + C25280) * C49316 +
             (C26080 + C26079) * C49329) *
                C49140 +
            ((C22793 + C22794) * C49289 + (C22795 + C22796) * C49316 +
             (C22564 * C609 - C22565 * C604 - C22564 * C610 + C49098 * C619 +
              C22562 * C278 - C22563 * C268 - C22562 * C279 + C22556 * C286) *
                 C49329) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
             C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
             C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
             C23794 * C1318 - C23795 * C1312 - C23794 * C1319 +
             C49275 * C1324) *
                C48938 * C31428 +
            (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
               C808 -
           ((C23794 * C9914 - C23795 * C9912 - C23794 * C9915 + C49275 * C9918 +
             C23792 * C2408 - C23793 * C2401 - C23792 * C2409 + C49325 * C2419 +
             C23790 * C2406 - C23791 * C2400 - C23790 * C2407 + C49335 * C2418 +
             C23788 * C962 - C23789 * C957 - C23788 * C963 + C49339 * C972) *
                C48938 * C49140 +
            (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
               C49297) *
              C260 +
          (((C41959 + C41960 + C41961 + C41962) * C48938 * C31428 +
            (C23788 * C2406 - C23789 * C2400 - C23788 * C2407 + C49339 * C2418 +
             C23790 * C2408 - C23791 * C2401 - C23790 * C2409 + C49335 * C2419 +
             C23792 * C9914 - C23793 * C9912 - C23792 * C9915 + C49325 * C9918 +
             C23794 * C9916 - C23795 * C9913 - C23794 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C41962 + C41961 + C41960 + C41959) * C48938 * C49140 +
            (C23794 * C1831 - C23795 * C1828 - C23794 * C1832 + C49275 * C1837 +
             C23792 * C1318 - C23793 * C1312 - C23792 * C1319 + C49325 * C1324 +
             C23790 * C609 - C23791 * C604 - C23790 * C610 + C49335 * C619 +
             C23788 * C278 - C23789 * C268 - C23788 * C279 + C49339 * C286) *
                C48938 * C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C22562 * C122 - C22563 * C115 - C22562 * C123 + C22556 * C136 +
             C22564 * C278 - C22565 * C268 - C22564 * C279 + C49098 * C286) *
                C49329 +
            (C22615 + C22616) * C49316 + C22623 * C49289) *
               C31428 +
           ((C25515 + C25516) * C49329 + C25483 * C49316 + C28148 * C49289) *
               C49140) *
              C954 -
          (((C25057 + C25058) * C49289 + C25501 * C49316 +
            (C25518 + C25517) * C49329) *
               C49140 +
           (C28551 * C49289 + C25502 * C49316 + (C25516 + C25515) * C49329) *
               C31428) *
              C955 +
          ((C26617 * C49329 + C25492 * C49316 + (C25058 + C25057) * C49289) *
               C31428 +
           ((C26634 + C26633) * C49329 + (C25520 + C25519) * C49316 +
            (C22562 * C2886 - C22563 * C2882 - C22562 * C2887 + C22556 * C2894 +
             C22564 * C3347 - C22565 * C3342 - C22564 * C3348 +
             C49098 * C3351) *
                C49289) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C23788 * C122 - C23789 * C115 - C23788 * C123 + C49339 * C136 +
            C23790 * C278 - C23791 * C268 - C23790 * C279 + C49335 * C286 +
            C23792 * C609 - C23793 * C604 - C23792 * C610 + C49325 * C619 +
            C23794 * C1318 - C23795 * C1312 - C23794 * C1319 + C49275 * C1324) *
               C48938 * C31428 +
           (C41573 + C41574 + C41575 + C41576) * C48938 * C49140) *
              C954 -
          ((C42345 + C42346 + C42347 + C42348) * C48938 * C49140 +
           (C41576 + C41575 + C41574 + C41573) * C48938 * C31428) *
              C955 +
          ((C42348 + C42347 + C42346 + C42345) * C48938 * C31428 +
           (C23788 * C2890 - C23789 * C2884 - C23788 * C2891 + C49339 * C2896 +
            C23790 * C3343 - C23791 * C3340 - C23790 * C3344 + C49335 * C3349 +
            C23792 * C10328 - C23793 * C10326 - C23792 * C10329 +
            C49325 * C10332 + C23794 * C10800 - C23795 * C10799 -
            C23794 * C10801 + C49275 * C10802) *
               C48938 * C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C49024 * C49007 * C110 -
          ((C11444 + C11445 + C11446 + C11447) * C48948 +
           (C11443 + C11442 + C11441 + C11440) * C49245) *
              C49053 * C49024 * C49007 * C111 +
          ((C11447 + C11446 + C11445 + C11444) * C49245 +
           (C11383 * C128 - C11384 * C118 - C11383 * C129 + C11377 * C139 +
            C11385 * C272 - C11386 * C265 - C11385 * C273 + C11378 * C283 +
            C11387 * C615 - C11388 * C607 - C11387 * C616 + C11379 * C622 +
            C11389 * C1320 - C11390 * C1313 - C11389 * C1321 + C49275 * C1325) *
               C48948) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C49024 * C49007 * C110 -
          ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
           (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
              C49053 * C49024 * C49007 * C111 +
          (C3963 * C3898 + C3964 * C3899 + (C3962 + C3961) * C3900 +
           (C3902 * C132 - C3903 * C120 - C3902 * C133 + C49266 * C141 +
            C3904 * C280 - C3905 * C269 - C3904 * C281 + C49098 * C287) *
               C49267) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C49245 +
            (C3955 + C3956) * C48948) *
               C15374 +
           ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
           ((C7827 + C7826) * C49245 + (C6731 + C6730) * C48948) * C49303) *
              C49024 * C49007 * C110 -
          (((C6728 + C6729) * C48948 + (C6730 + C6731) * C49245) * C49303 +
           (C6712 * C48948 + C6713 * C49245) * C15375 +
           ((C3958 + C3957) * C48948 + (C3956 + C3955) * C49245) * C15374) *
              C49024 * C49007 * C111 +
          ((C3963 * C49245 + C3964 * C48948) * C15374 +
           (C6270 * C49245 + (C4304 + C4303) * C48948) * C15375 +
           ((C6729 + C6728) * C49245 +
            (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
             C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                C48948) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C49024 * C260 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C11605 + C11604 + C11603 + C11602) * C49245 +
            (C11383 * C274 - C11384 * C266 - C11383 * C275 + C11377 * C284 +
             C11385 * C613 - C11386 * C606 - C11385 * C614 + C11378 * C621 +
             C11387 * C1314 - C11388 * C1310 - C11387 * C1315 + C11379 * C1322 +
             C11389 * C1835 - C11390 * C1830 - C11389 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C49024 * C260 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C4136 + C4135) * C3898 + (C4134 + C4133) * C3899 +
            (C4132 + C4131) * C3900 +
            (C3902 * C270 - C3903 * C264 - C3902 * C271 + C49266 * C282 +
             C3904 * C617 - C3905 * C608 - C3904 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + (C6731 + C6730) * C48948) * C49303) *
               C49024 * C260 -
           (((C18935 + C18936) * C48948 +
             (C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419 +
              C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418) *
                 C49245) *
                C49303 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C49245) * C15375 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C49245) *
                C15374) *
               C49024 * C49295) *
              C262 +
          ((((C4136 + C4135) * C49245 + (C4134 + C4133) * C48948) * C15374 +
            ((C6492 + C6491) * C49245 + (C6490 + C6489) * C48948) * C15375 +
            ((C18936 + C18935) * C49245 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C48948) *
                C49303) *
               C49024 * C49295 -
           (((C6728 + C6729) * C48948 + (C6730 + C6731) * C49245) * C49303 +
            (C6712 * C48948 + C6713 * C49245) * C15375 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C49245) * C15374) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C398 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C11763 + C11762 + C11761 + C11760) * C49245 +
            (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
             C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
             C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
             C11389 * C1993 - C11390 * C1988 - C11389 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C398 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C4308 + C4307) * C3898 + (C4306 + C4305) * C3899 +
            (C4304 + C4303) * C3900 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
               C398 -
           (((C19145 + C19146) * C48948 +
             (C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349 +
              C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896) *
                 C49245) *
                C49303 +
            (C19140 * C48948 + (C7826 + C7827) * C49245) * C15375 +
            (C6713 * C48948 + (C6727 + C6726) * C49245) * C15374) *
               C49297) *
              C49007 * C262 +
          (((C6695 * C49245 + C6270 * C48948) * C15374 +
            (C19131 * C49245 + (C6729 + C6728) * C48948) * C15375 +
            ((C19146 + C19145) * C49245 +
             (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
              C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                 C48948) *
                C49303) *
               C49297 -
           (((C6728 + C6729) * C48948 + C19140 * C49245) * C49303 +
            (C6712 * C48948 + C6713 * C49245) * C15375 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C49245) * C15374) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C49024 * C534 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C11605 + C11604 + C11603 + C11602) * C49245 +
            (C11383 * C274 - C11384 * C266 - C11383 * C275 + C11377 * C284 +
             C11385 * C613 - C11386 * C606 - C11385 * C614 + C11378 * C621 +
             C11387 * C1314 - C11388 * C1310 - C11387 * C1315 + C11379 * C1322 +
             C11389 * C1835 - C11390 * C1830 - C11389 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C49024 * C534 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C4136 + C4135) * C3898 + (C4134 + C4133) * C3899 +
            (C4132 + C4131) * C3900 +
            (C3902 * C270 - C3903 * C264 - C3902 * C271 + C49266 * C282 +
             C3904 * C617 - C3905 * C608 - C3904 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
               C49024 * C534 -
           (((C18935 + C18936) * C48948 +
             (C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419 +
              C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418) *
                 C49245) *
                C49303 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C49245) * C15375 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C49245) *
                C15374) *
               C49024 * C49295) *
              C536 +
          ((((C4136 + C4135) * C49245 + (C4134 + C4133) * C48948) * C15374 +
            ((C6492 + C6491) * C49245 + (C6490 + C6489) * C48948) * C15375 +
            ((C18936 + C18935) * C49245 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C48948) *
                C49303) *
               C49024 * C49295 -
           (((C6728 + C6729) * C48948 + C19140 * C49245) * C49303 +
            (C6712 * C48948 + C6713 * C49245) * C15375 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C49245) * C15374) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C49024 * C600 -
          ((C11602 + C11603 + C11604 + C11605) * C48948 +
           (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
            C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
            C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
            C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
               C49245) *
              C49053 * C49024 * C601 +
          ((C11383 * C609 - C11384 * C604 - C11383 * C610 + C11377 * C619 +
            C11385 * C1318 - C11386 * C1312 - C11385 * C1319 + C11378 * C1324 +
            C11387 * C1831 - C11388 * C1828 - C11387 * C1832 + C11379 * C1837 +
            C11389 * C9356 - C11390 * C9354 - C11389 * C9357 + C49275 * C9360) *
               C49245 +
           (C11383 * C611 - C11384 * C605 - C11383 * C612 + C11377 * C620 +
            C11385 * C1316 - C11386 * C1311 - C11385 * C1317 + C11378 * C1323 +
            C11387 * C1833 - C11388 * C1829 - C11387 * C1834 + C11379 * C1838 +
            C11389 * C9358 - C11390 * C9355 - C11389 * C9359 + C49275 * C9361) *
               C48948) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C49024 * C600 -
          ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
           (C4135 + C4136) * C3899 +
           (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
            C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
               C3898) *
              C49053 * C49024 * C601 +
          ((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
            C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
               C3898 +
           (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
            C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
               C3899 +
           (C3902 * C613 - C3903 * C606 - C3902 * C614 + C49266 * C621 +
            C3904 * C1314 - C3905 * C1310 - C3904 * C1315 + C49098 * C1322) *
               C3900 +
           (C3902 * C615 - C3903 * C607 - C3902 * C616 + C49266 * C622 +
            C3904 * C1320 - C3905 * C1313 - C3904 * C1321 + C49098 * C1325) *
               C49267) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C49245 +
            (C3955 + C3956) * C48948) *
               C15374 +
           ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
           ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
              C49024 * C600 -
          (((C18935 + C18936) * C48948 +
            (C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419 +
             C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418) *
                C49245) *
               C49303 +
           ((C6491 + C6492) * C48948 + (C7279 + C7278) * C49245) * C15375 +
           ((C4135 + C4136) * C48948 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C49245) *
               C15374) *
              C49024 * C601 +
          (((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
             C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
                C49245 +
            (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
             C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
                C48948) *
               C15374 +
           ((C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
             C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
                C49245 +
            (C3902 * C1520 - C3903 * C1515 - C3902 * C1521 + C49266 * C1527 +
             C3904 * C1991 - C3905 * C1987 - C3904 * C1992 + C49098 * C1996) *
                C48948) *
               C15375 +
           ((C3902 * C2408 - C3903 * C2401 - C3902 * C2409 + C49266 * C2419 +
             C3904 * C9914 - C3905 * C9912 - C3904 * C9915 + C49098 * C9918) *
                C49245 +
            (C3902 * C2412 - C3903 * C2403 - C3902 * C2413 + C49266 * C2421 +
             C3904 * C10177 - C3905 * C10176 - C3904 * C10178 +
             C49098 * C10179) *
                C48948) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C398 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C534 +
          (((C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11389 * C9446 - C11390 * C9444 - C11389 * C9447 +
             C49275 * C9450) *
                C49245 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C398 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C534 +
          (((C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721 +
             C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528) *
                C3898 +
            (C3902 * C713 - C3903 * C707 - C3902 * C714 + C49266 * C722 +
             C3904 * C1520 - C3905 * C1515 - C3904 * C1521 + C49098 * C1527) *
                C3899 +
            (C3902 * C715 - C3903 * C708 - C3902 * C716 + C49266 * C723 +
             C3904 * C1518 - C3905 * C1514 - C3904 * C1519 + C49098 * C1526) *
                C3900 +
            (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
             C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
               C398 -
           (((C19145 + C19146) * C48948 +
             (C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349 +
              C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896) *
                 C49245) *
                C49303 +
            (C19140 * C48948 + (C7826 + C7827) * C49245) * C15375 +
            (C6713 * C48948 + (C6727 + C6726) * C49245) * C15374) *
               C49297) *
              C534 +
          ((((C7278 + C7279) * C49245 + (C6492 + C6491) * C48948) * C15374 +
            ((C19693 + C19694) * C49245 + (C18936 + C18935) * C48948) * C15375 +
            ((C3902 * C3343 - C3903 * C3340 - C3902 * C3344 + C49266 * C3349 +
              C3904 * C10328 - C3905 * C10326 - C3904 * C10329 +
              C49098 * C10332) *
                 C49245 +
             (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
              C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
              C49098 * C10333) *
                 C48948) *
                C49303) *
               C49297 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C49245) * C49303 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C49245) * C15375 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C49245) *
                C15374) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C808 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C11763 + C11762 + C11761 + C11760) * C49245 +
            (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
             C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
             C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
             C11389 * C1993 - C11390 * C1988 - C11389 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C808 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C4308 + C4307) * C3898 + (C4306 + C4305) * C3899 +
            (C4304 + C4303) * C3900 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
               C808 -
           (((C19145 + C19146) * C48948 +
             (C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349 +
              C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896) *
                 C49245) *
                C49303 +
            (C19140 * C48948 + (C7826 + C7827) * C49245) * C15375 +
            (C6713 * C48948 + (C6727 + C6726) * C49245) * C15374) *
               C49297) *
              C49007 * C536 +
          (((C6695 * C49245 + C6270 * C48948) * C15374 +
            (C19131 * C49245 + (C6729 + C6728) * C48948) * C15375 +
            ((C19146 + C19145) * C49245 +
             (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
              C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                 C48948) *
                C49303) *
               C49297 -
           (((C6728 + C6729) * C48948 + C19140 * C49245) * C49303 +
            (C6712 * C48948 + C6713 * C49245) * C15375 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C49245) * C15374) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C808 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C260 +
          (((C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11389 * C9446 - C11390 * C9444 - C11389 * C9447 +
             C49275 * C9450) *
                C49245 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C808 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C260 +
          (((C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721 +
             C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528) *
                C3898 +
            (C3902 * C713 - C3903 * C707 - C3902 * C714 + C49266 * C722 +
             C3904 * C1520 - C3905 * C1515 - C3904 * C1521 + C49098 * C1527) *
                C3899 +
            (C3902 * C715 - C3903 * C708 - C3902 * C716 + C49266 * C723 +
             C3904 * C1518 - C3905 * C1514 - C3904 * C1519 + C49098 * C1526) *
                C3900 +
            (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
             C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C49245 +
             (C3955 + C3956) * C48948) *
                C15374 +
            ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
            ((C7827 + C7826) * C49245 + C19131 * C48948) * C49303) *
               C808 -
           (((C19145 + C19146) * C48948 +
             (C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349 +
              C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896) *
                 C49245) *
                C49303 +
            (C19140 * C48948 + (C7826 + C7827) * C49245) * C15375 +
            (C6713 * C48948 + (C6727 + C6726) * C49245) * C15374) *
               C49297) *
              C260 +
          ((((C7278 + C7279) * C49245 + (C6492 + C6491) * C48948) * C15374 +
            ((C19693 + C19694) * C49245 + (C18936 + C18935) * C48948) * C15375 +
            ((C3902 * C3343 - C3903 * C3340 - C3902 * C3344 + C49266 * C3349 +
              C3904 * C10328 - C3905 * C10326 - C3904 * C10329 +
              C49098 * C10332) *
                 C49245 +
             (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
              C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
              C49098 * C10333) *
                 C48948) *
                C49303) *
               C49297 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C49245) * C49303 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C49245) * C15375 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C49245) *
                C15374) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C954 -
          ((C11760 + C11761 + C11762 + C11763) * C48948 +
           (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
            C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
            C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
            C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
               C49245) *
              C49053 * C955 +
          ((C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972 +
            C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
            C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
            C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918) *
               C49245 +
           (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
            C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
            C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
            C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
            C49275 * C10179) *
               C48948) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C954 -
          ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
           (C4307 + C4308) * C3899 +
           (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
            C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
               C3898) *
              C49053 * C955 +
          ((C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972 +
            C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418) *
               C3898 +
           (C3902 * C964 - C3903 * C958 - C3902 * C965 + C49266 * C973 +
            C3904 * C2410 - C3905 * C2402 - C3904 * C2411 + C49098 * C2420) *
               C3899 +
           (C3902 * C966 - C3903 * C959 - C3902 * C967 + C49266 * C974 +
            C3904 * C2414 - C3905 * C2404 - C3904 * C2415 + C49098 * C2422) *
               C3900 +
           (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
            C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
               C49267) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C49245 +
            (C3955 + C3956) * C48948) *
               C15374 +
           ((C6726 + C6727) * C49245 + C6695 * C48948) * C15375 +
           C20242 * C49303) *
              C954 -
          (((C19145 + C19146) * C48948 + (C20245 + C20246) * C49245) * C49303 +
           (C19140 * C48948 + (C7826 + C7827) * C49245) * C15375 +
           (C6713 * C48948 + (C6727 + C6726) * C49245) * C15374) *
              C955 +
          (C20242 * C15374 +
           ((C20246 + C20245) * C49245 + (C19146 + C19145) * C48948) * C15375 +
           ((C3902 * C3777 - C3903 * C3774 - C3902 * C3778 + C49266 * C3783 +
             C3904 * C11249 - C3905 * C11247 - C3904 * C11250 +
             C49098 * C11253) *
                C49245 +
            (C3902 * C3779 - C3903 * C3775 - C3902 * C3780 + C49266 * C3784 +
             C3904 * C17981 - C3905 * C17980 - C3904 * C17982 +
             C49098 * C17983) *
                C48948) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422 +
            C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
            C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
            C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995) *
               C48938 * C49140) *
              C49024 * C49007 * C110 -
          ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
           (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
              C49024 * C49007 * C111 +
          ((C11447 + C11446 + C11445 + C11444) * C48938 * C49268 +
           (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
            C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
            C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
            C11389 * C1993 - C11390 * C1988 - C11389 * C1994 + C49275 * C1997) *
               C48938 * C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422 +
             C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721) *
                C1090 +
            (C4308 + C4307) * C1091 + C6270 * C49289) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C4303 + C4304) * C49289 + (C4305 + C4306) * C1091 +
            (C4307 + C4308) * C1090) *
               C49140 +
           ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
            (C3956 + C3955) * C1090) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C3963 * C1090 + C3964 * C1091 + (C3962 + C3961) * C49289) * C49268 +
           (C6270 * C1090 + (C4304 + C4303) * C1091 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49289) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C48938 * C20344 +
           (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
           (C20246 + C20245) * C48938 * C49282) *
              C49024 * C49007 * C110 -
          ((C19145 + C19146) * C48938 * C49282 + C19140 * C48938 * C20346 +
           C6713 * C48938 * C20345 + (C3956 + C3955) * C48938 * C20344) *
              C49024 * C49007 * C111 +
          (C3963 * C48938 * C20344 + C6270 * C48938 * C20345 +
           (C6729 + C6728) * C48938 * C20346 +
           (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
            C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
               C48938 * C49282) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11389 * C1989 - C11390 * C1986 - C11389 * C1990 +
             C49275 * C1995) *
                C48938 * C49140) *
               C49024 * C260 -
           ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
                C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C49024 * C49295) *
              C262 +
          (((C11605 + C11604 + C11603 + C11602) * C48938 * C49268 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422 +
              C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721) *
                 C1090 +
             (C4308 + C4307) * C1091 + C6270 * C49289) *
                C49140) *
               C49024 * C260 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
              C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                 C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C4136 + C4135) * C1090 + (C4134 + C4133) * C1091 +
             (C4132 + C4131) * C49289) *
                C49268 +
            ((C6492 + C6491) * C1090 + (C6490 + C6489) * C1091 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C49289 + (C4305 + C4306) * C1091 +
             (C4307 + C4308) * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C49024 * C260 -
           ((C3904 * C10328 - C3905 * C10326 - C3904 * C10329 +
             C49098 * C10332 + C3902 * C3343 - C3903 * C3340 - C3902 * C3344 +
             C49266 * C3349) *
                C48938 * C49282 +
            (C19694 + C19693) * C48938 * C20346 +
            (C7279 + C7278) * C48938 * C20345 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C48938 * C20344) *
               C49024 * C49295) *
              C262 +
          (((C4136 + C4135) * C48938 * C20344 +
            (C6492 + C6491) * C48938 * C20345 +
            (C18936 + C18935) * C48938 * C20346 +
            (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
             C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
             C49098 * C10333) *
                C48938 * C49282) *
               C49024 * C49295 -
           ((C19145 + C19146) * C48938 * C49282 + C19140 * C48938 * C20346 +
            C6713 * C48938 * C20345 + (C3956 + C3955) * C48938 * C20344) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C398 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C49007 * C262 +
          (((C11763 + C11762 + C11761 + C11760) * C48938 * C49268 +
            (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
             C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
             C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
             C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C49007 * C262 +
          (((C6695 * C1090 + C6270 * C1091 + (C4304 + C4303) * C49289) *
                C49268 +
            ((C6731 + C6730) * C1090 + (C6729 + C6728) * C1091 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C398 -
           ((C3904 * C11249 - C3905 * C11247 - C3904 * C11250 +
             C49098 * C11253 + C3902 * C3777 - C3903 * C3774 - C3902 * C3778 +
             C49266 * C3783) *
                C48938 * C49282 +
            (C20245 + C20246) * C48938 * C20346 +
            (C7826 + C7827) * C48938 * C20345 +
            (C6727 + C6726) * C48938 * C20344) *
               C49297) *
              C49007 * C262 +
          ((C6695 * C48938 * C20344 + C19131 * C48938 * C20345 +
            (C19146 + C19145) * C48938 * C20346 +
            (C3902 * C3779 - C3903 * C3775 - C3902 * C3780 + C49266 * C3784 +
             C3904 * C17981 - C3905 * C17980 - C3904 * C17982 +
             C49098 * C17983) *
                C48938 * C49282) *
               C49297 -
           ((C19145 + C19146) * C48938 * C49282 + C19140 * C48938 * C20346 +
            C6713 * C48938 * C20345 + (C3956 + C3955) * C48938 * C20344) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C49024 * C534 -
           ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
                C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C49024 * C49295) *
              C536 +
          (((C11605 + C11604 + C11603 + C11602) * C48938 * C49268 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C49024 * C534 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
              C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                 C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C4136 + C4135) * C1090 + (C4134 + C4133) * C1091 +
             (C4132 + C4131) * C49289) *
                C49268 +
            ((C6492 + C6491) * C1090 + (C6490 + C6489) * C1091 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C49024 * C534 -
           ((C3904 * C10328 - C3905 * C10326 - C3904 * C10329 +
             C49098 * C10332 + C3902 * C3343 - C3903 * C3340 - C3902 * C3344 +
             C49266 * C3349) *
                C48938 * C49282 +
            (C19694 + C19693) * C48938 * C20346 +
            (C7279 + C7278) * C48938 * C20345 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C48938 * C20344) *
               C49024 * C49295) *
              C536 +
          (((C4136 + C4135) * C48938 * C20344 +
            (C6492 + C6491) * C48938 * C20345 +
            (C18936 + C18935) * C48938 * C20346 +
            (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
             C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
             C49098 * C10333) *
                C48938 * C49282) *
               C49024 * C49295 -
           ((C19145 + C19146) * C48938 * C49282 + C19140 * C48938 * C20346 +
            C6713 * C48938 * C20345 + (C3956 + C3955) * C48938 * C20344) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
              C49024 * C600 -
          ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
            C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
            C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
            C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
               C48938 * C49140 +
           (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
            C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
            C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
            C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
               C48938 * C49268) *
              C49024 * C601 +
          ((C11383 * C609 - C11384 * C604 - C11383 * C610 + C11377 * C619 +
            C11385 * C1318 - C11386 * C1312 - C11385 * C1319 + C11378 * C1324 +
            C11387 * C1831 - C11388 * C1828 - C11387 * C1832 + C11379 * C1837 +
            C11389 * C9356 - C11390 * C9354 - C11389 * C9357 + C49275 * C9360) *
               C48938 * C49268 +
           (C11383 * C1522 - C11384 * C1516 - C11383 * C1523 + C11377 * C1528 +
            C11385 * C1989 - C11386 * C1986 - C11385 * C1990 + C11378 * C1995 +
            C11387 * C9446 - C11388 * C9444 - C11387 * C9447 + C11379 * C9450 +
            C11389 * C9683 - C11390 * C9682 - C11389 * C9684 + C49275 * C9685) *
               C48938 * C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
               C49140) *
              C49024 * C600 -
          (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
            (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
             C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                C1090) *
               C49140 +
           ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C1090) *
               C49268) *
              C49024 * C601 +
          (((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
             C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
                C1090 +
            (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
             C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
                C1091 +
            (C3902 * C613 - C3903 * C606 - C3902 * C614 + C49266 * C621 +
             C3904 * C1314 - C3905 * C1310 - C3904 * C1315 + C49098 * C1322) *
                C49289) *
               C49268 +
           ((C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
             C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
                C1090 +
            (C3902 * C1520 - C3903 * C1515 - C3902 * C1521 + C49266 * C1527 +
             C3904 * C1991 - C3905 * C1987 - C3904 * C1992 + C49098 * C1996) *
                C1091 +
            (C3902 * C1518 - C3903 * C1514 - C3902 * C1519 + C49266 * C1526 +
             C3904 * C1993 - C3905 * C1988 - C3904 * C1994 + C49098 * C1997) *
                C49289) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C48938 * C20344 +
           (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
           (C20246 + C20245) * C48938 * C49282) *
              C49024 * C600 -
          ((C3904 * C10328 - C3905 * C10326 - C3904 * C10329 + C49098 * C10332 +
            C3902 * C3343 - C3903 * C3340 - C3902 * C3344 + C49266 * C3349) *
               C48938 * C49282 +
           (C19694 + C19693) * C48938 * C20346 +
           (C7279 + C7278) * C48938 * C20345 +
           (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
            C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
               C48938 * C20344) *
              C49024 * C601 +
          ((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
            C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
               C48938 * C20344 +
           (C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
            C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
               C48938 * C20345 +
           (C3902 * C2408 - C3903 * C2401 - C3902 * C2409 + C49266 * C2419 +
            C3904 * C9914 - C3905 * C9912 - C3904 * C9915 + C49098 * C9918) *
               C48938 * C20346 +
           (C3902 * C10328 - C3903 * C10326 - C3902 * C10329 + C49266 * C10332 +
            C3904 * C10800 - C3905 * C10799 - C3904 * C10801 +
            C49098 * C10802) *
               C48938 * C49282) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C398 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C534 +
          (((C14875 + C14876 + C14877 + C14878) * C48938 * C49268 +
            (C11383 * C2406 - C11384 * C2400 - C11383 * C2407 + C11377 * C2418 +
             C11385 * C2408 - C11386 * C2401 - C11385 * C2409 + C11378 * C2419 +
             C11387 * C9914 - C11388 * C9912 - C11387 * C9915 + C11379 * C9918 +
             C11389 * C9916 - C11390 * C9913 - C11389 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C14878 + C14877 + C14876 + C14875) * C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C534 +
          ((((C7278 + C7279) * C1090 + (C6492 + C6491) * C1091 +
             (C6490 + C6489) * C49289) *
                C49268 +
            ((C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418 +
              C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419) *
                 C1090 +
             (C3902 * C2410 - C3903 * C2402 - C3902 * C2411 + C49266 * C2420 +
              C3904 * C2412 - C3905 * C2403 - C3904 * C2413 + C49098 * C2421) *
                 C1091 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C7279 + C7278) * C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C398 -
           ((C3904 * C11249 - C3905 * C11247 - C3904 * C11250 +
             C49098 * C11253 + C3902 * C3777 - C3903 * C3774 - C3902 * C3778 +
             C49266 * C3783) *
                C48938 * C49282 +
            (C20245 + C20246) * C48938 * C20346 +
            (C7826 + C7827) * C48938 * C20345 +
            (C6727 + C6726) * C48938 * C20344) *
               C49297) *
              C534 +
          (((C7278 + C7279) * C48938 * C20344 +
            (C19693 + C19694) * C48938 * C20345 +
            (C22082 + C22083) * C48938 * C20346 +
            (C3902 * C11249 - C3903 * C11247 - C3902 * C11250 +
             C49266 * C11253 + C3904 * C11251 - C3905 * C11248 -
             C3904 * C11252 + C49098 * C11254) *
                C48938 * C49282) *
               C49297 -
           ((C22083 + C22082) * C48938 * C49282 +
            (C19694 + C19693) * C48938 * C20346 +
            (C7279 + C7278) * C48938 * C20345 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C48938 * C20344) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C808 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C49007 * C536 +
          (((C11763 + C11762 + C11761 + C11760) * C48938 * C49268 +
            (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
             C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
             C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
             C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C49007 * C536 +
          (((C6695 * C1090 + C6270 * C1091 + (C4304 + C4303) * C49289) *
                C49268 +
            ((C6731 + C6730) * C1090 + (C6729 + C6728) * C1091 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C808 -
           ((C3904 * C11249 - C3905 * C11247 - C3904 * C11250 +
             C49098 * C11253 + C3902 * C3777 - C3903 * C3774 - C3902 * C3778 +
             C49266 * C3783) *
                C48938 * C49282 +
            (C20245 + C20246) * C48938 * C20346 +
            (C7826 + C7827) * C48938 * C20345 +
            (C6727 + C6726) * C48938 * C20344) *
               C49297) *
              C49007 * C536 +
          ((C6695 * C48938 * C20344 + C19131 * C48938 * C20345 +
            (C19146 + C19145) * C48938 * C20346 +
            (C3902 * C3779 - C3903 * C3775 - C3902 * C3780 + C49266 * C3784 +
             C3904 * C17981 - C3905 * C17980 - C3904 * C17982 +
             C49098 * C17983) *
                C48938 * C49282) *
               C49297 -
           ((C19145 + C19146) * C48938 * C49282 + C19140 * C48938 * C20346 +
            C6713 * C48938 * C20345 + (C3956 + C3955) * C48938 * C20344) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C808 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C260 +
          (((C14875 + C14876 + C14877 + C14878) * C48938 * C49268 +
            (C11383 * C2406 - C11384 * C2400 - C11383 * C2407 + C11377 * C2418 +
             C11385 * C2408 - C11386 * C2401 - C11385 * C2409 + C11378 * C2419 +
             C11387 * C9914 - C11388 * C9912 - C11387 * C9915 + C11379 * C9918 +
             C11389 * C9916 - C11390 * C9913 - C11389 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C14878 + C14877 + C14876 + C14875) * C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C260 +
          ((((C7278 + C7279) * C1090 + (C6492 + C6491) * C1091 +
             (C6490 + C6489) * C49289) *
                C49268 +
            ((C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418 +
              C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419) *
                 C1090 +
             (C3902 * C2410 - C3903 * C2402 - C3902 * C2411 + C49266 * C2420 +
              C3904 * C2412 - C3905 * C2403 - C3904 * C2413 + C49098 * C2421) *
                 C1091 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C7279 + C7278) * C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48938 * C20344 +
            (C6726 + C6727) * C48938 * C20345 + C20229 * C48938 * C20346 +
            (C20246 + C20245) * C48938 * C49282) *
               C808 -
           ((C3904 * C11249 - C3905 * C11247 - C3904 * C11250 +
             C49098 * C11253 + C3902 * C3777 - C3903 * C3774 - C3902 * C3778 +
             C49266 * C3783) *
                C48938 * C49282 +
            (C20245 + C20246) * C48938 * C20346 +
            (C7826 + C7827) * C48938 * C20345 +
            (C6727 + C6726) * C48938 * C20344) *
               C49297) *
              C260 +
          (((C7278 + C7279) * C48938 * C20344 +
            (C19693 + C19694) * C48938 * C20345 +
            (C22082 + C22083) * C48938 * C20346 +
            (C3902 * C11249 - C3903 * C11247 - C3902 * C11250 +
             C49266 * C11253 + C3904 * C11251 - C3905 * C11248 -
             C3904 * C11252 + C49098 * C11254) *
                C48938 * C49282) *
               C49297 -
           ((C22083 + C22082) * C48938 * C49282 +
            (C19694 + C19693) * C48938 * C20346 +
            (C7279 + C7278) * C48938 * C20345 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C48938 * C20344) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
              C954 -
          ((C15261 + C15262 + C15263 + C15264) * C48938 * C49140 +
           (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
              C955 +
          ((C15264 + C15263 + C15262 + C15261) * C48938 * C49268 +
           (C11383 * C2890 - C11384 * C2884 - C11383 * C2891 + C11377 * C2896 +
            C11385 * C3343 - C11386 * C3340 - C11385 * C3344 + C11378 * C3349 +
            C11387 * C10328 - C11388 * C10326 - C11387 * C10329 +
            C11379 * C10332 + C11389 * C10800 - C11390 * C10799 -
            C11389 * C10801 + C49275 * C10802) *
               C48938 * C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
               C49140) *
              C954 -
          (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
            (C7826 + C7827) * C1090) *
               C49140 +
           (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
               C49268) *
              C955 +
          (((C7827 + C7826) * C1090 + (C6731 + C6730) * C1091 +
            (C6729 + C6728) * C49289) *
               C49268 +
           ((C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896 +
             C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349) *
                C1090 +
            (C3902 * C2888 - C3903 * C2883 - C3902 * C2889 + C49266 * C2895 +
             C3904 * C3345 - C3905 * C3341 - C3904 * C3346 + C49098 * C3350) *
                C1091 +
            (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
             C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                C49289) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C48938 * C20344 +
           (C6726 + C6727) * C48938 * C20345 + C22442 * C20346 +
           C22452 * C49282) *
              C954 -
          ((C22457 + C22458) * C48938 * C49282 +
           (C20245 + C20246) * C48938 * C20346 +
           (C7826 + C7827) * C48938 * C20345 +
           (C6727 + C6726) * C48938 * C20344) *
              C955 +
          (C22442 * C20344 + C22452 * C20345 +
           (C22458 + C22457) * C48938 * C20346 +
           (C3902 * C18068 - C3903 * C18066 - C3902 * C18069 + C49266 * C18072 +
            C3904 * C18323 - C3905 * C18322 - C3904 * C18324 +
            C49098 * C18325) *
               C48938 * C49282) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                   C102 +
               C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                  C49053 * C49024 * C49007 * C110 -
              (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
               C174 * C102) *
                  C49053 * C49024 * C49007 * C111 +
              (C175 * C102 + C176 * C103 + C177 * C104 + C178 * C105 +
               (C113 * C134 - C114 * C121 - C113 * C135 + C49035 * C142) *
                   C106) *
                  C49053 * C49024 * C49007 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                   C1090 +
               (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                  C49053 * C49024 * C49007 * C110 -
              ((C1160 + C1161 + C1162) * C49289 +
               (C1159 + C1158 + C1157) * C1091 +
               (C1156 + C1155 + C1154) * C1090) *
                  C49053 * C49024 * C49007 * C111 +
              (C1164 * C1090 + (C1162 + C1161 + C1160) * C1091 +
               (C1093 * C130 - C1094 * C119 - C1093 * C131 + C49332 * C140 +
                C1095 * C270 - C1096 * C264 - C1095 * C271 + C49320 * C282 +
                C1097 * C617 - C1098 * C608 - C1097 * C618 + C49300 * C623) *
                   C49289) *
                  C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           ((C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C1090 +
            C452 * C1091 + C451 * C49289) *
               C49322 +
           ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C1090 +
            C2556 * C1091 + C2557 * C49289) *
               C49303) *
              C49024 * C49007 * C110 -
          ((C2558 * C49289 + C2557 * C1091 + C2556 * C1090) * C49303 +
           (C450 * C49289 + C451 * C1091 + C452 * C1090) * C49322 +
           (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
              C49024 * C49007 * C111 +
          ((C175 * C1090 + C176 * C1091 + C177 * C49289) * C49333 +
           (C451 * C1090 + C450 * C1091 + C449 * C49289) * C49322 +
           (C2557 * C1090 + C2558 * C1091 +
            (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                C49289) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C8010 + C8011 + C8012) * C49289 + (C8009 + C8008 + C8007) * C49316 +
           (C8006 + C8005 + C8004) * C49329) *
              C49053 * C49024 * C49007 * C111 +
          (C8014 * C49329 + (C8012 + C8011 + C8010) * C49316 +
           (C7943 * C130 - C7944 * C119 - C7943 * C131 + C7937 * C140 +
            C7945 * C270 - C7946 * C264 - C7945 * C271 + C7938 * C282 +
            C7947 * C617 - C7948 * C608 - C7947 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C49007 * C110 -
          (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
           C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
           C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
           C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
           C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
              C48938 * C49053 * C49024 * C49007 * C111 +
          (C9262 * C126 - C9263 * C117 - C9262 * C127 + C9256 * C138 +
           C9264 * C274 - C9265 * C266 - C9264 * C275 + C9257 * C284 +
           C9266 * C613 - C9267 * C606 - C9266 * C614 + C9258 * C621 +
           C9268 * C1314 - C9269 * C1310 - C9268 * C1315 + C9259 * C1322 +
           C9270 * C1835 - C9271 * C1830 - C9270 * C1836 + C9260 * C1839) *
              C48938 * C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528) *
               C48938 * C49322 +
           (C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C48938 * C49303) *
              C49024 * C49007 * C110 -
          ((C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973) *
               C48938 * C49303 +
           (C8388 + C8389 + C8390) * C48938 * C49322 +
           (C8006 + C8005 + C8004) * C48938 * C49333) *
              C49024 * C49007 * C111 +
          (C8014 * C48938 * C49333 + (C8387 + C8386 + C8385) * C48938 * C49322 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C48938 * C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C2933 * C49329 + C452 * C49316 + C451 * C49289) * C15375 +
           (C2934 * C49329 + C2556 * C49316 + C2557 * C49289) * C49303) *
              C49024 * C49007 * C110 -
          ((C2558 * C49289 + C2557 * C49316 + C2556 * C49329) * C49303 +
           (C450 * C49289 + C451 * C49316 + C452 * C49329) * C15375 +
           (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
              C49024 * C49007 * C111 +
          ((C175 * C49329 + C176 * C49316 + C177 * C49289) * C15374 +
           (C451 * C49329 + C450 * C49316 + C449 * C49289) * C15375 +
           (C2557 * C49329 + C2558 * C49316 +
            (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                C49289) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422 +
            C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
            C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528) *
               C48938 * C15375 +
           (C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
            C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
            C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
               C48938 * C49303) *
              C49024 * C49007 * C110 -
          ((C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421 +
            C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
            C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973) *
               C48938 * C49303 +
           (C1570 + C1571 + C1572) * C48938 * C15375 +
           (C1156 + C1155 + C1154) * C48938 * C15374) *
              C49024 * C49007 * C111 +
          (C1164 * C48938 * C15374 + (C1569 + C1568 + C1567) * C48938 * C15375 +
           (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
            C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
            C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
               C48938 * C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
               C17893 +
           C2933 * C48938 * C17894 + C2934 * C48938 * C17895 +
           C3797 * C48938 * C17896 +
           (C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
               C48938 * C17897) *
              C49024 * C49007 * C110 -
          ((C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
               C48938 * C17897 +
           C2936 * C48938 * C17896 + C2556 * C48938 * C17895 +
           C452 * C48938 * C17894 + C174 * C48938 * C17893) *
              C49024 * C49007 * C111 +
          (C175 * C48938 * C17893 + C451 * C48938 * C17894 +
           C2557 * C48938 * C17895 + C2935 * C48938 * C17896 +
           (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
               C48938 * C17897) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C49024 * C260 -
               (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
                (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                    C102) *
                   C49053 * C49024 * C49295) *
                  C262 +
              ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
                (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) *
                    C106) *
                   C49053 * C49024 * C49295 -
               (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
                C174 * C102) *
                   C49053 * C49024 * C260) *
                  C49293) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C49024 * C260 -
               ((C1363 + C1364 + C1365) * C49289 +
                (C1366 + C1367 + C1368) * C1091 +
                (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 +
                 C49300 * C1324 + C1095 * C609 - C1096 * C604 - C1095 * C610 +
                 C49320 * C619 + C1093 * C278 - C1094 * C268 - C1093 * C279 +
                 C49332 * C286) *
                    C1090) *
                   C49053 * C49024 * C49295) *
                  C262 +
              (((C1368 + C1367 + C1366) * C1090 +
                (C1365 + C1364 + C1363) * C1091 +
                (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
                 C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
                 C1097 * C1320 - C1098 * C1313 - C1097 * C1321 +
                 C49300 * C1325) *
                    C49289) *
                   C49053 * C49024 * C49295 -
               ((C1160 + C1161 + C1162) * C49289 +
                (C1159 + C1158 + C1157) * C1091 +
                (C1156 + C1155 + C1154) * C1090) *
                   C49053 * C49024 * C260) *
                  C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            ((C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C1090 +
             C452 * C1091 + C451 * C49289) *
                C49322 +
            ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C1090 +
             C2556 * C1091 + C2557 * C49289) *
                C49303) *
               C49024 * C260 -
           ((C2733 * C49289 + C2734 * C1091 +
             (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                 C1090) *
                C49303 +
            (C2735 * C49289 + C2736 * C1091 +
             (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                 C1090) *
                C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C49024 * C49295) *
              C262 +
          (((C316 * C1090 + C315 * C1091 + C314 * C49289) * C49333 +
            (C2736 * C1090 + C2735 * C1091 +
             (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                 C49289) *
                C49322 +
            (C2734 * C1090 + C2733 * C1091 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2558 * C49289 + C2557 * C1091 + C2556 * C1090) * C49303 +
            (C450 * C49289 + C451 * C1091 + C452 * C1090) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C260 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C260 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C262 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528) *
                C48938 * C49322 +
            (C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
             C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
             C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
                C48938 * C49303) *
               C49024 * C260 -
           ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
             C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
             C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
                C48938 * C49303 +
            (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
                C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C48938 * C49333 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C48938 * C49322 +
            (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
             C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
             C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421 +
             C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
             C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973) *
                C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C2933 * C49329 + C452 * C49316 + C451 * C49289) * C15375 +
            (C2934 * C49329 + C2556 * C49316 + C2557 * C49289) * C49303) *
               C49024 * C260 -
           ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
            (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C49024 * C49295) *
              C262 +
          (((C316 * C49329 + C315 * C49316 + C314 * C49289) * C15374 +
            (C2736 * C49329 + C2735 * C49316 + C5261 * C49289) * C15375 +
            (C2734 * C49329 + C2733 * C49316 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2558 * C49289 + C2557 * C49316 + C2556 * C49329) * C49303 +
            (C450 * C49289 + C451 * C49316 + C452 * C49329) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528) *
                C48938 * C15375 +
            (C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
             C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
             C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
                C48938 * C49303) *
               C49024 * C260 -
           ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
             C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
             C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
                C48938 * C49303 +
            (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
                C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C49024 * C49295) *
              C262 +
          (((C1368 + C1367 + C1366) * C48938 * C15374 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C48938 * C15375 +
            (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
             C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
             C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421 +
             C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
             C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973) *
                C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C2933 * C48938 * C17894 + C2934 * C48938 * C17895 +
            C3797 * C48938 * C17896 +
            (C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
                C48938 * C17897) *
               C49024 * C260 -
           ((C113 * C11249 - C114 * C11247 - C113 * C11250 + C49035 * C11253) *
                C48938 * C17897 +
            (C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                C48938 * C17896 +
            C3370 * C48938 * C17895 + C3369 * C48938 * C17894 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C48938 *
                C17893) *
               C49024 * C49295) *
              C262 +
          ((C316 * C48938 * C17893 + C2736 * C48938 * C17894 +
            C2734 * C48938 * C17895 +
            (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                C48938 * C17896 +
            (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                C48938 * C17897) *
               C49024 * C49295 -
           ((C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
                C48938 * C17897 +
            C2936 * C48938 * C17896 + C2556 * C48938 * C17895 +
            C452 * C48938 * C17894 + C174 * C48938 * C17893) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C398 -
               (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
                (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) *
                    C102) *
                   C49053 * C49297) *
                  C49007 * C262 +
              ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
                (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                    C106) *
                   C49053 * C49297 -
               (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
                C174 * C102) *
                   C49053 * C398) *
                  C49007 * C49293) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C398 -
               ((C1567 + C1568 + C1569) * C49289 +
                (C1570 + C1571 + C1572) * C1091 +
                (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 +
                 C49300 * C1528 + C1095 * C711 - C1096 * C706 - C1095 * C712 +
                 C49320 * C721 + C1093 * C414 - C1094 * C404 - C1093 * C415 +
                 C49332 * C422) *
                    C1090) *
                   C49053 * C49297) *
                  C49007 * C262 +
              (((C1572 + C1571 + C1570) * C1090 +
                (C1569 + C1568 + C1567) * C1091 +
                (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
                 C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
                 C1097 * C1524 - C1098 * C1517 - C1097 * C1525 +
                 C49300 * C1529) *
                    C49289) *
                   C49053 * C49297 -
               ((C1160 + C1161 + C1162) * C49289 +
                (C1159 + C1158 + C1157) * C1091 +
                (C1156 + C1155 + C1154) * C1090) *
                   C49053 * C398) *
                  C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C49007 * C262 +
          (((C2919 + C2920 + C2921) * C49333 +
            (C2922 + C2923 + C2924) * C49322 +
            (C2936 * C1090 + C2935 * C1091 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C262 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C398 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C48938 * C49333 +
            (C10395 + C10396 + C10397) * C48938 * C49322 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C49007 * C262 +
          (((C15676 + C15677 + C15678) * C15374 +
            (C15679 + C15680 + C15681) * C15375 +
            (C2936 * C49329 + C2935 * C49316 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C398 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C49007 * C262 +
          (((C1572 + C1571 + C1570) * C48938 * C15374 +
            (C16959 + C16960 + C16961) * C48938 * C15375 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
            C18095 * C17897) *
               C398 -
           ((C113 * C18068 - C114 * C18066 - C113 * C18069 + C49035 * C18072) *
                C48938 * C17897 +
            C18095 * C17896 + C18077 * C17895 + C18076 * C17894 +
            C18075 * C17893) *
               C49297) *
              C49007 * C262 +
          ((C18082 * C17893 + C18083 * C17894 + C18084 * C17895 +
            C18096 * C17896 +
            (C113 * C18070 - C114 * C18067 - C113 * C18071 + C49035 * C18073) *
                C48938 * C17897) *
               C49297 -
           (C18096 * C17897 + C18084 * C17896 + C18083 * C17895 +
            C18082 * C17894 + C174 * C48938 * C17893) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C49024 * C534 -
               (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
                (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                    C102) *
                   C49053 * C49024 * C49295) *
                  C536 +
              ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
                (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) *
                    C106) *
                   C49053 * C49024 * C49295 -
               (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
                C174 * C102) *
                   C49053 * C49024 * C534) *
                  C49293) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C49024 * C534 -
               ((C1363 + C1364 + C1365) * C49289 +
                (C1366 + C1367 + C1368) * C1091 +
                (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 +
                 C49300 * C1324 + C1095 * C609 - C1096 * C604 - C1095 * C610 +
                 C49320 * C619 + C1093 * C278 - C1094 * C268 - C1093 * C279 +
                 C49332 * C286) *
                    C1090) *
                   C49053 * C49024 * C49295) *
                  C536 +
              (((C1368 + C1367 + C1366) * C1090 +
                (C1365 + C1364 + C1363) * C1091 +
                (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
                 C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
                 C1097 * C1320 - C1098 * C1313 - C1097 * C1321 +
                 C49300 * C1325) *
                    C49289) *
                   C49053 * C49024 * C49295 -
               ((C1160 + C1161 + C1162) * C49289 +
                (C1159 + C1158 + C1157) * C1091 +
                (C1156 + C1155 + C1154) * C1090) *
                   C49053 * C49024 * C534) *
                  C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C49024 * C534 -
           ((C2733 * C49289 + C2734 * C1091 +
             (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                 C1090) *
                C49303 +
            (C2735 * C49289 + C2736 * C1091 +
             (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                 C1090) *
                C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C49024 * C49295) *
              C536 +
          (((C316 * C1090 + C315 * C1091 + C314 * C49289) * C49333 +
            (C2736 * C1090 + C2735 * C1091 +
             (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                 C49289) *
                C49322 +
            (C2734 * C1090 + C2733 * C1091 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C534 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C534 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C536 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C49024 * C534 -
           ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
             C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
             C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
                C48938 * C49303 +
            (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
                C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C48938 * C49333 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C48938 * C49322 +
            (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
             C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
             C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C49024 * C534 -
           ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
            (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C49024 * C49295) *
              C536 +
          (((C316 * C49329 + C315 * C49316 + C314 * C49289) * C15374 +
            (C2736 * C49329 + C2735 * C49316 + C5261 * C49289) * C15375 +
            (C2734 * C49329 + C2733 * C49316 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C49024 * C534 -
           ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
             C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
             C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
                C48938 * C49303 +
            (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
                C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C49024 * C49295) *
              C536 +
          (((C1368 + C1367 + C1366) * C48938 * C15374 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C48938 * C15375 +
            (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
             C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
             C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
            C18095 * C17897) *
               C49024 * C534 -
           ((C113 * C11249 - C114 * C11247 - C113 * C11250 + C49035 * C11253) *
                C48938 * C17897 +
            (C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                C48938 * C17896 +
            C3370 * C48938 * C17895 + C3369 * C48938 * C17894 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C48938 *
                C17893) *
               C49024 * C49295) *
              C536 +
          ((C316 * C48938 * C17893 + C2736 * C48938 * C17894 +
            C2734 * C48938 * C17895 +
            (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                C48938 * C17896 +
            (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                C48938 * C17897) *
               C49024 * C49295 -
           (C18096 * C17897 + C18084 * C17896 + C18083 * C17895 +
            C18082 * C17894 + C174 * C48938 * C17893) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                   C102 +
               C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                  C49053 * C49024 * C600 -
              (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
               (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                   C102) *
                  C49053 * C49024 * C601 +
              ((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) *
                   C102 +
               (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) *
                   C103 +
               (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                   C104 +
               (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) *
                   C105 +
               (C113 * C617 - C114 * C608 - C113 * C618 + C49035 * C623) *
                   C106) *
                  C49053 * C49024 * C602) *
             C48973 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                   C1090 +
               (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                  C49053 * C49024 * C600 -
              ((C1363 + C1364 + C1365) * C49289 +
               (C1366 + C1367 + C1368) * C1091 +
               (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
                C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
                C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                   C1090) *
                  C49053 * C49024 * C601 +
              ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
                C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
                C1097 * C1831 - C1098 * C1828 - C1097 * C1832 +
                C49300 * C1837) *
                   C1090 +
               (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
                C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
                C1097 * C1833 - C1098 * C1829 - C1097 * C1834 +
                C49300 * C1838) *
                   C1091 +
               (C1093 * C613 - C1094 * C606 - C1093 * C614 + C49332 * C621 +
                C1095 * C1314 - C1096 * C1310 - C1095 * C1315 + C49320 * C1322 +
                C1097 * C1835 - C1098 * C1830 - C1097 * C1836 +
                C49300 * C1839) *
                   C49289) *
                  C49053 * C49024 * C602) *
             C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           (C2937 + C2903 + C2904) * C49322 +
           (C2938 + C2909 + C2910) * C49303) *
              C49024 * C600 -
          ((C2733 * C49289 + C2734 * C1091 +
            (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                C1090) *
               C49303 +
           (C2735 * C49289 + C2736 * C1091 +
            (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C1090) *
               C49322 +
           (C315 * C49289 + C316 * C1091 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C1090) *
               C49333) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C1090 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C1091 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                C49289) *
               C49333 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C1090 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C1091 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49289) *
               C49322 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C1090 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C1091 +
            (C113 * C2416 - C114 * C2405 - C113 * C2417 + C49035 * C2423) *
                C49289) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C600 -
          ((C8197 + C8198 + C8199) * C49289 + (C8200 + C8201 + C8202) * C49316 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C49329) *
              C49053 * C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C49329 +
           (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
            C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
            C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
               C49316 +
           (C7943 * C613 - C7944 * C606 - C7943 * C614 + C7937 * C621 +
            C7945 * C1314 - C7946 * C1310 - C7945 * C1315 + C7938 * C1322 +
            C7947 * C1835 - C7948 * C1830 - C7947 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C600 -
          (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
           C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
           C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
           C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
           C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
              C48938 * C49053 * C49024 * C601 +
          (C9262 * C609 - C9263 * C604 - C9262 * C610 + C9256 * C619 +
           C9264 * C1318 - C9265 * C1312 - C9264 * C1319 + C9257 * C1324 +
           C9266 * C1831 - C9267 * C1828 - C9266 * C1832 + C9258 * C1837 +
           C9268 * C9356 - C9269 * C9354 - C9268 * C9357 + C9259 * C9360 +
           C9270 * C9597 - C9271 * C9596 - C9270 * C9598 + C9260 * C9599) *
              C48938 * C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C10389 + C10390 + C10391) * C48938 * C49322 +
           (C10392 + C10393 + C10394) * C48938 * C49303) *
              C49024 * C600 -
          ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
            C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
            C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
               C48938 * C49303 +
           (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
            C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
            C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
               C48938 * C49322 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C48938 * C49333) *
              C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C48938 * C49333 +
           (C7943 * C1522 - C7944 * C1516 - C7943 * C1523 + C7937 * C1528 +
            C7945 * C1989 - C7946 * C1986 - C7945 * C1990 + C7938 * C1995 +
            C7947 * C9446 - C7948 * C9444 - C7947 * C9447 + C49300 * C9450) *
               C48938 * C49322 +
           (C7943 * C2408 - C7944 * C2401 - C7943 * C2409 + C7937 * C2419 +
            C7945 * C9914 - C7946 * C9912 - C7945 * C9915 + C7938 * C9918 +
            C7947 * C9916 - C7948 * C9913 - C7947 * C9917 + C49300 * C9919) *
               C48938 * C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C15670 + C15671 + C15672) * C15375 +
           (C15673 + C15674 + C15675) * C49303) *
              C49024 * C600 -
          ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
           (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
           (C315 * C49289 + C316 * C49316 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C49329) *
               C15374) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C49329 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C49316 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                C49289) *
               C15374 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C49329 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C49316 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49289) *
               C15375 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C49329 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C49316 +
            (C113 * C2416 - C114 * C2405 - C113 * C2417 + C49035 * C2423) *
                C49289) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C16953 + C16954 + C16955) * C48938 * C15375 +
           (C16956 + C16957 + C16958) * C48938 * C49303) *
              C49024 * C600 -
          ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
            C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
            C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
               C48938 * C49303 +
           (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
            C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
            C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
               C48938 * C15375 +
           (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
            C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
            C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
               C48938 * C15374) *
              C49024 * C601 +
          ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
            C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
            C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
               C48938 * C15374 +
           (C1093 * C1522 - C1094 * C1516 - C1093 * C1523 + C49332 * C1528 +
            C1095 * C1989 - C1096 * C1986 - C1095 * C1990 + C49320 * C1995 +
            C1097 * C9446 - C1098 * C9444 - C1097 * C9447 + C49300 * C9450) *
               C48938 * C15375 +
           (C1093 * C2408 - C1094 * C2401 - C1093 * C2409 + C49332 * C2419 +
            C1095 * C9914 - C1096 * C9912 - C1095 * C9915 + C49320 * C9918 +
            C1097 * C9916 - C1098 * C9913 - C1097 * C9917 + C49300 * C9919) *
               C48938 * C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
               C17893 +
           C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
           C18095 * C17897) *
              C49024 * C600 -
          ((C113 * C11249 - C114 * C11247 - C113 * C11250 + C49035 * C11253) *
               C48938 * C17897 +
           (C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
               C48938 * C17896 +
           C3370 * C48938 * C17895 + C3369 * C48938 * C17894 +
           (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C48938 *
               C17893) *
              C49024 * C601 +
          ((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C48938 *
               C17893 +
           (C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
               C48938 * C17894 +
           (C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
               C48938 * C17895 +
           (C113 * C10328 - C114 * C10326 - C113 * C10329 + C49035 * C10332) *
               C48938 * C17896 +
           (C113 * C11251 - C114 * C11248 - C113 * C11252 + C49035 * C11254) *
               C48938 * C17897) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C398 -
               (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
                (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) *
                    C102) *
                   C49053 * C49297) *
                  C534 +
              (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                    C102 +
                (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) *
                    C103 +
                (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) *
                    C104 +
                (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                    C105 +
                (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                    C106) *
                   C49053 * C49297 -
               (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
                (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                    C102) *
                   C49053 * C398) *
                  C49295) *
             C48973 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C398 -
               ((C1567 + C1568 + C1569) * C49289 +
                (C1570 + C1571 + C1572) * C1091 +
                (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 +
                 C49300 * C1528 + C1095 * C711 - C1096 * C706 - C1095 * C712 +
                 C49320 * C721 + C1093 * C414 - C1094 * C404 - C1093 * C415 +
                 C49332 * C422) *
                    C1090) *
                   C49053 * C49297) *
                  C534 +
              (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
                 C1095 * C1522 - C1096 * C1516 - C1095 * C1523 +
                 C49320 * C1528 + C1097 * C1989 - C1098 * C1986 -
                 C1097 * C1990 + C49300 * C1995) *
                    C1090 +
                (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
                 C1095 * C1520 - C1096 * C1515 - C1095 * C1521 +
                 C49320 * C1527 + C1097 * C1991 - C1098 * C1987 -
                 C1097 * C1992 + C49300 * C1996) *
                    C1091 +
                (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
                 C1095 * C1518 - C1096 * C1514 - C1095 * C1519 +
                 C49320 * C1526 + C1097 * C1993 - C1098 * C1988 -
                 C1097 * C1994 + C49300 * C1997) *
                    C49289) *
                   C49053 * C49297 -
               ((C1363 + C1364 + C1365) * C49289 +
                (C1366 + C1367 + C1368) * C1091 +
                (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 +
                 C49300 * C1324 + C1095 * C609 - C1096 * C604 - C1095 * C610 +
                 C49320 * C619 + C1093 * C278 - C1094 * C268 - C1093 * C279 +
                 C49332 * C286) *
                    C1090) *
                   C49053 * C398) *
                  C49295) *
             C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C534 +
          (((C3371 + C3357 + C3358) * C49333 +
            (C3372 + C3363 + C3364) * C49322 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C1090 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C1091 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C3364 + C3363 + C3372) * C49303 +
            (C3358 + C3357 + C3371) * C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C534 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C534 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C398 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C534 +
          (((C10840 + C10841 + C10842) * C48938 * C49333 +
            (C10843 + C10844 + C10845) * C48938 * C49322 +
            (C7943 * C3343 - C7944 * C3340 - C7943 * C3344 + C7937 * C3349 +
             C7945 * C10328 - C7946 * C10326 - C7945 * C10329 + C7938 * C10332 +
             C7947 * C10800 - C7948 * C10799 - C7947 * C10801 +
             C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C10845 + C10844 + C10843) * C48938 * C49303 +
            (C10842 + C10841 + C10840) * C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C534 +
          (((C16084 + C16085 + C16086) * C15374 +
            (C16087 + C16088 + C16089) * C15375 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C49329 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C49316 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C16089 + C16088 + C16087) * C49303 +
            (C16086 + C16085 + C16084) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C398 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C534 +
          (((C17400 + C17401 + C17402) * C48938 * C15374 +
            (C17403 + C17404 + C17405) * C48938 * C15375 +
            (C1093 * C3343 - C1094 * C3340 - C1093 * C3344 + C49332 * C3349 +
             C1095 * C10328 - C1096 * C10326 - C1095 * C10329 +
             C49320 * C10332 + C1097 * C10800 - C1098 * C10799 -
             C1097 * C10801 + C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C17405 + C17404 + C17403) * C48938 * C49303 +
            (C17402 + C17401 + C17400) * C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
            C18095 * C17897) *
               C398 -
           ((C113 * C18068 - C114 * C18066 - C113 * C18069 + C49035 * C18072) *
                C48938 * C17897 +
            C18095 * C17896 + C18077 * C17895 + C18076 * C17894 +
            C18075 * C17893) *
               C49297) *
              C534 +
          ((C18327 * C17893 + C18328 * C17894 + C18343 * C17895 +
            C18344 * C17896 +
            (C113 * C18323 - C114 * C18322 - C113 * C18324 + C49035 * C18325) *
                C48938 * C17897) *
               C49297 -
           (C18344 * C17897 + C18343 * C17896 + C18328 * C17895 +
            C18327 * C17894 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C48938 *
                C17893) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C808 -
               (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
                (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) *
                    C102) *
                   C49053 * C49297) *
                  C49007 * C536 +
              ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
                (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                    C106) *
                   C49053 * C49297 -
               (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
                C174 * C102) *
                   C49053 * C808) *
                  C49007 * C49293) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C808 -
               ((C1567 + C1568 + C1569) * C49289 +
                (C1570 + C1571 + C1572) * C1091 +
                (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 +
                 C49300 * C1528 + C1095 * C711 - C1096 * C706 - C1095 * C712 +
                 C49320 * C721 + C1093 * C414 - C1094 * C404 - C1093 * C415 +
                 C49332 * C422) *
                    C1090) *
                   C49053 * C49297) *
                  C49007 * C536 +
              (((C1572 + C1571 + C1570) * C1090 +
                (C1569 + C1568 + C1567) * C1091 +
                (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
                 C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
                 C1097 * C1524 - C1098 * C1517 - C1097 * C1525 +
                 C49300 * C1529) *
                    C49289) *
                   C49053 * C49297 -
               ((C1160 + C1161 + C1162) * C49289 +
                (C1159 + C1158 + C1157) * C1091 +
                (C1156 + C1155 + C1154) * C1090) *
                   C49053 * C808) *
                  C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C49007 * C536 +
          (((C2919 + C2920 + C2921) * C49333 +
            (C2922 + C2923 + C2924) * C49322 +
            (C2936 * C1090 + C2935 * C1091 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C536 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C808 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C48938 * C49333 +
            (C10395 + C10396 + C10397) * C48938 * C49322 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C49007 * C536 +
          (((C15676 + C15677 + C15678) * C15374 +
            (C15679 + C15680 + C15681) * C15375 +
            (C2936 * C49329 + C2935 * C49316 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C808 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C49007 * C536 +
          (((C1572 + C1571 + C1570) * C48938 * C15374 +
            (C16959 + C16960 + C16961) * C48938 * C15375 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
            C18095 * C17897) *
               C808 -
           ((C113 * C18068 - C114 * C18066 - C113 * C18069 + C49035 * C18072) *
                C48938 * C17897 +
            C18095 * C17896 + C18077 * C17895 + C18076 * C17894 +
            C18075 * C17893) *
               C49297) *
              C49007 * C536 +
          ((C18082 * C17893 + C18083 * C17894 + C18084 * C17895 +
            C18096 * C17896 +
            (C113 * C18070 - C114 * C18067 - C113 * C18071 + C49035 * C18073) *
                C48938 * C17897) *
               C49297 -
           (C18096 * C17897 + C18084 * C17896 + C18083 * C17895 +
            C18082 * C17894 + C174 * C48938 * C17893) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                    C102 +
                C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                   C49053 * C808 -
               (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
                (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) *
                    C102) *
                   C49053 * C49297) *
                  C260 +
              (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                    C102 +
                (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) *
                    C103 +
                (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) *
                    C104 +
                (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                    C105 +
                (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                    C106) *
                   C49053 * C49297 -
               (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
                (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                    C102) *
                   C49053 * C808) *
                  C49295) *
             C48973 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                 C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                 C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                    C1090 +
                (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                   C49053 * C808 -
               ((C1567 + C1568 + C1569) * C49289 +
                (C1570 + C1571 + C1572) * C1091 +
                (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 +
                 C49300 * C1528 + C1095 * C711 - C1096 * C706 - C1095 * C712 +
                 C49320 * C721 + C1093 * C414 - C1094 * C404 - C1093 * C415 +
                 C49332 * C422) *
                    C1090) *
                   C49053 * C49297) *
                  C260 +
              (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
                 C1095 * C1522 - C1096 * C1516 - C1095 * C1523 +
                 C49320 * C1528 + C1097 * C1989 - C1098 * C1986 -
                 C1097 * C1990 + C49300 * C1995) *
                    C1090 +
                (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
                 C1095 * C1520 - C1096 * C1515 - C1095 * C1521 +
                 C49320 * C1527 + C1097 * C1991 - C1098 * C1987 -
                 C1097 * C1992 + C49300 * C1996) *
                    C1091 +
                (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
                 C1095 * C1518 - C1096 * C1514 - C1095 * C1519 +
                 C49320 * C1526 + C1097 * C1993 - C1098 * C1988 -
                 C1097 * C1994 + C49300 * C1997) *
                    C49289) *
                   C49053 * C49297 -
               ((C1363 + C1364 + C1365) * C49289 +
                (C1366 + C1367 + C1368) * C1091 +
                (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 +
                 C49300 * C1324 + C1095 * C609 - C1096 * C604 - C1095 * C610 +
                 C49320 * C619 + C1093 * C278 - C1094 * C268 - C1093 * C279 +
                 C49332 * C286) *
                    C1090) *
                   C49053 * C808) *
                  C49295) *
             C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C260 +
          (((C3371 + C3357 + C3358) * C49333 +
            (C3372 + C3363 + C3364) * C49322 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C1090 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C1091 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C3364 + C3363 + C3372) * C49303 +
            (C3358 + C3357 + C3371) * C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C260 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C260 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C808 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C260 +
          (((C10840 + C10841 + C10842) * C48938 * C49333 +
            (C10843 + C10844 + C10845) * C48938 * C49322 +
            (C7943 * C3343 - C7944 * C3340 - C7943 * C3344 + C7937 * C3349 +
             C7945 * C10328 - C7946 * C10326 - C7945 * C10329 + C7938 * C10332 +
             C7947 * C10800 - C7948 * C10799 - C7947 * C10801 +
             C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C10845 + C10844 + C10843) * C48938 * C49303 +
            (C10842 + C10841 + C10840) * C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C260 +
          (((C16084 + C16085 + C16086) * C15374 +
            (C16087 + C16088 + C16089) * C15375 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C49329 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C49316 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C16089 + C16088 + C16087) * C49303 +
            (C16086 + C16085 + C16084) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C808 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C260 +
          (((C17400 + C17401 + C17402) * C48938 * C15374 +
            (C17403 + C17404 + C17405) * C48938 * C15375 +
            (C1093 * C3343 - C1094 * C3340 - C1093 * C3344 + C49332 * C3349 +
             C1095 * C10328 - C1096 * C10326 - C1095 * C10329 +
             C49320 * C10332 + C1097 * C10800 - C1098 * C10799 -
             C1097 * C10801 + C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C17405 + C17404 + C17403) * C48938 * C49303 +
            (C17402 + C17401 + C17400) * C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
                C17893 +
            C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
            C18095 * C17897) *
               C808 -
           ((C113 * C18068 - C114 * C18066 - C113 * C18069 + C49035 * C18072) *
                C48938 * C17897 +
            C18095 * C17896 + C18077 * C17895 + C18076 * C17894 +
            C18075 * C17893) *
               C49297) *
              C260 +
          ((C18327 * C17893 + C18328 * C17894 + C18343 * C17895 +
            C18344 * C17896 +
            (C113 * C18323 - C114 * C18322 - C113 * C18324 + C49035 * C18325) *
                C48938 * C17897) *
               C49297 -
           (C18344 * C17897 + C18343 * C17896 + C18328 * C17895 +
            C18327 * C17894 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C48938 *
                C17893) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                   C102 +
               C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
                  C49053 * C954 -
              (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
               (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) *
                   C102) *
                  C49053 * C955 +
              ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) *
                   C102 +
               (C113 * C964 - C114 * C958 - C113 * C965 + C49035 * C973) *
                   C103 +
               (C113 * C966 - C114 * C959 - C113 * C967 + C49035 * C974) *
                   C104 +
               (C113 * C968 - C114 * C960 - C113 * C969 + C49035 * C975) *
                   C105 +
               (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                   C106) *
                  C49053 * C956) *
             C49007 * C48973 +
         0.5 * std::pow(Pi, 2.5) *
             (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
                C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
                C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                   C1090 +
               (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
                  C49053 * C954 -
              ((C1567 + C1568 + C1569) * C49289 +
               (C1570 + C1571 + C1572) * C1091 +
               (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
                C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
                C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                   C1090) *
                  C49053 * C955 +
              ((C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
                C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
                C1097 * C2408 - C1098 * C2401 - C1097 * C2409 +
                C49300 * C2419) *
                   C1090 +
               (C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973 +
                C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
                C1097 * C2412 - C1098 * C2403 - C1097 * C2413 +
                C49300 * C2421) *
                   C1091 +
               (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
                C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
                C1097 * C2416 - C1098 * C2405 - C1097 * C2417 +
                C49300 * C2423) *
                   C49289) *
                  C49053 * C956) *
             C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           (C2937 + C2903 + C2904) * C49322 + C3794 * C49303) *
              C954 -
          ((C3788 + C3789 + C3798) * C49303 + (C2910 + C2909 + C2938) * C49322 +
           (C2904 + C2903 + C2937) * C49333) *
              C955 +
          (C3794 * C49333 + (C3798 + C3789 + C3788) * C49322 +
           ((C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
                C1090 +
            (C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
                C1091 +
            (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                C49289) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C954 -
          ((C8385 + C8386 + C8387) * C49289 + (C8388 + C8389 + C8390) * C49316 +
           (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
               C49329) *
              C49053 * C955 +
          ((C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C49329 +
           (C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421) *
               C49316 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C954 -
          (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
           C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
           C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
           C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
           C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
              C48938 * C49053 * C955 +
          (C9262 * C962 - C9263 * C957 - C9262 * C963 + C9256 * C972 +
           C9264 * C2406 - C9265 * C2400 - C9264 * C2407 + C9257 * C2418 +
           C9266 * C2408 - C9267 * C2401 - C9266 * C2409 + C9258 * C2419 +
           C9268 * C9914 - C9269 * C9912 - C9268 * C9915 + C9259 * C9918 +
           C9270 * C9916 - C9271 * C9913 - C9270 * C9917 + C9260 * C9919) *
              C48938 * C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C10389 + C10390 + C10391) * C48938 * C49322 + C11273 * C49303) *
              C954 -
          ((C11277 + C11278 + C11279) * C48938 * C49303 +
           (C10394 + C10393 + C10392) * C48938 * C49322 +
           (C10391 + C10390 + C10389) * C48938 * C49333) *
              C955 +
          (C11273 * C49333 + (C11279 + C11278 + C11277) * C48938 * C49322 +
           (C7943 * C3777 - C7944 * C3774 - C7943 * C3778 + C7937 * C3783 +
            C7945 * C11249 - C7946 * C11247 - C7945 * C11250 + C7938 * C11253 +
            C7947 * C11251 - C7948 * C11248 - C7947 * C11252 +
            C49300 * C11254) *
               C48938 * C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C15670 + C15671 + C15672) * C15375 + C16496 * C49303) *
              C954 -
          ((C16493 + C16494 + C16495) * C49303 +
           (C15675 + C15674 + C15673) * C15375 +
           (C15672 + C15671 + C15670) * C15374) *
              C955 +
          (C16496 * C15374 + (C16495 + C16494 + C16493) * C15375 +
           ((C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
                C49329 +
            (C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
                C49316 +
            (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                C49289) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C16953 + C16954 + C16955) * C48938 * C15375 + C17825 * C49303) *
              C954 -
          ((C17829 + C17830 + C17831) * C48938 * C49303 +
           (C16958 + C16957 + C16956) * C48938 * C15375 +
           (C16955 + C16954 + C16953) * C48938 * C15374) *
              C955 +
          (C17825 * C15374 + (C17831 + C17830 + C17829) * C48938 * C15375 +
           (C1093 * C3777 - C1094 * C3774 - C1093 * C3778 + C49332 * C3783 +
            C1095 * C11249 - C1096 * C11247 - C1095 * C11250 + C49320 * C11253 +
            C1097 * C11251 - C1098 * C11248 - C1097 * C11252 +
            C49300 * C11254) *
               C48938 * C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48938 *
               C17893 +
           C18075 * C17894 + C18076 * C17895 + C18077 * C17896 +
           C18095 * C17897) *
              C954 -
          (C18582 * C17897 + C18095 * C17896 + C18077 * C17895 +
           C18076 * C17894 + C18075 * C17893) *
              C955 +
          (C18076 * C17893 + C18077 * C17894 + C18095 * C17895 +
           C18582 * C17896 +
           (C113 * C18571 - C114 * C18570 - C113 * C18572 + C49035 * C18573) *
               C48938 * C17897) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 +
            (C8390 + C8389 + C8388) * C48948) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C8385 + C8386 + C8387) * C48948 +
            (C8388 + C8389 + C8390) * C49245) *
               C49140 +
           ((C8009 + C8008 + C8007) * C48948 +
            (C8006 + C8005 + C8004) * C49245) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C8014 * C49245 + (C8012 + C8011 + C8010) * C48948) * C49268 +
           ((C8387 + C8386 + C8385) * C49245 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C2933 * C3898 + C452 * C3899 + C451 * C3900 + C450 * C49267) *
               C49140) *
              C49024 * C49007 * C110 -
          ((C449 * C49267 + C450 * C3900 + C451 * C3899 + C452 * C3898) *
               C49140 +
           (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C175 * C3898 + C176 * C3899 + C177 * C3900 + C178 * C49267) *
               C49268 +
           (C451 * C3898 + C450 * C3899 + C449 * C3900 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                C49267) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49245 +
            C174 * C48948) *
               C20344 +
           (C2933 * C49245 + C452 * C48948) * C20345 +
           (C2934 * C49245 + C2556 * C48948) * C20346 +
           (C3797 * C49245 + C2936 * C48948) * C49282) *
              C49024 * C49007 * C110 -
          ((C2935 * C48948 + C2936 * C49245) * C49282 +
           (C2557 * C48948 + C2556 * C49245) * C20346 +
           (C451 * C48948 + C452 * C49245) * C20345 +
           (C175 * C48948 + C174 * C49245) * C20344) *
              C49024 * C49007 * C111 +
          ((C175 * C49245 + C176 * C48948) * C20344 +
           (C451 * C49245 + C450 * C48948) * C20345 +
           (C2557 * C49245 + C2558 * C48948) * C20346 +
           (C2935 * C49245 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C48948) *
               C49282) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 +
             (C8390 + C8389 + C8388) * C48948) *
                C49140) *
               C49024 * C260 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C8202 + C8201 + C8200) * C49245 +
             (C8199 + C8198 + C8197) * C48948) *
                C49268 +
            ((C12840 + C12839 + C12838) * C49245 +
             (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
              C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
              C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C8385 + C8386 + C8387) * C48948 +
             (C8388 + C8389 + C8390) * C49245) *
                C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C2933 * C3898 + C452 * C3899 + C451 * C3900 + C450 * C49267) *
                C49140) *
               C49024 * C260 -
           ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
                C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C49024 * C49295) *
              C262 +
          (((C316 * C3898 + C315 * C3899 + C314 * C3900 + C313 * C49267) *
                C49268 +
            (C2736 * C3898 + C2735 * C3899 + C5261 * C3900 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C449 * C49267 + C450 * C3900 + C451 * C3899 + C452 * C3898) *
                C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C2933 * C49245 + C452 * C48948) * C20345 +
            (C2934 * C49245 + C2556 * C48948) * C20346 +
            (C3797 * C49245 + C2936 * C48948) * C49282) *
               C49024 * C260 -
           ((C20485 * C48948 + C18341 * C49245) * C49282 +
            (C2734 * C48948 + C3370 * C49245) * C20346 +
            (C2736 * C48948 + C3369 * C49245) * C20345 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49245) *
                C20344) *
               C49024 * C49295) *
              C262 +
          (((C316 * C49245 + C315 * C48948) * C20344 +
            (C2736 * C49245 + C2735 * C48948) * C20345 +
            (C2734 * C49245 + C2733 * C48948) * C20346 +
            (C20485 * C49245 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C48948) *
                C49282) *
               C49024 * C49295 -
           ((C2935 * C48948 + C2936 * C49245) * C49282 +
            (C2557 * C48948 + C2556 * C49245) * C20346 +
            (C451 * C48948 + C452 * C49245) * C20345 +
            (C175 * C48948 + C174 * C49245) * C20344) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C398 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C49007 * C262 +
          (((C13037 * C49245 + (C8387 + C8386 + C8385) * C48948) * C49268 +
            ((C10395 + C10396 + C10397) * C49245 +
             (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
              C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
              C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C49007 * C262 +
          (((C5396 + C5397 + C5398 + C5399) * C49268 +
            (C2556 * C3898 + C2557 * C3899 + C2558 * C3900 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
            (C20620 + C20621) * C49282) *
               C398 -
           ((C18094 * C48948 + C18093 * C49245) * C49282 +
            (C20621 + C20620) * C20346 + (C20619 + C20618) * C20345 +
            (C20617 + C20616) * C20344) *
               C49297) *
              C49007 * C262 +
          (((C20622 + C20623) * C20344 + (C20624 + C20625) * C20345 +
            (C20626 + C20627) * C20346 +
            (C18094 * C49245 +
             (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                 C48948) *
                C49282) *
               C49297 -
           ((C20627 + C20626) * C49282 + (C20625 + C20624) * C20346 +
            (C20623 + C20622) * C20345 +
            (C175 * C48948 + C174 * C49245) * C20344) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C49024 * C534 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C8202 + C8201 + C8200) * C49245 +
             (C8199 + C8198 + C8197) * C48948) *
                C49268 +
            ((C12840 + C12839 + C12838) * C49245 +
             (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
              C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
              C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C49024 * C534 -
           ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
                C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C49024 * C49295) *
              C536 +
          (((C316 * C3898 + C315 * C3899 + C314 * C3900 + C313 * C49267) *
                C49268 +
            (C2736 * C3898 + C2735 * C3899 + C5261 * C3900 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
            (C20620 + C20621) * C49282) *
               C49024 * C534 -
           ((C20485 * C48948 + C18341 * C49245) * C49282 +
            (C2734 * C48948 + C3370 * C49245) * C20346 +
            (C2736 * C48948 + C3369 * C49245) * C20345 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49245) *
                C20344) *
               C49024 * C49295) *
              C536 +
          (((C316 * C49245 + C315 * C48948) * C20344 +
            (C2736 * C49245 + C2735 * C48948) * C20345 +
            (C2734 * C49245 + C2733 * C48948) * C20346 +
            (C20485 * C49245 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C48948) *
                C49282) *
               C49024 * C49295 -
           ((C20627 + C20626) * C49282 + (C20625 + C20624) * C20346 +
            (C20623 + C20622) * C20345 +
            (C175 * C48948 + C174 * C49245) * C20344) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
              C49024 * C600 -
          (((C12838 + C12839 + C12840) * C48948 +
            (C10842 + C10841 + C10840) * C49245) *
               C49140 +
           ((C8200 + C8201 + C8202) * C48948 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49245) *
               C49268) *
              C49024 * C601 +
          (((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
             C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
             C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
                C49245 +
            (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
             C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
             C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
                C48948) *
               C49268 +
           ((C7943 * C1522 - C7944 * C1516 - C7943 * C1523 + C7937 * C1528 +
             C7945 * C1989 - C7946 * C1986 - C7945 * C1990 + C7938 * C1995 +
             C7947 * C9446 - C7948 * C9444 - C7947 * C9447 + C49300 * C9450) *
                C49245 +
            (C7943 * C1520 - C7944 * C1515 - C7943 * C1521 + C7937 * C1527 +
             C7945 * C1991 - C7946 * C1987 - C7945 * C1992 + C7938 * C1996 +
             C7947 * C9448 - C7948 * C9445 - C7947 * C9449 + C49300 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C5392 + C5393 + C5394 + C5395) * C49140) *
              C49024 * C600 -
          ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
               C49140 +
           (C314 * C49267 + C315 * C3900 + C316 * C3899 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C3898) *
               C49268) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C3898 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C3899 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C3900 +
            (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) *
                C49267) *
               C49268 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C3898 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C3899 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C3900 +
            (C113 * C1524 - C114 * C1517 - C113 * C1525 + C49035 * C1529) *
                C49267) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49245 +
            C174 * C48948) *
               C20344 +
           (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
           (C20620 + C20621) * C49282) *
              C49024 * C600 -
          ((C20485 * C48948 + C18341 * C49245) * C49282 +
           (C2734 * C48948 + C3370 * C49245) * C20346 +
           (C2736 * C48948 + C3369 * C49245) * C20345 +
           (C316 * C48948 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C49245) *
               C20344) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C49245 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) *
                C48948) *
               C20344 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C49245 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C48948) *
               C20345 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C49245 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C48948) *
               C20346 +
           ((C113 * C10328 - C114 * C10326 - C113 * C10329 + C49035 * C10332) *
                C49245 +
            (C113 * C10330 - C114 * C10327 - C113 * C10331 + C49035 * C10333) *
                C48948) *
               C49282) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C398 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C534 +
          ((((C10840 + C10841 + C10842) * C49245 +
             (C12840 + C12839 + C12838) * C48948) *
                C49268 +
            ((C10843 + C10844 + C10845) * C49245 +
             (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
              C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
              C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C534 +
          (((C5758 + C5759 + C5760 + C5761) * C49268 +
            (C3370 * C3898 + C2734 * C3899 + C2733 * C3900 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5761 + C5760 + C5759 + C5758) * C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
            (C20620 + C20621) * C49282) *
               C398 -
           ((C18094 * C48948 + C18093 * C49245) * C49282 +
            (C20621 + C20620) * C20346 + (C20619 + C20618) * C20345 +
            (C20617 + C20616) * C20344) *
               C49297) *
              C534 +
          (((C20986 + C20987) * C20344 + (C20988 + C20989) * C20345 +
            (C20990 + C20991) * C20346 +
            (C18342 * C49245 +
             (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                 C48948) *
                C49282) *
               C49297 -
           ((C20991 + C20990) * C49282 + (C20989 + C20988) * C20346 +
            (C20987 + C20986) * C20345 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49245) *
                C20344) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C808 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C49007 * C536 +
          (((C13037 * C49245 + (C8387 + C8386 + C8385) * C48948) * C49268 +
            ((C10395 + C10396 + C10397) * C49245 +
             (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
              C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
              C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C49007 * C536 +
          (((C5396 + C5397 + C5398 + C5399) * C49268 +
            (C2556 * C3898 + C2557 * C3899 + C2558 * C3900 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
            (C20620 + C20621) * C49282) *
               C808 -
           ((C18094 * C48948 + C18093 * C49245) * C49282 +
            (C20621 + C20620) * C20346 + (C20619 + C20618) * C20345 +
            (C20617 + C20616) * C20344) *
               C49297) *
              C49007 * C536 +
          (((C20622 + C20623) * C20344 + (C20624 + C20625) * C20345 +
            (C20626 + C20627) * C20346 +
            (C18094 * C49245 +
             (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                 C48948) *
                C49282) *
               C49297 -
           ((C20627 + C20626) * C49282 + (C20625 + C20624) * C20346 +
            (C20623 + C20622) * C20345 +
            (C175 * C48948 + C174 * C49245) * C20344) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C808 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C260 +
          ((((C10840 + C10841 + C10842) * C49245 +
             (C12840 + C12839 + C12838) * C48948) *
                C49268 +
            ((C10843 + C10844 + C10845) * C49245 +
             (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
              C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
              C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C260 +
          (((C5758 + C5759 + C5760 + C5761) * C49268 +
            (C3370 * C3898 + C2734 * C3899 + C2733 * C3900 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5761 + C5760 + C5759 + C5758) * C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49245 +
             C174 * C48948) *
                C20344 +
            (C20616 + C20617) * C20345 + (C20618 + C20619) * C20346 +
            (C20620 + C20621) * C49282) *
               C808 -
           ((C18094 * C48948 + C18093 * C49245) * C49282 +
            (C20621 + C20620) * C20346 + (C20619 + C20618) * C20345 +
            (C20617 + C20616) * C20344) *
               C49297) *
              C260 +
          (((C20986 + C20987) * C20344 + (C20988 + C20989) * C20345 +
            (C20990 + C20991) * C20346 +
            (C18342 * C49245 +
             (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                 C48948) *
                C49282) *
               C49297 -
           ((C20991 + C20990) * C49282 + (C20989 + C20988) * C20346 +
            (C20987 + C20986) * C20345 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49245) *
                C20344) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
              C954 -
          (((C10397 + C10396 + C10395) * C48948 +
            (C10394 + C10393 + C10392) * C49245) *
               C49140 +
           (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
              C955 +
          ((C11269 * C49245 + (C10395 + C10396 + C10397) * C48948) * C49268 +
           ((C11279 + C11278 + C11277) * C49245 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C5392 + C5393 + C5394 + C5395) * C49140) *
              C954 -
          ((C6120 + C6121 + C6122 + C6123) * C49140 +
           (C5395 + C5394 + C5393 + C5392) * C49268) *
              C955 +
          ((C6123 + C6122 + C6121 + C6120) * C49268 +
           (C3797 * C3898 + C2936 * C3899 + C2935 * C3900 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C49267) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49245 +
            C174 * C48948) *
               C20344 +
           (C20616 + C20617) * C20345 + C21350 * C20346 + C21351 * C49282) *
              C954 -
          ((C21352 + C21353) * C49282 + (C20621 + C20620) * C20346 +
           (C20619 + C20618) * C20345 + (C20617 + C20616) * C20344) *
              C955 +
          (C21350 * C20344 + C21351 * C20345 + (C21353 + C21352) * C20346 +
           (C18581 * C49245 +
            (C113 * C18070 - C114 * C18067 - C113 * C18071 + C49035 * C18073) *
                C48948) *
               C49282) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
           (C1156 + C1155 + C1154) * C1090) *
              C49053 * C49024 * C49007 * C111 +
          (C1164 * C1090 + (C1162 + C1161 + C1160) * C1091 +
           (C1093 * C130 - C1094 * C119 - C1093 * C131 + C49332 * C140 +
            C1095 * C270 - C1096 * C264 - C1095 * C271 + C49320 * C282 +
            C1097 * C617 - C1098 * C608 - C1097 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C49007 * C110 -
          (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
           C174 * C102) *
              C49053 * C49024 * C49007 * C111 +
          (C175 * C102 + C176 * C103 + C177 * C104 + C178 * C105 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49035 * C142) * C106) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C8010 + C8011 + C8012) * C49289 + (C8009 + C8008 + C8007) * C49316 +
           (C8006 + C8005 + C8004) * C49329) *
              C49053 * C49024 * C49007 * C111 +
          (C8014 * C49329 + (C8012 + C8011 + C8010) * C49316 +
           (C7943 * C130 - C7944 * C119 - C7943 * C131 + C7937 * C140 +
            C7945 * C270 - C7946 * C264 - C7945 * C271 + C7938 * C282 +
            C7947 * C617 - C7948 * C608 - C7947 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C49007 * C110 -
          (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
           C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
           C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
           C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
           C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
              C48938 * C49053 * C49024 * C49007 * C111 +
          (C9262 * C126 - C9263 * C117 - C9262 * C127 + C9256 * C138 +
           C9264 * C274 - C9265 * C266 - C9264 * C275 + C9257 * C284 +
           C9266 * C613 - C9267 * C606 - C9266 * C614 + C9258 * C621 +
           C9268 * C1314 - C9269 * C1310 - C9268 * C1315 + C9259 * C1322 +
           C9270 * C1835 - C9271 * C1830 - C9270 * C1836 + C9260 * C1839) *
              C48938 * C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C2933 * C49329 + C452 * C49316 + C451 * C49289) * C15375 +
           (C2934 * C49329 + C2556 * C49316 + C2557 * C49289) * C49303) *
              C49024 * C49007 * C110 -
          ((C2558 * C49289 + C2557 * C49316 + C2556 * C49329) * C49303 +
           (C450 * C49289 + C451 * C49316 + C452 * C49329) * C15375 +
           (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
              C49024 * C49007 * C111 +
          ((C175 * C49329 + C176 * C49316 + C177 * C49289) * C15374 +
           (C451 * C49329 + C450 * C49316 + C449 * C49289) * C15375 +
           (C2557 * C49329 + C2558 * C49316 +
            (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                C49289) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422 +
            C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
            C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528) *
               C48938 * C15375 +
           (C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
            C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
            C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
               C48938 * C49303) *
              C49024 * C49007 * C110 -
          ((C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421 +
            C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
            C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973) *
               C48938 * C49303 +
           (C1570 + C1571 + C1572) * C48938 * C15375 +
           (C1156 + C1155 + C1154) * C48938 * C15374) *
              C49024 * C49007 * C111 +
          (C1164 * C48938 * C15374 + (C1569 + C1568 + C1567) * C48938 * C15375 +
           (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
            C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
            C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
               C48938 * C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C260 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C260 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C262 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C260 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C260 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C262 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C2933 * C49329 + C452 * C49316 + C451 * C49289) * C15375 +
            (C2934 * C49329 + C2556 * C49316 + C2557 * C49289) * C49303) *
               C49024 * C260 -
           ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
            (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C49024 * C49295) *
              C262 +
          (((C316 * C49329 + C315 * C49316 + C314 * C49289) * C15374 +
            (C2736 * C49329 + C2735 * C49316 + C5261 * C49289) * C15375 +
            (C2734 * C49329 + C2733 * C49316 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2558 * C49289 + C2557 * C49316 + C2556 * C49329) * C49303 +
            (C450 * C49289 + C451 * C49316 + C452 * C49329) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528) *
                C48938 * C15375 +
            (C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
             C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
             C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
                C48938 * C49303) *
               C49024 * C260 -
           ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
             C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
             C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
                C48938 * C49303 +
            (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
                C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C49024 * C49295) *
              C262 +
          (((C1368 + C1367 + C1366) * C48938 * C15374 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C48938 * C15375 +
            (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
             C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
             C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421 +
             C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
             C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973) *
                C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C262 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C262 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C49007 * C262 +
          (((C15676 + C15677 + C15678) * C15374 +
            (C15679 + C15680 + C15681) * C15375 +
            (C2936 * C49329 + C2935 * C49316 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C398 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C49007 * C262 +
          (((C1572 + C1571 + C1570) * C48938 * C15374 +
            (C16959 + C16960 + C16961) * C48938 * C15375 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C534 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C534 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C536 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C534 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C534 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C536 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C49024 * C534 -
           ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
            (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C49024 * C49295) *
              C536 +
          (((C316 * C49329 + C315 * C49316 + C314 * C49289) * C15374 +
            (C2736 * C49329 + C2735 * C49316 + C5261 * C49289) * C15375 +
            (C2734 * C49329 + C2733 * C49316 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C49024 * C534 -
           ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
             C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
             C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
                C48938 * C49303 +
            (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
                C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C49024 * C49295) *
              C536 +
          (((C1368 + C1367 + C1366) * C48938 * C15374 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C48938 * C15375 +
            (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
             C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
             C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C600 -
          ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
           (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
            C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
            C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
               C1090) *
              C49053 * C49024 * C601 +
          ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
            C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
            C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
               C1090 +
           (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
            C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
            C1097 * C1833 - C1098 * C1829 - C1097 * C1834 + C49300 * C1838) *
               C1091 +
           (C1093 * C613 - C1094 * C606 - C1093 * C614 + C49332 * C621 +
            C1095 * C1314 - C1096 * C1310 - C1095 * C1315 + C49320 * C1322 +
            C1097 * C1835 - C1098 * C1830 - C1097 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C600 -
          (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
           (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
              C49053 * C49024 * C601 +
          ((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C102 +
           (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C103 +
           (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C104 +
           (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) * C105 +
           (C113 * C617 - C114 * C608 - C113 * C618 + C49035 * C623) * C106) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C600 -
          ((C8197 + C8198 + C8199) * C49289 + (C8200 + C8201 + C8202) * C49316 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C49329) *
              C49053 * C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C49329 +
           (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
            C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
            C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
               C49316 +
           (C7943 * C613 - C7944 * C606 - C7943 * C614 + C7937 * C621 +
            C7945 * C1314 - C7946 * C1310 - C7945 * C1315 + C7938 * C1322 +
            C7947 * C1835 - C7948 * C1830 - C7947 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C600 -
          (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
           C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
           C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
           C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
           C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
              C48938 * C49053 * C49024 * C601 +
          (C9262 * C609 - C9263 * C604 - C9262 * C610 + C9256 * C619 +
           C9264 * C1318 - C9265 * C1312 - C9264 * C1319 + C9257 * C1324 +
           C9266 * C1831 - C9267 * C1828 - C9266 * C1832 + C9258 * C1837 +
           C9268 * C9356 - C9269 * C9354 - C9268 * C9357 + C9259 * C9360 +
           C9270 * C9597 - C9271 * C9596 - C9270 * C9598 + C9260 * C9599) *
              C48938 * C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C15670 + C15671 + C15672) * C15375 +
           (C15673 + C15674 + C15675) * C49303) *
              C49024 * C600 -
          ((C2733 * C49289 + C2734 * C49316 + C3370 * C49329) * C49303 +
           (C2735 * C49289 + C2736 * C49316 + C3369 * C49329) * C15375 +
           (C315 * C49289 + C316 * C49316 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C49329) *
               C15374) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C49329 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C49316 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                C49289) *
               C15374 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C49329 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C49316 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49289) *
               C15375 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C49329 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C49316 +
            (C113 * C2416 - C114 * C2405 - C113 * C2417 + C49035 * C2423) *
                C49289) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C16953 + C16954 + C16955) * C48938 * C15375 +
           (C16956 + C16957 + C16958) * C48938 * C49303) *
              C49024 * C600 -
          ((C1097 * C9914 - C1098 * C9912 - C1097 * C9915 + C49300 * C9918 +
            C1095 * C2408 - C1096 * C2401 - C1095 * C2409 + C49320 * C2419 +
            C1093 * C2406 - C1094 * C2400 - C1093 * C2407 + C49332 * C2418) *
               C48938 * C49303 +
           (C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995 +
            C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
            C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721) *
               C48938 * C15375 +
           (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
            C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
            C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
               C48938 * C15374) *
              C49024 * C601 +
          ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
            C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
            C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
               C48938 * C15374 +
           (C1093 * C1522 - C1094 * C1516 - C1093 * C1523 + C49332 * C1528 +
            C1095 * C1989 - C1096 * C1986 - C1095 * C1990 + C49320 * C1995 +
            C1097 * C9446 - C1098 * C9444 - C1097 * C9447 + C49300 * C9450) *
               C48938 * C15375 +
           (C1093 * C2408 - C1094 * C2401 - C1093 * C2409 + C49332 * C2419 +
            C1095 * C9914 - C1096 * C9912 - C1095 * C9915 + C49320 * C9918 +
            C1097 * C9916 - C1098 * C9913 - C1097 * C9917 + C49300 * C9919) *
               C48938 * C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C534 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C534 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C534 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C534 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C534 +
          (((C16084 + C16085 + C16086) * C15374 +
            (C16087 + C16088 + C16089) * C15375 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C49329 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C49316 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C16089 + C16088 + C16087) * C49303 +
            (C16086 + C16085 + C16084) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C398 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C534 +
          (((C17400 + C17401 + C17402) * C48938 * C15374 +
            (C17403 + C17404 + C17405) * C48938 * C15375 +
            (C1093 * C3343 - C1094 * C3340 - C1093 * C3344 + C49332 * C3349 +
             C1095 * C10328 - C1096 * C10326 - C1095 * C10329 +
             C49320 * C10332 + C1097 * C10800 - C1098 * C10799 -
             C1097 * C10801 + C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C17405 + C17404 + C17403) * C48938 * C49303 +
            (C17402 + C17401 + C17400) * C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C536 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C536 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C49007 * C536 +
          (((C15676 + C15677 + C15678) * C15374 +
            (C15679 + C15680 + C15681) * C15375 +
            (C2936 * C49329 + C2935 * C49316 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C15681 + C15680 + C15679) * C49303 +
            (C15678 + C15677 + C15676) * C15375 +
            (C176 * C49289 + C175 * C49316 + C174 * C49329) * C15374) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C808 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C49007 * C536 +
          (((C1572 + C1571 + C1570) * C48938 * C15374 +
            (C16959 + C16960 + C16961) * C48938 * C15375 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C16961 + C16960 + C16959) * C48938 * C49303 +
            (C1570 + C1571 + C1572) * C48938 * C15375 +
            (C1156 + C1155 + C1154) * C48938 * C15374) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C260 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C260 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C260 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C260 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49329 +
             C174 * C49316 + C175 * C49289) *
                C15374 +
            (C15670 + C15671 + C15672) * C15375 +
            (C15673 + C15674 + C15675) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C49316 + C3797 * C49329) * C49303 +
            (C15675 + C15674 + C15673) * C15375 +
            (C15672 + C15671 + C15670) * C15374) *
               C49297) *
              C260 +
          (((C16084 + C16085 + C16086) * C15374 +
            (C16087 + C16088 + C16089) * C15375 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C49329 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C49316 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C16089 + C16088 + C16087) * C49303 +
            (C16086 + C16085 + C16084) * C15375 +
            (C315 * C49289 + C316 * C49316 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49329) *
                C15374) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C48938 * C15374 +
            (C16953 + C16954 + C16955) * C48938 * C15375 +
            (C16956 + C16957 + C16958) * C48938 * C49303) *
               C808 -
           ((C1097 * C10328 - C1098 * C10326 - C1097 * C10329 +
             C49300 * C10332 + C1095 * C3343 - C1096 * C3340 - C1095 * C3344 +
             C49320 * C3349 + C1093 * C2890 - C1094 * C2884 - C1093 * C2891 +
             C49332 * C2896) *
                C48938 * C49303 +
            (C16958 + C16957 + C16956) * C48938 * C15375 +
            (C16955 + C16954 + C16953) * C48938 * C15374) *
               C49297) *
              C260 +
          (((C17400 + C17401 + C17402) * C48938 * C15374 +
            (C17403 + C17404 + C17405) * C48938 * C15375 +
            (C1093 * C3343 - C1094 * C3340 - C1093 * C3344 + C49332 * C3349 +
             C1095 * C10328 - C1096 * C10326 - C1095 * C10329 +
             C49320 * C10332 + C1097 * C10800 - C1098 * C10799 -
             C1097 * C10801 + C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C17405 + C17404 + C17403) * C48938 * C49303 +
            (C17402 + C17401 + C17400) * C48938 * C15375 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C48938 * C15374) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C954 -
          ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
           (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
            C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
            C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
               C1090) *
              C49053 * C955 +
          ((C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
            C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
            C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
               C1090 +
           (C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973 +
            C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
            C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421) *
               C1091 +
           (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
            C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
            C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C954 -
          (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
           (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
              C49053 * C955 +
          ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C102 +
           (C113 * C964 - C114 * C958 - C113 * C965 + C49035 * C973) * C103 +
           (C113 * C966 - C114 * C959 - C113 * C967 + C49035 * C974) * C104 +
           (C113 * C968 - C114 * C960 - C113 * C969 + C49035 * C975) * C105 +
           (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) * C106) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C954 -
          ((C8385 + C8386 + C8387) * C49289 + (C8388 + C8389 + C8390) * C49316 +
           (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
               C49329) *
              C49053 * C955 +
          ((C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C49329 +
           (C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421) *
               C49316 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C954 -
          (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
           C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
           C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
           C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
           C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
              C48938 * C49053 * C955 +
          (C9262 * C962 - C9263 * C957 - C9262 * C963 + C9256 * C972 +
           C9264 * C2406 - C9265 * C2400 - C9264 * C2407 + C9257 * C2418 +
           C9266 * C2408 - C9267 * C2401 - C9266 * C2409 + C9258 * C2419 +
           C9268 * C9914 - C9269 * C9912 - C9268 * C9915 + C9259 * C9918 +
           C9270 * C9916 - C9271 * C9913 - C9270 * C9917 + C9260 * C9919) *
              C48938 * C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49329 +
            C174 * C49316 + C175 * C49289) *
               C15374 +
           (C15670 + C15671 + C15672) * C15375 + C16496 * C49303) *
              C954 -
          ((C16493 + C16494 + C16495) * C49303 +
           (C15675 + C15674 + C15673) * C15375 +
           (C15672 + C15671 + C15670) * C15374) *
              C955 +
          (C16496 * C15374 + (C16495 + C16494 + C16493) * C15375 +
           ((C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
                C49329 +
            (C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
                C49316 +
            (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                C49289) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C48938 * C15374 +
           (C16953 + C16954 + C16955) * C48938 * C15375 + C17825 * C49303) *
              C954 -
          ((C17829 + C17830 + C17831) * C48938 * C49303 +
           (C16958 + C16957 + C16956) * C48938 * C15375 +
           (C16955 + C16954 + C16953) * C48938 * C15374) *
              C955 +
          (C17825 * C15374 + (C17831 + C17830 + C17829) * C48938 * C15375 +
           (C1093 * C3777 - C1094 * C3774 - C1093 * C3778 + C49332 * C3783 +
            C1095 * C11249 - C1096 * C11247 - C1095 * C11250 + C49320 * C11253 +
            C1097 * C11251 - C1098 * C11248 - C1097 * C11252 +
            C49300 * C11254) *
               C48938 * C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48943 +
            (C3955 + C3956) * C48951 + C3963 * C26749) *
               C31428 +
           ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C4303 + C4304) * C26749 + C6712 * C48951 + C6713 * C48943) *
               C49140 +
           ((C3960 + C3959) * C26749 + (C3958 + C3957) * C48951 +
            (C3956 + C3955) * C48943) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C3963 * C48943 + C3964 * C48951 + (C3962 + C3961) * C26749) *
               C31428 +
           (C6270 * C48943 + (C4304 + C4303) * C48951 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C26749) *
               C49140) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C49024 * C260 -
           (((C6489 + C6490) * C26749 + (C6491 + C6492) * C48951 +
             (C7279 + C7278) * C48943) *
                C49140 +
            ((C4133 + C4134) * C26749 + (C4135 + C4136) * C48951 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C48943) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C4136 + C4135) * C48943 + (C4134 + C4133) * C48951 +
             (C4132 + C4131) * C26749) *
                C31428 +
            ((C6492 + C6491) * C48943 + (C6490 + C6489) * C48951 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C26749) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C26749 + C6712 * C48951 + C6713 * C48943) *
                C49140 +
            ((C3960 + C3959) * C26749 + (C3958 + C3957) * C48951 +
             (C3956 + C3955) * C48943) *
                C31428) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C26749 + C19140 * C48951 +
             (C7826 + C7827) * C48943) *
                C49140 +
            (C6712 * C26749 + C6713 * C48951 + (C6727 + C6726) * C48943) *
                C31428) *
               C49297) *
              C49007 * C262 +
          (((C6695 * C48943 + C6270 * C48951 + (C4304 + C4303) * C26749) *
                C31428 +
            (C19131 * C48943 + (C6729 + C6728) * C48951 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C26749) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C26749 + C6712 * C48951 + C6713 * C48943) *
                C49140 +
            ((C3960 + C3959) * C26749 + (C3958 + C3957) * C48951 +
             (C3956 + C3955) * C48943) *
                C31428) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C49024 * C534 -
           (((C6489 + C6490) * C26749 + (C6491 + C6492) * C48951 +
             (C7279 + C7278) * C48943) *
                C49140 +
            ((C4133 + C4134) * C26749 + (C4135 + C4136) * C48951 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C48943) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C4136 + C4135) * C48943 + (C4134 + C4133) * C48951 +
             (C4132 + C4131) * C26749) *
                C31428 +
            ((C6492 + C6491) * C48943 + (C6490 + C6489) * C48951 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C26749) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C26749 + C6712 * C48951 + C6713 * C48943) *
                C49140 +
            ((C3960 + C3959) * C26749 + (C3958 + C3957) * C48951 +
             (C3956 + C3955) * C48943) *
                C31428) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48943 +
            (C3955 + C3956) * C48951 + C3963 * C26749) *
               C31428 +
           ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
               C49140) *
              C49024 * C600 -
          (((C6489 + C6490) * C26749 + (C6491 + C6492) * C48951 +
            (C7279 + C7278) * C48943) *
               C49140 +
           ((C4133 + C4134) * C26749 + (C4135 + C4136) * C48951 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C48943) *
               C31428) *
              C49024 * C601 +
          (((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
             C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
                C48943 +
            (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
             C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
                C48951 +
            (C3902 * C613 - C3903 * C606 - C3902 * C614 + C49266 * C621 +
             C3904 * C1314 - C3905 * C1310 - C3904 * C1315 + C49098 * C1322) *
                C26749) *
               C31428 +
           ((C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
             C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
                C48943 +
            (C3902 * C1520 - C3903 * C1515 - C3902 * C1521 + C49266 * C1527 +
             C3904 * C1991 - C3905 * C1987 - C3904 * C1992 + C49098 * C1996) *
                C48951 +
            (C3902 * C1518 - C3903 * C1514 - C3902 * C1519 + C49266 * C1526 +
             C3904 * C1993 - C3905 * C1988 - C3904 * C1994 + C49098 * C1997) *
                C26749) *
               C49140) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C26749 + C19140 * C48951 +
             (C7826 + C7827) * C48943) *
                C49140 +
            (C6712 * C26749 + C6713 * C48951 + (C6727 + C6726) * C48943) *
                C31428) *
               C49297) *
              C534 +
          ((((C7278 + C7279) * C48943 + (C6492 + C6491) * C48951 +
             (C6490 + C6489) * C26749) *
                C31428 +
            ((C19693 + C19694) * C48943 + (C18936 + C18935) * C48951 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C26749) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C26749 + (C6491 + C6492) * C48951 +
             (C7279 + C7278) * C48943) *
                C49140 +
            ((C4133 + C4134) * C26749 + (C4135 + C4136) * C48951 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C48943) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C26749 + C19140 * C48951 +
             (C7826 + C7827) * C48943) *
                C49140 +
            (C6712 * C26749 + C6713 * C48951 + (C6727 + C6726) * C48943) *
                C31428) *
               C49297) *
              C49007 * C536 +
          (((C6695 * C48943 + C6270 * C48951 + (C4304 + C4303) * C26749) *
                C31428 +
            (C19131 * C48943 + (C6729 + C6728) * C48951 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C26749) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C26749 + C6712 * C48951 + C6713 * C48943) *
                C49140 +
            ((C3960 + C3959) * C26749 + (C3958 + C3957) * C48951 +
             (C3956 + C3955) * C48943) *
                C31428) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C48943 +
             (C3955 + C3956) * C48951 + C3963 * C26749) *
                C31428 +
            ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C26749 + C19140 * C48951 +
             (C7826 + C7827) * C48943) *
                C49140 +
            (C6712 * C26749 + C6713 * C48951 + (C6727 + C6726) * C48943) *
                C31428) *
               C49297) *
              C260 +
          ((((C7278 + C7279) * C48943 + (C6492 + C6491) * C48951 +
             (C6490 + C6489) * C26749) *
                C31428 +
            ((C19693 + C19694) * C48943 + (C18936 + C18935) * C48951 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C26749) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C26749 + (C6491 + C6492) * C48951 +
             (C7279 + C7278) * C48943) *
                C49140 +
            ((C4133 + C4134) * C26749 + (C4135 + C4136) * C48951 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C48943) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C48943 +
            (C3955 + C3956) * C48951 + C3963 * C26749) *
               C31428 +
           ((C6726 + C6727) * C48943 + C6695 * C48951 + C6270 * C26749) *
               C49140) *
              C954 -
          (((C6728 + C6729) * C26749 + C19140 * C48951 +
            (C7826 + C7827) * C48943) *
               C49140 +
           (C6712 * C26749 + C6713 * C48951 + (C6727 + C6726) * C48943) *
               C31428) *
              C955 +
          ((C20229 * C48943 + C19131 * C48951 + (C6729 + C6728) * C26749) *
               C31428 +
           (C22443 * C48943 + (C19146 + C19145) * C48951 +
            (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
             C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                C26749) *
               C49140) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C23786 +
            (C3955 + C3956) * C48948) *
               C49136 +
           ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
           (C20229 * C23786 + C19131 * C48948) * C36863) *
              C49024 * C49007 * C110 -
          (((C6728 + C6729) * C48948 + C19140 * C23786) * C36863 +
           (C6712 * C48948 + C6713 * C23786) * C49143 +
           ((C3958 + C3957) * C48948 + (C3956 + C3955) * C23786) * C49136) *
              C49024 * C49007 * C111 +
          ((C3963 * C23786 + C3964 * C48948) * C49136 +
           (C6270 * C23786 + (C4304 + C4303) * C48948) * C49143 +
           ((C6729 + C6728) * C23786 +
            (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
             C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                C48948) *
               C36863) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C49024 * C260 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C23786) * C36863 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C23786) * C49143 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C23786) *
                C49136) *
               C49024 * C49295) *
              C262 +
          ((((C4136 + C4135) * C23786 + (C4134 + C4133) * C48948) * C49136 +
            ((C6492 + C6491) * C23786 + (C6490 + C6489) * C48948) * C49143 +
            ((C18936 + C18935) * C23786 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C48948) *
                C36863) *
               C49024 * C49295 -
           (((C6728 + C6729) * C48948 + C19140 * C23786) * C36863 +
            (C6712 * C48948 + C6713 * C23786) * C49143 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C23786) * C49136) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C398 -
           (((C19145 + C19146) * C48948 + (C20245 + C20246) * C23786) * C36863 +
            (C19140 * C48948 + (C7826 + C7827) * C23786) * C49143 +
            (C6713 * C48948 + (C6727 + C6726) * C23786) * C49136) *
               C49297) *
              C49007 * C262 +
          (((C6695 * C23786 + C6270 * C48948) * C49136 +
            (C19131 * C23786 + (C6729 + C6728) * C48948) * C49143 +
            ((C19146 + C19145) * C23786 +
             (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
              C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                 C48948) *
                C36863) *
               C49297 -
           (((C6728 + C6729) * C48948 + C19140 * C23786) * C36863 +
            (C6712 * C48948 + C6713 * C23786) * C49143 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C23786) * C49136) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C49024 * C534 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C23786) * C36863 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C23786) * C49143 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C23786) *
                C49136) *
               C49024 * C49295) *
              C536 +
          ((((C4136 + C4135) * C23786 + (C4134 + C4133) * C48948) * C49136 +
            ((C6492 + C6491) * C23786 + (C6490 + C6489) * C48948) * C49143 +
            ((C18936 + C18935) * C23786 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C48948) *
                C36863) *
               C49024 * C49295 -
           (((C6728 + C6729) * C48948 + C19140 * C23786) * C36863 +
            (C6712 * C48948 + C6713 * C23786) * C49143 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C23786) * C49136) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C23786 +
            (C3955 + C3956) * C48948) *
               C49136 +
           ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
           (C20229 * C23786 + C19131 * C48948) * C36863) *
              C49024 * C600 -
          (((C18935 + C18936) * C48948 + (C19694 + C19693) * C23786) * C36863 +
           ((C6491 + C6492) * C48948 + (C7279 + C7278) * C23786) * C49143 +
           ((C4135 + C4136) * C48948 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C23786) *
               C49136) *
              C49024 * C601 +
          (((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
             C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
                C23786 +
            (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
             C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
                C48948) *
               C49136 +
           ((C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
             C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
                C23786 +
            (C3902 * C1520 - C3903 * C1515 - C3902 * C1521 + C49266 * C1527 +
             C3904 * C1991 - C3905 * C1987 - C3904 * C1992 + C49098 * C1996) *
                C48948) *
               C49143 +
           ((C3902 * C2408 - C3903 * C2401 - C3902 * C2409 + C49266 * C2419 +
             C3904 * C9914 - C3905 * C9912 - C3904 * C9915 + C49098 * C9918) *
                C23786 +
            (C3902 * C2412 - C3903 * C2403 - C3902 * C2413 + C49266 * C2421 +
             C3904 * C10177 - C3905 * C10176 - C3904 * C10178 +
             C49098 * C10179) *
                C48948) *
               C36863) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C398 -
           (((C19145 + C19146) * C48948 + (C20245 + C20246) * C23786) * C36863 +
            (C19140 * C48948 + (C7826 + C7827) * C23786) * C49143 +
            (C6713 * C48948 + (C6727 + C6726) * C23786) * C49136) *
               C49297) *
              C534 +
          ((((C7278 + C7279) * C23786 + (C6492 + C6491) * C48948) * C49136 +
            ((C19693 + C19694) * C23786 + (C18936 + C18935) * C48948) * C49143 +
            ((C22082 + C22083) * C23786 +
             (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
              C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
              C49098 * C10333) *
                 C48948) *
                C36863) *
               C49297 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C23786) * C36863 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C23786) * C49143 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C23786) *
                C49136) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C808 -
           (((C19145 + C19146) * C48948 + (C20245 + C20246) * C23786) * C36863 +
            (C19140 * C48948 + (C7826 + C7827) * C23786) * C49143 +
            (C6713 * C48948 + (C6727 + C6726) * C23786) * C49136) *
               C49297) *
              C49007 * C536 +
          (((C6695 * C23786 + C6270 * C48948) * C49136 +
            (C19131 * C23786 + (C6729 + C6728) * C48948) * C49143 +
            ((C19146 + C19145) * C23786 +
             (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
              C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                 C48948) *
                C36863) *
               C49297 -
           (((C6728 + C6729) * C48948 + C19140 * C23786) * C36863 +
            (C6712 * C48948 + C6713 * C23786) * C49143 +
            ((C3958 + C3957) * C48948 + (C3956 + C3955) * C23786) * C49136) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C23786 +
             (C3955 + C3956) * C48948) *
                C49136 +
            ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
            (C20229 * C23786 + C19131 * C48948) * C36863) *
               C808 -
           (((C19145 + C19146) * C48948 + (C20245 + C20246) * C23786) * C36863 +
            (C19140 * C48948 + (C7826 + C7827) * C23786) * C49143 +
            (C6713 * C48948 + (C6727 + C6726) * C23786) * C49136) *
               C49297) *
              C260 +
          ((((C7278 + C7279) * C23786 + (C6492 + C6491) * C48948) * C49136 +
            ((C19693 + C19694) * C23786 + (C18936 + C18935) * C48948) * C49143 +
            ((C22082 + C22083) * C23786 +
             (C3902 * C3345 - C3903 * C3341 - C3902 * C3346 + C49266 * C3350 +
              C3904 * C10330 - C3905 * C10327 - C3904 * C10331 +
              C49098 * C10333) *
                 C48948) *
                C36863) *
               C49297 -
           (((C18935 + C18936) * C48948 + (C19694 + C19693) * C23786) * C36863 +
            ((C6491 + C6492) * C48948 + (C7279 + C7278) * C23786) * C49143 +
            ((C4135 + C4136) * C48948 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C23786) *
                C49136) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C23786 +
            (C3955 + C3956) * C48948) *
               C49136 +
           ((C6726 + C6727) * C23786 + C6695 * C48948) * C49143 +
           C39588 * C36863) *
              C954 -
          (((C19145 + C19146) * C48948 + (C20245 + C20246) * C23786) * C36863 +
           (C19140 * C48948 + (C7826 + C7827) * C23786) * C49143 +
           (C6713 * C48948 + (C6727 + C6726) * C23786) * C49136) *
              C955 +
          (C39588 * C49136 +
           (C22443 * C23786 + (C19146 + C19145) * C48948) * C49143 +
           ((C22458 + C22457) * C23786 +
            (C3902 * C3779 - C3903 * C3775 - C3902 * C3780 + C49266 * C3784 +
             C3904 * C17981 - C3905 * C17980 - C3904 * C17982 +
             C49098 * C17983) *
                C48948) *
               C36863) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 +
            (C1572 + C1571 + C1570) * C48948) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C1567 + C1568 + C1569) * C48948 +
            (C1570 + C1571 + C1572) * C23786) *
               C49140 +
           ((C1159 + C1158 + C1157) * C48948 +
            (C1156 + C1155 + C1154) * C23786) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C1164 * C23786 + (C1162 + C1161 + C1160) * C48948) * C31428 +
           ((C1569 + C1568 + C1567) * C23786 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C2933 * C49338 + C452 * C49331 + C451 * C49318 + C450 * C49267) *
               C49140) *
              C49024 * C49007 * C110 -
          ((C449 * C49267 + C450 * C49318 + C451 * C49331 + C452 * C49338) *
               C49140 +
           (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C175 * C49338 + C176 * C49331 + C177 * C49318 + C178 * C49267) *
               C31428 +
           (C451 * C49338 + C450 * C49331 + C449 * C49318 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                C49267) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C23786 +
            C174 * C48948) *
               C49340 +
           (C2933 * C23786 + C452 * C48948) * C49337 +
           (C2934 * C23786 + C2556 * C48948) * C49328 +
           (C3797 * C23786 + C2936 * C48948) * C49282) *
              C49024 * C49007 * C110 -
          ((C2935 * C48948 + C2936 * C23786) * C49282 +
           (C2557 * C48948 + C2556 * C23786) * C49328 +
           (C451 * C48948 + C452 * C23786) * C49337 +
           (C175 * C48948 + C174 * C23786) * C49340) *
              C49024 * C49007 * C111 +
          ((C175 * C23786 + C176 * C48948) * C49340 +
           (C451 * C23786 + C450 * C48948) * C49337 +
           (C2557 * C23786 + C2558 * C48948) * C49328 +
           (C2935 * C23786 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C48948) *
               C49282) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 +
             (C1572 + C1571 + C1570) * C48948) *
                C49140) *
               C49024 * C260 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C1368 + C1367 + C1366) * C23786 +
             (C1365 + C1364 + C1363) * C48948) *
                C31428 +
            ((C32783 + C32782 + C32781) * C23786 +
             (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
              C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
              C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C1567 + C1568 + C1569) * C48948 +
             (C1570 + C1571 + C1572) * C23786) *
                C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C2933 * C49338 + C452 * C49331 + C451 * C49318 + C450 * C49267) *
                C49140) *
               C49024 * C260 -
           ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 +
             C3369 * C49338) *
                C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C49024 * C49295) *
              C262 +
          (((C316 * C49338 + C315 * C49331 + C314 * C49318 + C313 * C49267) *
                C31428 +
            (C2736 * C49338 + C2735 * C49331 + C5261 * C49318 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C449 * C49267 + C450 * C49318 + C451 * C49331 + C452 * C49338) *
                C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C2933 * C23786 + C452 * C48948) * C49337 +
            (C2934 * C23786 + C2556 * C48948) * C49328 +
            (C3797 * C23786 + C2936 * C48948) * C49282) *
               C49024 * C260 -
           ((C20485 * C48948 + C18341 * C23786) * C49282 +
            (C2734 * C48948 + C3370 * C23786) * C49328 +
            (C2736 * C48948 + C3369 * C23786) * C49337 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C23786) *
                C49340) *
               C49024 * C49295) *
              C262 +
          (((C316 * C23786 + C315 * C48948) * C49340 +
            (C2736 * C23786 + C2735 * C48948) * C49337 +
            (C2734 * C23786 + C2733 * C48948) * C49328 +
            (C20485 * C23786 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C48948) *
                C49282) *
               C49024 * C49295 -
           ((C2935 * C48948 + C2936 * C23786) * C49282 +
            (C2557 * C48948 + C2556 * C23786) * C49328 +
            (C451 * C48948 + C452 * C23786) * C49337 +
            (C175 * C48948 + C174 * C23786) * C49340) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C398 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C49007 * C262 +
          (((C32980 * C23786 + (C1569 + C1568 + C1567) * C48948) * C31428 +
            ((C16959 + C16960 + C16961) * C23786 +
             (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
              C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
              C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C49007 * C262 +
          (((C31695 + C31696 + C31697 + C31698) * C31428 +
            (C2556 * C49338 + C2557 * C49331 + C2558 * C49318 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
            (C34416 + C34417) * C49282) *
               C398 -
           ((C18094 * C48948 + C18093 * C23786) * C49282 +
            (C34417 + C34416) * C49328 + (C34415 + C34414) * C49337 +
            (C34413 + C34412) * C49340) *
               C49297) *
              C49007 * C262 +
          (((C34418 + C34419) * C49340 + (C34420 + C34421) * C49337 +
            (C34422 + C34423) * C49328 +
            (C18094 * C23786 +
             (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                 C48948) *
                C49282) *
               C49297 -
           ((C34423 + C34422) * C49282 + (C34421 + C34420) * C49328 +
            (C34419 + C34418) * C49337 +
            (C175 * C48948 + C174 * C23786) * C49340) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C49024 * C534 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C1368 + C1367 + C1366) * C23786 +
             (C1365 + C1364 + C1363) * C48948) *
                C31428 +
            ((C32783 + C32782 + C32781) * C23786 +
             (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
              C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
              C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C49024 * C534 -
           ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 +
             C3369 * C49338) *
                C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C49024 * C49295) *
              C536 +
          (((C316 * C49338 + C315 * C49331 + C314 * C49318 + C313 * C49267) *
                C31428 +
            (C2736 * C49338 + C2735 * C49331 + C5261 * C49318 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
            (C34416 + C34417) * C49282) *
               C49024 * C534 -
           ((C20485 * C48948 + C18341 * C23786) * C49282 +
            (C2734 * C48948 + C3370 * C23786) * C49328 +
            (C2736 * C48948 + C3369 * C23786) * C49337 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C23786) *
                C49340) *
               C49024 * C49295) *
              C536 +
          (((C316 * C23786 + C315 * C48948) * C49340 +
            (C2736 * C23786 + C2735 * C48948) * C49337 +
            (C2734 * C23786 + C2733 * C48948) * C49328 +
            (C20485 * C23786 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C48948) *
                C49282) *
               C49024 * C49295 -
           ((C34423 + C34422) * C49282 + (C34421 + C34420) * C49328 +
            (C34419 + C34418) * C49337 +
            (C175 * C48948 + C174 * C23786) * C49340) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
              C49024 * C600 -
          (((C32781 + C32782 + C32783) * C48948 +
            (C17402 + C17401 + C17400) * C23786) *
               C49140 +
           ((C1366 + C1367 + C1368) * C48948 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C23786) *
               C31428) *
              C49024 * C601 +
          (((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
             C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
             C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
                C23786 +
            (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
             C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
             C1097 * C1833 - C1098 * C1829 - C1097 * C1834 + C49300 * C1838) *
                C48948) *
               C31428 +
           ((C1093 * C1522 - C1094 * C1516 - C1093 * C1523 + C49332 * C1528 +
             C1095 * C1989 - C1096 * C1986 - C1095 * C1990 + C49320 * C1995 +
             C1097 * C9446 - C1098 * C9444 - C1097 * C9447 + C49300 * C9450) *
                C23786 +
            (C1093 * C1520 - C1094 * C1515 - C1093 * C1521 + C49332 * C1527 +
             C1095 * C1991 - C1096 * C1987 - C1095 * C1992 + C49320 * C1996 +
             C1097 * C9448 - C1098 * C9445 - C1097 * C9449 + C49300 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C31691 + C31692 + C31693 + C31694) * C49140) *
              C49024 * C600 -
          ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 + C3369 * C49338) *
               C49140 +
           (C314 * C49267 + C315 * C49318 + C316 * C49331 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C49338) *
               C31428) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C49338 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C49331 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C49318 +
            (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) *
                C49267) *
               C31428 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C49338 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C49331 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49318 +
            (C113 * C1524 - C114 * C1517 - C113 * C1525 + C49035 * C1529) *
                C49267) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C23786 +
            C174 * C48948) *
               C49340 +
           (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
           (C34416 + C34417) * C49282) *
              C49024 * C600 -
          ((C20485 * C48948 + C18341 * C23786) * C49282 +
           (C2734 * C48948 + C3370 * C23786) * C49328 +
           (C2736 * C48948 + C3369 * C23786) * C49337 +
           (C316 * C48948 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C23786) *
               C49340) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C23786 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) *
                C48948) *
               C49340 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C23786 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C48948) *
               C49337 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C23786 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C48948) *
               C49328 +
           ((C113 * C10328 - C114 * C10326 - C113 * C10329 + C49035 * C10332) *
                C23786 +
            (C113 * C10330 - C114 * C10327 - C113 * C10331 + C49035 * C10333) *
                C48948) *
               C49282) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C398 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C534 +
          ((((C17400 + C17401 + C17402) * C23786 +
             (C32783 + C32782 + C32781) * C48948) *
                C31428 +
            ((C17403 + C17404 + C17405) * C23786 +
             (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
              C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
              C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C534 +
          (((C32057 + C32058 + C32059 + C32060) * C31428 +
            (C3370 * C49338 + C2734 * C49331 + C2733 * C49318 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C32060 + C32059 + C32058 + C32057) * C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
            (C34416 + C34417) * C49282) *
               C398 -
           ((C18094 * C48948 + C18093 * C23786) * C49282 +
            (C34417 + C34416) * C49328 + (C34415 + C34414) * C49337 +
            (C34413 + C34412) * C49340) *
               C49297) *
              C534 +
          (((C34782 + C34783) * C49340 + (C34784 + C34785) * C49337 +
            (C34786 + C34787) * C49328 +
            (C18342 * C23786 +
             (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                 C48948) *
                C49282) *
               C49297 -
           ((C34787 + C34786) * C49282 + (C34785 + C34784) * C49328 +
            (C34783 + C34782) * C49337 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C23786) *
                C49340) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C808 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C49007 * C536 +
          (((C32980 * C23786 + (C1569 + C1568 + C1567) * C48948) * C31428 +
            ((C16959 + C16960 + C16961) * C23786 +
             (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
              C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
              C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C49007 * C536 +
          (((C31695 + C31696 + C31697 + C31698) * C31428 +
            (C2556 * C49338 + C2557 * C49331 + C2558 * C49318 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
            (C34416 + C34417) * C49282) *
               C808 -
           ((C18094 * C48948 + C18093 * C23786) * C49282 +
            (C34417 + C34416) * C49328 + (C34415 + C34414) * C49337 +
            (C34413 + C34412) * C49340) *
               C49297) *
              C49007 * C536 +
          (((C34418 + C34419) * C49340 + (C34420 + C34421) * C49337 +
            (C34422 + C34423) * C49328 +
            (C18094 * C23786 +
             (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                 C48948) *
                C49282) *
               C49297 -
           ((C34423 + C34422) * C49282 + (C34421 + C34420) * C49328 +
            (C34419 + C34418) * C49337 +
            (C175 * C48948 + C174 * C23786) * C49340) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C808 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C260 +
          ((((C17400 + C17401 + C17402) * C23786 +
             (C32783 + C32782 + C32781) * C48948) *
                C31428 +
            ((C17403 + C17404 + C17405) * C23786 +
             (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
              C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
              C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C260 +
          (((C32057 + C32058 + C32059 + C32060) * C31428 +
            (C3370 * C49338 + C2734 * C49331 + C2733 * C49318 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C32060 + C32059 + C32058 + C32057) * C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C23786 +
             C174 * C48948) *
                C49340 +
            (C34412 + C34413) * C49337 + (C34414 + C34415) * C49328 +
            (C34416 + C34417) * C49282) *
               C808 -
           ((C18094 * C48948 + C18093 * C23786) * C49282 +
            (C34417 + C34416) * C49328 + (C34415 + C34414) * C49337 +
            (C34413 + C34412) * C49340) *
               C49297) *
              C260 +
          (((C34782 + C34783) * C49340 + (C34784 + C34785) * C49337 +
            (C34786 + C34787) * C49328 +
            (C18342 * C23786 +
             (C113 * C17981 - C114 * C17980 - C113 * C17982 + C49035 * C17983) *
                 C48948) *
                C49282) *
               C49297 -
           ((C34787 + C34786) * C49282 + (C34785 + C34784) * C49328 +
            (C34783 + C34782) * C49337 +
            (C316 * C48948 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C23786) *
                C49340) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
              C954 -
          (((C16961 + C16960 + C16959) * C48948 +
            (C16958 + C16957 + C16956) * C23786) *
               C49140 +
           (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
              C955 +
          ((C17821 * C23786 + (C16959 + C16960 + C16961) * C48948) * C31428 +
           ((C17831 + C17830 + C17829) * C23786 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C31691 + C31692 + C31693 + C31694) * C49140) *
              C954 -
          ((C32419 + C32420 + C32421 + C32422) * C49140 +
           (C31694 + C31693 + C31692 + C31691) * C31428) *
              C955 +
          ((C32422 + C32421 + C32420 + C32419) * C31428 +
           (C3797 * C49338 + C2936 * C49331 + C2935 * C49318 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C49267) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C23786 +
            C174 * C48948) *
               C49340 +
           (C34412 + C34413) * C49337 + C35146 * C49328 + C35147 * C49282) *
              C954 -
          ((C35148 + C35149) * C49282 + (C34417 + C34416) * C49328 +
           (C34415 + C34414) * C49337 + (C34413 + C34412) * C49340) *
              C955 +
          (C35146 * C49340 + C35147 * C49337 + (C35149 + C35148) * C49328 +
           (C18581 * C23786 +
            (C113 * C18070 - C114 * C18067 - C113 * C18071 + C49035 * C18073) *
                C48948) *
               C49282) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48943 +
            C174 * C48951 + C175 * C26749) *
               C49136 +
           (C2933 * C48943 + C452 * C48951 + C451 * C26749) * C49143 +
           (C2934 * C48943 + C2556 * C48951 + C2557 * C26749) * C36863) *
              C49024 * C49007 * C110 -
          ((C2558 * C26749 + C2557 * C48951 + C2556 * C48943) * C36863 +
           (C450 * C26749 + C451 * C48951 + C452 * C48943) * C49143 +
           (C176 * C26749 + C175 * C48951 + C174 * C48943) * C49136) *
              C49024 * C49007 * C111 +
          ((C175 * C48943 + C176 * C48951 + C177 * C26749) * C49136 +
           (C451 * C48943 + C450 * C48951 + C449 * C26749) * C49143 +
           (C2557 * C48943 + C2558 * C48951 +
            (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                C26749) *
               C36863) *
              C49024 * C49007 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C2933 * C48943 + C452 * C48951 + C451 * C26749) * C49143 +
            (C2934 * C48943 + C2556 * C48951 + C2557 * C26749) * C36863) *
               C49024 * C260 -
           ((C2733 * C26749 + C2734 * C48951 + C3370 * C48943) * C36863 +
            (C2735 * C26749 + C2736 * C48951 + C3369 * C48943) * C49143 +
            (C315 * C26749 + C316 * C48951 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C48943) *
                C49136) *
               C49024 * C49295) *
              C262 +
          (((C316 * C48943 + C315 * C48951 + C314 * C26749) * C49136 +
            (C2736 * C48943 + C2735 * C48951 + C5261 * C26749) * C49143 +
            (C2734 * C48943 + C2733 * C48951 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C26749) *
                C36863) *
               C49024 * C49295 -
           ((C2558 * C26749 + C2557 * C48951 + C2556 * C48943) * C36863 +
            (C450 * C26749 + C451 * C48951 + C452 * C48943) * C49143 +
            (C176 * C26749 + C175 * C48951 + C174 * C48943) * C49136) *
               C49024 * C260) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C37157 + C37158 + C37159) * C49143 +
            (C37160 + C37161 + C37162) * C36863) *
               C398 -
           ((C2935 * C26749 + C2936 * C48951 + C3797 * C48943) * C36863 +
            (C37162 + C37161 + C37160) * C49143 +
            (C37159 + C37158 + C37157) * C49136) *
               C49297) *
              C49007 * C262 +
          (((C37163 + C37164 + C37165) * C49136 +
            (C37166 + C37167 + C37168) * C49143 +
            (C2936 * C48943 + C2935 * C48951 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C26749) *
                C36863) *
               C49297 -
           ((C37168 + C37167 + C37166) * C36863 +
            (C37165 + C37164 + C37163) * C49143 +
            (C176 * C26749 + C175 * C48951 + C174 * C48943) * C49136) *
               C398) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C37157 + C37158 + C37159) * C49143 +
            (C37160 + C37161 + C37162) * C36863) *
               C49024 * C534 -
           ((C2733 * C26749 + C2734 * C48951 + C3370 * C48943) * C36863 +
            (C2735 * C26749 + C2736 * C48951 + C3369 * C48943) * C49143 +
            (C315 * C26749 + C316 * C48951 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C48943) *
                C49136) *
               C49024 * C49295) *
              C536 +
          (((C316 * C48943 + C315 * C48951 + C314 * C26749) * C49136 +
            (C2736 * C48943 + C2735 * C48951 + C5261 * C26749) * C49143 +
            (C2734 * C48943 + C2733 * C48951 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C26749) *
                C36863) *
               C49024 * C49295 -
           ((C37168 + C37167 + C37166) * C36863 +
            (C37165 + C37164 + C37163) * C49143 +
            (C176 * C26749 + C175 * C48951 + C174 * C48943) * C49136) *
               C49024 * C534) *
              C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48943 +
            C174 * C48951 + C175 * C26749) *
               C49136 +
           (C37157 + C37158 + C37159) * C49143 +
           (C37160 + C37161 + C37162) * C36863) *
              C49024 * C600 -
          ((C2733 * C26749 + C2734 * C48951 + C3370 * C48943) * C36863 +
           (C2735 * C26749 + C2736 * C48951 + C3369 * C48943) * C49143 +
           (C315 * C26749 + C316 * C48951 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C48943) *
               C49136) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C48943 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C48951 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                C26749) *
               C49136 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C48943 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C48951 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C26749) *
               C49143 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C48943 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C48951 +
            (C113 * C2416 - C114 * C2405 - C113 * C2417 + C49035 * C2423) *
                C26749) *
               C36863) *
              C49024 * C602) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C37157 + C37158 + C37159) * C49143 +
            (C37160 + C37161 + C37162) * C36863) *
               C398 -
           ((C2935 * C26749 + C2936 * C48951 + C3797 * C48943) * C36863 +
            (C37162 + C37161 + C37160) * C49143 +
            (C37159 + C37158 + C37157) * C49136) *
               C49297) *
              C534 +
          (((C37571 + C37572 + C37573) * C49136 +
            (C37574 + C37575 + C37576) * C49143 +
            (C18341 * C48943 + C20485 * C48951 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C26749) *
                C36863) *
               C49297 -
           ((C37576 + C37575 + C37574) * C36863 +
            (C37573 + C37572 + C37571) * C49143 +
            (C315 * C26749 + C316 * C48951 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C48943) *
                C49136) *
               C398) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C37157 + C37158 + C37159) * C49143 +
            (C37160 + C37161 + C37162) * C36863) *
               C808 -
           ((C2935 * C26749 + C2936 * C48951 + C3797 * C48943) * C36863 +
            (C37162 + C37161 + C37160) * C49143 +
            (C37159 + C37158 + C37157) * C49136) *
               C49297) *
              C49007 * C536 +
          (((C37163 + C37164 + C37165) * C49136 +
            (C37166 + C37167 + C37168) * C49143 +
            (C2936 * C48943 + C2935 * C48951 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C26749) *
                C36863) *
               C49297 -
           ((C37168 + C37167 + C37166) * C36863 +
            (C37165 + C37164 + C37163) * C49143 +
            (C176 * C26749 + C175 * C48951 + C174 * C48943) * C49136) *
               C808) *
              C49007 * C49293)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C48943 +
             C174 * C48951 + C175 * C26749) *
                C49136 +
            (C37157 + C37158 + C37159) * C49143 +
            (C37160 + C37161 + C37162) * C36863) *
               C808 -
           ((C2935 * C26749 + C2936 * C48951 + C3797 * C48943) * C36863 +
            (C37162 + C37161 + C37160) * C49143 +
            (C37159 + C37158 + C37157) * C49136) *
               C49297) *
              C260 +
          (((C37571 + C37572 + C37573) * C49136 +
            (C37574 + C37575 + C37576) * C49143 +
            (C18341 * C48943 + C20485 * C48951 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C26749) *
                C36863) *
               C49297 -
           ((C37576 + C37575 + C37574) * C36863 +
            (C37573 + C37572 + C37571) * C49143 +
            (C315 * C26749 + C316 * C48951 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C48943) *
                C49136) *
               C808) *
              C49295) *
         C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C48943 +
            C174 * C48951 + C175 * C26749) *
               C49136 +
           (C37157 + C37158 + C37159) * C49143 + C37983 * C36863) *
              C954 -
          ((C37980 + C37981 + C37982) * C36863 +
           (C37162 + C37161 + C37160) * C49143 +
           (C37159 + C37158 + C37157) * C49136) *
              C955 +
          (C37983 * C49136 + (C37982 + C37981 + C37980) * C49143 +
           (C18093 * C48943 + C18094 * C48951 +
            (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                C26749) *
               C36863) *
              C956) *
         C49007 * C48973) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C2933 * C49338 + C452 * C49331 + C451 * C49318 + C450 * C49267) *
               C49140) *
              C49024 * C49007 * C110 -
          ((C449 * C49267 + C450 * C49318 + C451 * C49331 + C452 * C49338) *
               C49140 +
           (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C175 * C49338 + C176 * C49331 + C177 * C49318 + C178 * C49267) *
               C31428 +
           (C451 * C49338 + C450 * C49331 + C449 * C49318 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                C49267) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 +
            (C1572 + C1571 + C1570) * C48948) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C1567 + C1568 + C1569) * C48948 +
            (C1570 + C1571 + C1572) * C23786) *
               C49140 +
           ((C1159 + C1158 + C1157) * C48948 +
            (C1156 + C1155 + C1154) * C23786) *
               C31428) *
              C49024 * C49007 * C111 +
          ((C1164 * C23786 + (C1162 + C1161 + C1160) * C48948) * C31428 +
           ((C1569 + C1568 + C1567) * C23786 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C2933 * C49338 + C452 * C49331 + C451 * C49318 + C450 * C49267) *
                C49140) *
               C49024 * C260 -
           ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 +
             C3369 * C49338) *
                C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C49024 * C49295) *
              C262 +
          (((C316 * C49338 + C315 * C49331 + C314 * C49318 + C313 * C49267) *
                C31428 +
            (C2736 * C49338 + C2735 * C49331 + C5261 * C49318 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C449 * C49267 + C450 * C49318 + C451 * C49331 + C452 * C49338) *
                C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 +
             (C1572 + C1571 + C1570) * C48948) *
                C49140) *
               C49024 * C260 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C49024 * C49295) *
              C262 +
          ((((C1368 + C1367 + C1366) * C23786 +
             (C1365 + C1364 + C1363) * C48948) *
                C31428 +
            ((C32783 + C32782 + C32781) * C23786 +
             (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
              C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
              C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C1567 + C1568 + C1569) * C48948 +
             (C1570 + C1571 + C1572) * C23786) *
                C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C49007 * C262 +
          (((C31695 + C31696 + C31697 + C31698) * C31428 +
            (C2556 * C49338 + C2557 * C49331 + C2558 * C49318 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C398 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C49007 * C262 +
          (((C32980 * C23786 + (C1569 + C1568 + C1567) * C48948) * C31428 +
            ((C16959 + C16960 + C16961) * C23786 +
             (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
              C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
              C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C49024 * C534 -
           ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 +
             C3369 * C49338) *
                C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C49024 * C49295) *
              C536 +
          (((C316 * C49338 + C315 * C49331 + C314 * C49318 + C313 * C49267) *
                C31428 +
            (C2736 * C49338 + C2735 * C49331 + C5261 * C49318 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C49024 * C534 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C49024 * C49295) *
              C536 +
          ((((C1368 + C1367 + C1366) * C23786 +
             (C1365 + C1364 + C1363) * C48948) *
                C31428 +
            ((C32783 + C32782 + C32781) * C23786 +
             (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
              C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
              C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C31691 + C31692 + C31693 + C31694) * C49140) *
              C49024 * C600 -
          ((C5261 * C49267 + C2735 * C49318 + C2736 * C49331 + C3369 * C49338) *
               C49140 +
           (C314 * C49267 + C315 * C49318 + C316 * C49331 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                C49338) *
               C31428) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C49338 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C49331 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C49318 +
            (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) *
                C49267) *
               C31428 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C49338 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C49331 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49318 +
            (C113 * C1524 - C114 * C1517 - C113 * C1525 + C49035 * C1529) *
                C49267) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
              C49024 * C600 -
          (((C32781 + C32782 + C32783) * C48948 +
            (C17402 + C17401 + C17400) * C23786) *
               C49140 +
           ((C1366 + C1367 + C1368) * C48948 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C23786) *
               C31428) *
              C49024 * C601 +
          (((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
             C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
             C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
                C23786 +
            (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
             C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
             C1097 * C1833 - C1098 * C1829 - C1097 * C1834 + C49300 * C1838) *
                C48948) *
               C31428 +
           ((C1093 * C1522 - C1094 * C1516 - C1093 * C1523 + C49332 * C1528 +
             C1095 * C1989 - C1096 * C1986 - C1095 * C1990 + C49320 * C1995 +
             C1097 * C9446 - C1098 * C9444 - C1097 * C9447 + C49300 * C9450) *
                C23786 +
            (C1093 * C1520 - C1094 * C1515 - C1093 * C1521 + C49332 * C1527 +
             C1095 * C1991 - C1096 * C1987 - C1095 * C1992 + C49320 * C1996 +
             C1097 * C9448 - C1098 * C9445 - C1097 * C9449 + C49300 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C534 +
          (((C32057 + C32058 + C32059 + C32060) * C31428 +
            (C3370 * C49338 + C2734 * C49331 + C2733 * C49318 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C32060 + C32059 + C32058 + C32057) * C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C398 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C534 +
          ((((C17400 + C17401 + C17402) * C23786 +
             (C32783 + C32782 + C32781) * C48948) *
                C31428 +
            ((C17403 + C17404 + C17405) * C23786 +
             (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
              C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
              C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C49007 * C536 +
          (((C31695 + C31696 + C31697 + C31698) * C31428 +
            (C2556 * C49338 + C2557 * C49331 + C2558 * C49318 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C31698 + C31697 + C31696 + C31695) * C49140 +
            (C177 * C49267 + C176 * C49318 + C175 * C49331 + C174 * C49338) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C808 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C49007 * C536 +
          (((C32980 * C23786 + (C1569 + C1568 + C1567) * C48948) * C31428 +
            ((C16959 + C16960 + C16961) * C23786 +
             (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
              C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
              C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C1567 + C1568 + C1569) * C48948 + C32981 * C23786) * C49140 +
            ((C1159 + C1158 + C1157) * C48948 +
             (C1156 + C1155 + C1154) * C23786) *
                C31428) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) *
                 C49338 +
             C174 * C49331 + C175 * C49318 + C176 * C49267) *
                C31428 +
            (C31691 + C31692 + C31693 + C31694) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C49318 + C2556 * C49331 +
             C2934 * C49338) *
                C49140 +
            (C31694 + C31693 + C31692 + C31691) * C31428) *
               C49297) *
              C260 +
          (((C32057 + C32058 + C32059 + C32060) * C31428 +
            (C3370 * C49338 + C2734 * C49331 + C2733 * C49318 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C32060 + C32059 + C32058 + C32057) * C49140 +
            (C314 * C49267 + C315 * C49318 + C316 * C49331 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C49338) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
              C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
              C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                 C23786 +
             (C1154 + C1155 + C1156) * C48948) *
                C31428 +
            ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
               C808 -
           (((C16961 + C16960 + C16959) * C48948 +
             (C16958 + C16957 + C16956) * C23786) *
                C49140 +
            (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
               C49297) *
              C260 +
          ((((C17400 + C17401 + C17402) * C23786 +
             (C32783 + C32782 + C32781) * C48948) *
                C31428 +
            ((C17403 + C17404 + C17405) * C23786 +
             (C1093 * C2410 - C1094 * C2402 - C1093 * C2411 + C49332 * C2420 +
              C1095 * C2412 - C1096 * C2403 - C1095 * C2413 + C49320 * C2421 +
              C1097 * C10177 - C1098 * C10176 - C1097 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C32781 + C32782 + C32783) * C48948 +
             (C17402 + C17401 + C17400) * C23786) *
                C49140 +
            ((C1366 + C1367 + C1368) * C48948 +
             (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
              C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
              C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                 C23786) *
                C31428) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C49338 +
            C174 * C49331 + C175 * C49318 + C176 * C49267) *
               C31428 +
           (C31691 + C31692 + C31693 + C31694) * C49140) *
              C954 -
          ((C32419 + C32420 + C32421 + C32422) * C49140 +
           (C31694 + C31693 + C31692 + C31691) * C31428) *
              C955 +
          ((C32422 + C32421 + C32420 + C32419) * C31428 +
           (C3797 * C49338 + C2936 * C49331 + C2935 * C49318 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C49267) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C23786 +
            (C1154 + C1155 + C1156) * C48948) *
               C31428 +
           ((C16953 + C16954 + C16955) * C23786 + C32980 * C48948) * C49140) *
              C954 -
          (((C16961 + C16960 + C16959) * C48948 +
            (C16958 + C16957 + C16956) * C23786) *
               C49140 +
           (C32981 * C48948 + (C16955 + C16954 + C16953) * C23786) * C31428) *
              C955 +
          ((C17821 * C23786 + (C16959 + C16960 + C16961) * C48948) * C31428 +
           ((C17831 + C17830 + C17829) * C23786 +
            (C1093 * C2888 - C1094 * C2883 - C1093 * C2889 + C49332 * C2895 +
             C1095 * C3345 - C1096 * C3341 - C1095 * C3346 + C49320 * C3350 +
             C1097 * C10330 - C1098 * C10327 - C1097 * C10331 +
             C49300 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C49024 * C49007 * C110 -
          ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
           (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
              C49053 * C49024 * C49007 * C111 +
          (C3963 * C3898 + C3964 * C3899 + (C3962 + C3961) * C3900 +
           (C3902 * C132 - C3903 * C120 - C3902 * C133 + C49266 * C141 +
            C3904 * C280 - C3905 * C269 - C3904 * C281 + C49098 * C287) *
               C49267) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C49024 * C49007 * C110 -
          ((C11444 + C11445 + C11446 + C11447) * C48948 +
           (C11443 + C11442 + C11441 + C11440) * C49245) *
              C49053 * C49024 * C49007 * C111 +
          ((C11447 + C11446 + C11445 + C11444) * C49245 +
           (C11383 * C128 - C11384 * C118 - C11383 * C129 + C11377 * C139 +
            C11385 * C272 - C11386 * C265 - C11385 * C273 + C11378 * C283 +
            C11387 * C615 - C11388 * C607 - C11387 * C616 + C11379 * C622 +
            C11389 * C1320 - C11390 * C1313 - C11389 * C1321 + C49275 * C1325) *
               C48948) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C49024 * C260 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C4136 + C4135) * C3898 + (C4134 + C4133) * C3899 +
            (C4132 + C4131) * C3900 +
            (C3902 * C270 - C3903 * C264 - C3902 * C271 + C49266 * C282 +
             C3904 * C617 - C3905 * C608 - C3904 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C49024 * C260 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C11605 + C11604 + C11603 + C11602) * C49245 +
            (C11383 * C274 - C11384 * C266 - C11383 * C275 + C11377 * C284 +
             C11385 * C613 - C11386 * C606 - C11385 * C614 + C11378 * C621 +
             C11387 * C1314 - C11388 * C1310 - C11387 * C1315 + C11379 * C1322 +
             C11389 * C1835 - C11390 * C1830 - C11389 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C398 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C4308 + C4307) * C3898 + (C4306 + C4305) * C3899 +
            (C4304 + C4303) * C3900 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C398 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C11763 + C11762 + C11761 + C11760) * C49245 +
            (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
             C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
             C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
             C11389 * C1993 - C11390 * C1988 - C11389 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C49024 * C534 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C4136 + C4135) * C3898 + (C4134 + C4133) * C3899 +
            (C4132 + C4131) * C3900 +
            (C3902 * C270 - C3903 * C264 - C3902 * C271 + C49266 * C282 +
             C3904 * C617 - C3905 * C608 - C3904 * C618 + C49098 * C623) *
                C49267) *
               C49053 * C49024 * C49295 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C49024 * C534 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C11605 + C11604 + C11603 + C11602) * C49245 +
            (C11383 * C274 - C11384 * C266 - C11383 * C275 + C11377 * C284 +
             C11385 * C613 - C11386 * C606 - C11385 * C614 + C11378 * C621 +
             C11387 * C1314 - C11388 * C1310 - C11387 * C1315 + C11379 * C1322 +
             C11389 * C1835 - C11390 * C1830 - C11389 * C1836 +
             C49275 * C1839) *
                C48948) *
               C49053 * C49024 * C49295 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C49024 * C600 -
          ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
           (C4135 + C4136) * C3899 +
           (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
            C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
               C3898) *
              C49053 * C49024 * C601 +
          ((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
            C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
               C3898 +
           (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
            C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
               C3899 +
           (C3902 * C613 - C3903 * C606 - C3902 * C614 + C49266 * C621 +
            C3904 * C1314 - C3905 * C1310 - C3904 * C1315 + C49098 * C1322) *
               C3900 +
           (C3902 * C615 - C3903 * C607 - C3902 * C616 + C49266 * C622 +
            C3904 * C1320 - C3905 * C1313 - C3904 * C1321 + C49098 * C1325) *
               C49267) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C49024 * C600 -
          ((C11602 + C11603 + C11604 + C11605) * C48948 +
           (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
            C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
            C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
            C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
               C49245) *
              C49053 * C49024 * C601 +
          ((C11383 * C609 - C11384 * C604 - C11383 * C610 + C11377 * C619 +
            C11385 * C1318 - C11386 * C1312 - C11385 * C1319 + C11378 * C1324 +
            C11387 * C1831 - C11388 * C1828 - C11387 * C1832 + C11379 * C1837 +
            C11389 * C9356 - C11390 * C9354 - C11389 * C9357 + C49275 * C9360) *
               C49245 +
           (C11383 * C611 - C11384 * C605 - C11383 * C612 + C11377 * C620 +
            C11385 * C1316 - C11386 * C1311 - C11385 * C1317 + C11378 * C1323 +
            C11387 * C1833 - C11388 * C1829 - C11387 * C1834 + C11379 * C1838 +
            C11389 * C9358 - C11390 * C9355 - C11389 * C9359 + C49275 * C9361) *
               C48948) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C398 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C534 +
          (((C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721 +
             C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528) *
                C3898 +
            (C3902 * C713 - C3903 * C707 - C3902 * C714 + C49266 * C722 +
             C3904 * C1520 - C3905 * C1515 - C3904 * C1521 + C49098 * C1527) *
                C3899 +
            (C3902 * C715 - C3903 * C708 - C3902 * C716 + C49266 * C723 +
             C3904 * C1518 - C3905 * C1514 - C3904 * C1519 + C49098 * C1526) *
                C3900 +
            (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
             C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C398 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C534 +
          (((C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11389 * C9446 - C11390 * C9444 - C11389 * C9447 +
             C49275 * C9450) *
                C49245 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C808 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C4308 + C4307) * C3898 + (C4306 + C4305) * C3899 +
            (C4304 + C4303) * C3900 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49267) *
               C49053 * C49297 -
           ((C3961 + C3962) * C49267 + (C3960 + C3959) * C3900 +
            (C3958 + C3957) * C3899 + (C3956 + C3955) * C3898) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C808 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C11763 + C11762 + C11761 + C11760) * C49245 +
            (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
             C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
             C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
             C11389 * C1993 - C11390 * C1988 - C11389 * C1994 +
             C49275 * C1997) *
                C48948) *
               C49053 * C49297 -
           ((C11444 + C11445 + C11446 + C11447) * C48948 +
            (C11443 + C11442 + C11441 + C11440) * C49245) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C3898 +
            (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
               C49053 * C808 -
           ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
            (C4307 + C4308) * C3899 +
            (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
             C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
                C3898) *
               C49053 * C49297) *
              C260 +
          (((C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721 +
             C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528) *
                C3898 +
            (C3902 * C713 - C3903 * C707 - C3902 * C714 + C49266 * C722 +
             C3904 * C1520 - C3905 * C1515 - C3904 * C1521 + C49098 * C1527) *
                C3899 +
            (C3902 * C715 - C3903 * C708 - C3902 * C716 + C49266 * C723 +
             C3904 * C1518 - C3905 * C1514 - C3904 * C1519 + C49098 * C1526) *
                C3900 +
            (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
             C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                C49267) *
               C49053 * C49297 -
           ((C4131 + C4132) * C49267 + (C4133 + C4134) * C3900 +
            (C4135 + C4136) * C3899 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C3898) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C49245 +
            (C11440 + C11441 + C11442 + C11443) * C48948) *
               C49053 * C808 -
           ((C11760 + C11761 + C11762 + C11763) * C48948 +
            (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
                C49245) *
               C49053 * C49297) *
              C260 +
          (((C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11389 * C9446 - C11390 * C9444 - C11389 * C9447 +
             C49275 * C9450) *
                C49245 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48948) *
               C49053 * C49297 -
           ((C11602 + C11603 + C11604 + C11605) * C48948 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C49245) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
            C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
               C3898 +
           (C3955 + C3956) * C3899 + C3963 * C3900 + C3964 * C49267) *
              C49053 * C954 -
          ((C4303 + C4304) * C49267 + (C4305 + C4306) * C3900 +
           (C4307 + C4308) * C3899 +
           (C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721 +
            C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422) *
               C3898) *
              C49053 * C955 +
          ((C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972 +
            C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418) *
               C3898 +
           (C3902 * C964 - C3903 * C958 - C3902 * C965 + C49266 * C973 +
            C3904 * C2410 - C3905 * C2402 - C3904 * C2411 + C49098 * C2420) *
               C3899 +
           (C3902 * C966 - C3903 * C959 - C3902 * C967 + C49266 * C974 +
            C3904 * C2414 - C3905 * C2404 - C3904 * C2415 + C49098 * C2422) *
               C3900 +
           (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
            C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
               C49267) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C49245 +
           (C11440 + C11441 + C11442 + C11443) * C48948) *
              C49053 * C954 -
          ((C11760 + C11761 + C11762 + C11763) * C48948 +
           (C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995 +
            C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
            C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
            C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422) *
               C49245) *
              C49053 * C955 +
          ((C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972 +
            C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
            C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
            C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918) *
               C49245 +
           (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
            C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
            C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
            C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
            C49275 * C10179) *
               C48948) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422 +
             C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721) *
                C1090 +
            (C4308 + C4307) * C1091 + C6270 * C49289) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C4303 + C4304) * C49289 + (C4305 + C4306) * C1091 +
            (C4307 + C4308) * C1090) *
               C49140 +
           ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
            (C3956 + C3955) * C1090) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C3963 * C1090 + C3964 * C1091 + (C3962 + C3961) * C49289) * C49268 +
           (C6270 * C1090 + (C4304 + C4303) * C1091 +
            (C3902 * C406 - C3903 * C400 - C3902 * C407 + C49266 * C418 +
             C3904 * C719 - C3905 * C710 - C3904 * C720 + C49098 * C725) *
                C49289) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422 +
            C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
            C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
            C11389 * C1989 - C11390 * C1986 - C11389 * C1990 + C49275 * C1995) *
               C48938 * C49140) *
              C49024 * C49007 * C110 -
          ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
           (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
              C49024 * C49007 * C111 +
          ((C11447 + C11446 + C11445 + C11444) * C48938 * C49268 +
           (C11383 * C410 - C11384 * C402 - C11383 * C411 + C11377 * C420 +
            C11385 * C715 - C11386 * C708 - C11385 * C716 + C11378 * C723 +
            C11387 * C1518 - C11388 * C1514 - C11387 * C1519 + C11379 * C1526 +
            C11389 * C1993 - C11390 * C1988 - C11389 * C1994 + C49275 * C1997) *
               C48938 * C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C3902 * C414 - C3903 * C404 - C3902 * C415 + C49266 * C422 +
              C3904 * C711 - C3905 * C706 - C3904 * C712 + C49098 * C721) *
                 C1090 +
             (C4308 + C4307) * C1091 + C6270 * C49289) *
                C49140) *
               C49024 * C260 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
              C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                 C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C4136 + C4135) * C1090 + (C4134 + C4133) * C1091 +
             (C4132 + C4131) * C49289) *
                C49268 +
            ((C6492 + C6491) * C1090 + (C6490 + C6489) * C1091 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C49289 + (C4305 + C4306) * C1091 +
             (C4307 + C4308) * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C11383 * C414 - C11384 * C404 - C11383 * C415 + C11377 * C422 +
             C11385 * C711 - C11386 * C706 - C11385 * C712 + C11378 * C721 +
             C11387 * C1522 - C11388 * C1516 - C11387 * C1523 + C11379 * C1528 +
             C11389 * C1989 - C11390 * C1986 - C11389 * C1990 +
             C49275 * C1995) *
                C48938 * C49140) *
               C49024 * C260 -
           ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
                C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C49024 * C49295) *
              C262 +
          (((C11605 + C11604 + C11603 + C11602) * C48938 * C49268 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C49007 * C262 +
          (((C6695 * C1090 + C6270 * C1091 + (C4304 + C4303) * C49289) *
                C49268 +
            ((C6731 + C6730) * C1090 + (C6729 + C6728) * C1091 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C398 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C49007 * C262 +
          (((C11763 + C11762 + C11761 + C11760) * C48938 * C49268 +
            (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
             C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
             C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
             C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C49024 * C534 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
              C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                 C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C4136 + C4135) * C1090 + (C4134 + C4133) * C1091 +
             (C4132 + C4131) * C49289) *
                C49268 +
            ((C6492 + C6491) * C1090 + (C6490 + C6489) * C1091 +
             (C3902 * C717 - C3903 * C709 - C3902 * C718 + C49266 * C724 +
              C3904 * C1524 - C3905 * C1517 - C3904 * C1525 + C49098 * C1529) *
                 C49289) *
                C49140) *
               C49024 * C49295 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C49024 * C534 -
           ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
             C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
             C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
             C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
                C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C49024 * C49295) *
              C536 +
          (((C11605 + C11604 + C11603 + C11602) * C48938 * C49268 +
            (C11383 * C713 - C11384 * C707 - C11383 * C714 + C11377 * C722 +
             C11385 * C1520 - C11386 * C1515 - C11385 * C1521 + C11378 * C1527 +
             C11387 * C1991 - C11388 * C1987 - C11387 * C1992 + C11379 * C1996 +
             C11389 * C9448 - C11390 * C9445 - C11389 * C9449 +
             C49275 * C9451) *
                C48938 * C49140) *
               C49024 * C49295 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
               C49140) *
              C49024 * C600 -
          (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
            (C3904 * C1522 - C3905 * C1516 - C3904 * C1523 + C49098 * C1528 +
             C3902 * C711 - C3903 * C706 - C3902 * C712 + C49266 * C721) *
                C1090) *
               C49140 +
           ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
            (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
             C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                C1090) *
               C49268) *
              C49024 * C601 +
          (((C3902 * C609 - C3903 * C604 - C3902 * C610 + C49266 * C619 +
             C3904 * C1318 - C3905 * C1312 - C3904 * C1319 + C49098 * C1324) *
                C1090 +
            (C3902 * C611 - C3903 * C605 - C3902 * C612 + C49266 * C620 +
             C3904 * C1316 - C3905 * C1311 - C3904 * C1317 + C49098 * C1323) *
                C1091 +
            (C3902 * C613 - C3903 * C606 - C3902 * C614 + C49266 * C621 +
             C3904 * C1314 - C3905 * C1310 - C3904 * C1315 + C49098 * C1322) *
                C49289) *
               C49268 +
           ((C3902 * C1522 - C3903 * C1516 - C3902 * C1523 + C49266 * C1528 +
             C3904 * C1989 - C3905 * C1986 - C3904 * C1990 + C49098 * C1995) *
                C1090 +
            (C3902 * C1520 - C3903 * C1515 - C3902 * C1521 + C49266 * C1527 +
             C3904 * C1991 - C3905 * C1987 - C3904 * C1992 + C49098 * C1996) *
                C1091 +
            (C3902 * C1518 - C3903 * C1514 - C3902 * C1519 + C49266 * C1526 +
             C3904 * C1993 - C3905 * C1988 - C3904 * C1994 + C49098 * C1997) *
                C49289) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
              C49024 * C600 -
          ((C11389 * C9446 - C11390 * C9444 - C11389 * C9447 + C49275 * C9450 +
            C11387 * C1989 - C11388 * C1986 - C11387 * C1990 + C11379 * C1995 +
            C11385 * C1522 - C11386 * C1516 - C11385 * C1523 + C11378 * C1528 +
            C11383 * C711 - C11384 * C706 - C11383 * C712 + C11377 * C721) *
               C48938 * C49140 +
           (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
            C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
            C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
            C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
               C48938 * C49268) *
              C49024 * C601 +
          ((C11383 * C609 - C11384 * C604 - C11383 * C610 + C11377 * C619 +
            C11385 * C1318 - C11386 * C1312 - C11385 * C1319 + C11378 * C1324 +
            C11387 * C1831 - C11388 * C1828 - C11387 * C1832 + C11379 * C1837 +
            C11389 * C9356 - C11390 * C9354 - C11389 * C9357 + C49275 * C9360) *
               C48938 * C49268 +
           (C11383 * C1522 - C11384 * C1516 - C11383 * C1523 + C11377 * C1528 +
            C11385 * C1989 - C11386 * C1986 - C11385 * C1990 + C11378 * C1995 +
            C11387 * C9446 - C11388 * C9444 - C11387 * C9447 + C11379 * C9450 +
            C11389 * C9683 - C11390 * C9682 - C11389 * C9684 + C49275 * C9685) *
               C48938 * C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C398 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C534 +
          ((((C7278 + C7279) * C1090 + (C6492 + C6491) * C1091 +
             (C6490 + C6489) * C49289) *
                C49268 +
            ((C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418 +
              C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419) *
                 C1090 +
             (C3902 * C2410 - C3903 * C2402 - C3902 * C2411 + C49266 * C2420 +
              C3904 * C2412 - C3905 * C2403 - C3904 * C2413 + C49098 * C2421) *
                 C1091 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C7279 + C7278) * C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C398 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C534 +
          (((C14875 + C14876 + C14877 + C14878) * C48938 * C49268 +
            (C11383 * C2406 - C11384 * C2400 - C11383 * C2407 + C11377 * C2418 +
             C11385 * C2408 - C11386 * C2401 - C11385 * C2409 + C11378 * C2419 +
             C11387 * C9914 - C11388 * C9912 - C11387 * C9915 + C11379 * C9918 +
             C11389 * C9916 - C11390 * C9913 - C11389 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C14878 + C14877 + C14876 + C14875) * C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C49007 * C536 +
          (((C6695 * C1090 + C6270 * C1091 + (C4304 + C4303) * C49289) *
                C49268 +
            ((C6731 + C6730) * C1090 + (C6729 + C6728) * C1091 +
             (C3902 * C968 - C3903 * C960 - C3902 * C969 + C49266 * C975 +
              C3904 * C2705 - C3905 * C2704 - C3904 * C2706 + C49098 * C2707) *
                 C49289) *
                C49140) *
               C49297 -
           (((C4303 + C4304) * C49289 + C6712 * C1091 + C6713 * C1090) *
                C49140 +
            ((C3960 + C3959) * C49289 + (C3958 + C3957) * C1091 +
             (C3956 + C3955) * C1090) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C808 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C49007 * C536 +
          (((C11763 + C11762 + C11761 + C11760) * C48938 * C49268 +
            (C11383 * C964 - C11384 * C958 - C11383 * C965 + C11377 * C973 +
             C11385 * C2410 - C11386 * C2402 - C11385 * C2411 + C11378 * C2420 +
             C11387 * C2412 - C11388 * C2403 - C11387 * C2413 + C11379 * C2421 +
             C11389 * C10177 - C11390 * C10176 - C11389 * C10178 +
             C49275 * C10179) *
                C48938 * C49140) *
               C49297 -
           ((C11760 + C11761 + C11762 + C11763) * C48938 * C49140 +
            (C11443 + C11442 + C11441 + C11440) * C48938 * C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
              C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                 C1090 +
             (C3955 + C3956) * C1091 + C3963 * C49289) *
                C49268 +
            ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
                C49140) *
               C808 -
           (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
             (C3904 * C2406 - C3905 * C2400 - C3904 * C2407 + C49098 * C2418 +
              C3902 * C962 - C3903 * C957 - C3902 * C963 + C49266 * C972) *
                 C1090) *
                C49140 +
            (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
                C49268) *
               C49297) *
              C260 +
          ((((C7278 + C7279) * C1090 + (C6492 + C6491) * C1091 +
             (C6490 + C6489) * C49289) *
                C49268 +
            ((C3902 * C2406 - C3903 * C2400 - C3902 * C2407 + C49266 * C2418 +
              C3904 * C2408 - C3905 * C2401 - C3904 * C2409 + C49098 * C2419) *
                 C1090 +
             (C3902 * C2410 - C3903 * C2402 - C3902 * C2411 + C49266 * C2420 +
              C3904 * C2412 - C3905 * C2403 - C3904 * C2413 + C49098 * C2421) *
                 C1091 +
             (C3902 * C2414 - C3903 * C2404 - C3902 * C2415 + C49266 * C2422 +
              C3904 * C2416 - C3905 * C2405 - C3904 * C2417 + C49098 * C2423) *
                 C49289) *
                C49140) *
               C49297 -
           (((C6489 + C6490) * C49289 + (C6491 + C6492) * C1091 +
             (C7279 + C7278) * C1090) *
                C49140 +
            ((C4133 + C4134) * C49289 + (C4135 + C4136) * C1091 +
             (C3904 * C609 - C3905 * C604 - C3904 * C610 + C49098 * C619 +
              C3902 * C278 - C3903 * C268 - C3902 * C279 + C49266 * C286) *
                 C1090) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
             C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
             C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
             C11389 * C1318 - C11390 * C1312 - C11389 * C1319 +
             C49275 * C1324) *
                C48938 * C49268 +
            (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
               C808 -
           ((C11389 * C9914 - C11390 * C9912 - C11389 * C9915 + C49275 * C9918 +
             C11387 * C2408 - C11388 * C2401 - C11387 * C2409 + C11379 * C2419 +
             C11385 * C2406 - C11386 * C2400 - C11385 * C2407 + C11378 * C2418 +
             C11383 * C962 - C11384 * C957 - C11383 * C963 + C11377 * C972) *
                C48938 * C49140 +
            (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
               C49297) *
              C260 +
          (((C14875 + C14876 + C14877 + C14878) * C48938 * C49268 +
            (C11383 * C2406 - C11384 * C2400 - C11383 * C2407 + C11377 * C2418 +
             C11385 * C2408 - C11386 * C2401 - C11385 * C2409 + C11378 * C2419 +
             C11387 * C9914 - C11388 * C9912 - C11387 * C9915 + C11379 * C9918 +
             C11389 * C9916 - C11390 * C9913 - C11389 * C9917 +
             C49275 * C9919) *
                C48938 * C49140) *
               C49297 -
           ((C14878 + C14877 + C14876 + C14875) * C48938 * C49140 +
            (C11389 * C1831 - C11390 * C1828 - C11389 * C1832 + C49275 * C1837 +
             C11387 * C1318 - C11388 * C1312 - C11387 * C1319 + C11379 * C1324 +
             C11385 * C609 - C11386 * C604 - C11385 * C610 + C11378 * C619 +
             C11383 * C278 - C11384 * C268 - C11383 * C279 + C11377 * C286) *
                C48938 * C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C3902 * C122 - C3903 * C115 - C3902 * C123 + C49266 * C136 +
             C3904 * C278 - C3905 * C268 - C3904 * C279 + C49098 * C286) *
                C1090 +
            (C3955 + C3956) * C1091 + C3963 * C49289) *
               C49268 +
           ((C6726 + C6727) * C1090 + C6695 * C1091 + C6270 * C49289) *
               C49140) *
              C954 -
          (((C6728 + C6729) * C49289 + (C6730 + C6731) * C1091 +
            (C7826 + C7827) * C1090) *
               C49140 +
           (C6712 * C49289 + C6713 * C1091 + (C6727 + C6726) * C1090) *
               C49268) *
              C955 +
          (((C7827 + C7826) * C1090 + (C6731 + C6730) * C1091 +
            (C6729 + C6728) * C49289) *
               C49268 +
           ((C3902 * C2890 - C3903 * C2884 - C3902 * C2891 + C49266 * C2896 +
             C3904 * C3343 - C3905 * C3340 - C3904 * C3344 + C49098 * C3349) *
                C1090 +
            (C3902 * C2888 - C3903 * C2883 - C3902 * C2889 + C49266 * C2895 +
             C3904 * C3345 - C3905 * C3341 - C3904 * C3346 + C49098 * C3350) *
                C1091 +
            (C3902 * C2886 - C3903 * C2882 - C3902 * C2887 + C49266 * C2894 +
             C3904 * C3347 - C3905 * C3342 - C3904 * C3348 + C49098 * C3351) *
                C49289) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C11383 * C122 - C11384 * C115 - C11383 * C123 + C11377 * C136 +
            C11385 * C278 - C11386 * C268 - C11385 * C279 + C11378 * C286 +
            C11387 * C609 - C11388 * C604 - C11387 * C610 + C11379 * C619 +
            C11389 * C1318 - C11390 * C1312 - C11389 * C1319 + C49275 * C1324) *
               C48938 * C49268 +
           (C14489 + C14490 + C14491 + C14492) * C48938 * C49140) *
              C954 -
          ((C15261 + C15262 + C15263 + C15264) * C48938 * C49140 +
           (C14492 + C14491 + C14490 + C14489) * C48938 * C49268) *
              C955 +
          ((C15264 + C15263 + C15262 + C15261) * C48938 * C49268 +
           (C11383 * C2890 - C11384 * C2884 - C11383 * C2891 + C11377 * C2896 +
            C11385 * C3343 - C11386 * C3340 - C11385 * C3344 + C11378 * C3349 +
            C11387 * C10328 - C11388 * C10326 - C11387 * C10329 +
            C11379 * C10332 + C11389 * C10800 - C11390 * C10799 -
            C11389 * C10801 + C49275 * C10802) *
               C48938 * C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
           (C1156 + C1155 + C1154) * C1090) *
              C49053 * C49024 * C49007 * C111 +
          (C1164 * C1090 + (C1162 + C1161 + C1160) * C1091 +
           (C1093 * C130 - C1094 * C119 - C1093 * C131 + C49332 * C140 +
            C1095 * C270 - C1096 * C264 - C1095 * C271 + C49320 * C282 +
            C1097 * C617 - C1098 * C608 - C1097 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C49007 * C110 -
          (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
           C174 * C102) *
              C49053 * C49024 * C49007 * C111 +
          (C175 * C102 + C176 * C103 + C177 * C104 + C178 * C105 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49035 * C142) * C106) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           ((C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C1090 +
            C452 * C1091 + C451 * C49289) *
               C49322 +
           ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C1090 +
            C2556 * C1091 + C2557 * C49289) *
               C49303) *
              C49024 * C49007 * C110 -
          ((C2558 * C49289 + C2557 * C1091 + C2556 * C1090) * C49303 +
           (C450 * C49289 + C451 * C1091 + C452 * C1090) * C49322 +
           (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
              C49024 * C49007 * C111 +
          ((C175 * C1090 + C176 * C1091 + C177 * C49289) * C49333 +
           (C451 * C1090 + C450 * C1091 + C449 * C49289) * C49322 +
           (C2557 * C1090 + C2558 * C1091 +
            (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                C49289) *
               C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C8010 + C8011 + C8012) * C49289 + (C8009 + C8008 + C8007) * C49316 +
           (C8006 + C8005 + C8004) * C49329) *
              C49053 * C49024 * C49007 * C111 +
          (C8014 * C49329 + (C8012 + C8011 + C8010) * C49316 +
           (C7943 * C130 - C7944 * C119 - C7943 * C131 + C7937 * C140 +
            C7945 * C270 - C7946 * C264 - C7945 * C271 + C7938 * C282 +
            C7947 * C617 - C7948 * C608 - C7947 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C49007 * C110 -
          (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
           C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
           C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
           C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
           C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
              C48938 * C49053 * C49024 * C49007 * C111 +
          (C9262 * C126 - C9263 * C117 - C9262 * C127 + C9256 * C138 +
           C9264 * C274 - C9265 * C266 - C9264 * C275 + C9257 * C284 +
           C9266 * C613 - C9267 * C606 - C9266 * C614 + C9258 * C621 +
           C9268 * C1314 - C9269 * C1310 - C9268 * C1315 + C9259 * C1322 +
           C9270 * C1835 - C9271 * C1830 - C9270 * C1836 + C9260 * C1839) *
              C48938 * C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528) *
               C48938 * C49322 +
           (C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C48938 * C49303) *
              C49024 * C49007 * C110 -
          ((C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973) *
               C48938 * C49303 +
           (C8388 + C8389 + C8390) * C48938 * C49322 +
           (C8006 + C8005 + C8004) * C48938 * C49333) *
              C49024 * C49007 * C111 +
          (C8014 * C48938 * C49333 + (C8387 + C8386 + C8385) * C48938 * C49322 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C48938 * C49303) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C260 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C260 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C262 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            ((C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C1090 +
             C452 * C1091 + C451 * C49289) *
                C49322 +
            ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C1090 +
             C2556 * C1091 + C2557 * C49289) *
                C49303) *
               C49024 * C260 -
           ((C2733 * C49289 + C2734 * C1091 +
             (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                 C1090) *
                C49303 +
            (C2735 * C49289 + C2736 * C1091 +
             (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                 C1090) *
                C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C49024 * C49295) *
              C262 +
          (((C316 * C1090 + C315 * C1091 + C314 * C49289) * C49333 +
            (C2736 * C1090 + C2735 * C1091 +
             (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                 C49289) *
                C49322 +
            (C2734 * C1090 + C2733 * C1091 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2558 * C49289 + C2557 * C1091 + C2556 * C1090) * C49303 +
            (C450 * C49289 + C451 * C1091 + C452 * C1090) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C260 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C260 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C262 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528) *
                C48938 * C49322 +
            (C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
             C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
             C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
                C48938 * C49303) *
               C49024 * C260 -
           ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
             C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
             C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
                C48938 * C49303 +
            (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
                C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C48938 * C49333 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C48938 * C49322 +
            (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
             C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
             C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421 +
             C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
             C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973) *
                C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C262 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C49007 * C262 +
          (((C2919 + C2920 + C2921) * C49333 +
            (C2922 + C2923 + C2924) * C49322 +
            (C2936 * C1090 + C2935 * C1091 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C262 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C398 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C48938 * C49333 +
            (C10395 + C10396 + C10397) * C48938 * C49322 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C534 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C534 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C536 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C49024 * C534 -
           ((C2733 * C49289 + C2734 * C1091 +
             (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                 C1090) *
                C49303 +
            (C2735 * C49289 + C2736 * C1091 +
             (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) *
                 C1090) *
                C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C49024 * C49295) *
              C536 +
          (((C316 * C1090 + C315 * C1091 + C314 * C49289) * C49333 +
            (C2736 * C1090 + C2735 * C1091 +
             (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) *
                 C49289) *
                C49322 +
            (C2734 * C1090 + C2733 * C1091 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49289) *
                C49303) *
               C49024 * C49295 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C534 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C534 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C536 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C49024 * C534 -
           ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
             C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
             C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
                C48938 * C49303 +
            (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
                C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C48938 * C49333 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C48938 * C49322 +
            (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
             C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
             C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
             C49300 * C10179) *
                C48938 * C49303) *
               C49024 * C49295 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C600 -
          ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
           (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
            C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
            C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
               C1090) *
              C49053 * C49024 * C601 +
          ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
            C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
            C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
               C1090 +
           (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
            C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
            C1097 * C1833 - C1098 * C1829 - C1097 * C1834 + C49300 * C1838) *
               C1091 +
           (C1093 * C613 - C1094 * C606 - C1093 * C614 + C49332 * C621 +
            C1095 * C1314 - C1096 * C1310 - C1095 * C1315 + C49320 * C1322 +
            C1097 * C1835 - C1098 * C1830 - C1097 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C600 -
          (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
           (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
              C49053 * C49024 * C601 +
          ((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C102 +
           (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C103 +
           (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C104 +
           (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) * C105 +
           (C113 * C617 - C114 * C608 - C113 * C618 + C49035 * C623) * C106) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           (C2937 + C2903 + C2904) * C49322 +
           (C2938 + C2909 + C2910) * C49303) *
              C49024 * C600 -
          ((C2733 * C49289 + C2734 * C1091 +
            (C113 * C2406 - C114 * C2400 - C113 * C2407 + C49035 * C2418) *
                C1090) *
               C49303 +
           (C2735 * C49289 + C2736 * C1091 +
            (C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C1090) *
               C49322 +
           (C315 * C49289 + C316 * C1091 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C1090) *
               C49333) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C1090 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C1091 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) *
                C49289) *
               C49333 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C1090 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C1091 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C49289) *
               C49322 +
           ((C113 * C2408 - C114 * C2401 - C113 * C2409 + C49035 * C2419) *
                C1090 +
            (C113 * C2412 - C114 * C2403 - C113 * C2413 + C49035 * C2421) *
                C1091 +
            (C113 * C2416 - C114 * C2405 - C113 * C2417 + C49035 * C2423) *
                C49289) *
               C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C600 -
          ((C8197 + C8198 + C8199) * C49289 + (C8200 + C8201 + C8202) * C49316 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C49329) *
              C49053 * C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C49329 +
           (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
            C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
            C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
               C49316 +
           (C7943 * C613 - C7944 * C606 - C7943 * C614 + C7937 * C621 +
            C7945 * C1314 - C7946 * C1310 - C7945 * C1315 + C7938 * C1322 +
            C7947 * C1835 - C7948 * C1830 - C7947 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C600 -
          (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
           C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
           C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
           C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
           C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
              C48938 * C49053 * C49024 * C601 +
          (C9262 * C609 - C9263 * C604 - C9262 * C610 + C9256 * C619 +
           C9264 * C1318 - C9265 * C1312 - C9264 * C1319 + C9257 * C1324 +
           C9266 * C1831 - C9267 * C1828 - C9266 * C1832 + C9258 * C1837 +
           C9268 * C9356 - C9269 * C9354 - C9268 * C9357 + C9259 * C9360 +
           C9270 * C9597 - C9271 * C9596 - C9270 * C9598 + C9260 * C9599) *
              C48938 * C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C10389 + C10390 + C10391) * C48938 * C49322 +
           (C10392 + C10393 + C10394) * C48938 * C49303) *
              C49024 * C600 -
          ((C7947 * C9914 - C7948 * C9912 - C7947 * C9915 + C49300 * C9918 +
            C7945 * C2408 - C7946 * C2401 - C7945 * C2409 + C7938 * C2419 +
            C7943 * C2406 - C7944 * C2400 - C7943 * C2407 + C7937 * C2418) *
               C48938 * C49303 +
           (C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995 +
            C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
            C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721) *
               C48938 * C49322 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C48938 * C49333) *
              C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C48938 * C49333 +
           (C7943 * C1522 - C7944 * C1516 - C7943 * C1523 + C7937 * C1528 +
            C7945 * C1989 - C7946 * C1986 - C7945 * C1990 + C7938 * C1995 +
            C7947 * C9446 - C7948 * C9444 - C7947 * C9447 + C49300 * C9450) *
               C48938 * C49322 +
           (C7943 * C2408 - C7944 * C2401 - C7943 * C2409 + C7937 * C2419 +
            C7945 * C9914 - C7946 * C9912 - C7945 * C9915 + C7938 * C9918 +
            C7947 * C9916 - C7948 * C9913 - C7947 * C9917 + C49300 * C9919) *
               C48938 * C49303) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C534 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C534 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C398 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C534 +
          (((C3371 + C3357 + C3358) * C49333 +
            (C3372 + C3363 + C3364) * C49322 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C1090 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C1091 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C3364 + C3363 + C3372) * C49303 +
            (C3358 + C3357 + C3371) * C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C534 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C534 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C398 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C534 +
          (((C10840 + C10841 + C10842) * C48938 * C49333 +
            (C10843 + C10844 + C10845) * C48938 * C49322 +
            (C7943 * C3343 - C7944 * C3340 - C7943 * C3344 + C7937 * C3349 +
             C7945 * C10328 - C7946 * C10326 - C7945 * C10329 + C7938 * C10332 +
             C7947 * C10800 - C7948 * C10799 - C7947 * C10801 +
             C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C10845 + C10844 + C10843) * C48938 * C49303 +
            (C10842 + C10841 + C10840) * C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C536 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C49007 * C536 +
          (((C2919 + C2920 + C2921) * C49333 +
            (C2922 + C2923 + C2924) * C49322 +
            (C2936 * C1090 + C2935 * C1091 +
             (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                 C49289) *
                C49303) *
               C49297 -
           ((C2924 + C2923 + C2922) * C49303 +
            (C2921 + C2920 + C2919) * C49322 +
            (C176 * C49289 + C175 * C1091 + C174 * C1090) * C49333) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C536 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C808 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C48938 * C49333 +
            (C10395 + C10396 + C10397) * C48938 * C49322 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48938 * C49303) *
               C49297 -
           ((C10397 + C10396 + C10395) * C48938 * C49303 +
            (C8388 + C8389 + C8390) * C48938 * C49322 +
            (C8006 + C8005 + C8004) * C48938 * C49333) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C260 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C260 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
             C174 * C1091 + C175 * C49289) *
                C49333 +
            (C2937 + C2903 + C2904) * C49322 +
            (C2938 + C2909 + C2910) * C49303) *
               C808 -
           ((C2935 * C49289 + C2936 * C1091 +
             (C113 * C2890 - C114 * C2884 - C113 * C2891 + C49035 * C2896) *
                 C1090) *
                C49303 +
            (C2910 + C2909 + C2938) * C49322 +
            (C2904 + C2903 + C2937) * C49333) *
               C49297) *
              C260 +
          (((C3371 + C3357 + C3358) * C49333 +
            (C3372 + C3363 + C3364) * C49322 +
            ((C113 * C3343 - C114 * C3340 - C113 * C3344 + C49035 * C3349) *
                 C1090 +
             (C113 * C3345 - C114 * C3341 - C113 * C3346 + C49035 * C3350) *
                 C1091 +
             (C113 * C3347 - C114 * C3342 - C113 * C3348 + C49035 * C3351) *
                 C49289) *
                C49303) *
               C49297 -
           ((C3364 + C3363 + C3372) * C49303 +
            (C3358 + C3357 + C3371) * C49322 +
            (C315 * C49289 + C316 * C1091 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C1090) *
                C49333) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C260 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C260 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C48938 * C49333 +
            (C10389 + C10390 + C10391) * C48938 * C49322 +
            (C10392 + C10393 + C10394) * C48938 * C49303) *
               C808 -
           ((C7947 * C10328 - C7948 * C10326 - C7947 * C10329 +
             C49300 * C10332 + C7945 * C3343 - C7946 * C3340 - C7945 * C3344 +
             C7938 * C3349 + C7943 * C2890 - C7944 * C2884 - C7943 * C2891 +
             C7937 * C2896) *
                C48938 * C49303 +
            (C10394 + C10393 + C10392) * C48938 * C49322 +
            (C10391 + C10390 + C10389) * C48938 * C49333) *
               C49297) *
              C260 +
          (((C10840 + C10841 + C10842) * C48938 * C49333 +
            (C10843 + C10844 + C10845) * C48938 * C49322 +
            (C7943 * C3343 - C7944 * C3340 - C7943 * C3344 + C7937 * C3349 +
             C7945 * C10328 - C7946 * C10326 - C7945 * C10329 + C7938 * C10332 +
             C7947 * C10800 - C7948 * C10799 - C7947 * C10801 +
             C49300 * C10802) *
                C48938 * C49303) *
               C49297 -
           ((C10845 + C10844 + C10843) * C48938 * C49303 +
            (C10842 + C10841 + C10840) * C48938 * C49322 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C48938 * C49333) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C954 -
          ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
           (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
            C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
            C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
               C1090) *
              C49053 * C955 +
          ((C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
            C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
            C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
               C1090 +
           (C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973 +
            C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
            C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421) *
               C1091 +
           (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
            C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
            C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C954 -
          (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
           (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
              C49053 * C955 +
          ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C102 +
           (C113 * C964 - C114 * C958 - C113 * C965 + C49035 * C973) * C103 +
           (C113 * C966 - C114 * C959 - C113 * C967 + C49035 * C974) * C104 +
           (C113 * C968 - C114 * C960 - C113 * C969 + C49035 * C975) * C105 +
           (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) * C106) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C1090 +
            C174 * C1091 + C175 * C49289) *
               C49333 +
           (C2937 + C2903 + C2904) * C49322 + C3794 * C49303) *
              C954 -
          ((C3788 + C3789 + C3798) * C49303 + (C2910 + C2909 + C2938) * C49322 +
           (C2904 + C2903 + C2937) * C49333) *
              C955 +
          (C3794 * C49333 + (C3798 + C3789 + C3788) * C49322 +
           ((C113 * C3777 - C114 * C3774 - C113 * C3778 + C49035 * C3783) *
                C1090 +
            (C113 * C3779 - C114 * C3775 - C113 * C3780 + C49035 * C3784) *
                C1091 +
            (C113 * C3781 - C114 * C3776 - C113 * C3782 + C49035 * C3785) *
                C49289) *
               C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C954 -
          ((C8385 + C8386 + C8387) * C49289 + (C8388 + C8389 + C8390) * C49316 +
           (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
               C49329) *
              C49053 * C955 +
          ((C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C49329 +
           (C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421) *
               C49316 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C954 -
          (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
           C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
           C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
           C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
           C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
              C48938 * C49053 * C955 +
          (C9262 * C962 - C9263 * C957 - C9262 * C963 + C9256 * C972 +
           C9264 * C2406 - C9265 * C2400 - C9264 * C2407 + C9257 * C2418 +
           C9266 * C2408 - C9267 * C2401 - C9266 * C2409 + C9258 * C2419 +
           C9268 * C9914 - C9269 * C9912 - C9268 * C9915 + C9259 * C9918 +
           C9270 * C9916 - C9271 * C9913 - C9270 * C9917 + C9260 * C9919) *
              C48938 * C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C48938 * C49333 +
           (C10389 + C10390 + C10391) * C48938 * C49322 + C11273 * C49303) *
              C954 -
          ((C11277 + C11278 + C11279) * C48938 * C49303 +
           (C10394 + C10393 + C10392) * C48938 * C49322 +
           (C10391 + C10390 + C10389) * C48938 * C49333) *
              C955 +
          (C11273 * C49333 + (C11279 + C11278 + C11277) * C48938 * C49322 +
           (C7943 * C3777 - C7944 * C3774 - C7943 * C3778 + C7937 * C3783 +
            C7945 * C11249 - C7946 * C11247 - C7945 * C11250 + C7938 * C11253 +
            C7947 * C11251 - C7948 * C11248 - C7947 * C11252 +
            C49300 * C11254) *
               C48938 * C49303) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C2933 * C3898 + C452 * C3899 + C451 * C3900 + C450 * C49267) *
               C49140) *
              C49024 * C49007 * C110 -
          ((C449 * C49267 + C450 * C3900 + C451 * C3899 + C452 * C3898) *
               C49140 +
           (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C175 * C3898 + C176 * C3899 + C177 * C3900 + C178 * C49267) *
               C49268 +
           (C451 * C3898 + C450 * C3899 + C449 * C3900 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) *
                C49267) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 +
            (C8390 + C8389 + C8388) * C48948) *
               C49140) *
              C49024 * C49007 * C110 -
          (((C8385 + C8386 + C8387) * C48948 +
            (C8388 + C8389 + C8390) * C49245) *
               C49140 +
           ((C8009 + C8008 + C8007) * C48948 +
            (C8006 + C8005 + C8004) * C49245) *
               C49268) *
              C49024 * C49007 * C111 +
          ((C8014 * C49245 + (C8012 + C8011 + C8010) * C48948) * C49268 +
           ((C8387 + C8386 + C8385) * C49245 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C48948) *
               C49140) *
              C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C2933 * C3898 + C452 * C3899 + C451 * C3900 + C450 * C49267) *
                C49140) *
               C49024 * C260 -
           ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
                C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C49024 * C49295) *
              C262 +
          (((C316 * C3898 + C315 * C3899 + C314 * C3900 + C313 * C49267) *
                C49268 +
            (C2736 * C3898 + C2735 * C3899 + C5261 * C3900 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C449 * C49267 + C450 * C3900 + C451 * C3899 + C452 * C3898) *
                C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 +
             (C8390 + C8389 + C8388) * C48948) *
                C49140) *
               C49024 * C260 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C49024 * C49295) *
              C262 +
          ((((C8202 + C8201 + C8200) * C49245 +
             (C8199 + C8198 + C8197) * C48948) *
                C49268 +
            ((C12840 + C12839 + C12838) * C49245 +
             (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
              C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
              C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C8385 + C8386 + C8387) * C48948 +
             (C8388 + C8389 + C8390) * C49245) *
                C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C49007 * C262 +
          (((C5396 + C5397 + C5398 + C5399) * C49268 +
            (C2556 * C3898 + C2557 * C3899 + C2558 * C3900 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C398 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C49007 * C262 +
          (((C13037 * C49245 + (C8387 + C8386 + C8385) * C48948) * C49268 +
            ((C10395 + C10396 + C10397) * C49245 +
             (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
              C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
              C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C49024 * C534 -
           ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
                C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C49024 * C49295) *
              C536 +
          (((C316 * C3898 + C315 * C3899 + C314 * C3900 + C313 * C49267) *
                C49268 +
            (C2736 * C3898 + C2735 * C3899 + C5261 * C3900 +
             (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) *
                 C49267) *
                C49140) *
               C49024 * C49295 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C49024 * C534 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C49024 * C49295) *
              C536 +
          ((((C8202 + C8201 + C8200) * C49245 +
             (C8199 + C8198 + C8197) * C48948) *
                C49268 +
            ((C12840 + C12839 + C12838) * C49245 +
             (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
              C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
              C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                 C48948) *
                C49140) *
               C49024 * C49295 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C5392 + C5393 + C5394 + C5395) * C49140) *
              C49024 * C600 -
          ((C5261 * C49267 + C2735 * C3900 + C2736 * C3899 + C3369 * C3898) *
               C49140 +
           (C314 * C49267 + C315 * C3900 + C316 * C3899 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C3898) *
               C49268) *
              C49024 * C601 +
          (((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C3898 +
            (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C3899 +
            (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C3900 +
            (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) *
                C49267) *
               C49268 +
           ((C113 * C1522 - C114 * C1516 - C113 * C1523 + C49035 * C1528) *
                C3898 +
            (C113 * C1520 - C114 * C1515 - C113 * C1521 + C49035 * C1527) *
                C3899 +
            (C113 * C1518 - C114 * C1514 - C113 * C1519 + C49035 * C1526) *
                C3900 +
            (C113 * C1524 - C114 * C1517 - C113 * C1525 + C49035 * C1529) *
                C49267) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
              C49024 * C600 -
          (((C12838 + C12839 + C12840) * C48948 +
            (C10842 + C10841 + C10840) * C49245) *
               C49140 +
           ((C8200 + C8201 + C8202) * C48948 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49245) *
               C49268) *
              C49024 * C601 +
          (((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
             C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
             C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
                C49245 +
            (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
             C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
             C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
                C48948) *
               C49268 +
           ((C7943 * C1522 - C7944 * C1516 - C7943 * C1523 + C7937 * C1528 +
             C7945 * C1989 - C7946 * C1986 - C7945 * C1990 + C7938 * C1995 +
             C7947 * C9446 - C7948 * C9444 - C7947 * C9447 + C49300 * C9450) *
                C49245 +
            (C7943 * C1520 - C7944 * C1515 - C7943 * C1521 + C7937 * C1527 +
             C7945 * C1991 - C7946 * C1987 - C7945 * C1992 + C7938 * C1996 +
             C7947 * C9448 - C7948 * C9445 - C7947 * C9449 + C49300 * C9451) *
                C48948) *
               C49140) *
              C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C398 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C534 +
          (((C5758 + C5759 + C5760 + C5761) * C49268 +
            (C3370 * C3898 + C2734 * C3899 + C2733 * C3900 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5761 + C5760 + C5759 + C5758) * C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C398 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C534 +
          ((((C10840 + C10841 + C10842) * C49245 +
             (C12840 + C12839 + C12838) * C48948) *
                C49268 +
            ((C10843 + C10844 + C10845) * C49245 +
             (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
              C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
              C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C49007 * C536 +
          (((C5396 + C5397 + C5398 + C5399) * C49268 +
            (C2556 * C3898 + C2557 * C3899 + C2558 * C3900 +
             (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5399 + C5398 + C5397 + C5396) * C49140 +
            (C177 * C49267 + C176 * C3900 + C175 * C3899 + C174 * C3898) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C808 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C49007 * C536 +
          (((C13037 * C49245 + (C8387 + C8386 + C8385) * C48948) * C49268 +
            ((C10395 + C10396 + C10397) * C49245 +
             (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
              C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
              C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
                 C48948) *
                C49140) *
               C49297 -
           (((C8385 + C8386 + C8387) * C48948 + C13038 * C49245) * C49140 +
            ((C8009 + C8008 + C8007) * C48948 +
             (C8006 + C8005 + C8004) * C49245) *
                C49268) *
               C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
             C174 * C3899 + C175 * C3900 + C176 * C49267) *
                C49268 +
            (C5392 + C5393 + C5394 + C5395) * C49140) *
               C808 -
           ((C2558 * C49267 + C2557 * C3900 + C2556 * C3899 + C2934 * C3898) *
                C49140 +
            (C5395 + C5394 + C5393 + C5392) * C49268) *
               C49297) *
              C260 +
          (((C5758 + C5759 + C5760 + C5761) * C49268 +
            (C3370 * C3898 + C2734 * C3899 + C2733 * C3900 +
             (C113 * C2705 - C114 * C2704 - C113 * C2706 + C49035 * C2707) *
                 C49267) *
                C49140) *
               C49297 -
           ((C5761 + C5760 + C5759 + C5758) * C49140 +
            (C314 * C49267 + C315 * C3900 + C316 * C3899 +
             (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) *
                 C3898) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
              C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
              C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                 C49245 +
             (C8004 + C8005 + C8006) * C48948) *
                C49268 +
            ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
               C808 -
           (((C10397 + C10396 + C10395) * C48948 +
             (C10394 + C10393 + C10392) * C49245) *
                C49140 +
            (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
               C49297) *
              C260 +
          ((((C10840 + C10841 + C10842) * C49245 +
             (C12840 + C12839 + C12838) * C48948) *
                C49268 +
            ((C10843 + C10844 + C10845) * C49245 +
             (C7943 * C2410 - C7944 * C2402 - C7943 * C2411 + C7937 * C2420 +
              C7945 * C2412 - C7946 * C2403 - C7945 * C2413 + C7938 * C2421 +
              C7947 * C10177 - C7948 * C10176 - C7947 * C10178 +
              C49300 * C10179) *
                 C48948) *
                C49140) *
               C49297 -
           (((C12838 + C12839 + C12840) * C48948 +
             (C10842 + C10841 + C10840) * C49245) *
                C49140 +
            ((C8200 + C8201 + C8202) * C48948 +
             (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
              C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
              C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                 C49245) *
                C49268) *
               C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C3898 +
            C174 * C3899 + C175 * C3900 + C176 * C49267) *
               C49268 +
           (C5392 + C5393 + C5394 + C5395) * C49140) *
              C954 -
          ((C6120 + C6121 + C6122 + C6123) * C49140 +
           (C5395 + C5394 + C5393 + C5392) * C49268) *
              C955 +
          ((C6123 + C6122 + C6121 + C6120) * C49268 +
           (C3797 * C3898 + C2936 * C3899 + C2935 * C3900 +
            (C113 * C2892 - C114 * C2885 - C113 * C2893 + C49035 * C2897) *
                C49267) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49245 +
            (C8004 + C8005 + C8006) * C48948) *
               C49268 +
           ((C10389 + C10390 + C10391) * C49245 + C13037 * C48948) * C49140) *
              C954 -
          (((C10397 + C10396 + C10395) * C48948 +
            (C10394 + C10393 + C10392) * C49245) *
               C49140 +
           (C13038 * C48948 + (C10391 + C10390 + C10389) * C49245) * C49268) *
              C955 +
          ((C11269 * C49245 + (C10395 + C10396 + C10397) * C48948) * C49268 +
           ((C11279 + C11278 + C11277) * C49245 +
            (C7943 * C2888 - C7944 * C2883 - C7943 * C2889 + C7937 * C2895 +
             C7945 * C3345 - C7946 * C3341 - C7945 * C3346 + C7938 * C3350 +
             C7947 * C10330 - C7948 * C10327 - C7947 * C10331 +
             C49300 * C10333) *
                C48948) *
               C49140) *
              C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C49007 * C110 -
          (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
           C174 * C102) *
              C49053 * C49024 * C49007 * C111 +
          (C175 * C102 + C176 * C103 + C177 * C104 + C178 * C105 +
           (C113 * C134 - C114 * C121 - C113 * C135 + C49035 * C142) * C106) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
           (C1156 + C1155 + C1154) * C1090) *
              C49053 * C49024 * C49007 * C111 +
          (C1164 * C1090 + (C1162 + C1161 + C1160) * C1091 +
           (C1093 * C130 - C1094 * C119 - C1093 * C131 + C49332 * C140 +
            C1095 * C270 - C1096 * C264 - C1095 * C271 + C49320 * C282 +
            C1097 * C617 - C1098 * C608 - C1097 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C49007 * C110 -
          ((C8010 + C8011 + C8012) * C49289 + (C8009 + C8008 + C8007) * C49316 +
           (C8006 + C8005 + C8004) * C49329) *
              C49053 * C49024 * C49007 * C111 +
          (C8014 * C49329 + (C8012 + C8011 + C8010) * C49316 +
           (C7943 * C130 - C7944 * C119 - C7943 * C131 + C7937 * C140 +
            C7945 * C270 - C7946 * C264 - C7945 * C271 + C7938 * C282 +
            C7947 * C617 - C7948 * C608 - C7947 * C618 + C49300 * C623) *
               C49289) *
              C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C49007 * C110 -
          (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
           C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
           C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
           C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
           C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
              C48938 * C49053 * C49024 * C49007 * C111 +
          (C9262 * C126 - C9263 * C117 - C9262 * C127 + C9256 * C138 +
           C9264 * C274 - C9265 * C266 - C9264 * C275 + C9257 * C284 +
           C9266 * C613 - C9267 * C606 - C9266 * C614 + C9258 * C621 +
           C9268 * C1314 - C9269 * C1310 - C9268 * C1315 + C9259 * C1322 +
           C9270 * C1835 - C9271 * C1830 - C9270 * C1836 + C9260 * C1839) *
              C48938 * C49053 * C49024 * C49007 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C260 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C262 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C260 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C260 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C262 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C260 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C262 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C260) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C262 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C262 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C262 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C398) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C49024 * C534 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C49024 * C49295) *
              C536 +
          ((C316 * C102 + C315 * C103 + C314 * C104 + C313 * C105 +
            (C113 * C280 - C114 * C269 - C113 * C281 + C49035 * C287) * C106) *
               C49053 * C49024 * C49295 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C49024 * C534 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C1368 + C1367 + C1366) * C1090 + (C1365 + C1364 + C1363) * C1091 +
            (C1093 * C272 - C1094 * C265 - C1093 * C273 + C49332 * C283 +
             C1095 * C615 - C1096 * C607 - C1095 * C616 + C49320 * C622 +
             C1097 * C1320 - C1098 * C1313 - C1097 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C49024 * C534 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C49024 * C49295) *
              C536 +
          (((C8202 + C8201 + C8200) * C49329 +
            (C8199 + C8198 + C8197) * C49316 +
            (C7943 * C272 - C7944 * C265 - C7943 * C273 + C7937 * C283 +
             C7945 * C615 - C7946 * C607 - C7945 * C616 + C7938 * C622 +
             C7947 * C1320 - C7948 * C1313 - C7947 * C1321 + C49300 * C1325) *
                C49289) *
               C49053 * C49024 * C49295 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C49024 * C534 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C49024 * C49295) *
              C536 +
          ((C9262 * C276 - C9263 * C267 - C9262 * C277 + C9256 * C285 +
            C9264 * C611 - C9265 * C605 - C9264 * C612 + C9257 * C620 +
            C9266 * C1316 - C9267 * C1311 - C9266 * C1317 + C9258 * C1323 +
            C9268 * C1833 - C9269 * C1829 - C9268 * C1834 + C9259 * C1838 +
            C9270 * C9358 - C9271 * C9355 - C9270 * C9359 + C9260 * C9361) *
               C48938 * C49053 * C49024 * C49295 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C49024 * C534) *
              C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C49024 * C600 -
          (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
           (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
              C49053 * C49024 * C601 +
          ((C113 * C609 - C114 * C604 - C113 * C610 + C49035 * C619) * C102 +
           (C113 * C611 - C114 * C605 - C113 * C612 + C49035 * C620) * C103 +
           (C113 * C613 - C114 * C606 - C113 * C614 + C49035 * C621) * C104 +
           (C113 * C615 - C114 * C607 - C113 * C616 + C49035 * C622) * C105 +
           (C113 * C617 - C114 * C608 - C113 * C618 + C49035 * C623) * C106) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C49024 * C600 -
          ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
           (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
            C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
            C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
               C1090) *
              C49053 * C49024 * C601 +
          ((C1093 * C609 - C1094 * C604 - C1093 * C610 + C49332 * C619 +
            C1095 * C1318 - C1096 * C1312 - C1095 * C1319 + C49320 * C1324 +
            C1097 * C1831 - C1098 * C1828 - C1097 * C1832 + C49300 * C1837) *
               C1090 +
           (C1093 * C611 - C1094 * C605 - C1093 * C612 + C49332 * C620 +
            C1095 * C1316 - C1096 * C1311 - C1095 * C1317 + C49320 * C1323 +
            C1097 * C1833 - C1098 * C1829 - C1097 * C1834 + C49300 * C1838) *
               C1091 +
           (C1093 * C613 - C1094 * C606 - C1093 * C614 + C49332 * C621 +
            C1095 * C1314 - C1096 * C1310 - C1095 * C1315 + C49320 * C1322 +
            C1097 * C1835 - C1098 * C1830 - C1097 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C49024 * C600 -
          ((C8197 + C8198 + C8199) * C49289 + (C8200 + C8201 + C8202) * C49316 +
           (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
            C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
            C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
               C49329) *
              C49053 * C49024 * C601 +
          ((C7943 * C609 - C7944 * C604 - C7943 * C610 + C7937 * C619 +
            C7945 * C1318 - C7946 * C1312 - C7945 * C1319 + C7938 * C1324 +
            C7947 * C1831 - C7948 * C1828 - C7947 * C1832 + C49300 * C1837) *
               C49329 +
           (C7943 * C611 - C7944 * C605 - C7943 * C612 + C7937 * C620 +
            C7945 * C1316 - C7946 * C1311 - C7945 * C1317 + C7938 * C1323 +
            C7947 * C1833 - C7948 * C1829 - C7947 * C1834 + C49300 * C1838) *
               C49316 +
           (C7943 * C613 - C7944 * C606 - C7943 * C614 + C7937 * C621 +
            C7945 * C1314 - C7946 * C1310 - C7945 * C1315 + C7938 * C1322 +
            C7947 * C1835 - C7948 * C1830 - C7947 * C1836 + C49300 * C1839) *
               C49289) *
              C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C49024 * C600 -
          (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
           C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
           C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
           C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
           C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
              C48938 * C49053 * C49024 * C601 +
          (C9262 * C609 - C9263 * C604 - C9262 * C610 + C9256 * C619 +
           C9264 * C1318 - C9265 * C1312 - C9264 * C1319 + C9257 * C1324 +
           C9266 * C1831 - C9267 * C1828 - C9266 * C1832 + C9258 * C1837 +
           C9268 * C9356 - C9269 * C9354 - C9268 * C9357 + C9259 * C9360 +
           C9270 * C9597 - C9271 * C9596 - C9270 * C9598 + C9260 * C9599) *
              C48938 * C49053 * C49024 * C602) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C398 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C534 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C398 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C534 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C398 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C534 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C398 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C534 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C398) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C49007 * C536 +
          ((C452 * C102 + C451 * C103 + C450 * C104 + C449 * C105 +
            (C113 * C416 - C114 * C405 - C113 * C417 + C49035 * C423) * C106) *
               C49053 * C49297 -
           (C178 * C106 + C177 * C105 + C176 * C104 + C175 * C103 +
            C174 * C102) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C1572 + C1571 + C1570) * C1090 + (C1569 + C1568 + C1567) * C1091 +
            (C1093 * C408 - C1094 * C401 - C1093 * C409 + C49332 * C419 +
             C1095 * C717 - C1096 * C709 - C1095 * C718 + C49320 * C724 +
             C1097 * C1524 - C1098 * C1517 - C1097 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C1160 + C1161 + C1162) * C49289 + (C1159 + C1158 + C1157) * C1091 +
            (C1156 + C1155 + C1154) * C1090) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C49007 * C536 +
          (((C8390 + C8389 + C8388) * C49329 +
            (C8387 + C8386 + C8385) * C49316 +
            (C7943 * C408 - C7944 * C401 - C7943 * C409 + C7937 * C419 +
             C7945 * C717 - C7946 * C709 - C7945 * C718 + C7938 * C724 +
             C7947 * C1524 - C7948 * C1517 - C7947 * C1525 + C49300 * C1529) *
                C49289) *
               C49053 * C49297 -
           ((C8010 + C8011 + C8012) * C49289 +
            (C8009 + C8008 + C8007) * C49316 +
            (C8006 + C8005 + C8004) * C49329) *
               C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C49007 * C536 +
          ((C9262 * C412 - C9263 * C403 - C9262 * C413 + C9256 * C421 +
            C9264 * C713 - C9265 * C707 - C9264 * C714 + C9257 * C722 +
            C9266 * C1520 - C9267 * C1515 - C9266 * C1521 + C9258 * C1527 +
            C9268 * C1991 - C9269 * C1987 - C9268 * C1992 + C9259 * C1996 +
            C9270 * C9448 - C9271 * C9445 - C9270 * C9449 + C9260 * C9451) *
               C48938 * C49053 * C49297 -
           (C9270 * C1833 - C9271 * C1829 - C9270 * C1834 + C9260 * C1838 +
            C9268 * C1316 - C9269 * C1311 - C9268 * C1317 + C9259 * C1323 +
            C9266 * C611 - C9267 * C605 - C9266 * C612 + C9258 * C620 +
            C9264 * C276 - C9265 * C267 - C9264 * C277 + C9257 * C285 +
            C9262 * C124 - C9263 * C116 - C9262 * C125 + C9256 * C137) *
               C48938 * C49053 * C808) *
              C49007 * C49293)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
            C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
               C49053 * C808 -
           (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
            (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
               C49053 * C49297) *
              C260 +
          (((C113 * C711 - C114 * C706 - C113 * C712 + C49035 * C721) * C102 +
            (C113 * C713 - C114 * C707 - C113 * C714 + C49035 * C722) * C103 +
            (C113 * C715 - C114 * C708 - C113 * C716 + C49035 * C723) * C104 +
            (C113 * C717 - C114 * C709 - C113 * C718 + C49035 * C724) * C105 +
            (C113 * C719 - C114 * C710 - C113 * C720 + C49035 * C725) * C106) *
               C49053 * C49297 -
           (C313 * C106 + C314 * C105 + C315 * C104 + C316 * C103 +
            (C113 * C278 - C114 * C268 - C113 * C279 + C49035 * C286) * C102) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
             C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
             C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
                C1090 +
            (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
               C49053 * C808 -
           ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
            (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
             C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
             C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
                C1090) *
               C49053 * C49297) *
              C260 +
          (((C1093 * C711 - C1094 * C706 - C1093 * C712 + C49332 * C721 +
             C1095 * C1522 - C1096 * C1516 - C1095 * C1523 + C49320 * C1528 +
             C1097 * C1989 - C1098 * C1986 - C1097 * C1990 + C49300 * C1995) *
                C1090 +
            (C1093 * C713 - C1094 * C707 - C1093 * C714 + C49332 * C722 +
             C1095 * C1520 - C1096 * C1515 - C1095 * C1521 + C49320 * C1527 +
             C1097 * C1991 - C1098 * C1987 - C1097 * C1992 + C49300 * C1996) *
                C1091 +
            (C1093 * C715 - C1094 * C708 - C1093 * C716 + C49332 * C723 +
             C1095 * C1518 - C1096 * C1514 - C1095 * C1519 + C49320 * C1526 +
             C1097 * C1993 - C1098 * C1988 - C1097 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C1363 + C1364 + C1365) * C49289 + (C1366 + C1367 + C1368) * C1091 +
            (C1097 * C1318 - C1098 * C1312 - C1097 * C1319 + C49300 * C1324 +
             C1095 * C609 - C1096 * C604 - C1095 * C610 + C49320 * C619 +
             C1093 * C278 - C1094 * C268 - C1093 * C279 + C49332 * C286) *
                C1090) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
             C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
             C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
                C49329 +
            (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
               C49053 * C808 -
           ((C8385 + C8386 + C8387) * C49289 +
            (C8388 + C8389 + C8390) * C49316 +
            (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
             C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
             C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
                C49329) *
               C49053 * C49297) *
              C260 +
          (((C7943 * C711 - C7944 * C706 - C7943 * C712 + C7937 * C721 +
             C7945 * C1522 - C7946 * C1516 - C7945 * C1523 + C7938 * C1528 +
             C7947 * C1989 - C7948 * C1986 - C7947 * C1990 + C49300 * C1995) *
                C49329 +
            (C7943 * C713 - C7944 * C707 - C7943 * C714 + C7937 * C722 +
             C7945 * C1520 - C7946 * C1515 - C7945 * C1521 + C7938 * C1527 +
             C7947 * C1991 - C7948 * C1987 - C7947 * C1992 + C49300 * C1996) *
                C49316 +
            (C7943 * C715 - C7944 * C708 - C7943 * C716 + C7937 * C723 +
             C7945 * C1518 - C7946 * C1514 - C7945 * C1519 + C7938 * C1526 +
             C7947 * C1993 - C7948 * C1988 - C7947 * C1994 + C49300 * C1997) *
                C49289) *
               C49053 * C49297 -
           ((C8197 + C8198 + C8199) * C49289 +
            (C8200 + C8201 + C8202) * C49316 +
            (C7947 * C1318 - C7948 * C1312 - C7947 * C1319 + C49300 * C1324 +
             C7945 * C609 - C7946 * C604 - C7945 * C610 + C7938 * C619 +
             C7943 * C278 - C7944 * C268 - C7943 * C279 + C7937 * C286) *
                C49329) *
               C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
            C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
            C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
            C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
            C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
               C48938 * C49053 * C808 -
           (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
            C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
            C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
            C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
            C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
               C48938 * C49053 * C49297) *
              C260 +
          ((C9262 * C711 - C9263 * C706 - C9262 * C712 + C9256 * C721 +
            C9264 * C1522 - C9265 * C1516 - C9264 * C1523 + C9257 * C1528 +
            C9266 * C1989 - C9267 * C1986 - C9266 * C1990 + C9258 * C1995 +
            C9268 * C9446 - C9269 * C9444 - C9268 * C9447 + C9259 * C9450 +
            C9270 * C9683 - C9271 * C9682 - C9270 * C9684 + C9260 * C9685) *
               C48938 * C49053 * C49297 -
           (C9270 * C9356 - C9271 * C9354 - C9270 * C9357 + C9260 * C9360 +
            C9268 * C1831 - C9269 * C1828 - C9268 * C1832 + C9259 * C1837 +
            C9266 * C1318 - C9267 * C1312 - C9266 * C1319 + C9258 * C1324 +
            C9264 * C609 - C9265 * C604 - C9264 * C610 + C9257 * C619 +
            C9262 * C278 - C9263 * C268 - C9262 * C279 + C9256 * C286) *
               C48938 * C49053 * C808) *
              C49295) *
         C48973) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C122 - C114 * C115 - C113 * C123 + C49035 * C136) * C102 +
           C174 * C103 + C175 * C104 + C176 * C105 + C177 * C106) *
              C49053 * C954 -
          (C449 * C106 + C450 * C105 + C451 * C104 + C452 * C103 +
           (C113 * C414 - C114 * C404 - C113 * C415 + C49035 * C422) * C102) *
              C49053 * C955 +
          ((C113 * C962 - C114 * C957 - C113 * C963 + C49035 * C972) * C102 +
           (C113 * C964 - C114 * C958 - C113 * C965 + C49035 * C973) * C103 +
           (C113 * C966 - C114 * C959 - C113 * C967 + C49035 * C974) * C104 +
           (C113 * C968 - C114 * C960 - C113 * C969 + C49035 * C975) * C105 +
           (C113 * C970 - C114 * C961 - C113 * C971 + C49035 * C976) * C106) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C1093 * C122 - C1094 * C115 - C1093 * C123 + C49332 * C136 +
            C1095 * C278 - C1096 * C268 - C1095 * C279 + C49320 * C286 +
            C1097 * C609 - C1098 * C604 - C1097 * C610 + C49300 * C619) *
               C1090 +
           (C1154 + C1155 + C1156) * C1091 + C1164 * C49289) *
              C49053 * C954 -
          ((C1567 + C1568 + C1569) * C49289 + (C1570 + C1571 + C1572) * C1091 +
           (C1097 * C1522 - C1098 * C1516 - C1097 * C1523 + C49300 * C1528 +
            C1095 * C711 - C1096 * C706 - C1095 * C712 + C49320 * C721 +
            C1093 * C414 - C1094 * C404 - C1093 * C415 + C49332 * C422) *
               C1090) *
              C49053 * C955 +
          ((C1093 * C962 - C1094 * C957 - C1093 * C963 + C49332 * C972 +
            C1095 * C2406 - C1096 * C2400 - C1095 * C2407 + C49320 * C2418 +
            C1097 * C2408 - C1098 * C2401 - C1097 * C2409 + C49300 * C2419) *
               C1090 +
           (C1093 * C964 - C1094 * C958 - C1093 * C965 + C49332 * C973 +
            C1095 * C2410 - C1096 * C2402 - C1095 * C2411 + C49320 * C2420 +
            C1097 * C2412 - C1098 * C2403 - C1097 * C2413 + C49300 * C2421) *
               C1091 +
           (C1093 * C966 - C1094 * C959 - C1093 * C967 + C49332 * C974 +
            C1095 * C2414 - C1096 * C2404 - C1095 * C2415 + C49320 * C2422 +
            C1097 * C2416 - C1098 * C2405 - C1097 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C7943 * C122 - C7944 * C115 - C7943 * C123 + C7937 * C136 +
            C7945 * C278 - C7946 * C268 - C7945 * C279 + C7938 * C286 +
            C7947 * C609 - C7948 * C604 - C7947 * C610 + C49300 * C619) *
               C49329 +
           (C8004 + C8005 + C8006) * C49316 + C8014 * C49289) *
              C49053 * C954 -
          ((C8385 + C8386 + C8387) * C49289 + (C8388 + C8389 + C8390) * C49316 +
           (C7947 * C1522 - C7948 * C1516 - C7947 * C1523 + C49300 * C1528 +
            C7945 * C711 - C7946 * C706 - C7945 * C712 + C7938 * C721 +
            C7943 * C414 - C7944 * C404 - C7943 * C415 + C7937 * C422) *
               C49329) *
              C49053 * C955 +
          ((C7943 * C962 - C7944 * C957 - C7943 * C963 + C7937 * C972 +
            C7945 * C2406 - C7946 * C2400 - C7945 * C2407 + C7938 * C2418 +
            C7947 * C2408 - C7948 * C2401 - C7947 * C2409 + C49300 * C2419) *
               C49329 +
           (C7943 * C964 - C7944 * C958 - C7943 * C965 + C7937 * C973 +
            C7945 * C2410 - C7946 * C2402 - C7945 * C2411 + C7938 * C2420 +
            C7947 * C2412 - C7948 * C2403 - C7947 * C2413 + C49300 * C2421) *
               C49316 +
           (C7943 * C966 - C7944 * C959 - C7943 * C967 + C7937 * C974 +
            C7945 * C2414 - C7946 * C2404 - C7945 * C2415 + C7938 * C2422 +
            C7947 * C2416 - C7948 * C2405 - C7947 * C2417 + C49300 * C2423) *
               C49289) *
              C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C9262 * C122 - C9263 * C115 - C9262 * C123 + C9256 * C136 +
           C9264 * C278 - C9265 * C268 - C9264 * C279 + C9257 * C286 +
           C9266 * C609 - C9267 * C604 - C9266 * C610 + C9258 * C619 +
           C9268 * C1318 - C9269 * C1312 - C9268 * C1319 + C9259 * C1324 +
           C9270 * C1831 - C9271 * C1828 - C9270 * C1832 + C9260 * C1837) *
              C48938 * C49053 * C954 -
          (C9270 * C9446 - C9271 * C9444 - C9270 * C9447 + C9260 * C9450 +
           C9268 * C1989 - C9269 * C1986 - C9268 * C1990 + C9259 * C1995 +
           C9266 * C1522 - C9267 * C1516 - C9266 * C1523 + C9258 * C1528 +
           C9264 * C711 - C9265 * C706 - C9264 * C712 + C9257 * C721 +
           C9262 * C414 - C9263 * C404 - C9262 * C415 + C9256 * C422) *
              C48938 * C49053 * C955 +
          (C9262 * C962 - C9263 * C957 - C9262 * C963 + C9256 * C972 +
           C9264 * C2406 - C9265 * C2400 - C9264 * C2407 + C9257 * C2418 +
           C9266 * C2408 - C9267 * C2401 - C9266 * C2409 + C9258 * C2419 +
           C9268 * C9914 - C9269 * C9912 - C9268 * C9915 + C9259 * C9918 +
           C9270 * C9916 - C9271 * C9913 - C9270 * C9917 + C9260 * C9919) *
              C48938 * C49053 * C956) *
         C49007 * C48973) /
            (p * q * std::sqrt(p + q));
}
