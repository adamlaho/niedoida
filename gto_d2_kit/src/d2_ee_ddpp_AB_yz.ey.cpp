/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ddpp_AB_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_2211_12_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47175 = ae * be;
    const double C47174 = ae + be;
    const double C47173 = 0 * be;
    const double C47172 = yA - yB;
    const double C47192 = 0 * be;
    const double C47191 = zA - zB;
    const double C47232 = 0 * ae;
    const double C47227 = 0 * be;
    const double C47226 = 0 * be;
    const double C47277 = 0 * be;
    const double C47319 = 0 * ae;
    const double C47314 = 0 * be;
    const double C47313 = 0 * be;
    const double C47364 = 0 * be;
    const double C47425 = zP - zQ;
    const double C47424 = yP - yQ;
    const double C47423 = p + q;
    const double C47422 = p * q;
    const double C47434 = bs[4];
    const double C47432 = xP - xQ;
    const double C47439 = bs[5];
    const double C47446 = bs[6];
    const double C47454 = bs[7];
    const double C47494 = bs[3];
    const double C47852 = bs[2];
    const double C115 = bs[0];
    const double C48202 = xA - xB;
    const double C48237 = ce + de;
    const double C48236 = ce * de;
    const double C48235 = xC - xD;
    const double C48250 = yC - yD;
    const double C48259 = zC - zD;
    const double C47176 = std::pow(C47174, 2);
    const double C47210 = 2 * C47174;
    const double C47228 = C47173 / C47174;
    const double C47177 = C47175 * C47172;
    const double C47229 = C47172 * C47173;
    const double C48300 = std::pow(C47172, 2);
    const double C48358 = C47172 * be;
    const double C48356 = C47172 * ae;
    const double C47315 = C47192 / C47174;
    const double C47193 = C47175 * C47191;
    const double C47316 = C47191 * C47192;
    const double C48317 = std::pow(C47191, 2);
    const double C48400 = C47191 * be;
    const double C48398 = C47191 * ae;
    const double C47239 = C47232 / C47174;
    const double C47234 = C47172 * C47227;
    const double C47278 = C47277 / C47174;
    const double C47326 = C47319 / C47174;
    const double C47321 = C47191 * C47314;
    const double C47365 = C47364 / C47174;
    const double C47465 = C47425 * be;
    const double C47620 = std::pow(C47425, 2);
    const double C47427 = C47424 * C47425;
    const double C47480 = C47424 * ae;
    const double C47575 = std::pow(C47424, 2);
    const double C47426 = 2 * C47422;
    const double C47440 = std::pow(C47432, 2);
    const double C48205 = C48202 * be;
    const double C48204 = C48202 * ae;
    const double C48203 = std::pow(C48202, 2);
    const double C48247 = 2 * C48237;
    const double C48555 = std::pow(C48237, 2);
    const double C48238 = std::pow(C48235, 2);
    const double C48554 = C48235 * de;
    const double C48553 = C48235 * ce;
    const double C48272 = std::pow(C48250, 2);
    const double C48559 = C48250 * de;
    const double C48557 = C48250 * ce;
    const double C48289 = std::pow(C48259, 2);
    const double C48560 = C48259 * de;
    const double C48558 = C48259 * ce;
    const double C47178 = 2 * C47176;
    const double C136 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (zP - zQ) * ae * be) /
                        C47176;
    const double C137 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (yP - yQ) * (zP - zQ) * ae * be) /
                        C47176;
    const double C48551 = 4 * C47176;
    const double C48217 = std::pow(C47210, -1);
    const double C48552 = C47176 * C47210;
    const double C48548 = std::pow(C47210, -2);
    const double C47237 = C47229 / C47174;
    const double C48301 = C48300 * C47175;
    const double C48561 = std::pow(C48356, 2);
    const double C47324 = C47316 / C47174;
    const double C48318 = C48317 * C47175;
    const double C48563 = std::pow(C48398, 2);
    const double C47240 = C47234 / C47174;
    const double C47327 = C47321 / C47174;
    const double C47467 = C47434 * C47465;
    const double C47470 = C47439 * C47465;
    const double C47473 = C47446 * C47465;
    const double C47495 = C47494 * C47465;
    const double C47510 = C47454 * C47465;
    const double C47429 = C47427 * ae;
    const double C47482 = C47434 * C47480;
    const double C47485 = C47439 * C47480;
    const double C47488 = C47446 * C47480;
    const double C47527 = C47494 * C47480;
    const double C47542 = C47454 * C47480;
    const double C47428 = C47426 / C47423;
    const double C122 = (-(bs[1] * C47465 * C47426) / C47423) / C47174;
    const double C123 = (-(bs[1] * C47480 * C47426) / C47423) / C47174;
    const double C116 = -(C47432 * bs[1] * C47426) / C47423;
    const double C264 = -(C47424 * bs[1] * C47426) / C47423;
    const double C388 = -(C47425 * bs[1] * C47426) / C47423;
    const double C48541 = std::pow(C48204, 2);
    const double C48206 = C48203 * C47175;
    const double C48556 = std::pow(C48247, -1);
    const double C48590 = 2 * C48555;
    const double C48239 = C48238 * C48236;
    const double C48273 = C48272 * C48236;
    const double C48290 = C48289 * C48236;
    const double C47231 = C47173 / C47178;
    const double C47236 = C47227 / C47178;
    const double C47235 = C47226 / C47178;
    const double C47318 = C47192 / C47178;
    const double C47323 = C47314 / C47178;
    const double C47322 = C47313 / C47178;
    const double C48587 = C47174 * C48551;
    const double C48588 = 4 * C48552;
    const double C47241 = 0 - C47237;
    const double C48302 = C48301 / C47174;
    const double C47328 = 0 - C47324;
    const double C48319 = C48318 / C47174;
    const double C47244 = 0 - C47240;
    const double C47331 = 0 - C47327;
    const double C47430 = C47429 * be;
    const double C47433 = std::pow(C47428, 4);
    const double C47438 = -C47428;
    const double C47445 = std::pow(C47428, 6);
    const double C47851 = std::pow(C47428, 2);
    const double C124 =
        (C47432 * std::pow(C47428, 2) * bs[2] * C47465) / C47174;
    const double C125 =
        (C47432 * std::pow(C47428, 2) * bs[2] * C47480) / C47174;
    const double C270 =
        (C47424 * std::pow(C47428, 2) * bs[2] * C47465) / C47174;
    const double C271 =
        (C47424 * std::pow(C47428, 2) * bs[2] * C47480) / C47174 -
        (ae * bs[1] * C47426) / (C47423 * C47174);
    const double C394 =
        (C47425 * std::pow(C47428, 2) * bs[2] * C47465) / C47174 -
        (be * bs[1] * C47426) / (C47423 * C47174);
    const double C395 =
        (C47425 * std::pow(C47428, 2) * bs[2] * C47480) / C47174;
    const double C48207 = C48206 / C47174;
    const double C48240 = C48239 / C48237;
    const double C48274 = C48273 / C48237;
    const double C48291 = C48290 / C48237;
    const double C47245 = C47241 * ae;
    const double C48303 = -C48302;
    const double C47332 = C47328 * ae;
    const double C48320 = -C48319;
    const double C47248 = C47244 * ae;
    const double C47335 = C47331 * ae;
    const double C47435 = C47434 * C47430;
    const double C47442 = C47439 * C47430;
    const double C47447 = C47446 * C47430;
    const double C47456 = C47454 * C47430;
    const double C138 =
        (std::pow(-C47428, 3) * bs[3] * C47430 +
         std::pow(C47428, 4) * bs[4] * C47430 * std::pow(xP - xQ, 2)) /
        C47176;
    const double C47468 = C47433 * C47467;
    const double C47483 = C47433 * C47482;
    const double C47523 = C47434 * C47433;
    const double C47441 = std::pow(C47438, 5);
    const double C47453 = std::pow(C47438, 7);
    const double C47493 = std::pow(C47438, 3);
    const double C282 = (ae * std::pow(C47428, 2) * bs[2] * C47425 * be +
                         C47424 * std::pow(C47438, 3) * bs[3] * C47430) /
                        C47176;
    const double C406 = (be * std::pow(C47428, 2) * bs[2] * C47424 * ae +
                         C47425 * std::pow(C47438, 3) * bs[3] * C47430) /
                        C47176;
    const double C47474 = C47445 * C47473;
    const double C47489 = C47445 * C47488;
    const double C47565 = C47446 * C47445;
    const double C47853 = C47852 * C47851;
    const double C48208 = -C48207;
    const double C48241 = -C48240;
    const double C48275 = -C48274;
    const double C48292 = -C48291;
    const double C47249 = C47245 / C47174;
    const double C48304 = std::exp(C48303);
    const double C47336 = C47332 / C47174;
    const double C48321 = std::exp(C48320);
    const double C47252 = C47248 / C47174;
    const double C47339 = C47335 / C47174;
    const double C47436 = C47433 * C47435;
    const double C47448 = C47445 * C47447;
    const double C47498 = C47432 * C47468;
    const double C47573 = ae * C47468;
    const double C47572 = C47424 * C47468;
    const double C47967 = C47425 * C47468;
    const double C47530 = C47432 * C47483;
    const double C47594 = be * C47483;
    const double C47624 = C47425 * C47483;
    const double C47909 = C47424 * C47483;
    const double C47559 = C47432 * C47523;
    const double C47607 = C47424 * C47523;
    const double C47667 = C47523 * be;
    const double C47775 = C47425 * C47523;
    const double C47859 = C47523 * C47440;
    const double C47912 = C47523 * C47575;
    const double C47970 = C47523 * C47620;
    const double C47993 = C47523 * ae;
    const double C47443 = C47441 * C47442;
    const double C47471 = C47441 * C47470;
    const double C47486 = C47441 * C47485;
    const double C47525 = C47439 * C47441;
    const double C47457 = C47453 * C47456;
    const double C47512 = C47453 * C47510;
    const double C47544 = C47453 * C47542;
    const double C47496 = C47493 * C47495;
    const double C47528 = C47493 * C47527;
    const double C47557 = C47494 * C47493;
    const double C47475 = C47474 * C47440;
    const double C47509 = C47432 * C47474;
    const double C47639 = C47474 * C47575;
    const double C47694 = ae * C47474;
    const double C47693 = C47424 * C47474;
    const double C47715 = C47425 * C47474;
    const double C47490 = C47489 * C47440;
    const double C47541 = C47432 * C47489;
    const double C47717 = be * C47489;
    const double C47744 = C47425 * C47489;
    const double C47768 = C47489 * C47620;
    const double C48021 = C47424 * C47489;
    const double C47567 = C47565 * C47440;
    const double C47682 = C47432 * C47565;
    const double C47719 = C47565 * C47575;
    const double C47746 = C47424 * C47565;
    const double C47781 = C47565 * C47620;
    const double C117 = C47853 * C47440 - (bs[1] * C47426) / C47423;
    const double C265 = C47424 * C47432 * C47853;
    const double C389 = C47425 * C47432 * C47853;
    const double C580 = C47853 * C47575 - (bs[1] * C47426) / C47423;
    const double C682 = C47425 * C47424 * C47853;
    const double C933 = C47853 * C47620 - (bs[1] * C47426) / C47423;
    const double C48209 = std::exp(C48208);
    const double C48242 = std::exp(C48241);
    const double C48276 = std::exp(C48275);
    const double C48293 = std::exp(C48292);
    const double C47253 = C47249 - C47236;
    const double C47179 = C47177 * C48304;
    const double C114 = -(2 * ae * be * (yA - yB) * C48304) / (ae + be);
    const double C48357 = C48304 / C47210;
    const double C48359 = C48304 * C48356;
    const double C48366 = C48217 * C48304;
    const double C48567 = C48304 * C48358;
    const double C48598 = C48548 * C48304;
    const double C48596 = C48304 * C48561;
    const double C47340 = C47336 - C47323;
    const double C150 = C48321 * C138;
    const double C146 = C48321 * C137;
    const double C144 = C48321 * C124;
    const double C1264 = C48321 * C282;
    const double C1262 = C48321 * C270;
    const double C47194 = C47193 * C48321;
    const double C113 = -(2 * ae * be * (zA - zB) * C48321) / (ae + be);
    const double C48399 = C48321 / C47210;
    const double C48401 = C48321 * C48398;
    const double C48408 = C48217 * C48321;
    const double C48573 = C48321 * C48400;
    const double C48601 = C48548 * C48321;
    const double C48599 = C48321 * C48563;
    const double C47256 = C47252 - C47235;
    const double C47343 = C47339 - C47322;
    const double C139 = (2 * C47432 * C47436 +
                         C47432 * (C47436 + std::pow(-C47428, 5) * bs[5] *
                                                C47430 * std::pow(C47432, 2))) /
                        C47176;
    const double C283 =
        (ae * C47432 * std::pow(C47438, 3) * bs[3] * C47425 * be +
         C47424 * C47432 * C47436) /
        C47176;
    const double C407 =
        (be * C47432 * std::pow(C47438, 3) * bs[3] * C47424 * ae +
         C47425 * C47432 * C47436) /
        C47176;
    const double C47449 = C47448 * C47440;
    const double C47452 = C47432 * C47448;
    const double C47638 = C47424 * C47448;
    const double C47669 = C47425 * C47448;
    const double C47863 = 2 * C47559;
    const double C47919 = C47424 * C47559;
    const double C47918 = C47559 * ae;
    const double C47977 = C47425 * C47559;
    const double C47976 = C47559 * be;
    const double C47995 = 2 * C47607;
    const double C47994 = C47607 * ae;
    const double C48052 = C47425 * C47607;
    const double C48051 = C47607 * be;
    const double C48076 = 2 * C47775;
    const double C48075 = C47775 * be;
    const double C47553 = C47432 * C47443;
    const double C47574 = C47424 * C47443;
    const double C47595 = C47425 * C47443;
    const double C140 =
        (3 * (C47436 + C47443 * C47440) +
         C47432 * (2 * C47432 * C47443 +
                   C47432 * (C47443 +
                             std::pow(C47428, 6) * bs[6] * C47430 * C47440))) /
        C47176;
    const double C284 = (ae * (std::pow(C47438, 3) * bs[3] * C47465 +
                               C47433 * C47434 * C47465 * C47440) +
                         C47424 * (C47436 + C47443 * C47440)) /
                        C47176;
    const double C408 = (be * (std::pow(C47438, 3) * bs[3] * C47480 +
                               C47433 * C47434 * C47480 * C47440) +
                         C47425 * (C47436 + C47443 * C47440)) /
                        C47176;
    const double C596 = (C47432 * C47436 + ae * C47424 * C47498 +
                         C47424 * (ae * C47498 + C47424 * C47432 * C47443)) /
                        C47176;
    const double C698 =
        (ae * (C47425 * C47498 + C47432 * C47494 * C47493 * be) +
         C47424 * (be * C47432 * C47483 + C47425 * C47432 * C47443)) /
        C47176;
    const double C949 = (C47432 * C47436 + be * C47425 * C47530 +
                         C47425 * (be * C47530 + C47425 * C47432 * C47443)) /
                        C47176;
    const double C47500 = C47471 * C47440;
    const double C47503 = C47432 * C47471;
    const double C47577 = C47471 * C47575;
    const double C47637 = ae * C47471;
    const double C47636 = C47424 * C47471;
    const double C47666 = C47425 * C47471;
    const double C47532 = C47486 * C47440;
    const double C47535 = C47432 * C47486;
    const double C47625 = C47486 * C47620;
    const double C47668 = be * C47486;
    const double C47736 = C47425 * C47486;
    const double C47992 = C47424 * C47486;
    const double C47561 = C47525 * C47440;
    const double C47564 = C47432 * C47525;
    const double C47670 = C47525 * C47575;
    const double C47716 = C47525 * be;
    const double C47714 = C47424 * C47525;
    const double C47743 = C47425 * C47525;
    const double C47776 = C47525 * C47620;
    const double C48022 = C47525 * ae;
    const double C47458 = C47457 * C47440;
    const double C47652 = C47432 * C47457;
    const double C47695 = C47424 * C47457;
    const double C47718 = C47425 * C47457;
    const double C47513 = C47512 * C47440;
    const double C47653 = C47432 * C47512;
    const double C47697 = C47512 * C47575;
    const double C47545 = C47544 * C47440;
    const double C47760 = C47432 * C47544;
    const double C47782 = C47544 * C47620;
    const double C595 = (C47493 * C47494 * C47430 + ae * C47424 * C47496 +
                         C47424 * (ae * C47496 + C47424 * C47436)) /
                        C47176;
    const double C697 =
        (ae * (C47425 * C47496 + bs[2] * std::pow(C47428, 2) * be) +
         C47424 * (be * C47493 * C47494 * C47480 + C47425 * C47436)) /
        C47176;
    const double C1257 = (2 * (ae * C47496 + C47424 * C47436) +
                          ae * (C47496 + C47468 * std::pow(C47424, 2)) +
                          C47424 * (C47436 + ae * C47424 * C47468 +
                                    C47424 * (ae * C47468 + C47424 * C47443))) /
                         C47176;
    const double C126 =
        (std::pow(C47428, 2) * bs[2] * C47465 + C47496 * C47440) / C47174;
    const double C128 =
        (2 * C47432 * C47496 + C47432 * (C47496 + C47468 * C47440)) / C47174;
    const double C272 = (C47424 * C47432 * C47496) / C47174;
    const double C274 = (C47424 * (C47496 + C47468 * C47440)) / C47174;
    const double C396 =
        (C47425 * C47432 * C47496 + C47432 * bs[2] * std::pow(C47428, 2) * be) /
        C47174;
    const double C585 =
        (std::pow(C47428, 2) * bs[2] * C47465 + C47496 * C47575) / C47174;
    const double C587 = (C47432 * C47496 + C47498 * C47575) / C47174;
    const double C687 =
        (C47425 * C47424 * C47496 + C47424 * C47853 * be) / C47174;
    const double C938 =
        (C47851 * C47852 * C47465 + C47425 * (C47425 * C47496 + C47853 * be) +
         C47425 * C47853 * be) /
        C47174;
    const double C1249 =
        (2 * C47424 * C47496 + C47424 * (C47496 + C47468 * C47575)) / C47174;
    const double C948 = (C47493 * C47494 * C47430 + be * C47425 * C47528 +
                         C47425 * (be * C47528 + C47425 * C47436)) /
                        C47176;
    const double C127 =
        (std::pow(C47428, 2) * bs[2] * C47480 + C47528 * C47440) / C47174;
    const double C129 =
        (2 * C47432 * C47528 + C47432 * (C47528 + C47483 * C47440)) / C47174;
    const double C273 =
        (C47424 * C47432 * C47528 + C47432 * bs[2] * std::pow(C47428, 2) * ae) /
        C47174;
    const double C397 = (C47425 * C47432 * C47528) / C47174;
    const double C399 = (C47425 * (C47528 + C47483 * C47440)) / C47174;
    const double C586 =
        (C47851 * C47852 * C47480 + C47424 * (C47424 * C47528 + C47853 * ae) +
         C47424 * C47853 * ae) /
        C47174;
    const double C688 = (C47425 * (C47424 * C47528 + C47853 * ae)) / C47174;
    const double C939 = (C47851 * C47852 * C47480 + C47528 * C47620) / C47174;
    const double C941 = (C47432 * C47528 + C47530 * C47620) / C47174;
    const double C2823 =
        (2 * C47425 * C47528 + C47425 * (C47528 + C47483 * C47620)) / C47174;
    const double C1447 =
        (be * C47528 + C47425 * C47436 +
         ae * (C47425 * C47424 * C47468 + C47424 * C47557 * be) +
         C47424 * (ae * (C47425 * C47468 + C47557 * be) +
                   C47424 * (be * C47483 + C47425 * C47443))) /
        C47176;
    const double C47856 = C47432 * C47557;
    const double C47860 = C47557 + C47859;
    const double C47911 = C47424 * C47557;
    const double C47910 = C47557 * ae;
    const double C47914 = C47557 + C47912;
    const double C47969 = C47425 * C47557;
    const double C47968 = C47557 * be;
    const double C47972 = C47557 + C47970;
    const double C275 = (C47424 * (C47528 + C47483 * C47440) +
                         (bs[2] * std::pow(C47428, 2) + C47557 * C47440) * ae) /
                        C47174;
    const double C398 = (C47425 * (C47496 + C47468 * C47440) +
                         (bs[2] * std::pow(C47428, 2) + C47557 * C47440) * be) /
                        C47174;
    const double C1250 =
        (2 * (C47424 * C47528 + C47853 * ae) +
         C47424 * (C47528 + C47424 * (C47424 * C47483 + C47557 * ae) +
                   C47424 * C47557 * ae) +
         (C47853 + C47557 * C47575) * ae) /
        C47174;
    const double C1439 = (C47425 * (C47496 + C47468 * C47575) +
                          (C47853 + C47557 * C47575) * be) /
                         C47174;
    const double C1440 =
        (C47425 * (C47528 + C47424 * (C47424 * C47483 + C47557 * ae) +
                   C47424 * C47557 * ae)) /
        C47174;
    const double C2822 =
        (2 * (C47425 * C47496 + C47853 * be) +
         C47425 * (C47496 + C47425 * (C47425 * C47468 + C47557 * be) +
                   C47425 * C47557 * be) +
         (C47853 + C47557 * C47620) * be) /
        C47174;
    const double C118 =
        2 * C47432 * C47853 + C47432 * (C47853 + C47557 * C47440);
    const double C266 = C47424 * (C47853 + C47557 * C47440);
    const double C390 = C47425 * (C47853 + C47557 * C47440);
    const double C1245 =
        2 * C47424 * C47853 + C47424 * (C47853 + C47557 * C47575);
    const double C1435 = C47425 * (C47853 + C47557 * C47575);
    const double C2818 =
        2 * C47425 * C47853 + C47425 * (C47853 + C47557 * C47620);
    const double C47476 = C47471 + C47475;
    const double C47511 = 2 * C47509;
    const double C47583 = C47509 * C47575;
    const double C47651 = ae * C47509;
    const double C47650 = C47424 * C47509;
    const double C47678 = C47425 * C47509;
    const double C47643 = C47471 + C47639;
    const double C47701 = 2 * C47693;
    const double C47699 = ae * C47693;
    const double C47713 = C47425 * C47693;
    const double C47491 = C47486 + C47490;
    const double C47543 = 2 * C47541;
    const double C47629 = C47541 * C47620;
    const double C47680 = be * C47541;
    const double C47757 = C47425 * C47541;
    const double C48004 = C47424 * C47541;
    const double C47749 = be * C47744;
    const double C47803 = 2 * C47744;
    const double C47770 = C47486 + C47768;
    const double C47568 = C47525 + C47567;
    const double C47685 = C47682 * C47575;
    const double C47759 = C47424 * C47682;
    const double C47788 = C47682 * C47620;
    const double C47724 = C47525 + C47719;
    const double C47780 = C47746 * C47620;
    const double C47784 = C47525 + C47781;
    const double C48211 = C48209 * C48204;
    const double C48210 = C48209 / C47210;
    const double C48219 = C48217 * C48209;
    const double C48544 = C48209 * C48205;
    const double C48585 = C48548 * C48209;
    const double C48579 = C48209 * C48541;
    const double C48591 = C48556 * C48242;
    const double C48589 = C48242 * C48553;
    const double C262 = -(C48242 * C48554) / C48237;
    const double C48593 = C48556 * C48276;
    const double C48592 = C48276 * C48557;
    const double C510 = -(C48276 * C48559) / C48237;
    const double C48595 = C48556 * C48293;
    const double C48594 = C48293 * C48558;
    const double C784 = -(C48293 * C48560) / C48237;
    const double C47258 = C47253 / C47210;
    const double C47257 = C47172 * C47253;
    const double C47211 = 2 * C47179;
    const double C47233 = C47179 / C47176;
    const double C1071 = ((0 * ae) / C47174 - C47179 / C47176) / (2 * C47174) +
                         (0 * ae) / C47174;
    const double C3790 =
        ((C48304 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
        C47173 / C47178;
    const double C3791 = (0 * ae) / C47174 - C47179 / C47176;
    const double C7765 = (C48304 * std::pow(C48358, 2)) / C47176 + C48357;
    const double C48360 = C48359 * C48358;
    const double C48365 = C48359 / C47178;
    const double C48565 = C48359 / C47174;
    const double C48562 = C48217 * C48359;
    const double C1070 =
        (((C48304 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
         C47173 / C47178) /
            (2 * C47174) +
        ((C47172 * ((0 * ae) / C47174 - C47179 / C47176) + C48366) * ae) /
            C47174;
    const double C48367 = C48366 * C48358;
    const double C48571 = C48356 * C48366;
    const double C48570 = 2 * C48366;
    const double C48608 = C48366 / C48551;
    const double C8947 = C48366 / C48588;
    const double C25911 = C48366 / C47210;
    const double C48604 = C48567 / C47174;
    const double C7766 = (-2 * C48217 * C48567) / C47174;
    const double C48620 = C48596 / C47176;
    const double C47345 = C47340 / C47210;
    const double C47344 = C47191 * C47340;
    const double C47298 = 2 * C47194;
    const double C47320 = C47194 / C47176;
    const double C2448 = ((0 * ae) / C47174 - C47194 / C47176) / (2 * C47174) +
                         (0 * ae) / C47174;
    const double C4890 =
        ((C48321 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
        C47192 / C47178;
    const double C4891 = (0 * ae) / C47174 - C47194 / C47176;
    const double C149 = C113 * C117;
    const double C147 = C113 * C125;
    const double C145 = C113 * C116;
    const double C289 = C113 * C265;
    const double C413 = C113 * C389;
    const double C1267 = C113 * C580;
    const double C1265 = C113 * C271;
    const double C1263 = C113 * C264;
    const double C1900 = C113 * C682;
    const double C14888 = (C48321 * std::pow(C48400, 2)) / C47176 + C48399;
    const double C48402 = C48401 * C48400;
    const double C48407 = C48401 / C47178;
    const double C48566 = C48401 / C47174;
    const double C48564 = C48217 * C48401;
    const double C2447 =
        (((C48321 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
         C47192 / C47178) /
            (2 * C47174) +
        ((C47191 * ((0 * ae) / C47174 - C47194 / C47176) + C48408) * ae) /
            C47174;
    const double C48409 = C48408 * C48400;
    const double C48577 = C48398 * C48408;
    const double C48576 = 2 * C48408;
    const double C48614 = C48408 / C48551;
    const double C17441 = C48408 / C48588;
    const double C36011 = C48408 / C47210;
    const double C48610 = C48573 / C47174;
    const double C14889 = (-2 * C48217 * C48573) / C47174;
    const double C48622 = C48599 / C47176;
    const double C47262 = C47256 + C47228;
    const double C47349 = C47343 + C47315;
    const double C154 = C48321 * C139;
    const double C292 = C48321 * C283;
    const double C416 = C48321 * C407;
    const double C4899 = C48408 * C407;
    const double C30345 = C48408 * C407;
    const double C47450 = C47443 + C47449;
    const double C47455 = 2 * C47452;
    const double C47582 = C47424 * C47452;
    const double C47599 = C47425 * C47452;
    const double C47576 = C47573 + C47574;
    const double C47596 = C47594 + C47595;
    const double C158 = C48321 * C140;
    const double C296 = C48321 * C284;
    const double C420 = C48321 * C408;
    const double C4907 = C48408 * C408;
    const double C30353 = C48408 * C408;
    const double C1075 = C48321 * C596;
    const double C1455 = C48321 * C698;
    const double C5080 = C48408 * C698;
    const double C30526 = C48408 * C698;
    const double C2460 = C48601 * C949;
    const double C5234 = C48408 * C949;
    const double C14905 = C48601 * C949;
    const double C30680 = C48408 * C949;
    const double C47501 = C47468 + C47500;
    const double C47505 = 2 * C47503;
    const double C47581 = ae * C47503;
    const double C47580 = C47424 * C47503;
    const double C1258 = (2 * (ae * C47498 + C47424 * C47553) +
                          ae * (C47498 + C47503 * std::pow(C47424, 2)) +
                          C47424 * (C47553 + ae * C47424 * C47503 +
                                    C47424 * (ae * C47503 + C47424 * C47452))) /
                         C47176;
    const double C47975 = C47425 * C47503;
    const double C1251 =
        (2 * C47424 * C47498 + C47424 * (C47498 + C47503 * C47575)) / C47174;
    const double C47578 = C47468 + C47577;
    const double C47641 = C47637 + C47638;
    const double C47642 = 2 * C47636;
    const double C47640 = ae * C47636;
    const double C48050 = C47425 * C47636;
    const double C47671 = C47666 + C47667;
    const double C47533 = C47483 + C47532;
    const double C47537 = 2 * C47535;
    const double C47598 = be * C47535;
    const double C47628 = C47425 * C47535;
    const double C1448 =
        (be * C47530 + C47425 * C47553 +
         ae * (C47425 * C47424 * C47503 + C47424 * C47559 * be) +
         C47424 * (ae * (C47425 * C47503 + C47559 * be) +
                   C47424 * (be * C47535 + C47425 * C47452))) /
        C47176;
    const double C47917 = C47424 * C47535;
    const double C1442 =
        (C47425 * (C47530 + C47424 * (C47424 * C47535 + C47559 * ae) +
                   C47424 * C47559 * ae)) /
        C47174;
    const double C2825 =
        (2 * C47425 * C47530 + C47425 * (C47530 + C47535 * C47620)) / C47174;
    const double C47626 = C47483 + C47625;
    const double C47672 = C47668 + C47669;
    const double C47738 = be * C47736;
    const double C47793 = 2 * C47736;
    const double C47997 = C47992 + C47993;
    const double C47562 = C47523 + C47561;
    const double C47566 = 2 * C47564;
    const double C47610 = C47424 * C47564;
    const double C47679 = C47564 * be;
    const double C47787 = C47425 * C47564;
    const double C47920 = C47564 * C47575;
    const double C47978 = C47564 * C47620;
    const double C48005 = C47564 * ae;
    const double C47673 = C47523 + C47670;
    const double C47721 = C47715 + C47716;
    const double C47723 = 2 * C47714;
    const double C47720 = C47714 * be;
    const double C47779 = C47425 * C47714;
    const double C48023 = C47714 * ae;
    const double C48053 = C47714 * C47620;
    const double C47748 = C47743 * be;
    const double C47801 = 2 * C47743;
    const double C47777 = C47523 + C47776;
    const double C48027 = C48021 + C48022;
    const double C47459 = C47448 + C47458;
    const double C47655 = C47424 * C47652;
    const double C47681 = C47425 * C47652;
    const double C47700 = C47694 + C47695;
    const double C47722 = C47717 + C47718;
    const double C47514 = C47474 + C47513;
    const double C47657 = C47653 * C47575;
    const double C47702 = C47474 + C47697;
    const double C47546 = C47489 + C47545;
    const double C47789 = C47760 * C47620;
    const double C47785 = C47489 + C47782;
    const double C1268 = C48321 * C595;
    const double C1903 = C48321 * C697;
    const double C6326 = C48408 * C697;
    const double C31775 = C48408 * C697;
    const double C1741 = C48321 * C1257;
    const double C148 = C48321 * C126;
    const double C152 = C48321 * C128;
    const double C290 = C48321 * C272;
    const double C294 = C48321 * C274;
    const double C414 = C48321 * C396;
    const double C4895 = C48408 * C396;
    const double C30341 = C48408 * C396;
    const double C1266 = C48321 * C585;
    const double C1073 = C48321 * C587;
    const double C1901 = C48321 * C687;
    const double C6322 = C48408 * C687;
    const double C31771 = C48408 * C687;
    const double C1739 = C48321 * C1249;
    const double C151 = C113 * C127;
    const double C155 = C113 * C129;
    const double C291 = C113 * C273;
    const double C415 = C113 * C397;
    const double C419 = C113 * C399;
    const double C1269 = C113 * C586;
    const double C1902 = C113 * C688;
    const double C1907 = C48321 * C1447;
    const double C6919 = C48408 * C1447;
    const double C31783 = C48408 * C1447;
    const double C588 =
        (C47432 * C47528 + C47424 * (C47424 * C47530 + C47856 * ae) +
         C47424 * C47856 * ae) /
        C47174;
    const double C689 =
        (C47425 * C47424 * C47498 + C47424 * C47856 * be) / C47174;
    const double C690 = (C47425 * (C47424 * C47530 + C47856 * ae)) / C47174;
    const double C940 =
        (C47432 * C47496 + C47425 * (C47425 * C47498 + C47856 * be) +
         C47425 * C47856 * be) /
        C47174;
    const double C1252 =
        (2 * (C47424 * C47530 + C47856 * ae) +
         C47424 * (C47530 + C47424 * (C47424 * C47535 + C47559 * ae) +
                   C47424 * C47559 * ae) +
         (C47856 + C47559 * C47575) * ae) /
        C47174;
    const double C1441 = (C47425 * (C47498 + C47503 * C47575) +
                          (C47856 + C47559 * C47575) * be) /
                         C47174;
    const double C2824 =
        (2 * (C47425 * C47498 + C47856 * be) +
         C47425 * (C47498 + C47425 * (C47425 * C47503 + C47559 * be) +
                   C47425 * C47559 * be) +
         (C47856 + C47559 * C47620) * be) /
        C47174;
    const double C581 = C47432 * C47853 + C47856 * C47575;
    const double C683 = C47425 * C47424 * C47856;
    const double C934 = C47432 * C47853 + C47856 * C47620;
    const double C1246 =
        2 * C47424 * C47856 + C47424 * (C47856 + C47559 * C47575);
    const double C1436 = C47425 * (C47856 + C47559 * C47575);
    const double C2311 = C47424 * C47856 + C47919 * C47620;
    const double C2819 =
        2 * C47425 * C47856 + C47425 * (C47856 + C47559 * C47620);
    const double C119 = 3 * (C47853 + C47557 * C47440) +
                        C47432 * (2 * C47856 + C47432 * C47860);
    const double C267 = C47424 * (2 * C47856 + C47432 * C47860);
    const double C391 = C47425 * (2 * C47856 + C47432 * C47860);
    const double C582 = C47853 + C47557 * C47440 + C47860 * C47575;
    const double C684 = C47425 * C47424 * C47860;
    const double C935 = C47853 + C47557 * C47440 + C47860 * C47620;
    const double C2315 =
        (C47424 * C47496 + C47425 * (C47425 * C47572 + C47911 * be) +
         C47425 * C47911 * be) /
        C47174;
    const double C3263 =
        (2 * (C47425 * C47572 + C47911 * be) +
         C47425 * (C47572 + C47425 * (C47425 * C47636 + C47607 * be) +
                   C47425 * C47607 * be) +
         (C47911 + C47607 * C47620) * be) /
        C47174;
    const double C2309 = C47424 * C47853 + C47911 * C47620;
    const double C3260 =
        2 * C47425 * C47911 + C47425 * (C47911 + C47607 * C47620);
    const double C47913 = C47909 + C47910;
    const double C1723 = 3 * (C47853 + C47557 * C47575) +
                         C47424 * (2 * C47911 + C47424 * C47914);
    const double C1887 = C47425 * (2 * C47911 + C47424 * C47914);
    const double C2310 = C47853 + C47557 * C47575 + C47914 * C47620;
    const double C47971 = C47967 + C47968;
    const double C3674 = 3 * (C47853 + C47557 * C47620) +
                         C47425 * (2 * C47969 + C47425 * C47972);
    const double C295 = C113 * C275;
    const double C418 = C48321 * C398;
    const double C4903 = C48408 * C398;
    const double C30349 = C48408 * C398;
    const double C1740 = C113 * C1250;
    const double C1905 = C48321 * C1439;
    const double C6915 = C48408 * C1439;
    const double C31779 = C48408 * C1439;
    const double C1906 = C113 * C1440;
    const double C153 = C113 * C118;
    const double C293 = C113 * C266;
    const double C417 = C113 * C390;
    const double C1738 = C113 * C1245;
    const double C1904 = C113 * C1435;
    const double C47504 = C47432 * C47476;
    const double C47508 = 3 * C47476;
    const double C47588 = ae * C47476;
    const double C47587 = C47424 * C47476;
    const double C47983 = C47425 * C47476;
    const double C47585 = C47503 + C47583;
    const double C47656 = 2 * C47650;
    const double C47654 = ae * C47650;
    const double C48066 = C47425 * C47650;
    const double C47646 = C47424 * C47643;
    const double C47696 = 3 * C47643;
    const double C47692 = ae * C47643;
    const double C48058 = C47425 * C47643;
    const double C47703 = C47448 + C47699;
    const double C47536 = C47432 * C47491;
    const double C47540 = 3 * C47491;
    const double C47602 = be * C47491;
    const double C47632 = C47425 * C47491;
    const double C47925 = C47424 * C47491;
    const double C47630 = C47535 + C47629;
    const double C47761 = be * C47757;
    const double C47797 = 2 * C47757;
    const double C47751 = C47448 + C47749;
    const double C47771 = be * C47770;
    const double C47794 = C47425 * C47770;
    const double C47808 = 3 * C47770;
    const double C47569 = C47432 * C47568;
    const double C47613 = C47424 * C47568;
    const double C47928 = C47568 * C47575;
    const double C47986 = C47568 * C47620;
    const double C47688 = C47564 + C47685;
    const double C48069 = C47759 * C47620;
    const double C47790 = C47564 + C47788;
    const double C47728 = C47424 * C47724;
    const double C48061 = C47724 * C47620;
    const double C47783 = C47714 + C47780;
    const double C47802 = C47425 * C47784;
    const double C48212 = C48211 * C48205;
    const double C48218 = C48211 / C47178;
    const double C48545 = C48217 * C48211;
    const double C48543 = C48211 / C47174;
    const double C1066 = (C48209 * std::pow(C48205, 2)) / C47176 + C48210;
    const double C48220 = C48219 * C48205;
    const double C48549 = C48204 * C48219;
    const double C48547 = 2 * C48219;
    const double C48602 = C48219 / C48551;
    const double C107 = C48219 / C48588;
    const double C25914 = C48219 / C47210;
    const double C48581 = C48544 / C47174;
    const double C1067 = (-2 * C48217 * C48544) / C47174;
    const double C48615 = C48579 / C47176;
    const double C112 = C48591 / C48247;
    const double C110 = C48242 / C48247 - (C48589 * C48554) / C48555;
    const double C111 = C48589 / C48590 - (C48591 * C48554) / C48237;
    const double C512 = C48589 / C48237;
    const double C578 = C48593 / C48247;
    const double C260 = C48592 / C48237;
    const double C576 = C48276 / C48247 - (C48592 * C48559) / C48555;
    const double C577 = C48592 / C48590 - (C48593 * C48559) / C48237;
    const double C932 = C48595 / C48247;
    const double C386 = C48594 / C48237;
    const double C930 = C48293 / C48247 - (C48594 * C48560) / C48555;
    const double C931 = C48594 / C48590 - (C48595 * C48560) / C48237;
    const double C47263 = C47257 + 0;
    const double C47230 = C47172 * C47211;
    const double C7772 =
        ((-C47173 / C47174) / C47210 -
         ((C48304 - (C47172 * C47211) / C47174) * be) / C47174) /
            C47210 -
        ((C47172 * ((-C47211 / C47174) / C47210 - (0 * be) / C47174) + C48366) *
         be) /
            C47174;
    const double C7773 =
        ((-C47211 / C47174) / C47210 - (0 * be) / C47174) / C47210 -
        (0 * be) / C47174;
    const double C22090 = (-C47211 / C47174) / C47210 - (0 * be) / C47174;
    const double C47243 = C47239 - C47233;
    const double C48361 = C48360 / C47176;
    const double C1069 =
        (((0 - (C47172 * C47173) / C47174) * ae) / C47174 - (0 * be) / C47178) /
            (2 * C47174) +
        ((C47172 * (((C48304 - (C47172 * 2 * C47179) / C47174) * ae) / C47174 -
                    C47173 / C47178) +
          C48565) *
         ae) /
            C47174 +
        (0 * ae) / C47174 - C47179 / C47176;
    const double C48597 = 2 * C48562;
    const double C48368 = C48367 / C47174;
    const double C48607 = C48571 / C47178;
    const double C48624 = C48565 - C48604;
    const double C22083 = -C48604;
    const double C48633 = C48620 + C48357;
    const double C47350 = C47344 + 0;
    const double C47317 = C47191 * C47298;
    const double C14892 =
        ((-C47192 / C47174) / C47210 -
         ((C48321 - (C47191 * C47298) / C47174) * be) / C47174) /
            C47210 -
        ((C47191 * ((-C47298 / C47174) / C47210 - (0 * be) / C47174) + C48408) *
         be) /
            C47174;
    const double C14893 =
        ((-C47298 / C47174) / C47210 - (0 * be) / C47174) / C47210 -
        (0 * be) / C47174;
    const double C30337 = (-C47298 / C47174) / C47210 - (0 * be) / C47174;
    const double C47330 = C47326 - C47320;
    const double C2461 = C2448 * C941;
    const double C4914 = C4890 * C129;
    const double C4910 = C4890 * C118;
    const double C4906 = C4890 * C127;
    const double C4902 = C4890 * C117;
    const double C4898 = C4890 * C125;
    const double C4894 = C4890 * C116;
    const double C5085 = C4890 * C275;
    const double C5081 = C4890 * C266;
    const double C5077 = C4890 * C273;
    const double C5073 = C4890 * C265;
    const double C5239 = C4890 * C399;
    const double C5235 = C4890 * C390;
    const double C5231 = C4890 * C397;
    const double C5227 = C4890 * C389;
    const double C6325 = C4890 * C271;
    const double C6321 = C4890 * C264;
    const double C6916 = C4890 * C586;
    const double C6912 = C4890 * C580;
    const double C7118 = C4890 * C688;
    const double C7114 = C4890 * C682;
    const double C12941 = C4890 * C1250;
    const double C12937 = C4890 * C1245;
    const double C13145 = C4890 * C1440;
    const double C13141 = C4890 * C1435;
    const double C4908 = C4891 * C399;
    const double C4904 = C4891 * C390;
    const double C4900 = C4891 * C397;
    const double C4896 = C4891 * C389;
    const double C5233 = C4891 * C941;
    const double C6327 = C4891 * C688;
    const double C6323 = C4891 * C682;
    const double C6918 = C4891 * C1440;
    const double C6914 = C4891 * C1435;
    const double C14926 = C14888 * C139;
    const double C14920 = C14888 * C128;
    const double C14913 = C14888 * C138;
    const double C14907 = C14888 * C126;
    const double C14901 = C14888 * C137;
    const double C14895 = C14888 * C124;
    const double C15109 = C14888 * C284;
    const double C15103 = C14888 * C274;
    const double C15097 = C14888 * C283;
    const double C15091 = C14888 * C272;
    const double C15279 = C14888 * C408;
    const double C15273 = C14888 * C398;
    const double C15267 = C14888 * C407;
    const double C15261 = C14888 * C396;
    const double C16375 = C14888 * C596;
    const double C16369 = C14888 * C587;
    const double C16362 = C14888 * C595;
    const double C16356 = C14888 * C585;
    const double C16350 = C14888 * C282;
    const double C16344 = C14888 * C270;
    const double C16795 = C14888 * C1257;
    const double C16789 = C14888 * C1249;
    const double C16969 = C14888 * C1447;
    const double C16963 = C14888 * C1439;
    const double C16957 = C14888 * C697;
    const double C16951 = C14888 * C687;
    const double C18645 = C14888 * C698;
    const double C48403 = C48402 / C47176;
    const double C4922 = C48566 * C140;
    const double C4913 = C48566 * C139;
    const double C4909 = C48566 * C128;
    const double C4905 = C48566 * C138;
    const double C4901 = C48566 * C126;
    const double C4897 = C48566 * C137;
    const double C4893 = C48566 * C124;
    const double C5086 = C48566 * C284;
    const double C5082 = C48566 * C274;
    const double C5078 = C48566 * C283;
    const double C5074 = C48566 * C272;
    const double C5240 = C48566 * C408;
    const double C5236 = C48566 * C398;
    const double C5232 = C48566 * C407;
    const double C5228 = C48566 * C396;
    const double C6341 = C48566 * C596;
    const double C6337 = C48566 * C587;
    const double C6324 = C48566 * C282;
    const double C6320 = C48566 * C270;
    const double C6561 = C48566 * C698;
    const double C6917 = C48566 * C595;
    const double C6913 = C48566 * C585;
    const double C7119 = C48566 * C697;
    const double C7115 = C48566 * C687;
    const double C12942 = C48566 * C1257;
    const double C12938 = C48566 * C1249;
    const double C13146 = C48566 * C1447;
    const double C13142 = C48566 * C1439;
    const double C2446 =
        (((0 - (C47191 * C47192) / C47174) * ae) / C47174 - (0 * be) / C47178) /
            (2 * C47174) +
        ((C47191 * (((C48321 - (C47191 * 2 * C47194) / C47174) * ae) / C47174 -
                    C47192 / C47178) +
          C48566) *
         ae) /
            C47174 +
        (0 * ae) / C47174 - C47194 / C47176;
    const double C48600 = 2 * C48564;
    const double C2471 = C2447 * C399;
    const double C2465 = C2447 * C390;
    const double C2459 = C2447 * C397;
    const double C2453 = C2447 * C389;
    const double C2843 = C2447 * C941;
    const double C9908 = C2447 * C1440;
    const double C9902 = C2447 * C1435;
    const double C9896 = C2447 * C688;
    const double C9890 = C2447 * C682;
    const double C48410 = C48409 / C47174;
    const double C48613 = C48577 / C47178;
    const double C36026 = C36011 * C949;
    const double C48627 = C48566 - C48610;
    const double C30334 = -C48610;
    const double C14915 = C14889 * C408;
    const double C14909 = C14889 * C398;
    const double C14903 = C14889 * C407;
    const double C14897 = C14889 * C396;
    const double C15099 = C14889 * C698;
    const double C15269 = C14889 * C949;
    const double C16364 = C14889 * C1447;
    const double C16358 = C14889 * C1439;
    const double C16352 = C14889 * C697;
    const double C16346 = C14889 * C687;
    const double C48634 = C48622 + C48399;
    const double C47266 = C47262 / C47210;
    const double C47353 = C47349 / C47210;
    const double C141 =
        (4 * (2 * C47432 * C47443 + C47432 * C47450) +
         C47432 * (3 * C47450 +
                   C47432 * (2 * C47432 * C47448 +
                             C47432 * (C47448 + std::pow(C47438, 7) * bs[7] *
                                                    C47430 * C47440)))) /
        C47176;
    const double C285 =
        (ae * (2 * C47432 * C47468 +
               C47432 * (C47468 + C47441 * C47439 * C47465 * C47440)) +
         C47424 * (2 * C47432 * C47443 + C47432 * C47450)) /
        C47176;
    const double C409 =
        (be * (2 * C47432 * C47483 +
               C47432 * (C47483 + C47441 * C47439 * C47480 * C47440)) +
         C47425 * (2 * C47432 * C47443 + C47432 * C47450)) /
        C47176;
    const double C2327 =
        (ae * (C47496 + C47425 * (C47425 * C47468 + C47557 * be) +
               C47425 * C47557 * be) +
         C47424 * (C47436 + be * C47425 * C47483 + C47425 * C47596)) /
        C47176;
    const double C2328 =
        (C47436 + be * C47425 * C47483 + C47425 * C47596 +
         ae * (C47572 + C47425 * (C47425 * C47424 * C47471 + C47607 * be) +
               C47425 * C47607 * be) +
         C47424 * (ae * (C47468 + C47425 * (C47425 * C47471 + C47523 * be) +
                         C47425 * C47523 * be) +
                   C47424 * (C47443 + be * C47425 * C47486 +
                             C47425 * (be * C47486 + C47425 * C47448)))) /
        C47176;
    const double C2830 =
        (2 * (be * C47528 + C47425 * C47436) +
         be * (C47528 + C47483 * std::pow(C47425, 2)) +
         C47425 * (C47436 + be * C47425 * C47483 + C47425 * C47596)) /
        C47176;
    const double C3269 =
        (ae * (2 * (C47425 * C47468 + C47557 * be) +
               C47425 * (C47468 + C47425 * (C47425 * C47471 + C47523 * be) +
                         C47425 * C47523 * be) +
               (C47557 + C47523 * C47620) * be) +
         C47424 * (2 * C47596 + be * (C47483 + C47486 * C47620) +
                   C47425 * (C47443 + be * C47425 * C47486 +
                             C47425 * (be * C47486 + C47425 * C47448)))) /
        C47176;
    const double C597 = (C47436 + C47443 * C47440 + ae * C47424 * C47501 +
                         C47424 * (ae * C47501 + C47424 * C47450)) /
                        C47176;
    const double C699 =
        (ae * (C47425 * C47501 +
               (C47494 * C47493 + C47434 * C47433 * C47440) * be) +
         C47424 * (be * (C47483 + C47486 * C47440) + C47425 * C47450)) /
        C47176;
    const double C130 = (3 * (C47496 + C47468 * C47440) +
                         C47432 * (2 * C47498 + C47432 * C47501)) /
                        C47174;
    const double C276 = (C47424 * (2 * C47498 + C47432 * C47501)) / C47174;
    const double C400 =
        (C47425 * (2 * C47498 + C47432 * C47501) +
         (2 * C47432 * C47557 + C47432 * (C47557 + C47523 * C47440)) * be) /
        C47174;
    const double C589 = (C47496 + C47468 * C47440 + C47501 * C47575) / C47174;
    const double C691 =
        (C47425 * C47424 * C47501 + C47424 * C47860 * be) / C47174;
    const double C942 =
        (C47496 + C47468 * C47440 + C47425 * (C47425 * C47501 + C47860 * be) +
         C47425 * C47860 * be) /
        C47174;
    const double C1253 =
        (2 * C47424 * C47501 + C47424 * (C47501 + C47476 * C47575)) / C47174;
    const double C47584 = C47581 + C47582;
    const double C2319 =
        (C47424 * C47498 + C47425 * (C47425 * C47580 + C47919 * be) +
         C47425 * C47919 * be) /
        C47174;
    const double C1281 = C48321 * C1258;
    const double C12384 = C48566 * C1258;
    const double C47979 = C47975 + C47976;
    const double C1279 = C48321 * C1251;
    const double C12380 = C48566 * C1251;
    const double C1732 =
        (3 * (C47436 + ae * C47572 + C47424 * C47576) +
         ae * (2 * C47572 + C47424 * C47578) +
         C47424 * (2 * C47576 + ae * C47578 +
                   C47424 * (C47443 + ae * C47424 * C47471 +
                             C47424 * (ae * C47471 + C47424 * C47448)))) /
        C47176;
    const double C1896 =
        (2 * (ae * (C47425 * C47468 + C47557 * be) + C47424 * C47596) +
         ae * (C47425 * C47578 + (C47557 + C47523 * C47575) * be) +
         C47424 *
             (C47596 + ae * (C47425 * C47424 * C47471 + C47424 * C47523 * be) +
              C47424 * (ae * (C47425 * C47471 + C47523 * be) +
                        C47424 * (be * C47486 + C47425 * C47448)))) /
        C47176;
    const double C1726 = (3 * (C47496 + C47468 * C47575) +
                          C47424 * (2 * C47572 + C47424 * C47578)) /
                         C47174;
    const double C1890 = (C47425 * (2 * C47572 + C47424 * C47578) +
                          (2 * C47911 + C47424 * C47914) * be) /
                         C47174;
    const double C2317 =
        (C47496 + C47468 * C47575 + C47425 * (C47425 * C47578 + C47914 * be) +
         C47425 * C47914 * be) /
        C47174;
    const double C47645 = C47424 * C47641;
    const double C47691 = 2 * C47641;
    const double C47644 = C47443 + C47640;
    const double C48054 = C48050 + C48051;
    const double C47674 = ae * C47671;
    const double C48074 = C47425 * C47671;
    const double C48103 = 2 * C47671;
    const double C950 = (C47436 + C47443 * C47440 + be * C47425 * C47533 +
                         C47425 * (be * C47533 + C47425 * C47450)) /
                        C47176;
    const double C131 = (3 * (C47528 + C47483 * C47440) +
                         C47432 * (2 * C47530 + C47432 * C47533)) /
                        C47174;
    const double C277 =
        (C47424 * (2 * C47530 + C47432 * C47533) +
         (2 * C47432 * C47557 + C47432 * (C47557 + C47523 * C47440)) * ae) /
        C47174;
    const double C401 = (C47425 * (2 * C47530 + C47432 * C47533)) / C47174;
    const double C590 =
        (C47528 + C47483 * C47440 + C47424 * (C47424 * C47533 + C47860 * ae) +
         C47424 * C47860 * ae) /
        C47174;
    const double C692 = (C47425 * (C47424 * C47533 + C47860 * ae)) / C47174;
    const double C943 = (C47528 + C47483 * C47440 + C47533 * C47620) / C47174;
    const double C2827 =
        (2 * C47425 * C47533 + C47425 * (C47533 + C47491 * C47620)) / C47174;
    const double C47600 = C47598 + C47599;
    const double C1459 = C48321 * C1448;
    const double C6343 = C48408 * C1448;
    const double C12590 = C48566 * C1448;
    const double C16377 = C14889 * C1448;
    const double C31565 = C48408 * C1448;
    const double C47921 = C47917 + C47918;
    const double C1458 = C113 * C1442;
    const double C6342 = C4891 * C1442;
    const double C9919 = C2447 * C1442;
    const double C12589 = C4890 * C1442;
    const double C2845 = C2448 * C2825;
    const double C3683 =
        (3 * (C47436 + be * C47624 + C47425 * C47596) +
         be * (2 * C47624 + C47425 * C47626) +
         C47425 * (2 * C47596 + be * C47626 +
                   C47425 * (C47443 + be * C47425 * C47486 +
                             C47425 * (be * C47486 + C47425 * C47448)))) /
        C47176;
    const double C3678 = (3 * (C47528 + C47483 * C47620) +
                          C47425 * (2 * C47624 + C47425 * C47626)) /
                         C47174;
    const double C47675 = C47424 * C47672;
    const double C47737 = C47425 * C47672;
    const double C47767 = 2 * C47672;
    const double C47739 = C47443 + C47738;
    const double C47999 = C47424 * C47997;
    const double C48020 = 2 * C47997;
    const double C47864 = C47432 * C47562;
    const double C47868 = 3 * C47562;
    const double C47927 = C47424 * C47562;
    const double C47926 = C47562 * ae;
    const double C47985 = C47425 * C47562;
    const double C47984 = C47562 * be;
    const double C1254 =
        (2 * (C47424 * C47533 + C47860 * ae) +
         C47424 * (C47533 + C47424 * (C47424 * C47491 + C47562 * ae) +
                   C47424 * C47562 * ae) +
         (C47860 + C47562 * C47575) * ae) /
        C47174;
    const double C1443 = (C47425 * (C47501 + C47476 * C47575) +
                          (C47860 + C47562 * C47575) * be) /
                         C47174;
    const double C1444 =
        (C47425 * (C47533 + C47424 * (C47424 * C47491 + C47562 * ae) +
                   C47424 * C47562 * ae)) /
        C47174;
    const double C2826 =
        (2 * (C47425 * C47501 + C47860 * be) +
         C47425 * (C47501 + C47425 * (C47425 * C47476 + C47562 * be) +
                   C47425 * C47562 * be) +
         (C47860 + C47562 * C47620) * be) /
        C47174;
    const double C1247 =
        2 * C47424 * C47860 + C47424 * (C47860 + C47562 * C47575);
    const double C1437 = C47425 * (C47860 + C47562 * C47575);
    const double C2820 =
        2 * C47425 * C47860 + C47425 * (C47860 + C47562 * C47620);
    const double C48007 = 2 * C47610;
    const double C48006 = C47610 * ae;
    const double C48068 = C47425 * C47610;
    const double C48067 = C47610 * be;
    const double C3265 =
        (2 * (C47425 * C47580 + C47919 * be) +
         C47425 * (C47580 + C47425 * (C47425 * C47650 + C47610 * be) +
                   C47425 * C47610 * be) +
         (C47919 + C47610 * C47620) * be) /
        C47174;
    const double C3261 =
        2 * C47425 * C47919 + C47425 * (C47919 + C47610 * C47620);
    const double C47683 = C47678 + C47679;
    const double C48085 = 2 * C47787;
    const double C48084 = C47787 * be;
    const double C47922 = C47559 + C47920;
    const double C47980 = C47559 + C47978;
    const double C48009 = C48004 + C48005;
    const double C47996 = C47424 * C47673;
    const double C48025 = 3 * C47673;
    const double C48024 = C47673 * ae;
    const double C48060 = C47425 * C47673;
    const double C48059 = C47673 * be;
    const double C10070 =
        (2 * (C47425 * C47578 + C47914 * be) +
         C47425 * (C47578 + C47425 * (C47425 * C47643 + C47673 * be) +
                   C47425 * C47673 * be) +
         (C47914 + C47673 * C47620) * be) /
        C47174;
    const double C10068 =
        2 * C47425 * C47914 + C47425 * (C47914 + C47673 * C47620);
    const double C47726 = ae * C47721;
    const double C47742 = C47425 * C47721;
    const double C47725 = C47713 + C47720;
    const double C48094 = 2 * C47779;
    const double C48093 = C47779 * be;
    const double C48055 = C47607 + C48053;
    const double C48077 = C47425 * C47777;
    const double C48106 = 3 * C47777;
    const double C48105 = C47777 * be;
    const double C48029 = C47424 * C48027;
    const double C48100 = C48027 * C47620;
    const double C47460 = C47432 * C47459;
    const double C47589 = C47424 * C47459;
    const double C47603 = C47425 * C47459;
    const double C1259 = (2 * (ae * C47501 + C47424 * C47450) +
                          ae * (C47501 + C47476 * std::pow(C47424, 2)) +
                          C47424 * (C47450 + ae * C47424 * C47476 +
                                    C47424 * (ae * C47476 + C47424 * C47459))) /
                         C47176;
    const double C1449 =
        (be * C47533 + C47425 * C47450 +
         ae * (C47425 * C47424 * C47476 + C47424 * C47562 * be) +
         C47424 * (ae * (C47425 * C47476 + C47562 * be) +
                   C47424 * (be * C47491 + C47425 * C47459))) /
        C47176;
    const double C47659 = C47651 + C47655;
    const double C47684 = C47680 + C47681;
    const double C47704 = C47424 * C47700;
    const double C47727 = C47424 * C47722;
    const double C47745 = C47425 * C47722;
    const double C47515 = C47432 * C47514;
    const double C47590 = C47514 * C47575;
    const double C47660 = C47509 + C47657;
    const double C47705 = C47424 * C47702;
    const double C47547 = C47432 * C47546;
    const double C47633 = C47546 * C47620;
    const double C47791 = C47541 + C47789;
    const double C47804 = C47425 * C47785;
    const double C164 = C148 - C149;
    const double C1274 = C289 - C290;
    const double C1270 = C290 - C289;
    const double C1736 = C1266 - C1267;
    const double C165 = C150 - C151;
    const double C167 = C154 - C155;
    const double C1275 = C291 - C292;
    const double C1271 = C292 - C291;
    const double C1737 = C1268 - C1269;
    const double C1076 = C113 * C588;
    const double C6340 = C4890 * C588;
    const double C1453 = C48321 * C689;
    const double C5076 = C48408 * C689;
    const double C6557 = C48566 * C689;
    const double C15093 = C14889 * C689;
    const double C18639 = C14888 * C689;
    const double C30522 = C48408 * C689;
    const double C1454 = C113 * C690;
    const double C2657 = C2447 * C690;
    const double C5079 = C4891 * C690;
    const double C6560 = C4890 * C690;
    const double C2454 = C48601 * C940;
    const double C5230 = C48408 * C940;
    const double C14899 = C48601 * C940;
    const double C15263 = C14889 * C940;
    const double C30676 = C48408 * C940;
    const double C36020 = C36011 * C940;
    const double C1280 = C113 * C1252;
    const double C12383 = C4890 * C1252;
    const double C1457 = C48321 * C1441;
    const double C6339 = C48408 * C1441;
    const double C12586 = C48566 * C1441;
    const double C16371 = C14889 * C1441;
    const double C31561 = C48408 * C1441;
    const double C2840 = C48601 * C2824;
    const double C15265 = C48601 * C2824;
    const double C19830 = C48614 * C2824;
    const double C33237 = C48614 * C2824;
    const double C36386 = C36011 * C2824;
    const double C1074 = C113 * C581;
    const double C6336 = C4890 * C581;
    const double C1452 = C113 * C683;
    const double C2651 = C2447 * C683;
    const double C5075 = C4891 * C683;
    const double C6556 = C4890 * C683;
    const double C2455 = C2448 * C934;
    const double C2837 = C2447 * C934;
    const double C5229 = C4891 * C934;
    const double C1278 = C113 * C1246;
    const double C12379 = C4890 * C1246;
    const double C1456 = C113 * C1436;
    const double C6338 = C4891 * C1436;
    const double C9913 = C2447 * C1436;
    const double C12585 = C4890 * C1436;
    const double C2653 = C2448 * C2311;
    const double C6558 = C4891 * C2311;
    const double C24722 = C2447 * C2311;
    const double C2839 = C2448 * C2819;
    const double C157 = C113 * C119;
    const double C4917 = C4890 * C119;
    const double C297 = C113 * C267;
    const double C5089 = C4890 * C267;
    const double C421 = C113 * C391;
    const double C2476 = C2447 * C391;
    const double C4912 = C4891 * C391;
    const double C5243 = C4890 * C391;
    const double C1082 = C113 * C582;
    const double C6348 = C4890 * C582;
    const double C1460 = C113 * C684;
    const double C2663 = C2447 * C684;
    const double C5083 = C4891 * C684;
    const double C6564 = C4890 * C684;
    const double C2467 = C2448 * C935;
    const double C2849 = C2447 * C935;
    const double C5237 = C4891 * C935;
    const double C7117 = C48408 * C2315;
    const double C9891 = C48601 * C2315;
    const double C16348 = C48601 * C2315;
    const double C16953 = C14889 * C2315;
    const double C32578 = C48408 * C2315;
    const double C37553 = C36011 * C2315;
    const double C10510 = C48601 * C3263;
    const double C16955 = C48601 * C3263;
    const double C21098 = C48614 * C3263;
    const double C38350 = C36011 * C3263;
    const double C41830 = C48614 * C3263;
    const double C7116 = C4891 * C2309;
    const double C9892 = C2448 * C2309;
    const double C10507 = C2447 * C2309;
    const double C10509 = C2448 * C3260;
    const double C1727 =
        (3 * (C47528 + C47424 * C47913 + C47911 * ae) +
         C47424 * (2 * C47913 +
                   C47424 * (C47483 + C47424 * (C47424 * C47486 + C47523 * ae) +
                             C47607 * ae) +
                   C47914 * ae) +
         (2 * C47911 + C47424 * C47914) * ae) /
        C47174;
    const double C1891 =
        (C47425 * (2 * C47913 +
                   C47424 * (C47483 + C47424 * (C47424 * C47486 + C47523 * ae) +
                             C47607 * ae) +
                   C47914 * ae)) /
        C47174;
    const double C2316 =
        (C47424 * C47528 + C47853 * ae + C47913 * C47620) / C47174;
    const double C2318 =
        (C47528 + C47424 * C47913 + C47911 * ae +
         (C47483 + C47424 * (C47424 * C47486 + C47523 * ae) + C47607 * ae) *
             C47620) /
        C47174;
    const double C3264 =
        (2 * C47425 * C47913 +
         C47425 * (C47913 + (C47424 * C47486 + C47523 * ae) * C47620)) /
        C47174;
    const double C10933 =
        (3 * (C47913 + C47997 * C47620) +
         C47425 * (2 * C47425 * C47997 + C47425 * (C47997 + C48027 * C47620))) /
        C47174;
    const double C9046 = C113 * C1723;
    const double C14273 = C4890 * C1723;
    const double C9385 = C113 * C1887;
    const double C10341 = C2447 * C1887;
    const double C12939 = C4891 * C1887;
    const double C14413 = C4890 * C1887;
    const double C9904 = C2448 * C2310;
    const double C10519 = C2447 * C2310;
    const double C13143 = C4891 * C2310;
    const double C3677 =
        (3 * (C47496 + C47425 * C47971 + C47969 * be) +
         C47425 *
             (2 * C47971 + C47425 * (C47468 + C47425 * C47671 + C47775 * be) +
              C47972 * be) +
         (2 * C47969 + C47425 * C47972) * be) /
        C47174;
    const double C1080 = C296 - C295;
    const double C1283 = C295 - C296;
    const double C9292 = C1741 - C1740;
    const double C166 = C152 - C153;
    const double C1079 = C294 - C293;
    const double C1282 = C293 - C294;
    const double C9291 = C1739 - C1738;
    const double C47506 = C47505 + C47504;
    const double C1728 = (3 * (C47498 + C47503 * C47575) +
                          C47424 * (2 * C47580 + C47424 * C47585)) /
                         C47174;
    const double C47658 = C47452 + C47654;
    const double C47648 = C47642 + C47646;
    const double C47538 = C47537 + C47536;
    const double C3680 = (3 * (C47530 + C47535 * C47620) +
                          C47425 * (2 * C47628 + C47425 * C47630)) /
                         C47174;
    const double C47762 = C47452 + C47761;
    const double C47795 = C47793 + C47794;
    const double C47570 = C47566 + C47569;
    const double C47930 = C47562 + C47928;
    const double C47988 = C47562 + C47986;
    const double C48008 = C47424 * C47688;
    const double C48071 = C47610 + C48069;
    const double C48086 = C47425 * C47790;
    const double C47731 = C47723 + C47728;
    const double C48063 = C47673 + C48061;
    const double C48095 = C47425 * C47783;
    const double C47805 = C47801 + C47802;
    const double C48213 = C48212 / C47176;
    const double C48582 = 2 * C48545;
    const double C48221 = C48220 / C47174;
    const double C48586 = C48549 / C47178;
    const double C48616 = C48543 - C48581;
    const double C23183 = -C48581;
    const double C48630 = C48615 + C48210;
    const double C47267 = C47263 * be;
    const double C47238 = C47230 / C47174;
    const double C47247 = C47172 * C47243;
    const double C47276 = C47243 / C47210;
    const double C48362 = C48357 - C48361;
    const double C48621 = C48597 / C47174;
    const double C48369 = C48365 - C48368;
    const double C48635 = C48624 / C47210;
    const double C7771 =
        ((-(0 * be) / C47174) / C47210 -
         ((0 - (C47172 * C47173) / C47174) * be) / C47174) /
            C47210 -
        ((C47172 * ((-C47173 / C47174) / C47210 -
                    ((C48304 - (C47172 * C47211) / C47174) * be) / C47174) +
          C22083) *
         be) /
            C47174 +
        (-C47211 / C47174) / C47210 - (0 * be) / C47174;
    const double C47354 = C47350 * be;
    const double C47325 = C47317 / C47174;
    const double C14921 = C14892 * C391;
    const double C14916 = C14892 * C399;
    const double C14910 = C14892 * C390;
    const double C14904 = C14892 * C397;
    const double C14898 = C14892 * C389;
    const double C15104 = C14892 * C684;
    const double C15098 = C14892 * C690;
    const double C15092 = C14892 * C683;
    const double C15274 = C14892 * C935;
    const double C15268 = C14892 * C941;
    const double C15262 = C14892 * C934;
    const double C16376 = C14892 * C1442;
    const double C16370 = C14892 * C1436;
    const double C16365 = C14892 * C1440;
    const double C16359 = C14892 * C1435;
    const double C16353 = C14892 * C688;
    const double C16347 = C14892 * C682;
    const double C16790 = C14892 * C1887;
    const double C16964 = C14892 * C2310;
    const double C16952 = C14892 * C2309;
    const double C18640 = C14892 * C2311;
    const double C14912 = C14893 * C935;
    const double C14906 = C14893 * C941;
    const double C14900 = C14893 * C934;
    const double C15094 = C14893 * C2311;
    const double C15270 = C14893 * C2825;
    const double C15264 = C14893 * C2819;
    const double C16361 = C14893 * C2310;
    const double C16349 = C14893 * C2309;
    const double C16954 = C14893 * C3260;
    const double C30358 = C30337 * C391;
    const double C30354 = C30337 * C399;
    const double C30350 = C30337 * C390;
    const double C30346 = C30337 * C397;
    const double C30342 = C30337 * C389;
    const double C30529 = C30337 * C684;
    const double C30525 = C30337 * C690;
    const double C30521 = C30337 * C683;
    const double C30683 = C30337 * C935;
    const double C30679 = C30337 * C941;
    const double C30675 = C30337 * C934;
    const double C31566 = C30337 * C1442;
    const double C31562 = C30337 * C1436;
    const double C31784 = C30337 * C1440;
    const double C31780 = C30337 * C1435;
    const double C31776 = C30337 * C688;
    const double C31772 = C30337 * C682;
    const double C32013 = C30337 * C2311;
    const double C32373 = C30337 * C1887;
    const double C32585 = C30337 * C2310;
    const double C32577 = C30337 * C2309;
    const double C47334 = C47191 * C47330;
    const double C47363 = C47330 / C47210;
    const double C4928 = C4907 - C4908;
    const double C4926 = C4903 - C4904;
    const double C12936 = C6919 - C6918;
    const double C12934 = C6915 - C6914;
    const double C48404 = C48399 - C48403;
    const double C4931 = C4913 - C4914;
    const double C4929 = C4909 - C4910;
    const double C4927 = C4905 - C4906;
    const double C4925 = C4901 - C4902;
    const double C6117 = C5086 - C5085;
    const double C6346 = C5085 - C5086;
    const double C6115 = C5082 - C5081;
    const double C6344 = C5081 - C5082;
    const double C6334 = C5077 - C5078;
    const double C6330 = C5078 - C5077;
    const double C6332 = C5073 - C5074;
    const double C6328 = C5074 - C5073;
    const double C12935 = C6917 - C6916;
    const double C12933 = C6913 - C6912;
    const double C14271 = C12942 - C12941;
    const double C14269 = C12938 - C12937;
    const double C2480 = C2446 * C129;
    const double C2474 = C2446 * C118;
    const double C2469 = C2446 * C127;
    const double C2463 = C2446 * C117;
    const double C2457 = C2446 * C125;
    const double C2451 = C2446 * C116;
    const double C2667 = C2446 * C275;
    const double C2661 = C2446 * C266;
    const double C2655 = C2446 * C273;
    const double C2649 = C2446 * C265;
    const double C2853 = C2446 * C399;
    const double C2847 = C2446 * C390;
    const double C2841 = C2446 * C397;
    const double C2835 = C2446 * C389;
    const double C9917 = C2446 * C588;
    const double C9911 = C2446 * C581;
    const double C9906 = C2446 * C586;
    const double C9900 = C2446 * C580;
    const double C9894 = C2446 * C271;
    const double C9888 = C2446 * C264;
    const double C10345 = C2446 * C1250;
    const double C10339 = C2446 * C1245;
    const double C10523 = C2446 * C1440;
    const double C10517 = C2446 * C1435;
    const double C10511 = C2446 * C688;
    const double C10505 = C2446 * C682;
    const double C24726 = C2446 * C690;
    const double C24720 = C2446 * C683;
    const double C48623 = C48600 / C47174;
    const double C48411 = C48407 - C48410;
    const double C48637 = C48627 / C47210;
    const double C30368 = C30334 * C140;
    const double C30359 = C30334 * C139;
    const double C30355 = C30334 * C128;
    const double C30351 = C30334 * C138;
    const double C30347 = C30334 * C126;
    const double C30343 = C30334 * C137;
    const double C30339 = C30334 * C124;
    const double C30532 = C30334 * C284;
    const double C30528 = C30334 * C274;
    const double C30524 = C30334 * C283;
    const double C30520 = C30334 * C272;
    const double C30686 = C30334 * C408;
    const double C30682 = C30334 * C398;
    const double C30678 = C30334 * C407;
    const double C30674 = C30334 * C396;
    const double C31563 = C30334 * C596;
    const double C31559 = C30334 * C587;
    const double C31806 = C30334 * C1258;
    const double C31802 = C30334 * C1251;
    const double C31781 = C30334 * C595;
    const double C31777 = C30334 * C585;
    const double C31773 = C30334 * C282;
    const double C31769 = C30334 * C270;
    const double C32024 = C30334 * C1448;
    const double C32020 = C30334 * C1441;
    const double C32016 = C30334 * C698;
    const double C32012 = C30334 * C689;
    const double C32376 = C30334 * C1257;
    const double C32372 = C30334 * C1249;
    const double C32588 = C30334 * C1447;
    const double C32584 = C30334 * C1439;
    const double C32580 = C30334 * C697;
    const double C32576 = C30334 * C687;
    const double C14891 =
        ((-(0 * be) / C47174) / C47210 -
         ((0 - (C47191 * C47192) / C47174) * be) / C47174) /
            C47210 -
        ((C47191 * ((-C47192 / C47174) / C47210 -
                    ((C48321 - (C47191 * C47298) / C47174) * be) / C47174) +
          C30334) *
         be) /
            C47174 +
        (-C47298 / C47174) / C47210 - (0 * be) / C47174;
    const double C2481 = C48634 * C139;
    const double C2475 = C48634 * C128;
    const double C2468 = C48634 * C138;
    const double C2462 = C48634 * C126;
    const double C2456 = C48634 * C137;
    const double C2450 = C48634 * C124;
    const double C2668 = C48634 * C284;
    const double C2662 = C48634 * C274;
    const double C2656 = C48634 * C283;
    const double C2650 = C48634 * C272;
    const double C2854 = C48634 * C408;
    const double C2848 = C48634 * C398;
    const double C2842 = C48634 * C407;
    const double C2836 = C48634 * C396;
    const double C9918 = C48634 * C596;
    const double C9912 = C48634 * C587;
    const double C9905 = C48634 * C595;
    const double C9899 = C48634 * C585;
    const double C9893 = C48634 * C282;
    const double C9887 = C48634 * C270;
    const double C10346 = C48634 * C1257;
    const double C10340 = C48634 * C1249;
    const double C10524 = C48634 * C1447;
    const double C10518 = C48634 * C1439;
    const double C10512 = C48634 * C697;
    const double C10506 = C48634 * C687;
    const double C24727 = C48634 * C698;
    const double C24721 = C48634 * C689;
    const double C163 = C48321 * C141;
    const double C300 = C48321 * C285;
    const double C5094 = C48566 * C285;
    const double C30540 = C30334 * C285;
    const double C424 = C48321 * C409;
    const double C4915 = C48408 * C409;
    const double C5248 = C48566 * C409;
    const double C14928 = C14889 * C409;
    const double C30361 = C48408 * C409;
    const double C30694 = C30334 * C409;
    const double C7121 = C48408 * C2327;
    const double C9897 = C48601 * C2327;
    const double C16354 = C48601 * C2327;
    const double C16959 = C14889 * C2327;
    const double C32582 = C48408 * C2327;
    const double C37559 = C36011 * C2327;
    const double C9909 = C48601 * C2328;
    const double C13148 = C48408 * C2328;
    const double C16366 = C48601 * C2328;
    const double C16971 = C14889 * C2328;
    const double C32590 = C48408 * C2328;
    const double C38150 = C36011 * C2328;
    const double C10516 = C48601 * C3269;
    const double C16961 = C48601 * C3269;
    const double C21106 = C48614 * C3269;
    const double C38356 = C36011 * C3269;
    const double C41838 = C48614 * C3269;
    const double C1083 = C48321 * C597;
    const double C6353 = C48566 * C597;
    const double C31572 = C30334 * C597;
    const double C1463 = C48321 * C699;
    const double C5088 = C48408 * C699;
    const double C6569 = C48566 * C699;
    const double C15111 = C14889 * C699;
    const double C30534 = C48408 * C699;
    const double C34829 = C30334 * C699;
    const double C156 = C48321 * C130;
    const double C4918 = C48566 * C130;
    const double C30364 = C30334 * C130;
    const double C298 = C48321 * C276;
    const double C5090 = C48566 * C276;
    const double C30536 = C30334 * C276;
    const double C422 = C48321 * C400;
    const double C4911 = C48408 * C400;
    const double C5244 = C48566 * C400;
    const double C14922 = C14889 * C400;
    const double C30357 = C48408 * C400;
    const double C30690 = C30334 * C400;
    const double C1081 = C48321 * C589;
    const double C6349 = C48566 * C589;
    const double C31568 = C30334 * C589;
    const double C1461 = C48321 * C691;
    const double C5084 = C48408 * C691;
    const double C6565 = C48566 * C691;
    const double C15105 = C14889 * C691;
    const double C30530 = C48408 * C691;
    const double C34825 = C30334 * C691;
    const double C2466 = C48601 * C942;
    const double C5238 = C48408 * C942;
    const double C14911 = C48601 * C942;
    const double C15275 = C14889 * C942;
    const double C30684 = C48408 * C942;
    const double C36032 = C36011 * C942;
    const double C1287 = C48321 * C1253;
    const double C1733 =
        (3 * (C47553 + ae * C47580 + C47424 * C47584) +
         ae * (2 * C47580 + C47424 * C47585) +
         C47424 *
             (2 * C47584 + ae * C47585 +
              C47424 * (C47452 + ae * C47424 * C47509 +
                        C47424 * (ae * C47509 + C47424 * C47432 * C47457)))) /
        C47176;
    const double C2654 = C48601 * C2319;
    const double C6559 = C48408 * C2319;
    const double C15095 = C48601 * C2319;
    const double C18641 = C14889 * C2319;
    const double C32014 = C48408 * C2319;
    const double C36216 = C36011 * C2319;
    const double C9047 = C48321 * C1732;
    const double C14278 = C48566 * C1732;
    const double C41095 = C30334 * C1732;
    const double C9388 = C48321 * C1896;
    const double C12944 = C48408 * C1896;
    const double C14418 = C48566 * C1896;
    const double C16797 = C14889 * C1896;
    const double C32378 = C48408 * C1896;
    const double C41235 = C30334 * C1896;
    const double C9045 = C48321 * C1726;
    const double C14274 = C48566 * C1726;
    const double C41091 = C30334 * C1726;
    const double C9386 = C48321 * C1890;
    const double C12940 = C48408 * C1890;
    const double C14414 = C48566 * C1890;
    const double C16791 = C14889 * C1890;
    const double C32374 = C48408 * C1890;
    const double C41231 = C30334 * C1890;
    const double C9903 = C48601 * C2317;
    const double C13144 = C48408 * C2317;
    const double C16360 = C48601 * C2317;
    const double C16965 = C14889 * C2317;
    const double C32586 = C48408 * C2317;
    const double C38144 = C36011 * C2317;
    const double C47698 = C47691 + C47692;
    const double C47647 = C47644 + C47645;
    const double C48078 = C47468 + C48074;
    const double C2472 = C48601 * C950;
    const double C5242 = C48408 * C950;
    const double C14917 = C48601 * C950;
    const double C15281 = C14889 * C950;
    const double C30688 = C48408 * C950;
    const double C36038 = C36011 * C950;
    const double C159 = C113 * C131;
    const double C4921 = C4890 * C131;
    const double C299 = C113 * C277;
    const double C5093 = C4890 * C277;
    const double C423 = C113 * C401;
    const double C2482 = C2447 * C401;
    const double C4916 = C4891 * C401;
    const double C5247 = C4890 * C401;
    const double C14927 = C14892 * C401;
    const double C30362 = C30337 * C401;
    const double C1084 = C113 * C590;
    const double C6352 = C4890 * C590;
    const double C1462 = C113 * C692;
    const double C2669 = C2447 * C692;
    const double C5087 = C4891 * C692;
    const double C6568 = C4890 * C692;
    const double C15110 = C14892 * C692;
    const double C30533 = C30337 * C692;
    const double C2473 = C2448 * C943;
    const double C2855 = C2447 * C943;
    const double C5241 = C4891 * C943;
    const double C14918 = C14893 * C943;
    const double C15280 = C14892 * C943;
    const double C30687 = C30337 * C943;
    const double C2857 = C2448 * C2827;
    const double C15282 = C14893 * C2827;
    const double C1897 =
        (2 * (ae * (C47425 * C47503 + C47559 * be) + C47424 * C47600) +
         ae * (C47425 * C47585 + (C47559 + C47564 * C47575) * be) +
         C47424 *
             (C47600 + ae * (C47425 * C47424 * C47509 + C47424 * C47564 * be) +
              C47424 * (ae * (C47425 * C47509 + C47564 * be) +
                        C47424 * (be * C47541 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C2329 =
        (ae * (C47498 + C47425 * (C47425 * C47503 + C47559 * be) +
               C47425 * C47559 * be) +
         C47424 * (C47553 + be * C47425 * C47535 + C47425 * C47600)) /
        C47176;
    const double C2330 =
        (C47553 + be * C47425 * C47535 + C47425 * C47600 +
         ae * (C47580 + C47425 * (C47425 * C47424 * C47509 + C47610 * be) +
               C47425 * C47610 * be) +
         C47424 *
             (ae * (C47503 + C47425 * (C47425 * C47509 + C47564 * be) +
                    C47425 * C47564 * be) +
              C47424 * (C47452 + be * C47425 * C47541 +
                        C47425 * (be * C47541 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C2831 =
        (2 * (be * C47530 + C47425 * C47553) +
         be * (C47530 + C47535 * std::pow(C47425, 2)) +
         C47425 * (C47553 + be * C47425 * C47535 + C47425 * C47600)) /
        C47176;
    const double C3270 =
        (ae * (2 * (C47425 * C47503 + C47559 * be) +
               C47425 * (C47503 + C47425 * (C47425 * C47509 + C47564 * be) +
                         C47425 * C47564 * be) +
               (C47559 + C47564 * C47620) * be) +
         C47424 *
             (2 * C47600 + be * (C47535 + C47541 * C47620) +
              C47425 * (C47452 + be * C47425 * C47541 +
                        C47425 * (be * C47541 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C3684 =
        (3 * (C47553 + be * C47628 + C47425 * C47600) +
         be * (2 * C47628 + C47425 * C47630) +
         C47425 *
             (2 * C47600 + be * C47630 +
              C47425 * (C47452 + be * C47425 * C47541 +
                        C47425 * (be * C47541 + C47425 * C47432 * C47457)))) /
        C47176;
    const double C2320 =
        (C47424 * C47530 + C47856 * ae + C47921 * C47620) / C47174;
    const double C2322 =
        (C47530 + C47424 * C47921 + C47919 * ae +
         (C47535 + C47424 * (C47424 * C47541 + C47564 * ae) + C47610 * ae) *
             C47620) /
        C47174;
    const double C3266 =
        (2 * C47425 * C47921 +
         C47425 * (C47921 + (C47424 * C47541 + C47564 * ae) * C47620)) /
        C47174;
    const double C12378 = C6342 - C6343;
    const double C12374 = C6343 - C6342;
    const double C47676 = C47674 + C47675;
    const double C47772 = C47767 + C47771;
    const double C47740 = C47739 + C47737;
    const double C48000 = C47483 + C47999;
    const double C47865 = C47863 + C47864;
    const double C2323 =
        (C47424 * C47501 + C47425 * (C47425 * C47587 + C47927 * be) +
         C47425 * C47927 * be) /
        C47174;
    const double C3267 =
        (2 * (C47425 * C47587 + C47927 * be) +
         C47425 * (C47587 + C47425 * (C47425 * C47424 * C47514 + C47613 * be) +
                   C47425 * C47613 * be) +
         (C47927 + C47613 * C47620) * be) /
        C47174;
    const double C2313 = C47424 * C47860 + C47927 * C47620;
    const double C3262 =
        2 * C47425 * C47927 + C47425 * (C47927 + C47613 * C47620);
    const double C47929 = C47925 + C47926;
    const double C47987 = C47983 + C47984;
    const double C1288 = C113 * C1254;
    const double C1465 = C48321 * C1443;
    const double C6351 = C48408 * C1443;
    const double C31570 = C48408 * C1443;
    const double C1466 = C113 * C1444;
    const double C6354 = C4891 * C1444;
    const double C31573 = C30337 * C1444;
    const double C2852 = C48601 * C2826;
    const double C15277 = C48601 * C2826;
    const double C19847 = C48614 * C2826;
    const double C33254 = C48614 * C2826;
    const double C36398 = C36011 * C2826;
    const double C1286 = C113 * C1247;
    const double C1464 = C113 * C1437;
    const double C6350 = C4891 * C1437;
    const double C31569 = C30337 * C1437;
    const double C2851 = C2448 * C2820;
    const double C15276 = C14893 * C2820;
    const double C48070 = C48066 + C48067;
    const double C18643 = C48601 * C3265;
    const double C19993 = C48614 * C3265;
    const double C24725 = C48601 * C3265;
    const double C33400 = C48614 * C3265;
    const double C37792 = C36011 * C3265;
    const double C18642 = C14893 * C3261;
    const double C24724 = C2448 * C3261;
    const double C47686 = ae * C47683;
    const double C48083 = C47425 * C47683;
    const double C1729 =
        (3 * (C47530 + C47424 * C47921 + C47919 * ae) +
         C47424 * (2 * C47921 +
                   C47424 * (C47535 + C47424 * (C47424 * C47541 + C47564 * ae) +
                             C47610 * ae) +
                   C47922 * ae) +
         (2 * C47919 + C47424 * C47922) * ae) /
        C47174;
    const double C1892 = (C47425 * (2 * C47580 + C47424 * C47585) +
                          (2 * C47919 + C47424 * C47922) * be) /
                         C47174;
    const double C1893 =
        (C47425 * (2 * C47921 +
                   C47424 * (C47535 + C47424 * (C47424 * C47541 + C47564 * ae) +
                             C47610 * ae) +
                   C47922 * ae)) /
        C47174;
    const double C2321 =
        (C47498 + C47503 * C47575 + C47425 * (C47425 * C47585 + C47922 * be) +
         C47425 * C47922 * be) /
        C47174;
    const double C1724 = 3 * (C47856 + C47559 * C47575) +
                         C47424 * (2 * C47919 + C47424 * C47922);
    const double C1888 = C47425 * (2 * C47919 + C47424 * C47922);
    const double C2312 = C47856 + C47559 * C47575 + C47922 * C47620;
    const double C10069 =
        2 * C47425 * C47922 + C47425 * (C47922 + C47688 * C47620);
    const double C3679 =
        (3 * (C47498 + C47425 * C47979 + C47977 * be) +
         C47425 *
             (2 * C47979 + C47425 * (C47503 + C47425 * C47683 + C47787 * be) +
              C47980 * be) +
         (2 * C47977 + C47425 * C47980) * be) /
        C47174;
    const double C3675 = 3 * (C47856 + C47559 * C47620) +
                         C47425 * (2 * C47977 + C47425 * C47980);
    const double C48011 = C47424 * C48009;
    const double C17531 =
        (3 * (C47921 + C48009 * C47620) +
         C47425 *
             (2 * C47425 * C48009 +
              C47425 * (C48009 + (C47424 * C47760 + C47682 * ae) * C47620))) /
        C47174;
    const double C47998 = C47995 + C47996;
    const double C48062 = C48058 + C48059;
    const double C10522 = C48601 * C10070;
    const double C16967 = C48601 * C10070;
    const double C21473 = C48614 * C10070;
    const double C42205 = C48614 * C10070;
    const double C46753 = C36011 * C10070;
    const double C10521 = C2448 * C10068;
    const double C16966 = C14893 * C10068;
    const double C47747 = C47471 + C47742;
    const double C47729 = ae * C47725;
    const double C48092 = C47425 * C47725;
    const double C10932 =
        (3 * (C47572 + C47425 * C48054 + C48052 * be) +
         C47425 *
             (2 * C48054 + C47425 * (C47636 + C47425 * C47725 + C47779 * be) +
              C48055 * be) +
         (2 * C48052 + C47425 * C48055) * be) /
        C47174;
    const double C10930 = 3 * (C47911 + C47607 * C47620) +
                          C47425 * (2 * C48052 + C47425 * C48055);
    const double C48079 = C48076 + C48077;
    const double C48030 = C47486 + C48029;
    const double C48101 = C47997 + C48100;
    const double C47461 = C47455 + C47460;
    const double C47591 = C47588 + C47589;
    const double C47604 = C47602 + C47603;
    const double C1289 = C48321 * C1259;
    const double C1467 = C48321 * C1449;
    const double C6355 = C48408 * C1449;
    const double C31574 = C48408 * C1449;
    const double C47661 = C47424 * C47659;
    const double C47687 = C47424 * C47684;
    const double C47758 = C47425 * C47684;
    const double C47706 = C47703 + C47704;
    const double C47730 = C47726 + C47727;
    const double C47753 = C47751 + C47745;
    const double C47516 = C47511 + C47515;
    const double C47592 = C47476 + C47590;
    const double C47662 = C47424 * C47660;
    const double C10072 =
        (2 * (C47425 * C47585 + C47922 * be) +
         C47425 * (C47585 + C47425 * (C47425 * C47660 + C47688 * be) +
                   C47425 * C47688 * be) +
         (C47922 + C47688 * C47620) * be) /
        C47174;
    const double C47707 = C47701 + C47705;
    const double C47548 = C47543 + C47547;
    const double C47634 = C47491 + C47633;
    const double C47798 = C47425 * C47791;
    const double C47806 = C47803 + C47804;
    const double C170 = C164 * C114;
    const double C1077 = C164 * C1069;
    const double C3793 = C164 * C3790;
    const double C171 = C165 * C48304;
    const double C1078 = C165 * C48633;
    const double C3794 = C165 * C48565;
    const double C7776 = C165 * C7765;
    const double C22093 = C165 * C22083;
    const double C173 = C167 * C48304;
    const double C3798 = C167 * C48565;
    const double C22097 = C167 * C22083;
    const double C1277 = C1076 - C1075;
    const double C1273 = C1075 - C1076;
    const double C12377 = C6340 - C6341;
    const double C12373 = C6341 - C6340;
    const double C6335 = C5079 - C5080;
    const double C6331 = C5080 - C5079;
    const double C11180 = C1280 - C1281;
    const double C11178 = C1281 - C1280;
    const double C1276 = C1074 - C1073;
    const double C1272 = C1073 - C1074;
    const double C12375 = C6336 - C6337;
    const double C12371 = C6337 - C6336;
    const double C6333 = C5075 - C5076;
    const double C6329 = C5076 - C5075;
    const double C11179 = C1278 - C1279;
    const double C11177 = C1279 - C1278;
    const double C12376 = C6338 - C6339;
    const double C12372 = C6339 - C6338;
    const double C9048 = C113 * C1727;
    const double C14277 = C4890 * C1727;
    const double C9387 = C113 * C1891;
    const double C10347 = C2447 * C1891;
    const double C12943 = C4891 * C1891;
    const double C14417 = C4890 * C1891;
    const double C16796 = C14892 * C1891;
    const double C32377 = C30337 * C1891;
    const double C7120 = C4891 * C2316;
    const double C9898 = C2448 * C2316;
    const double C10513 = C2447 * C2316;
    const double C16355 = C14893 * C2316;
    const double C16958 = C14892 * C2316;
    const double C32581 = C30337 * C2316;
    const double C9910 = C2448 * C2318;
    const double C10525 = C2447 * C2318;
    const double C13147 = C4891 * C2318;
    const double C16367 = C14893 * C2318;
    const double C16970 = C14892 * C2318;
    const double C32589 = C30337 * C2318;
    const double C10515 = C2448 * C3264;
    const double C16960 = C14893 * C3264;
    const double C3796 = C1080 * C48366;
    const double C7778 = C1080 * C7766;
    const double C22095 = C1080 * C48366;
    const double C172 = C166 * C114;
    const double C3797 = C166 * C3790;
    const double C1090 = C1079 * C1070;
    const double C3795 = C1079 * C3791;
    const double C7777 = C1079 * C7772;
    const double C22094 = C1079 * C22090;
    const double C132 = (4 * (2 * C47498 + C47432 * C47501) +
                         C47432 * (3 * C47501 + C47432 * C47506)) /
                        C47174;
    const double C278 = (C47424 * (3 * C47501 + C47432 * C47506)) / C47174;
    const double C402 = (C47425 * (3 * C47501 + C47432 * C47506) +
                         (3 * (C47557 + C47523 * C47440) +
                          C47432 * (2 * C47559 + C47432 * C47562)) *
                             be) /
                        C47174;
    const double C591 =
        (2 * C47498 + C47432 * C47501 + C47506 * C47575) / C47174;
    const double C9050 = C48321 * C1728;
    const double C9038 = (4 * (2 * C47572 + C47424 * C47578) +
                          C47424 * (3 * C47578 + C47424 * C47648)) /
                         C47174;
    const double C133 = (4 * (2 * C47530 + C47432 * C47533) +
                         C47432 * (3 * C47533 + C47432 * C47538)) /
                        C47174;
    const double C279 = (C47424 * (3 * C47533 + C47432 * C47538) +
                         (3 * (C47557 + C47523 * C47440) +
                          C47432 * (2 * C47559 + C47432 * C47562)) *
                             ae) /
                        C47174;
    const double C403 = (C47425 * (3 * C47533 + C47432 * C47538)) / C47174;
    const double C945 =
        (2 * C47530 + C47432 * C47533 + C47538 * C47620) / C47174;
    const double C17618 = (4 * (2 * C47624 + C47425 * C47626) +
                           C47425 * (3 * C47626 + C47425 * C47795)) /
                          C47174;
    const double C47869 = C47432 * C47570;
    const double C47950 = C47424 * C47570;
    const double C1725 = 3 * (C47860 + C47562 * C47575) +
                         C47424 * (2 * C47927 + C47424 * C47930);
    const double C1889 = C47425 * (2 * C47927 + C47424 * C47930);
    const double C2314 = C47860 + C47562 * C47575 + C47930 * C47620;
    const double C3676 = 3 * (C47860 + C47562 * C47620) +
                         C47425 * (2 * C47985 + C47425 * C47988);
    const double C48010 = C48007 + C48008;
    const double C17529 = 3 * (C47919 + C47610 * C47620) +
                          C47425 * (2 * C48068 + C47425 * C48071);
    const double C48088 = C48085 + C48086;
    const double C48026 = C47424 * C47731;
    const double C10931 = 3 * (C47914 + C47673 * C47620) +
                          C47425 * (2 * C48060 + C47425 * C48063);
    const double C48097 = C48094 + C48095;
    const double C48107 = C47425 * C47805;
    const double C48214 = C48210 - C48213;
    const double C48617 = C48582 / C47174;
    const double C48222 = C48218 - C48221;
    const double C48631 = C48616 / C47210;
    const double C47269 = C47267 / C47174;
    const double C47242 = C48304 - C47238;
    const double C47251 = C47247 + C48366;
    const double C47279 = C47276 - C47278;
    const double C25920 = C165 * C48362;
    const double C48568 = C48362 * C48356;
    const double C48606 = C48570 + C48362;
    const double C1091 = C1080 * C48621;
    const double C25922 = C1080 * C48369;
    const double C48572 = C48369 / C47210;
    const double C48569 = C48369 * C48356;
    const double C11036 = C48635 - (C48362 * C48358) / C47174;
    const double C7775 = C164 * C7771;
    const double C47356 = C47354 / C47174;
    const double C47329 = C48321 - C47325;
    const double C14935 = C14915 - C14916;
    const double C14932 = C14909 - C14910;
    const double C18434 = C15098 - C15099;
    const double C18428 = C15099 - C15098;
    const double C18431 = C15092 - C15093;
    const double C18425 = C15093 - C15092;
    const double C16786 = C16364 - C16365;
    const double C16783 = C16358 - C16359;
    const double C30374 = C30353 - C30354;
    const double C30372 = C30349 - C30350;
    const double C31796 = C30525 - C30526;
    const double C31788 = C30526 - C30525;
    const double C31794 = C30521 - C30522;
    const double C31786 = C30522 - C30521;
    const double C31800 = C31566 - C31565;
    const double C31792 = C31565 - C31566;
    const double C31798 = C31562 - C31561;
    const double C31790 = C31561 - C31562;
    const double C32370 = C31783 - C31784;
    const double C32368 = C31779 - C31780;
    const double C47338 = C47334 + C48408;
    const double C47366 = C47363 - C47365;
    const double C36047 = C48404 * C139;
    const double C36041 = C48404 * C128;
    const double C36034 = C48404 * C138;
    const double C36028 = C48404 * C126;
    const double C36022 = C48404 * C137;
    const double C36016 = C48404 * C124;
    const double C36230 = C48404 * C284;
    const double C36224 = C48404 * C274;
    const double C36218 = C48404 * C283;
    const double C36212 = C48404 * C272;
    const double C36400 = C48404 * C408;
    const double C36394 = C48404 * C398;
    const double C36388 = C48404 * C407;
    const double C36382 = C48404 * C396;
    const double C37580 = C48404 * C596;
    const double C37574 = C48404 * C587;
    const double C37555 = C48404 * C282;
    const double C37549 = C48404 * C270;
    const double C37794 = C48404 * C698;
    const double C37788 = C48404 * C689;
    const double C38146 = C48404 * C595;
    const double C38140 = C48404 * C585;
    const double C38352 = C48404 * C697;
    const double C38346 = C48404 * C687;
    const double C46593 = C48404 * C1257;
    const double C46587 = C48404 * C1249;
    const double C46755 = C48404 * C1447;
    const double C46749 = C48404 * C1439;
    const double C48574 = C48404 * C48398;
    const double C48612 = C48576 + C48404;
    const double C4934 = C4927 + C4928;
    const double C4933 = C4925 + C4926;
    const double C12946 = C12935 + C12936;
    const double C12945 = C12933 + C12934;
    const double C2483 = C48623 * C409;
    const double C2477 = C48623 * C400;
    const double C2470 = C48623 * C408;
    const double C2464 = C48623 * C398;
    const double C2458 = C48623 * C407;
    const double C2452 = C48623 * C396;
    const double C2670 = C48623 * C699;
    const double C2664 = C48623 * C691;
    const double C2658 = C48623 * C698;
    const double C2652 = C48623 * C689;
    const double C2856 = C48623 * C950;
    const double C2850 = C48623 * C942;
    const double C2844 = C48623 * C949;
    const double C2838 = C48623 * C940;
    const double C9920 = C48623 * C1448;
    const double C9914 = C48623 * C1441;
    const double C9907 = C48623 * C1447;
    const double C9901 = C48623 * C1439;
    const double C9895 = C48623 * C697;
    const double C9889 = C48623 * C687;
    const double C10348 = C48623 * C1896;
    const double C10342 = C48623 * C1890;
    const double C10526 = C48623 * C2328;
    const double C10520 = C48623 * C2317;
    const double C10514 = C48623 * C2327;
    const double C10508 = C48623 * C2315;
    const double C24723 = C48623 * C2319;
    const double C36049 = C48411 * C409;
    const double C36043 = C48411 * C400;
    const double C36036 = C48411 * C408;
    const double C36030 = C48411 * C398;
    const double C36024 = C48411 * C407;
    const double C36018 = C48411 * C396;
    const double C36232 = C48411 * C699;
    const double C36226 = C48411 * C691;
    const double C36220 = C48411 * C698;
    const double C36214 = C48411 * C689;
    const double C36402 = C48411 * C950;
    const double C36396 = C48411 * C942;
    const double C36390 = C48411 * C949;
    const double C36384 = C48411 * C940;
    const double C37582 = C48411 * C1448;
    const double C37576 = C48411 * C1441;
    const double C37557 = C48411 * C697;
    const double C37551 = C48411 * C687;
    const double C37790 = C48411 * C2319;
    const double C38148 = C48411 * C1447;
    const double C38142 = C48411 * C1439;
    const double C38354 = C48411 * C2327;
    const double C38348 = C48411 * C2315;
    const double C46595 = C48411 * C1896;
    const double C46589 = C48411 * C1890;
    const double C46757 = C48411 * C2328;
    const double C46751 = C48411 * C2317;
    const double C48578 = C48411 / C47210;
    const double C48575 = C48411 * C48398;
    const double C19815 = C48637 - (C48404 * C48400) / C47174;
    const double C14925 = C14891 * C129;
    const double C14919 = C14891 * C118;
    const double C14914 = C14891 * C127;
    const double C14908 = C14891 * C117;
    const double C14902 = C14891 * C125;
    const double C14896 = C14891 * C116;
    const double C15108 = C14891 * C275;
    const double C15102 = C14891 * C266;
    const double C15096 = C14891 * C273;
    const double C15090 = C14891 * C265;
    const double C15278 = C14891 * C399;
    const double C15272 = C14891 * C390;
    const double C15266 = C14891 * C397;
    const double C15260 = C14891 * C389;
    const double C16374 = C14891 * C588;
    const double C16368 = C14891 * C581;
    const double C16363 = C14891 * C586;
    const double C16357 = C14891 * C580;
    const double C16351 = C14891 * C271;
    const double C16345 = C14891 * C264;
    const double C16794 = C14891 * C1250;
    const double C16788 = C14891 * C1245;
    const double C16968 = C14891 * C1440;
    const double C16962 = C14891 * C1435;
    const double C16956 = C14891 * C688;
    const double C16950 = C14891 * C682;
    const double C18644 = C14891 * C690;
    const double C18638 = C14891 * C683;
    const double C2489 = C2468 - C2469;
    const double C2486 = C2462 - C2463;
    const double C24515 = C2655 - C2656;
    const double C24509 = C2656 - C2655;
    const double C24512 = C2649 - C2650;
    const double C24506 = C2650 - C2649;
    const double C10336 = C9905 - C9906;
    const double C10333 = C9899 - C9900;
    const double C168 = C156 - C157;
    const double C3799 = C298 - C297;
    const double C3939 = C297 - C298;
    const double C4930 = C4911 - C4912;
    const double C30376 = C30357 - C30358;
    const double C1092 = C1081 - C1082;
    const double C1284 = C1082 - C1081;
    const double C6116 = C5084 - C5083;
    const double C6345 = C5083 - C5084;
    const double C34420 = C30530 - C30529;
    const double C34625 = C30529 - C30530;
    const double C2488 = C2466 - C2467;
    const double C14933 = C14911 - C14912;
    const double C9052 = C48321 * C1733;
    const double C24514 = C2653 - C2654;
    const double C24508 = C2654 - C2653;
    const double C18432 = C15094 - C15095;
    const double C18426 = C15095 - C15094;
    const double C9293 = C9045 - C9046;
    const double C14270 = C12940 - C12939;
    const double C41087 = C32374 - C32373;
    const double C10335 = C9903 - C9904;
    const double C16784 = C16360 - C16361;
    const double C9042 =
        (4 * (2 * C47576 + ae * C47578 + C47424 * C47647) +
         ae * (3 * C47578 + C47424 * C47648) +
         C47424 *
             (3 * C47647 + ae * C47648 +
              C47424 * (2 * C47641 + ae * C47643 +
                        C47424 * (C47448 + ae * C47424 * C47474 +
                                  C47424 * (ae * C47474 + C47424 * C47457))))) /
        C47176;
    const double C48080 = C48078 + C48075;
    const double C169 = C158 - C159;
    const double C3800 = C300 - C299;
    const double C3940 = C299 - C300;
    const double C4932 = C4915 - C4916;
    const double C30378 = C30361 - C30362;
    const double C1093 = C1083 - C1084;
    const double C1285 = C1084 - C1083;
    const double C6118 = C5088 - C5087;
    const double C6347 = C5087 - C5088;
    const double C34422 = C30534 - C30533;
    const double C34627 = C30533 - C30534;
    const double C2491 = C2472 - C2473;
    const double C14936 = C14917 - C14918;
    const double C11314 = C48321 * C1897;
    const double C12386 = C48408 * C1897;
    const double C31808 = C48408 * C1897;
    const double C2660 = C48601 * C2329;
    const double C6563 = C48408 * C2329;
    const double C15101 = C48601 * C2329;
    const double C18647 = C14889 * C2329;
    const double C24729 = C48623 * C2329;
    const double C32018 = C48408 * C2329;
    const double C36222 = C36011 * C2329;
    const double C37796 = C48411 * C2329;
    const double C9922 = C48601 * C2330;
    const double C12592 = C48408 * C2330;
    const double C16379 = C48601 * C2330;
    const double C32026 = C48408 * C2330;
    const double C37584 = C36011 * C2330;
    const double C2846 = C48601 * C2831;
    const double C15271 = C48601 * C2831;
    const double C19838 = C48614 * C2831;
    const double C33245 = C48614 * C2831;
    const double C36392 = C36011 * C2831;
    const double C18649 = C48601 * C3270;
    const double C20001 = C48614 * C3270;
    const double C24731 = C48601 * C3270;
    const double C33408 = C48614 * C3270;
    const double C37798 = C36011 * C3270;
    const double C20147 = C48614 * C3684;
    const double C33554 = C48614 * C3684;
    const double C2659 = C2448 * C2320;
    const double C6562 = C4891 * C2320;
    const double C15100 = C14893 * C2320;
    const double C18646 = C14892 * C2320;
    const double C24728 = C2447 * C2320;
    const double C32017 = C30337 * C2320;
    const double C9921 = C2448 * C2322;
    const double C12591 = C4891 * C2322;
    const double C16378 = C14893 * C2322;
    const double C32025 = C30337 * C2322;
    const double C18648 = C14893 * C3266;
    const double C24730 = C2448 * C3266;
    const double C9140 =
        (3 * (C47596 + ae * (C47425 * C47636 + C47607 * be) + C47424 * C47676) +
         ae * (C47425 * C47648 + (2 * C47607 + C47424 * C47673) * be) +
         C47424 *
             (2 * C47676 + ae * (C47425 * C47643 + C47673 * be) +
              C47424 * (C47672 +
                        ae * (C47425 * C47424 * C47474 + C47424 * C47525 * be) +
                        C47424 * (ae * (C47425 * C47474 + C47525 * be) +
                                  C47424 * (be * C47489 + C47425 * C47457))))) /
        C47176;
    const double C9624 =
        (2 * (ae * (C47468 + C47425 * C47671 + C47425 * C47523 * be) +
              C47424 * C47740) +
         ae * (C47578 + C47425 * (C47425 * C47643 + C47673 * be) +
               C47425 * C47673 * be) +
         C47424 *
             (C47740 + ae * (C47636 + C47425 * C47725 + C47425 * C47714 * be) +
              C47424 * (ae * (C47471 + C47425 * C47721 + C47425 * C47525 * be) +
                        C47424 * (C47448 + be * C47425 * C47489 +
                                  C47425 * C47722)))) /
        C47176;
    const double C48001 = C48000 + C47994;
    const double C592 =
        (2 * C47530 + C47432 * C47533 +
         C47424 * (C47424 * C47538 + C47865 * ae) + C47424 * C47865 * ae) /
        C47174;
    const double C693 =
        (C47425 * C47424 * C47506 + C47424 * C47865 * be) / C47174;
    const double C694 = (C47425 * (C47424 * C47538 + C47865 * ae)) / C47174;
    const double C944 =
        (2 * C47498 + C47432 * C47501 +
         C47425 * (C47425 * C47506 + C47865 * be) + C47425 * C47865 * be) /
        C47174;
    const double C120 = 4 * (2 * C47856 + C47432 * C47860) +
                        C47432 * (3 * C47860 + C47432 * C47865);
    const double C268 = C47424 * (3 * C47860 + C47432 * C47865);
    const double C392 = C47425 * (3 * C47860 + C47432 * C47865);
    const double C583 = 2 * C47856 + C47432 * C47860 + C47865 * C47575;
    const double C685 = C47425 * C47424 * C47865;
    const double C936 = 2 * C47856 + C47432 * C47860 + C47865 * C47620;
    const double C1248 =
        2 * C47424 * C47865 + C47424 * (C47865 + C47570 * C47575);
    const double C1438 = C47425 * (C47865 + C47570 * C47575);
    const double C2821 =
        2 * C47425 * C47865 + C47425 * (C47865 + C47570 * C47620);
    const double C2666 = C48601 * C2323;
    const double C6567 = C48408 * C2323;
    const double C15107 = C48601 * C2323;
    const double C34827 = C48408 * C2323;
    const double C36228 = C36011 * C2323;
    const double C2665 = C2448 * C2313;
    const double C6566 = C4891 * C2313;
    const double C15106 = C14893 * C2313;
    const double C34826 = C30337 * C2313;
    const double C1731 =
        (3 * (C47533 + C47424 * C47929 + C47927 * ae) +
         C47424 * (2 * C47929 +
                   C47424 * (C47491 + C47424 * (C47424 * C47546 + C47568 * ae) +
                             C47613 * ae) +
                   C47930 * ae) +
         (2 * C47927 + C47424 * C47930) * ae) /
        C47174;
    const double C1895 =
        (C47425 * (2 * C47929 +
                   C47424 * (C47491 + C47424 * (C47424 * C47546 + C47568 * ae) +
                             C47613 * ae) +
                   C47930 * ae)) /
        C47174;
    const double C2324 =
        (C47424 * C47533 + C47860 * ae + C47929 * C47620) / C47174;
    const double C2326 =
        (C47533 + C47424 * C47929 + C47927 * ae +
         (C47491 + C47424 * (C47424 * C47546 + C47568 * ae) + C47613 * ae) *
             C47620) /
        C47174;
    const double C3268 =
        (2 * C47425 * C47929 +
         C47425 * (C47929 + (C47424 * C47546 + C47568 * ae) * C47620)) /
        C47174;
    const double C3681 =
        (3 * (C47501 + C47425 * C47987 + C47985 * be) +
         C47425 * (2 * C47987 +
                   C47425 * (C47476 + C47425 * (C47425 * C47514 + C47568 * be) +
                             C47425 * C47568 * be) +
                   C47988 * be) +
         (2 * C47985 + C47425 * C47988) * be) /
        C47174;
    const double C17530 =
        (3 * (C47580 + C47425 * C48070 + C48068 * be) +
         C47425 * (2 * C48070 +
                   C47425 * (C47650 +
                             C47425 * (C47425 * C47424 * C47653 + C47759 * be) +
                             C47425 * C47759 * be) +
                   C48071 * be) +
         (2 * C48068 + C47425 * C48071) * be) /
        C47174;
    const double C48087 = C47503 + C48083;
    const double C9051 = C113 * C1729;
    const double C11312 = C48321 * C1892;
    const double C12382 = C48408 * C1892;
    const double C31804 = C48408 * C1892;
    const double C11313 = C113 * C1893;
    const double C12385 = C4891 * C1893;
    const double C31807 = C30337 * C1893;
    const double C9916 = C48601 * C2321;
    const double C12588 = C48408 * C2321;
    const double C16373 = C48601 * C2321;
    const double C32022 = C48408 * C2321;
    const double C37578 = C36011 * C2321;
    const double C9049 = C113 * C1724;
    const double C11311 = C113 * C1888;
    const double C12381 = C4891 * C1888;
    const double C31803 = C30337 * C1888;
    const double C9915 = C2448 * C2312;
    const double C12587 = C4891 * C2312;
    const double C16372 = C14893 * C2312;
    const double C32021 = C30337 * C2312;
    const double C20139 = C48614 * C3679;
    const double C33546 = C48614 * C3679;
    const double C48012 = C47535 + C48011;
    const double C9136 = (C47425 * (3 * C47578 + C47424 * C47648) +
                          (3 * C47914 + C47424 * C47998) * be) /
                         C47174;
    const double C9620 =
        (2 * C47572 + C47424 * C47578 +
         C47425 * (C47425 * C47648 + C47998 * be) + C47425 * C47998 * be) /
        C47174;
    const double C9036 = 4 * (2 * C47911 + C47424 * C47914) +
                         C47424 * (3 * C47914 + C47424 * C47998);
    const double C9134 = C47425 * (3 * C47914 + C47424 * C47998);
    const double C9618 = 2 * C47911 + C47424 * C47914 + C47998 * C47620;
    const double C10500 =
        2 * C47425 * C47998 + C47425 * (C47998 + C47731 * C47620);
    const double C10934 =
        (3 * (C47578 + C47425 * C48062 + C48060 * be) +
         C47425 * (2 * C48062 +
                   C47425 * (C47643 + C47425 * (C47425 * C47702 + C47724 * be) +
                             C47425 * C47724 * be) +
                   C48063 * be) +
         (2 * C48060 + C47425 * C48063) * be) /
        C47174;
    const double C47750 = C47747 + C47748;
    const double C47732 = C47672 + C47729;
    const double C48096 = C47636 + C48092;
    const double C21619 = C48614 * C10932;
    const double C42351 = C48614 * C10932;
    const double C17615 = 4 * (2 * C47969 + C47425 * C47972) +
                          C47425 * (3 * C47972 + C47425 * C48079);
    const double C48031 = C48030 + C48023;
    const double C17851 =
        (4 * (2 * C47425 * C47997 + C47425 * C48101) +
         C47425 * (3 * C48101 + C47425 * (2 * C47425 * C48027 +
                                          C47425 * (C48027 + (C47424 * C47544 +
                                                              C47565 * ae) *
                                                                 C47620)))) /
        C47174;
    const double C142 =
        (5 * (3 * C47450 + C47432 * C47461) +
         C47432 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C286 =
        (ae * (3 * (C47468 + C47471 * C47440) +
               C47432 *
                   (2 * C47432 * C47471 +
                    C47432 * (C47471 + C47445 * C47446 * C47465 * C47440))) +
         C47424 * (3 * C47450 + C47432 * C47461)) /
        C47176;
    const double C287 =
        (ae * (4 * (2 * C47432 * C47471 + C47432 * C47476) +
               C47432 * (3 * C47476 +
                         C47432 * (2 * C47432 * C47474 +
                                   C47432 * (C47474 + C47453 * C47454 * C47465 *
                                                          C47440)))) +
         C47424 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C410 =
        (be * (3 * (C47483 + C47486 * C47440) +
               C47432 *
                   (2 * C47432 * C47486 +
                    C47432 * (C47486 + C47445 * C47446 * C47480 * C47440))) +
         C47425 * (3 * C47450 + C47432 * C47461)) /
        C47176;
    const double C411 =
        (be * (4 * (2 * C47432 * C47486 + C47432 * C47491) +
               C47432 * (3 * C47491 +
                         C47432 * (2 * C47432 * C47489 +
                                   C47432 * (C47489 + C47453 * C47454 * C47480 *
                                                          C47440)))) +
         C47425 * (4 * C47461 +
                   C47432 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C598 =
        (2 * C47432 * C47443 + C47432 * C47450 + ae * C47424 * C47506 +
         C47424 * (ae * C47506 + C47424 * C47461)) /
        C47176;
    const double C700 =
        (ae *
             (C47425 * C47506 + (2 * C47432 * C47523 +
                                 C47432 * (C47523 + C47439 * C47441 * C47440)) *
                                    be) +
         C47424 *
             (be * (2 * C47432 * C47486 + C47432 * C47491) + C47425 * C47461)) /
        C47176;
    const double C951 =
        (2 * C47432 * C47443 + C47432 * C47450 + be * C47425 * C47538 +
         C47425 * (be * C47538 + C47425 * C47461)) /
        C47176;
    const double C2331 =
        (ae * (C47501 + C47425 * (C47425 * C47476 + C47562 * be) +
               C47425 * C47562 * be) +
         C47424 * (C47450 + be * C47425 * C47491 + C47425 * C47604)) /
        C47176;
    const double C2332 =
        (C47450 + be * C47425 * C47491 + C47425 * C47604 +
         ae * (C47587 + C47425 * (C47425 * C47424 * C47514 + C47613 * be) +
               C47425 * C47613 * be) +
         C47424 * (ae * (C47476 + C47425 * (C47425 * C47514 + C47568 * be) +
                         C47425 * C47568 * be) +
                   C47424 * (C47459 + be * C47425 * C47546 +
                             C47425 * (be * C47546 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C2832 =
        (2 * (be * C47533 + C47425 * C47450) +
         be * (C47533 + C47491 * std::pow(C47425, 2)) +
         C47425 * (C47450 + be * C47425 * C47491 + C47425 * C47604)) /
        C47176;
    const double C3271 =
        (ae * (2 * (C47425 * C47476 + C47562 * be) +
               C47425 * (C47476 + C47425 * (C47425 * C47514 + C47568 * be) +
                         C47425 * C47568 * be) +
               (C47562 + C47568 * C47620) * be) +
         C47424 * (2 * C47604 + be * (C47491 + C47546 * C47620) +
                   C47425 * (C47459 + be * C47425 * C47546 +
                             C47425 * (be * C47546 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C47663 = C47658 + C47661;
    const double C47689 = C47686 + C47687;
    const double C47763 = C47762 + C47758;
    const double C47708 = C47424 * C47706;
    const double C47733 = C47424 * C47730;
    const double C47754 = C47424 * C47753;
    const double C47769 = C47425 * C47753;
    const double C47517 = C47432 * C47516;
    const double C1260 =
        (2 * (ae * C47506 + C47424 * C47461) +
         ae * (C47506 + C47516 * std::pow(C47424, 2)) +
         C47424 * (C47461 + ae * C47424 * C47516 +
                   C47424 * (ae * C47516 +
                             C47424 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1255 =
        (2 * C47424 * C47506 + C47424 * (C47506 + C47516 * C47575)) / C47174;
    const double C1445 = (C47425 * (C47506 + C47516 * C47575) +
                          (C47865 + C47570 * C47575) * be) /
                         C47174;
    const double C2828 =
        (2 * (C47425 * C47506 + C47865 * be) +
         C47425 * (C47506 + C47425 * (C47425 * C47516 + C47570 * be) +
                   C47425 * C47570 * be) +
         (C47865 + C47570 * C47620) * be) /
        C47174;
    const double C1734 =
        (3 * (C47450 + ae * C47587 + C47424 * C47591) +
         ae * (2 * C47587 + C47424 * C47592) +
         C47424 * (2 * C47591 + ae * C47592 +
                   C47424 * (C47459 + ae * C47424 * C47514 +
                             C47424 * (ae * C47514 +
                                       C47424 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1898 =
        (2 * (ae * (C47425 * C47476 + C47562 * be) + C47424 * C47604) +
         ae * (C47425 * C47592 + (C47562 + C47568 * C47575) * be) +
         C47424 *
             (C47604 + ae * (C47425 * C47424 * C47514 + C47424 * C47568 * be) +
              C47424 *
                  (ae * (C47425 * C47514 + C47568 * be) +
                   C47424 * (be * C47546 +
                             C47425 * (C47457 + std::pow(C47428, 8) * bs[8] *
                                                    C47430 * C47440))))) /
        C47176;
    const double C1730 = (3 * (C47501 + C47476 * C47575) +
                          C47424 * (2 * C47587 + C47424 * C47592)) /
                         C47174;
    const double C1894 = (C47425 * (2 * C47587 + C47424 * C47592) +
                          (2 * C47927 + C47424 * C47930) * be) /
                         C47174;
    const double C2325 =
        (C47501 + C47476 * C47575 + C47425 * (C47425 * C47592 + C47930 * be) +
         C47425 * C47930 * be) /
        C47174;
    const double C47664 = C47656 + C47662;
    const double C47709 = C47424 * C47707;
    const double C10501 =
        (2 * (C47425 * C47648 + C47998 * be) +
         C47425 * (C47648 + C47425 * (C47425 * C47707 + C47731 * be) +
                   C47425 * C47731 * be) +
         (C47998 + C47731 * C47620) * be) /
        C47174;
    const double C47549 = C47432 * C47548;
    const double C1450 =
        (be * C47538 + C47425 * C47461 +
         ae * (C47425 * C47424 * C47516 + C47424 * C47570 * be) +
         C47424 * (ae * (C47425 * C47516 + C47570 * be) +
                   C47424 * (be * C47548 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C2647 =
        (ae * (C47506 + C47425 * (C47425 * C47516 + C47570 * be) +
               C47425 * C47570 * be) +
         C47424 * (C47461 + be * C47425 * C47548 +
                   C47425 * (be * C47548 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C2833 =
        (2 * (be * C47538 + C47425 * C47461) +
         be * (C47538 + C47548 * std::pow(C47425, 2)) +
         C47425 * (C47461 + be * C47425 * C47548 +
                   C47425 * (be * C47548 +
                             C47425 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C1256 =
        (2 * (C47424 * C47538 + C47865 * ae) +
         C47424 * (C47538 + C47424 * (C47424 * C47548 + C47570 * ae) +
                   C47424 * C47570 * ae) +
         (C47865 + C47570 * C47575) * ae) /
        C47174;
    const double C1446 =
        (C47425 * (C47538 + C47424 * (C47424 * C47548 + C47570 * ae) +
                   C47424 * C47570 * ae)) /
        C47174;
    const double C2646 = (C47424 * C47538 + C47865 * ae +
                          (C47424 * C47548 + C47570 * ae) * C47620) /
                         C47174;
    const double C2829 =
        (2 * C47425 * C47538 + C47425 * (C47538 + C47548 * C47620)) / C47174;
    const double C3685 =
        (3 * (C47450 + be * C47632 + C47425 * C47604) +
         be * (2 * C47632 + C47425 * C47634) +
         C47425 * (2 * C47604 + be * C47634 +
                   C47425 * (C47459 + be * C47425 * C47546 +
                             C47425 * (be * C47546 +
                                       C47425 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C3682 = (3 * (C47533 + C47491 * C47620) +
                          C47425 * (2 * C47632 + C47425 * C47634)) /
                         C47174;
    const double C47799 = C47797 + C47798;
    const double C47809 = C47425 * C47806;
    const double C176 = C170 + C171;
    const double C1089 = C1077 + C1078;
    const double C3801 = C3793 + C3794;
    const double C12390 = C12377 + C12378;
    const double C12388 = C12373 + C12374;
    const double C6359 = C6334 + C6335;
    const double C6357 = C6330 + C6331;
    const double C6358 = C6332 + C6333;
    const double C6356 = C6328 + C6329;
    const double C12389 = C12375 + C12376;
    const double C12387 = C12371 + C12372;
    const double C9294 = C9047 - C9048;
    const double C14272 = C12944 - C12943;
    const double C41089 = C32378 - C32377;
    const double C10338 = C9909 - C9910;
    const double C16787 = C16366 - C16367;
    const double C177 = C172 + C173;
    const double C3802 = C3797 + C3798;
    const double C161 = C48321 * C132;
    const double C302 = C48321 * C278;
    const double C426 = C48321 * C402;
    const double C4920 = C48408 * C402;
    const double C30366 = C48408 * C402;
    const double C1086 = C48321 * C591;
    const double C9296 = C48321 * C9038;
    const double C162 = C113 * C133;
    const double C303 = C113 * C279;
    const double C427 = C113 * C403;
    const double C4923 = C4891 * C403;
    const double C30369 = C30337 * C403;
    const double C2484 = C2448 * C945;
    const double C5249 = C4891 * C945;
    const double C14929 = C14893 * C945;
    const double C30695 = C30337 * C945;
    const double C47870 = C47868 + C47869;
    const double C2645 =
        (C47424 * C47506 + C47425 * (C47425 * C47424 * C47516 + C47950 * be) +
         C47425 * C47950 * be) /
        C47174;
    const double C2644 = C47424 * C47865 + C47950 * C47620;
    const double C9037 = 4 * (2 * C47919 + C47424 * C47922) +
                         C47424 * (3 * C47922 + C47424 * C48010);
    const double C9135 = C47425 * (3 * C47922 + C47424 * C48010);
    const double C9882 = 2 * C47919 + C47424 * C47922 + C48010 * C47620;
    const double C17616 = 4 * (2 * C47977 + C47425 * C47980) +
                          C47425 * (3 * C47980 + C47425 * C48088);
    const double C48028 = C48025 + C48026;
    const double C17849 = 4 * (2 * C48052 + C47425 * C48055) +
                          C47425 * (3 * C48055 + C47425 * C48097);
    const double C48109 = C48106 + C48107;
    const double C48542 = C48214 * C48204;
    const double C48584 = C48547 + C48214;
    const double C48550 = C48222 / C47210;
    const double C48546 = C48222 * C48204;
    const double C3786 = C48631 - (C48214 * C48205) / C47174;
    const double C47271 = C47266 - C47269;
    const double C47246 = C47242 * ae;
    const double C22089 = (-C47228) / C47210 - (C47242 * be) / C47174;
    const double C47255 = C47251 * be;
    const double C8953 =
        (C47279 / C47210 + (0 * ae) / C47174) / C47210 - (0 * be) / C47174;
    const double C11045 = C47279 / C47210 - (0 * be) / C47174;
    const double C23188 = C47279 / C47210 + (0 * ae) / C47174;
    const double C48603 = C48568 / C47174;
    const double C48625 = C48606 / C47210;
    const double C48626 = C48607 + C48572;
    const double C11038 = C48572 - C48367 / C47178;
    const double C48605 = C48569 / C47174;
    const double C7781 = C7775 + C7776;
    const double C47358 = C47353 - C47356;
    const double C47333 = C47329 * ae;
    const double C30336 = (-C47315) / C47210 - (C47329 * be) / C47174;
    const double C47342 = C47338 * be;
    const double C36050 = C47366 * C945;
    const double C36039 = C47366 * C943;
    const double C36033 = C47366 * C935;
    const double C36027 = C47366 * C941;
    const double C36021 = C47366 * C934;
    const double C36227 = C47366 * C2313;
    const double C36221 = C47366 * C2320;
    const double C36215 = C47366 * C2311;
    const double C36403 = C47366 * C2827;
    const double C36397 = C47366 * C2820;
    const double C36391 = C47366 * C2825;
    const double C36385 = C47366 * C2819;
    const double C37583 = C47366 * C2322;
    const double C37577 = C47366 * C2312;
    const double C37560 = C47366 * C2316;
    const double C37554 = C47366 * C2309;
    const double C37797 = C47366 * C3266;
    const double C37791 = C47366 * C3261;
    const double C38149 = C47366 * C2318;
    const double C38143 = C47366 * C2310;
    const double C38355 = C47366 * C3264;
    const double C38349 = C47366 * C3260;
    const double C46752 = C47366 * C10068;
    const double C17446 =
        (C47366 / C47210 + (0 * ae) / C47174) / C47210 - (0 * be) / C47174;
    const double C19822 = C47366 / C47210 - (0 * be) / C47174;
    const double C33229 = C47366 / C47210 + (0 * ae) / C47174;
    const double C48609 = C48574 / C47174;
    const double C48628 = C48612 / C47210;
    const double C4938 = C4934 * C48304;
    const double C6114 = C4934 * C48565;
    const double C27173 = C4934 * C22083;
    const double C4937 = C4933 * C114;
    const double C6113 = C4933 * C3790;
    const double C2490 = C2470 - C2471;
    const double C2487 = C2464 - C2465;
    const double C24516 = C2657 - C2658;
    const double C24510 = C2658 - C2657;
    const double C24513 = C2651 - C2652;
    const double C24507 = C2652 - C2651;
    const double C10337 = C9907 - C9908;
    const double C10334 = C9901 - C9902;
    const double C48629 = C48613 + C48578;
    const double C19817 = C48578 - C48409 / C47178;
    const double C48611 = C48575 / C47174;
    const double C19849 = C19815 * C138;
    const double C19841 = C19815 * C126;
    const double C19832 = C19815 * C137;
    const double C19824 = C19815 * C124;
    const double C19995 = C19815 * C283;
    const double C19987 = C19815 * C272;
    const double C20141 = C19815 * C407;
    const double C20133 = C19815 * C396;
    const double C21100 = C19815 * C282;
    const double C21092 = C19815 * C270;
    const double C21475 = C19815 * C595;
    const double C21467 = C19815 * C585;
    const double C21621 = C19815 * C697;
    const double C21613 = C19815 * C687;
    const double C14934 = C14913 - C14914;
    const double C14931 = C14907 - C14908;
    const double C18433 = C15096 - C15097;
    const double C18427 = C15097 - C15096;
    const double C18430 = C15090 - C15091;
    const double C18424 = C15091 - C15090;
    const double C16785 = C16362 - C16363;
    const double C16782 = C16356 - C16357;
    const double C174 = C168 * C114;
    const double C3803 = C3799 * C3791;
    const double C22098 = C3799 * C22090;
    const double C4935 = C4929 + C4930;
    const double C1095 = C1092 * C1071;
    const double C7779 = C1092 * C7773;
    const double C25923 = C1092 * C47279;
    const double C6120 = C6115 + C6116;
    const double C6360 = C6344 + C6345;
    const double C14281 = C14269 + C14270;
    const double C9298 = C48321 * C9042;
    const double C175 = C169 * C48304;
    const double C3804 = C3800 * C48366;
    const double C22099 = C3800 * C48366;
    const double C4936 = C4931 + C4932;
    const double C1096 = C1093 * C48598;
    const double C7780 = C1093 * C48598;
    const double C25924 = C1093 * C25911;
    const double C6121 = C6117 + C6118;
    const double C6361 = C6346 + C6347;
    const double C24517 = C2659 - C2660;
    const double C24511 = C2660 - C2659;
    const double C18435 = C15100 - C15101;
    const double C18429 = C15101 - C15100;
    const double C9392 = C48321 * C9140;
    const double C14280 = C48408 * C9140;
    const double C41097 = C48408 * C9140;
    const double C10350 = C48601 * C9624;
    const double C14420 = C48408 * C9624;
    const double C16799 = C48601 * C9624;
    const double C41237 = C48408 * C9624;
    const double C46597 = C36011 * C9624;
    const double C9039 =
        (4 * (2 * C47913 + C47424 * C48001 + C47914 * ae) +
         C47424 *
             (3 * C48001 +
              C47424 *
                  (2 * C47997 +
                   C47424 * (C47486 + C47424 * (C47424 * C47489 + C47525 * ae) +
                             C47714 * ae) +
                   C47673 * ae) +
              C47998 * ae) +
         (3 * C47914 + C47424 * C47998) * ae) /
        C47174;
    const double C9137 =
        (C47425 *
         (3 * C48001 +
          C47424 *
              (2 * C47997 +
               C47424 * (C47486 + C47424 * (C47424 * C47489 + C47525 * ae) +
                         C47714 * ae) +
               C47673 * ae) +
          C47998 * ae)) /
        C47174;
    const double C1087 = C113 * C592;
    const double C4072 = C48321 * C693;
    const double C5092 = C48408 * C693;
    const double C30538 = C48408 * C693;
    const double C4073 = C113 * C694;
    const double C5095 = C4891 * C694;
    const double C30541 = C30337 * C694;
    const double C2479 = C48601 * C944;
    const double C5246 = C48408 * C944;
    const double C14924 = C48601 * C944;
    const double C30692 = C48408 * C944;
    const double C36045 = C36011 * C944;
    const double C160 = C113 * C120;
    const double C301 = C113 * C268;
    const double C425 = C113 * C392;
    const double C4919 = C4891 * C392;
    const double C30365 = C30337 * C392;
    const double C1085 = C113 * C583;
    const double C4071 = C113 * C685;
    const double C5091 = C4891 * C685;
    const double C30537 = C30337 * C685;
    const double C2478 = C2448 * C936;
    const double C5245 = C4891 * C936;
    const double C14923 = C14893 * C936;
    const double C30691 = C30337 * C936;
    const double C36044 = C47366 * C936;
    const double C2671 = C2448 * C2324;
    const double C6570 = C4891 * C2324;
    const double C15112 = C14893 * C2324;
    const double C34830 = C30337 * C2324;
    const double C36233 = C47366 * C2324;
    const double C48089 = C48087 + C48084;
    const double C48013 = C48012 + C48006;
    const double C9390 = C48321 * C9136;
    const double C14276 = C48408 * C9136;
    const double C41093 = C48408 * C9136;
    const double C10344 = C48601 * C9620;
    const double C14416 = C48408 * C9620;
    const double C16793 = C48601 * C9620;
    const double C41233 = C48408 * C9620;
    const double C46591 = C36011 * C9620;
    const double C9295 = C113 * C9036;
    const double C9389 = C113 * C9134;
    const double C14275 = C4891 * C9134;
    const double C41092 = C30337 * C9134;
    const double C10343 = C2448 * C9618;
    const double C14415 = C4891 * C9618;
    const double C16792 = C14893 * C9618;
    const double C41232 = C30337 * C9618;
    const double C46590 = C47366 * C9618;
    const double C47752 = ae * C47750;
    const double C10074 =
        (2 * C47596 + be * C47626 + C47425 * C47740 +
         ae * (2 * (C47425 * C47636 + C47607 * be) +
               C47425 * (C47636 + C47425 * C47725 + C47425 * C47714 * be) +
               (C47607 + C47714 * C47620) * be) +
         C47424 * (ae * (2 * C47671 + C47425 * C47750 +
                         (C47523 + C47525 * C47620) * be) +
                   C47424 * (2 * C47672 + be * (C47486 + C47489 * C47620) +
                             C47425 * C47753))) /
        C47176;
    const double C48104 = C47425 * C47750;
    const double C17617 =
        (4 * (2 * C47971 + C47425 * C48080 + C47972 * be) +
         C47425 * (3 * C48080 +
                   C47425 * (2 * C47671 + C47425 * C47750 + C47777 * be) +
                   C48079 * be) +
         (3 * C47972 + C47425 * C48079) * be) /
        C47174;
    const double C48098 = C48096 + C48093;
    const double C48032 = C47424 * C48031;
    const double C10071 =
        (2 * C47425 * C48001 + C47425 * (C48001 + C48031 * C47620)) / C47174;
    const double C10935 =
        (3 * (C48001 + C48031 * C47620) +
         C47425 *
             (2 * C47425 * C48031 +
              C47425 *
                  (C48031 + (C47489 + C47424 * (C47424 * C47544 + C47565 * ae) +
                             C47746 * ae) *
                                C47620))) /
        C47174;
    const double C304 = C48321 * C286;
    const double C428 = C48321 * C410;
    const double C4924 = C48408 * C410;
    const double C30370 = C48408 * C410;
    const double C1088 = C48321 * C598;
    const double C4074 = C48321 * C700;
    const double C5096 = C48408 * C700;
    const double C30542 = C48408 * C700;
    const double C2485 = C48601 * C951;
    const double C5250 = C48408 * C951;
    const double C14930 = C48601 * C951;
    const double C30696 = C48408 * C951;
    const double C36051 = C36011 * C951;
    const double C2672 = C48601 * C2331;
    const double C6571 = C48408 * C2331;
    const double C15113 = C48601 * C2331;
    const double C34831 = C48408 * C2331;
    const double C36234 = C36011 * C2331;
    const double C2858 = C48601 * C2832;
    const double C15283 = C48601 * C2832;
    const double C19855 = C48614 * C2832;
    const double C33262 = C48614 * C2832;
    const double C36404 = C36011 * C2832;
    const double C9885 =
        (2 * (ae * (C47503 + C47425 * C47683 + C47425 * C47564 * be) +
              C47424 * C47763) +
         ae * (C47585 + C47425 * (C47425 * C47660 + C47688 * be) +
               C47425 * C47688 * be) +
         C47424 *
             (C47763 +
              ae * (C47650 + C47425 * (C47425 * C47424 * C47653 + C47759 * be) +
                    C47425 * C47759 * be) +
              C47424 *
                  (ae * (C47509 + C47425 * (C47425 * C47653 + C47682 * be) +
                         C47425 * C47682 * be) +
                   C47424 * (C47652 + be * C47425 * C47760 +
                             C47425 * (be * C47760 + C47425 * C47432 *
                                                         std::pow(C47428, 8) *
                                                         bs[8] * C47430))))) /
        C47176;
    const double C10075 =
        (2 * C47600 + be * C47630 + C47425 * C47763 +
         ae * (2 * (C47425 * C47650 + C47610 * be) +
               C47425 *
                   (C47650 + C47425 * (C47425 * C47424 * C47653 + C47759 * be) +
                    C47425 * C47759 * be) +
               (C47610 + C47759 * C47620) * be) +
         C47424 *
             (ae *
                  (2 * C47683 +
                   C47425 * (C47509 + C47425 * (C47425 * C47653 + C47682 * be) +
                             C47425 * C47682 * be) +
                   (C47564 + C47682 * C47620) * be) +
              C47424 *
                  (2 * C47684 + be * (C47541 + C47760 * C47620) +
                   C47425 * (C47652 + be * C47425 * C47760 +
                             C47425 * (be * C47760 + C47425 * C47432 *
                                                         std::pow(C47428, 8) *
                                                         bs[8] * C47430))))) /
        C47176;
    const double C17532 =
        (ae * (3 * (C47503 + C47425 * C47683 + C47787 * be) +
               C47425 * (2 * C47683 +
                         C47425 * (C47509 +
                                   C47425 * (C47425 * C47653 + C47682 * be) +
                                   C47425 * C47682 * be) +
                         C47790 * be) +
               (2 * C47787 + C47425 * C47790) * be) +
         C47424 * (3 * C47763 + be * (2 * C47757 + C47425 * C47791) +
                   C47425 * (2 * C47684 + be * C47791 +
                             C47425 * (C47652 + be * C47425 * C47760 +
                                       C47425 * (be * C47760 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C47710 = C47698 + C47708;
    const double C47734 = C47732 + C47733;
    const double C47773 = C47772 + C47769;
    const double C47518 = C47508 + C47517;
    const double C9043 =
        (4 * (2 * C47584 + ae * C47585 + C47424 * C47663) +
         ae * (3 * C47585 + C47424 * C47664) +
         C47424 * (3 * C47663 + ae * C47664 +
                   C47424 * (2 * C47659 + ae * C47660 +
                             C47424 * (C47652 + ae * C47424 * C47653 +
                                       C47424 * (ae * C47653 +
                                                 C47424 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C9141 =
        (3 * (C47600 + ae * (C47425 * C47650 + C47610 * be) + C47424 * C47689) +
         ae * (C47425 * C47664 + (2 * C47610 + C47424 * C47688) * be) +
         C47424 *
             (2 * C47689 + ae * (C47425 * C47660 + C47688 * be) +
              C47424 *
                  (C47684 +
                   ae * (C47425 * C47424 * C47653 + C47424 * C47682 * be) +
                   C47424 * (ae * (C47425 * C47653 + C47682 * be) +
                             C47424 * (be * C47432 * C47544 +
                                       C47425 * C47432 * std::pow(C47428, 8) *
                                           bs[8] * C47430))))) /
        C47176;
    const double C9040 = (4 * (2 * C47580 + C47424 * C47585) +
                          C47424 * (3 * C47585 + C47424 * C47664)) /
                         C47174;
    const double C9138 = (C47425 * (3 * C47585 + C47424 * C47664) +
                          (3 * C47922 + C47424 * C48010) * be) /
                         C47174;
    const double C9883 =
        (2 * C47580 + C47424 * C47585 +
         C47425 * (C47425 * C47664 + C48010 * be) + C47425 * C48010 * be) /
        C47174;
    const double C47711 = C47696 + C47709;
    const double C47550 = C47540 + C47549;
    const double C17622 =
        (4 * (2 * C47600 + be * C47630 + C47425 * C47763) +
         be * (3 * C47630 + C47425 * C47799) +
         C47425 * (3 * C47763 + be * C47799 +
                   C47425 * (2 * C47684 + be * C47791 +
                             C47425 * (C47652 + be * C47425 * C47760 +
                                       C47425 * (be * C47760 +
                                                 C47425 * C47432 *
                                                     std::pow(C47428, 8) *
                                                     bs[8] * C47430))))) /
        C47176;
    const double C17620 = (4 * (2 * C47628 + C47425 * C47630) +
                           C47425 * (3 * C47630 + C47425 * C47799)) /
                          C47174;
    const double C47810 = C47808 + C47809;
    const double C1094 = C1089 + C1090;
    const double C3805 = C3801 + C3795;
    const double C14282 = C14271 + C14272;
    const double C121 = 5 * (3 * C47860 + C47432 * C47865) +
                        C47432 * (4 * C47865 + C47432 * C47870);
    const double C269 = C47424 * (4 * C47865 + C47432 * C47870);
    const double C393 = C47425 * (4 * C47865 + C47432 * C47870);
    const double C584 = 3 * C47860 + C47432 * C47865 + C47870 * C47575;
    const double C686 = C47425 * C47424 * C47870;
    const double C937 = 3 * C47860 + C47432 * C47865 + C47870 * C47620;
    const double C9286 = 5 * (3 * C47914 + C47424 * C47998) +
                         C47424 * (4 * C47998 + C47424 * C48028);
    const double C9380 = C47425 * (4 * C47998 + C47424 * C48028);
    const double C9619 = 3 * C47914 + C47424 * C47998 + C48028 * C47620;
    const double C18079 = 5 * (3 * C47972 + C47425 * C48079) +
                          C47425 * (4 * C48079 + C47425 * C48109);
    const double C48580 = C48542 / C47174;
    const double C48618 = C48584 / C47210;
    const double C48619 = C48586 + C48550;
    const double C3788 = C48550 - C48220 / C47178;
    const double C48583 = C48546 / C47174;
    const double C47250 = C47246 / C47174;
    const double C22096 = C166 * C22089;
    const double C22092 = C164 * C22089;
    const double C27172 = C4933 * C22089;
    const double C47261 = C47255 / C47174;
    const double C48640 = C48603 + C48635;
    const double C11037 = C48625 - (C48369 * C48358) / C47174;
    const double C8946 = C48626 / C47210 - C48367 / C48587;
    const double C48636 = C48605 + C48625;
    const double C7782 = C7781 + C7777;
    const double C47337 = C47333 / C47174;
    const double C30367 = C30336 * C131;
    const double C30363 = C30336 * C119;
    const double C30360 = C30336 * C129;
    const double C30356 = C30336 * C118;
    const double C30352 = C30336 * C127;
    const double C30348 = C30336 * C117;
    const double C30344 = C30336 * C125;
    const double C30340 = C30336 * C116;
    const double C30539 = C30336 * C277;
    const double C30535 = C30336 * C267;
    const double C30531 = C30336 * C275;
    const double C30527 = C30336 * C266;
    const double C30523 = C30336 * C273;
    const double C30519 = C30336 * C265;
    const double C30693 = C30336 * C401;
    const double C30689 = C30336 * C391;
    const double C30685 = C30336 * C399;
    const double C30681 = C30336 * C390;
    const double C30677 = C30336 * C397;
    const double C30673 = C30336 * C389;
    const double C31571 = C30336 * C590;
    const double C31567 = C30336 * C582;
    const double C31564 = C30336 * C588;
    const double C31560 = C30336 * C581;
    const double C31805 = C30336 * C1252;
    const double C31801 = C30336 * C1246;
    const double C31782 = C30336 * C586;
    const double C31778 = C30336 * C580;
    const double C31774 = C30336 * C271;
    const double C31770 = C30336 * C264;
    const double C32023 = C30336 * C1442;
    const double C32019 = C30336 * C1436;
    const double C32015 = C30336 * C690;
    const double C32011 = C30336 * C683;
    const double C32375 = C30336 * C1250;
    const double C32371 = C30336 * C1245;
    const double C32587 = C30336 * C1440;
    const double C32583 = C30336 * C1435;
    const double C32579 = C30336 * C688;
    const double C32575 = C30336 * C682;
    const double C34828 = C30336 * C692;
    const double C34824 = C30336 * C684;
    const double C41094 = C30336 * C1727;
    const double C41090 = C30336 * C1723;
    const double C41234 = C30336 * C1891;
    const double C41230 = C30336 * C1887;
    const double C47348 = C47342 / C47174;
    const double C36057 = C36038 - C36039;
    const double C36054 = C36032 - C36033;
    const double C37572 = C36221 - C36222;
    const double C37566 = C36222 - C36221;
    const double C37569 = C36215 - C36216;
    const double C37563 = C36216 - C36215;
    const double C46585 = C38150 - C38149;
    const double C46582 = C38144 - C38143;
    const double C19854 = C19822 * C2827;
    const double C19846 = C19822 * C2820;
    const double C19839 = C19822 * C2825;
    const double C19831 = C19822 * C2819;
    const double C20000 = C19822 * C3266;
    const double C19992 = C19822 * C3261;
    const double C20146 = C19822 * C3680;
    const double C20138 = C19822 * C3675;
    const double C21107 = C19822 * C3264;
    const double C21099 = C19822 * C3260;
    const double C21472 = C19822 * C10068;
    const double C21626 = C19822 * C10933;
    const double C21618 = C19822 * C10930;
    const double C33261 = C33229 * C2827;
    const double C33253 = C33229 * C2820;
    const double C33246 = C33229 * C2825;
    const double C33238 = C33229 * C2819;
    const double C33407 = C33229 * C3266;
    const double C33399 = C33229 * C3261;
    const double C33553 = C33229 * C3680;
    const double C33545 = C33229 * C3675;
    const double C41839 = C33229 * C3264;
    const double C41831 = C33229 * C3260;
    const double C42204 = C33229 * C10068;
    const double C42358 = C33229 * C10933;
    const double C42350 = C33229 * C10930;
    const double C48641 = C48609 + C48637;
    const double C19816 = C48628 - (C48411 * C48400) / C47174;
    const double C4941 = C4937 + C4938;
    const double C6119 = C6113 + C6114;
    const double C2493 = C2489 + C2490;
    const double C2492 = C2486 + C2487;
    const double C24521 = C24515 + C24516;
    const double C24519 = C24509 + C24510;
    const double C24520 = C24512 + C24513;
    const double C24518 = C24506 + C24507;
    const double C10352 = C10336 + C10337;
    const double C10351 = C10333 + C10334;
    const double C33260 = C48629 * C950;
    const double C33252 = C48629 * C942;
    const double C33243 = C48629 * C949;
    const double C33235 = C48629 * C940;
    const double C33406 = C48629 * C2329;
    const double C33398 = C48629 * C2319;
    const double C33552 = C48629 * C2831;
    const double C33544 = C48629 * C2824;
    const double C41836 = C48629 * C2327;
    const double C41828 = C48629 * C2315;
    const double C42211 = C48629 * C2328;
    const double C42203 = C48629 * C2317;
    const double C42357 = C48629 * C3269;
    const double C42349 = C48629 * C3263;
    const double C17440 = C48629 / C47210 - C48409 / C48587;
    const double C19853 = C19817 * C950;
    const double C19845 = C19817 * C942;
    const double C19836 = C19817 * C949;
    const double C19828 = C19817 * C940;
    const double C19999 = C19817 * C2329;
    const double C19991 = C19817 * C2319;
    const double C20145 = C19817 * C2831;
    const double C20137 = C19817 * C2824;
    const double C21104 = C19817 * C2327;
    const double C21096 = C19817 * C2315;
    const double C21479 = C19817 * C2328;
    const double C21471 = C19817 * C2317;
    const double C21625 = C19817 * C3269;
    const double C21617 = C19817 * C3263;
    const double C48638 = C48611 + C48628;
    const double C14938 = C14934 + C14935;
    const double C14937 = C14931 + C14932;
    const double C18439 = C18433 + C18434;
    const double C18437 = C18427 + C18428;
    const double C18438 = C18430 + C18431;
    const double C18436 = C18424 + C18425;
    const double C16801 = C16785 + C16786;
    const double C16800 = C16782 + C16783;
    const double C3806 = C3802 + C3803;
    const double C4939 = C4935 * C114;
    const double C6122 = C6120 * C3791;
    const double C27174 = C6120 * C22090;
    const double C178 = C174 + C175;
    const double C4940 = C4936 * C48304;
    const double C6123 = C6121 * C48366;
    const double C27175 = C6121 * C48366;
    const double C9297 = C113 * C9039;
    const double C9391 = C113 * C9137;
    const double C14279 = C4891 * C9137;
    const double C41096 = C30337 * C9137;
    const double C17619 =
        (4 * (2 * C47979 + C47425 * C48089 + C47980 * be) +
         C47425 *
             (3 * C48089 +
              C47425 *
                  (2 * C47683 +
                   C47425 * (C47509 + C47425 * (C47425 * C47653 + C47682 * be) +
                             C47425 * C47682 * be) +
                   C47790 * be) +
              C48088 * be) +
         (3 * C47980 + C47425 * C48088) * be) /
        C47174;
    const double C9041 =
        (4 * (2 * C47921 + C47424 * C48013 + C47922 * ae) +
         C47424 *
             (3 * C48013 +
              C47424 *
                  (2 * C48009 +
                   C47424 * (C47541 + C47424 * (C47424 * C47760 + C47682 * ae) +
                             C47759 * ae) +
                   C47688 * ae) +
              C48010 * ae) +
         (3 * C47922 + C47424 * C48010) * ae) /
        C47174;
    const double C9139 =
        (C47425 *
         (3 * C48013 +
          C47424 *
              (2 * C48009 +
               C47424 * (C47541 + C47424 * (C47424 * C47760 + C47682 * ae) +
                         C47759 * ae) +
               C47688 * ae) +
          C48010 * ae)) /
        C47174;
    const double C9884 =
        (2 * C47921 + C47424 * C48013 + C47922 * ae +
         (2 * C48009 +
          C47424 * (C47541 + C47424 * (C47424 * C47760 + C47682 * ae) +
                    C47759 * ae) +
          C47688 * ae) *
             C47620) /
        C47174;
    const double C10073 =
        (2 * C47425 * C48013 +
         C47425 * (C48013 + (C47541 + C47424 * (C47424 * C47760 + C47682 * ae) +
                             C47759 * ae) *
                                C47620)) /
        C47174;
    const double C47755 = C47752 + C47754;
    const double C10528 = C48601 * C10074;
    const double C16973 = C48601 * C10074;
    const double C21481 = C48614 * C10074;
    const double C42213 = C48614 * C10074;
    const double C46759 = C36011 * C10074;
    const double C48108 = C48103 + C48104;
    const double C17850 =
        (4 * (2 * C48054 + C47425 * C48098 + C48055 * be) +
         C47425 * (3 * C48098 +
                   C47425 * (2 * C47725 +
                             C47425 * (C47693 +
                                       C47425 * (C47425 * C47424 * C47512 +
                                                 C47746 * be) +
                                       C47425 * C47746 * be) +
                             C47783 * be) +
                   C48097 * be) +
         (3 * C48055 + C47425 * C48097) * be) /
        C47174;
    const double C48033 = C48020 + C48032;
    const double C10527 = C2448 * C10071;
    const double C16972 = C14893 * C10071;
    const double C21480 = C19822 * C10071;
    const double C42212 = C33229 * C10071;
    const double C46758 = C47366 * C10071;
    const double C10503 =
        (2 * (ae * (2 * C47671 + C47425 * C47750 +
                    (C47523 + C47525 * C47620) * be) +
              C47424 * C47773) +
         ae * (2 * (C47425 * C47643 + C47673 * be) +
               C47425 * (C47643 + C47425 * (C47425 * C47702 + C47724 * be) +
                         C47425 * C47724 * be) +
               (C47673 + C47724 * C47620) * be) +
         C47424 *
             (C47773 +
              ae *
                  (2 * C47725 +
                   C47425 * (C47693 +
                             C47425 * (C47425 * C47424 * C47512 + C47746 * be) +
                             C47425 * C47746 * be) +
                   (C47714 + C47746 * C47620) * be) +
              C47424 *
                  (ae * (2 * C47721 +
                         C47425 * (C47474 +
                                   C47425 * (C47425 * C47512 + C47565 * be) +
                                   C47425 * C47565 * be) +
                         (C47525 + C47565 * C47620) * be) +
                   C47424 * (2 * C47722 + be * (C47489 + C47544 * C47620) +
                             C47425 * (C47457 + be * C47425 * C47544 +
                                       C47425 * (be * C47544 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C10936 =
        (ae * (3 * (C47468 + C47425 * C47671 + C47775 * be) +
               C47425 * (2 * C47671 + C47425 * C47750 + C47777 * be) +
               (2 * C47775 + C47425 * C47777) * be) +
         C47424 * (3 * C47740 + be * (2 * C47736 + C47425 * C47770) +
                   C47425 * C47773)) /
        C47176;
    const double C10937 =
        (3 * C47740 + be * (2 * C47736 + C47425 * C47770) + C47425 * C47773 +
         ae * (3 * (C47636 + C47425 * C47725 + C47779 * be) +
               C47425 * (2 * C47725 +
                         C47425 * (C47693 +
                                   C47425 * (C47425 * C47424 * C47512 +
                                             C47746 * be) +
                                   C47425 * C47746 * be) +
                         C47783 * be) +
               (2 * C47779 + C47425 * C47783) * be) +
         C47424 *
             (ae * (3 * C47750 +
                    C47425 *
                        (2 * C47721 +
                         C47425 * (C47474 +
                                   C47425 * (C47425 * C47512 + C47565 * be) +
                                   C47425 * C47565 * be) +
                         C47784 * be) +
                    (2 * C47743 + C47425 * C47784) * be) +
              C47424 *
                  (3 * C47753 + be * (2 * C47744 + C47425 * C47785) +
                   C47425 * (2 * C47722 + be * C47785 +
                             C47425 * (C47457 + be * C47425 * C47544 +
                                       C47425 * (be * C47544 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C17621 =
        (4 * (2 * C47596 + be * C47626 + C47425 * C47740) +
         be * (3 * C47626 + C47425 * C47795) +
         C47425 * (3 * C47740 + be * C47795 + C47425 * C47773)) /
        C47176;
    const double C17852 =
        (ae * (4 * (2 * C47671 + C47425 * C47750 + C47777 * be) +
               C47425 * (3 * C47750 +
                         C47425 * (2 * C47721 +
                                   C47425 * (C47474 +
                                             C47425 * (C47425 * C47512 +
                                                       C47565 * be) +
                                             C47425 * C47565 * be) +
                                   C47784 * be) +
                         C47805 * be) +
               (3 * C47777 + C47425 * C47805) * be) +
         C47424 *
             (4 * C47773 + be * (3 * C47770 + C47425 * C47806) +
              C47425 *
                  (3 * C47753 + be * C47806 +
                   C47425 * (2 * C47722 + be * C47785 +
                             C47425 * (C47457 + be * C47425 * C47544 +
                                       C47425 * (be * C47544 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C599 =
        (3 * C47450 + C47432 * C47461 + ae * C47424 * C47518 +
         C47424 * (ae * C47518 +
                   C47424 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C701 =
        (ae * (C47425 * C47518 +
               (3 * (C47523 + C47525 * C47440) +
                C47432 * (2 * C47432 * C47525 +
                          C47432 * (C47525 + C47446 * C47445 * C47440))) *
                   be) +
         C47424 * (be * (3 * C47491 +
                         C47432 * (2 * C47432 * C47489 +
                                   C47432 * (C47489 + C47453 * C47454 * C47480 *
                                                          C47440))) +
                   C47425 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C134 = (5 * (3 * C47501 + C47432 * C47506) +
                         C47432 * (4 * C47506 + C47432 * C47518)) /
                        C47174;
    const double C280 = (C47424 * (4 * C47506 + C47432 * C47518)) / C47174;
    const double C404 = (C47425 * (4 * C47506 + C47432 * C47518) +
                         (4 * (2 * C47559 + C47432 * C47562) +
                          C47432 * (3 * C47562 + C47432 * C47570)) *
                             be) /
                        C47174;
    const double C593 =
        (3 * C47501 + C47432 * C47506 + C47518 * C47575) / C47174;
    const double C695 =
        (C47425 * C47424 * C47518 + C47424 * C47870 * be) / C47174;
    const double C946 =
        (3 * C47501 + C47432 * C47506 +
         C47425 * (C47425 * C47518 + C47870 * be) + C47425 * C47870 * be) /
        C47174;
    const double C9289 =
        (5 * (3 * C47647 + ae * C47648 + C47424 * C47710) +
         ae * (4 * C47648 + C47424 * C47711) +
         C47424 *
             (4 * C47710 + ae * C47711 +
              C47424 *
                  (3 * C47706 + ae * C47707 +
                   C47424 * (2 * C47700 + ae * C47702 +
                             C47424 * (C47457 + ae * C47424 * C47512 +
                                       C47424 * (ae * C47512 +
                                                 C47424 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C9383 =
        (4 * (2 * C47676 + ae * (C47425 * C47643 + C47673 * be) +
              C47424 * C47734) +
         ae * (C47425 * C47711 + (3 * C47673 + C47424 * C47731) * be) +
         C47424 *
             (3 * C47734 + ae * (C47425 * C47707 + C47731 * be) +
              C47424 *
                  (2 * C47730 + ae * (C47425 * C47702 + C47724 * be) +
                   C47424 *
                       (C47722 +
                        ae * (C47425 * C47424 * C47512 + C47424 * C47565 * be) +
                        C47424 * (ae * (C47425 * C47512 + C47565 * be) +
                                  C47424 * (be * C47544 +
                                            C47425 * std::pow(C47428, 8) *
                                                bs[8] * C47430)))))) /
        C47176;
    const double C9287 = (5 * (3 * C47578 + C47424 * C47648) +
                          C47424 * (4 * C47648 + C47424 * C47711)) /
                         C47174;
    const double C9381 = (C47425 * (4 * C47648 + C47424 * C47711) +
                          (4 * C47998 + C47424 * C48028) * be) /
                         C47174;
    const double C9622 =
        (3 * C47578 + C47424 * C47648 +
         C47425 * (C47425 * C47711 + C48028 * be) + C47425 * C48028 * be) /
        C47174;
    const double C952 =
        (3 * C47450 + C47432 * C47461 + be * C47425 * C47550 +
         C47425 * (be * C47550 +
                   C47425 * (3 * C47459 +
                             C47432 * (2 * C47432 * C47457 +
                                       C47432 * (C47457 + std::pow(C47428, 8) *
                                                              bs[8] * C47430 *
                                                              C47440))))) /
        C47176;
    const double C135 = (5 * (3 * C47533 + C47432 * C47538) +
                         C47432 * (4 * C47538 + C47432 * C47550)) /
                        C47174;
    const double C281 = (C47424 * (4 * C47538 + C47432 * C47550) +
                         (4 * (2 * C47559 + C47432 * C47562) +
                          C47432 * (3 * C47562 + C47432 * C47570)) *
                             ae) /
                        C47174;
    const double C405 = (C47425 * (4 * C47538 + C47432 * C47550)) / C47174;
    const double C594 =
        (3 * C47533 + C47432 * C47538 +
         C47424 * (C47424 * C47550 + C47870 * ae) + C47424 * C47870 * ae) /
        C47174;
    const double C696 = (C47425 * (C47424 * C47550 + C47870 * ae)) / C47174;
    const double C947 =
        (3 * C47533 + C47432 * C47538 + C47550 * C47620) / C47174;
    const double C18082 =
        (5 * (3 * C47740 + be * C47795 + C47425 * C47773) +
         be * (4 * C47795 + C47425 * C47810) +
         C47425 *
             (4 * C47773 + be * C47810 +
              C47425 *
                  (3 * C47753 + be * C47806 +
                   C47425 * (2 * C47722 + be * C47785 +
                             C47425 * (C47457 + be * C47425 * C47544 +
                                       C47425 * (be * C47544 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C18081 = (5 * (3 * C47626 + C47425 * C47795) +
                           C47425 * (4 * C47795 + C47425 * C47810)) /
                          C47174;
    const double C1097 = C1094 + C1091;
    const double C3807 = C3805 + C3796;
    const double C48639 = C48580 + C48631;
    const double C3787 = C48618 - (C48222 * C48205) / C47174;
    const double C106 = C48619 / C47210 - C48220 / C48587;
    const double C48632 = C48583 + C48618;
    const double C47254 = C47250 - C47231;
    const double C22101 = C22096 + C22097;
    const double C22100 = C22092 + C22093;
    const double C27176 = C27172 + C27173;
    const double C8943 =
        (C48633 + 2 * C48362) / C47210 - (C48640 * C48358) / C47174;
    const double C8944 =
        (C48621 + 2 * C48369 + C48640) / C47210 - (C48636 * C48358) / C47174;
    const double C8945 = (C48598 + C48366 / C47174 + C48636) / C47210 -
                         (C48626 * C48358) / C47174;
    const double C7783 = C7782 + C7778;
    const double C47341 = C47337 - C47318;
    const double C30377 = C30359 - C30360;
    const double C30375 = C30355 - C30356;
    const double C30373 = C30351 - C30352;
    const double C30371 = C30347 - C30348;
    const double C34421 = C30532 - C30531;
    const double C34626 = C30531 - C30532;
    const double C34419 = C30528 - C30527;
    const double C34624 = C30527 - C30528;
    const double C31795 = C30523 - C30524;
    const double C31787 = C30524 - C30523;
    const double C31793 = C30519 - C30520;
    const double C31785 = C30520 - C30519;
    const double C31799 = C31564 - C31563;
    const double C31791 = C31563 - C31564;
    const double C31797 = C31560 - C31559;
    const double C31789 = C31559 - C31560;
    const double C32369 = C31781 - C31782;
    const double C32367 = C31777 - C31778;
    const double C41088 = C32376 - C32375;
    const double C41086 = C32372 - C32371;
    const double C33256 = C48641 * C138;
    const double C33248 = C48641 * C126;
    const double C33239 = C48641 * C137;
    const double C33231 = C48641 * C124;
    const double C33402 = C48641 * C283;
    const double C33394 = C48641 * C272;
    const double C33548 = C48641 * C407;
    const double C33540 = C48641 * C396;
    const double C41832 = C48641 * C282;
    const double C41824 = C48641 * C270;
    const double C42207 = C48641 * C595;
    const double C42199 = C48641 * C585;
    const double C42353 = C48641 * C697;
    const double C42345 = C48641 * C687;
    const double C17437 =
        (C48634 + 2 * C48404) / C47210 - (C48641 * C48400) / C47174;
    const double C19851 = C19816 * C408;
    const double C19843 = C19816 * C398;
    const double C19834 = C19816 * C407;
    const double C19826 = C19816 * C396;
    const double C19997 = C19816 * C698;
    const double C19989 = C19816 * C689;
    const double C20143 = C19816 * C949;
    const double C20135 = C19816 * C940;
    const double C21102 = C19816 * C697;
    const double C21094 = C19816 * C687;
    const double C21477 = C19816 * C1447;
    const double C21469 = C19816 * C1439;
    const double C21623 = C19816 * C2327;
    const double C21615 = C19816 * C2315;
    const double C2495 = C2493 + C2491;
    const double C2494 = C2492 + C2488;
    const double C24525 = C24521 + C24517;
    const double C24523 = C24519 + C24511;
    const double C24524 = C24520 + C24514;
    const double C24522 = C24518 + C24508;
    const double C10354 = C10352 + C10338;
    const double C10353 = C10351 + C10335;
    const double C33258 = C48638 * C408;
    const double C33250 = C48638 * C398;
    const double C33241 = C48638 * C407;
    const double C33233 = C48638 * C396;
    const double C33404 = C48638 * C698;
    const double C33396 = C48638 * C689;
    const double C33550 = C48638 * C949;
    const double C33542 = C48638 * C940;
    const double C41834 = C48638 * C697;
    const double C41826 = C48638 * C687;
    const double C42209 = C48638 * C1447;
    const double C42201 = C48638 * C1439;
    const double C42355 = C48638 * C2327;
    const double C42347 = C48638 * C2315;
    const double C17438 =
        (C48623 + 2 * C48411 + C48641) / C47210 - (C48638 * C48400) / C47174;
    const double C17439 = (C48601 + C48408 / C47174 + C48638) / C47210 -
                          (C48629 * C48400) / C47174;
    const double C14940 = C14938 + C14936;
    const double C14939 = C14937 + C14933;
    const double C18443 = C18439 + C18435;
    const double C18441 = C18437 + C18429;
    const double C18442 = C18438 + C18432;
    const double C18440 = C18436 + C18426;
    const double C16803 = C16801 + C16787;
    const double C16802 = C16800 + C16784;
    const double C3808 = C3806 + C3804;
    const double C6124 = C6119 + C6122;
    const double C4942 = C4939 + C4940;
    const double C9625 =
        (3 * (C47740 + ae * (C47636 + C47425 * C47725 + C47425 * C47714 * be) +
              C47424 * C47755) +
         ae * (C47648 + C47425 * (C47425 * C47707 + C47731 * be) +
               C47425 * C47731 * be) +
         C47424 *
             (2 * C47755 +
              ae * (C47643 + C47425 * (C47425 * C47702 + C47724 * be) +
                    C47425 * C47724 * be) +
              C47424 *
                  (C47753 +
                   ae * (C47693 +
                         C47425 * (C47425 * C47424 * C47512 + C47746 * be) +
                         C47425 * C47746 * be) +
                   C47424 * (ae * (C47474 +
                                   C47425 * (C47425 * C47512 + C47565 * be) +
                                   C47425 * C47565 * be) +
                             C47424 * (C47457 + be * C47425 * C47544 +
                                       C47425 * (be * C47544 +
                                                 C47425 * std::pow(C47428, 8) *
                                                     bs[8] * C47430)))))) /
        C47176;
    const double C48110 = C48108 + C48105;
    const double C48034 = C48033 + C48024;
    const double C21627 = C48614 * C10936;
    const double C42359 = C48614 * C10936;
    const double C1098 = C1097 + C1095;
    const double C103 =
        (C48630 + 2 * C48214) / C47210 - (C48639 * C48205) / C47174;
    const double C104 =
        (C48617 + 2 * C48222 + C48639) / C47210 - (C48632 * C48205) / C47174;
    const double C105 = (C48585 + C48219 / C47174 + C48632) / C47210 -
                        (C48619 * C48205) / C47174;
    const double C47260 = C47254 / C47210;
    const double C47259 = C47172 * C47254;
    const double C22103 = C22101 + C22098;
    const double C22102 = C22100 + C22094;
    const double C27177 = C27176 + C27174;
    const double C7784 = C7783 + C7779;
    const double C47347 = C47341 / C47210;
    const double C47346 = C47191 * C47341;
    const double C30382 = C30377 + C30378;
    const double C30381 = C30375 + C30376;
    const double C30380 = C30373 + C30374;
    const double C30379 = C30371 + C30372;
    const double C34425 = C34421 + C34422;
    const double C34629 = C34626 + C34627;
    const double C34424 = C34419 + C34420;
    const double C34628 = C34624 + C34625;
    const double C31814 = C31795 + C31796;
    const double C31810 = C31787 + C31788;
    const double C31813 = C31793 + C31794;
    const double C31809 = C31785 + C31786;
    const double C31816 = C31799 + C31800;
    const double C31812 = C31791 + C31792;
    const double C31815 = C31797 + C31798;
    const double C31811 = C31789 + C31790;
    const double C32380 = C32369 + C32370;
    const double C32379 = C32367 + C32368;
    const double C41099 = C41088 + C41089;
    const double C41098 = C41086 + C41087;
    const double C2497 = C2495 * C48304;
    const double C2496 = C2494 * C114;
    const double C14942 = C14940 * C48304;
    const double C14941 = C14939 * C114;
    const double C6125 = C6124 + C6123;
    const double C18080 =
        (5 * (3 * C48080 + C47425 * C48110 + C48079 * be) +
         C47425 * (4 * C48110 +
                   C47425 * (3 * C47750 +
                             C47425 * (2 * C47721 +
                                       C47425 * (C47474 +
                                                 C47425 * (C47425 * C47512 +
                                                           C47565 * be) +
                                                 C47425 * C47565 * be) +
                                       C47784 * be) +
                             C47805 * be) +
                   C48109 * be) +
         (4 * C48079 + C47425 * C48109) * be) /
        C47174;
    const double C9288 =
        (5 * (3 * C48001 + C47424 * C48034 + C47998 * ae) +
         C47424 * (4 * C48034 +
                   C47424 * (3 * C48031 +
                             C47424 * (2 * C48027 +
                                       C47424 * (C47489 +
                                                 C47424 * (C47424 * C47544 +
                                                           C47565 * ae) +
                                                 C47746 * ae) +
                                       C47724 * ae) +
                             C47731 * ae) +
                   C48028 * ae) +
         (4 * C47998 + C47424 * C48028) * ae) /
        C47174;
    const double C9382 =
        (C47425 *
         (4 * C48034 +
          C47424 *
              (3 * C48031 +
               C47424 * (2 * C48027 +
                         C47424 * (C47489 +
                                   C47424 * (C47424 * C47544 + C47565 * ae) +
                                   C47746 * ae) +
                         C47724 * ae) +
               C47731 * ae) +
          C48028 * ae)) /
        C47174;
    const double C9621 =
        (2 * C47913 + C47424 * C48001 + C47914 * ae + C48034 * C47620) / C47174;
    const double C9623 =
        (3 * C48001 + C47424 * C48034 + C47998 * ae +
         (3 * C48031 +
          C47424 *
              (2 * C48027 +
               C47424 * (C47489 + C47424 * (C47424 * C47544 + C47565 * ae) +
                         C47746 * ae) +
               C47724 * ae) +
          C47731 * ae) *
             C47620) /
        C47174;
    const double C10502 =
        (2 * C47425 * C48034 +
         C47425 *
             (C48034 +
              (2 * C48027 +
               C47424 * (C47489 + C47424 * (C47424 * C47544 + C47565 * ae) +
                         C47746 * ae) +
               C47724 * ae) *
                  C47620)) /
        C47174;
    const double C1099 = C1098 + C1096;
    const double C47265 = C47260 - C47261;
    const double C47264 = C47259 + C48565;
    const double C22105 = C22103 + C22099;
    const double C22104 = C22102 + C22095;
    const double C27178 = C27177 + C27175;
    const double C7785 = C7784 + C7780;
    const double C47352 = C47347 - C47348;
    const double C47351 = C47346 + C48566;
    const double C30386 = C30382 * C48304;
    const double C30385 = C30381 * C114;
    const double C30384 = C30380 * C48304;
    const double C34418 = C30380 * C48565;
    const double C39038 = C30380 * C22083;
    const double C30383 = C30379 * C114;
    const double C34417 = C30379 * C3790;
    const double C39037 = C30379 * C22089;
    const double C34427 = C34425 * C48366;
    const double C39040 = C34425 * C48366;
    const double C34426 = C34424 * C3791;
    const double C39039 = C34424 * C22090;
    const double C2498 = C2496 + C2497;
    const double C14943 = C14941 + C14942;
    const double C10349 = C2448 * C9621;
    const double C14419 = C4891 * C9621;
    const double C16798 = C14893 * C9621;
    const double C41236 = C30337 * C9621;
    const double C46596 = C47366 * C9621;
    const double C25921 = C1079 * C47265;
    const double C8952 =
        (C47265 / C47210 + ((C47172 * C47279 + C25911) * ae) / C47174) /
            C47210 -
        ((C47172 * (C47279 / C47210 + (0 * ae) / C47174) + C48608) * be) /
            C47174;
    const double C11044 =
        C47265 / C47210 - ((C47172 * C47279 + C25911) * be) / C47174;
    const double C23187 =
        C47265 / C47210 + ((C47172 * C47279 + C25911) * ae) / C47174;
    const double C47268 = C47264 * be;
    const double C36048 = C47352 * C401;
    const double C36042 = C47352 * C391;
    const double C36037 = C47352 * C399;
    const double C36031 = C47352 * C390;
    const double C36025 = C47352 * C397;
    const double C36019 = C47352 * C389;
    const double C36231 = C47352 * C692;
    const double C36225 = C47352 * C684;
    const double C36219 = C47352 * C690;
    const double C36213 = C47352 * C683;
    const double C36401 = C47352 * C943;
    const double C36395 = C47352 * C935;
    const double C36389 = C47352 * C941;
    const double C36383 = C47352 * C934;
    const double C37581 = C47352 * C1442;
    const double C37575 = C47352 * C1436;
    const double C37558 = C47352 * C688;
    const double C37552 = C47352 * C682;
    const double C37795 = C47352 * C2320;
    const double C37789 = C47352 * C2311;
    const double C38147 = C47352 * C1440;
    const double C38141 = C47352 * C1435;
    const double C38353 = C47352 * C2316;
    const double C38347 = C47352 * C2309;
    const double C46594 = C47352 * C1891;
    const double C46588 = C47352 * C1887;
    const double C46756 = C47352 * C2318;
    const double C46750 = C47352 * C2310;
    const double C17445 =
        (C47352 / C47210 + ((C47191 * C47366 + C36011) * ae) / C47174) /
            C47210 -
        ((C47191 * (C47366 / C47210 + (0 * ae) / C47174) + C48614) * be) /
            C47174;
    const double C19821 =
        C47352 / C47210 - ((C47191 * C47366 + C36011) * be) / C47174;
    const double C33228 =
        C47352 / C47210 + ((C47191 * C47366 + C36011) * ae) / C47174;
    const double C47355 = C47351 * be;
    const double C30388 = C30385 + C30386;
    const double C30387 = C30383 + C30384;
    const double C34423 = C34417 + C34418;
    const double C39041 = C39037 + C39038;
    const double C47270 = C47268 / C47174;
    const double C36056 = C36036 - C36037;
    const double C36053 = C36030 - C36031;
    const double C37571 = C36219 - C36220;
    const double C37565 = C36220 - C36219;
    const double C37568 = C36213 - C36214;
    const double C37562 = C36214 - C36213;
    const double C46584 = C38148 - C38147;
    const double C46581 = C38142 - C38141;
    const double C19852 = C19821 * C943;
    const double C19844 = C19821 * C935;
    const double C19837 = C19821 * C941;
    const double C19829 = C19821 * C934;
    const double C19998 = C19821 * C2320;
    const double C19990 = C19821 * C2311;
    const double C20144 = C19821 * C2825;
    const double C20136 = C19821 * C2819;
    const double C21105 = C19821 * C2316;
    const double C21097 = C19821 * C2309;
    const double C21478 = C19821 * C2318;
    const double C21470 = C19821 * C2310;
    const double C21624 = C19821 * C3264;
    const double C21616 = C19821 * C3260;
    const double C33259 = C33228 * C943;
    const double C33251 = C33228 * C935;
    const double C33244 = C33228 * C941;
    const double C33236 = C33228 * C934;
    const double C33405 = C33228 * C2320;
    const double C33397 = C33228 * C2311;
    const double C33551 = C33228 * C2825;
    const double C33543 = C33228 * C2819;
    const double C41837 = C33228 * C2316;
    const double C41829 = C33228 * C2309;
    const double C42210 = C33228 * C2318;
    const double C42202 = C33228 * C2310;
    const double C42356 = C33228 * C3264;
    const double C42348 = C33228 * C3260;
    const double C47357 = C47355 / C47174;
    const double C34428 = C34423 + C34426;
    const double C39042 = C39041 + C39039;
    const double C47272 = C47258 - C47270;
    const double C47359 = C47345 - C47357;
    const double C34429 = C34428 + C34427;
    const double C39043 = C39042 + C39040;
    const double C47273 = C47272 + C47243;
    const double C47360 = C47359 + C47330;
    const double C25919 = C164 * C47273;
    const double C8949 =
        (((((0 - (C47172 * C47226) / C47174) * ae) / C47174 -
           (0 * be) / C47178 + (2 * C47227) / C47174) /
              C47210 -
          ((C47172 * C47262 + 0) * be) / C47174 + C47236 - C47249) /
             C47210 +
         ((C47172 * C47271 + 0) * ae) / C47174) /
            C47210 -
        ((C47172 * (C47271 / C47210 +
                    ((C47172 * C47273 + C48362) * ae) / C47174 + C47265) +
          C48640) *
         be) /
            C47174 +
        C47273 / C47210 + ((C47172 * C47265 + C48369) * ae) / C47174 +
        2 * (C47243 / C47210 - (0 * be) / C47174);
    const double C8950 =
        (C47271 / C47210 + ((C47172 * C47273 + C48362) * ae) / C47174 +
         C47265) /
            C47210 -
        ((C47172 * (C47273 / C47210 +
                    ((C47172 * C47265 + C48369) * ae) / C47174 + 2 * C47279) +
          C48636) *
         be) /
            C47174 +
        2 * (C47265 / C47210 + ((C47172 * C47279 + C25911) * ae) / C47174);
    const double C8951 =
        (C47273 / C47210 + ((C47172 * C47265 + C48369) * ae) / C47174 +
         2 * C47279) /
            C47210 -
        ((C47172 *
              (C47265 / C47210 + ((C47172 * C47279 + C25911) * ae) / C47174) +
          C48626) *
         be) /
            C47174 +
        3 * (C47279 / C47210 + (0 * ae) / C47174);
    const double C11042 =
        C47271 / C47210 - ((C47172 * C47273 + C48362) * be) / C47174 + C47265;
    const double C11043 = C47273 / C47210 -
                          ((C47172 * C47265 + C48369) * be) / C47174 +
                          2 * C47279;
    const double C23185 =
        C47271 / C47210 + ((C47172 * C47273 + C48362) * ae) / C47174 + C47265;
    const double C23186 = C47273 / C47210 +
                          ((C47172 * C47265 + C48369) * ae) / C47174 +
                          2 * C47279;
    const double C36046 = C47360 * C129;
    const double C36040 = C47360 * C118;
    const double C36035 = C47360 * C127;
    const double C36029 = C47360 * C117;
    const double C36023 = C47360 * C125;
    const double C36017 = C47360 * C116;
    const double C36229 = C47360 * C275;
    const double C36223 = C47360 * C266;
    const double C36217 = C47360 * C273;
    const double C36211 = C47360 * C265;
    const double C36399 = C47360 * C399;
    const double C36393 = C47360 * C390;
    const double C36387 = C47360 * C397;
    const double C36381 = C47360 * C389;
    const double C37579 = C47360 * C588;
    const double C37573 = C47360 * C581;
    const double C37556 = C47360 * C271;
    const double C37550 = C47360 * C264;
    const double C37793 = C47360 * C690;
    const double C37787 = C47360 * C683;
    const double C38145 = C47360 * C586;
    const double C38139 = C47360 * C580;
    const double C38351 = C47360 * C688;
    const double C38345 = C47360 * C682;
    const double C46592 = C47360 * C1250;
    const double C46586 = C47360 * C1245;
    const double C46754 = C47360 * C1440;
    const double C46748 = C47360 * C1435;
    const double C17442 =
        (((((0 - (C47191 * C47313) / C47174) * ae) / C47174 -
           (0 * be) / C47178 + (2 * C47314) / C47174) /
              C47210 -
          ((C47191 * C47349 + 0) * be) / C47174 + C47323 - C47336) /
             C47210 +
         ((C47191 * C47358 + 0) * ae) / C47174) /
            C47210 -
        ((C47191 * (C47358 / C47210 +
                    ((C47191 * C47360 + C48404) * ae) / C47174 + C47352) +
          C48641) *
         be) /
            C47174 +
        C47360 / C47210 + ((C47191 * C47352 + C48411) * ae) / C47174 +
        2 * (C47330 / C47210 - (0 * be) / C47174);
    const double C17443 =
        (C47358 / C47210 + ((C47191 * C47360 + C48404) * ae) / C47174 +
         C47352) /
            C47210 -
        ((C47191 * (C47360 / C47210 +
                    ((C47191 * C47352 + C48411) * ae) / C47174 + 2 * C47366) +
          C48638) *
         be) /
            C47174 +
        2 * (C47352 / C47210 + ((C47191 * C47366 + C36011) * ae) / C47174);
    const double C17444 =
        (C47360 / C47210 + ((C47191 * C47352 + C48411) * ae) / C47174 +
         2 * C47366) /
            C47210 -
        ((C47191 *
              (C47352 / C47210 + ((C47191 * C47366 + C36011) * ae) / C47174) +
          C48629) *
         be) /
            C47174 +
        3 * (C47366 / C47210 + (0 * ae) / C47174);
    const double C19819 =
        C47358 / C47210 - ((C47191 * C47360 + C48404) * be) / C47174 + C47352;
    const double C19820 = C47360 / C47210 -
                          ((C47191 * C47352 + C48411) * be) / C47174 +
                          2 * C47366;
    const double C33226 =
        C47358 / C47210 + ((C47191 * C47360 + C48404) * ae) / C47174 + C47352;
    const double C33227 = C47360 / C47210 +
                          ((C47191 * C47352 + C48411) * ae) / C47174 +
                          2 * C47366;
    const double C25925 = C25919 + C25920;
    const double C36055 = C36034 - C36035;
    const double C36052 = C36028 - C36029;
    const double C37570 = C36217 - C36218;
    const double C37564 = C36218 - C36217;
    const double C37567 = C36211 - C36212;
    const double C37561 = C36212 - C36211;
    const double C46583 = C38146 - C38145;
    const double C46580 = C38140 - C38139;
    const double C19848 = C19819 * C127;
    const double C19840 = C19819 * C117;
    const double C19833 = C19819 * C125;
    const double C19825 = C19819 * C116;
    const double C19994 = C19819 * C273;
    const double C19986 = C19819 * C265;
    const double C20140 = C19819 * C397;
    const double C20132 = C19819 * C389;
    const double C21101 = C19819 * C271;
    const double C21093 = C19819 * C264;
    const double C21474 = C19819 * C586;
    const double C21466 = C19819 * C580;
    const double C21620 = C19819 * C688;
    const double C21612 = C19819 * C682;
    const double C19850 = C19820 * C399;
    const double C19842 = C19820 * C390;
    const double C19835 = C19820 * C397;
    const double C19827 = C19820 * C389;
    const double C19996 = C19820 * C690;
    const double C19988 = C19820 * C683;
    const double C20142 = C19820 * C941;
    const double C20134 = C19820 * C934;
    const double C21103 = C19820 * C688;
    const double C21095 = C19820 * C682;
    const double C21476 = C19820 * C1440;
    const double C21468 = C19820 * C1435;
    const double C21622 = C19820 * C2316;
    const double C21614 = C19820 * C2309;
    const double C33255 = C33226 * C127;
    const double C33247 = C33226 * C117;
    const double C33240 = C33226 * C125;
    const double C33232 = C33226 * C116;
    const double C33401 = C33226 * C273;
    const double C33393 = C33226 * C265;
    const double C33547 = C33226 * C397;
    const double C33539 = C33226 * C389;
    const double C41833 = C33226 * C271;
    const double C41825 = C33226 * C264;
    const double C42206 = C33226 * C586;
    const double C42198 = C33226 * C580;
    const double C42352 = C33226 * C688;
    const double C42344 = C33226 * C682;
    const double C33257 = C33227 * C399;
    const double C33249 = C33227 * C390;
    const double C33242 = C33227 * C397;
    const double C33234 = C33227 * C389;
    const double C33403 = C33227 * C690;
    const double C33395 = C33227 * C683;
    const double C33549 = C33227 * C941;
    const double C33541 = C33227 * C934;
    const double C41835 = C33227 * C688;
    const double C41827 = C33227 * C682;
    const double C42208 = C33227 * C1440;
    const double C42200 = C33227 * C1435;
    const double C42354 = C33227 * C2316;
    const double C42346 = C33227 * C2309;
    const double C25926 = C25925 + C25921;
    const double C36059 = C36055 + C36056;
    const double C36058 = C36052 + C36053;
    const double C37588 = C37570 + C37571;
    const double C37586 = C37564 + C37565;
    const double C37587 = C37567 + C37568;
    const double C37585 = C37561 + C37562;
    const double C46599 = C46583 + C46584;
    const double C46598 = C46580 + C46581;
    const double C25927 = C25926 + C25922;
    const double C36061 = C36059 + C36057;
    const double C36060 = C36058 + C36054;
    const double C37592 = C37588 + C37572;
    const double C37590 = C37586 + C37566;
    const double C37591 = C37587 + C37569;
    const double C37589 = C37585 + C37563;
    const double C46601 = C46599 + C46585;
    const double C46600 = C46598 + C46582;
    const double C25928 = C25927 + C25923;
    const double C36063 = C36061 * C48304;
    const double C36062 = C36060 * C114;
    const double C25929 = C25928 + C25924;
    const double C36064 = C36062 + C36063;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C47273 +
            (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
            (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
               C48214 +
           ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
            C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
               C48222 +
           C25929 * C25914) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C47273 + (C147 - C146) * C48362 + C1274 * C47265 +
            C1275 * C48369 + C1276 * C47279 + C1277 * C25911) *
               C48214 +
           ((C149 - C148) * C47273 + (C151 - C150) * C48362 + C1282 * C47265 +
            C1283 * C48369 + C1284 * C47279 + C1285 * C25911) *
               C48222 +
           ((C153 - C152) * C47273 + (C155 - C154) * C48362 + C3939 * C47265 +
            C3940 * C48369 + (C1085 - C1086) * C47279 +
            (C1087 - C1088) * C25911) *
               C25914) *
              C48293 * C48276 * C111 +
          (C25929 * C48214 +
           (C166 * C47273 + C167 * C48362 + C3799 * C47265 + C3800 * C48369 +
            (C1086 - C1085) * C47279 + (C1088 - C1087) * C25911) *
               C48222 +
           (C168 * C47273 + C169 * C48362 + (C302 - C301) * C47265 +
            (C304 - C303) * C48369 + (C48321 * C593 - C113 * C584) * C47279 +
            (C48321 * C599 - C113 * C594) * C25911) *
               C25914) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C48293 * C260 +
           (((C1263 - C1262) * C47273 + (C1265 - C1264) * C48362 +
             (C1267 - C1266) * C47265 + (C1269 - C1268) * C48369 +
             (C1738 - C1739) * C47279 + (C1740 - C1741) * C25911) *
                C48214 +
            (C1274 * C47273 + C1275 * C48362 + C1276 * C47265 + C1277 * C48369 +
             C11179 * C47279 + C11180 * C25911) *
                C48222 +
            (C1282 * C47273 + C1283 * C48362 + C1284 * C47265 + C1285 * C48369 +
             (C1286 - C1287) * C47279 + (C1288 - C1289) * C25911) *
                C25914) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C47273 + (C147 - C146) * C48362 + C1274 * C47265 +
             C1275 * C48369 + C1276 * C47279 + C1277 * C25911) *
                C48214 +
            ((C149 - C148) * C47273 + (C151 - C150) * C48362 + C1282 * C47265 +
             C1283 * C48369 + C1284 * C47279 + C1285 * C25911) *
                C48222 +
            ((C153 - C152) * C47273 + (C155 - C154) * C48362 + C3939 * C47265 +
             C3940 * C48369 + (C1085 - C1086) * C47279 +
             (C1087 - C1088) * C25911) *
                C25914) *
               C48293 * C260 +
           ((C1270 * C47273 + C1271 * C48362 + C1272 * C47265 + C1273 * C48369 +
             C11177 * C47279 + C11178 * C25911) *
                C48214 +
            (C1079 * C47273 + C1080 * C48362 + C1092 * C47265 + C1093 * C48369 +
             (C1287 - C1286) * C47279 + (C1289 - C1288) * C25911) *
                C48222 +
            (C3799 * C47273 + C3800 * C48362 + (C1086 - C1085) * C47265 +
             (C1088 - C1087) * C48369 +
             (C48321 * C1255 - C113 * C1248) * C47279 +
             (C48321 * C1260 - C113 * C1256) * C25911) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C47273 +
             (C113 * C395 - C48321 * C406) * C48362 + (C1900 - C1901) * C47265 +
             (C1902 - C1903) * C48369 + (C1904 - C1905) * C47279 +
             (C1906 - C1907) * C25911) *
                C48214 +
            ((C413 - C414) * C47273 + (C415 - C416) * C48362 +
             (C1452 - C1453) * C47265 + (C1454 - C1455) * C48369 +
             (C1456 - C1457) * C47279 + (C1458 - C1459) * C25911) *
                C48222 +
            ((C417 - C418) * C47273 + (C419 - C420) * C48362 +
             (C1460 - C1461) * C47265 + (C1462 - C1463) * C48369 +
             (C1464 - C1465) * C47279 + (C1466 - C1467) * C25911) *
                C25914) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C47273 + (C147 - C146) * C48362 + C1274 * C47265 +
             C1275 * C48369 + C1276 * C47279 + C1277 * C25911) *
                C48214 +
            ((C149 - C148) * C47273 + (C151 - C150) * C48362 + C1282 * C47265 +
             C1283 * C48369 + C1284 * C47279 + C1285 * C25911) *
                C48222 +
            ((C153 - C152) * C47273 + (C155 - C154) * C48362 + C3939 * C47265 +
             C3940 * C48369 + (C1085 - C1086) * C47279 +
             (C1087 - C1088) * C25911) *
                C25914) *
               C386 +
           (((C414 - C413) * C47273 + (C416 - C415) * C48362 +
             (C1453 - C1452) * C47265 + (C1455 - C1454) * C48369 +
             (C1457 - C1456) * C47279 + (C1459 - C1458) * C25911) *
                C48214 +
            ((C418 - C417) * C47273 + (C420 - C419) * C48362 +
             (C1461 - C1460) * C47265 + (C1463 - C1462) * C48369 +
             (C1465 - C1464) * C47279 + (C1467 - C1466) * C25911) *
                C48222 +
            ((C422 - C421) * C47273 + (C424 - C423) * C48362 +
             (C4072 - C4071) * C47265 + (C4074 - C4073) * C48369 +
             (C48321 * C1445 - C113 * C1438) * C47279 +
             (C48321 * C1450 - C113 * C1446) * C25911) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C48293 * C510 +
           (((C1263 - C1262) * C47273 + (C1265 - C1264) * C48362 +
             (C1267 - C1266) * C47265 + (C1269 - C1268) * C48369 +
             (C1738 - C1739) * C47279 + (C1740 - C1741) * C25911) *
                C48214 +
            (C1274 * C47273 + C1275 * C48362 + C1276 * C47265 + C1277 * C48369 +
             C11179 * C47279 + C11180 * C25911) *
                C48222 +
            (C1282 * C47273 + C1283 * C48362 + C1284 * C47265 + C1285 * C48369 +
             (C1286 - C1287) * C47279 + (C1288 - C1289) * C25911) *
                C25914) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C47273 + (C147 - C146) * C48362 + C1274 * C47265 +
             C1275 * C48369 + C1276 * C47279 + C1277 * C25911) *
                C48214 +
            ((C149 - C148) * C47273 + (C151 - C150) * C48362 + C1282 * C47265 +
             C1283 * C48369 + C1284 * C47279 + C1285 * C25911) *
                C48222 +
            ((C153 - C152) * C47273 + (C155 - C154) * C48362 + C3939 * C47265 +
             C3940 * C48369 + (C1085 - C1086) * C47279 +
             (C1087 - C1088) * C25911) *
                C25914) *
               C48293 * C510 +
           ((C1270 * C47273 + C1271 * C48362 + C1272 * C47265 + C1273 * C48369 +
             C11177 * C47279 + C11178 * C25911) *
                C48214 +
            (C1079 * C47273 + C1080 * C48362 + C1092 * C47265 + C1093 * C48369 +
             (C1287 - C1286) * C47279 + (C1289 - C1288) * C25911) *
                C48222 +
            (C3799 * C47273 + C3800 * C48362 + (C1086 - C1085) * C47265 +
             (C1088 - C1087) * C48369 +
             (C48321 * C1255 - C113 * C1248) * C47279 +
             (C48321 * C1260 - C113 * C1256) * C25911) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C47273 +
            (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
            (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
               C48214 +
           ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
            C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
               C48222 +
           C25929 * C25914) *
              C48293 * C576 +
          (((C1263 - C1262) * C47273 + (C1265 - C1264) * C48362 +
            (C1267 - C1266) * C47265 + (C1269 - C1268) * C48369 +
            (C1738 - C1739) * C47279 + (C1740 - C1741) * C25911) *
               C48214 +
           (C1274 * C47273 + C1275 * C48362 + C1276 * C47265 + C1277 * C48369 +
            C11179 * C47279 + C11180 * C25911) *
               C48222 +
           (C1282 * C47273 + C1283 * C48362 + C1284 * C47265 + C1285 * C48369 +
            (C1286 - C1287) * C47279 + (C1288 - C1289) * C25911) *
               C25914) *
              C48293 * C577 +
          ((C1736 * C47273 + C1737 * C48362 + C9291 * C47265 + C9292 * C48369 +
            C9293 * C47279 + C9294 * C25911) *
               C48214 +
           (C1272 * C47273 + C1273 * C48362 + C11177 * C47265 +
            C11178 * C48369 + (C9050 - C9049) * C47279 +
            (C9052 - C9051) * C25911) *
               C48222 +
           (C1092 * C47273 + C1093 * C48362 + (C1287 - C1286) * C47265 +
            (C1289 - C1288) * C48369 +
            (C48321 * C1730 - C113 * C1725) * C47279 +
            (C48321 * C1734 - C113 * C1731) * C25911) *
               C25914) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C47273 +
             (C113 * C395 - C48321 * C406) * C48362 + (C1900 - C1901) * C47265 +
             (C1902 - C1903) * C48369 + (C1904 - C1905) * C47279 +
             (C1906 - C1907) * C25911) *
                C48214 +
            ((C413 - C414) * C47273 + (C415 - C416) * C48362 +
             (C1452 - C1453) * C47265 + (C1454 - C1455) * C48369 +
             (C1456 - C1457) * C47279 + (C1458 - C1459) * C25911) *
                C48222 +
            ((C417 - C418) * C47273 + (C419 - C420) * C48362 +
             (C1460 - C1461) * C47265 + (C1462 - C1463) * C48369 +
             (C1464 - C1465) * C47279 + (C1466 - C1467) * C25911) *
                C25914) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C47273 + (C1265 - C1264) * C48362 +
             (C1267 - C1266) * C47265 + (C1269 - C1268) * C48369 +
             (C1738 - C1739) * C47279 + (C1740 - C1741) * C25911) *
                C48214 +
            (C1274 * C47273 + C1275 * C48362 + C1276 * C47265 + C1277 * C48369 +
             C11179 * C47279 + C11180 * C25911) *
                C48222 +
            (C1282 * C47273 + C1283 * C48362 + C1284 * C47265 + C1285 * C48369 +
             (C1286 - C1287) * C47279 + (C1288 - C1289) * C25911) *
                C25914) *
               C386 +
           (((C1901 - C1900) * C47273 + (C1903 - C1902) * C48362 +
             (C1905 - C1904) * C47265 + (C1907 - C1906) * C48369 +
             (C9386 - C9385) * C47279 + (C9388 - C9387) * C25911) *
                C48214 +
            ((C1453 - C1452) * C47273 + (C1455 - C1454) * C48362 +
             (C1457 - C1456) * C47265 + (C1459 - C1458) * C48369 +
             (C11312 - C11311) * C47279 + (C11314 - C11313) * C25911) *
                C48222 +
            ((C1461 - C1460) * C47273 + (C1463 - C1462) * C48362 +
             (C1465 - C1464) * C47265 + (C1467 - C1466) * C48369 +
             (C48321 * C1894 - C113 * C1889) * C47279 +
             (C48321 * C1898 - C113 * C1895) * C25911) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C47273 +
             (C113 * C395 - C48321 * C406) * C48362 + (C1900 - C1901) * C47265 +
             (C1902 - C1903) * C48369 + (C1904 - C1905) * C47279 +
             (C1906 - C1907) * C25911) *
                C48214 +
            ((C413 - C414) * C47273 + (C415 - C416) * C48362 +
             (C1452 - C1453) * C47265 + (C1454 - C1455) * C48369 +
             (C1456 - C1457) * C47279 + (C1458 - C1459) * C25911) *
                C48222 +
            ((C417 - C418) * C47273 + (C419 - C420) * C48362 +
             (C1460 - C1461) * C47265 + (C1462 - C1463) * C48369 +
             (C1464 - C1465) * C47279 + (C1466 - C1467) * C25911) *
                C25914) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C47273 + (C147 - C146) * C48362 + C1274 * C47265 +
             C1275 * C48369 + C1276 * C47279 + C1277 * C25911) *
                C48214 +
            ((C149 - C148) * C47273 + (C151 - C150) * C48362 + C1282 * C47265 +
             C1283 * C48369 + C1284 * C47279 + C1285 * C25911) *
                C48222 +
            ((C153 - C152) * C47273 + (C155 - C154) * C48362 + C3939 * C47265 +
             C3940 * C48369 + (C1085 - C1086) * C47279 +
             (C1087 - C1088) * C25911) *
                C25914) *
               C784 +
           (((C414 - C413) * C47273 + (C416 - C415) * C48362 +
             (C1453 - C1452) * C47265 + (C1455 - C1454) * C48369 +
             (C1457 - C1456) * C47279 + (C1459 - C1458) * C25911) *
                C48214 +
            ((C418 - C417) * C47273 + (C420 - C419) * C48362 +
             (C1461 - C1460) * C47265 + (C1463 - C1462) * C48369 +
             (C1465 - C1464) * C47279 + (C1467 - C1466) * C25911) *
                C48222 +
            ((C422 - C421) * C47273 + (C424 - C423) * C48362 +
             (C4072 - C4071) * C47265 + (C4074 - C4073) * C48369 +
             (C48321 * C1445 - C113 * C1438) * C47279 +
             (C48321 * C1450 - C113 * C1446) * C25911) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C47273 +
             (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
             (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
                C48214 +
            ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
             C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
                C48222 +
            C25929 * C25914) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C47273 +
             (C113 * C395 - C48321 * C406) * C48362 + (C1900 - C1901) * C47265 +
             (C1902 - C1903) * C48369 + (C1904 - C1905) * C47279 +
             (C1906 - C1907) * C25911) *
                C48214 +
            ((C413 - C414) * C47273 + (C415 - C416) * C48362 +
             (C1452 - C1453) * C47265 + (C1454 - C1455) * C48369 +
             (C1456 - C1457) * C47279 + (C1458 - C1459) * C25911) *
                C48222 +
            ((C417 - C418) * C47273 + (C419 - C420) * C48362 +
             (C1460 - C1461) * C47265 + (C1462 - C1463) * C48369 +
             (C1464 - C1465) * C47279 + (C1466 - C1467) * C25911) *
                C25914) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C47273 + (C1265 - C1264) * C48362 +
             (C1267 - C1266) * C47265 + (C1269 - C1268) * C48369 +
             (C1738 - C1739) * C47279 + (C1740 - C1741) * C25911) *
                C48214 +
            (C1274 * C47273 + C1275 * C48362 + C1276 * C47265 + C1277 * C48369 +
             C11179 * C47279 + C11180 * C25911) *
                C48222 +
            (C1282 * C47273 + C1283 * C48362 + C1284 * C47265 + C1285 * C48369 +
             (C1286 - C1287) * C47279 + (C1288 - C1289) * C25911) *
                C25914) *
               C784 +
           (((C1901 - C1900) * C47273 + (C1903 - C1902) * C48362 +
             (C1905 - C1904) * C47265 + (C1907 - C1906) * C48369 +
             (C9386 - C9385) * C47279 + (C9388 - C9387) * C25911) *
                C48214 +
            ((C1453 - C1452) * C47273 + (C1455 - C1454) * C48362 +
             (C1457 - C1456) * C47265 + (C1459 - C1458) * C48369 +
             (C11312 - C11311) * C47279 + (C11314 - C11313) * C25911) *
                C48222 +
            ((C1461 - C1460) * C47273 + (C1463 - C1462) * C48362 +
             (C1465 - C1464) * C47265 + (C1467 - C1466) * C48369 +
             (C48321 * C1894 - C113 * C1889) * C47279 +
             (C48321 * C1898 - C113 * C1895) * C25911) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C47273 +
            (C48321 * C136 - C113 * C123) * C48362 + (C1262 - C1263) * C47265 +
            (C1264 - C1265) * C48369 + C1736 * C47279 + C1737 * C25911) *
               C48214 +
           ((C144 - C145) * C47273 + (C146 - C147) * C48362 + C1270 * C47265 +
            C1271 * C48369 + C1272 * C47279 + C1273 * C25911) *
               C48222 +
           C25929 * C25914) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C47273 +
            (C113 * C395 - C48321 * C406) * C48362 + (C1900 - C1901) * C47265 +
            (C1902 - C1903) * C48369 + (C1904 - C1905) * C47279 +
            (C1906 - C1907) * C25911) *
               C48214 +
           ((C413 - C414) * C47273 + (C415 - C416) * C48362 +
            (C1452 - C1453) * C47265 + (C1454 - C1455) * C48369 +
            (C1456 - C1457) * C47279 + (C1458 - C1459) * C25911) *
               C48222 +
           ((C417 - C418) * C47273 + (C419 - C420) * C48362 +
            (C1460 - C1461) * C47265 + (C1462 - C1463) * C48369 +
            (C1464 - C1465) * C47279 + (C1466 - C1467) * C25911) *
               C25914) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C47273 +
            (C48321 * C948 - C113 * C939) * C48362 +
            (C48321 * C2315 - C113 * C2309) * C47265 +
            (C48321 * C2327 - C113 * C2316) * C48369 +
            (C48321 * C2317 - C113 * C2310) * C47279 +
            (C48321 * C2328 - C113 * C2318) * C25911) *
               C48214 +
           ((C48321 * C940 - C113 * C934) * C47273 +
            (C48321 * C949 - C113 * C941) * C48362 +
            (C48321 * C2319 - C113 * C2311) * C47265 +
            (C48321 * C2329 - C113 * C2320) * C48369 +
            (C48321 * C2321 - C113 * C2312) * C47279 +
            (C48321 * C2330 - C113 * C2322) * C25911) *
               C48222 +
           ((C48321 * C942 - C113 * C935) * C47273 +
            (C48321 * C950 - C113 * C943) * C48362 +
            (C48321 * C2323 - C113 * C2313) * C47265 +
            (C48321 * C2331 - C113 * C2324) * C48369 +
            (C48321 * C2325 - C113 * C2314) * C47279 +
            (C48321 * C2332 - C113 * C2326) * C25911) *
               C25914) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C47273 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48362 +
            (C6320 - C6321 + C6322 - C6323) * C47265 +
            (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
            C12946 * C25911) *
               C23183 +
           ((C4893 - C4894 + C4895 - C4896) * C47273 +
            (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
            C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C47273 +
            (C4898 - C4897 + C4900 - C4899) * C48362 + C6358 * C47265 +
            C6359 * C48369 + C12389 * C47279 + C12390 * C25911) *
               C23183 +
           ((C4902 - C4901 + C4904 - C4903) * C47273 +
            (C4906 - C4905 + C4908 - C4907) * C48362 + C6360 * C47265 +
            C6361 * C48369 + (C6348 - C6349 + C6350 - C6351) * C47279 +
            (C6352 - C6353 + C6354 - C6355) * C25911) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C4933 * C47273 + C4934 * C48362 + C6120 * C47265 + C6121 * C48369 +
            (C6349 - C6348 + C6351 - C6350) * C47279 +
            (C6353 - C6352 + C6355 - C6354) * C25911) *
               C23183 +
           (C4935 * C47273 + C4936 * C48362 +
            (C5090 - C5089 + C5092 - C5091) * C47265 +
            (C5094 - C5093 + C5096 - C5095) * C48369 +
            (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                C47279 +
            (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                C25911) *
               C48219) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C47273 +
             (C6325 - C6324 + C6327 - C6326) * C48362 +
             (C6912 - C6913 + C6914 - C6915) * C47265 +
             (C6916 - C6917 + C6918 - C6919) * C48369 +
             (C12937 - C12938 + C12939 - C12940) * C47279 +
             (C12941 - C12942 + C12943 - C12944) * C25911) *
                C23183 +
            (C6358 * C47273 + C6359 * C48362 + C12389 * C47265 +
             C12390 * C48369 + (C12379 - C12380 + C12381 - C12382) * C47279 +
             (C12383 - C12384 + C12385 - C12386) * C25911) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C47273 +
             (C4898 - C4897 + C4900 - C4899) * C48362 + C6358 * C47265 +
             C6359 * C48369 + C12389 * C47279 + C12390 * C25911) *
                C23183 +
            ((C4902 - C4901 + C4904 - C4903) * C47273 +
             (C4906 - C4905 + C4908 - C4907) * C48362 + C6360 * C47265 +
             C6361 * C48369 + (C6348 - C6349 + C6350 - C6351) * C47279 +
             (C6352 - C6353 + C6354 - C6355) * C25911) *
                C48219) *
               C48293 * C260 +
           ((C6356 * C47273 + C6357 * C48362 + C12387 * C47265 +
             C12388 * C48369 + (C12380 - C12379 + C12382 - C12381) * C47279 +
             (C12384 - C12383 + C12386 - C12385) * C25911) *
                C23183 +
            (C6120 * C47273 + C6121 * C48362 +
             (C6349 - C6348 + C6351 - C6350) * C47265 +
             (C6353 - C6352 + C6355 - C6354) * C48369 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C47279 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C25911) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C47273 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48362 +
             (C7114 - C7115 + C7116 - C7117) * C47265 +
             (C7118 - C7119 + C7120 - C7121) * C48369 +
             (C13141 - C13142 + C13143 - C13144) * C47279 +
             (C13145 - C13146 + C13147 - C13148) * C25911) *
                C23183 +
            ((C5227 - C5228 + C5229 - C5230) * C47273 +
             (C5231 - C5232 + C5233 - C5234) * C48362 +
             (C6556 - C6557 + C6558 - C6559) * C47265 +
             (C6560 - C6561 + C6562 - C6563) * C48369 +
             (C12585 - C12586 + C12587 - C12588) * C47279 +
             (C12589 - C12590 + C12591 - C12592) * C25911) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C47273 +
             (C4898 - C4897 + C4900 - C4899) * C48362 + C6358 * C47265 +
             C6359 * C48369 + C12389 * C47279 + C12390 * C25911) *
                C23183 +
            ((C4902 - C4901 + C4904 - C4903) * C47273 +
             (C4906 - C4905 + C4908 - C4907) * C48362 + C6360 * C47265 +
             C6361 * C48369 + (C6348 - C6349 + C6350 - C6351) * C47279 +
             (C6352 - C6353 + C6354 - C6355) * C25911) *
                C48219) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C47273 +
             (C5232 - C5231 + C5234 - C5233) * C48362 +
             (C6557 - C6556 + C6559 - C6558) * C47265 +
             (C6561 - C6560 + C6563 - C6562) * C48369 +
             (C12586 - C12585 + C12588 - C12587) * C47279 +
             (C12590 - C12589 + C12592 - C12591) * C25911) *
                C23183 +
            ((C5236 - C5235 + C5238 - C5237) * C47273 +
             (C5240 - C5239 + C5242 - C5241) * C48362 +
             (C6565 - C6564 + C6567 - C6566) * C47265 +
             (C6569 - C6568 + C6571 - C6570) * C48369 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C47279 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C25911) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C47273 +
             (C6325 - C6324 + C6327 - C6326) * C48362 +
             (C6912 - C6913 + C6914 - C6915) * C47265 +
             (C6916 - C6917 + C6918 - C6919) * C48369 +
             (C12937 - C12938 + C12939 - C12940) * C47279 +
             (C12941 - C12942 + C12943 - C12944) * C25911) *
                C23183 +
            (C6358 * C47273 + C6359 * C48362 + C12389 * C47265 +
             C12390 * C48369 + (C12379 - C12380 + C12381 - C12382) * C47279 +
             (C12383 - C12384 + C12385 - C12386) * C25911) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C47273 +
             (C4898 - C4897 + C4900 - C4899) * C48362 + C6358 * C47265 +
             C6359 * C48369 + C12389 * C47279 + C12390 * C25911) *
                C23183 +
            ((C4902 - C4901 + C4904 - C4903) * C47273 +
             (C4906 - C4905 + C4908 - C4907) * C48362 + C6360 * C47265 +
             C6361 * C48369 + (C6348 - C6349 + C6350 - C6351) * C47279 +
             (C6352 - C6353 + C6354 - C6355) * C25911) *
                C48219) *
               C48293 * C510 +
           ((C6356 * C47273 + C6357 * C48362 + C12387 * C47265 +
             C12388 * C48369 + (C12380 - C12379 + C12382 - C12381) * C47279 +
             (C12384 - C12383 + C12386 - C12385) * C25911) *
                C23183 +
            (C6120 * C47273 + C6121 * C48362 +
             (C6349 - C6348 + C6351 - C6350) * C47265 +
             (C6353 - C6352 + C6355 - C6354) * C48369 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C47279 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C25911) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C47273 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48362 +
            (C6320 - C6321 + C6322 - C6323) * C47265 +
            (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
            C12946 * C25911) *
               C23183 +
           ((C4893 - C4894 + C4895 - C4896) * C47273 +
            (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
            C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
               C48219) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C47273 +
            (C6325 - C6324 + C6327 - C6326) * C48362 +
            (C6912 - C6913 + C6914 - C6915) * C47265 +
            (C6916 - C6917 + C6918 - C6919) * C48369 +
            (C12937 - C12938 + C12939 - C12940) * C47279 +
            (C12941 - C12942 + C12943 - C12944) * C25911) *
               C23183 +
           (C6358 * C47273 + C6359 * C48362 + C12389 * C47265 +
            C12390 * C48369 + (C12379 - C12380 + C12381 - C12382) * C47279 +
            (C12383 - C12384 + C12385 - C12386) * C25911) *
               C48219) *
              C48293 * C577 +
          ((C12945 * C47273 + C12946 * C48362 + C14281 * C47265 +
            C14282 * C48369 + (C14274 - C14273 + C14276 - C14275) * C47279 +
            (C14278 - C14277 + C14280 - C14279) * C25911) *
               C23183 +
           (C12387 * C47273 + C12388 * C48362 +
            (C12380 - C12379 + C12382 - C12381) * C47265 +
            (C12384 - C12383 + C12386 - C12385) * C48369 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C47279 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C25911) *
               C48219) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C47273 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48362 +
             (C7114 - C7115 + C7116 - C7117) * C47265 +
             (C7118 - C7119 + C7120 - C7121) * C48369 +
             (C13141 - C13142 + C13143 - C13144) * C47279 +
             (C13145 - C13146 + C13147 - C13148) * C25911) *
                C23183 +
            ((C5227 - C5228 + C5229 - C5230) * C47273 +
             (C5231 - C5232 + C5233 - C5234) * C48362 +
             (C6556 - C6557 + C6558 - C6559) * C47265 +
             (C6560 - C6561 + C6562 - C6563) * C48369 +
             (C12585 - C12586 + C12587 - C12588) * C47279 +
             (C12589 - C12590 + C12591 - C12592) * C25911) *
                C48219) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C47273 +
             (C6325 - C6324 + C6327 - C6326) * C48362 +
             (C6912 - C6913 + C6914 - C6915) * C47265 +
             (C6916 - C6917 + C6918 - C6919) * C48369 +
             (C12937 - C12938 + C12939 - C12940) * C47279 +
             (C12941 - C12942 + C12943 - C12944) * C25911) *
                C23183 +
            (C6358 * C47273 + C6359 * C48362 + C12389 * C47265 +
             C12390 * C48369 + (C12379 - C12380 + C12381 - C12382) * C47279 +
             (C12383 - C12384 + C12385 - C12386) * C25911) *
                C48219) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C47273 +
             (C7119 - C7118 + C7121 - C7120) * C48362 +
             (C13142 - C13141 + C13144 - C13143) * C47265 +
             (C13146 - C13145 + C13148 - C13147) * C48369 +
             (C14414 - C14413 + C14416 - C14415) * C47279 +
             (C14418 - C14417 + C14420 - C14419) * C25911) *
                C23183 +
            ((C6557 - C6556 + C6559 - C6558) * C47273 +
             (C6561 - C6560 + C6563 - C6562) * C48362 +
             (C12586 - C12585 + C12588 - C12587) * C47265 +
             (C12590 - C12589 + C12592 - C12591) * C48369 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C47279 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C25911) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C47273 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48362 +
             (C7114 - C7115 + C7116 - C7117) * C47265 +
             (C7118 - C7119 + C7120 - C7121) * C48369 +
             (C13141 - C13142 + C13143 - C13144) * C47279 +
             (C13145 - C13146 + C13147 - C13148) * C25911) *
                C23183 +
            ((C5227 - C5228 + C5229 - C5230) * C47273 +
             (C5231 - C5232 + C5233 - C5234) * C48362 +
             (C6556 - C6557 + C6558 - C6559) * C47265 +
             (C6560 - C6561 + C6562 - C6563) * C48369 +
             (C12585 - C12586 + C12587 - C12588) * C47279 +
             (C12589 - C12590 + C12591 - C12592) * C25911) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C47273 +
             (C4898 - C4897 + C4900 - C4899) * C48362 + C6358 * C47265 +
             C6359 * C48369 + C12389 * C47279 + C12390 * C25911) *
                C23183 +
            ((C4902 - C4901 + C4904 - C4903) * C47273 +
             (C4906 - C4905 + C4908 - C4907) * C48362 + C6360 * C47265 +
             C6361 * C48369 + (C6348 - C6349 + C6350 - C6351) * C47279 +
             (C6352 - C6353 + C6354 - C6355) * C25911) *
                C48219) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C47273 +
             (C5232 - C5231 + C5234 - C5233) * C48362 +
             (C6557 - C6556 + C6559 - C6558) * C47265 +
             (C6561 - C6560 + C6563 - C6562) * C48369 +
             (C12586 - C12585 + C12588 - C12587) * C47279 +
             (C12590 - C12589 + C12592 - C12591) * C25911) *
                C23183 +
            ((C5236 - C5235 + C5238 - C5237) * C47273 +
             (C5240 - C5239 + C5242 - C5241) * C48362 +
             (C6565 - C6564 + C6567 - C6566) * C47265 +
             (C6569 - C6568 + C6571 - C6570) * C48369 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C47279 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C25911) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C47273 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48362 +
             (C6320 - C6321 + C6322 - C6323) * C47265 +
             (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
             C12946 * C25911) *
                C23183 +
            ((C4893 - C4894 + C4895 - C4896) * C47273 +
             (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
             C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C47273 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48362 +
             (C7114 - C7115 + C7116 - C7117) * C47265 +
             (C7118 - C7119 + C7120 - C7121) * C48369 +
             (C13141 - C13142 + C13143 - C13144) * C47279 +
             (C13145 - C13146 + C13147 - C13148) * C25911) *
                C23183 +
            ((C5227 - C5228 + C5229 - C5230) * C47273 +
             (C5231 - C5232 + C5233 - C5234) * C48362 +
             (C6556 - C6557 + C6558 - C6559) * C47265 +
             (C6560 - C6561 + C6562 - C6563) * C48369 +
             (C12585 - C12586 + C12587 - C12588) * C47279 +
             (C12589 - C12590 + C12591 - C12592) * C25911) *
                C48219) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C47273 +
             (C6325 - C6324 + C6327 - C6326) * C48362 +
             (C6912 - C6913 + C6914 - C6915) * C47265 +
             (C6916 - C6917 + C6918 - C6919) * C48369 +
             (C12937 - C12938 + C12939 - C12940) * C47279 +
             (C12941 - C12942 + C12943 - C12944) * C25911) *
                C23183 +
            (C6358 * C47273 + C6359 * C48362 + C12389 * C47265 +
             C12390 * C48369 + (C12379 - C12380 + C12381 - C12382) * C47279 +
             (C12383 - C12384 + C12385 - C12386) * C25911) *
                C48219) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C47273 +
             (C7119 - C7118 + C7121 - C7120) * C48362 +
             (C13142 - C13141 + C13144 - C13143) * C47265 +
             (C13146 - C13145 + C13148 - C13147) * C48369 +
             (C14414 - C14413 + C14416 - C14415) * C47279 +
             (C14418 - C14417 + C14420 - C14419) * C25911) *
                C23183 +
            ((C6557 - C6556 + C6559 - C6558) * C47273 +
             (C6561 - C6560 + C6563 - C6562) * C48362 +
             (C12586 - C12585 + C12588 - C12587) * C47265 +
             (C12590 - C12589 + C12592 - C12591) * C48369 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C47279 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C25911) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C47273 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48362 +
            (C6320 - C6321 + C6322 - C6323) * C47265 +
            (C6324 - C6325 + C6326 - C6327) * C48369 + C12945 * C47279 +
            C12946 * C25911) *
               C23183 +
           ((C4893 - C4894 + C4895 - C4896) * C47273 +
            (C4897 - C4898 + C4899 - C4900) * C48362 + C6356 * C47265 +
            C6357 * C48369 + C12387 * C47279 + C12388 * C25911) *
               C48219) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C47273 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C48362 +
            (C7114 - C7115 + C7116 - C7117) * C47265 +
            (C7118 - C7119 + C7120 - C7121) * C48369 +
            (C13141 - C13142 + C13143 - C13144) * C47279 +
            (C13145 - C13146 + C13147 - C13148) * C25911) *
               C23183 +
           ((C5227 - C5228 + C5229 - C5230) * C47273 +
            (C5231 - C5232 + C5233 - C5234) * C48362 +
            (C6556 - C6557 + C6558 - C6559) * C47265 +
            (C6560 - C6561 + C6562 - C6563) * C48369 +
            (C12585 - C12586 + C12587 - C12588) * C47279 +
            (C12589 - C12590 + C12591 - C12592) * C25911) *
               C48219) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C47273 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C48362 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C47265 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C48369 +
            (C48566 * C2317 - C4890 * C2310 + C48408 * C10070 -
             C4891 * C10068) *
                C47279 +
            (C48566 * C2328 - C4890 * C2318 + C48408 * C10074 -
             C4891 * C10071) *
                C25911) *
               C23183 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C47273 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C48362 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C47265 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C48369 +
            (C48566 * C2321 - C4890 * C2312 + C48408 * C10072 -
             C4891 * C10069) *
                C47279 +
            (C48566 * C2330 - C4890 * C2322 + C48408 * C10075 -
             C4891 * C10073) *
                C25911) *
               C48219) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
            C1275 * C48636 + C1276 * C23187 + C1277 * C48626 + C11179 * C23188 +
            C11180 * C48608) *
               C23183 +
           ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
            C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
            (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C164 * C23185 + C165 * C48640 + C1079 * C23186 + C1080 * C48636 +
            C1092 * C23187 + C1093 * C48626 + (C1287 - C1286) * C23188 +
            (C1289 - C1288) * C48608) *
               C23183 +
           (C166 * C23185 + C167 * C48640 + C3799 * C23186 + C3800 * C48636 +
            (C1086 - C1085) * C23187 + (C1088 - C1087) * C48626 +
            (C48321 * C1255 - C113 * C1248) * C23188 +
            (C48321 * C1260 - C113 * C1256) * C48608) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
            C1275 * C48366) *
               C48639 +
           ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
            C1283 * C48366) *
               C48632 +
           ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
            C3940 * C48366) *
               C48619 +
           ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
            (C301 - C302) * C22090 + (C303 - C304) * C48366) *
               C48602) *
              C48293 * C48276 * C111 +
          (C22104 * C48639 + C22105 * C48632 +
           (C168 * C22089 + C169 * C22083 + (C302 - C301) * C22090 +
            (C304 - C303) * C48366) *
               C48619 +
           ((C161 - C160) * C22089 + (C163 - C162) * C22083 +
            (C48321 * C280 - C113 * C269) * C22090 +
            (C48321 * C287 - C113 * C281) * C48366) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C22089 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C22083 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
               C23183 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
            (C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C22090 +
            (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C48366) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C22089 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C22083 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C22090 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48366) *
               C23183 +
           ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C22089 +
            (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C22083 +
            (C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C22090 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48366) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C2494 * C22089 + C2495 * C22083 +
            (C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C22090 +
            (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C48366) *
               C23183 +
           ((C2475 - C2474 + C2477 - C2476 + C2479 - C2478) * C22089 +
            (C2481 - C2480 + C2483 - C2482 + C2485 - C2484) * C22083 +
            (C48634 * C276 - C2446 * C267 + C48623 * C693 - C2447 * C685 +
             C48601 * C2645 - C2448 * C2644) *
                C22090 +
            (C48634 * C285 - C2446 * C277 + C48623 * C700 - C2447 * C694 +
             C48601 * C2647 - C2448 * C2646) *
                C48366) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C48293 * C260 +
           (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C260 +
           ((C1270 * C23185 + C1271 * C48640 + C1272 * C23186 + C1273 * C48636 +
             C11177 * C23187 + C11178 * C48626 + (C9050 - C9049) * C23188 +
             (C9052 - C9051) * C48608) *
                C23183 +
            (C1079 * C23185 + C1080 * C48640 + C1092 * C23186 + C1093 * C48636 +
             (C1287 - C1286) * C23187 + (C1289 - C1288) * C48626 +
             (C48321 * C1730 - C113 * C1725) * C23188 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C48293 * C260 +
           (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C260 +
           ((C1270 * C22089 + C1271 * C22083 + C1272 * C22090 +
             C1273 * C48366) *
                C48639 +
            (C1079 * C22089 + C1080 * C22083 + C1092 * C22090 +
             C1093 * C48366) *
                C48632 +
            (C3799 * C22089 + C3800 * C22083 + (C1086 - C1085) * C22090 +
             (C1088 - C1087) * C48366) *
                C48619 +
            ((C302 - C301) * C22089 + (C304 - C303) * C22083 +
             (C48321 * C593 - C113 * C584) * C22090 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C48293 * C260 +
           (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C22089 +
             (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C22083 +
             (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C22090 +
             (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C48366) *
                C23183 +
            (C24524 * C22089 + C24525 * C22083 +
             (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C22090 +
             (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48366) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C22089 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C22083 +
             C24524 * C22090 + C24525 * C48366) *
                C23183 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C22089 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C22083 +
             (C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C22090 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48366) *
                C48219) *
               C48293 * C260 +
           ((C24522 * C22089 + C24523 * C22083 +
             (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C22090 +
             (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C48366) *
                C23183 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C22089 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C22083 +
             (C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
              C48601 * C2325 - C2448 * C2314) *
                 C22090 +
             (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
              C48601 * C2332 - C2448 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C386 +
           (((C414 - C413) * C23185 + (C416 - C415) * C48640 +
             (C1453 - C1452) * C23186 + (C1455 - C1454) * C48636 +
             (C1457 - C1456) * C23187 + (C1459 - C1458) * C48626 +
             (C11312 - C11311) * C23188 + (C11314 - C11313) * C48608) *
                C23183 +
            ((C418 - C417) * C23185 + (C420 - C419) * C48640 +
             (C1461 - C1460) * C23186 + (C1463 - C1462) * C48636 +
             (C1465 - C1464) * C23187 + (C1467 - C1466) * C48626 +
             (C48321 * C1894 - C113 * C1889) * C23188 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C386 +
           (((C414 - C413) * C22089 + (C416 - C415) * C22083 +
             (C1453 - C1452) * C22090 + (C1455 - C1454) * C48366) *
                C48639 +
            ((C418 - C417) * C22089 + (C420 - C419) * C22083 +
             (C1461 - C1460) * C22090 + (C1463 - C1462) * C48366) *
                C48632 +
            ((C422 - C421) * C22089 + (C424 - C423) * C22083 +
             (C4072 - C4071) * C22090 + (C4074 - C4073) * C48366) *
                C48619 +
            ((C426 - C425) * C22089 + (C428 - C427) * C22083 +
             (C48321 * C695 - C113 * C686) * C22090 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C22089 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C22083 +
             (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C22090 +
             (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C48366) *
                C23183 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C22089 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C22083 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C22090 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48366) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C22089 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C22083 +
             C24524 * C22090 + C24525 * C48366) *
                C23183 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C22089 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C22083 +
             (C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C22090 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48366) *
                C48219) *
               C386 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C22089 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C22083 +
             (C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C22090 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C48366) *
                C23183 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C22089 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C22083 +
             (C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C22090 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C48293 * C510 +
           (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C510 +
           ((C1270 * C23185 + C1271 * C48640 + C1272 * C23186 + C1273 * C48636 +
             C11177 * C23187 + C11178 * C48626 + (C9050 - C9049) * C23188 +
             (C9052 - C9051) * C48608) *
                C23183 +
            (C1079 * C23185 + C1080 * C48640 + C1092 * C23186 + C1093 * C48636 +
             (C1287 - C1286) * C23187 + (C1289 - C1288) * C48626 +
             (C48321 * C1730 - C113 * C1725) * C23188 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C48293 * C510 +
           (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C510 +
           ((C1270 * C22089 + C1271 * C22083 + C1272 * C22090 +
             C1273 * C48366) *
                C48639 +
            (C1079 * C22089 + C1080 * C22083 + C1092 * C22090 +
             C1093 * C48366) *
                C48632 +
            (C3799 * C22089 + C3800 * C22083 + (C1086 - C1085) * C22090 +
             (C1088 - C1087) * C48366) *
                C48619 +
            ((C302 - C301) * C22089 + (C304 - C303) * C22083 +
             (C48321 * C593 - C113 * C584) * C22090 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C48293 * C510 +
           (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C22089 +
             (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C22083 +
             (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C22090 +
             (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C48366) *
                C23183 +
            (C24524 * C22089 + C24525 * C22083 +
             (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C22090 +
             (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48366) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C22089 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C22083 +
             C24524 * C22090 + C24525 * C48366) *
                C23183 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C22089 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C22083 +
             (C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C22090 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48366) *
                C48219) *
               C48293 * C510 +
           ((C24522 * C22089 + C24523 * C22083 +
             (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C22090 +
             (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C48366) *
                C23183 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C22089 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C22083 +
             (C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
              C48601 * C2325 - C2448 * C2314) *
                 C22090 +
             (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
              C48601 * C2332 - C2448 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C48293 * C576 +
          (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
            (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
            (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
            (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
               C23183 +
           (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
            C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
            (C9051 - C9052) * C48608) *
               C48219) *
              C48293 * C577 +
          ((C1736 * C23185 + C1737 * C48640 + C9291 * C23186 + C9292 * C48636 +
            C9293 * C23187 + C9294 * C48626 + (C9296 - C9295) * C23188 +
            (C9298 - C9297) * C48608) *
               C23183 +
           (C1272 * C23185 + C1273 * C48640 + C11177 * C23186 +
            C11178 * C48636 + (C9050 - C9049) * C23187 +
            (C9052 - C9051) * C48626 +
            (C48321 * C9040 - C113 * C9037) * C23188 +
            (C48321 * C9043 - C113 * C9041) * C48608) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C48293 * C576 +
          (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
            (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
               C48639 +
           (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 + C1277 * C48366) *
               C48632 +
           (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 + C1285 * C48366) *
               C48619 +
           (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
            (C1087 - C1088) * C48366) *
               C48602) *
              C48293 * C577 +
          ((C1736 * C22089 + C1737 * C22083 + C9291 * C22090 + C9292 * C48366) *
               C48639 +
           (C1272 * C22089 + C1273 * C22083 + C11177 * C22090 +
            C11178 * C48366) *
               C48632 +
           (C1092 * C22089 + C1093 * C22083 + (C1287 - C1286) * C22090 +
            (C1289 - C1288) * C48366) *
               C48619 +
           ((C1086 - C1085) * C22089 + (C1088 - C1087) * C22083 +
            (C48321 * C1255 - C113 * C1248) * C22090 +
            (C48321 * C1260 - C113 * C1256) * C48366) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C22089 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C22083 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
               C23183 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
            C24522 * C22090 + C24523 * C48366) *
               C48219) *
              C48293 * C576 +
          (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C22089 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C22083 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C22090 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C48366) *
               C23183 +
           (C24524 * C22089 + C24525 * C22083 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C22090 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48366) *
               C48219) *
              C48293 * C577 +
          ((C10353 * C22089 + C10354 * C22083 +
            (C10340 - C10339 + C10342 - C10341 + C10344 - C10343) * C22090 +
            (C10346 - C10345 + C10348 - C10347 + C10350 - C10349) * C48366) *
               C23183 +
           ((C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C22089 +
            (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C22083 +
            (C48634 * C1251 - C2446 * C1246 + C48623 * C1892 - C2447 * C1888 +
             C48601 * C9883 - C2448 * C9882) *
                C22090 +
            (C48634 * C1258 - C2446 * C1252 + C48623 * C1897 - C2447 * C1893 +
             C48601 * C9885 - C2448 * C9884) *
                C48366) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C386 +
           (((C1901 - C1900) * C23185 + (C1903 - C1902) * C48640 +
             (C1905 - C1904) * C23186 + (C1907 - C1906) * C48636 +
             (C9386 - C9385) * C23187 + (C9388 - C9387) * C48626 +
             (C9390 - C9389) * C23188 + (C9392 - C9391) * C48608) *
                C23183 +
            ((C1453 - C1452) * C23185 + (C1455 - C1454) * C48640 +
             (C1457 - C1456) * C23186 + (C1459 - C1458) * C48636 +
             (C11312 - C11311) * C23187 + (C11314 - C11313) * C48626 +
             (C48321 * C9138 - C113 * C9135) * C23188 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C386 +
           (((C1901 - C1900) * C22089 + (C1903 - C1902) * C22083 +
             (C1905 - C1904) * C22090 + (C1907 - C1906) * C48366) *
                C48639 +
            ((C1453 - C1452) * C22089 + (C1455 - C1454) * C22083 +
             (C1457 - C1456) * C22090 + (C1459 - C1458) * C48366) *
                C48632 +
            ((C1461 - C1460) * C22089 + (C1463 - C1462) * C22083 +
             (C1465 - C1464) * C22090 + (C1467 - C1466) * C48366) *
                C48619 +
            ((C4072 - C4071) * C22089 + (C4074 - C4073) * C22083 +
             (C48321 * C1445 - C113 * C1438) * C22090 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C22089 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C22083 +
             (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C22090 +
             (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C48366) *
                C23183 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C22089 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C22083 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C22090 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48366) *
                C48219) *
               C48595) *
              C510 +
          ((((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C22089 +
             (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C22083 +
             (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C22090 +
             (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C48366) *
                C23183 +
            (C24524 * C22089 + C24525 * C22083 +
             (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C22090 +
             (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48366) *
                C48219) *
               C386 +
           (((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C22089 +
             (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C22083 +
             (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C22090 +
             (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C48366) *
                C23183 +
            ((C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C22089 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C22083 +
             (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
              C48601 * C10072 - C2448 * C10069) *
                 C22090 +
             (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
              C48601 * C10075 - C2448 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C784 +
           (((C414 - C413) * C23185 + (C416 - C415) * C48640 +
             (C1453 - C1452) * C23186 + (C1455 - C1454) * C48636 +
             (C1457 - C1456) * C23187 + (C1459 - C1458) * C48626 +
             (C11312 - C11311) * C23188 + (C11314 - C11313) * C48608) *
                C23183 +
            ((C418 - C417) * C23185 + (C420 - C419) * C48640 +
             (C1461 - C1460) * C23186 + (C1463 - C1462) * C48636 +
             (C1465 - C1464) * C23187 + (C1467 - C1466) * C48626 +
             (C48321 * C1894 - C113 * C1889) * C23188 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C784 +
           (((C414 - C413) * C22089 + (C416 - C415) * C22083 +
             (C1453 - C1452) * C22090 + (C1455 - C1454) * C48366) *
                C48639 +
            ((C418 - C417) * C22089 + (C420 - C419) * C22083 +
             (C1461 - C1460) * C22090 + (C1463 - C1462) * C48366) *
                C48632 +
            ((C422 - C421) * C22089 + (C424 - C423) * C22083 +
             (C4072 - C4071) * C22090 + (C4074 - C4073) * C48366) *
                C48619 +
            ((C426 - C425) * C22089 + (C428 - C427) * C22083 +
             (C48321 * C695 - C113 * C686) * C22090 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C22089 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C22083 +
             (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C22090 +
             (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C48366) *
                C23183 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C22089 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C22083 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C22090 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48366) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C22089 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C22083 +
             C24524 * C22090 + C24525 * C48366) *
                C23183 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C22089 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C22083 +
             (C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C22090 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48366) *
                C48219) *
               C784 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C22089 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C22083 +
             (C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C22090 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C48366) *
                C23183 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C22089 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C22083 +
             (C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C22090 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C784 +
           (((C1901 - C1900) * C23185 + (C1903 - C1902) * C48640 +
             (C1905 - C1904) * C23186 + (C1907 - C1906) * C48636 +
             (C9386 - C9385) * C23187 + (C9388 - C9387) * C48626 +
             (C9390 - C9389) * C23188 + (C9392 - C9391) * C48608) *
                C23183 +
            ((C1453 - C1452) * C23185 + (C1455 - C1454) * C48640 +
             (C1457 - C1456) * C23186 + (C1459 - C1458) * C48636 +
             (C11312 - C11311) * C23187 + (C11314 - C11313) * C48626 +
             (C48321 * C9138 - C113 * C9135) * C23188 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C784 +
           (((C1901 - C1900) * C22089 + (C1903 - C1902) * C22083 +
             (C1905 - C1904) * C22090 + (C1907 - C1906) * C48366) *
                C48639 +
            ((C1453 - C1452) * C22089 + (C1455 - C1454) * C22083 +
             (C1457 - C1456) * C22090 + (C1459 - C1458) * C48366) *
                C48632 +
            ((C1461 - C1460) * C22089 + (C1463 - C1462) * C22083 +
             (C1465 - C1464) * C22090 + (C1467 - C1466) * C48366) *
                C48619 +
            ((C4072 - C4071) * C22089 + (C4074 - C4073) * C22083 +
             (C48321 * C1445 - C113 * C1438) * C22090 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C22089 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C22083 +
             (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
             (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
                C23183 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
             C24522 * C22090 + C24523 * C48366) *
                C48219) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C22089 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C22083 +
             (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C22090 +
             (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C48366) *
                C23183 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C22089 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C22083 +
             (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C22090 +
             (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48366) *
                C48219) *
               C48595) *
              C260 +
          ((((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C22089 +
             (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C22083 +
             (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C22090 +
             (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C48366) *
                C23183 +
            (C24524 * C22089 + C24525 * C22083 +
             (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C22090 +
             (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48366) *
                C48219) *
               C784 +
           (((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C22089 +
             (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C22083 +
             (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C22090 +
             (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C48366) *
                C23183 +
            ((C24721 - C24720 + C24723 - C24722 + C24725 - C24724) * C22089 +
             (C24727 - C24726 + C24729 - C24728 + C24731 - C24730) * C22083 +
             (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
              C48601 * C10072 - C2448 * C10069) *
                 C22090 +
             (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
              C48601 * C10075 - C2448 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C23185 +
            (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
            (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
            (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
            (C9387 - C9388) * C48608) *
               C23183 +
           ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
            (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
            (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
            (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
               C48219) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C23185 +
            (C48321 * C948 - C113 * C939) * C48640 +
            (C48321 * C2315 - C113 * C2309) * C23186 +
            (C48321 * C2327 - C113 * C2316) * C48636 +
            (C48321 * C2317 - C113 * C2310) * C23187 +
            (C48321 * C2328 - C113 * C2318) * C48626 +
            (C48321 * C9620 - C113 * C9618) * C23188 +
            (C48321 * C9624 - C113 * C9621) * C48608) *
               C23183 +
           ((C48321 * C940 - C113 * C934) * C23185 +
            (C48321 * C949 - C113 * C941) * C48640 +
            (C48321 * C2319 - C113 * C2311) * C23186 +
            (C48321 * C2329 - C113 * C2320) * C48636 +
            (C48321 * C2321 - C113 * C2312) * C23187 +
            (C48321 * C2330 - C113 * C2322) * C48626 +
            (C48321 * C9883 - C113 * C9882) * C23188 +
            (C48321 * C9885 - C113 * C9884) * C48608) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C22089 +
            (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
            (C1902 - C1903) * C48366) *
               C48639 +
           ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
            (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
               C48632 +
           ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
            (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
               C48619 +
           ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
            (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
               C48602) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C22089 +
            (C48321 * C948 - C113 * C939) * C22083 +
            (C48321 * C2315 - C113 * C2309) * C22090 +
            (C48321 * C2327 - C113 * C2316) * C48366) *
               C48639 +
           ((C48321 * C940 - C113 * C934) * C22089 +
            (C48321 * C949 - C113 * C941) * C22083 +
            (C48321 * C2319 - C113 * C2311) * C22090 +
            (C48321 * C2329 - C113 * C2320) * C48366) *
               C48632 +
           ((C48321 * C942 - C113 * C935) * C22089 +
            (C48321 * C950 - C113 * C943) * C22083 +
            (C48321 * C2323 - C113 * C2313) * C22090 +
            (C48321 * C2331 - C113 * C2324) * C48366) *
               C48619 +
           ((C48321 * C944 - C113 * C936) * C22089 +
            (C48321 * C951 - C113 * C945) * C22083 +
            (C48321 * C2645 - C113 * C2644) * C22090 +
            (C48321 * C2647 - C113 * C2646) * C48366) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C22089 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C22083 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C22090 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C48366) *
               C23183 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C22089 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C22083 +
            C24522 * C22090 + C24523 * C48366) *
               C48219) *
              C930 +
          (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C22089 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C22083 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C22090 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C48366) *
               C23183 +
           ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C22089 +
            (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C22083 +
            (C24720 - C24721 + C24722 - C24723 + C24724 - C24725) * C22090 +
            (C24726 - C24727 + C24728 - C24729 + C24730 - C24731) * C48366) *
               C48219) *
              C931 +
          (((C48634 * C938 - C2446 * C933 + C48623 * C2822 - C2447 * C2818 +
             C48601 * C3677 - C2448 * C3674) *
                C22089 +
            (C48634 * C948 - C2446 * C939 + C48623 * C2830 - C2447 * C2823 +
             C48601 * C3683 - C2448 * C3678) *
                C22083 +
            (C48634 * C2315 - C2446 * C2309 + C48623 * C3263 - C2447 * C3260 +
             C48601 * C10932 - C2448 * C10930) *
                C22090 +
            (C48634 * C2327 - C2446 * C2316 + C48623 * C3269 - C2447 * C3264 +
             C48601 * C10936 - C2448 * C10933) *
                C48366) *
               C23183 +
           ((C48634 * C940 - C2446 * C934 + C48623 * C2824 - C2447 * C2819 +
             C48601 * C3679 - C2448 * C3675) *
                C22089 +
            (C48634 * C949 - C2446 * C941 + C48623 * C2831 - C2447 * C2825 +
             C48601 * C3684 - C2448 * C3680) *
                C22083 +
            (C48634 * C2319 - C2446 * C2311 + C48623 * C3265 - C2447 * C3261 +
             C48601 * C17530 - C2448 * C17529) *
                C22090 +
            (C48634 * C2329 - C2446 * C2320 + C48623 * C3270 - C2447 * C3266 +
             C48601 * C17532 - C2448 * C17531) *
                C48366) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C22089 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C22083 +
            (C6320 - C6321 + C6322 - C6323) * C22090 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C48214 +
           ((C4893 - C4894 + C4895 - C4896) * C22089 +
            (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
            C6357 * C48366) *
               C48222 +
           C27178 * C25914) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C22089 +
            (C4898 - C4897 + C4900 - C4899) * C22083 + C6358 * C22090 +
            C6359 * C48366) *
               C48214 +
           ((C4902 - C4901 + C4904 - C4903) * C22089 +
            (C4906 - C4905 + C4908 - C4907) * C22083 + C6360 * C22090 +
            C6361 * C48366) *
               C48222 +
           ((C4910 - C4909 + C4912 - C4911) * C22089 +
            (C4914 - C4913 + C4916 - C4915) * C22083 +
            (C5089 - C5090 + C5091 - C5092) * C22090 +
            (C5093 - C5094 + C5095 - C5096) * C48366) *
               C25914) *
              C48293 * C48276 * C111 +
          (C27178 * C48214 +
           (C4935 * C22089 + C4936 * C22083 +
            (C5090 - C5089 + C5092 - C5091) * C22090 +
            (C5094 - C5093 + C5096 - C5095) * C48366) *
               C48222 +
           ((C4918 - C4917 + C4920 - C4919) * C22089 +
            (C4922 - C4921 + C4924 - C4923) * C22083 +
            (C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                C22090 +
            (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                C48366) *
               C25914) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C22089 +
             (C6325 - C6324 + C6327 - C6326) * C22083 +
             (C6912 - C6913 + C6914 - C6915) * C22090 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C48214 +
            (C6358 * C22089 + C6359 * C22083 + C12389 * C22090 +
             C12390 * C48366) *
                C48222 +
            (C6360 * C22089 + C6361 * C22083 +
             (C6348 - C6349 + C6350 - C6351) * C22090 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C25914) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C22089 +
             (C4898 - C4897 + C4900 - C4899) * C22083 + C6358 * C22090 +
             C6359 * C48366) *
                C48214 +
            ((C4902 - C4901 + C4904 - C4903) * C22089 +
             (C4906 - C4905 + C4908 - C4907) * C22083 + C6360 * C22090 +
             C6361 * C48366) *
                C48222 +
            ((C4910 - C4909 + C4912 - C4911) * C22089 +
             (C4914 - C4913 + C4916 - C4915) * C22083 +
             (C5089 - C5090 + C5091 - C5092) * C22090 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C25914) *
               C48293 * C260 +
           ((C6356 * C22089 + C6357 * C22083 + C12387 * C22090 +
             C12388 * C48366) *
                C48214 +
            (C6120 * C22089 + C6121 * C22083 +
             (C6349 - C6348 + C6351 - C6350) * C22090 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C48222 +
            ((C5090 - C5089 + C5092 - C5091) * C22089 +
             (C5094 - C5093 + C5096 - C5095) * C22083 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C22090 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C22089 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C22083 +
             (C7114 - C7115 + C7116 - C7117) * C22090 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C48214 +
            ((C5227 - C5228 + C5229 - C5230) * C22089 +
             (C5231 - C5232 + C5233 - C5234) * C22083 +
             (C6556 - C6557 + C6558 - C6559) * C22090 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C48222 +
            ((C5235 - C5236 + C5237 - C5238) * C22089 +
             (C5239 - C5240 + C5241 - C5242) * C22083 +
             (C6564 - C6565 + C6566 - C6567) * C22090 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C25914) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C22089 +
             (C4898 - C4897 + C4900 - C4899) * C22083 + C6358 * C22090 +
             C6359 * C48366) *
                C48214 +
            ((C4902 - C4901 + C4904 - C4903) * C22089 +
             (C4906 - C4905 + C4908 - C4907) * C22083 + C6360 * C22090 +
             C6361 * C48366) *
                C48222 +
            ((C4910 - C4909 + C4912 - C4911) * C22089 +
             (C4914 - C4913 + C4916 - C4915) * C22083 +
             (C5089 - C5090 + C5091 - C5092) * C22090 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C25914) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C22089 +
             (C5232 - C5231 + C5234 - C5233) * C22083 +
             (C6557 - C6556 + C6559 - C6558) * C22090 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C48214 +
            ((C5236 - C5235 + C5238 - C5237) * C22089 +
             (C5240 - C5239 + C5242 - C5241) * C22083 +
             (C6565 - C6564 + C6567 - C6566) * C22090 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C48222 +
            ((C5244 - C5243 + C5246 - C5245) * C22089 +
             (C5248 - C5247 + C5250 - C5249) * C22083 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C22090 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C22089 +
             (C6325 - C6324 + C6327 - C6326) * C22083 +
             (C6912 - C6913 + C6914 - C6915) * C22090 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C48214 +
            (C6358 * C22089 + C6359 * C22083 + C12389 * C22090 +
             C12390 * C48366) *
                C48222 +
            (C6360 * C22089 + C6361 * C22083 +
             (C6348 - C6349 + C6350 - C6351) * C22090 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C25914) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C22089 +
             (C4898 - C4897 + C4900 - C4899) * C22083 + C6358 * C22090 +
             C6359 * C48366) *
                C48214 +
            ((C4902 - C4901 + C4904 - C4903) * C22089 +
             (C4906 - C4905 + C4908 - C4907) * C22083 + C6360 * C22090 +
             C6361 * C48366) *
                C48222 +
            ((C4910 - C4909 + C4912 - C4911) * C22089 +
             (C4914 - C4913 + C4916 - C4915) * C22083 +
             (C5089 - C5090 + C5091 - C5092) * C22090 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C25914) *
               C48293 * C510 +
           ((C6356 * C22089 + C6357 * C22083 + C12387 * C22090 +
             C12388 * C48366) *
                C48214 +
            (C6120 * C22089 + C6121 * C22083 +
             (C6349 - C6348 + C6351 - C6350) * C22090 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C48222 +
            ((C5090 - C5089 + C5092 - C5091) * C22089 +
             (C5094 - C5093 + C5096 - C5095) * C22083 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C22090 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C22089 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C22083 +
            (C6320 - C6321 + C6322 - C6323) * C22090 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C48214 +
           ((C4893 - C4894 + C4895 - C4896) * C22089 +
            (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
            C6357 * C48366) *
               C48222 +
           C27178 * C25914) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C22089 +
            (C6325 - C6324 + C6327 - C6326) * C22083 +
            (C6912 - C6913 + C6914 - C6915) * C22090 +
            (C6916 - C6917 + C6918 - C6919) * C48366) *
               C48214 +
           (C6358 * C22089 + C6359 * C22083 + C12389 * C22090 +
            C12390 * C48366) *
               C48222 +
           (C6360 * C22089 + C6361 * C22083 +
            (C6348 - C6349 + C6350 - C6351) * C22090 +
            (C6352 - C6353 + C6354 - C6355) * C48366) *
               C25914) *
              C48293 * C577 +
          ((C12945 * C22089 + C12946 * C22083 + C14281 * C22090 +
            C14282 * C48366) *
               C48214 +
           (C12387 * C22089 + C12388 * C22083 +
            (C12380 - C12379 + C12382 - C12381) * C22090 +
            (C12384 - C12383 + C12386 - C12385) * C48366) *
               C48222 +
           ((C6349 - C6348 + C6351 - C6350) * C22089 +
            (C6353 - C6352 + C6355 - C6354) * C22083 +
            (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                C22090 +
            (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                C48366) *
               C25914) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C22089 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C22083 +
             (C7114 - C7115 + C7116 - C7117) * C22090 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C48214 +
            ((C5227 - C5228 + C5229 - C5230) * C22089 +
             (C5231 - C5232 + C5233 - C5234) * C22083 +
             (C6556 - C6557 + C6558 - C6559) * C22090 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C48222 +
            ((C5235 - C5236 + C5237 - C5238) * C22089 +
             (C5239 - C5240 + C5241 - C5242) * C22083 +
             (C6564 - C6565 + C6566 - C6567) * C22090 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C25914) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C22089 +
             (C6325 - C6324 + C6327 - C6326) * C22083 +
             (C6912 - C6913 + C6914 - C6915) * C22090 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C48214 +
            (C6358 * C22089 + C6359 * C22083 + C12389 * C22090 +
             C12390 * C48366) *
                C48222 +
            (C6360 * C22089 + C6361 * C22083 +
             (C6348 - C6349 + C6350 - C6351) * C22090 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C25914) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C22089 +
             (C7119 - C7118 + C7121 - C7120) * C22083 +
             (C13142 - C13141 + C13144 - C13143) * C22090 +
             (C13146 - C13145 + C13148 - C13147) * C48366) *
                C48214 +
            ((C6557 - C6556 + C6559 - C6558) * C22089 +
             (C6561 - C6560 + C6563 - C6562) * C22083 +
             (C12586 - C12585 + C12588 - C12587) * C22090 +
             (C12590 - C12589 + C12592 - C12591) * C48366) *
                C48222 +
            ((C6565 - C6564 + C6567 - C6566) * C22089 +
             (C6569 - C6568 + C6571 - C6570) * C22083 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C22090 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C22089 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C22083 +
             (C7114 - C7115 + C7116 - C7117) * C22090 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C48214 +
            ((C5227 - C5228 + C5229 - C5230) * C22089 +
             (C5231 - C5232 + C5233 - C5234) * C22083 +
             (C6556 - C6557 + C6558 - C6559) * C22090 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C48222 +
            ((C5235 - C5236 + C5237 - C5238) * C22089 +
             (C5239 - C5240 + C5241 - C5242) * C22083 +
             (C6564 - C6565 + C6566 - C6567) * C22090 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C25914) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C22089 +
             (C4898 - C4897 + C4900 - C4899) * C22083 + C6358 * C22090 +
             C6359 * C48366) *
                C48214 +
            ((C4902 - C4901 + C4904 - C4903) * C22089 +
             (C4906 - C4905 + C4908 - C4907) * C22083 + C6360 * C22090 +
             C6361 * C48366) *
                C48222 +
            ((C4910 - C4909 + C4912 - C4911) * C22089 +
             (C4914 - C4913 + C4916 - C4915) * C22083 +
             (C5089 - C5090 + C5091 - C5092) * C22090 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C25914) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C22089 +
             (C5232 - C5231 + C5234 - C5233) * C22083 +
             (C6557 - C6556 + C6559 - C6558) * C22090 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C48214 +
            ((C5236 - C5235 + C5238 - C5237) * C22089 +
             (C5240 - C5239 + C5242 - C5241) * C22083 +
             (C6565 - C6564 + C6567 - C6566) * C22090 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C48222 +
            ((C5244 - C5243 + C5246 - C5245) * C22089 +
             (C5248 - C5247 + C5250 - C5249) * C22083 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C22090 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C22089 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C22083 +
             (C6320 - C6321 + C6322 - C6323) * C22090 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C48214 +
            ((C4893 - C4894 + C4895 - C4896) * C22089 +
             (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
             C6357 * C48366) *
                C48222 +
            C27178 * C25914) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C22089 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C22083 +
             (C7114 - C7115 + C7116 - C7117) * C22090 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C48214 +
            ((C5227 - C5228 + C5229 - C5230) * C22089 +
             (C5231 - C5232 + C5233 - C5234) * C22083 +
             (C6556 - C6557 + C6558 - C6559) * C22090 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C48222 +
            ((C5235 - C5236 + C5237 - C5238) * C22089 +
             (C5239 - C5240 + C5241 - C5242) * C22083 +
             (C6564 - C6565 + C6566 - C6567) * C22090 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C25914) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C22089 +
             (C6325 - C6324 + C6327 - C6326) * C22083 +
             (C6912 - C6913 + C6914 - C6915) * C22090 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C48214 +
            (C6358 * C22089 + C6359 * C22083 + C12389 * C22090 +
             C12390 * C48366) *
                C48222 +
            (C6360 * C22089 + C6361 * C22083 +
             (C6348 - C6349 + C6350 - C6351) * C22090 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C25914) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C22089 +
             (C7119 - C7118 + C7121 - C7120) * C22083 +
             (C13142 - C13141 + C13144 - C13143) * C22090 +
             (C13146 - C13145 + C13148 - C13147) * C48366) *
                C48214 +
            ((C6557 - C6556 + C6559 - C6558) * C22089 +
             (C6561 - C6560 + C6563 - C6562) * C22083 +
             (C12586 - C12585 + C12588 - C12587) * C22090 +
             (C12590 - C12589 + C12592 - C12591) * C48366) *
                C48222 +
            ((C6565 - C6564 + C6567 - C6566) * C22089 +
             (C6569 - C6568 + C6571 - C6570) * C22083 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C22090 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C22089 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C22083 +
            (C6320 - C6321 + C6322 - C6323) * C22090 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C48214 +
           ((C4893 - C4894 + C4895 - C4896) * C22089 +
            (C4897 - C4898 + C4899 - C4900) * C22083 + C6356 * C22090 +
            C6357 * C48366) *
               C48222 +
           C27178 * C25914) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C22089 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C22083 +
            (C7114 - C7115 + C7116 - C7117) * C22090 +
            (C7118 - C7119 + C7120 - C7121) * C48366) *
               C48214 +
           ((C5227 - C5228 + C5229 - C5230) * C22089 +
            (C5231 - C5232 + C5233 - C5234) * C22083 +
            (C6556 - C6557 + C6558 - C6559) * C22090 +
            (C6560 - C6561 + C6562 - C6563) * C48366) *
               C48222 +
           ((C5235 - C5236 + C5237 - C5238) * C22089 +
            (C5239 - C5240 + C5241 - C5242) * C22083 +
            (C6564 - C6565 + C6566 - C6567) * C22090 +
            (C6568 - C6569 + C6570 - C6571) * C48366) *
               C25914) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C22089 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C22083 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C22090 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C48366) *
               C48214 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C22089 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C22083 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C22090 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C48366) *
               C48222 +
           ((C48566 * C942 - C4890 * C935 + C48408 * C2826 - C4891 * C2820) *
                C22089 +
            (C48566 * C950 - C4890 * C943 + C48408 * C2832 - C4891 * C2827) *
                C22083 +
            (C48566 * C2323 - C4890 * C2313 + C48408 * C3267 - C4891 * C3262) *
                C22090 +
            (C48566 * C2331 - C4890 * C2324 + C48408 * C3271 - C4891 * C3268) *
                C48366) *
               C25914) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
            C1275 * C48366) *
               C48639 +
           ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
            C1283 * C48366) *
               C48632 +
           ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
            C3940 * C48366) *
               C48619 +
           ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
            (C301 - C302) * C22090 + (C303 - C304) * C48366) *
               C48602) *
              C48293 * C48276 * C111 +
          (C22104 * C48639 + C22105 * C48632 +
           (C168 * C22089 + C169 * C22083 + (C302 - C301) * C22090 +
            (C304 - C303) * C48366) *
               C48619 +
           ((C161 - C160) * C22089 + (C163 - C162) * C22083 +
            (C48321 * C280 - C113 * C269) * C22090 +
            (C48321 * C287 - C113 * C281) * C48366) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
            C1275 * C48636 + C1276 * C23187 + C1277 * C48626 + C11179 * C23188 +
            C11180 * C48608) *
               C23183 +
           ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
            C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
            (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C164 * C23185 + C165 * C48640 + C1079 * C23186 + C1080 * C48636 +
            C1092 * C23187 + C1093 * C48626 + (C1287 - C1286) * C23188 +
            (C1289 - C1288) * C48608) *
               C23183 +
           (C166 * C23185 + C167 * C48640 + C3799 * C23186 + C3800 * C48636 +
            (C1086 - C1085) * C23187 + (C1088 - C1087) * C48626 +
            (C48321 * C1255 - C113 * C1248) * C23188 +
            (C48321 * C1260 - C113 * C1256) * C48608) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C48293 * C260 +
           (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C260 +
           ((C1270 * C22089 + C1271 * C22083 + C1272 * C22090 +
             C1273 * C48366) *
                C48639 +
            (C1079 * C22089 + C1080 * C22083 + C1092 * C22090 +
             C1093 * C48366) *
                C48632 +
            (C3799 * C22089 + C3800 * C22083 + (C1086 - C1085) * C22090 +
             (C1088 - C1087) * C48366) *
                C48619 +
            ((C302 - C301) * C22089 + (C304 - C303) * C22083 +
             (C48321 * C593 - C113 * C584) * C22090 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C48293 * C260 +
           (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C260 +
           ((C1270 * C23185 + C1271 * C48640 + C1272 * C23186 + C1273 * C48636 +
             C11177 * C23187 + C11178 * C48626 + (C9050 - C9049) * C23188 +
             (C9052 - C9051) * C48608) *
                C23183 +
            (C1079 * C23185 + C1080 * C48640 + C1092 * C23186 + C1093 * C48636 +
             (C1287 - C1286) * C23187 + (C1289 - C1288) * C48626 +
             (C48321 * C1730 - C113 * C1725) * C23188 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C386 +
           (((C414 - C413) * C22089 + (C416 - C415) * C22083 +
             (C1453 - C1452) * C22090 + (C1455 - C1454) * C48366) *
                C48639 +
            ((C418 - C417) * C22089 + (C420 - C419) * C22083 +
             (C1461 - C1460) * C22090 + (C1463 - C1462) * C48366) *
                C48632 +
            ((C422 - C421) * C22089 + (C424 - C423) * C22083 +
             (C4072 - C4071) * C22090 + (C4074 - C4073) * C48366) *
                C48619 +
            ((C426 - C425) * C22089 + (C428 - C427) * C22083 +
             (C48321 * C695 - C113 * C686) * C22090 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C386 +
           (((C414 - C413) * C23185 + (C416 - C415) * C48640 +
             (C1453 - C1452) * C23186 + (C1455 - C1454) * C48636 +
             (C1457 - C1456) * C23187 + (C1459 - C1458) * C48626 +
             (C11312 - C11311) * C23188 + (C11314 - C11313) * C48608) *
                C23183 +
            ((C418 - C417) * C23185 + (C420 - C419) * C48640 +
             (C1461 - C1460) * C23186 + (C1463 - C1462) * C48636 +
             (C1465 - C1464) * C23187 + (C1467 - C1466) * C48626 +
             (C48321 * C1894 - C113 * C1889) * C23188 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C48293 * C510 +
           (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C510 +
           ((C1270 * C22089 + C1271 * C22083 + C1272 * C22090 +
             C1273 * C48366) *
                C48639 +
            (C1079 * C22089 + C1080 * C22083 + C1092 * C22090 +
             C1093 * C48366) *
                C48632 +
            (C3799 * C22089 + C3800 * C22083 + (C1086 - C1085) * C22090 +
             (C1088 - C1087) * C48366) *
                C48619 +
            ((C302 - C301) * C22089 + (C304 - C303) * C22083 +
             (C48321 * C593 - C113 * C584) * C22090 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C48293 * C510 +
           (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C510 +
           ((C1270 * C23185 + C1271 * C48640 + C1272 * C23186 + C1273 * C48636 +
             C11177 * C23187 + C11178 * C48626 + (C9050 - C9049) * C23188 +
             (C9052 - C9051) * C48608) *
                C23183 +
            (C1079 * C23185 + C1080 * C48640 + C1092 * C23186 + C1093 * C48636 +
             (C1287 - C1286) * C23187 + (C1289 - C1288) * C48626 +
             (C48321 * C1730 - C113 * C1725) * C23188 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C48293 * C576 +
          (((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
            (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
               C48639 +
           (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 + C1277 * C48366) *
               C48632 +
           (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 + C1285 * C48366) *
               C48619 +
           (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
            (C1087 - C1088) * C48366) *
               C48602) *
              C48293 * C577 +
          ((C1736 * C22089 + C1737 * C22083 + C9291 * C22090 + C9292 * C48366) *
               C48639 +
           (C1272 * C22089 + C1273 * C22083 + C11177 * C22090 +
            C11178 * C48366) *
               C48632 +
           (C1092 * C22089 + C1093 * C22083 + (C1287 - C1286) * C22090 +
            (C1289 - C1288) * C48366) *
               C48619 +
           ((C1086 - C1085) * C22089 + (C1088 - C1087) * C22083 +
            (C48321 * C1255 - C113 * C1248) * C22090 +
            (C48321 * C1260 - C113 * C1256) * C48366) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C48293 * C576 +
          (((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
            (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
            (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
            (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
               C23183 +
           (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
            C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
            (C9051 - C9052) * C48608) *
               C48219) *
              C48293 * C577 +
          ((C1736 * C23185 + C1737 * C48640 + C9291 * C23186 + C9292 * C48636 +
            C9293 * C23187 + C9294 * C48626 + (C9296 - C9295) * C23188 +
            (C9298 - C9297) * C48608) *
               C23183 +
           (C1272 * C23185 + C1273 * C48640 + C11177 * C23186 +
            C11178 * C48636 + (C9050 - C9049) * C23187 +
            (C9052 - C9051) * C48626 +
            (C48321 * C9040 - C113 * C9037) * C23188 +
            (C48321 * C9043 - C113 * C9041) * C48608) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C386 +
           (((C1901 - C1900) * C22089 + (C1903 - C1902) * C22083 +
             (C1905 - C1904) * C22090 + (C1907 - C1906) * C48366) *
                C48639 +
            ((C1453 - C1452) * C22089 + (C1455 - C1454) * C22083 +
             (C1457 - C1456) * C22090 + (C1459 - C1458) * C48366) *
                C48632 +
            ((C1461 - C1460) * C22089 + (C1463 - C1462) * C22083 +
             (C1465 - C1464) * C22090 + (C1467 - C1466) * C48366) *
                C48619 +
            ((C4072 - C4071) * C22089 + (C4074 - C4073) * C22083 +
             (C48321 * C1445 - C113 * C1438) * C22090 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C386 +
           (((C1901 - C1900) * C23185 + (C1903 - C1902) * C48640 +
             (C1905 - C1904) * C23186 + (C1907 - C1906) * C48636 +
             (C9386 - C9385) * C23187 + (C9388 - C9387) * C48626 +
             (C9390 - C9389) * C23188 + (C9392 - C9391) * C48608) *
                C23183 +
            ((C1453 - C1452) * C23185 + (C1455 - C1454) * C48640 +
             (C1457 - C1456) * C23186 + (C1459 - C1458) * C48636 +
             (C11312 - C11311) * C23187 + (C11314 - C11313) * C48626 +
             (C48321 * C9138 - C113 * C9135) * C23188 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C22089 + (C147 - C146) * C22083 + C1274 * C22090 +
             C1275 * C48366) *
                C48639 +
            ((C149 - C148) * C22089 + (C151 - C150) * C22083 + C1282 * C22090 +
             C1283 * C48366) *
                C48632 +
            ((C153 - C152) * C22089 + (C155 - C154) * C22083 + C3939 * C22090 +
             C3940 * C48366) *
                C48619 +
            ((C157 - C156) * C22089 + (C159 - C158) * C22083 +
             (C301 - C302) * C22090 + (C303 - C304) * C48366) *
                C48602) *
               C784 +
           (((C414 - C413) * C22089 + (C416 - C415) * C22083 +
             (C1453 - C1452) * C22090 + (C1455 - C1454) * C48366) *
                C48639 +
            ((C418 - C417) * C22089 + (C420 - C419) * C22083 +
             (C1461 - C1460) * C22090 + (C1463 - C1462) * C48366) *
                C48632 +
            ((C422 - C421) * C22089 + (C424 - C423) * C22083 +
             (C4072 - C4071) * C22090 + (C4074 - C4073) * C48366) *
                C48619 +
            ((C426 - C425) * C22089 + (C428 - C427) * C22083 +
             (C48321 * C695 - C113 * C686) * C22090 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C23185 + (C147 - C146) * C48640 + C1274 * C23186 +
             C1275 * C48636 + C1276 * C23187 + C1277 * C48626 +
             C11179 * C23188 + C11180 * C48608) *
                C23183 +
            ((C149 - C148) * C23185 + (C151 - C150) * C48640 + C1282 * C23186 +
             C1283 * C48636 + C1284 * C23187 + C1285 * C48626 +
             (C1286 - C1287) * C23188 + (C1288 - C1289) * C48608) *
                C48219) *
               C784 +
           (((C414 - C413) * C23185 + (C416 - C415) * C48640 +
             (C1453 - C1452) * C23186 + (C1455 - C1454) * C48636 +
             (C1457 - C1456) * C23187 + (C1459 - C1458) * C48626 +
             (C11312 - C11311) * C23188 + (C11314 - C11313) * C48608) *
                C23183 +
            ((C418 - C417) * C23185 + (C420 - C419) * C48640 +
             (C1461 - C1460) * C23186 + (C1463 - C1462) * C48636 +
             (C1465 - C1464) * C23187 + (C1467 - C1466) * C48626 +
             (C48321 * C1894 - C113 * C1889) * C23188 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C22089 +
             (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
             (C1264 - C1265) * C48366) *
                C48639 +
            ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
             C1271 * C48366) *
                C48632 +
            C22104 * C48619 + C22105 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C22089 +
             (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
             (C1902 - C1903) * C48366) *
                C48639 +
            ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
             (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
                C48632 +
            ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
             (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
                C48619 +
            ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
             (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C22089 + (C1265 - C1264) * C22083 +
             (C1267 - C1266) * C22090 + (C1269 - C1268) * C48366) *
                C48639 +
            (C1274 * C22089 + C1275 * C22083 + C1276 * C22090 +
             C1277 * C48366) *
                C48632 +
            (C1282 * C22089 + C1283 * C22083 + C1284 * C22090 +
             C1285 * C48366) *
                C48619 +
            (C3939 * C22089 + C3940 * C22083 + (C1085 - C1086) * C22090 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C784 +
           (((C1901 - C1900) * C22089 + (C1903 - C1902) * C22083 +
             (C1905 - C1904) * C22090 + (C1907 - C1906) * C48366) *
                C48639 +
            ((C1453 - C1452) * C22089 + (C1455 - C1454) * C22083 +
             (C1457 - C1456) * C22090 + (C1459 - C1458) * C48366) *
                C48632 +
            ((C1461 - C1460) * C22089 + (C1463 - C1462) * C22083 +
             (C1465 - C1464) * C22090 + (C1467 - C1466) * C48366) *
                C48619 +
            ((C4072 - C4071) * C22089 + (C4074 - C4073) * C22083 +
             (C48321 * C1445 - C113 * C1438) * C22090 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C23185 +
             (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
             (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
             C9291 * C23188 + C9292 * C48608) *
                C23183 +
            ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
             C1271 * C48636 + C1272 * C23187 + C1273 * C48626 +
             C11177 * C23188 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C23185 +
             (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
             (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
             (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
             (C9387 - C9388) * C48608) *
                C23183 +
            ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
             (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
             (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
             (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C23185 + (C1265 - C1264) * C48640 +
             (C1267 - C1266) * C23186 + (C1269 - C1268) * C48636 +
             (C1738 - C1739) * C23187 + (C1740 - C1741) * C48626 +
             (C9046 - C9045) * C23188 + (C9048 - C9047) * C48608) *
                C23183 +
            (C1274 * C23185 + C1275 * C48640 + C1276 * C23186 + C1277 * C48636 +
             C11179 * C23187 + C11180 * C48626 + (C9049 - C9050) * C23188 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C784 +
           (((C1901 - C1900) * C23185 + (C1903 - C1902) * C48640 +
             (C1905 - C1904) * C23186 + (C1907 - C1906) * C48636 +
             (C9386 - C9385) * C23187 + (C9388 - C9387) * C48626 +
             (C9390 - C9389) * C23188 + (C9392 - C9391) * C48608) *
                C23183 +
            ((C1453 - C1452) * C23185 + (C1455 - C1454) * C48640 +
             (C1457 - C1456) * C23186 + (C1459 - C1458) * C48636 +
             (C11312 - C11311) * C23187 + (C11314 - C11313) * C48626 +
             (C48321 * C9138 - C113 * C9135) * C23188 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C22089 +
            (C48321 * C136 - C113 * C123) * C22083 + (C1262 - C1263) * C22090 +
            (C1264 - C1265) * C48366) *
               C48639 +
           ((C144 - C145) * C22089 + (C146 - C147) * C22083 + C1270 * C22090 +
            C1271 * C48366) *
               C48632 +
           C22104 * C48619 + C22105 * C48602) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C22089 +
            (C113 * C395 - C48321 * C406) * C22083 + (C1900 - C1901) * C22090 +
            (C1902 - C1903) * C48366) *
               C48639 +
           ((C413 - C414) * C22089 + (C415 - C416) * C22083 +
            (C1452 - C1453) * C22090 + (C1454 - C1455) * C48366) *
               C48632 +
           ((C417 - C418) * C22089 + (C419 - C420) * C22083 +
            (C1460 - C1461) * C22090 + (C1462 - C1463) * C48366) *
               C48619 +
           ((C421 - C422) * C22089 + (C423 - C424) * C22083 +
            (C4071 - C4072) * C22090 + (C4073 - C4074) * C48366) *
               C48602) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C22089 +
            (C48321 * C948 - C113 * C939) * C22083 +
            (C48321 * C2315 - C113 * C2309) * C22090 +
            (C48321 * C2327 - C113 * C2316) * C48366) *
               C48639 +
           ((C48321 * C940 - C113 * C934) * C22089 +
            (C48321 * C949 - C113 * C941) * C22083 +
            (C48321 * C2319 - C113 * C2311) * C22090 +
            (C48321 * C2329 - C113 * C2320) * C48366) *
               C48632 +
           ((C48321 * C942 - C113 * C935) * C22089 +
            (C48321 * C950 - C113 * C943) * C22083 +
            (C48321 * C2323 - C113 * C2313) * C22090 +
            (C48321 * C2331 - C113 * C2324) * C48366) *
               C48619 +
           ((C48321 * C944 - C113 * C936) * C22089 +
            (C48321 * C951 - C113 * C945) * C22083 +
            (C48321 * C2645 - C113 * C2644) * C22090 +
            (C48321 * C2647 - C113 * C2646) * C48366) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C23185 +
            (C48321 * C136 - C113 * C123) * C48640 + (C1262 - C1263) * C23186 +
            (C1264 - C1265) * C48636 + C1736 * C23187 + C1737 * C48626 +
            C9291 * C23188 + C9292 * C48608) *
               C23183 +
           ((C144 - C145) * C23185 + (C146 - C147) * C48640 + C1270 * C23186 +
            C1271 * C48636 + C1272 * C23187 + C1273 * C48626 + C11177 * C23188 +
            C11178 * C48608) *
               C48219) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C23185 +
            (C113 * C395 - C48321 * C406) * C48640 + (C1900 - C1901) * C23186 +
            (C1902 - C1903) * C48636 + (C1904 - C1905) * C23187 +
            (C1906 - C1907) * C48626 + (C9385 - C9386) * C23188 +
            (C9387 - C9388) * C48608) *
               C23183 +
           ((C413 - C414) * C23185 + (C415 - C416) * C48640 +
            (C1452 - C1453) * C23186 + (C1454 - C1455) * C48636 +
            (C1456 - C1457) * C23187 + (C1458 - C1459) * C48626 +
            (C11311 - C11312) * C23188 + (C11313 - C11314) * C48608) *
               C48219) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C23185 +
            (C48321 * C948 - C113 * C939) * C48640 +
            (C48321 * C2315 - C113 * C2309) * C23186 +
            (C48321 * C2327 - C113 * C2316) * C48636 +
            (C48321 * C2317 - C113 * C2310) * C23187 +
            (C48321 * C2328 - C113 * C2318) * C48626 +
            (C48321 * C9620 - C113 * C9618) * C23188 +
            (C48321 * C9624 - C113 * C9621) * C48608) *
               C23183 +
           ((C48321 * C940 - C113 * C934) * C23185 +
            (C48321 * C949 - C113 * C941) * C48640 +
            (C48321 * C2319 - C113 * C2311) * C23186 +
            (C48321 * C2329 - C113 * C2320) * C48636 +
            (C48321 * C2321 - C113 * C2312) * C23187 +
            (C48321 * C2330 - C113 * C2322) * C48626 +
            (C48321 * C9883 - C113 * C9882) * C23188 +
            (C48321 * C9885 - C113 * C9884) * C48608) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C47273 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48362 +
            (C31769 - C31770 + C31771 - C31772) * C47265 +
            (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
            C32380 * C25911) *
               C48543 +
           ((C30339 - C30340 + C30341 - C30342) * C47273 +
            (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
            C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C47273 +
            (C30344 - C30343 + C30346 - C30345) * C48362 + C31813 * C47265 +
            C31814 * C48369 + C31815 * C47279 + C31816 * C25911) *
               C48543 +
           ((C30348 - C30347 + C30350 - C30349) * C47273 +
            (C30352 - C30351 + C30354 - C30353) * C48362 + C34628 * C47265 +
            C34629 * C48369 + (C31567 - C31568 + C31569 - C31570) * C47279 +
            (C31571 - C31572 + C31573 - C31574) * C25911) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C30379 * C47273 + C30380 * C48362 + C34424 * C47265 +
            C34425 * C48369 + (C31568 - C31567 + C31570 - C31569) * C47279 +
            (C31572 - C31571 + C31574 - C31573) * C25911) *
               C48543 +
           (C30381 * C47273 + C30382 * C48362 +
            (C30536 - C30535 + C30538 - C30537) * C47265 +
            (C30540 - C30539 + C30542 - C30541) * C48369 +
            (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                C47279 +
            (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                C25911) *
               C48219) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C47273 +
             (C31774 - C31773 + C31776 - C31775) * C48362 +
             (C31778 - C31777 + C31780 - C31779) * C47265 +
             (C31782 - C31781 + C31784 - C31783) * C48369 +
             (C32371 - C32372 + C32373 - C32374) * C47279 +
             (C32375 - C32376 + C32377 - C32378) * C25911) *
                C48543 +
            (C31813 * C47273 + C31814 * C48362 + C31815 * C47265 +
             C31816 * C48369 + (C31801 - C31802 + C31803 - C31804) * C47279 +
             (C31805 - C31806 + C31807 - C31808) * C25911) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C47273 +
             (C30344 - C30343 + C30346 - C30345) * C48362 + C31813 * C47265 +
             C31814 * C48369 + C31815 * C47279 + C31816 * C25911) *
                C48543 +
            ((C30348 - C30347 + C30350 - C30349) * C47273 +
             (C30352 - C30351 + C30354 - C30353) * C48362 + C34628 * C47265 +
             C34629 * C48369 + (C31567 - C31568 + C31569 - C31570) * C47279 +
             (C31571 - C31572 + C31573 - C31574) * C25911) *
                C48219) *
               C48293 * C260 +
           ((C31809 * C47273 + C31810 * C48362 + C31811 * C47265 +
             C31812 * C48369 + (C31802 - C31801 + C31804 - C31803) * C47279 +
             (C31806 - C31805 + C31808 - C31807) * C25911) *
                C48543 +
            (C34424 * C47273 + C34425 * C48362 +
             (C31568 - C31567 + C31570 - C31569) * C47265 +
             (C31572 - C31571 + C31574 - C31573) * C48369 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C47279 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C25911) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C47273 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48362 +
             (C32575 - C32576 + C32577 - C32578) * C47265 +
             (C32579 - C32580 + C32581 - C32582) * C48369 +
             (C32583 - C32584 + C32585 - C32586) * C47279 +
             (C32587 - C32588 + C32589 - C32590) * C25911) *
                C48543 +
            ((C30673 - C30674 + C30675 - C30676) * C47273 +
             (C30677 - C30678 + C30679 - C30680) * C48362 +
             (C32011 - C32012 + C32013 - C32014) * C47265 +
             (C32015 - C32016 + C32017 - C32018) * C48369 +
             (C32019 - C32020 + C32021 - C32022) * C47279 +
             (C32023 - C32024 + C32025 - C32026) * C25911) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C47273 +
             (C30344 - C30343 + C30346 - C30345) * C48362 + C31813 * C47265 +
             C31814 * C48369 + C31815 * C47279 + C31816 * C25911) *
                C48543 +
            ((C30348 - C30347 + C30350 - C30349) * C47273 +
             (C30352 - C30351 + C30354 - C30353) * C48362 + C34628 * C47265 +
             C34629 * C48369 + (C31567 - C31568 + C31569 - C31570) * C47279 +
             (C31571 - C31572 + C31573 - C31574) * C25911) *
                C48219) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C47273 +
             (C30678 - C30677 + C30680 - C30679) * C48362 +
             (C32012 - C32011 + C32014 - C32013) * C47265 +
             (C32016 - C32015 + C32018 - C32017) * C48369 +
             (C32020 - C32019 + C32022 - C32021) * C47279 +
             (C32024 - C32023 + C32026 - C32025) * C25911) *
                C48543 +
            ((C30682 - C30681 + C30684 - C30683) * C47273 +
             (C30686 - C30685 + C30688 - C30687) * C48362 +
             (C34825 - C34824 + C34827 - C34826) * C47265 +
             (C34829 - C34828 + C34831 - C34830) * C48369 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C47279 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C25911) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C47273 +
             (C31774 - C31773 + C31776 - C31775) * C48362 +
             (C31778 - C31777 + C31780 - C31779) * C47265 +
             (C31782 - C31781 + C31784 - C31783) * C48369 +
             (C32371 - C32372 + C32373 - C32374) * C47279 +
             (C32375 - C32376 + C32377 - C32378) * C25911) *
                C48543 +
            (C31813 * C47273 + C31814 * C48362 + C31815 * C47265 +
             C31816 * C48369 + (C31801 - C31802 + C31803 - C31804) * C47279 +
             (C31805 - C31806 + C31807 - C31808) * C25911) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C47273 +
             (C30344 - C30343 + C30346 - C30345) * C48362 + C31813 * C47265 +
             C31814 * C48369 + C31815 * C47279 + C31816 * C25911) *
                C48543 +
            ((C30348 - C30347 + C30350 - C30349) * C47273 +
             (C30352 - C30351 + C30354 - C30353) * C48362 + C34628 * C47265 +
             C34629 * C48369 + (C31567 - C31568 + C31569 - C31570) * C47279 +
             (C31571 - C31572 + C31573 - C31574) * C25911) *
                C48219) *
               C48293 * C510 +
           ((C31809 * C47273 + C31810 * C48362 + C31811 * C47265 +
             C31812 * C48369 + (C31802 - C31801 + C31804 - C31803) * C47279 +
             (C31806 - C31805 + C31808 - C31807) * C25911) *
                C48543 +
            (C34424 * C47273 + C34425 * C48362 +
             (C31568 - C31567 + C31570 - C31569) * C47265 +
             (C31572 - C31571 + C31574 - C31573) * C48369 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C47279 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C25911) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C47273 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48362 +
            (C31769 - C31770 + C31771 - C31772) * C47265 +
            (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
            C32380 * C25911) *
               C48543 +
           ((C30339 - C30340 + C30341 - C30342) * C47273 +
            (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
            C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
               C48219) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C47273 +
            (C31774 - C31773 + C31776 - C31775) * C48362 +
            (C31778 - C31777 + C31780 - C31779) * C47265 +
            (C31782 - C31781 + C31784 - C31783) * C48369 +
            (C32371 - C32372 + C32373 - C32374) * C47279 +
            (C32375 - C32376 + C32377 - C32378) * C25911) *
               C48543 +
           (C31813 * C47273 + C31814 * C48362 + C31815 * C47265 +
            C31816 * C48369 + (C31801 - C31802 + C31803 - C31804) * C47279 +
            (C31805 - C31806 + C31807 - C31808) * C25911) *
               C48219) *
              C48293 * C577 +
          ((C32379 * C47273 + C32380 * C48362 + C41098 * C47265 +
            C41099 * C48369 + (C41091 - C41090 + C41093 - C41092) * C47279 +
            (C41095 - C41094 + C41097 - C41096) * C25911) *
               C48543 +
           (C31811 * C47273 + C31812 * C48362 +
            (C31802 - C31801 + C31804 - C31803) * C47265 +
            (C31806 - C31805 + C31808 - C31807) * C48369 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C47279 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C25911) *
               C48219) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C47273 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48362 +
             (C32575 - C32576 + C32577 - C32578) * C47265 +
             (C32579 - C32580 + C32581 - C32582) * C48369 +
             (C32583 - C32584 + C32585 - C32586) * C47279 +
             (C32587 - C32588 + C32589 - C32590) * C25911) *
                C48543 +
            ((C30673 - C30674 + C30675 - C30676) * C47273 +
             (C30677 - C30678 + C30679 - C30680) * C48362 +
             (C32011 - C32012 + C32013 - C32014) * C47265 +
             (C32015 - C32016 + C32017 - C32018) * C48369 +
             (C32019 - C32020 + C32021 - C32022) * C47279 +
             (C32023 - C32024 + C32025 - C32026) * C25911) *
                C48219) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C47273 +
             (C31774 - C31773 + C31776 - C31775) * C48362 +
             (C31778 - C31777 + C31780 - C31779) * C47265 +
             (C31782 - C31781 + C31784 - C31783) * C48369 +
             (C32371 - C32372 + C32373 - C32374) * C47279 +
             (C32375 - C32376 + C32377 - C32378) * C25911) *
                C48543 +
            (C31813 * C47273 + C31814 * C48362 + C31815 * C47265 +
             C31816 * C48369 + (C31801 - C31802 + C31803 - C31804) * C47279 +
             (C31805 - C31806 + C31807 - C31808) * C25911) *
                C48219) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C47273 +
             (C32580 - C32579 + C32582 - C32581) * C48362 +
             (C32584 - C32583 + C32586 - C32585) * C47265 +
             (C32588 - C32587 + C32590 - C32589) * C48369 +
             (C41231 - C41230 + C41233 - C41232) * C47279 +
             (C41235 - C41234 + C41237 - C41236) * C25911) *
                C48543 +
            ((C32012 - C32011 + C32014 - C32013) * C47273 +
             (C32016 - C32015 + C32018 - C32017) * C48362 +
             (C32020 - C32019 + C32022 - C32021) * C47265 +
             (C32024 - C32023 + C32026 - C32025) * C48369 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C47279 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C25911) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C47273 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48362 +
             (C32575 - C32576 + C32577 - C32578) * C47265 +
             (C32579 - C32580 + C32581 - C32582) * C48369 +
             (C32583 - C32584 + C32585 - C32586) * C47279 +
             (C32587 - C32588 + C32589 - C32590) * C25911) *
                C48543 +
            ((C30673 - C30674 + C30675 - C30676) * C47273 +
             (C30677 - C30678 + C30679 - C30680) * C48362 +
             (C32011 - C32012 + C32013 - C32014) * C47265 +
             (C32015 - C32016 + C32017 - C32018) * C48369 +
             (C32019 - C32020 + C32021 - C32022) * C47279 +
             (C32023 - C32024 + C32025 - C32026) * C25911) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C47273 +
             (C30344 - C30343 + C30346 - C30345) * C48362 + C31813 * C47265 +
             C31814 * C48369 + C31815 * C47279 + C31816 * C25911) *
                C48543 +
            ((C30348 - C30347 + C30350 - C30349) * C47273 +
             (C30352 - C30351 + C30354 - C30353) * C48362 + C34628 * C47265 +
             C34629 * C48369 + (C31567 - C31568 + C31569 - C31570) * C47279 +
             (C31571 - C31572 + C31573 - C31574) * C25911) *
                C48219) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C47273 +
             (C30678 - C30677 + C30680 - C30679) * C48362 +
             (C32012 - C32011 + C32014 - C32013) * C47265 +
             (C32016 - C32015 + C32018 - C32017) * C48369 +
             (C32020 - C32019 + C32022 - C32021) * C47279 +
             (C32024 - C32023 + C32026 - C32025) * C25911) *
                C48543 +
            ((C30682 - C30681 + C30684 - C30683) * C47273 +
             (C30686 - C30685 + C30688 - C30687) * C48362 +
             (C34825 - C34824 + C34827 - C34826) * C47265 +
             (C34829 - C34828 + C34831 - C34830) * C48369 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C47279 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C25911) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C47273 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48362 +
             (C31769 - C31770 + C31771 - C31772) * C47265 +
             (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
             C32380 * C25911) *
                C48543 +
            ((C30339 - C30340 + C30341 - C30342) * C47273 +
             (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
             C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C47273 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48362 +
             (C32575 - C32576 + C32577 - C32578) * C47265 +
             (C32579 - C32580 + C32581 - C32582) * C48369 +
             (C32583 - C32584 + C32585 - C32586) * C47279 +
             (C32587 - C32588 + C32589 - C32590) * C25911) *
                C48543 +
            ((C30673 - C30674 + C30675 - C30676) * C47273 +
             (C30677 - C30678 + C30679 - C30680) * C48362 +
             (C32011 - C32012 + C32013 - C32014) * C47265 +
             (C32015 - C32016 + C32017 - C32018) * C48369 +
             (C32019 - C32020 + C32021 - C32022) * C47279 +
             (C32023 - C32024 + C32025 - C32026) * C25911) *
                C48219) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C47273 +
             (C31774 - C31773 + C31776 - C31775) * C48362 +
             (C31778 - C31777 + C31780 - C31779) * C47265 +
             (C31782 - C31781 + C31784 - C31783) * C48369 +
             (C32371 - C32372 + C32373 - C32374) * C47279 +
             (C32375 - C32376 + C32377 - C32378) * C25911) *
                C48543 +
            (C31813 * C47273 + C31814 * C48362 + C31815 * C47265 +
             C31816 * C48369 + (C31801 - C31802 + C31803 - C31804) * C47279 +
             (C31805 - C31806 + C31807 - C31808) * C25911) *
                C48219) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C47273 +
             (C32580 - C32579 + C32582 - C32581) * C48362 +
             (C32584 - C32583 + C32586 - C32585) * C47265 +
             (C32588 - C32587 + C32590 - C32589) * C48369 +
             (C41231 - C41230 + C41233 - C41232) * C47279 +
             (C41235 - C41234 + C41237 - C41236) * C25911) *
                C48543 +
            ((C32012 - C32011 + C32014 - C32013) * C47273 +
             (C32016 - C32015 + C32018 - C32017) * C48362 +
             (C32020 - C32019 + C32022 - C32021) * C47265 +
             (C32024 - C32023 + C32026 - C32025) * C48369 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C47279 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C25911) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C47273 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48362 +
            (C31769 - C31770 + C31771 - C31772) * C47265 +
            (C31773 - C31774 + C31775 - C31776) * C48369 + C32379 * C47279 +
            C32380 * C25911) *
               C48543 +
           ((C30339 - C30340 + C30341 - C30342) * C47273 +
            (C30343 - C30344 + C30345 - C30346) * C48362 + C31809 * C47265 +
            C31810 * C48369 + C31811 * C47279 + C31812 * C25911) *
               C48219) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C47273 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48362 +
            (C32575 - C32576 + C32577 - C32578) * C47265 +
            (C32579 - C32580 + C32581 - C32582) * C48369 +
            (C32583 - C32584 + C32585 - C32586) * C47279 +
            (C32587 - C32588 + C32589 - C32590) * C25911) *
               C48543 +
           ((C30673 - C30674 + C30675 - C30676) * C47273 +
            (C30677 - C30678 + C30679 - C30680) * C48362 +
            (C32011 - C32012 + C32013 - C32014) * C47265 +
            (C32015 - C32016 + C32017 - C32018) * C48369 +
            (C32019 - C32020 + C32021 - C32022) * C47279 +
            (C32023 - C32024 + C32025 - C32026) * C25911) *
               C48219) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C47273 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48362 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C47265 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48369 +
            (C30334 * C2317 - C30336 * C2310 + C48408 * C10070 -
             C30337 * C10068) *
                C47279 +
            (C30334 * C2328 - C30336 * C2318 + C48408 * C10074 -
             C30337 * C10071) *
                C25911) *
               C48543 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C47273 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48362 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C47265 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48369 +
            (C30334 * C2321 - C30336 * C2312 + C48408 * C10072 -
             C30337 * C10069) *
                C47279 +
            (C30334 * C2330 - C30336 * C2322 + C48408 * C10075 -
             C30337 * C10073) *
                C25911) *
               C48219) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
            C36011 * C938 - C47366 * C933) *
               C47273 +
           (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
            C36011 * C948 - C47366 * C939) *
               C48362 +
           (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
           (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
           (C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C47279 +
           (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C25911) *
              C48209 * C48293 * C48276 * C110 +
          ((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C47273 +
           (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48362 +
           C37591 * C47265 + C37592 * C48369 +
           (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C47279 +
           (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C25911) *
              C48209 * C48293 * C48276 * C111 +
          (C36060 * C47273 + C36061 * C48362 +
           (C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C47265 +
           (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48369 +
           (C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
            C36011 * C2325 - C47366 * C2314) *
               C47279 +
           (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
            C36011 * C2332 - C47366 * C2326) *
               C25911) *
              C48209 * C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            (C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C47279 +
            (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C25911) *
               C48209 * C48293 * C260 +
           ((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C47273 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48362 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C47265 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48369 +
            (C47360 * C1245 - C48404 * C1249 + C47352 * C1887 - C48411 * C1890 +
             C47366 * C9618 - C36011 * C9620) *
                C47279 +
            (C47360 * C1250 - C48404 * C1257 + C47352 * C1891 - C48411 * C1896 +
             C47366 * C9621 - C36011 * C9624) *
                C25911) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C47273 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48362 +
            C37591 * C47265 + C37592 * C48369 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C47279 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C25911) *
               C48209 * C48293 * C260 +
           (C37589 * C47273 + C37590 * C48362 +
            (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C47265 +
            (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48369 +
            (C48404 * C1251 - C47360 * C1246 + C48411 * C1892 - C47352 * C1888 +
             C36011 * C9883 - C47366 * C9882) *
                C47279 +
            (C48404 * C1258 - C47360 * C1252 + C48411 * C1897 - C47352 * C1893 +
             C36011 * C9885 - C47366 * C9884) *
                C25911) *
               C48209 * C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            (C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C47279 +
            (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C25911) *
               C48209 * C386 +
           ((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C47273 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48362 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C47265 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48369 +
            (C47360 * C1435 - C48404 * C1439 + C47352 * C2310 - C48411 * C2317 +
             C47366 * C10068 - C36011 * C10070) *
                C47279 +
            (C47360 * C1440 - C48404 * C1447 + C47352 * C2318 - C48411 * C2328 +
             C47366 * C10071 - C36011 * C10074) *
                C25911) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C47273 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48362 +
            C37591 * C47265 + C37592 * C48369 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C47279 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C25911) *
               C48209 * C386 +
           ((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C47273 +
            (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48362 +
            (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C47265 +
            (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48369 +
            (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 - C47352 * C2312 +
             C36011 * C10072 - C47366 * C10069) *
                C47279 +
            (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 - C47352 * C2322 +
             C36011 * C10075 - C47366 * C10073) *
                C25911) *
               C48209 * C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            (C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C47279 +
            (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C25911) *
               C48209 * C48293 * C510 +
           ((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C47273 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48362 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C47265 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48369 +
            (C47360 * C1245 - C48404 * C1249 + C47352 * C1887 - C48411 * C1890 +
             C47366 * C9618 - C36011 * C9620) *
                C47279 +
            (C47360 * C1250 - C48404 * C1257 + C47352 * C1891 - C48411 * C1896 +
             C47366 * C9621 - C36011 * C9624) *
                C25911) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C47273 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48362 +
            C37591 * C47265 + C37592 * C48369 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C47279 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C25911) *
               C48209 * C48293 * C510 +
           (C37589 * C47273 + C37590 * C48362 +
            (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C47265 +
            (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48369 +
            (C48404 * C1251 - C47360 * C1246 + C48411 * C1892 - C47352 * C1888 +
             C36011 * C9883 - C47366 * C9882) *
                C47279 +
            (C48404 * C1258 - C47360 * C1252 + C48411 * C1897 - C47352 * C1893 +
             C36011 * C9885 - C47366 * C9884) *
                C25911) *
               C48209 * C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
            C36011 * C938 - C47366 * C933) *
               C47273 +
           (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
            C36011 * C948 - C47366 * C939) *
               C48362 +
           (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
           (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
           C46600 * C47279 + C46601 * C25911) *
              C48209 * C48293 * C576 +
          ((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C47273 +
           (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48362 +
           (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C47265 +
           (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48369 +
           (C46586 - C46587 + C46588 - C46589 + C46590 - C46591) * C47279 +
           (C46592 - C46593 + C46594 - C46595 + C46596 - C46597) * C25911) *
              C48209 * C48293 * C577 +
          (C46600 * C47273 + C46601 * C48362 +
           (C46587 - C46586 + C46589 - C46588 + C46591 - C46590) * C47265 +
           (C46593 - C46592 + C46595 - C46594 + C46597 - C46596) * C48369 +
           (C48404 * C1726 - C47360 * C1723 + C48411 * C9136 - C47352 * C9134 +
            C36011 * C9622 - C47366 * C9619) *
               C47279 +
           (C48404 * C1732 - C47360 * C1727 + C48411 * C9140 - C47352 * C9137 +
            C36011 * C9625 - C47366 * C9623) *
               C25911) *
              C48209 * C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            C46600 * C47279 + C46601 * C25911) *
               C48209 * C386 +
           ((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C47273 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48362 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C47265 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48369 +
            (C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C47279 +
            (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C25911) *
               C48209 * C48595) *
              C510 +
          (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C47273 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48362 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C47265 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48369 +
            (C46586 - C46587 + C46588 - C46589 + C46590 - C46591) * C47279 +
            (C46592 - C46593 + C46594 - C46595 + C46596 - C46597) * C25911) *
               C48209 * C386 +
           ((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C47273 +
            (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C48362 +
            (C46749 - C46748 + C46751 - C46750 + C46753 - C46752) * C47265 +
            (C46755 - C46754 + C46757 - C46756 + C46759 - C46758) * C48369 +
            (C48404 * C1890 - C47360 * C1887 + C48411 * C9620 - C47352 * C9618 +
             C36011 * C10501 - C47366 * C10500) *
                C47279 +
            (C48404 * C1896 - C47360 * C1891 + C48411 * C9624 - C47352 * C9621 +
             C36011 * C10503 - C47366 * C10502) *
                C25911) *
               C48209 * C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            C46600 * C47279 + C46601 * C25911) *
               C48209 * C784 +
           ((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C47273 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48362 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C47265 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48369 +
            (C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C47279 +
            (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C25911) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C47273 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48362 +
            C37591 * C47265 + C37592 * C48369 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C47279 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C25911) *
               C48209 * C784 +
           ((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C47273 +
            (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48362 +
            (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C47265 +
            (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48369 +
            (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 - C47352 * C2312 +
             C36011 * C10072 - C47366 * C10069) *
                C47279 +
            (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 - C47352 * C2322 +
             C36011 * C10075 - C47366 * C10073) *
                C25911) *
               C48209 * C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C47273 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48362 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
            C46600 * C47279 + C46601 * C25911) *
               C48209 * C784 +
           ((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C47273 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48362 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C47265 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48369 +
            (C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C47279 +
            (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C25911) *
               C48209 * C48595) *
              C260 +
          (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C47273 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48362 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C47265 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48369 +
            (C46586 - C46587 + C46588 - C46589 + C46590 - C46591) * C47279 +
            (C46592 - C46593 + C46594 - C46595 + C46596 - C46597) * C25911) *
               C48209 * C784 +
           ((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C47273 +
            (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C48362 +
            (C46749 - C46748 + C46751 - C46750 + C46753 - C46752) * C47265 +
            (C46755 - C46754 + C46757 - C46756 + C46759 - C46758) * C48369 +
            (C48404 * C1890 - C47360 * C1887 + C48411 * C9620 - C47352 * C9618 +
             C36011 * C10501 - C47366 * C10500) *
                C47279 +
            (C48404 * C1896 - C47360 * C1891 + C48411 * C9624 - C47352 * C9621 +
             C36011 * C10503 - C47366 * C10502) *
                C25911) *
               C48209 * C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
            C36011 * C938 - C47366 * C933) *
               C47273 +
           (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
            C36011 * C948 - C47366 * C939) *
               C48362 +
           (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C47265 +
           (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48369 +
           C46600 * C47279 + C46601 * C25911) *
              C48209 * C930 +
          ((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
            C47366 * C2818 - C36011 * C2822) *
               C47273 +
           (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
            C47366 * C2823 - C36011 * C2830) *
               C48362 +
           (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C47265 +
           (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48369 +
           (C46748 - C46749 + C46750 - C46751 + C46752 - C46753) * C47279 +
           (C46754 - C46755 + C46756 - C46757 + C46758 - C46759) * C25911) *
              C48209 * C931 +
          ((C48404 * C938 - C47360 * C933 + C48411 * C2822 - C47352 * C2818 +
            C36011 * C3677 - C47366 * C3674) *
               C47273 +
           (C48404 * C948 - C47360 * C939 + C48411 * C2830 - C47352 * C2823 +
            C36011 * C3683 - C47366 * C3678) *
               C48362 +
           (C48404 * C2315 - C47360 * C2309 + C48411 * C3263 - C47352 * C3260 +
            C36011 * C10932 - C47366 * C10930) *
               C47265 +
           (C48404 * C2327 - C47360 * C2316 + C48411 * C3269 - C47352 * C3264 +
            C36011 * C10936 - C47366 * C10933) *
               C48369 +
           (C48404 * C2317 - C47360 * C2310 + C48411 * C10070 -
            C47352 * C10068 + C36011 * C10934 - C47366 * C10931) *
               C47279 +
           (C48404 * C2328 - C47360 * C2318 + C48411 * C10074 -
            C47352 * C10071 + C36011 * C10937 - C47366 * C10935) *
               C25911) *
              C48209 * C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
           (C32376 - C32375 + C32378 - C32377) * C48608) *
              C48209 * C48293 * C48276 * C110 +
          ((C30340 - C30339 + C30342 - C30341) * C23185 +
           (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
           C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
           (C31801 - C31802 + C31803 - C31804) * C23188 +
           (C31805 - C31806 + C31807 - C31808) * C48608) *
              C48209 * C48293 * C48276 * C111 +
          (C30379 * C23185 + C30380 * C48640 + C34424 * C23186 +
           C34425 * C48636 + (C31568 - C31567 + C31570 - C31569) * C23187 +
           (C31572 - C31571 + C31574 - C31573) * C48626 +
           (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 - C30337 * C1889) *
               C23188 +
           (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 - C30337 * C1895) *
               C48608) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
            C31814 * C48366) *
               C48630 +
           ((C30348 - C30347 + C30350 - C30349) * C22089 +
            (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
            C34629 * C48366) *
               C48617 +
           ((C30356 - C30355 + C30358 - C30357) * C22089 +
            (C30360 - C30359 + C30362 - C30361) * C22083 +
            (C30535 - C30536 + C30537 - C30538) * C22090 +
            (C30539 - C30540 + C30541 - C30542) * C48366) *
               C48585) *
              C48293 * C48276 * C111 +
          (C39043 * C48630 +
           (C30381 * C22089 + C30382 * C22083 +
            (C30536 - C30535 + C30538 - C30537) * C22090 +
            (C30540 - C30539 + C30542 - C30541) * C48366) *
               C48617 +
           ((C30364 - C30363 + C30366 - C30365) * C22089 +
            (C30368 - C30367 + C30370 - C30369) * C22083 +
            (C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                C22090 +
            (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                C48366) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
            C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
               C22089 +
           (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
            C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
               C22083 +
           (C48641 * C270 - C33226 * C264 + C48638 * C687 - C33227 * C682 +
            C48629 * C2315 - C33228 * C2309 + C48614 * C3263 - C33229 * C3260) *
               C22090 +
           (C48641 * C282 - C33226 * C271 + C48638 * C697 - C33227 * C688 +
            C48629 * C2327 - C33228 * C2316 + C48614 * C3269 - C33229 * C3264) *
               C48366) *
              C48209 * C48293 * C48276 * C110 +
          ((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
            C33237) *
               C22089 +
           (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
            C33245) *
               C22083 +
           (C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
            C33400) *
               C22090 +
           (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
            C33408) *
               C48366) *
              C48209 * C48293 * C48276 * C111 +
          ((C33248 - C33247 + C33250 - C33249 + C33252 - C33251 + C33254 -
            C33253) *
               C22089 +
           (C33256 - C33255 + C33258 - C33257 + C33260 - C33259 + C33262 -
            C33261) *
               C22083 +
           (C48641 * C274 - C33226 * C266 + C48638 * C691 - C33227 * C684 +
            C48629 * C2323 - C33228 * C2313 + C48614 * C3267 - C33229 * C3262) *
               C22090 +
           (C48641 * C284 - C33226 * C275 + C48638 * C699 - C33227 * C692 +
            C48629 * C2331 - C33228 * C2324 + C48614 * C3271 - C33229 * C3268) *
               C48366) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C48293 * C260 +
           ((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C30336 * C1723 - C30334 * C1726 + C30337 * C9134 -
             C48408 * C9136) *
                C23188 +
            (C30336 * C1727 - C30334 * C1732 + C30337 * C9137 -
             C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C48293 * C260 +
           (C31809 * C23185 + C31810 * C48640 + C31811 * C23186 +
            C31812 * C48636 + (C31802 - C31801 + C31804 - C31803) * C23187 +
            (C31806 - C31805 + C31808 - C31807) * C48626 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C23188 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C48293 * C260 +
           ((C31809 * C22089 + C31810 * C22083 + C31811 * C22090 +
             C31812 * C48366) *
                C48630 +
            (C34424 * C22089 + C34425 * C22083 +
             (C31568 - C31567 + C31570 - C31569) * C22090 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48617 +
            ((C30536 - C30535 + C30538 - C30537) * C22089 +
             (C30540 - C30539 + C30542 - C30541) * C22083 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C22090 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C48293 * C260 +
           ((C41825 - C41824 + C41827 - C41826 + C41829 - C41828 + C41831 -
             C41830) *
                C22089 +
            (C41833 - C41832 + C41835 - C41834 + C41837 - C41836 + C41839 -
             C41838) *
                C22083 +
            (C33226 * C580 - C48641 * C585 + C33227 * C1435 - C48638 * C1439 +
             C33228 * C2310 - C48629 * C2317 + C33229 * C10068 -
             C48614 * C10070) *
                C22090 +
            (C33226 * C586 - C48641 * C595 + C33227 * C1440 - C48638 * C1447 +
             C33228 * C2318 - C48629 * C2328 + C33229 * C10071 -
             C48614 * C10074) *
                C48366) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
             C33237) *
                C22089 +
            (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
             C33245) *
                C22083 +
            (C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
             C33400) *
                C22090 +
            (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
             C33408) *
                C48366) *
               C48209 * C48293 * C260 +
           ((C33394 - C33393 + C33396 - C33395 + C33398 - C33397 + C33400 -
             C33399) *
                C22089 +
            (C33402 - C33401 + C33404 - C33403 + C33406 - C33405 + C33408 -
             C33407) *
                C22083 +
            (C48641 * C587 - C33226 * C581 + C48638 * C1441 - C33227 * C1436 +
             C48629 * C2321 - C33228 * C2312 + C48614 * C10072 -
             C33229 * C10069) *
                C22090 +
            (C48641 * C596 - C33226 * C588 + C48638 * C1448 - C33227 * C1442 +
             C48629 * C2330 - C33228 * C2322 + C48614 * C10075 -
             C33229 * C10073) *
                C48366) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C386 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C30336 * C1887 - C30334 * C1890 + C30337 * C9618 -
             C48408 * C9620) *
                C23188 +
            (C30336 * C1891 - C30334 * C1896 + C30337 * C9621 -
             C48408 * C9624) *
                C48608) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C386 +
           ((C30674 - C30673 + C30676 - C30675) * C23185 +
            (C30678 - C30677 + C30680 - C30679) * C48640 +
            (C32012 - C32011 + C32014 - C32013) * C23186 +
            (C32016 - C32015 + C32018 - C32017) * C48636 +
            (C32020 - C32019 + C32022 - C32021) * C23187 +
            (C32024 - C32023 + C32026 - C32025) * C48626 +
            (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
             C30337 * C9882) *
                C23188 +
            (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
             C30337 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C22089 +
             (C30678 - C30677 + C30680 - C30679) * C22083 +
             (C32012 - C32011 + C32014 - C32013) * C22090 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48630 +
            ((C30682 - C30681 + C30684 - C30683) * C22089 +
             (C30686 - C30685 + C30688 - C30687) * C22083 +
             (C34825 - C34824 + C34827 - C34826) * C22090 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48617 +
            ((C30690 - C30689 + C30692 - C30691) * C22089 +
             (C30694 - C30693 + C30696 - C30695) * C22083 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C22090 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C386 +
           ((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
             C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
             C48614 * C3677) *
                C22089 +
            (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
             C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
             C48614 * C3683) *
                C22083 +
            (C33226 * C682 - C48641 * C687 + C33227 * C2309 - C48638 * C2315 +
             C33228 * C3260 - C48629 * C3263 + C33229 * C10930 -
             C48614 * C10932) *
                C22090 +
            (C33226 * C688 - C48641 * C697 + C33227 * C2316 - C48638 * C2327 +
             C33228 * C3264 - C48629 * C3269 + C33229 * C10933 -
             C48614 * C10936) *
                C48366) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
             C33237) *
                C22089 +
            (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
             C33245) *
                C22083 +
            (C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
             C33400) *
                C22090 +
            (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
             C33408) *
                C48366) *
               C48209 * C386 +
           ((C33540 - C33539 + C33542 - C33541 + C33544 - C33543 + C33546 -
             C33545) *
                C22089 +
            (C33548 - C33547 + C33550 - C33549 + C33552 - C33551 + C33554 -
             C33553) *
                C22083 +
            (C48641 * C689 - C33226 * C683 + C48638 * C2319 - C33227 * C2311 +
             C48629 * C3265 - C33228 * C3261 + C48614 * C17530 -
             C33229 * C17529) *
                C22090 +
            (C48641 * C698 - C33226 * C690 + C48638 * C2329 - C33227 * C2320 +
             C48629 * C3270 - C33228 * C3266 + C48614 * C17532 -
             C33229 * C17531) *
                C48366) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C48293 * C510 +
           ((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C30336 * C1723 - C30334 * C1726 + C30337 * C9134 -
             C48408 * C9136) *
                C23188 +
            (C30336 * C1727 - C30334 * C1732 + C30337 * C9137 -
             C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C48293 * C510 +
           (C31809 * C23185 + C31810 * C48640 + C31811 * C23186 +
            C31812 * C48636 + (C31802 - C31801 + C31804 - C31803) * C23187 +
            (C31806 - C31805 + C31808 - C31807) * C48626 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C23188 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C48293 * C510 +
           ((C31809 * C22089 + C31810 * C22083 + C31811 * C22090 +
             C31812 * C48366) *
                C48630 +
            (C34424 * C22089 + C34425 * C22083 +
             (C31568 - C31567 + C31570 - C31569) * C22090 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48617 +
            ((C30536 - C30535 + C30538 - C30537) * C22089 +
             (C30540 - C30539 + C30542 - C30541) * C22083 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C22090 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C48293 * C510 +
           ((C41825 - C41824 + C41827 - C41826 + C41829 - C41828 + C41831 -
             C41830) *
                C22089 +
            (C41833 - C41832 + C41835 - C41834 + C41837 - C41836 + C41839 -
             C41838) *
                C22083 +
            (C33226 * C580 - C48641 * C585 + C33227 * C1435 - C48638 * C1439 +
             C33228 * C2310 - C48629 * C2317 + C33229 * C10068 -
             C48614 * C10070) *
                C22090 +
            (C33226 * C586 - C48641 * C595 + C33227 * C1440 - C48638 * C1447 +
             C33228 * C2318 - C48629 * C2328 + C33229 * C10071 -
             C48614 * C10074) *
                C48366) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
             C33237) *
                C22089 +
            (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
             C33245) *
                C22083 +
            (C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
             C33400) *
                C22090 +
            (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
             C33408) *
                C48366) *
               C48209 * C48293 * C510 +
           ((C33394 - C33393 + C33396 - C33395 + C33398 - C33397 + C33400 -
             C33399) *
                C22089 +
            (C33402 - C33401 + C33404 - C33403 + C33406 - C33405 + C33408 -
             C33407) *
                C22083 +
            (C48641 * C587 - C33226 * C581 + C48638 * C1441 - C33227 * C1436 +
             C48629 * C2321 - C33228 * C2312 + C48614 * C10072 -
             C33229 * C10069) *
                C22090 +
            (C48641 * C596 - C33226 * C588 + C48638 * C1448 - C33227 * C1442 +
             C48629 * C2330 - C33228 * C2322 + C48614 * C10075 -
             C33229 * C10073) *
                C48366) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
              C48209 * C48293 * C576 +
          ((C31770 - C31769 + C31772 - C31771) * C23185 +
           (C31774 - C31773 + C31776 - C31775) * C48640 +
           (C31778 - C31777 + C31780 - C31779) * C23186 +
           (C31782 - C31781 + C31784 - C31783) * C48636 +
           (C32371 - C32372 + C32373 - C32374) * C23187 +
           (C32375 - C32376 + C32377 - C32378) * C48626 +
           (C41090 - C41091 + C41092 - C41093) * C23188 +
           (C41094 - C41095 + C41096 - C41097) * C48608) *
              C48209 * C48293 * C577 +
          (C32379 * C23185 + C32380 * C48640 + C41098 * C23186 +
           C41099 * C48636 + (C41091 - C41090 + C41093 - C41092) * C23187 +
           (C41095 - C41094 + C41097 - C41096) * C48626 +
           (C30334 * C9038 - C30336 * C9036 + C48408 * C9381 - C30337 * C9380) *
               C23188 +
           (C30334 * C9042 - C30336 * C9039 + C48408 * C9383 - C30337 * C9382) *
               C48608) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C22089 +
            (C31774 - C31773 + C31776 - C31775) * C22083 +
            (C31778 - C31777 + C31780 - C31779) * C22090 +
            (C31782 - C31781 + C31784 - C31783) * C48366) *
               C48630 +
           (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
            C31816 * C48366) *
               C48617 +
           (C34628 * C22089 + C34629 * C22083 +
            (C31567 - C31568 + C31569 - C31570) * C22090 +
            (C31571 - C31572 + C31573 - C31574) * C48366) *
               C48585) *
              C48293 * C577 +
          ((C32379 * C22089 + C32380 * C22083 +
            (C32372 - C32371 + C32374 - C32373) * C22090 +
            (C32376 - C32375 + C32378 - C32377) * C48366) *
               C48630 +
           (C31811 * C22089 + C31812 * C22083 +
            (C31802 - C31801 + C31804 - C31803) * C22090 +
            (C31806 - C31805 + C31808 - C31807) * C48366) *
               C48617 +
           ((C31568 - C31567 + C31570 - C31569) * C22089 +
            (C31572 - C31571 + C31574 - C31573) * C22083 +
            (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
             C30337 * C1889) *
                C22090 +
            (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
             C30337 * C1895) *
                C48366) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
            C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
               C22089 +
           (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
            C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
               C22083 +
           (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
            C41831) *
               C22090 +
           (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
            C41839) *
               C48366) *
              C48209 * C48293 * C576 +
          ((C41825 - C41824 + C41827 - C41826 + C41829 - C41828 + C41831 -
            C41830) *
               C22089 +
           (C41833 - C41832 + C41835 - C41834 + C41837 - C41836 + C41839 -
            C41838) *
               C22083 +
           (C42198 - C42199 + C42200 - C42201 + C42202 - C42203 + C42204 -
            C42205) *
               C22090 +
           (C42206 - C42207 + C42208 - C42209 + C42210 - C42211 + C42212 -
            C42213) *
               C48366) *
              C48209 * C48293 * C577 +
          ((C42199 - C42198 + C42201 - C42200 + C42203 - C42202 + C42205 -
            C42204) *
               C22089 +
           (C42207 - C42206 + C42209 - C42208 + C42211 - C42210 + C42213 -
            C42212) *
               C22083 +
           (C48641 * C1249 - C33226 * C1245 + C48638 * C1890 - C33227 * C1887 +
            C48629 * C9620 - C33228 * C9618 + C48614 * C10501 -
            C33229 * C10500) *
               C22090 +
           (C48641 * C1257 - C33226 * C1250 + C48638 * C1896 - C33227 * C1891 +
            C48629 * C9624 - C33228 * C9621 + C48614 * C10503 -
            C33229 * C10502) *
               C48366) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C386 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C510 +
          (((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C41090 - C41091 + C41092 - C41093) * C23188 +
            (C41094 - C41095 + C41096 - C41097) * C48608) *
               C48209 * C386 +
           ((C32576 - C32575 + C32578 - C32577) * C23185 +
            (C32580 - C32579 + C32582 - C32581) * C48640 +
            (C32584 - C32583 + C32586 - C32585) * C23186 +
            (C32588 - C32587 + C32590 - C32589) * C48636 +
            (C41231 - C41230 + C41233 - C41232) * C23187 +
            (C41235 - C41234 + C41237 - C41236) * C48626 +
            (C30334 * C9136 - C30336 * C9134 + C48408 * C9622 -
             C30337 * C9619) *
                C23188 +
            (C30334 * C9140 - C30336 * C9137 + C48408 * C9625 -
             C30337 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C22089 +
             (C32580 - C32579 + C32582 - C32581) * C22083 +
             (C32584 - C32583 + C32586 - C32585) * C22090 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48630 +
            ((C32012 - C32011 + C32014 - C32013) * C22089 +
             (C32016 - C32015 + C32018 - C32017) * C22083 +
             (C32020 - C32019 + C32022 - C32021) * C22090 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48617 +
            ((C34825 - C34824 + C34827 - C34826) * C22089 +
             (C34829 - C34828 + C34831 - C34830) * C22083 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C22090 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C386 +
           ((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
             C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
             C48614 * C3677) *
                C22089 +
            (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
             C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
             C48614 * C3683) *
                C22083 +
            (C42344 - C42345 + C42346 - C42347 + C42348 - C42349 + C42350 -
             C42351) *
                C22090 +
            (C42352 - C42353 + C42354 - C42355 + C42356 - C42357 + C42358 -
             C42359) *
                C48366) *
               C48209 * C48595) *
              C510 +
          (((C41825 - C41824 + C41827 - C41826 + C41829 - C41828 + C41831 -
             C41830) *
                C22089 +
            (C41833 - C41832 + C41835 - C41834 + C41837 - C41836 + C41839 -
             C41838) *
                C22083 +
            (C42198 - C42199 + C42200 - C42201 + C42202 - C42203 + C42204 -
             C42205) *
                C22090 +
            (C42206 - C42207 + C42208 - C42209 + C42210 - C42211 + C42212 -
             C42213) *
                C48366) *
               C48209 * C386 +
           ((C42345 - C42344 + C42347 - C42346 + C42349 - C42348 + C42351 -
             C42350) *
                C22089 +
            (C42353 - C42352 + C42355 - C42354 + C42357 - C42356 + C42359 -
             C42358) *
                C22083 +
            (C48641 * C1439 - C33226 * C1435 + C48638 * C2317 - C33227 * C2310 +
             C48629 * C10070 - C33228 * C10068 + C48614 * C10934 -
             C33229 * C10931) *
                C22090 +
            (C48641 * C1447 - C33226 * C1440 + C48638 * C2328 - C33227 * C2318 +
             C48629 * C10074 - C33228 * C10071 + C48614 * C10937 -
             C33229 * C10935) *
                C48366) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C784 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C784 +
           ((C30674 - C30673 + C30676 - C30675) * C23185 +
            (C30678 - C30677 + C30680 - C30679) * C48640 +
            (C32012 - C32011 + C32014 - C32013) * C23186 +
            (C32016 - C32015 + C32018 - C32017) * C48636 +
            (C32020 - C32019 + C32022 - C32021) * C23187 +
            (C32024 - C32023 + C32026 - C32025) * C48626 +
            (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
             C30337 * C9882) *
                C23188 +
            (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
             C30337 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C22089 +
             (C30678 - C30677 + C30680 - C30679) * C22083 +
             (C32012 - C32011 + C32014 - C32013) * C22090 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48630 +
            ((C30682 - C30681 + C30684 - C30683) * C22089 +
             (C30686 - C30685 + C30688 - C30687) * C22083 +
             (C34825 - C34824 + C34827 - C34826) * C22090 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48617 +
            ((C30690 - C30689 + C30692 - C30691) * C22089 +
             (C30694 - C30693 + C30696 - C30695) * C22083 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C22090 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C784 +
           ((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
             C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
             C48614 * C3677) *
                C22089 +
            (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
             C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
             C48614 * C3683) *
                C22083 +
            (C42344 - C42345 + C42346 - C42347 + C42348 - C42349 + C42350 -
             C42351) *
                C22090 +
            (C42352 - C42353 + C42354 - C42355 + C42356 - C42357 + C42358 -
             C42359) *
                C48366) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
             C33237) *
                C22089 +
            (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
             C33245) *
                C22083 +
            (C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
             C33400) *
                C22090 +
            (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
             C33408) *
                C48366) *
               C48209 * C784 +
           ((C33540 - C33539 + C33542 - C33541 + C33544 - C33543 + C33546 -
             C33545) *
                C22089 +
            (C33548 - C33547 + C33550 - C33549 + C33552 - C33551 + C33554 -
             C33553) *
                C22083 +
            (C48641 * C689 - C33226 * C683 + C48638 * C2319 - C33227 * C2311 +
             C48629 * C3265 - C33228 * C3261 + C48614 * C17530 -
             C33229 * C17529) *
                C22090 +
            (C48641 * C698 - C33226 * C690 + C48638 * C2329 - C33227 * C2320 +
             C48629 * C3270 - C33228 * C3266 + C48614 * C17532 -
             C33229 * C17531) *
                C48366) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C784 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C260 +
          (((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C41090 - C41091 + C41092 - C41093) * C23188 +
            (C41094 - C41095 + C41096 - C41097) * C48608) *
               C48209 * C784 +
           ((C32576 - C32575 + C32578 - C32577) * C23185 +
            (C32580 - C32579 + C32582 - C32581) * C48640 +
            (C32584 - C32583 + C32586 - C32585) * C23186 +
            (C32588 - C32587 + C32590 - C32589) * C48636 +
            (C41231 - C41230 + C41233 - C41232) * C23187 +
            (C41235 - C41234 + C41237 - C41236) * C48626 +
            (C30334 * C9136 - C30336 * C9134 + C48408 * C9622 -
             C30337 * C9619) *
                C23188 +
            (C30334 * C9140 - C30336 * C9137 + C48408 * C9625 -
             C30337 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C22089 +
             (C32580 - C32579 + C32582 - C32581) * C22083 +
             (C32584 - C32583 + C32586 - C32585) * C22090 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48630 +
            ((C32012 - C32011 + C32014 - C32013) * C22089 +
             (C32016 - C32015 + C32018 - C32017) * C22083 +
             (C32020 - C32019 + C32022 - C32021) * C22090 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48617 +
            ((C34825 - C34824 + C34827 - C34826) * C22089 +
             (C34829 - C34828 + C34831 - C34830) * C22083 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C22090 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C22089 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C22083 +
            (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
             C41831) *
                C22090 +
            (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
             C41839) *
                C48366) *
               C48209 * C784 +
           ((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
             C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
             C48614 * C3677) *
                C22089 +
            (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
             C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
             C48614 * C3683) *
                C22083 +
            (C42344 - C42345 + C42346 - C42347 + C42348 - C42349 + C42350 -
             C42351) *
                C22090 +
            (C42352 - C42353 + C42354 - C42355 + C42356 - C42357 + C42358 -
             C42359) *
                C48366) *
               C48209 * C48595) *
              C260 +
          (((C41825 - C41824 + C41827 - C41826 + C41829 - C41828 + C41831 -
             C41830) *
                C22089 +
            (C41833 - C41832 + C41835 - C41834 + C41837 - C41836 + C41839 -
             C41838) *
                C22083 +
            (C42198 - C42199 + C42200 - C42201 + C42202 - C42203 + C42204 -
             C42205) *
                C22090 +
            (C42206 - C42207 + C42208 - C42209 + C42210 - C42211 + C42212 -
             C42213) *
                C48366) *
               C48209 * C784 +
           ((C42345 - C42344 + C42347 - C42346 + C42349 - C42348 + C42351 -
             C42350) *
                C22089 +
            (C42353 - C42352 + C42355 - C42354 + C42357 - C42356 + C42359 -
             C42358) *
                C22083 +
            (C48641 * C1439 - C33226 * C1435 + C48638 * C2317 - C33227 * C2310 +
             C48629 * C10070 - C33228 * C10068 + C48614 * C10934 -
             C33229 * C10931) *
                C22090 +
            (C48641 * C1447 - C33226 * C1440 + C48638 * C2328 - C33227 * C2318 +
             C48629 * C10074 - C33228 * C10071 + C48614 * C10937 -
             C33229 * C10935) *
                C48366) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
              C48209 * C930 +
          ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
               C23185 +
           (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
               C48640 +
           (C32575 - C32576 + C32577 - C32578) * C23186 +
           (C32579 - C32580 + C32581 - C32582) * C48636 +
           (C32583 - C32584 + C32585 - C32586) * C23187 +
           (C32587 - C32588 + C32589 - C32590) * C48626 +
           (C41230 - C41231 + C41232 - C41233) * C23188 +
           (C41234 - C41235 + C41236 - C41237) * C48608) *
              C48209 * C931 +
          ((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
               C23185 +
           (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
               C48640 +
           (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 - C30337 * C3260) *
               C23186 +
           (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 - C30337 * C3264) *
               C48636 +
           (C30334 * C2317 - C30336 * C2310 + C48408 * C10070 -
            C30337 * C10068) *
               C23187 +
           (C30334 * C2328 - C30336 * C2318 + C48408 * C10074 -
            C30337 * C10071) *
               C48626 +
           (C30334 * C9620 - C30336 * C9618 + C48408 * C10501 -
            C30337 * C10500) *
               C23188 +
           (C30334 * C9624 - C30336 * C9621 + C48408 * C10503 -
            C30337 * C10502) *
               C48608) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C22089 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C22083 +
            (C32575 - C32576 + C32577 - C32578) * C22090 +
            (C32579 - C32580 + C32581 - C32582) * C48366) *
               C48630 +
           ((C30673 - C30674 + C30675 - C30676) * C22089 +
            (C30677 - C30678 + C30679 - C30680) * C22083 +
            (C32011 - C32012 + C32013 - C32014) * C22090 +
            (C32015 - C32016 + C32017 - C32018) * C48366) *
               C48617 +
           ((C30681 - C30682 + C30683 - C30684) * C22089 +
            (C30685 - C30686 + C30687 - C30688) * C22083 +
            (C34824 - C34825 + C34826 - C34827) * C22090 +
            (C34828 - C34829 + C34830 - C34831) * C48366) *
               C48585) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C22089 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C22083 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C22090 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48366) *
               C48630 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C22089 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C22083 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C22090 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48366) *
               C48617 +
           ((C30334 * C942 - C30336 * C935 + C48408 * C2826 - C30337 * C2820) *
                C22089 +
            (C30334 * C950 - C30336 * C943 + C48408 * C2832 - C30337 * C2827) *
                C22083 +
            (C30334 * C2323 - C30336 * C2313 + C48408 * C3267 -
             C30337 * C3262) *
                C22090 +
            (C30334 * C2331 - C30336 * C2324 + C48408 * C3271 -
             C30337 * C3268) *
                C48366) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
            C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
               C22089 +
           (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
            C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
               C22083 +
           (C41824 - C41825 + C41826 - C41827 + C41828 - C41829 + C41830 -
            C41831) *
               C22090 +
           (C41832 - C41833 + C41834 - C41835 + C41836 - C41837 + C41838 -
            C41839) *
               C48366) *
              C48209 * C930 +
          ((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
            C33228 * C2818 - C48629 * C2822 + C33229 * C3674 - C48614 * C3677) *
               C22089 +
           (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
            C33228 * C2823 - C48629 * C2830 + C33229 * C3678 - C48614 * C3683) *
               C22083 +
           (C42344 - C42345 + C42346 - C42347 + C42348 - C42349 + C42350 -
            C42351) *
               C22090 +
           (C42352 - C42353 + C42354 - C42355 + C42356 - C42357 + C42358 -
            C42359) *
               C48366) *
              C48209 * C931 +
          ((C48641 * C938 - C33226 * C933 + C48638 * C2822 - C33227 * C2818 +
            C48629 * C3677 - C33228 * C3674 + C48614 * C17617 -
            C33229 * C17615) *
               C22089 +
           (C48641 * C948 - C33226 * C939 + C48638 * C2830 - C33227 * C2823 +
            C48629 * C3683 - C33228 * C3678 + C48614 * C17621 -
            C33229 * C17618) *
               C22083 +
           (C48641 * C2315 - C33226 * C2309 + C48638 * C3263 - C33227 * C3260 +
            C48629 * C10932 - C33228 * C10930 + C48614 * C17850 -
            C33229 * C17849) *
               C22090 +
           (C48641 * C2327 - C33226 * C2316 + C48638 * C3269 - C33227 * C3264 +
            C48629 * C10936 - C33228 * C10933 + C48614 * C17852 -
            C33229 * C17851) *
               C48366) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C22089 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C22083 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
               C48543 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
            C37589 * C22090 + C37590 * C48366) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C22089 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C22083 +
            C37591 * C22090 + C37592 * C48366) *
               C48543 +
           ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C22089 +
            (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C22083 +
            (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C22090 +
            (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C36060 * C22089 + C36061 * C22083 +
            (C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C22090 +
            (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48366) *
               C48543 +
           ((C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C22089 +
            (C36047 - C36046 + C36049 - C36048 + C36051 - C36050) * C22083 +
            (C48404 * C276 - C47360 * C267 + C48411 * C693 - C47352 * C685 +
             C36011 * C2645 - C47366 * C2644) *
                C22090 +
            (C48404 * C285 - C47360 * C277 + C48411 * C700 - C47352 * C694 +
             C36011 * C2647 - C47366 * C2646) *
                C48366) *
               C48219) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C48293 * C260 +
           (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C22089 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C22083 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C22090 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C48543 +
            (C37591 * C22089 + C37592 * C22083 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C22090 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C22089 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C22083 +
             C37591 * C22090 + C37592 * C48366) *
                C48543 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C22089 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C22083 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C22090 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C48293 * C260 +
           ((C37589 * C22089 + C37590 * C22083 +
             (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C22090 +
             (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48366) *
                C48543 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C22089 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C22083 +
             (C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
              C36011 * C2325 - C47366 * C2314) *
                 C22090 +
             (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
              C36011 * C2332 - C47366 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C22089 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C22083 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C22090 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C48543 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C22089 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C22083 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C22090 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C22089 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C22083 +
             C37591 * C22090 + C37592 * C48366) *
                C48543 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C22089 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C22083 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C22090 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C386 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C22089 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C22083 +
             (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C22090 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48366) *
                C48543 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C22089 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C22083 +
             (C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C22090 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C48293 * C510 +
           (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C22089 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C22083 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C22090 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C48543 +
            (C37591 * C22089 + C37592 * C22083 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C22090 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C22089 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C22083 +
             C37591 * C22090 + C37592 * C48366) *
                C48543 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C22089 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C22083 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C22090 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C48293 * C510 +
           ((C37589 * C22089 + C37590 * C22083 +
             (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C22090 +
             (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48366) *
                C48543 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C22089 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C22083 +
             (C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
              C36011 * C2325 - C47366 * C2314) *
                 C22090 +
             (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
              C36011 * C2332 - C47366 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C22089 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C22083 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
               C48543 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
            C37589 * C22090 + C37590 * C48366) *
               C48219) *
              C48293 * C576 +
          (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C22089 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C22083 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C22090 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
               C48543 +
           (C37591 * C22089 + C37592 * C22083 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C22090 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
               C48219) *
              C48293 * C577 +
          (((C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C22089 +
            (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C22083 +
            (C48404 * C1249 - C47360 * C1245 + C48411 * C1890 - C47352 * C1887 +
             C36011 * C9620 - C47366 * C9618) *
                C22090 +
            (C48404 * C1257 - C47360 * C1250 + C48411 * C1896 - C47352 * C1891 +
             C36011 * C9624 - C47366 * C9621) *
                C48366) *
               C48543 +
           ((C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C22089 +
            (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C22083 +
            (C48404 * C1251 - C47360 * C1246 + C48411 * C1892 - C47352 * C1888 +
             C36011 * C9883 - C47366 * C9882) *
                C22090 +
            (C48404 * C1258 - C47360 * C1252 + C48411 * C1897 - C47352 * C1893 +
             C36011 * C9885 - C47366 * C9884) *
                C48366) *
               C48219) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C22089 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C22083 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C22090 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C48543 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C22089 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C22083 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C22090 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C510 +
          ((((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C22089 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C22083 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C22090 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C48543 +
            (C37591 * C22089 + C37592 * C22083 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C22090 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C386 +
           (((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C22089 +
             (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C22083 +
             (C48404 * C1439 - C47360 * C1435 + C48411 * C2317 -
              C47352 * C2310 + C36011 * C10070 - C47366 * C10068) *
                 C22090 +
             (C48404 * C1447 - C47360 * C1440 + C48411 * C2328 -
              C47352 * C2318 + C36011 * C10074 - C47366 * C10071) *
                 C48366) *
                C48543 +
            ((C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C22089 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C22083 +
             (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 -
              C47352 * C2312 + C36011 * C10072 - C47366 * C10069) *
                 C22090 +
             (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 -
              C47352 * C2322 + C36011 * C10075 - C47366 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C22089 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C22083 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C22090 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C48543 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C22089 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C22083 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C22090 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C22089 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C22083 +
             C37591 * C22090 + C37592 * C48366) *
                C48543 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C22089 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C22083 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C22090 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C784 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C22089 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C22083 +
             (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C22090 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48366) *
                C48543 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C22089 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C22083 +
             (C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C22090 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C22089 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C22083 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C48543 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
             C37589 * C22090 + C37590 * C48366) *
                C48219) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C22089 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C22083 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C22090 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C48543 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C22089 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C22083 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C22090 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C260 +
          ((((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C22089 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C22083 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C22090 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C48543 +
            (C37591 * C22089 + C37592 * C22083 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C22090 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C784 +
           (((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C22089 +
             (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C22083 +
             (C48404 * C1439 - C47360 * C1435 + C48411 * C2317 -
              C47352 * C2310 + C36011 * C10070 - C47366 * C10068) *
                 C22090 +
             (C48404 * C1447 - C47360 * C1440 + C48411 * C2328 -
              C47352 * C2318 + C36011 * C10074 - C47366 * C10071) *
                 C48366) *
                C48543 +
            ((C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C22089 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C22083 +
             (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 -
              C47352 * C2312 + C36011 * C10072 - C47366 * C10069) *
                 C22090 +
             (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 -
              C47352 * C2322 + C36011 * C10075 - C47366 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C22089 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C22083 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C22090 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
               C48543 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C22089 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C22083 +
            C37589 * C22090 + C37590 * C48366) *
               C48219) *
              C930 +
          (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C22089 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C22083 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C22090 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
               C48543 +
           ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C22089 +
            (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C22083 +
            (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C22090 +
            (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
               C48219) *
              C931 +
          (((C48404 * C938 - C47360 * C933 + C48411 * C2822 - C47352 * C2818 +
             C36011 * C3677 - C47366 * C3674) *
                C22089 +
            (C48404 * C948 - C47360 * C939 + C48411 * C2830 - C47352 * C2823 +
             C36011 * C3683 - C47366 * C3678) *
                C22083 +
            (C48404 * C2315 - C47360 * C2309 + C48411 * C3263 - C47352 * C3260 +
             C36011 * C10932 - C47366 * C10930) *
                C22090 +
            (C48404 * C2327 - C47360 * C2316 + C48411 * C3269 - C47352 * C3264 +
             C36011 * C10936 - C47366 * C10933) *
                C48366) *
               C48543 +
           ((C48404 * C940 - C47360 * C934 + C48411 * C2824 - C47352 * C2819 +
             C36011 * C3679 - C47366 * C3675) *
                C22089 +
            (C48404 * C949 - C47360 * C941 + C48411 * C2831 - C47352 * C2825 +
             C36011 * C3684 - C47366 * C3680) *
                C22083 +
            (C48404 * C2319 - C47360 * C2311 + C48411 * C3265 - C47352 * C3261 +
             C36011 * C17530 - C47366 * C17529) *
                C22090 +
            (C48404 * C2329 - C47360 * C2320 + C48411 * C3270 - C47352 * C3266 +
             C36011 * C17532 - C47366 * C17531) *
                C48366) *
               C48219) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C22089 +
            (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
            C31814 * C48366) *
               C48630 +
           ((C30348 - C30347 + C30350 - C30349) * C22089 +
            (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
            C34629 * C48366) *
               C48617 +
           ((C30356 - C30355 + C30358 - C30357) * C22089 +
            (C30360 - C30359 + C30362 - C30361) * C22083 +
            (C30535 - C30536 + C30537 - C30538) * C22090 +
            (C30539 - C30540 + C30541 - C30542) * C48366) *
               C48585) *
              C48293 * C48276 * C111 +
          (C39043 * C48630 +
           (C30381 * C22089 + C30382 * C22083 +
            (C30536 - C30535 + C30538 - C30537) * C22090 +
            (C30540 - C30539 + C30542 - C30541) * C48366) *
               C48617 +
           ((C30364 - C30363 + C30366 - C30365) * C22089 +
            (C30368 - C30367 + C30370 - C30369) * C22083 +
            (C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                C22090 +
            (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                C48366) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
           (C32376 - C32375 + C32378 - C32377) * C48608) *
              C48209 * C48293 * C48276 * C110 +
          ((C30340 - C30339 + C30342 - C30341) * C23185 +
           (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
           C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
           (C31801 - C31802 + C31803 - C31804) * C23188 +
           (C31805 - C31806 + C31807 - C31808) * C48608) *
              C48209 * C48293 * C48276 * C111 +
          (C30379 * C23185 + C30380 * C48640 + C34424 * C23186 +
           C34425 * C48636 + (C31568 - C31567 + C31570 - C31569) * C23187 +
           (C31572 - C31571 + C31574 - C31573) * C48626 +
           (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 - C30337 * C1889) *
               C23188 +
           (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 - C30337 * C1895) *
               C48608) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C48293 * C260 +
           ((C31809 * C22089 + C31810 * C22083 + C31811 * C22090 +
             C31812 * C48366) *
                C48630 +
            (C34424 * C22089 + C34425 * C22083 +
             (C31568 - C31567 + C31570 - C31569) * C22090 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48617 +
            ((C30536 - C30535 + C30538 - C30537) * C22089 +
             (C30540 - C30539 + C30542 - C30541) * C22083 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C22090 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C48293 * C260 +
           ((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C30336 * C1723 - C30334 * C1726 + C30337 * C9134 -
             C48408 * C9136) *
                C23188 +
            (C30336 * C1727 - C30334 * C1732 + C30337 * C9137 -
             C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C48293 * C260 +
           (C31809 * C23185 + C31810 * C48640 + C31811 * C23186 +
            C31812 * C48636 + (C31802 - C31801 + C31804 - C31803) * C23187 +
            (C31806 - C31805 + C31808 - C31807) * C48626 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C23188 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C22089 +
             (C30678 - C30677 + C30680 - C30679) * C22083 +
             (C32012 - C32011 + C32014 - C32013) * C22090 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48630 +
            ((C30682 - C30681 + C30684 - C30683) * C22089 +
             (C30686 - C30685 + C30688 - C30687) * C22083 +
             (C34825 - C34824 + C34827 - C34826) * C22090 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48617 +
            ((C30690 - C30689 + C30692 - C30691) * C22089 +
             (C30694 - C30693 + C30696 - C30695) * C22083 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C22090 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C386 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C30336 * C1887 - C30334 * C1890 + C30337 * C9618 -
             C48408 * C9620) *
                C23188 +
            (C30336 * C1891 - C30334 * C1896 + C30337 * C9621 -
             C48408 * C9624) *
                C48608) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C386 +
           ((C30674 - C30673 + C30676 - C30675) * C23185 +
            (C30678 - C30677 + C30680 - C30679) * C48640 +
            (C32012 - C32011 + C32014 - C32013) * C23186 +
            (C32016 - C32015 + C32018 - C32017) * C48636 +
            (C32020 - C32019 + C32022 - C32021) * C23187 +
            (C32024 - C32023 + C32026 - C32025) * C48626 +
            (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
             C30337 * C9882) *
                C23188 +
            (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
             C30337 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C48293 * C510 +
           ((C31809 * C22089 + C31810 * C22083 + C31811 * C22090 +
             C31812 * C48366) *
                C48630 +
            (C34424 * C22089 + C34425 * C22083 +
             (C31568 - C31567 + C31570 - C31569) * C22090 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48617 +
            ((C30536 - C30535 + C30538 - C30537) * C22089 +
             (C30540 - C30539 + C30542 - C30541) * C22083 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C22090 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + (C32372 - C32371 + C32374 - C32373) * C23188 +
            (C32376 - C32375 + C32378 - C32377) * C48608) *
               C48209 * C48293 * C510 +
           ((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C30336 * C1723 - C30334 * C1726 + C30337 * C9134 -
             C48408 * C9136) *
                C23188 +
            (C30336 * C1727 - C30334 * C1732 + C30337 * C9137 -
             C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C48293 * C510 +
           (C31809 * C23185 + C31810 * C48640 + C31811 * C23186 +
            C31812 * C48636 + (C31802 - C31801 + C31804 - C31803) * C23187 +
            (C31806 - C31805 + C31808 - C31807) * C48626 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C23188 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C22089 +
            (C31774 - C31773 + C31776 - C31775) * C22083 +
            (C31778 - C31777 + C31780 - C31779) * C22090 +
            (C31782 - C31781 + C31784 - C31783) * C48366) *
               C48630 +
           (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
            C31816 * C48366) *
               C48617 +
           (C34628 * C22089 + C34629 * C22083 +
            (C31567 - C31568 + C31569 - C31570) * C22090 +
            (C31571 - C31572 + C31573 - C31574) * C48366) *
               C48585) *
              C48293 * C577 +
          ((C32379 * C22089 + C32380 * C22083 +
            (C32372 - C32371 + C32374 - C32373) * C22090 +
            (C32376 - C32375 + C32378 - C32377) * C48366) *
               C48630 +
           (C31811 * C22089 + C31812 * C22083 +
            (C31802 - C31801 + C31804 - C31803) * C22090 +
            (C31806 - C31805 + C31808 - C31807) * C48366) *
               C48617 +
           ((C31568 - C31567 + C31570 - C31569) * C22089 +
            (C31572 - C31571 + C31574 - C31573) * C22083 +
            (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
             C30337 * C1889) *
                C22090 +
            (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
             C30337 * C1895) *
                C48366) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
              C48209 * C48293 * C576 +
          ((C31770 - C31769 + C31772 - C31771) * C23185 +
           (C31774 - C31773 + C31776 - C31775) * C48640 +
           (C31778 - C31777 + C31780 - C31779) * C23186 +
           (C31782 - C31781 + C31784 - C31783) * C48636 +
           (C32371 - C32372 + C32373 - C32374) * C23187 +
           (C32375 - C32376 + C32377 - C32378) * C48626 +
           (C41090 - C41091 + C41092 - C41093) * C23188 +
           (C41094 - C41095 + C41096 - C41097) * C48608) *
              C48209 * C48293 * C577 +
          (C32379 * C23185 + C32380 * C48640 + C41098 * C23186 +
           C41099 * C48636 + (C41091 - C41090 + C41093 - C41092) * C23187 +
           (C41095 - C41094 + C41097 - C41096) * C48626 +
           (C30334 * C9038 - C30336 * C9036 + C48408 * C9381 - C30337 * C9380) *
               C23188 +
           (C30334 * C9042 - C30336 * C9039 + C48408 * C9383 - C30337 * C9382) *
               C48608) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C22089 +
             (C32580 - C32579 + C32582 - C32581) * C22083 +
             (C32584 - C32583 + C32586 - C32585) * C22090 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48630 +
            ((C32012 - C32011 + C32014 - C32013) * C22089 +
             (C32016 - C32015 + C32018 - C32017) * C22083 +
             (C32020 - C32019 + C32022 - C32021) * C22090 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48617 +
            ((C34825 - C34824 + C34827 - C34826) * C22089 +
             (C34829 - C34828 + C34831 - C34830) * C22083 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C22090 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C386 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C510 +
          (((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C41090 - C41091 + C41092 - C41093) * C23188 +
            (C41094 - C41095 + C41096 - C41097) * C48608) *
               C48209 * C386 +
           ((C32576 - C32575 + C32578 - C32577) * C23185 +
            (C32580 - C32579 + C32582 - C32581) * C48640 +
            (C32584 - C32583 + C32586 - C32585) * C23186 +
            (C32588 - C32587 + C32590 - C32589) * C48636 +
            (C41231 - C41230 + C41233 - C41232) * C23187 +
            (C41235 - C41234 + C41237 - C41236) * C48626 +
            (C30334 * C9136 - C30336 * C9134 + C48408 * C9622 -
             C30337 * C9619) *
                C23188 +
            (C30334 * C9140 - C30336 * C9137 + C48408 * C9625 -
             C30337 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C22089 +
             (C30344 - C30343 + C30346 - C30345) * C22083 + C31813 * C22090 +
             C31814 * C48366) *
                C48630 +
            ((C30348 - C30347 + C30350 - C30349) * C22089 +
             (C30352 - C30351 + C30354 - C30353) * C22083 + C34628 * C22090 +
             C34629 * C48366) *
                C48617 +
            ((C30356 - C30355 + C30358 - C30357) * C22089 +
             (C30360 - C30359 + C30362 - C30361) * C22083 +
             (C30535 - C30536 + C30537 - C30538) * C22090 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C48585) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C22089 +
             (C30678 - C30677 + C30680 - C30679) * C22083 +
             (C32012 - C32011 + C32014 - C32013) * C22090 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48630 +
            ((C30682 - C30681 + C30684 - C30683) * C22089 +
             (C30686 - C30685 + C30688 - C30687) * C22083 +
             (C34825 - C34824 + C34827 - C34826) * C22090 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48617 +
            ((C30690 - C30689 + C30692 - C30691) * C22089 +
             (C30694 - C30693 + C30696 - C30695) * C22083 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C22090 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C784 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C30340 - C30339 + C30342 - C30341) * C23185 +
            (C30344 - C30343 + C30346 - C30345) * C48640 + C31813 * C23186 +
            C31814 * C48636 + C31815 * C23187 + C31816 * C48626 +
            (C31801 - C31802 + C31803 - C31804) * C23188 +
            (C31805 - C31806 + C31807 - C31808) * C48608) *
               C48209 * C784 +
           ((C30674 - C30673 + C30676 - C30675) * C23185 +
            (C30678 - C30677 + C30680 - C30679) * C48640 +
            (C32012 - C32011 + C32014 - C32013) * C23186 +
            (C32016 - C32015 + C32018 - C32017) * C48636 +
            (C32020 - C32019 + C32022 - C32021) * C23187 +
            (C32024 - C32023 + C32026 - C32025) * C48626 +
            (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
             C30337 * C9882) *
                C23188 +
            (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
             C30337 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C22089 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C22083 +
             (C31769 - C31770 + C31771 - C31772) * C22090 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48630 +
            ((C30339 - C30340 + C30341 - C30342) * C22089 +
             (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
             C31810 * C48366) *
                C48617 +
            C39043 * C48585) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C22089 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C22083 +
             (C32575 - C32576 + C32577 - C32578) * C22090 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48630 +
            ((C30673 - C30674 + C30675 - C30676) * C22089 +
             (C30677 - C30678 + C30679 - C30680) * C22083 +
             (C32011 - C32012 + C32013 - C32014) * C22090 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48617 +
            ((C30681 - C30682 + C30683 - C30684) * C22089 +
             (C30685 - C30686 + C30687 - C30688) * C22083 +
             (C34824 - C34825 + C34826 - C34827) * C22090 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C48585) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C22089 +
             (C31774 - C31773 + C31776 - C31775) * C22083 +
             (C31778 - C31777 + C31780 - C31779) * C22090 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48630 +
            (C31813 * C22089 + C31814 * C22083 + C31815 * C22090 +
             C31816 * C48366) *
                C48617 +
            (C34628 * C22089 + C34629 * C22083 +
             (C31567 - C31568 + C31569 - C31570) * C22090 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C48585) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C22089 +
             (C32580 - C32579 + C32582 - C32581) * C22083 +
             (C32584 - C32583 + C32586 - C32585) * C22090 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48630 +
            ((C32012 - C32011 + C32014 - C32013) * C22089 +
             (C32016 - C32015 + C32018 - C32017) * C22083 +
             (C32020 - C32019 + C32022 - C32021) * C22090 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48617 +
            ((C34825 - C34824 + C34827 - C34826) * C22089 +
             (C34829 - C34828 + C34831 - C34830) * C22083 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C22090 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C23185 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48640 +
            (C31769 - C31770 + C31771 - C31772) * C23186 +
            (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
            C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
               C48209 * C784 +
           ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C23185 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48640 +
            (C32575 - C32576 + C32577 - C32578) * C23186 +
            (C32579 - C32580 + C32581 - C32582) * C48636 +
            (C32583 - C32584 + C32585 - C32586) * C23187 +
            (C32587 - C32588 + C32589 - C32590) * C48626 +
            (C41230 - C41231 + C41232 - C41233) * C23188 +
            (C41234 - C41235 + C41236 - C41237) * C48608) *
               C48209 * C48595) *
              C260 +
          (((C31770 - C31769 + C31772 - C31771) * C23185 +
            (C31774 - C31773 + C31776 - C31775) * C48640 +
            (C31778 - C31777 + C31780 - C31779) * C23186 +
            (C31782 - C31781 + C31784 - C31783) * C48636 +
            (C32371 - C32372 + C32373 - C32374) * C23187 +
            (C32375 - C32376 + C32377 - C32378) * C48626 +
            (C41090 - C41091 + C41092 - C41093) * C23188 +
            (C41094 - C41095 + C41096 - C41097) * C48608) *
               C48209 * C784 +
           ((C32576 - C32575 + C32578 - C32577) * C23185 +
            (C32580 - C32579 + C32582 - C32581) * C48640 +
            (C32584 - C32583 + C32586 - C32585) * C23186 +
            (C32588 - C32587 + C32590 - C32589) * C48636 +
            (C41231 - C41230 + C41233 - C41232) * C23187 +
            (C41235 - C41234 + C41237 - C41236) * C48626 +
            (C30334 * C9136 - C30336 * C9134 + C48408 * C9622 -
             C30337 * C9619) *
                C23188 +
            (C30334 * C9140 - C30336 * C9137 + C48408 * C9625 -
             C30337 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C22089 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C22083 +
            (C31769 - C31770 + C31771 - C31772) * C22090 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48630 +
           ((C30339 - C30340 + C30341 - C30342) * C22089 +
            (C30343 - C30344 + C30345 - C30346) * C22083 + C31809 * C22090 +
            C31810 * C48366) *
               C48617 +
           C39043 * C48585) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C22089 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C22083 +
            (C32575 - C32576 + C32577 - C32578) * C22090 +
            (C32579 - C32580 + C32581 - C32582) * C48366) *
               C48630 +
           ((C30673 - C30674 + C30675 - C30676) * C22089 +
            (C30677 - C30678 + C30679 - C30680) * C22083 +
            (C32011 - C32012 + C32013 - C32014) * C22090 +
            (C32015 - C32016 + C32017 - C32018) * C48366) *
               C48617 +
           ((C30681 - C30682 + C30683 - C30684) * C22089 +
            (C30685 - C30686 + C30687 - C30688) * C22083 +
            (C34824 - C34825 + C34826 - C34827) * C22090 +
            (C34828 - C34829 + C34830 - C34831) * C48366) *
               C48585) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C22089 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C22083 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C22090 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48366) *
               C48630 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C22089 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C22083 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C22090 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48366) *
               C48617 +
           ((C30334 * C942 - C30336 * C935 + C48408 * C2826 - C30337 * C2820) *
                C22089 +
            (C30334 * C950 - C30336 * C943 + C48408 * C2832 - C30337 * C2827) *
                C22083 +
            (C30334 * C2323 - C30336 * C2313 + C48408 * C3267 -
             C30337 * C3262) *
                C22090 +
            (C30334 * C2331 - C30336 * C2324 + C48408 * C3271 -
             C30337 * C3268) *
                C48366) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
               C23185 +
           (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
               C48640 +
           (C31769 - C31770 + C31771 - C31772) * C23186 +
           (C31773 - C31774 + C31775 - C31776) * C48636 + C32379 * C23187 +
           C32380 * C48626 + C41098 * C23188 + C41099 * C48608) *
              C48209 * C930 +
          ((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
               C23185 +
           (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
               C48640 +
           (C32575 - C32576 + C32577 - C32578) * C23186 +
           (C32579 - C32580 + C32581 - C32582) * C48636 +
           (C32583 - C32584 + C32585 - C32586) * C23187 +
           (C32587 - C32588 + C32589 - C32590) * C48626 +
           (C41230 - C41231 + C41232 - C41233) * C23188 +
           (C41234 - C41235 + C41236 - C41237) * C48608) *
              C48209 * C931 +
          ((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
               C23185 +
           (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
               C48640 +
           (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 - C30337 * C3260) *
               C23186 +
           (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 - C30337 * C3264) *
               C48636 +
           (C30334 * C2317 - C30336 * C2310 + C48408 * C10070 -
            C30337 * C10068) *
               C23187 +
           (C30334 * C2328 - C30336 * C2318 + C48408 * C10074 -
            C30337 * C10071) *
               C48626 +
           (C30334 * C9620 - C30336 * C9618 + C48408 * C10501 -
            C30337 * C10500) *
               C23188 +
           (C30334 * C9624 - C30336 * C9621 + C48408 * C10503 -
            C30337 * C10502) *
               C48608) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
            (C1279 - C1278) * C11045 + (C1281 - C1280) * C48608) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
            C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
            (C1278 - C1279) * C11045 + (C1280 - C1281) * C48608) *
               C48543 +
           ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
            C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
            (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C164 * C11042 + C165 * C11036 + C1079 * C11043 + C1080 * C11037 +
            C1092 * C11044 + C1093 * C11038 + (C1287 - C1286) * C11045 +
            (C1289 - C1288) * C48608) *
               C48543 +
           (C166 * C11042 + C167 * C11036 + C3799 * C11043 + C3800 * C11037 +
            (C1086 - C1085) * C11044 + (C1088 - C1087) * C11038 +
            (C48321 * C1255 - C113 * C1248) * C11045 +
            (C48321 * C1260 - C113 * C1256) * C48608) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
            C1275 * C48366) *
               C3786 +
           ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
            C1283 * C48366) *
               C3787 +
           ((C153 - C152) * C3790 + (C155 - C154) * C48565 +
            (C297 - C298) * C3791 + (C299 - C300) * C48366) *
               C3788 +
           ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
            (C301 - C302) * C3791 + (C303 - C304) * C48366) *
               C48602) *
              C48293 * C48276 * C111 +
          (C3807 * C3786 + C3808 * C3787 +
           (C168 * C3790 + C169 * C48565 + (C302 - C301) * C3791 +
            (C304 - C303) * C48366) *
               C3788 +
           ((C161 - C160) * C3790 + (C163 - C162) * C48565 +
            (C48321 * C280 - C113 * C269) * C3791 +
            (C48321 * C287 - C113 * C281) * C48366) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C3790 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48565 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
               C48543 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
            (C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C3791 +
            (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48366) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C3790 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48565 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C3791 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48366) *
               C48543 +
           ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C3790 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48565 +
            (C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C3791 +
            (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48366) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C14939 * C3790 + C14940 * C48565 +
            (C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C3791 +
            (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48366) *
               C48543 +
           ((C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C3790 +
            (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48565 +
            (C14888 * C276 - C14891 * C267 + C14889 * C693 - C14892 * C685 +
             C48601 * C2645 - C14893 * C2644) *
                C3791 +
            (C14888 * C285 - C14891 * C277 + C14889 * C700 - C14892 * C694 +
             C48601 * C2647 - C14893 * C2646) *
                C48366) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C48293 * C260 +
           (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C260 +
           ((C1270 * C11042 + C1271 * C11036 + C1272 * C11043 + C1273 * C11037 +
             C11177 * C11044 + C11178 * C11038 + (C9050 - C9049) * C11045 +
             (C9052 - C9051) * C48608) *
                C48543 +
            (C1079 * C11042 + C1080 * C11036 + C1092 * C11043 + C1093 * C11037 +
             (C1287 - C1286) * C11044 + (C1289 - C1288) * C11038 +
             (C48321 * C1730 - C113 * C1725) * C11045 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C48293 * C260 +
           (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C260 +
           ((C1270 * C3790 + C1271 * C48565 + C1272 * C3791 + C1273 * C48366) *
                C3786 +
            (C1079 * C3790 + C1080 * C48565 + C1092 * C3791 + C1093 * C48366) *
                C3787 +
            (C3799 * C3790 + C3800 * C48565 + (C1086 - C1085) * C3791 +
             (C1088 - C1087) * C48366) *
                C3788 +
            ((C302 - C301) * C3790 + (C304 - C303) * C48565 +
             (C48321 * C593 - C113 * C584) * C3791 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C48293 * C260 +
           (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C3790 +
             (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48565 +
             (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C3791 +
             (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48366) *
                C48543 +
            (C18442 * C3790 + C18443 * C48565 +
             (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C3791 +
             (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48366) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C3790 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48565 +
             C18442 * C3791 + C18443 * C48366) *
                C48543 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C3790 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48565 +
             (C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C3791 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48366) *
                C48219) *
               C48293 * C260 +
           ((C18440 * C3790 + C18441 * C48565 +
             (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C3791 +
             (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48366) *
                C48543 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C3790 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48565 +
             (C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
              C48601 * C2325 - C14893 * C2314) *
                 C3791 +
             (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
              C48601 * C2332 - C14893 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C386 +
           (((C414 - C413) * C11042 + (C416 - C415) * C11036 +
             (C1453 - C1452) * C11043 + (C1455 - C1454) * C11037 +
             (C1457 - C1456) * C11044 + (C1459 - C1458) * C11038 +
             (C11312 - C11311) * C11045 + (C11314 - C11313) * C48608) *
                C48543 +
            ((C418 - C417) * C11042 + (C420 - C419) * C11036 +
             (C1461 - C1460) * C11043 + (C1463 - C1462) * C11037 +
             (C1465 - C1464) * C11044 + (C1467 - C1466) * C11038 +
             (C48321 * C1894 - C113 * C1889) * C11045 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C386 +
           (((C414 - C413) * C3790 + (C416 - C415) * C48565 +
             (C1453 - C1452) * C3791 + (C1455 - C1454) * C48366) *
                C3786 +
            ((C418 - C417) * C3790 + (C420 - C419) * C48565 +
             (C1461 - C1460) * C3791 + (C1463 - C1462) * C48366) *
                C3787 +
            ((C422 - C421) * C3790 + (C424 - C423) * C48565 +
             (C4072 - C4071) * C3791 + (C4074 - C4073) * C48366) *
                C3788 +
            ((C426 - C425) * C3790 + (C428 - C427) * C48565 +
             (C48321 * C695 - C113 * C686) * C3791 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C3790 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48565 +
             (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C3791 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48366) *
                C48543 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C3790 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48565 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C3791 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48366) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C3790 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48565 +
             C18442 * C3791 + C18443 * C48366) *
                C48543 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C3790 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48565 +
             (C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C3791 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48366) *
                C48219) *
               C386 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C3790 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48565 +
             (C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C3791 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48366) *
                C48543 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C3790 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48565 +
             (C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C3791 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C48293 * C510 +
           (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C510 +
           ((C1270 * C11042 + C1271 * C11036 + C1272 * C11043 + C1273 * C11037 +
             C11177 * C11044 + C11178 * C11038 + (C9050 - C9049) * C11045 +
             (C9052 - C9051) * C48608) *
                C48543 +
            (C1079 * C11042 + C1080 * C11036 + C1092 * C11043 + C1093 * C11037 +
             (C1287 - C1286) * C11044 + (C1289 - C1288) * C11038 +
             (C48321 * C1730 - C113 * C1725) * C11045 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C48293 * C510 +
           (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C510 +
           ((C1270 * C3790 + C1271 * C48565 + C1272 * C3791 + C1273 * C48366) *
                C3786 +
            (C1079 * C3790 + C1080 * C48565 + C1092 * C3791 + C1093 * C48366) *
                C3787 +
            (C3799 * C3790 + C3800 * C48565 + (C1086 - C1085) * C3791 +
             (C1088 - C1087) * C48366) *
                C3788 +
            ((C302 - C301) * C3790 + (C304 - C303) * C48565 +
             (C48321 * C593 - C113 * C584) * C3791 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C48293 * C510 +
           (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C3790 +
             (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48565 +
             (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C3791 +
             (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48366) *
                C48543 +
            (C18442 * C3790 + C18443 * C48565 +
             (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C3791 +
             (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48366) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C3790 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48565 +
             C18442 * C3791 + C18443 * C48366) *
                C48543 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C3790 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48565 +
             (C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C3791 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48366) *
                C48219) *
               C48293 * C510 +
           ((C18440 * C3790 + C18441 * C48565 +
             (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C3791 +
             (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48366) *
                C48543 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C3790 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48565 +
             (C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
              C48601 * C2325 - C14893 * C2314) *
                 C3791 +
             (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
              C48601 * C2332 - C14893 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 + C11177 * C11045 +
            C11178 * C48608) *
               C48219) *
              C48293 * C576 +
          (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
            (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
            (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
            (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
               C48543 +
           (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
            C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
            (C9051 - C9052) * C48608) *
               C48219) *
              C48293 * C577 +
          ((C1736 * C11042 + C1737 * C11036 + C9291 * C11043 + C9292 * C11037 +
            C9293 * C11044 + C9294 * C11038 + (C9296 - C9295) * C11045 +
            (C9298 - C9297) * C48608) *
               C48543 +
           (C1272 * C11042 + C1273 * C11036 + C11177 * C11043 +
            C11178 * C11037 + (C9050 - C9049) * C11044 +
            (C9052 - C9051) * C11038 +
            (C48321 * C9040 - C113 * C9037) * C11045 +
            (C48321 * C9043 - C113 * C9041) * C48608) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C48293 * C576 +
          (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
            (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
               C3786 +
           (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
               C3787 +
           (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
               C3788 +
           (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
            (C1087 - C1088) * C48366) *
               C48602) *
              C48293 * C577 +
          ((C1736 * C3790 + C1737 * C48565 + (C1739 - C1738) * C3791 +
            (C1741 - C1740) * C48366) *
               C3786 +
           (C1272 * C3790 + C1273 * C48565 + (C1279 - C1278) * C3791 +
            (C1281 - C1280) * C48366) *
               C3787 +
           (C1092 * C3790 + C1093 * C48565 + (C1287 - C1286) * C3791 +
            (C1289 - C1288) * C48366) *
               C3788 +
           ((C1086 - C1085) * C3790 + (C1088 - C1087) * C48565 +
            (C48321 * C1255 - C113 * C1248) * C3791 +
            (C48321 * C1260 - C113 * C1256) * C48366) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C3790 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48565 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
               C48543 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
            C18440 * C3791 + C18441 * C48366) *
               C48219) *
              C48293 * C576 +
          (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C3790 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48565 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C3791 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48366) *
               C48543 +
           (C18442 * C3790 + C18443 * C48565 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C3791 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48366) *
               C48219) *
              C48293 * C577 +
          ((C16802 * C3790 + C16803 * C48565 +
            (C16789 - C16788 + C16791 - C16790 + C16793 - C16792) * C3791 +
            (C16795 - C16794 + C16797 - C16796 + C16799 - C16798) * C48366) *
               C48543 +
           ((C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C3790 +
            (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48565 +
            (C14888 * C1251 - C14891 * C1246 + C14889 * C1892 - C14892 * C1888 +
             C48601 * C9883 - C14893 * C9882) *
                C3791 +
            (C14888 * C1258 - C14891 * C1252 + C14889 * C1897 - C14892 * C1893 +
             C48601 * C9885 - C14893 * C9884) *
                C48366) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C386 +
           (((C1901 - C1900) * C11042 + (C1903 - C1902) * C11036 +
             (C1905 - C1904) * C11043 + (C1907 - C1906) * C11037 +
             (C9386 - C9385) * C11044 + (C9388 - C9387) * C11038 +
             (C9390 - C9389) * C11045 + (C9392 - C9391) * C48608) *
                C48543 +
            ((C1453 - C1452) * C11042 + (C1455 - C1454) * C11036 +
             (C1457 - C1456) * C11043 + (C1459 - C1458) * C11037 +
             (C11312 - C11311) * C11044 + (C11314 - C11313) * C11038 +
             (C48321 * C9138 - C113 * C9135) * C11045 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C386 +
           (((C1901 - C1900) * C3790 + (C1903 - C1902) * C48565 +
             (C1905 - C1904) * C3791 + (C1907 - C1906) * C48366) *
                C3786 +
            ((C1453 - C1452) * C3790 + (C1455 - C1454) * C48565 +
             (C1457 - C1456) * C3791 + (C1459 - C1458) * C48366) *
                C3787 +
            ((C1461 - C1460) * C3790 + (C1463 - C1462) * C48565 +
             (C1465 - C1464) * C3791 + (C1467 - C1466) * C48366) *
                C3788 +
            ((C4072 - C4071) * C3790 + (C4074 - C4073) * C48565 +
             (C48321 * C1445 - C113 * C1438) * C3791 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C3790 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48565 +
             (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C3791 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48366) *
                C48543 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C3790 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48565 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C3791 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48366) *
                C48219) *
               C48595) *
              C510 +
          ((((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C3790 +
             (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48565 +
             (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C3791 +
             (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48366) *
                C48543 +
            (C18442 * C3790 + C18443 * C48565 +
             (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C3791 +
             (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48366) *
                C48219) *
               C386 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C3790 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48565 +
             (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C3791 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48366) *
                C48543 +
            ((C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C3790 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48565 +
             (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 -
              C14892 * C2312 + C48601 * C10072 - C14893 * C10069) *
                 C3791 +
             (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 -
              C14892 * C2322 + C48601 * C10075 - C14893 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C784 +
           (((C414 - C413) * C11042 + (C416 - C415) * C11036 +
             (C1453 - C1452) * C11043 + (C1455 - C1454) * C11037 +
             (C1457 - C1456) * C11044 + (C1459 - C1458) * C11038 +
             (C11312 - C11311) * C11045 + (C11314 - C11313) * C48608) *
                C48543 +
            ((C418 - C417) * C11042 + (C420 - C419) * C11036 +
             (C1461 - C1460) * C11043 + (C1463 - C1462) * C11037 +
             (C1465 - C1464) * C11044 + (C1467 - C1466) * C11038 +
             (C48321 * C1894 - C113 * C1889) * C11045 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C784 +
           (((C414 - C413) * C3790 + (C416 - C415) * C48565 +
             (C1453 - C1452) * C3791 + (C1455 - C1454) * C48366) *
                C3786 +
            ((C418 - C417) * C3790 + (C420 - C419) * C48565 +
             (C1461 - C1460) * C3791 + (C1463 - C1462) * C48366) *
                C3787 +
            ((C422 - C421) * C3790 + (C424 - C423) * C48565 +
             (C4072 - C4071) * C3791 + (C4074 - C4073) * C48366) *
                C3788 +
            ((C426 - C425) * C3790 + (C428 - C427) * C48565 +
             (C48321 * C695 - C113 * C686) * C3791 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C3790 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48565 +
             (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C3791 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48366) *
                C48543 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C3790 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48565 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C3791 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48366) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C3790 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48565 +
             C18442 * C3791 + C18443 * C48366) *
                C48543 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C3790 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48565 +
             (C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C3791 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48366) *
                C48219) *
               C784 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C3790 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48565 +
             (C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C3791 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48366) *
                C48543 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C3790 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48565 +
             (C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C3791 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C784 +
           (((C1901 - C1900) * C11042 + (C1903 - C1902) * C11036 +
             (C1905 - C1904) * C11043 + (C1907 - C1906) * C11037 +
             (C9386 - C9385) * C11044 + (C9388 - C9387) * C11038 +
             (C9390 - C9389) * C11045 + (C9392 - C9391) * C48608) *
                C48543 +
            ((C1453 - C1452) * C11042 + (C1455 - C1454) * C11036 +
             (C1457 - C1456) * C11043 + (C1459 - C1458) * C11037 +
             (C11312 - C11311) * C11044 + (C11314 - C11313) * C11038 +
             (C48321 * C9138 - C113 * C9135) * C11045 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C784 +
           (((C1901 - C1900) * C3790 + (C1903 - C1902) * C48565 +
             (C1905 - C1904) * C3791 + (C1907 - C1906) * C48366) *
                C3786 +
            ((C1453 - C1452) * C3790 + (C1455 - C1454) * C48565 +
             (C1457 - C1456) * C3791 + (C1459 - C1458) * C48366) *
                C3787 +
            ((C1461 - C1460) * C3790 + (C1463 - C1462) * C48565 +
             (C1465 - C1464) * C3791 + (C1467 - C1466) * C48366) *
                C3788 +
            ((C4072 - C4071) * C3790 + (C4074 - C4073) * C48565 +
             (C48321 * C1445 - C113 * C1438) * C3791 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C3790 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48565 +
             (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
             (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
                C48543 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
             C18440 * C3791 + C18441 * C48366) *
                C48219) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C3790 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48565 +
             (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C3791 +
             (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48366) *
                C48543 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C3790 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48565 +
             (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C3791 +
             (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48366) *
                C48219) *
               C48595) *
              C260 +
          ((((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C3790 +
             (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48565 +
             (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C3791 +
             (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48366) *
                C48543 +
            (C18442 * C3790 + C18443 * C48565 +
             (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C3791 +
             (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48366) *
                C48219) *
               C784 +
           (((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C3790 +
             (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48565 +
             (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C3791 +
             (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48366) *
                C48543 +
            ((C18639 - C18638 + C18641 - C18640 + C18643 - C18642) * C3790 +
             (C18645 - C18644 + C18647 - C18646 + C18649 - C18648) * C48565 +
             (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 -
              C14892 * C2312 + C48601 * C10072 - C14893 * C10069) *
                 C3791 +
             (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 -
              C14892 * C2322 + C48601 * C10075 - C14893 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 + C11177 * C11045 +
            C11178 * C48608) *
               C48219) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C11042 +
            (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
            (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
            (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
            (C9387 - C9388) * C48608) *
               C48543 +
           ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
            (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
            (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
            (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
               C48219) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C11042 +
            (C48321 * C948 - C113 * C939) * C11036 +
            (C48321 * C2315 - C113 * C2309) * C11043 +
            (C48321 * C2327 - C113 * C2316) * C11037 +
            (C48321 * C2317 - C113 * C2310) * C11044 +
            (C48321 * C2328 - C113 * C2318) * C11038 +
            (C48321 * C9620 - C113 * C9618) * C11045 +
            (C48321 * C9624 - C113 * C9621) * C48608) *
               C48543 +
           ((C48321 * C940 - C113 * C934) * C11042 +
            (C48321 * C949 - C113 * C941) * C11036 +
            (C48321 * C2319 - C113 * C2311) * C11043 +
            (C48321 * C2329 - C113 * C2320) * C11037 +
            (C48321 * C2321 - C113 * C2312) * C11044 +
            (C48321 * C2330 - C113 * C2322) * C11038 +
            (C48321 * C9883 - C113 * C9882) * C11045 +
            (C48321 * C9885 - C113 * C9884) * C48608) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C3790 +
            (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
            (C1902 - C1903) * C48366) *
               C3786 +
           ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
            (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
               C3787 +
           ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
            (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
               C3788 +
           ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
            (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
               C48602) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C3790 +
            (C48321 * C948 - C113 * C939) * C48565 +
            (C48321 * C2315 - C113 * C2309) * C3791 +
            (C48321 * C2327 - C113 * C2316) * C48366) *
               C3786 +
           ((C48321 * C940 - C113 * C934) * C3790 +
            (C48321 * C949 - C113 * C941) * C48565 +
            (C48321 * C2319 - C113 * C2311) * C3791 +
            (C48321 * C2329 - C113 * C2320) * C48366) *
               C3787 +
           ((C48321 * C942 - C113 * C935) * C3790 +
            (C48321 * C950 - C113 * C943) * C48565 +
            (C48321 * C2323 - C113 * C2313) * C3791 +
            (C48321 * C2331 - C113 * C2324) * C48366) *
               C3788 +
           ((C48321 * C944 - C113 * C936) * C3790 +
            (C48321 * C951 - C113 * C945) * C48565 +
            (C48321 * C2645 - C113 * C2644) * C3791 +
            (C48321 * C2647 - C113 * C2646) * C48366) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C3790 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48565 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C3791 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48366) *
               C48543 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C3790 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48565 +
            C18440 * C3791 + C18441 * C48366) *
               C48219) *
              C930 +
          (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C3790 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48565 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C3791 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48366) *
               C48543 +
           ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C3790 +
            (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48565 +
            (C18638 - C18639 + C18640 - C18641 + C18642 - C18643) * C3791 +
            (C18644 - C18645 + C18646 - C18647 + C18648 - C18649) * C48366) *
               C48219) *
              C931 +
          (((C14888 * C938 - C14891 * C933 + C14889 * C2822 - C14892 * C2818 +
             C48601 * C3677 - C14893 * C3674) *
                C3790 +
            (C14888 * C948 - C14891 * C939 + C14889 * C2830 - C14892 * C2823 +
             C48601 * C3683 - C14893 * C3678) *
                C48565 +
            (C14888 * C2315 - C14891 * C2309 + C14889 * C3263 - C14892 * C3260 +
             C48601 * C10932 - C14893 * C10930) *
                C3791 +
            (C14888 * C2327 - C14891 * C2316 + C14889 * C3269 - C14892 * C3264 +
             C48601 * C10936 - C14893 * C10933) *
                C48366) *
               C48543 +
           ((C14888 * C940 - C14891 * C934 + C14889 * C2824 - C14892 * C2819 +
             C48601 * C3679 - C14893 * C3675) *
                C3790 +
            (C14888 * C949 - C14891 * C941 + C14889 * C2831 - C14892 * C2825 +
             C48601 * C3684 - C14893 * C3680) *
                C48565 +
            (C14888 * C2319 - C14891 * C2311 + C14889 * C3265 - C14892 * C3261 +
             C48601 * C17530 - C14893 * C17529) *
                C3791 +
            (C14888 * C2329 - C14891 * C2320 + C14889 * C3270 - C14892 * C3266 +
             C48601 * C17532 - C14893 * C17531) *
                C48366) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
           (C12942 - C12941 + C12944 - C12943) * C48608) *
              C48209 * C48293 * C48276 * C110 +
          ((C4894 - C4893 + C4896 - C4895) * C11042 +
           (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
           C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
           (C12379 - C12380 + C12381 - C12382) * C11045 +
           (C12383 - C12384 + C12385 - C12386) * C48608) *
              C48209 * C48293 * C48276 * C111 +
          (C4933 * C11042 + C4934 * C11036 + C6120 * C11043 + C6121 * C11037 +
           (C6349 - C6348 + C6351 - C6350) * C11044 +
           (C6353 - C6352 + C6355 - C6354) * C11038 +
           (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
               C11045 +
           (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
               C48608) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C48566 * C270 - C4890 * C264 + C48408 * C687 - C4891 * C682) *
                C3791 +
            (C48566 * C282 - C4890 * C271 + C48408 * C697 - C4891 * C688) *
                C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 +
            (C5074 - C5073 + C5076 - C5075) * C3791 +
            (C5078 - C5077 + C5080 - C5079) * C48366) *
               C1067 +
           C6125 * C48585) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C3790 +
            (C4898 - C4897 + C4900 - C4899) * C48565 +
            (C5073 - C5074 + C5075 - C5076) * C3791 +
            (C5077 - C5078 + C5079 - C5080) * C48366) *
               C1066 +
           ((C4902 - C4901 + C4904 - C4903) * C3790 +
            (C4906 - C4905 + C4908 - C4907) * C48565 +
            (C5081 - C5082 + C5083 - C5084) * C3791 +
            (C5085 - C5086 + C5087 - C5088) * C48366) *
               C1067 +
           ((C4910 - C4909 + C4912 - C4911) * C3790 +
            (C4914 - C4913 + C4916 - C4915) * C48565 +
            (C5089 - C5090 + C5091 - C5092) * C3791 +
            (C5093 - C5094 + C5095 - C5096) * C48366) *
               C48585) *
              C48293 * C48276 * C111 +
          (C6125 * C1066 +
           (C4935 * C3790 + C4936 * C48565 +
            (C5090 - C5089 + C5092 - C5091) * C3791 +
            (C5094 - C5093 + C5096 - C5095) * C48366) *
               C1067 +
           ((C4918 - C4917 + C4920 - C4919) * C3790 +
            (C4922 - C4921 + C4924 - C4923) * C48565 +
            (C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                C3791 +
            (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                C48366) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
            C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
               C3790 +
           (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
            C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
               C48565 +
           (C19815 * C270 - C19819 * C264 + C19816 * C687 - C19820 * C682 +
            C19817 * C2315 - C19821 * C2309 + C48614 * C3263 - C19822 * C3260) *
               C3791 +
           (C19815 * C282 - C19819 * C271 + C19816 * C697 - C19820 * C688 +
            C19817 * C2327 - C19821 * C2316 + C48614 * C3269 - C19822 * C3264) *
               C48366) *
              C48209 * C48293 * C48276 * C110 +
          ((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
            C19830) *
               C3790 +
           (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
            C19838) *
               C48565 +
           (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
            C19993) *
               C3791 +
           (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
            C20001) *
               C48366) *
              C48209 * C48293 * C48276 * C111 +
          ((C19841 - C19840 + C19843 - C19842 + C19845 - C19844 + C19847 -
            C19846) *
               C3790 +
           (C19849 - C19848 + C19851 - C19850 + C19853 - C19852 + C19855 -
            C19854) *
               C48565 +
           (C19815 * C274 - C19819 * C266 + C19816 * C691 - C19820 * C684 +
            C19817 * C2323 - C19821 * C2313 + C48614 * C3267 - C19822 * C3262) *
               C3791 +
           (C19815 * C284 - C19819 * C275 + C19816 * C699 - C19820 * C692 +
            C19817 * C2331 - C19821 * C2324 + C48614 * C3271 - C19822 * C3268) *
               C48366) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C48293 * C260 +
           ((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C4890 * C1723 - C48566 * C1726 + C4891 * C9134 - C48408 * C9136) *
                C11045 +
            (C4890 * C1727 - C48566 * C1732 + C4891 * C9137 - C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C48293 * C260 +
           (C6356 * C11042 + C6357 * C11036 + C12387 * C11043 +
            C12388 * C11037 + (C12380 - C12379 + C12382 - C12381) * C11044 +
            (C12384 - C12383 + C12386 - C12385) * C11038 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C11045 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C4890 * C580 - C48566 * C585 + C4891 * C1435 - C48408 * C1439) *
                 C3791 +
             (C4890 * C586 - C48566 * C595 + C4891 * C1440 - C48408 * C1447) *
                 C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C48293 * C260 +
           ((C6356 * C3790 + C6357 * C48565 +
             (C6337 - C6336 + C6339 - C6338) * C3791 +
             (C6341 - C6340 + C6343 - C6342) * C48366) *
                C1066 +
            (C6120 * C3790 + C6121 * C48565 +
             (C6349 - C6348 + C6351 - C6350) * C3791 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C1067 +
            ((C5090 - C5089 + C5092 - C5091) * C3790 +
             (C5094 - C5093 + C5096 - C5095) * C48565 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C3791 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C48293 * C260 +
           ((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
             C21098) *
                C3790 +
            (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
             C21106) *
                C48565 +
            (C19819 * C580 - C19815 * C585 + C19820 * C1435 - C19816 * C1439 +
             C19821 * C2310 - C19817 * C2317 + C19822 * C10068 -
             C48614 * C10070) *
                C3791 +
            (C19819 * C586 - C19815 * C595 + C19820 * C1440 - C19816 * C1447 +
             C19821 * C2318 - C19817 * C2328 + C19822 * C10071 -
             C48614 * C10074) *
                C48366) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C3790 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48565 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C3791 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48366) *
               C48209 * C48293 * C260 +
           ((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
             C19992) *
                C3790 +
            (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
             C20000) *
                C48565 +
            (C19815 * C587 - C19819 * C581 + C19816 * C1441 - C19820 * C1436 +
             C19817 * C2321 - C19821 * C2312 + C48614 * C10072 -
             C19822 * C10069) *
                C3791 +
            (C19815 * C596 - C19819 * C588 + C19816 * C1448 - C19820 * C1442 +
             C19817 * C2330 - C19821 * C2322 + C48614 * C10075 -
             C19822 * C10073) *
                C48366) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C386 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C4890 * C1887 - C48566 * C1890 + C4891 * C9618 - C48408 * C9620) *
                C11045 +
            (C4890 * C1891 - C48566 * C1896 + C4891 * C9621 - C48408 * C9624) *
                C48608) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C386 +
           ((C5228 - C5227 + C5230 - C5229) * C11042 +
            (C5232 - C5231 + C5234 - C5233) * C11036 +
            (C6557 - C6556 + C6559 - C6558) * C11043 +
            (C6561 - C6560 + C6563 - C6562) * C11037 +
            (C12586 - C12585 + C12588 - C12587) * C11044 +
            (C12590 - C12589 + C12592 - C12591) * C11038 +
            (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                C11045 +
            (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C4890 * C682 - C48566 * C687 + C4891 * C2309 - C48408 * C2315) *
                 C3791 +
             (C4890 * C688 - C48566 * C697 + C4891 * C2316 - C48408 * C2327) *
                 C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C3790 +
             (C5232 - C5231 + C5234 - C5233) * C48565 +
             (C6557 - C6556 + C6559 - C6558) * C3791 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C1066 +
            ((C5236 - C5235 + C5238 - C5237) * C3790 +
             (C5240 - C5239 + C5242 - C5241) * C48565 +
             (C6565 - C6564 + C6567 - C6566) * C3791 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C1067 +
            ((C5244 - C5243 + C5246 - C5245) * C3790 +
             (C5248 - C5247 + C5250 - C5249) * C48565 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C3791 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C386 +
           ((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
             C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
             C48614 * C3677) *
                C3790 +
            (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
             C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
             C48614 * C3683) *
                C48565 +
            (C19819 * C682 - C19815 * C687 + C19820 * C2309 - C19816 * C2315 +
             C19821 * C3260 - C19817 * C3263 + C19822 * C10930 -
             C48614 * C10932) *
                C3791 +
            (C19819 * C688 - C19815 * C697 + C19820 * C2316 - C19816 * C2327 +
             C19821 * C3264 - C19817 * C3269 + C19822 * C10933 -
             C48614 * C10936) *
                C48366) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C3790 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48565 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C3791 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48366) *
               C48209 * C386 +
           ((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
             C20138) *
                C3790 +
            (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
             C20146) *
                C48565 +
            (C19815 * C689 - C19819 * C683 + C19816 * C2319 - C19820 * C2311 +
             C19817 * C3265 - C19821 * C3261 + C48614 * C17530 -
             C19822 * C17529) *
                C3791 +
            (C19815 * C698 - C19819 * C690 + C19816 * C2329 - C19820 * C2320 +
             C19817 * C3270 - C19821 * C3266 + C48614 * C17532 -
             C19822 * C17531) *
                C48366) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C48293 * C510 +
           ((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C4890 * C1723 - C48566 * C1726 + C4891 * C9134 - C48408 * C9136) *
                C11045 +
            (C4890 * C1727 - C48566 * C1732 + C4891 * C9137 - C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C48293 * C510 +
           (C6356 * C11042 + C6357 * C11036 + C12387 * C11043 +
            C12388 * C11037 + (C12380 - C12379 + C12382 - C12381) * C11044 +
            (C12384 - C12383 + C12386 - C12385) * C11038 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C11045 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C4890 * C580 - C48566 * C585 + C4891 * C1435 - C48408 * C1439) *
                 C3791 +
             (C4890 * C586 - C48566 * C595 + C4891 * C1440 - C48408 * C1447) *
                 C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C48293 * C510 +
           ((C6356 * C3790 + C6357 * C48565 +
             (C6337 - C6336 + C6339 - C6338) * C3791 +
             (C6341 - C6340 + C6343 - C6342) * C48366) *
                C1066 +
            (C6120 * C3790 + C6121 * C48565 +
             (C6349 - C6348 + C6351 - C6350) * C3791 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C1067 +
            ((C5090 - C5089 + C5092 - C5091) * C3790 +
             (C5094 - C5093 + C5096 - C5095) * C48565 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C3791 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C48293 * C510 +
           ((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
             C21098) *
                C3790 +
            (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
             C21106) *
                C48565 +
            (C19819 * C580 - C19815 * C585 + C19820 * C1435 - C19816 * C1439 +
             C19821 * C2310 - C19817 * C2317 + C19822 * C10068 -
             C48614 * C10070) *
                C3791 +
            (C19819 * C586 - C19815 * C595 + C19820 * C1440 - C19816 * C1447 +
             C19821 * C2318 - C19817 * C2328 + C19822 * C10071 -
             C48614 * C10074) *
                C48366) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C3790 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48565 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C3791 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48366) *
               C48209 * C48293 * C510 +
           ((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
             C19992) *
                C3790 +
            (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
             C20000) *
                C48565 +
            (C19815 * C587 - C19819 * C581 + C19816 * C1441 - C19820 * C1436 +
             C19817 * C2321 - C19821 * C2312 + C48614 * C10072 -
             C19822 * C10069) *
                C3791 +
            (C19815 * C596 - C19819 * C588 + C19816 * C1448 - C19820 * C1442 +
             C19817 * C2330 - C19821 * C2322 + C48614 * C10075 -
             C19822 * C10073) *
                C48366) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
              C48209 * C48293 * C576 +
          ((C6321 - C6320 + C6323 - C6322) * C11042 +
           (C6325 - C6324 + C6327 - C6326) * C11036 +
           (C6912 - C6913 + C6914 - C6915) * C11043 +
           (C6916 - C6917 + C6918 - C6919) * C11037 +
           (C12937 - C12938 + C12939 - C12940) * C11044 +
           (C12941 - C12942 + C12943 - C12944) * C11038 +
           (C14273 - C14274 + C14275 - C14276) * C11045 +
           (C14277 - C14278 + C14279 - C14280) * C48608) *
              C48209 * C48293 * C577 +
          (C12945 * C11042 + C12946 * C11036 + C14281 * C11043 +
           C14282 * C11037 + (C14274 - C14273 + C14276 - C14275) * C11044 +
           (C14278 - C14277 + C14280 - C14279) * C11038 +
           (C48566 * C9038 - C4890 * C9036 + C48408 * C9381 - C4891 * C9380) *
               C11045 +
           (C48566 * C9042 - C4890 * C9039 + C48408 * C9383 - C4891 * C9382) *
               C48608) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C6320 - C6321 + C6322 - C6323) * C3791 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
            C6357 * C48366) *
               C1067 +
           C6125 * C48585) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C3790 +
            (C6325 - C6324 + C6327 - C6326) * C48565 +
            (C6912 - C6913 + C6914 - C6915) * C3791 +
            (C6916 - C6917 + C6918 - C6919) * C48366) *
               C1066 +
           (C6358 * C3790 + C6359 * C48565 +
            (C6336 - C6337 + C6338 - C6339) * C3791 +
            (C6340 - C6341 + C6342 - C6343) * C48366) *
               C1067 +
           (C6360 * C3790 + C6361 * C48565 +
            (C6348 - C6349 + C6350 - C6351) * C3791 +
            (C6352 - C6353 + C6354 - C6355) * C48366) *
               C48585) *
              C48293 * C577 +
          (((C6913 - C6912 + C6915 - C6914) * C3790 +
            (C6917 - C6916 + C6919 - C6918) * C48565 +
            (C48566 * C1249 - C4890 * C1245 + C48408 * C1890 - C4891 * C1887) *
                C3791 +
            (C48566 * C1257 - C4890 * C1250 + C48408 * C1896 - C4891 * C1891) *
                C48366) *
               C1066 +
           ((C6337 - C6336 + C6339 - C6338) * C3790 +
            (C6341 - C6340 + C6343 - C6342) * C48565 +
            (C48566 * C1251 - C4890 * C1246 + C48408 * C1892 - C4891 * C1888) *
                C3791 +
            (C48566 * C1258 - C4890 * C1252 + C48408 * C1897 - C4891 * C1893) *
                C48366) *
               C1067 +
           ((C6349 - C6348 + C6351 - C6350) * C3790 +
            (C6353 - C6352 + C6355 - C6354) * C48565 +
            (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                C3791 +
            (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                C48366) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
            C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
               C3790 +
           (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
            C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
               C48565 +
           (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
            C21099) *
               C3791 +
           (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
            C21107) *
               C48366) *
              C48209 * C48293 * C576 +
          ((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
            C21098) *
               C3790 +
           (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
            C21106) *
               C48565 +
           (C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
            C21473) *
               C3791 +
           (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
            C21481) *
               C48366) *
              C48209 * C48293 * C577 +
          ((C21467 - C21466 + C21469 - C21468 + C21471 - C21470 + C21473 -
            C21472) *
               C3790 +
           (C21475 - C21474 + C21477 - C21476 + C21479 - C21478 + C21481 -
            C21480) *
               C48565 +
           (C19815 * C1249 - C19819 * C1245 + C19816 * C1890 - C19820 * C1887 +
            C19817 * C9620 - C19821 * C9618 + C48614 * C10501 -
            C19822 * C10500) *
               C3791 +
           (C19815 * C1257 - C19819 * C1250 + C19816 * C1896 - C19820 * C1891 +
            C19817 * C9624 - C19821 * C9621 + C48614 * C10503 -
            C19822 * C10502) *
               C48366) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C386 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C510 +
          (((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C14273 - C14274 + C14275 - C14276) * C11045 +
            (C14277 - C14278 + C14279 - C14280) * C48608) *
               C48209 * C386 +
           ((C7115 - C7114 + C7117 - C7116) * C11042 +
            (C7119 - C7118 + C7121 - C7120) * C11036 +
            (C13142 - C13141 + C13144 - C13143) * C11043 +
            (C13146 - C13145 + C13148 - C13147) * C11037 +
            (C14414 - C14413 + C14416 - C14415) * C11044 +
            (C14418 - C14417 + C14420 - C14419) * C11038 +
            (C48566 * C9136 - C4890 * C9134 + C48408 * C9622 - C4891 * C9619) *
                C11045 +
            (C48566 * C9140 - C4890 * C9137 + C48408 * C9625 - C4891 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C6912 - C6913 + C6914 - C6915) * C3791 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C3790 +
             (C7119 - C7118 + C7121 - C7120) * C48565 +
             (C48566 * C1439 - C4890 * C1435 + C48408 * C2317 - C4891 * C2310) *
                 C3791 +
             (C48566 * C1447 - C4890 * C1440 + C48408 * C2328 - C4891 * C2318) *
                 C48366) *
                C1066 +
            ((C6557 - C6556 + C6559 - C6558) * C3790 +
             (C6561 - C6560 + C6563 - C6562) * C48565 +
             (C48566 * C1441 - C4890 * C1436 + C48408 * C2321 - C4891 * C2312) *
                 C3791 +
             (C48566 * C1448 - C4890 * C1442 + C48408 * C2330 - C4891 * C2322) *
                 C48366) *
                C1067 +
            ((C6565 - C6564 + C6567 - C6566) * C3790 +
             (C6569 - C6568 + C6571 - C6570) * C48565 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C3791 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C386 +
           ((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
             C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
             C48614 * C3677) *
                C3790 +
            (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
             C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
             C48614 * C3683) *
                C48565 +
            (C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
             C21619) *
                C3791 +
            (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
             C21627) *
                C48366) *
               C48209 * C48595) *
              C510 +
          (((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
             C21098) *
                C3790 +
            (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
             C21106) *
                C48565 +
            (C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
             C21473) *
                C3791 +
            (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
             C21481) *
                C48366) *
               C48209 * C386 +
           ((C21613 - C21612 + C21615 - C21614 + C21617 - C21616 + C21619 -
             C21618) *
                C3790 +
            (C21621 - C21620 + C21623 - C21622 + C21625 - C21624 + C21627 -
             C21626) *
                C48565 +
            (C19815 * C1439 - C19819 * C1435 + C19816 * C2317 - C19820 * C2310 +
             C19817 * C10070 - C19821 * C10068 + C48614 * C10934 -
             C19822 * C10931) *
                C3791 +
            (C19815 * C1447 - C19819 * C1440 + C19816 * C2328 - C19820 * C2318 +
             C19817 * C10074 - C19821 * C10071 + C48614 * C10937 -
             C19822 * C10935) *
                C48366) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C784 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C784 +
           ((C5228 - C5227 + C5230 - C5229) * C11042 +
            (C5232 - C5231 + C5234 - C5233) * C11036 +
            (C6557 - C6556 + C6559 - C6558) * C11043 +
            (C6561 - C6560 + C6563 - C6562) * C11037 +
            (C12586 - C12585 + C12588 - C12587) * C11044 +
            (C12590 - C12589 + C12592 - C12591) * C11038 +
            (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                C11045 +
            (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C3790 +
             (C5232 - C5231 + C5234 - C5233) * C48565 +
             (C6557 - C6556 + C6559 - C6558) * C3791 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C1066 +
            ((C5236 - C5235 + C5238 - C5237) * C3790 +
             (C5240 - C5239 + C5242 - C5241) * C48565 +
             (C6565 - C6564 + C6567 - C6566) * C3791 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C1067 +
            ((C5244 - C5243 + C5246 - C5245) * C3790 +
             (C5248 - C5247 + C5250 - C5249) * C48565 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C3791 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C784 +
           ((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
             C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
             C48614 * C3677) *
                C3790 +
            (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
             C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
             C48614 * C3683) *
                C48565 +
            (C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
             C21619) *
                C3791 +
            (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
             C21627) *
                C48366) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C3790 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48565 +
            (C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C3791 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48366) *
               C48209 * C784 +
           ((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
             C20138) *
                C3790 +
            (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
             C20146) *
                C48565 +
            (C19815 * C689 - C19819 * C683 + C19816 * C2319 - C19820 * C2311 +
             C19817 * C3265 - C19821 * C3261 + C48614 * C17530 -
             C19822 * C17529) *
                C3791 +
            (C19815 * C698 - C19819 * C690 + C19816 * C2329 - C19820 * C2320 +
             C19817 * C3270 - C19821 * C3266 + C48614 * C17532 -
             C19822 * C17531) *
                C48366) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C784 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C260 +
          (((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C14273 - C14274 + C14275 - C14276) * C11045 +
            (C14277 - C14278 + C14279 - C14280) * C48608) *
               C48209 * C784 +
           ((C7115 - C7114 + C7117 - C7116) * C11042 +
            (C7119 - C7118 + C7121 - C7120) * C11036 +
            (C13142 - C13141 + C13144 - C13143) * C11043 +
            (C13146 - C13145 + C13148 - C13147) * C11037 +
            (C14414 - C14413 + C14416 - C14415) * C11044 +
            (C14418 - C14417 + C14420 - C14419) * C11038 +
            (C48566 * C9136 - C4890 * C9134 + C48408 * C9622 - C4891 * C9619) *
                C11045 +
            (C48566 * C9140 - C4890 * C9137 + C48408 * C9625 - C4891 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C6912 - C6913 + C6914 - C6915) * C3791 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C3790 +
             (C7119 - C7118 + C7121 - C7120) * C48565 +
             (C48566 * C1439 - C4890 * C1435 + C48408 * C2317 - C4891 * C2310) *
                 C3791 +
             (C48566 * C1447 - C4890 * C1440 + C48408 * C2328 - C4891 * C2318) *
                 C48366) *
                C1066 +
            ((C6557 - C6556 + C6559 - C6558) * C3790 +
             (C6561 - C6560 + C6563 - C6562) * C48565 +
             (C48566 * C1441 - C4890 * C1436 + C48408 * C2321 - C4891 * C2312) *
                 C3791 +
             (C48566 * C1448 - C4890 * C1442 + C48408 * C2330 - C4891 * C2322) *
                 C48366) *
                C1067 +
            ((C6565 - C6564 + C6567 - C6566) * C3790 +
             (C6569 - C6568 + C6571 - C6570) * C48565 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C3791 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C3790 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48565 +
            (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
             C21099) *
                C3791 +
            (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
             C21107) *
                C48366) *
               C48209 * C784 +
           ((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
             C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
             C48614 * C3677) *
                C3790 +
            (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
             C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
             C48614 * C3683) *
                C48565 +
            (C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
             C21619) *
                C3791 +
            (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
             C21627) *
                C48366) *
               C48209 * C48595) *
              C260 +
          (((C21093 - C21092 + C21095 - C21094 + C21097 - C21096 + C21099 -
             C21098) *
                C3790 +
            (C21101 - C21100 + C21103 - C21102 + C21105 - C21104 + C21107 -
             C21106) *
                C48565 +
            (C21466 - C21467 + C21468 - C21469 + C21470 - C21471 + C21472 -
             C21473) *
                C3791 +
            (C21474 - C21475 + C21476 - C21477 + C21478 - C21479 + C21480 -
             C21481) *
                C48366) *
               C48209 * C784 +
           ((C21613 - C21612 + C21615 - C21614 + C21617 - C21616 + C21619 -
             C21618) *
                C3790 +
            (C21621 - C21620 + C21623 - C21622 + C21625 - C21624 + C21627 -
             C21626) *
                C48565 +
            (C19815 * C1439 - C19819 * C1435 + C19816 * C2317 - C19820 * C2310 +
             C19817 * C10070 - C19821 * C10068 + C48614 * C10934 -
             C19822 * C10931) *
                C3791 +
            (C19815 * C1447 - C19819 * C1440 + C19816 * C2328 - C19820 * C2318 +
             C19817 * C10074 - C19821 * C10071 + C48614 * C10937 -
             C19822 * C10935) *
                C48366) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
              C48209 * C930 +
          ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
               C11042 +
           (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
               C11036 +
           (C7114 - C7115 + C7116 - C7117) * C11043 +
           (C7118 - C7119 + C7120 - C7121) * C11037 +
           (C13141 - C13142 + C13143 - C13144) * C11044 +
           (C13145 - C13146 + C13147 - C13148) * C11038 +
           (C14413 - C14414 + C14415 - C14416) * C11045 +
           (C14417 - C14418 + C14419 - C14420) * C48608) *
              C48209 * C931 +
          ((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
               C11042 +
           (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
               C11036 +
           (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
               C11043 +
           (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
               C11037 +
           (C48566 * C2317 - C4890 * C2310 + C48408 * C10070 - C4891 * C10068) *
               C11044 +
           (C48566 * C2328 - C4890 * C2318 + C48408 * C10074 - C4891 * C10071) *
               C11038 +
           (C48566 * C9620 - C4890 * C9618 + C48408 * C10501 - C4891 * C10500) *
               C11045 +
           (C48566 * C9624 - C4890 * C9621 + C48408 * C10503 - C4891 * C10502) *
               C48608) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C6320 - C6321 + C6322 - C6323) * C3791 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
            C6357 * C48366) *
               C1067 +
           C6125 * C48585) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C3790 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C48565 +
            (C7114 - C7115 + C7116 - C7117) * C3791 +
            (C7118 - C7119 + C7120 - C7121) * C48366) *
               C1066 +
           ((C5227 - C5228 + C5229 - C5230) * C3790 +
            (C5231 - C5232 + C5233 - C5234) * C48565 +
            (C6556 - C6557 + C6558 - C6559) * C3791 +
            (C6560 - C6561 + C6562 - C6563) * C48366) *
               C1067 +
           ((C5235 - C5236 + C5237 - C5238) * C3790 +
            (C5239 - C5240 + C5241 - C5242) * C48565 +
            (C6564 - C6565 + C6566 - C6567) * C3791 +
            (C6568 - C6569 + C6570 - C6571) * C48366) *
               C48585) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C3790 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C48565 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C3791 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C48366) *
               C1066 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C3790 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C48565 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C3791 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C48366) *
               C1067 +
           ((C48566 * C942 - C4890 * C935 + C48408 * C2826 - C4891 * C2820) *
                C3790 +
            (C48566 * C950 - C4890 * C943 + C48408 * C2832 - C4891 * C2827) *
                C48565 +
            (C48566 * C2323 - C4890 * C2313 + C48408 * C3267 - C4891 * C3262) *
                C3791 +
            (C48566 * C2331 - C4890 * C2324 + C48408 * C3271 - C4891 * C3268) *
                C48366) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
            C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
               C3790 +
           (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
            C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
               C48565 +
           (C21092 - C21093 + C21094 - C21095 + C21096 - C21097 + C21098 -
            C21099) *
               C3791 +
           (C21100 - C21101 + C21102 - C21103 + C21104 - C21105 + C21106 -
            C21107) *
               C48366) *
              C48209 * C930 +
          ((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
            C19821 * C2818 - C19817 * C2822 + C19822 * C3674 - C48614 * C3677) *
               C3790 +
           (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
            C19821 * C2823 - C19817 * C2830 + C19822 * C3678 - C48614 * C3683) *
               C48565 +
           (C21612 - C21613 + C21614 - C21615 + C21616 - C21617 + C21618 -
            C21619) *
               C3791 +
           (C21620 - C21621 + C21622 - C21623 + C21624 - C21625 + C21626 -
            C21627) *
               C48366) *
              C48209 * C931 +
          ((C19815 * C938 - C19819 * C933 + C19816 * C2822 - C19820 * C2818 +
            C19817 * C3677 - C19821 * C3674 + C48614 * C17617 -
            C19822 * C17615) *
               C3790 +
           (C19815 * C948 - C19819 * C939 + C19816 * C2830 - C19820 * C2823 +
            C19817 * C3683 - C19821 * C3678 + C48614 * C17621 -
            C19822 * C17618) *
               C48565 +
           (C19815 * C2315 - C19819 * C2309 + C19816 * C3263 - C19820 * C3260 +
            C19817 * C10932 - C19821 * C10930 + C48614 * C17850 -
            C19822 * C17849) *
               C3791 +
           (C19815 * C2327 - C19819 * C2316 + C19816 * C3269 - C19820 * C3264 +
            C19817 * C10936 - C19821 * C10933 + C48614 * C17852 -
            C19822 * C17851) *
               C48366) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C114 +
                (C48321 * C136 - C113 * C123) * C48304) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C48293 * C48276 * C110 +
              (((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
               ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
               ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
               ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
               ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
                  C48293 * C48276 * C111 +
              (C176 * C103 + C177 * C104 + C178 * C105 +
               ((C161 - C160) * C114 + (C163 - C162) * C48304) * C106 +
               ((C48321 * C134 - C113 * C121) * C114 +
                (C48321 * C142 - C113 * C135) * C48304) *
                   C107) *
                  C48293 * C48276 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C1069 +
                (C48321 * C136 - C113 * C123) * C48633 +
                (C48321 * C270 - C113 * C264) * C1070 +
                (C48321 * C282 - C113 * C271) * C48621 +
                (C48321 * C585 - C113 * C580) * C1071 +
                (C48321 * C595 - C113 * C586) * C48598) *
                   C1066 +
               ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                (C290 - C289) * C1070 + (C292 - C291) * C48621 +
                (C1073 - C1074) * C1071 + (C1075 - C1076) * C48598) *
                   C1067 +
               C1099 * C48585) *
                  C48293 * C48276 * C110 +
              (((C145 - C144) * C1069 + (C147 - C146) * C48633 +
                (C289 - C290) * C1070 + (C291 - C292) * C48621 +
                (C1074 - C1073) * C1071 + (C1076 - C1075) * C48598) *
                   C1066 +
               ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
                (C293 - C294) * C1070 + (C295 - C296) * C48621 +
                (C1082 - C1081) * C1071 + (C1084 - C1083) * C48598) *
                   C1067 +
               ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
                (C297 - C298) * C1070 + (C299 - C300) * C48621 +
                (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                   C48585) *
                  C48293 * C48276 * C111 +
              (C1099 * C1066 +
               (C166 * C1069 + C167 * C48633 + (C298 - C297) * C1070 +
                (C300 - C299) * C48621 + (C1086 - C1085) * C1071 +
                (C1088 - C1087) * C48598) *
                   C1067 +
               (C168 * C1069 + C169 * C48633 + (C302 - C301) * C1070 +
                (C304 - C303) * C48621 + (C48321 * C593 - C113 * C584) * C1071 +
                (C48321 * C599 - C113 * C594) * C48598) *
                   C48585) *
                  C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C48293 * C48276 * C110 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
               C1066 +
           ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
            (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
               C1067 +
           ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
            (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
               C48585) *
              C48293 * C48276 * C111 +
          (C2498 * C1066 +
           ((C2475 - C2474 + C2477 - C2476 + C2479 - C2478) * C114 +
            (C2481 - C2480 + C2483 - C2482 + C2485 - C2484) * C48304) *
               C1067 +
           ((C48634 * C130 - C2446 * C119 + C48623 * C402 - C2447 * C392 +
             C48601 * C946 - C2448 * C937) *
                C114 +
            (C48634 * C140 - C2446 * C131 + C48623 * C410 - C2447 * C403 +
             C48601 * C952 - C2448 * C947) *
                C48304) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
            C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
               C48630 +
           ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
            C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
               C48617 +
           ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
            C3940 * C7766 + (C1085 - C1086) * C7773 +
            (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C7785 * C48630 +
           (C166 * C7771 + C167 * C7765 + C3799 * C7772 + C3800 * C7766 +
            (C1086 - C1085) * C7773 + (C1088 - C1087) * C48598) *
               C48617 +
           (C168 * C7771 + C169 * C7765 + (C302 - C301) * C7772 +
            (C304 - C303) * C7766 + (C48321 * C593 - C113 * C584) * C7773 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
           (C48321 * C1726 - C113 * C1723) * C8953 +
           (C48321 * C1732 - C113 * C1727) * C8947) *
              C48209 * C48293 * C48276 * C110 +
          ((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
           C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
           (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
           (C113 * C1724 - C48321 * C1728) * C8953 +
           (C113 * C1729 - C48321 * C1733) * C8947) *
              C48209 * C48293 * C48276 * C111 +
          (C164 * C8949 + C165 * C8943 + C1079 * C8950 + C1080 * C8944 +
           C1092 * C8951 + C1093 * C8945 + (C1287 - C1286) * C8952 +
           (C1289 - C1288) * C8946 + (C48321 * C1730 - C113 * C1725) * C8953 +
           (C48321 * C1734 - C113 * C1731) * C8947) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C48634 * C270 - C2446 * C264 + C48623 * C687 - C2447 * C682 +
            C48601 * C2315 - C2448 * C2309) *
               C7772 +
           (C48634 * C282 - C2446 * C271 + C48623 * C697 - C2447 * C688 +
            C48601 * C2327 - C2448 * C2316) *
               C7766 +
           (C48634 * C585 - C2446 * C580 + C48623 * C1439 - C2447 * C1435 +
            C48601 * C2317 - C2448 * C2310) *
               C7773 +
           (C48634 * C595 - C2446 * C586 + C48623 * C1447 - C2447 * C1440 +
            C48601 * C2328 - C2448 * C2318) *
               C48598) *
              C48209 * C48293 * C48276 * C110 +
          ((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
           (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
           (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
           (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
           (C2446 * C581 - C48634 * C587 + C2447 * C1436 - C48623 * C1441 +
            C2448 * C2312 - C48601 * C2321) *
               C7773 +
           (C2446 * C588 - C48634 * C596 + C2447 * C1442 - C48623 * C1448 +
            C2448 * C2322 - C48601 * C2330) *
               C48598) *
              C48209 * C48293 * C48276 * C111 +
          (C2494 * C7771 + C2495 * C7765 +
           (C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C7772 +
           (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C7766 +
           (C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
            C48601 * C2325 - C2448 * C2314) *
               C7773 +
           (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
            C48601 * C2332 - C2448 * C2326) *
               C48598) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C48293 * C48276 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
               C48630 +
           ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
               C48617 +
           ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
               C48585) *
              C48293 * C48276 * C111 +
          (C14943 * C48630 +
           ((C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C114 +
            (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48304) *
               C48617 +
           ((C14888 * C130 - C14891 * C119 + C14889 * C402 - C14892 * C392 +
             C48601 * C946 - C14893 * C937) *
                C114 +
            (C14888 * C140 - C14891 * C131 + C14889 * C410 - C14892 * C403 +
             C48601 * C952 - C14893 * C947) *
                C48304) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C14888 * C270 - C14891 * C264 + C14889 * C687 - C14892 * C682 +
            C48601 * C2315 - C14893 * C2309) *
               C1070 +
           (C14888 * C282 - C14891 * C271 + C14889 * C697 - C14892 * C688 +
            C48601 * C2327 - C14893 * C2316) *
               C48621 +
           (C14888 * C585 - C14891 * C580 + C14889 * C1439 - C14892 * C1435 +
            C48601 * C2317 - C14893 * C2310) *
               C1071 +
           (C14888 * C595 - C14891 * C586 + C14889 * C1447 - C14892 * C1440 +
            C48601 * C2328 - C14893 * C2318) *
               C48598) *
              C48209 * C48293 * C48276 * C110 +
          ((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
           (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
           (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
           (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
           (C14891 * C581 - C14888 * C587 + C14892 * C1436 - C14889 * C1441 +
            C14893 * C2312 - C48601 * C2321) *
               C1071 +
           (C14891 * C588 - C14888 * C596 + C14892 * C1442 - C14889 * C1448 +
            C14893 * C2322 - C48601 * C2330) *
               C48598) *
              C48209 * C48293 * C48276 * C111 +
          (C14939 * C1069 + C14940 * C48633 +
           (C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C1070 +
           (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48621 +
           (C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
            C48601 * C2325 - C14893 * C2314) *
               C1071 +
           (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
            C48601 * C2332 - C14893 * C2326) *
               C48598) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
            C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
            C17441 * C3677 - C17446 * C3674) *
               C114 +
           (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
            C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
            C17441 * C3683 - C17446 * C3678) *
               C48304) *
              C48209 * C48293 * C48276 * C110 +
          ((C17442 * C116 - C17437 * C124 + C17443 * C389 - C17438 * C396 +
            C17444 * C934 - C17439 * C940 + C17445 * C2819 - C17440 * C2824 +
            C17446 * C3675 - C17441 * C3679) *
               C114 +
           (C17442 * C125 - C17437 * C137 + C17443 * C397 - C17438 * C407 +
            C17444 * C941 - C17439 * C949 + C17445 * C2825 - C17440 * C2831 +
            C17446 * C3680 - C17441 * C3684) *
               C48304) *
              C48209 * C48293 * C48276 * C111 +
          ((C17437 * C126 - C17442 * C117 + C17438 * C398 - C17443 * C390 +
            C17439 * C942 - C17444 * C935 + C17440 * C2826 - C17445 * C2820 +
            C17441 * C3681 - C17446 * C3676) *
               C114 +
           (C17437 * C138 - C17442 * C127 + C17438 * C408 - C17443 * C399 +
            C17439 * C950 - C17444 * C943 + C17440 * C2832 - C17445 * C2827 +
            C17441 * C3685 - C17446 * C3682) *
               C48304) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C48293 * C260 +
               (((C113 * C264 - C48321 * C270) * C114 +
                 (C113 * C271 - C48321 * C282) * C48304) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
                   C48293 * C48593) *
                  C262 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
                   C48293 * C260 +
               (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
                ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
                ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
                ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
                ((C48321 * C280 - C113 * C269) * C114 +
                 (C48321 * C287 - C113 * C281) * C48304) *
                    C107) *
                   C48293 * C48593) *
                  C48591) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 (C1266 - C1267) * C1071 + (C1268 - C1269) * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C48293 * C260 +
               (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
                 (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
                 (C113 * C1245 - C48321 * C1249) * C1071 +
                 (C113 * C1250 - C48321 * C1257) * C48598) *
                    C1066 +
                (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 +
                 C1277 * C48621 + (C1278 - C1279) * C1071 +
                 (C1280 - C1281) * C48598) *
                    C1067 +
                (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 +
                 C1285 * C48621 + (C1286 - C1287) * C1071 +
                 (C1288 - C1289) * C48598) *
                    C48585) *
                   C48293 * C48593) *
                  C262 +
              ((((C145 - C144) * C1069 + (C147 - C146) * C48633 +
                 C1274 * C1070 + C1275 * C48621 + C1276 * C1071 +
                 C1277 * C48598) *
                    C1066 +
                ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
                 C1282 * C1070 + C1283 * C48621 + C1284 * C1071 +
                 C1285 * C48598) *
                    C1067 +
                ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
                 (C297 - C298) * C1070 + (C299 - C300) * C48621 +
                 (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                    C48585) *
                   C48293 * C260 +
               ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 +
                 C1273 * C48621 + (C1279 - C1278) * C1071 +
                 (C1281 - C1280) * C48598) *
                    C1066 +
                (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 +
                 C1093 * C48621 + (C1287 - C1286) * C1071 +
                 (C1289 - C1288) * C48598) *
                    C1067 +
                ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
                 (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
                 (C48321 * C1255 - C113 * C1248) * C1071 +
                 (C48321 * C1260 - C113 * C1256) * C48598) *
                    C48585) *
                   C48293 * C48593) *
                  C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C48293 * C260 +
           (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C48293 * C260 +
           (((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C114 +
             (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C48304) *
                C1066 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C114 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C48304) *
                C1067 +
            ((C48634 * C276 - C2446 * C267 + C48623 * C693 - C2447 * C685 +
              C48601 * C2645 - C2448 * C2644) *
                 C114 +
             (C48634 * C285 - C2446 * C277 + C48623 * C700 - C2447 * C694 +
              C48601 * C2647 - C2448 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C260 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C260 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C48293 * C260 +
           ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C2446 * C1245 - C48634 * C1249 + C2447 * C1887 - C48623 * C1890 +
             C2448 * C9618 - C48601 * C9620) *
                C7773 +
            (C2446 * C1250 - C48634 * C1257 + C2447 * C1891 - C48623 * C1896 +
             C2448 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C48293 * C260 +
           ((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C7771 +
            (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C7765 +
            (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C7772 +
            (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C7766 +
            (C48634 * C1251 - C2446 * C1246 + C48623 * C1892 - C2447 * C1888 +
             C48601 * C9883 - C2448 * C9882) *
                C7773 +
            (C48634 * C1258 - C2446 * C1252 + C48623 * C1897 - C2447 * C1893 +
             C48601 * C9885 - C2448 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C48293 * C260 +
           (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C48293 * C260 +
           (((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C114 +
             (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48304) *
                C48630 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C114 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48304) *
                C48617 +
            ((C14888 * C276 - C14891 * C267 + C14889 * C693 - C14892 * C685 +
              C48601 * C2645 - C14893 * C2644) *
                 C114 +
             (C14888 * C285 - C14891 * C277 + C14889 * C700 - C14892 * C694 +
              C48601 * C2647 - C14893 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C48293 * C260 +
           ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C14891 * C1245 - C14888 * C1249 + C14892 * C1887 - C14889 * C1890 +
             C14893 * C9618 - C48601 * C9620) *
                C1071 +
            (C14891 * C1250 - C14888 * C1257 + C14892 * C1891 - C14889 * C1896 +
             C14893 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C48293 * C260 +
           ((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C1069 +
            (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48633 +
            (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C1070 +
            (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48621 +
            (C14888 * C1251 - C14891 * C1246 + C14889 * C1892 - C14892 * C1888 +
             C48601 * C9883 - C14893 * C9882) *
                C1071 +
            (C14888 * C1258 - C14891 * C1252 + C14889 * C1897 - C14892 * C1893 +
             C48601 * C9885 - C14893 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C48293 * C260 +
           ((C17442 * C264 - C17437 * C270 + C17443 * C682 - C17438 * C687 +
             C17444 * C2309 - C17439 * C2315 + C17445 * C3260 - C17440 * C3263 +
             C17446 * C10930 - C17441 * C10932) *
                C114 +
            (C17442 * C271 - C17437 * C282 + C17443 * C688 - C17438 * C697 +
             C17444 * C2316 - C17439 * C2327 + C17445 * C3264 - C17440 * C3269 +
             C17446 * C10933 - C17441 * C10936) *
                C48304) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C17442 * C116 - C17437 * C124 + C17443 * C389 - C17438 * C396 +
             C17444 * C934 - C17439 * C940 + C17445 * C2819 - C17440 * C2824 +
             C17446 * C3675 - C17441 * C3679) *
                C114 +
            (C17442 * C125 - C17437 * C137 + C17443 * C397 - C17438 * C407 +
             C17444 * C941 - C17439 * C949 + C17445 * C2825 - C17440 * C2831 +
             C17446 * C3680 - C17441 * C3684) *
                C48304) *
               C48209 * C48293 * C260 +
           ((C17437 * C272 - C17442 * C265 + C17438 * C689 - C17443 * C683 +
             C17439 * C2319 - C17444 * C2311 + C17440 * C3265 - C17445 * C3261 +
             C17441 * C17530 - C17446 * C17529) *
                C114 +
            (C17437 * C283 - C17442 * C273 + C17438 * C698 - C17443 * C690 +
             C17439 * C2329 - C17444 * C2320 + C17440 * C3270 - C17445 * C3266 +
             C17441 * C17532 - C17446 * C17531) *
                C48304) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C386 +
               (((C113 * C388 - C48321 * C394) * C114 +
                 (C113 * C395 - C48321 * C406) * C48304) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
                   C48595) *
                  C48276 * C262 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
                   C386 +
               (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
                ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
                ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
                ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
                ((C48321 * C404 - C113 * C393) * C114 +
                 (C48321 * C411 - C113 * C405) * C48304) *
                    C107) *
                   C48595) *
                  C48276 * C48591) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 (C1266 - C1267) * C1071 + (C1268 - C1269) * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C386 +
               (((C113 * C388 - C48321 * C394) * C1069 +
                 (C113 * C395 - C48321 * C406) * C48633 +
                 (C113 * C682 - C48321 * C687) * C1070 +
                 (C113 * C688 - C48321 * C697) * C48621 +
                 (C113 * C1435 - C48321 * C1439) * C1071 +
                 (C113 * C1440 - C48321 * C1447) * C48598) *
                    C1066 +
                ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
                 (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
                 (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                    C1067 +
                ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
                 (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
                 (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                    C48585) *
                   C48595) *
                  C48276 * C262 +
              ((((C145 - C144) * C1069 + (C147 - C146) * C48633 +
                 C1274 * C1070 + C1275 * C48621 + C1276 * C1071 +
                 C1277 * C48598) *
                    C1066 +
                ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
                 C1282 * C1070 + C1283 * C48621 + C1284 * C1071 +
                 C1285 * C48598) *
                    C1067 +
                ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
                 (C297 - C298) * C1070 + (C299 - C300) * C48621 +
                 (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                    C48585) *
                   C386 +
               (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
                 (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
                 (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                    C1066 +
                ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
                 (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
                 (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                    C1067 +
                ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
                 (C48321 * C693 - C113 * C685) * C1070 +
                 (C48321 * C700 - C113 * C694) * C48621 +
                 (C48321 * C1445 - C113 * C1438) * C1071 +
                 (C48321 * C1450 - C113 * C1446) * C48598) *
                    C48585) *
                   C48595) *
                  C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C386 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C114 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C48304) *
                C1066 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C114 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C48304) *
                C1067 +
            ((C48634 * C400 - C2446 * C391 + C48623 * C944 - C2447 * C936 +
              C48601 * C2828 - C2448 * C2821) *
                 C114 +
             (C48634 * C409 - C2446 * C401 + C48623 * C951 - C2447 * C945 +
              C48601 * C2833 - C2448 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C113 * C1887 - C48321 * C1890) * C8952 +
            (C113 * C1891 - C48321 * C1896) * C8946 +
            (C113 * C9134 - C48321 * C9136) * C8953 +
            (C113 * C9137 - C48321 * C9140) * C8947) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C386 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C386 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C2446 * C682 - C48634 * C687 + C2447 * C2309 - C48623 * C2315 +
             C2448 * C3260 - C48601 * C3263) *
                C7772 +
            (C2446 * C688 - C48634 * C697 + C2447 * C2316 - C48623 * C2327 +
             C2448 * C3264 - C48601 * C3269) *
                C7766 +
            (C2446 * C1435 - C48634 * C1439 + C2447 * C2310 - C48623 * C2317 +
             C2448 * C10068 - C48601 * C10070) *
                C7773 +
            (C2446 * C1440 - C48634 * C1447 + C2447 * C2318 - C48623 * C2328 +
             C2448 * C10071 - C48601 * C10074) *
                C48598) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C386 +
           ((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C7771 +
            (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C7765 +
            (C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
             C48601 * C3265 - C2448 * C3261) *
                C7772 +
            (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
             C48601 * C3270 - C2448 * C3266) *
                C7766 +
            (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
             C48601 * C10072 - C2448 * C10069) *
                C7773 +
            (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
             C48601 * C10075 - C2448 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C386 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C114 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48304) *
                C48630 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C114 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48304) *
                C48617 +
            ((C14888 * C400 - C14891 * C391 + C14889 * C944 - C14892 * C936 +
              C48601 * C2828 - C14893 * C2821) *
                 C114 +
             (C14888 * C409 - C14891 * C401 + C14889 * C951 - C14892 * C945 +
              C48601 * C2833 - C14893 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C386 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C14891 * C682 - C14888 * C687 + C14892 * C2309 - C14889 * C2315 +
             C14893 * C3260 - C48601 * C3263) *
                C1070 +
            (C14891 * C688 - C14888 * C697 + C14892 * C2316 - C14889 * C2327 +
             C14893 * C3264 - C48601 * C3269) *
                C48621 +
            (C14891 * C1435 - C14888 * C1439 + C14892 * C2310 - C14889 * C2317 +
             C14893 * C10068 - C48601 * C10070) *
                C1071 +
            (C14891 * C1440 - C14888 * C1447 + C14892 * C2318 - C14889 * C2328 +
             C14893 * C10071 - C48601 * C10074) *
                C48598) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C386 +
           ((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C1069 +
            (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48633 +
            (C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
             C48601 * C3265 - C14893 * C3261) *
                C1070 +
            (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
             C48601 * C3270 - C14893 * C3266) *
                C48621 +
            (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 - C14892 * C2312 +
             C48601 * C10072 - C14893 * C10069) *
                C1071 +
            (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 - C14892 * C2322 +
             C48601 * C10075 - C14893 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C386 +
           ((C17442 * C388 - C17437 * C394 + C17443 * C933 - C17438 * C938 +
             C17444 * C2818 - C17439 * C2822 + C17445 * C3674 - C17440 * C3677 +
             C17446 * C17615 - C17441 * C17617) *
                C114 +
            (C17442 * C395 - C17437 * C406 + C17443 * C939 - C17438 * C948 +
             C17444 * C2823 - C17439 * C2830 + C17445 * C3678 - C17440 * C3683 +
             C17446 * C17618 - C17441 * C17621) *
                C48304) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C17442 * C116 - C17437 * C124 + C17443 * C389 - C17438 * C396 +
             C17444 * C934 - C17439 * C940 + C17445 * C2819 - C17440 * C2824 +
             C17446 * C3675 - C17441 * C3679) *
                C114 +
            (C17442 * C125 - C17437 * C137 + C17443 * C397 - C17438 * C407 +
             C17444 * C941 - C17439 * C949 + C17445 * C2825 - C17440 * C2831 +
             C17446 * C3680 - C17441 * C3684) *
                C48304) *
               C48209 * C386 +
           ((C17437 * C396 - C17442 * C389 + C17438 * C940 - C17443 * C934 +
             C17439 * C2824 - C17444 * C2819 + C17440 * C3679 - C17445 * C3675 +
             C17441 * C17619 - C17446 * C17616) *
                C114 +
            (C17437 * C407 - C17442 * C397 + C17438 * C949 - C17443 * C941 +
             C17439 * C2831 - C17444 * C2825 + C17440 * C3684 - C17445 * C3680 +
             C17441 * C17622 - C17446 * C17620) *
                C48304) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C48293 * C510 +
               (((C113 * C264 - C48321 * C270) * C114 +
                 (C113 * C271 - C48321 * C282) * C48304) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
                   C48293 * C48593) *
                  C512 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
                   C48293 * C510 +
               (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
                ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
                ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
                ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
                ((C48321 * C280 - C113 * C269) * C114 +
                 (C48321 * C287 - C113 * C281) * C48304) *
                    C107) *
                   C48293 * C48593) *
                  C48591) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 (C1266 - C1267) * C1071 + (C1268 - C1269) * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C48293 * C510 +
               (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
                 (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
                 (C113 * C1245 - C48321 * C1249) * C1071 +
                 (C113 * C1250 - C48321 * C1257) * C48598) *
                    C1066 +
                (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 +
                 C1277 * C48621 + (C1278 - C1279) * C1071 +
                 (C1280 - C1281) * C48598) *
                    C1067 +
                (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 +
                 C1285 * C48621 + (C1286 - C1287) * C1071 +
                 (C1288 - C1289) * C48598) *
                    C48585) *
                   C48293 * C48593) *
                  C512 +
              ((((C145 - C144) * C1069 + (C147 - C146) * C48633 +
                 C1274 * C1070 + C1275 * C48621 + C1276 * C1071 +
                 C1277 * C48598) *
                    C1066 +
                ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
                 C1282 * C1070 + C1283 * C48621 + C1284 * C1071 +
                 C1285 * C48598) *
                    C1067 +
                ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
                 (C297 - C298) * C1070 + (C299 - C300) * C48621 +
                 (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                    C48585) *
                   C48293 * C510 +
               ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 +
                 C1273 * C48621 + (C1279 - C1278) * C1071 +
                 (C1281 - C1280) * C48598) *
                    C1066 +
                (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 +
                 C1093 * C48621 + (C1287 - C1286) * C1071 +
                 (C1289 - C1288) * C48598) *
                    C1067 +
                ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
                 (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
                 (C48321 * C1255 - C113 * C1248) * C1071 +
                 (C48321 * C1260 - C113 * C1256) * C48598) *
                    C48585) *
                   C48293 * C48593) *
                  C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C48293 * C510 +
           (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C48293 * C510 +
           (((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C114 +
             (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C48304) *
                C1066 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C114 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C48304) *
                C1067 +
            ((C48634 * C276 - C2446 * C267 + C48623 * C693 - C2447 * C685 +
              C48601 * C2645 - C2448 * C2644) *
                 C114 +
             (C48634 * C285 - C2446 * C277 + C48623 * C700 - C2447 * C694 +
              C48601 * C2647 - C2448 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C510 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C510 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C48293 * C510 +
           ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C2446 * C1245 - C48634 * C1249 + C2447 * C1887 - C48623 * C1890 +
             C2448 * C9618 - C48601 * C9620) *
                C7773 +
            (C2446 * C1250 - C48634 * C1257 + C2447 * C1891 - C48623 * C1896 +
             C2448 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C48293 * C510 +
           ((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C7771 +
            (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C7765 +
            (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C7772 +
            (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C7766 +
            (C48634 * C1251 - C2446 * C1246 + C48623 * C1892 - C2447 * C1888 +
             C48601 * C9883 - C2448 * C9882) *
                C7773 +
            (C48634 * C1258 - C2446 * C1252 + C48623 * C1897 - C2447 * C1893 +
             C48601 * C9885 - C2448 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C48293 * C510 +
           (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C48293 * C510 +
           (((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C114 +
             (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48304) *
                C48630 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C114 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48304) *
                C48617 +
            ((C14888 * C276 - C14891 * C267 + C14889 * C693 - C14892 * C685 +
              C48601 * C2645 - C14893 * C2644) *
                 C114 +
             (C14888 * C285 - C14891 * C277 + C14889 * C700 - C14892 * C694 +
              C48601 * C2647 - C14893 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C48293 * C510 +
           ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C14891 * C1245 - C14888 * C1249 + C14892 * C1887 - C14889 * C1890 +
             C14893 * C9618 - C48601 * C9620) *
                C1071 +
            (C14891 * C1250 - C14888 * C1257 + C14892 * C1891 - C14889 * C1896 +
             C14893 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C48293 * C510 +
           ((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C1069 +
            (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48633 +
            (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C1070 +
            (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48621 +
            (C14888 * C1251 - C14891 * C1246 + C14889 * C1892 - C14892 * C1888 +
             C48601 * C9883 - C14893 * C9882) *
                C1071 +
            (C14888 * C1258 - C14891 * C1252 + C14889 * C1897 - C14892 * C1893 +
             C48601 * C9885 - C14893 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C48293 * C510 +
           ((C17442 * C264 - C17437 * C270 + C17443 * C682 - C17438 * C687 +
             C17444 * C2309 - C17439 * C2315 + C17445 * C3260 - C17440 * C3263 +
             C17446 * C10930 - C17441 * C10932) *
                C114 +
            (C17442 * C271 - C17437 * C282 + C17443 * C688 - C17438 * C697 +
             C17444 * C2316 - C17439 * C2327 + C17445 * C3264 - C17440 * C3269 +
             C17446 * C10933 - C17441 * C10936) *
                C48304) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C17442 * C116 - C17437 * C124 + C17443 * C389 - C17438 * C396 +
             C17444 * C934 - C17439 * C940 + C17445 * C2819 - C17440 * C2824 +
             C17446 * C3675 - C17441 * C3679) *
                C114 +
            (C17442 * C125 - C17437 * C137 + C17443 * C397 - C17438 * C407 +
             C17444 * C941 - C17439 * C949 + C17445 * C2825 - C17440 * C2831 +
             C17446 * C3680 - C17441 * C3684) *
                C48304) *
               C48209 * C48293 * C510 +
           ((C17437 * C272 - C17442 * C265 + C17438 * C689 - C17443 * C683 +
             C17439 * C2319 - C17444 * C2311 + C17440 * C3265 - C17445 * C3261 +
             C17441 * C17530 - C17446 * C17529) *
                C114 +
            (C17437 * C283 - C17442 * C273 + C17438 * C698 - C17443 * C690 +
             C17439 * C2329 - C17444 * C2320 + C17440 * C3270 - C17445 * C3266 +
             C17441 * C17532 - C17446 * C17531) *
                C48304) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C114 +
                (C48321 * C136 - C113 * C123) * C48304) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C48293 * C576 +
              (((C113 * C264 - C48321 * C270) * C114 +
                (C113 * C271 - C48321 * C282) * C48304) *
                   C103 +
               ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
               ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
               ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
               ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
                  C48293 * C577 +
              (((C48321 * C585 - C113 * C580) * C114 +
                (C48321 * C595 - C113 * C586) * C48304) *
                   C103 +
               ((C48321 * C587 - C113 * C581) * C114 +
                (C48321 * C596 - C113 * C588) * C48304) *
                   C104 +
               ((C48321 * C589 - C113 * C582) * C114 +
                (C48321 * C597 - C113 * C590) * C48304) *
                   C105 +
               ((C48321 * C591 - C113 * C583) * C114 +
                (C48321 * C598 - C113 * C592) * C48304) *
                   C106 +
               ((C48321 * C593 - C113 * C584) * C114 +
                (C48321 * C599 - C113 * C594) * C48304) *
                   C107) *
                  C48293 * C578) *
             C48242 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C1069 +
                (C48321 * C136 - C113 * C123) * C48633 +
                (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                C1736 * C1071 + C1737 * C48598) *
                   C1066 +
               ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
                C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                   C1067 +
               C1099 * C48585) *
                  C48293 * C576 +
              (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
                (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
                (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                   C1066 +
               (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 +
                C1277 * C48621 + (C1278 - C1279) * C1071 +
                (C1280 - C1281) * C48598) *
                   C1067 +
               (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 +
                C1285 * C48621 + (C1286 - C1287) * C1071 +
                (C1288 - C1289) * C48598) *
                   C48585) *
                  C48293 * C577 +
              ((C1736 * C1069 + C1737 * C48633 + (C1739 - C1738) * C1070 +
                (C1741 - C1740) * C48621 +
                (C48321 * C1726 - C113 * C1723) * C1071 +
                (C48321 * C1732 - C113 * C1727) * C48598) *
                   C1066 +
               (C1272 * C1069 + C1273 * C48633 + (C1279 - C1278) * C1070 +
                (C1281 - C1280) * C48621 +
                (C48321 * C1728 - C113 * C1724) * C1071 +
                (C48321 * C1733 - C113 * C1729) * C48598) *
                   C1067 +
               (C1092 * C1069 + C1093 * C48633 + (C1287 - C1286) * C1070 +
                (C1289 - C1288) * C48621 +
                (C48321 * C1730 - C113 * C1725) * C1071 +
                (C48321 * C1734 - C113 * C1731) * C48598) *
                   C48585) *
                  C48293 * C578) *
             C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C48293 * C576 +
          (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
             C2448 * C2309 - C48601 * C2315) *
                C114 +
            (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
             C2448 * C2316 - C48601 * C2327) *
                C48304) *
               C1066 +
           ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
               C1067 +
           ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
               C48585) *
              C48293 * C577 +
          (((C48634 * C585 - C2446 * C580 + C48623 * C1439 - C2447 * C1435 +
             C48601 * C2317 - C2448 * C2310) *
                C114 +
            (C48634 * C595 - C2446 * C586 + C48623 * C1447 - C2447 * C1440 +
             C48601 * C2328 - C2448 * C2318) *
                C48304) *
               C1066 +
           ((C48634 * C587 - C2446 * C581 + C48623 * C1441 - C2447 * C1436 +
             C48601 * C2321 - C2448 * C2312) *
                C114 +
            (C48634 * C596 - C2446 * C588 + C48623 * C1448 - C2447 * C1442 +
             C48601 * C2330 - C2448 * C2322) *
                C48304) *
               C1067 +
           ((C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
             C48601 * C2325 - C2448 * C2314) *
                C114 +
            (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
             C48601 * C2332 - C2448 * C2326) *
                C48304) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
            (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
            (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
               C48630 +
           (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
            (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
               C48617 +
           (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
            (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C7771 + C1737 * C7765 + (C1739 - C1738) * C7772 +
            (C1741 - C1740) * C7766 + (C48321 * C1726 - C113 * C1723) * C7773 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C48630 +
           (C1272 * C7771 + C1273 * C7765 + (C1279 - C1278) * C7772 +
            (C1281 - C1280) * C7766 + (C48321 * C1728 - C113 * C1724) * C7773 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C48617 +
           (C1092 * C7771 + C1093 * C7765 + (C1287 - C1286) * C7772 +
            (C1289 - C1288) * C7766 + (C48321 * C1730 - C113 * C1725) * C7773 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C48293 * C576 +
          ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
           (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
           (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
           (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
           (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
              C48209 * C48293 * C577 +
          (C1736 * C8949 + C1737 * C8943 + C9291 * C8950 + C9292 * C8944 +
           C9293 * C8951 + C9294 * C8945 + (C9296 - C9295) * C8952 +
           (C9298 - C9297) * C8946 + (C48321 * C9287 - C113 * C9286) * C8953 +
           (C48321 * C9289 - C113 * C9288) * C8947) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
           (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
           C10353 * C7773 + C10354 * C48598) *
              C48209 * C48293 * C576 +
          ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
           (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
           (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
           (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
           (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
           (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
              C48209 * C48293 * C577 +
          (C10353 * C7771 + C10354 * C7765 +
           (C10340 - C10339 + C10342 - C10341 + C10344 - C10343) * C7772 +
           (C10346 - C10345 + C10348 - C10347 + C10350 - C10349) * C7766 +
           (C48634 * C1726 - C2446 * C1723 + C48623 * C9136 - C2447 * C9134 +
            C48601 * C9622 - C2448 * C9619) *
               C7773 +
           (C48634 * C1732 - C2446 * C1727 + C48623 * C9140 - C2447 * C9137 +
            C48601 * C9625 - C2448 * C9623) *
               C48598) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C48293 * C576 +
          (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
             C14893 * C2309 - C48601 * C2315) *
                C114 +
            (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
             C14893 * C2316 - C48601 * C2327) *
                C48304) *
               C48630 +
           ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
               C48617 +
           ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
            (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
               C48585) *
              C48293 * C577 +
          (((C14888 * C585 - C14891 * C580 + C14889 * C1439 - C14892 * C1435 +
             C48601 * C2317 - C14893 * C2310) *
                C114 +
            (C14888 * C595 - C14891 * C586 + C14889 * C1447 - C14892 * C1440 +
             C48601 * C2328 - C14893 * C2318) *
                C48304) *
               C48630 +
           ((C14888 * C587 - C14891 * C581 + C14889 * C1441 - C14892 * C1436 +
             C48601 * C2321 - C14893 * C2312) *
                C114 +
            (C14888 * C596 - C14891 * C588 + C14889 * C1448 - C14892 * C1442 +
             C48601 * C2330 - C14893 * C2322) *
                C48304) *
               C48617 +
           ((C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
             C48601 * C2325 - C14893 * C2314) *
                C114 +
            (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
             C48601 * C2332 - C14893 * C2326) *
                C48304) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
           (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
           C16802 * C1071 + C16803 * C48598) *
              C48209 * C48293 * C576 +
          ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
           (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
           (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
           (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
           (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
           (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
              C48209 * C48293 * C577 +
          (C16802 * C1069 + C16803 * C48633 +
           (C16789 - C16788 + C16791 - C16790 + C16793 - C16792) * C1070 +
           (C16795 - C16794 + C16797 - C16796 + C16799 - C16798) * C48621 +
           (C14888 * C1726 - C14891 * C1723 + C14889 * C9136 - C14892 * C9134 +
            C48601 * C9622 - C14893 * C9619) *
               C1071 +
           (C14888 * C1732 - C14891 * C1727 + C14889 * C9140 - C14892 * C9137 +
            C48601 * C9625 - C14893 * C9623) *
               C48598) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
            C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
            C17441 * C3677 - C17446 * C3674) *
               C114 +
           (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
            C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
            C17441 * C3683 - C17446 * C3678) *
               C48304) *
              C48209 * C48293 * C576 +
          ((C17442 * C264 - C17437 * C270 + C17443 * C682 - C17438 * C687 +
            C17444 * C2309 - C17439 * C2315 + C17445 * C3260 - C17440 * C3263 +
            C17446 * C10930 - C17441 * C10932) *
               C114 +
           (C17442 * C271 - C17437 * C282 + C17443 * C688 - C17438 * C697 +
            C17444 * C2316 - C17439 * C2327 + C17445 * C3264 - C17440 * C3269 +
            C17446 * C10933 - C17441 * C10936) *
               C48304) *
              C48209 * C48293 * C577 +
          ((C17437 * C585 - C17442 * C580 + C17438 * C1439 - C17443 * C1435 +
            C17439 * C2317 - C17444 * C2310 + C17440 * C10070 -
            C17445 * C10068 + C17441 * C10934 - C17446 * C10931) *
               C114 +
           (C17437 * C595 - C17442 * C586 + C17438 * C1447 - C17443 * C1440 +
            C17439 * C2328 - C17444 * C2318 + C17440 * C10074 -
            C17445 * C10071 + C17441 * C10937 - C17446 * C10935) *
               C48304) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C386 +
               (((C113 * C388 - C48321 * C394) * C114 +
                 (C113 * C395 - C48321 * C406) * C48304) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
                   C48595) *
                  C510 +
              ((((C113 * C264 - C48321 * C270) * C114 +
                 (C113 * C271 - C48321 * C282) * C48304) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
                   C386 +
               (((C48321 * C687 - C113 * C682) * C114 +
                 (C48321 * C697 - C113 * C688) * C48304) *
                    C103 +
                ((C48321 * C689 - C113 * C683) * C114 +
                 (C48321 * C698 - C113 * C690) * C48304) *
                    C104 +
                ((C48321 * C691 - C113 * C684) * C114 +
                 (C48321 * C699 - C113 * C692) * C48304) *
                    C105 +
                ((C48321 * C693 - C113 * C685) * C114 +
                 (C48321 * C700 - C113 * C694) * C48304) *
                    C106 +
                ((C48321 * C695 - C113 * C686) * C114 +
                 (C48321 * C701 - C113 * C696) * C48304) *
                    C107) *
                   C48595) *
                  C48593) *
             C48242 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 C1736 * C1071 + C1737 * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C386 +
               (((C113 * C388 - C48321 * C394) * C1069 +
                 (C113 * C395 - C48321 * C406) * C48633 +
                 (C1900 - C1901) * C1070 + (C1902 - C1903) * C48621 +
                 (C1904 - C1905) * C1071 + (C1906 - C1907) * C48598) *
                    C1066 +
                ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
                 (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
                 (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                    C1067 +
                ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
                 (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
                 (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                    C48585) *
                   C48595) *
                  C510 +
              ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
                 (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
                 (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                    C1066 +
                (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 +
                 C1277 * C48621 + (C1278 - C1279) * C1071 +
                 (C1280 - C1281) * C48598) *
                    C1067 +
                (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 +
                 C1285 * C48621 + (C1286 - C1287) * C1071 +
                 (C1288 - C1289) * C48598) *
                    C48585) *
                   C386 +
               (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
                 (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
                 (C48321 * C1890 - C113 * C1887) * C1071 +
                 (C48321 * C1896 - C113 * C1891) * C48598) *
                    C1066 +
                ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
                 (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
                 (C48321 * C1892 - C113 * C1888) * C1071 +
                 (C48321 * C1897 - C113 * C1893) * C48598) *
                    C1067 +
                ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
                 (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
                 (C48321 * C1894 - C113 * C1889) * C1071 +
                 (C48321 * C1898 - C113 * C1895) * C48598) *
                    C48585) *
                   C48595) *
                  C48593) *
             C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C510 +
          ((((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C386 +
           (((C48634 * C687 - C2446 * C682 + C48623 * C2315 - C2447 * C2309 +
              C48601 * C3263 - C2448 * C3260) *
                 C114 +
             (C48634 * C697 - C2446 * C688 + C48623 * C2327 - C2447 * C2316 +
              C48601 * C3269 - C2448 * C3264) *
                 C48304) *
                C1066 +
            ((C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
              C48601 * C3265 - C2448 * C3261) *
                 C114 +
             (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
              C48601 * C3270 - C2448 * C3266) *
                 C48304) *
                C1067 +
            ((C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C114 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C510 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C386 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C386 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C510 +
          (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
            (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
               C48209 * C386 +
           ((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C7771 +
            (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C7765 +
            (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C7772 +
            (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C7766 +
            (C48634 * C1890 - C2446 * C1887 + C48623 * C9620 - C2447 * C9618 +
             C48601 * C10501 - C2448 * C10500) *
                C7773 +
            (C48634 * C1896 - C2446 * C1891 + C48623 * C9624 - C2447 * C9621 +
             C48601 * C10503 - C2448 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C510 +
          ((((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C386 +
           (((C14888 * C687 - C14891 * C682 + C14889 * C2315 - C14892 * C2309 +
              C48601 * C3263 - C14893 * C3260) *
                 C114 +
             (C14888 * C697 - C14891 * C688 + C14889 * C2327 - C14892 * C2316 +
              C48601 * C3269 - C14893 * C3264) *
                 C48304) *
                C48630 +
            ((C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
              C48601 * C3265 - C14893 * C3261) *
                 C114 +
             (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
              C48601 * C3270 - C14893 * C3266) *
                 C48304) *
                C48617 +
            ((C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C114 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C386 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C510 +
          (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
            (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
               C48209 * C386 +
           ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C1069 +
            (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48633 +
            (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C1070 +
            (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48621 +
            (C14888 * C1890 - C14891 * C1887 + C14889 * C9620 - C14892 * C9618 +
             C48601 * C10501 - C14893 * C10500) *
                C1071 +
            (C14888 * C1896 - C14891 * C1891 + C14889 * C9624 - C14892 * C9621 +
             C48601 * C10503 - C14893 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C386 +
           ((C17442 * C388 - C17437 * C394 + C17443 * C933 - C17438 * C938 +
             C17444 * C2818 - C17439 * C2822 + C17445 * C3674 - C17440 * C3677 +
             C17446 * C17615 - C17441 * C17617) *
                C114 +
            (C17442 * C395 - C17437 * C406 + C17443 * C939 - C17438 * C948 +
             C17444 * C2823 - C17439 * C2830 + C17445 * C3678 - C17440 * C3683 +
             C17446 * C17618 - C17441 * C17621) *
                C48304) *
               C48209 * C48595) *
              C510 +
          (((C17442 * C264 - C17437 * C270 + C17443 * C682 - C17438 * C687 +
             C17444 * C2309 - C17439 * C2315 + C17445 * C3260 - C17440 * C3263 +
             C17446 * C10930 - C17441 * C10932) *
                C114 +
            (C17442 * C271 - C17437 * C282 + C17443 * C688 - C17438 * C697 +
             C17444 * C2316 - C17439 * C2327 + C17445 * C3264 - C17440 * C3269 +
             C17446 * C10933 - C17441 * C10936) *
                C48304) *
               C48209 * C386 +
           ((C17437 * C687 - C17442 * C682 + C17438 * C2315 - C17443 * C2309 +
             C17439 * C3263 - C17444 * C3260 + C17440 * C10932 -
             C17445 * C10930 + C17441 * C17850 - C17446 * C17849) *
                C114 +
            (C17437 * C697 - C17442 * C688 + C17438 * C2327 - C17443 * C2316 +
             C17439 * C3269 - C17444 * C3264 + C17440 * C10936 -
             C17445 * C10933 + C17441 * C17852 - C17446 * C17851) *
                C48304) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C784 +
               (((C113 * C388 - C48321 * C394) * C114 +
                 (C113 * C395 - C48321 * C406) * C48304) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
                   C48595) *
                  C48276 * C512 +
              ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
                ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
                ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
                ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
                ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
                   C784 +
               (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
                ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
                ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
                ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
                ((C48321 * C404 - C113 * C393) * C114 +
                 (C48321 * C411 - C113 * C405) * C48304) *
                    C107) *
                   C48595) *
                  C48276 * C48591) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 C1736 * C1071 + C1737 * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C784 +
               (((C113 * C388 - C48321 * C394) * C1069 +
                 (C113 * C395 - C48321 * C406) * C48633 +
                 (C1900 - C1901) * C1070 + (C1902 - C1903) * C48621 +
                 (C1904 - C1905) * C1071 + (C1906 - C1907) * C48598) *
                    C1066 +
                ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
                 (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
                 (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                    C1067 +
                ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
                 (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
                 (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                    C48585) *
                   C48595) *
                  C48276 * C512 +
              ((((C145 - C144) * C1069 + (C147 - C146) * C48633 +
                 C1274 * C1070 + C1275 * C48621 + C1276 * C1071 +
                 C1277 * C48598) *
                    C1066 +
                ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
                 C1282 * C1070 + C1283 * C48621 + C1284 * C1071 +
                 C1285 * C48598) *
                    C1067 +
                ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
                 (C297 - C298) * C1070 + (C299 - C300) * C48621 +
                 (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                    C48585) *
                   C784 +
               (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
                 (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
                 (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                    C1066 +
                ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
                 (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
                 (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                    C1067 +
                ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
                 (C48321 * C693 - C113 * C685) * C1070 +
                 (C48321 * C700 - C113 * C694) * C48621 +
                 (C48321 * C1445 - C113 * C1438) * C1071 +
                 (C48321 * C1450 - C113 * C1446) * C48598) *
                    C48585) *
                   C48595) *
                  C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C784 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C114 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C48304) *
                C1066 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C114 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C48304) *
                C1067 +
            ((C48634 * C400 - C2446 * C391 + C48623 * C944 - C2447 * C936 +
              C48601 * C2828 - C2448 * C2821) *
                 C114 +
             (C48634 * C409 - C2446 * C401 + C48623 * C951 - C2447 * C945 +
              C48601 * C2833 - C2448 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C784 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C784 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C784 +
           ((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C7771 +
            (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C7765 +
            (C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
             C48601 * C3265 - C2448 * C3261) *
                C7772 +
            (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
             C48601 * C3270 - C2448 * C3266) *
                C7766 +
            (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
             C48601 * C10072 - C2448 * C10069) *
                C7773 +
            (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
             C48601 * C10075 - C2448 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C784 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C114 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48304) *
                C48630 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C114 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48304) *
                C48617 +
            ((C14888 * C400 - C14891 * C391 + C14889 * C944 - C14892 * C936 +
              C48601 * C2828 - C14893 * C2821) *
                 C114 +
             (C14888 * C409 - C14891 * C401 + C14889 * C951 - C14892 * C945 +
              C48601 * C2833 - C14893 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C784 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C784 +
           ((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C1069 +
            (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48633 +
            (C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
             C48601 * C3265 - C14893 * C3261) *
                C1070 +
            (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
             C48601 * C3270 - C14893 * C3266) *
                C48621 +
            (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 - C14892 * C2312 +
             C48601 * C10072 - C14893 * C10069) *
                C1071 +
            (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 - C14892 * C2322 +
             C48601 * C10075 - C14893 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C784 +
           ((C17442 * C388 - C17437 * C394 + C17443 * C933 - C17438 * C938 +
             C17444 * C2818 - C17439 * C2822 + C17445 * C3674 - C17440 * C3677 +
             C17446 * C17615 - C17441 * C17617) *
                C114 +
            (C17442 * C395 - C17437 * C406 + C17443 * C939 - C17438 * C948 +
             C17444 * C2823 - C17439 * C2830 + C17445 * C3678 - C17440 * C3683 +
             C17446 * C17618 - C17441 * C17621) *
                C48304) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C17442 * C116 - C17437 * C124 + C17443 * C389 - C17438 * C396 +
             C17444 * C934 - C17439 * C940 + C17445 * C2819 - C17440 * C2824 +
             C17446 * C3675 - C17441 * C3679) *
                C114 +
            (C17442 * C125 - C17437 * C137 + C17443 * C397 - C17438 * C407 +
             C17444 * C941 - C17439 * C949 + C17445 * C2825 - C17440 * C2831 +
             C17446 * C3680 - C17441 * C3684) *
                C48304) *
               C48209 * C784 +
           ((C17437 * C396 - C17442 * C389 + C17438 * C940 - C17443 * C934 +
             C17439 * C2824 - C17444 * C2819 + C17440 * C3679 - C17445 * C3675 +
             C17441 * C17619 - C17446 * C17616) *
                C114 +
            (C17437 * C407 - C17442 * C397 + C17438 * C949 - C17443 * C941 +
             C17439 * C2831 - C17444 * C2825 + C17440 * C3684 - C17445 * C3680 +
             C17441 * C17622 - C17446 * C17620) *
                C48304) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C114 +
                 (C48321 * C136 - C113 * C123) * C48304) *
                    C103 +
                ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
                C176 * C105 + C177 * C106 + C178 * C107) *
                   C784 +
               (((C113 * C388 - C48321 * C394) * C114 +
                 (C113 * C395 - C48321 * C406) * C48304) *
                    C103 +
                ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
                ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
                ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
                ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
                   C48595) *
                  C260 +
              ((((C113 * C264 - C48321 * C270) * C114 +
                 (C113 * C271 - C48321 * C282) * C48304) *
                    C103 +
                ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
                ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
                ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
                ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
                   C784 +
               (((C48321 * C687 - C113 * C682) * C114 +
                 (C48321 * C697 - C113 * C688) * C48304) *
                    C103 +
                ((C48321 * C689 - C113 * C683) * C114 +
                 (C48321 * C698 - C113 * C690) * C48304) *
                    C104 +
                ((C48321 * C691 - C113 * C684) * C114 +
                 (C48321 * C699 - C113 * C692) * C48304) *
                    C105 +
                ((C48321 * C693 - C113 * C685) * C114 +
                 (C48321 * C700 - C113 * C694) * C48304) *
                    C106 +
                ((C48321 * C695 - C113 * C686) * C114 +
                 (C48321 * C701 - C113 * C696) * C48304) *
                    C107) *
                   C48595) *
                  C48593) *
             C48242 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C48321 * C122 - C113 * C115) * C1069 +
                 (C48321 * C136 - C113 * C123) * C48633 +
                 (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                 C1736 * C1071 + C1737 * C48598) *
                    C1066 +
                ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
                 C1270 * C1070 + C1271 * C48621 + C1272 * C1071 +
                 C1273 * C48598) *
                    C1067 +
                C1099 * C48585) *
                   C784 +
               (((C113 * C388 - C48321 * C394) * C1069 +
                 (C113 * C395 - C48321 * C406) * C48633 +
                 (C1900 - C1901) * C1070 + (C1902 - C1903) * C48621 +
                 (C1904 - C1905) * C1071 + (C1906 - C1907) * C48598) *
                    C1066 +
                ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
                 (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
                 (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                    C1067 +
                ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
                 (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
                 (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                    C48585) *
                   C48595) *
                  C260 +
              ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
                 (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
                 (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                    C1066 +
                (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 +
                 C1277 * C48621 + (C1278 - C1279) * C1071 +
                 (C1280 - C1281) * C48598) *
                    C1067 +
                (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 +
                 C1285 * C48621 + (C1286 - C1287) * C1071 +
                 (C1288 - C1289) * C48598) *
                    C48585) *
                   C784 +
               (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
                 (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
                 (C48321 * C1890 - C113 * C1887) * C1071 +
                 (C48321 * C1896 - C113 * C1891) * C48598) *
                    C1066 +
                ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
                 (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
                 (C48321 * C1892 - C113 * C1888) * C1071 +
                 (C48321 * C1897 - C113 * C1893) * C48598) *
                    C1067 +
                ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
                 (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
                 (C48321 * C1894 - C113 * C1889) * C1071 +
                 (C48321 * C1898 - C113 * C1895) * C48598) *
                    C48585) *
                   C48595) *
                  C48593) *
             C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C260 +
          ((((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C784 +
           (((C48634 * C687 - C2446 * C682 + C48623 * C2315 - C2447 * C2309 +
              C48601 * C3263 - C2448 * C3260) *
                 C114 +
             (C48634 * C697 - C2446 * C688 + C48623 * C2327 - C2447 * C2316 +
              C48601 * C3269 - C2448 * C3264) *
                 C48304) *
                C1066 +
            ((C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
              C48601 * C3265 - C2448 * C3261) *
                 C114 +
             (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
              C48601 * C3270 - C2448 * C3266) *
                 C48304) *
                C1067 +
            ((C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C114 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C260 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C784 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C784 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C260 +
          (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
            (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
               C48209 * C784 +
           ((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C7771 +
            (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C7765 +
            (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C7772 +
            (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C7766 +
            (C48634 * C1890 - C2446 * C1887 + C48623 * C9620 - C2447 * C9618 +
             C48601 * C10501 - C2448 * C10500) *
                C7773 +
            (C48634 * C1896 - C2446 * C1891 + C48623 * C9624 - C2447 * C9621 +
             C48601 * C10503 - C2448 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C260 +
          ((((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C784 +
           (((C14888 * C687 - C14891 * C682 + C14889 * C2315 - C14892 * C2309 +
              C48601 * C3263 - C14893 * C3260) *
                 C114 +
             (C14888 * C697 - C14891 * C688 + C14889 * C2327 - C14892 * C2316 +
              C48601 * C3269 - C14893 * C3264) *
                 C48304) *
                C48630 +
            ((C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
              C48601 * C3265 - C14893 * C3261) *
                 C114 +
             (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
              C48601 * C3270 - C14893 * C3266) *
                 C48304) *
                C48617 +
            ((C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C114 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C784 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C260 +
          (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
            (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
               C48209 * C784 +
           ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C1069 +
            (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48633 +
            (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C1070 +
            (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48621 +
            (C14888 * C1890 - C14891 * C1887 + C14889 * C9620 - C14892 * C9618 +
             C48601 * C10501 - C14893 * C10500) *
                C1071 +
            (C14888 * C1896 - C14891 * C1891 + C14889 * C9624 - C14892 * C9621 +
             C48601 * C10503 - C14893 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
             C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
             C17441 * C3677 - C17446 * C3674) *
                C114 +
            (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
             C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
             C17441 * C3683 - C17446 * C3678) *
                C48304) *
               C48209 * C784 +
           ((C17442 * C388 - C17437 * C394 + C17443 * C933 - C17438 * C938 +
             C17444 * C2818 - C17439 * C2822 + C17445 * C3674 - C17440 * C3677 +
             C17446 * C17615 - C17441 * C17617) *
                C114 +
            (C17442 * C395 - C17437 * C406 + C17443 * C939 - C17438 * C948 +
             C17444 * C2823 - C17439 * C2830 + C17445 * C3678 - C17440 * C3683 +
             C17446 * C17618 - C17441 * C17621) *
                C48304) *
               C48209 * C48595) *
              C260 +
          (((C17442 * C264 - C17437 * C270 + C17443 * C682 - C17438 * C687 +
             C17444 * C2309 - C17439 * C2315 + C17445 * C3260 - C17440 * C3263 +
             C17446 * C10930 - C17441 * C10932) *
                C114 +
            (C17442 * C271 - C17437 * C282 + C17443 * C688 - C17438 * C697 +
             C17444 * C2316 - C17439 * C2327 + C17445 * C3264 - C17440 * C3269 +
             C17446 * C10933 - C17441 * C10936) *
                C48304) *
               C48209 * C784 +
           ((C17437 * C687 - C17442 * C682 + C17438 * C2315 - C17443 * C2309 +
             C17439 * C3263 - C17444 * C3260 + C17440 * C10932 -
             C17445 * C10930 + C17441 * C17850 - C17446 * C17849) *
                C114 +
            (C17437 * C697 - C17442 * C688 + C17438 * C2327 - C17443 * C2316 +
             C17439 * C3269 - C17444 * C3264 + C17440 * C10936 -
             C17445 * C10933 + C17441 * C17852 - C17446 * C17851) *
                C48304) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C114 +
                (C48321 * C136 - C113 * C123) * C48304) *
                   C103 +
               ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
               C176 * C105 + C177 * C106 + C178 * C107) *
                  C930 +
              (((C113 * C388 - C48321 * C394) * C114 +
                (C113 * C395 - C48321 * C406) * C48304) *
                   C103 +
               ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
               ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
               ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
               ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
                  C931 +
              (((C48321 * C938 - C113 * C933) * C114 +
                (C48321 * C948 - C113 * C939) * C48304) *
                   C103 +
               ((C48321 * C940 - C113 * C934) * C114 +
                (C48321 * C949 - C113 * C941) * C48304) *
                   C104 +
               ((C48321 * C942 - C113 * C935) * C114 +
                (C48321 * C950 - C113 * C943) * C48304) *
                   C105 +
               ((C48321 * C944 - C113 * C936) * C114 +
                (C48321 * C951 - C113 * C945) * C48304) *
                   C106 +
               ((C48321 * C946 - C113 * C937) * C114 +
                (C48321 * C952 - C113 * C947) * C48304) *
                   C107) *
                  C932) *
             C48276 * C48242 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C48321 * C122 - C113 * C115) * C1069 +
                (C48321 * C136 - C113 * C123) * C48633 +
                (C1262 - C1263) * C1070 + (C1264 - C1265) * C48621 +
                C1736 * C1071 + C1737 * C48598) *
                   C1066 +
               ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
                C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                   C1067 +
               C1099 * C48585) *
                  C930 +
              (((C113 * C388 - C48321 * C394) * C1069 +
                (C113 * C395 - C48321 * C406) * C48633 +
                (C1900 - C1901) * C1070 + (C1902 - C1903) * C48621 +
                (C1904 - C1905) * C1071 + (C1906 - C1907) * C48598) *
                   C1066 +
               ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
                (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
                (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                   C1067 +
               ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
                (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
                (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                   C48585) *
                  C931 +
              (((C48321 * C938 - C113 * C933) * C1069 +
                (C48321 * C948 - C113 * C939) * C48633 +
                (C48321 * C2315 - C113 * C2309) * C1070 +
                (C48321 * C2327 - C113 * C2316) * C48621 +
                (C48321 * C2317 - C113 * C2310) * C1071 +
                (C48321 * C2328 - C113 * C2318) * C48598) *
                   C1066 +
               ((C48321 * C940 - C113 * C934) * C1069 +
                (C48321 * C949 - C113 * C941) * C48633 +
                (C48321 * C2319 - C113 * C2311) * C1070 +
                (C48321 * C2329 - C113 * C2320) * C48621 +
                (C48321 * C2321 - C113 * C2312) * C1071 +
                (C48321 * C2330 - C113 * C2322) * C48598) *
                   C1067 +
               ((C48321 * C942 - C113 * C935) * C1069 +
                (C48321 * C950 - C113 * C943) * C48633 +
                (C48321 * C2323 - C113 * C2313) * C1070 +
                (C48321 * C2331 - C113 * C2324) * C48621 +
                (C48321 * C2325 - C113 * C2314) * C1071 +
                (C48321 * C2332 - C113 * C2326) * C48598) *
                   C48585) *
                  C932) *
             C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C930 +
          (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C114 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C48304) *
               C1066 +
           ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
            (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
               C1067 +
           ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
            (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
               C48585) *
              C931 +
          (((C48634 * C938 - C2446 * C933 + C48623 * C2822 - C2447 * C2818 +
             C48601 * C3677 - C2448 * C3674) *
                C114 +
            (C48634 * C948 - C2446 * C939 + C48623 * C2830 - C2447 * C2823 +
             C48601 * C3683 - C2448 * C3678) *
                C48304) *
               C1066 +
           ((C48634 * C940 - C2446 * C934 + C48623 * C2824 - C2447 * C2819 +
             C48601 * C3679 - C2448 * C3675) *
                C114 +
            (C48634 * C949 - C2446 * C941 + C48623 * C2831 - C2447 * C2825 +
             C48601 * C3684 - C2448 * C3680) *
                C48304) *
               C1067 +
           ((C48634 * C942 - C2446 * C935 + C48623 * C2826 - C2447 * C2820 +
             C48601 * C3681 - C2448 * C3676) *
                C114 +
            (C48634 * C950 - C2446 * C943 + C48623 * C2832 - C2447 * C2827 +
             C48601 * C3685 - C2448 * C3682) *
                C48304) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C7771 +
            (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
            (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
            (C1906 - C1907) * C48598) *
               C48630 +
           ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
            (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
            (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
               C48617 +
           ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
            (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
            (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C7771 +
            (C48321 * C948 - C113 * C939) * C7765 +
            (C48321 * C2315 - C113 * C2309) * C7772 +
            (C48321 * C2327 - C113 * C2316) * C7766 +
            (C48321 * C2317 - C113 * C2310) * C7773 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C48630 +
           ((C48321 * C940 - C113 * C934) * C7771 +
            (C48321 * C949 - C113 * C941) * C7765 +
            (C48321 * C2319 - C113 * C2311) * C7772 +
            (C48321 * C2329 - C113 * C2320) * C7766 +
            (C48321 * C2321 - C113 * C2312) * C7773 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C48617 +
           ((C48321 * C942 - C113 * C935) * C7771 +
            (C48321 * C950 - C113 * C943) * C7765 +
            (C48321 * C2323 - C113 * C2313) * C7772 +
            (C48321 * C2331 - C113 * C2324) * C7766 +
            (C48321 * C2325 - C113 * C2314) * C7773 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C930 +
          ((C113 * C388 - C48321 * C394) * C8949 +
           (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
           (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
           (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
           (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
           (C9391 - C9392) * C8947) *
              C48209 * C931 +
          ((C48321 * C938 - C113 * C933) * C8949 +
           (C48321 * C948 - C113 * C939) * C8943 +
           (C48321 * C2315 - C113 * C2309) * C8950 +
           (C48321 * C2327 - C113 * C2316) * C8944 +
           (C48321 * C2317 - C113 * C2310) * C8951 +
           (C48321 * C2328 - C113 * C2318) * C8945 +
           (C48321 * C9620 - C113 * C9618) * C8952 +
           (C48321 * C9624 - C113 * C9621) * C8946 +
           (C48321 * C9622 - C113 * C9619) * C8953 +
           (C48321 * C9625 - C113 * C9623) * C8947) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
           (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
           C10353 * C7773 + C10354 * C48598) *
              C48209 * C930 +
          ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
            C2448 * C2818 - C48601 * C2822) *
               C7771 +
           (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
            C2448 * C2823 - C48601 * C2830) *
               C7765 +
           (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
           (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
           (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
           (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
              C48209 * C931 +
          ((C48634 * C938 - C2446 * C933 + C48623 * C2822 - C2447 * C2818 +
            C48601 * C3677 - C2448 * C3674) *
               C7771 +
           (C48634 * C948 - C2446 * C939 + C48623 * C2830 - C2447 * C2823 +
            C48601 * C3683 - C2448 * C3678) *
               C7765 +
           (C48634 * C2315 - C2446 * C2309 + C48623 * C3263 - C2447 * C3260 +
            C48601 * C10932 - C2448 * C10930) *
               C7772 +
           (C48634 * C2327 - C2446 * C2316 + C48623 * C3269 - C2447 * C3264 +
            C48601 * C10936 - C2448 * C10933) *
               C7766 +
           (C48634 * C2317 - C2446 * C2310 + C48623 * C10070 - C2447 * C10068 +
            C48601 * C10934 - C2448 * C10931) *
               C7773 +
           (C48634 * C2328 - C2446 * C2318 + C48623 * C10074 - C2447 * C10071 +
            C48601 * C10937 - C2448 * C10935) *
               C48598) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C930 +
          (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C114 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48304) *
               C48630 +
           ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
            (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
               C48617 +
           ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
            (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
               C48585) *
              C931 +
          (((C14888 * C938 - C14891 * C933 + C14889 * C2822 - C14892 * C2818 +
             C48601 * C3677 - C14893 * C3674) *
                C114 +
            (C14888 * C948 - C14891 * C939 + C14889 * C2830 - C14892 * C2823 +
             C48601 * C3683 - C14893 * C3678) *
                C48304) *
               C48630 +
           ((C14888 * C940 - C14891 * C934 + C14889 * C2824 - C14892 * C2819 +
             C48601 * C3679 - C14893 * C3675) *
                C114 +
            (C14888 * C949 - C14891 * C941 + C14889 * C2831 - C14892 * C2825 +
             C48601 * C3684 - C14893 * C3680) *
                C48304) *
               C48617 +
           ((C14888 * C942 - C14891 * C935 + C14889 * C2826 - C14892 * C2820 +
             C48601 * C3681 - C14893 * C3676) *
                C114 +
            (C14888 * C950 - C14891 * C943 + C14889 * C2832 - C14892 * C2827 +
             C48601 * C3685 - C14893 * C3682) *
                C48304) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
           (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
           C16802 * C1071 + C16803 * C48598) *
              C48209 * C930 +
          ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
            C14893 * C2818 - C48601 * C2822) *
               C1069 +
           (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
            C14893 * C2823 - C48601 * C2830) *
               C48633 +
           (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
           (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
           (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
           (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
              C48209 * C931 +
          ((C14888 * C938 - C14891 * C933 + C14889 * C2822 - C14892 * C2818 +
            C48601 * C3677 - C14893 * C3674) *
               C1069 +
           (C14888 * C948 - C14891 * C939 + C14889 * C2830 - C14892 * C2823 +
            C48601 * C3683 - C14893 * C3678) *
               C48633 +
           (C14888 * C2315 - C14891 * C2309 + C14889 * C3263 - C14892 * C3260 +
            C48601 * C10932 - C14893 * C10930) *
               C1070 +
           (C14888 * C2327 - C14891 * C2316 + C14889 * C3269 - C14892 * C3264 +
            C48601 * C10936 - C14893 * C10933) *
               C48621 +
           (C14888 * C2317 - C14891 * C2310 + C14889 * C10070 -
            C14892 * C10068 + C48601 * C10934 - C14893 * C10931) *
               C1071 +
           (C14888 * C2328 - C14891 * C2318 + C14889 * C10074 -
            C14892 * C10071 + C48601 * C10937 - C14893 * C10935) *
               C48598) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17437 * C122 - C17442 * C115 + C17438 * C394 - C17443 * C388 +
            C17439 * C938 - C17444 * C933 + C17440 * C2822 - C17445 * C2818 +
            C17441 * C3677 - C17446 * C3674) *
               C114 +
           (C17437 * C136 - C17442 * C123 + C17438 * C406 - C17443 * C395 +
            C17439 * C948 - C17444 * C939 + C17440 * C2830 - C17445 * C2823 +
            C17441 * C3683 - C17446 * C3678) *
               C48304) *
              C48209 * C930 +
          ((C17442 * C388 - C17437 * C394 + C17443 * C933 - C17438 * C938 +
            C17444 * C2818 - C17439 * C2822 + C17445 * C3674 - C17440 * C3677 +
            C17446 * C17615 - C17441 * C17617) *
               C114 +
           (C17442 * C395 - C17437 * C406 + C17443 * C939 - C17438 * C948 +
            C17444 * C2823 - C17439 * C2830 + C17445 * C3678 - C17440 * C3683 +
            C17446 * C17618 - C17441 * C17621) *
               C48304) *
              C48209 * C931 +
          ((C17437 * C938 - C17442 * C933 + C17438 * C2822 - C17443 * C2818 +
            C17439 * C3677 - C17444 * C3674 + C17440 * C17617 -
            C17445 * C17615 + C17441 * C18080 - C17446 * C18079) *
               C114 +
           (C17437 * C948 - C17442 * C939 + C17438 * C2830 - C17443 * C2823 +
            C17439 * C3683 - C17444 * C3678 + C17440 * C17621 -
            C17445 * C17618 + C17441 * C18082 - C17446 * C18081) *
               C48304) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 +
            (C6913 - C6912 + C6915 - C6914) * C7773 +
            (C6917 - C6916 + C6919 - C6918) * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + (C6337 - C6336 + C6339 - C6338) * C7773 +
            (C6341 - C6340 + C6343 - C6342) * C48598) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C7771 +
            (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
            C6359 * C7766 + (C6336 - C6337 + C6338 - C6339) * C7773 +
            (C6340 - C6341 + C6342 - C6343) * C48598) *
               C48543 +
           ((C4902 - C4901 + C4904 - C4903) * C7771 +
            (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
            C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
            (C6352 - C6353 + C6354 - C6355) * C48598) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C4933 * C7771 + C4934 * C7765 + C6120 * C7772 + C6121 * C7766 +
            (C6349 - C6348 + C6351 - C6350) * C7773 +
            (C6353 - C6352 + C6355 - C6354) * C48598) *
               C48543 +
           (C4935 * C7771 + C4936 * C7765 +
            (C5090 - C5089 + C5092 - C5091) * C7772 +
            (C5094 - C5093 + C5096 - C5095) * C7766 +
            (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                C7773 +
            (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                C48598) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C114 +
            (C4898 - C4897 + C4900 - C4899) * C48304) *
               C3786 +
           ((C4902 - C4901 + C4904 - C4903) * C114 +
            (C4906 - C4905 + C4908 - C4907) * C48304) *
               C3787 +
           ((C4910 - C4909 + C4912 - C4911) * C114 +
            (C4914 - C4913 + C4916 - C4915) * C48304) *
               C3788 +
           ((C4917 - C4918 + C4919 - C4920) * C114 +
            (C4921 - C4922 + C4923 - C4924) * C48304) *
               C48602) *
              C48293 * C48276 * C111 +
          (C4941 * C3786 + C4942 * C3787 +
           ((C4918 - C4917 + C4920 - C4919) * C114 +
            (C4922 - C4921 + C4924 - C4923) * C48304) *
               C3788 +
           ((C48566 * C132 - C4890 * C120 + C48408 * C404 - C4891 * C393) *
                C114 +
            (C48566 * C141 - C4890 * C133 + C48408 * C411 - C4891 * C405) *
                C48304) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C114 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48304) *
               C48543 +
           ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C114 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48304) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
             C19830) *
                C114 +
            (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
             C19838) *
                C48304) *
               C48543 +
           ((C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
             C19847) *
                C114 +
            (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
             C19855) *
                C48304) *
               C48219) *
              C48293 * C48276 * C111 +
          (((C19841 - C19840 + C19843 - C19842 + C19845 - C19844 + C19847 -
             C19846) *
                C114 +
            (C19849 - C19848 + C19851 - C19850 + C19853 - C19852 + C19855 -
             C19854) *
                C48304) *
               C48543 +
           ((C19815 * C128 - C19819 * C118 + C19816 * C400 - C19820 * C391 +
             C19817 * C944 - C19821 * C936 + C48614 * C2828 - C19822 * C2821) *
                C114 +
            (C19815 * C139 - C19819 * C129 + C19816 * C409 - C19820 * C401 +
             C19817 * C951 - C19821 * C945 + C48614 * C2833 - C19822 * C2829) *
                C48304) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C4890 * C1245 - C48566 * C1249 + C4891 * C1887 - C48408 * C1890) *
                 C7773 +
             (C4890 * C1250 - C48566 * C1257 + C4891 * C1891 - C48408 * C1896) *
                 C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C48293 * C260 +
           ((C6356 * C7771 + C6357 * C7765 + C12387 * C7772 + C12388 * C7766 +
             (C12380 - C12379 + C12382 - C12381) * C7773 +
             (C12384 - C12383 + C12386 - C12385) * C48598) *
                C48543 +
            (C6120 * C7771 + C6121 * C7765 +
             (C6349 - C6348 + C6351 - C6350) * C7772 +
             (C6353 - C6352 + C6355 - C6354) * C7766 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C7773 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C48293 * C260 +
           (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C48293 * C260 +
           (((C5074 - C5073 + C5076 - C5075) * C114 +
             (C5078 - C5077 + C5080 - C5079) * C48304) *
                C3786 +
            ((C5082 - C5081 + C5084 - C5083) * C114 +
             (C5086 - C5085 + C5088 - C5087) * C48304) *
                C3787 +
            ((C5090 - C5089 + C5092 - C5091) * C114 +
             (C5094 - C5093 + C5096 - C5095) * C48304) *
                C3788 +
            ((C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                 C114 +
             (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C48293 * C260 +
           (((C19819 * C264 - C19815 * C270 + C19820 * C682 - C19816 * C687 +
              C19821 * C2309 - C19817 * C2315 + C19822 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C19819 * C271 - C19815 * C282 + C19820 * C688 - C19816 * C697 +
              C19821 * C2316 - C19817 * C2327 + C19822 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C48543 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C114 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C114 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48304) *
                C48543 +
            ((C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
              C19847) *
                 C114 +
             (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
              C19855) *
                 C48304) *
                C48219) *
               C48293 * C260 +
           (((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
              C19992) *
                 C114 +
             (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
              C20000) *
                 C48304) *
                C48543 +
            ((C19815 * C274 - C19819 * C266 + C19816 * C691 - C19820 * C684 +
              C19817 * C2323 - C19821 * C2313 + C48614 * C3267 -
              C19822 * C3262) *
                 C114 +
             (C19815 * C284 - C19819 * C275 + C19816 * C699 - C19820 * C692 +
              C19817 * C2331 - C19821 * C2324 + C48614 * C3271 -
              C19822 * C3268) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C4890 * C1435 - C48566 * C1439 + C4891 * C2310 - C48408 * C2317) *
                 C7773 +
             (C4890 * C1440 - C48566 * C1447 + C4891 * C2318 - C48408 * C2328) *
                 C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C7771 +
             (C5232 - C5231 + C5234 - C5233) * C7765 +
             (C6557 - C6556 + C6559 - C6558) * C7772 +
             (C6561 - C6560 + C6563 - C6562) * C7766 +
             (C12586 - C12585 + C12588 - C12587) * C7773 +
             (C12590 - C12589 + C12592 - C12591) * C48598) *
                C48543 +
            ((C5236 - C5235 + C5238 - C5237) * C7771 +
             (C5240 - C5239 + C5242 - C5241) * C7765 +
             (C6565 - C6564 + C6567 - C6566) * C7772 +
             (C6569 - C6568 + C6571 - C6570) * C7766 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C7773 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C114 +
             (C5232 - C5231 + C5234 - C5233) * C48304) *
                C3786 +
            ((C5236 - C5235 + C5238 - C5237) * C114 +
             (C5240 - C5239 + C5242 - C5241) * C48304) *
                C3787 +
            ((C5244 - C5243 + C5246 - C5245) * C114 +
             (C5248 - C5247 + C5250 - C5249) * C48304) *
                C3788 +
            ((C48566 * C402 - C4890 * C392 + C48408 * C946 - C4891 * C937) *
                 C114 +
             (C48566 * C410 - C4890 * C403 + C48408 * C952 - C4891 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C386 +
           (((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
              C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
              C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C48543 +
            ((C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
              C20139) *
                 C114 +
             (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
              C20147) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C114 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48304) *
                C48543 +
            ((C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
              C19847) *
                 C114 +
             (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
              C19855) *
                 C48304) *
                C48219) *
               C386 +
           (((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
              C20138) *
                 C114 +
             (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
              C20146) *
                 C48304) *
                C48543 +
            ((C19815 * C398 - C19819 * C390 + C19816 * C942 - C19820 * C935 +
              C19817 * C2826 - C19821 * C2820 + C48614 * C3681 -
              C19822 * C3676) *
                 C114 +
             (C19815 * C408 - C19819 * C399 + C19816 * C950 - C19820 * C943 +
              C19817 * C2832 - C19821 * C2827 + C48614 * C3685 -
              C19822 * C3682) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C4890 * C1245 - C48566 * C1249 + C4891 * C1887 - C48408 * C1890) *
                 C7773 +
             (C4890 * C1250 - C48566 * C1257 + C4891 * C1891 - C48408 * C1896) *
                 C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C48293 * C510 +
           ((C6356 * C7771 + C6357 * C7765 + C12387 * C7772 + C12388 * C7766 +
             (C12380 - C12379 + C12382 - C12381) * C7773 +
             (C12384 - C12383 + C12386 - C12385) * C48598) *
                C48543 +
            (C6120 * C7771 + C6121 * C7765 +
             (C6349 - C6348 + C6351 - C6350) * C7772 +
             (C6353 - C6352 + C6355 - C6354) * C7766 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C7773 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C48293 * C510 +
           (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C48293 * C510 +
           (((C5074 - C5073 + C5076 - C5075) * C114 +
             (C5078 - C5077 + C5080 - C5079) * C48304) *
                C3786 +
            ((C5082 - C5081 + C5084 - C5083) * C114 +
             (C5086 - C5085 + C5088 - C5087) * C48304) *
                C3787 +
            ((C5090 - C5089 + C5092 - C5091) * C114 +
             (C5094 - C5093 + C5096 - C5095) * C48304) *
                C3788 +
            ((C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                 C114 +
             (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C48293 * C510 +
           (((C19819 * C264 - C19815 * C270 + C19820 * C682 - C19816 * C687 +
              C19821 * C2309 - C19817 * C2315 + C19822 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C19819 * C271 - C19815 * C282 + C19820 * C688 - C19816 * C697 +
              C19821 * C2316 - C19817 * C2327 + C19822 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C48543 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C114 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C114 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48304) *
                C48543 +
            ((C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
              C19847) *
                 C114 +
             (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
              C19855) *
                 C48304) *
                C48219) *
               C48293 * C510 +
           (((C19987 - C19986 + C19989 - C19988 + C19991 - C19990 + C19993 -
              C19992) *
                 C114 +
             (C19995 - C19994 + C19997 - C19996 + C19999 - C19998 + C20001 -
              C20000) *
                 C48304) *
                C48543 +
            ((C19815 * C274 - C19819 * C266 + C19816 * C691 - C19820 * C684 +
              C19817 * C2323 - C19821 * C2313 + C48614 * C3267 -
              C19822 * C3262) *
                 C114 +
             (C19815 * C284 - C19819 * C275 + C19816 * C699 - C19820 * C692 +
              C19817 * C2331 - C19821 * C2324 + C48614 * C3271 -
              C19822 * C3268) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
            C12946 * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
               C48219) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C7771 +
            (C6325 - C6324 + C6327 - C6326) * C7765 +
            (C6912 - C6913 + C6914 - C6915) * C7772 +
            (C6916 - C6917 + C6918 - C6919) * C7766 +
            (C12937 - C12938 + C12939 - C12940) * C7773 +
            (C12941 - C12942 + C12943 - C12944) * C48598) *
               C48543 +
           (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
            (C12379 - C12380 + C12381 - C12382) * C7773 +
            (C12383 - C12384 + C12385 - C12386) * C48598) *
               C48219) *
              C48293 * C577 +
          ((C12945 * C7771 + C12946 * C7765 +
            (C12938 - C12937 + C12940 - C12939) * C7772 +
            (C12942 - C12941 + C12944 - C12943) * C7766 +
            (C48566 * C1726 - C4890 * C1723 + C48408 * C9136 - C4891 * C9134) *
                C7773 +
            (C48566 * C1732 - C4890 * C1727 + C48408 * C9140 - C4891 * C9137) *
                C48598) *
               C48543 +
           (C12387 * C7771 + C12388 * C7765 +
            (C12380 - C12379 + C12382 - C12381) * C7772 +
            (C12384 - C12383 + C12386 - C12385) * C7766 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C7773 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48598) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C48293 * C576 +
          (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                C114 +
            (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                C48304) *
               C3786 +
           ((C5073 - C5074 + C5075 - C5076) * C114 +
            (C5077 - C5078 + C5079 - C5080) * C48304) *
               C3787 +
           ((C5081 - C5082 + C5083 - C5084) * C114 +
            (C5085 - C5086 + C5087 - C5088) * C48304) *
               C3788 +
           ((C5089 - C5090 + C5091 - C5092) * C114 +
            (C5093 - C5094 + C5095 - C5096) * C48304) *
               C48602) *
              C48293 * C577 +
          (((C48566 * C585 - C4890 * C580 + C48408 * C1439 - C4891 * C1435) *
                C114 +
            (C48566 * C595 - C4890 * C586 + C48408 * C1447 - C4891 * C1440) *
                C48304) *
               C3786 +
           ((C48566 * C587 - C4890 * C581 + C48408 * C1441 - C4891 * C1436) *
                C114 +
            (C48566 * C596 - C4890 * C588 + C48408 * C1448 - C4891 * C1442) *
                C48304) *
               C3787 +
           ((C48566 * C589 - C4890 * C582 + C48408 * C1443 - C4891 * C1437) *
                C114 +
            (C48566 * C597 - C4890 * C590 + C48408 * C1449 - C4891 * C1444) *
                C48304) *
               C3788 +
           ((C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                C114 +
            (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                C48304) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C114 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48304) *
               C48543 +
           ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C114 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48304) *
               C48219) *
              C48293 * C576 +
          (((C19819 * C264 - C19815 * C270 + C19820 * C682 - C19816 * C687 +
             C19821 * C2309 - C19817 * C2315 + C19822 * C3260 -
             C48614 * C3263) *
                C114 +
            (C19819 * C271 - C19815 * C282 + C19820 * C688 - C19816 * C697 +
             C19821 * C2316 - C19817 * C2327 + C19822 * C3264 -
             C48614 * C3269) *
                C48304) *
               C48543 +
           ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
             C19993) *
                C114 +
            (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
             C20001) *
                C48304) *
               C48219) *
              C48293 * C577 +
          (((C19815 * C585 - C19819 * C580 + C19816 * C1439 - C19820 * C1435 +
             C19817 * C2317 - C19821 * C2310 + C48614 * C10070 -
             C19822 * C10068) *
                C114 +
            (C19815 * C595 - C19819 * C586 + C19816 * C1447 - C19820 * C1440 +
             C19817 * C2328 - C19821 * C2318 + C48614 * C10074 -
             C19822 * C10071) *
                C48304) *
               C48543 +
           ((C19815 * C587 - C19819 * C581 + C19816 * C1441 - C19820 * C1436 +
             C19817 * C2321 - C19821 * C2312 + C48614 * C10072 -
             C19822 * C10069) *
                C114 +
            (C19815 * C596 - C19819 * C588 + C19816 * C1448 - C19820 * C1442 +
             C19817 * C2330 - C19821 * C2322 + C48614 * C10075 -
             C19822 * C10073) *
                C48304) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C12937 - C12938 + C12939 - C12940) * C7773 +
             (C12941 - C12942 + C12943 - C12944) * C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C7771 +
             (C7119 - C7118 + C7121 - C7120) * C7765 +
             (C13142 - C13141 + C13144 - C13143) * C7772 +
             (C13146 - C13145 + C13148 - C13147) * C7766 +
             (C48566 * C1890 - C4890 * C1887 + C48408 * C9620 - C4891 * C9618) *
                 C7773 +
             (C48566 * C1896 - C4890 * C1891 + C48408 * C9624 - C4891 * C9621) *
                 C48598) *
                C48543 +
            ((C6557 - C6556 + C6559 - C6558) * C7771 +
             (C6561 - C6560 + C6563 - C6562) * C7765 +
             (C12586 - C12585 + C12588 - C12587) * C7772 +
             (C12590 - C12589 + C12592 - C12591) * C7766 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C7773 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C510 +
          ((((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C386 +
           (((C48566 * C687 - C4890 * C682 + C48408 * C2315 - C4891 * C2309) *
                 C114 +
             (C48566 * C697 - C4890 * C688 + C48408 * C2327 - C4891 * C2316) *
                 C48304) *
                C3786 +
            ((C48566 * C689 - C4890 * C683 + C48408 * C2319 - C4891 * C2311) *
                 C114 +
             (C48566 * C698 - C4890 * C690 + C48408 * C2329 - C4891 * C2320) *
                 C48304) *
                C3787 +
            ((C48566 * C691 - C4890 * C684 + C48408 * C2323 - C4891 * C2313) *
                 C114 +
             (C48566 * C699 - C4890 * C692 + C48408 * C2331 - C4891 * C2324) *
                 C48304) *
                C3788 +
            ((C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C114 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C386 +
           (((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
              C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
              C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C48543 +
            ((C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
              C20139) *
                 C114 +
             (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
              C20147) *
                 C48304) *
                C48219) *
               C48595) *
              C510 +
          ((((C19819 * C264 - C19815 * C270 + C19820 * C682 - C19816 * C687 +
              C19821 * C2309 - C19817 * C2315 + C19822 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C19819 * C271 - C19815 * C282 + C19820 * C688 - C19816 * C697 +
              C19821 * C2316 - C19817 * C2327 + C19822 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C48543 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C114 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48304) *
                C48219) *
               C386 +
           (((C19815 * C687 - C19819 * C682 + C19816 * C2315 - C19820 * C2309 +
              C19817 * C3263 - C19821 * C3260 + C48614 * C10932 -
              C19822 * C10930) *
                 C114 +
             (C19815 * C697 - C19819 * C688 + C19816 * C2327 - C19820 * C2316 +
              C19817 * C3269 - C19821 * C3264 + C48614 * C10936 -
              C19822 * C10933) *
                 C48304) *
                C48543 +
            ((C19815 * C689 - C19819 * C683 + C19816 * C2319 - C19820 * C2311 +
              C19817 * C3265 - C19821 * C3261 + C48614 * C17530 -
              C19822 * C17529) *
                 C114 +
             (C19815 * C698 - C19819 * C690 + C19816 * C2329 - C19820 * C2320 +
              C19817 * C3270 - C19821 * C3266 + C48614 * C17532 -
              C19822 * C17531) *
                 C48304) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C7771 +
             (C5232 - C5231 + C5234 - C5233) * C7765 +
             (C6557 - C6556 + C6559 - C6558) * C7772 +
             (C6561 - C6560 + C6563 - C6562) * C7766 +
             (C12586 - C12585 + C12588 - C12587) * C7773 +
             (C12590 - C12589 + C12592 - C12591) * C48598) *
                C48543 +
            ((C5236 - C5235 + C5238 - C5237) * C7771 +
             (C5240 - C5239 + C5242 - C5241) * C7765 +
             (C6565 - C6564 + C6567 - C6566) * C7772 +
             (C6569 - C6568 + C6571 - C6570) * C7766 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C7773 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C114 +
             (C5232 - C5231 + C5234 - C5233) * C48304) *
                C3786 +
            ((C5236 - C5235 + C5238 - C5237) * C114 +
             (C5240 - C5239 + C5242 - C5241) * C48304) *
                C3787 +
            ((C5244 - C5243 + C5246 - C5245) * C114 +
             (C5248 - C5247 + C5250 - C5249) * C48304) *
                C3788 +
            ((C48566 * C402 - C4890 * C392 + C48408 * C946 - C4891 * C937) *
                 C114 +
             (C48566 * C410 - C4890 * C403 + C48408 * C952 - C4891 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C784 +
           (((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
              C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
              C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C48543 +
            ((C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
              C20139) *
                 C114 +
             (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
              C20147) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C19825 - C19824 + C19827 - C19826 + C19829 - C19828 + C19831 -
              C19830) *
                 C114 +
             (C19833 - C19832 + C19835 - C19834 + C19837 - C19836 + C19839 -
              C19838) *
                 C48304) *
                C48543 +
            ((C19840 - C19841 + C19842 - C19843 + C19844 - C19845 + C19846 -
              C19847) *
                 C114 +
             (C19848 - C19849 + C19850 - C19851 + C19852 - C19853 + C19854 -
              C19855) *
                 C48304) *
                C48219) *
               C784 +
           (((C20133 - C20132 + C20135 - C20134 + C20137 - C20136 + C20139 -
              C20138) *
                 C114 +
             (C20141 - C20140 + C20143 - C20142 + C20145 - C20144 + C20147 -
              C20146) *
                 C48304) *
                C48543 +
            ((C19815 * C398 - C19819 * C390 + C19816 * C942 - C19820 * C935 +
              C19817 * C2826 - C19821 * C2820 + C48614 * C3681 -
              C19822 * C3676) *
                 C114 +
             (C19815 * C408 - C19819 * C399 + C19816 * C950 - C19820 * C943 +
              C19817 * C2832 - C19821 * C2827 + C48614 * C3685 -
              C19822 * C3682) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C12937 - C12938 + C12939 - C12940) * C7773 +
             (C12941 - C12942 + C12943 - C12944) * C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C7771 +
             (C7119 - C7118 + C7121 - C7120) * C7765 +
             (C13142 - C13141 + C13144 - C13143) * C7772 +
             (C13146 - C13145 + C13148 - C13147) * C7766 +
             (C48566 * C1890 - C4890 * C1887 + C48408 * C9620 - C4891 * C9618) *
                 C7773 +
             (C48566 * C1896 - C4890 * C1891 + C48408 * C9624 - C4891 * C9621) *
                 C48598) *
                C48543 +
            ((C6557 - C6556 + C6559 - C6558) * C7771 +
             (C6561 - C6560 + C6563 - C6562) * C7765 +
             (C12586 - C12585 + C12588 - C12587) * C7772 +
             (C12590 - C12589 + C12592 - C12591) * C7766 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C7773 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C260 +
          ((((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C784 +
           (((C48566 * C687 - C4890 * C682 + C48408 * C2315 - C4891 * C2309) *
                 C114 +
             (C48566 * C697 - C4890 * C688 + C48408 * C2327 - C4891 * C2316) *
                 C48304) *
                C3786 +
            ((C48566 * C689 - C4890 * C683 + C48408 * C2319 - C4891 * C2311) *
                 C114 +
             (C48566 * C698 - C4890 * C690 + C48408 * C2329 - C4891 * C2320) *
                 C48304) *
                C3787 +
            ((C48566 * C691 - C4890 * C684 + C48408 * C2323 - C4891 * C2313) *
                 C114 +
             (C48566 * C699 - C4890 * C692 + C48408 * C2331 - C4891 * C2324) *
                 C48304) *
                C3788 +
            ((C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C114 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
              C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                 C114 +
             (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
              C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                 C48304) *
                C48543 +
            ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
              C19831) *
                 C114 +
             (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
              C19839) *
                 C48304) *
                C48219) *
               C784 +
           (((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
              C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
              C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C48543 +
            ((C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
              C20139) *
                 C114 +
             (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
              C20147) *
                 C48304) *
                C48219) *
               C48595) *
              C260 +
          ((((C19819 * C264 - C19815 * C270 + C19820 * C682 - C19816 * C687 +
              C19821 * C2309 - C19817 * C2315 + C19822 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C19819 * C271 - C19815 * C282 + C19820 * C688 - C19816 * C697 +
              C19821 * C2316 - C19817 * C2327 + C19822 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C48543 +
            ((C19986 - C19987 + C19988 - C19989 + C19990 - C19991 + C19992 -
              C19993) *
                 C114 +
             (C19994 - C19995 + C19996 - C19997 + C19998 - C19999 + C20000 -
              C20001) *
                 C48304) *
                C48219) *
               C784 +
           (((C19815 * C687 - C19819 * C682 + C19816 * C2315 - C19820 * C2309 +
              C19817 * C3263 - C19821 * C3260 + C48614 * C10932 -
              C19822 * C10930) *
                 C114 +
             (C19815 * C697 - C19819 * C688 + C19816 * C2327 - C19820 * C2316 +
              C19817 * C3269 - C19821 * C3264 + C48614 * C10936 -
              C19822 * C10933) *
                 C48304) *
                C48543 +
            ((C19815 * C689 - C19819 * C683 + C19816 * C2319 - C19820 * C2311 +
              C19817 * C3265 - C19821 * C3261 + C48614 * C17530 -
              C19822 * C17529) *
                 C114 +
             (C19815 * C698 - C19819 * C690 + C19816 * C2329 - C19820 * C2320 +
              C19817 * C3270 - C19821 * C3266 + C48614 * C17532 -
              C19822 * C17531) *
                 C48304) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
            C12946 * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
               C48219) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C7771 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C7765 +
            (C7114 - C7115 + C7116 - C7117) * C7772 +
            (C7118 - C7119 + C7120 - C7121) * C7766 +
            (C13141 - C13142 + C13143 - C13144) * C7773 +
            (C13145 - C13146 + C13147 - C13148) * C48598) *
               C48543 +
           ((C5227 - C5228 + C5229 - C5230) * C7771 +
            (C5231 - C5232 + C5233 - C5234) * C7765 +
            (C6556 - C6557 + C6558 - C6559) * C7772 +
            (C6560 - C6561 + C6562 - C6563) * C7766 +
            (C12585 - C12586 + C12587 - C12588) * C7773 +
            (C12589 - C12590 + C12591 - C12592) * C48598) *
               C48219) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C7771 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C7765 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C7772 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C7766 +
            (C48566 * C2317 - C4890 * C2310 + C48408 * C10070 -
             C4891 * C10068) *
                C7773 +
            (C48566 * C2328 - C4890 * C2318 + C48408 * C10074 -
             C4891 * C10071) *
                C48598) *
               C48543 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C7771 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C7765 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C7772 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C7766 +
            (C48566 * C2321 - C4890 * C2312 + C48408 * C10072 -
             C4891 * C10069) *
                C7773 +
            (C48566 * C2330 - C4890 * C2322 + C48408 * C10075 -
             C4891 * C10073) *
                C48598) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C114 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C48304) *
               C3786 +
           ((C5227 - C5228 + C5229 - C5230) * C114 +
            (C5231 - C5232 + C5233 - C5234) * C48304) *
               C3787 +
           ((C5235 - C5236 + C5237 - C5238) * C114 +
            (C5239 - C5240 + C5241 - C5242) * C48304) *
               C3788 +
           ((C5243 - C5244 + C5245 - C5246) * C114 +
            (C5247 - C5248 + C5249 - C5250) * C48304) *
               C48602) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C114 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C48304) *
               C3786 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C114 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C48304) *
               C3787 +
           ((C48566 * C942 - C4890 * C935 + C48408 * C2826 - C4891 * C2820) *
                C114 +
            (C48566 * C950 - C4890 * C943 + C48408 * C2832 - C4891 * C2827) *
                C48304) *
               C3788 +
           ((C48566 * C944 - C4890 * C936 + C48408 * C2828 - C4891 * C2821) *
                C114 +
            (C48566 * C951 - C4890 * C945 + C48408 * C2833 - C4891 * C2829) *
                C48304) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19815 * C122 - C19819 * C115 + C19816 * C394 - C19820 * C388 +
             C19817 * C938 - C19821 * C933 + C48614 * C2822 - C19822 * C2818) *
                C114 +
            (C19815 * C136 - C19819 * C123 + C19816 * C406 - C19820 * C395 +
             C19817 * C948 - C19821 * C939 + C48614 * C2830 - C19822 * C2823) *
                C48304) *
               C48543 +
           ((C19824 - C19825 + C19826 - C19827 + C19828 - C19829 + C19830 -
             C19831) *
                C114 +
            (C19832 - C19833 + C19834 - C19835 + C19836 - C19837 + C19838 -
             C19839) *
                C48304) *
               C48219) *
              C930 +
          (((C19819 * C388 - C19815 * C394 + C19820 * C933 - C19816 * C938 +
             C19821 * C2818 - C19817 * C2822 + C19822 * C3674 -
             C48614 * C3677) *
                C114 +
            (C19819 * C395 - C19815 * C406 + C19820 * C939 - C19816 * C948 +
             C19821 * C2823 - C19817 * C2830 + C19822 * C3678 -
             C48614 * C3683) *
                C48304) *
               C48543 +
           ((C20132 - C20133 + C20134 - C20135 + C20136 - C20137 + C20138 -
             C20139) *
                C114 +
            (C20140 - C20141 + C20142 - C20143 + C20144 - C20145 + C20146 -
             C20147) *
                C48304) *
               C48219) *
              C931 +
          (((C19815 * C938 - C19819 * C933 + C19816 * C2822 - C19820 * C2818 +
             C19817 * C3677 - C19821 * C3674 + C48614 * C17617 -
             C19822 * C17615) *
                C114 +
            (C19815 * C948 - C19819 * C939 + C19816 * C2830 - C19820 * C2823 +
             C19817 * C3683 - C19821 * C3678 + C48614 * C17621 -
             C19822 * C17618) *
                C48304) *
               C48543 +
           ((C19815 * C940 - C19819 * C934 + C19816 * C2824 - C19820 * C2819 +
             C19817 * C3679 - C19821 * C3675 + C48614 * C17619 -
             C19822 * C17616) *
                C114 +
            (C19815 * C949 - C19819 * C941 + C19816 * C2831 - C19820 * C2825 +
             C19817 * C3684 - C19821 * C3680 + C48614 * C17622 -
             C19822 * C17620) *
                C48304) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 +
            (C48321 * C270 - C113 * C264) * C1070 +
            (C48321 * C282 - C113 * C271) * C48621 +
            (C48321 * C585 - C113 * C580) * C1071 +
            (C48321 * C595 - C113 * C586) * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
            (C290 - C289) * C1070 + (C292 - C291) * C48621 +
            (C1073 - C1074) * C1071 + (C1075 - C1076) * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C1069 + (C147 - C146) * C48633 +
            (C289 - C290) * C1070 + (C291 - C292) * C48621 +
            (C1074 - C1073) * C1071 + (C1076 - C1075) * C48598) *
               C1066 +
           ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
            (C293 - C294) * C1070 + (C295 - C296) * C48621 +
            (C1082 - C1081) * C1071 + (C1084 - C1083) * C48598) *
               C1067 +
           ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
            (C297 - C298) * C1070 + (C299 - C300) * C48621 +
            (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C1099 * C1066 +
           (C166 * C1069 + C167 * C48633 + (C298 - C297) * C1070 +
            (C300 - C299) * C48621 + (C1086 - C1085) * C1071 +
            (C1088 - C1087) * C48598) *
               C1067 +
           (C168 * C1069 + C169 * C48633 + (C302 - C301) * C1070 +
            (C304 - C303) * C48621 + (C48321 * C593 - C113 * C584) * C1071 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
              C48293 * C48276 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C48304) * C106 +
           ((C48321 * C134 - C113 * C121) * C114 +
            (C48321 * C142 - C113 * C135) * C48304) *
               C107) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
            C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
               C48630 +
           ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
            C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
               C48617 +
           ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
            C3940 * C7766 + (C1085 - C1086) * C7773 +
            (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C7785 * C48630 +
           (C166 * C7771 + C167 * C7765 + C3799 * C7772 + C3800 * C7766 +
            (C1086 - C1085) * C7773 + (C1088 - C1087) * C48598) *
               C48617 +
           (C168 * C7771 + C169 * C7765 + (C302 - C301) * C7772 +
            (C304 - C303) * C7766 + (C48321 * C593 - C113 * C584) * C7773 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
           (C48321 * C1726 - C113 * C1723) * C8953 +
           (C48321 * C1732 - C113 * C1727) * C8947) *
              C48209 * C48293 * C48276 * C110 +
          ((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
           C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
           (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
           (C113 * C1724 - C48321 * C1728) * C8953 +
           (C113 * C1729 - C48321 * C1733) * C8947) *
              C48209 * C48293 * C48276 * C111 +
          (C164 * C8949 + C165 * C8943 + C1079 * C8950 + C1080 * C8944 +
           C1092 * C8951 + C1093 * C8945 + (C1287 - C1286) * C8952 +
           (C1289 - C1288) * C8946 + (C48321 * C1730 - C113 * C1725) * C8953 +
           (C48321 * C1734 - C113 * C1731) * C8947) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C48293 * C48276 * C110 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
               C48630 +
           ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
            (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
               C48617 +
           ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
            (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
               C48585) *
              C48293 * C48276 * C111 +
          (C14943 * C48630 +
           ((C14920 - C14919 + C14922 - C14921 + C14924 - C14923) * C114 +
            (C14926 - C14925 + C14928 - C14927 + C14930 - C14929) * C48304) *
               C48617 +
           ((C14888 * C130 - C14891 * C119 + C14889 * C402 - C14892 * C392 +
             C48601 * C946 - C14893 * C937) *
                C114 +
            (C14888 * C140 - C14891 * C131 + C14889 * C410 - C14892 * C403 +
             C48601 * C952 - C14893 * C947) *
                C48304) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C14888 * C270 - C14891 * C264 + C14889 * C687 - C14892 * C682 +
            C48601 * C2315 - C14893 * C2309) *
               C1070 +
           (C14888 * C282 - C14891 * C271 + C14889 * C697 - C14892 * C688 +
            C48601 * C2327 - C14893 * C2316) *
               C48621 +
           (C14888 * C585 - C14891 * C580 + C14889 * C1439 - C14892 * C1435 +
            C48601 * C2317 - C14893 * C2310) *
               C1071 +
           (C14888 * C595 - C14891 * C586 + C14889 * C1447 - C14892 * C1440 +
            C48601 * C2328 - C14893 * C2318) *
               C48598) *
              C48209 * C48293 * C48276 * C110 +
          ((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
           (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
           (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
           (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
           (C14891 * C581 - C14888 * C587 + C14892 * C1436 - C14889 * C1441 +
            C14893 * C2312 - C48601 * C2321) *
               C1071 +
           (C14891 * C588 - C14888 * C596 + C14892 * C1442 - C14889 * C1448 +
            C14893 * C2322 - C48601 * C2330) *
               C48598) *
              C48209 * C48293 * C48276 * C111 +
          (C14939 * C1069 + C14940 * C48633 +
           (C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C1070 +
           (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48621 +
           (C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
            C48601 * C2325 - C14893 * C2314) *
               C1071 +
           (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
            C48601 * C2332 - C14893 * C2326) *
               C48598) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C260 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C260 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C260 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C48293 * C260 +
           (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C48293 * C260 +
           (((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C114 +
             (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48304) *
                C48630 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C114 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48304) *
                C48617 +
            ((C14888 * C276 - C14891 * C267 + C14889 * C693 - C14892 * C685 +
              C48601 * C2645 - C14893 * C2644) *
                 C114 +
             (C14888 * C285 - C14891 * C277 + C14889 * C700 - C14892 * C694 +
              C48601 * C2647 - C14893 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C48293 * C260 +
           ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C14891 * C1245 - C14888 * C1249 + C14892 * C1887 - C14889 * C1890 +
             C14893 * C9618 - C48601 * C9620) *
                C1071 +
            (C14891 * C1250 - C14888 * C1257 + C14892 * C1891 - C14889 * C1896 +
             C14893 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C48293 * C260 +
           ((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C1069 +
            (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48633 +
            (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C1070 +
            (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48621 +
            (C14888 * C1251 - C14891 * C1246 + C14889 * C1892 - C14892 * C1888 +
             C48601 * C9883 - C14893 * C9882) *
                C1071 +
            (C14888 * C1258 - C14891 * C1252 + C14889 * C1897 - C14892 * C1893 +
             C48601 * C9885 - C14893 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 +
             (C113 * C682 - C48321 * C687) * C1070 +
             (C113 * C688 - C48321 * C697) * C48621 +
             (C113 * C1435 - C48321 * C1439) * C1071 +
             (C113 * C1440 - C48321 * C1447) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C113 * C1887 - C48321 * C1890) * C8952 +
            (C113 * C1891 - C48321 * C1896) * C8946 +
            (C113 * C9134 - C48321 * C9136) * C8953 +
            (C113 * C9137 - C48321 * C9140) * C8947) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C386 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C386 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C114 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48304) *
                C48630 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C114 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48304) *
                C48617 +
            ((C14888 * C400 - C14891 * C391 + C14889 * C944 - C14892 * C936 +
              C48601 * C2828 - C14893 * C2821) *
                 C114 +
             (C14888 * C409 - C14891 * C401 + C14889 * C951 - C14892 * C945 +
              C48601 * C2833 - C14893 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C386 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C14891 * C682 - C14888 * C687 + C14892 * C2309 - C14889 * C2315 +
             C14893 * C3260 - C48601 * C3263) *
                C1070 +
            (C14891 * C688 - C14888 * C697 + C14892 * C2316 - C14889 * C2327 +
             C14893 * C3264 - C48601 * C3269) *
                C48621 +
            (C14891 * C1435 - C14888 * C1439 + C14892 * C2310 - C14889 * C2317 +
             C14893 * C10068 - C48601 * C10070) *
                C1071 +
            (C14891 * C1440 - C14888 * C1447 + C14892 * C2318 - C14889 * C2328 +
             C14893 * C10071 - C48601 * C10074) *
                C48598) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C386 +
           ((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C1069 +
            (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48633 +
            (C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
             C48601 * C3265 - C14893 * C3261) *
                C1070 +
            (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
             C48601 * C3270 - C14893 * C3266) *
                C48621 +
            (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 - C14892 * C2312 +
             C48601 * C10072 - C14893 * C10069) *
                C1071 +
            (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 - C14892 * C2322 +
             C48601 * C10075 - C14893 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C510 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C510 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C510 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C48293 * C510 +
           (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C48293 * C510 +
           (((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C114 +
             (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48304) *
                C48630 +
            ((C15103 - C15102 + C15105 - C15104 + C15107 - C15106) * C114 +
             (C15109 - C15108 + C15111 - C15110 + C15113 - C15112) * C48304) *
                C48617 +
            ((C14888 * C276 - C14891 * C267 + C14889 * C693 - C14892 * C685 +
              C48601 * C2645 - C14893 * C2644) *
                 C114 +
             (C14888 * C285 - C14891 * C277 + C14889 * C700 - C14892 * C694 +
              C48601 * C2647 - C14893 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            (C16356 - C16357 + C16358 - C16359 + C16360 - C16361) * C1071 +
            (C16362 - C16363 + C16364 - C16365 + C16366 - C16367) * C48598) *
               C48209 * C48293 * C510 +
           ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C14891 * C1245 - C14888 * C1249 + C14892 * C1887 - C14889 * C1890 +
             C14893 * C9618 - C48601 * C9620) *
                C1071 +
            (C14891 * C1250 - C14888 * C1257 + C14892 * C1891 - C14889 * C1896 +
             C14893 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C48293 * C510 +
           ((C15091 - C15090 + C15093 - C15092 + C15095 - C15094) * C1069 +
            (C15097 - C15096 + C15099 - C15098 + C15101 - C15100) * C48633 +
            (C16369 - C16368 + C16371 - C16370 + C16373 - C16372) * C1070 +
            (C16375 - C16374 + C16377 - C16376 + C16379 - C16378) * C48621 +
            (C14888 * C1251 - C14891 * C1246 + C14889 * C1892 - C14892 * C1888 +
             C48601 * C9883 - C14893 * C9882) *
                C1071 +
            (C14888 * C1258 - C14891 * C1252 + C14889 * C1897 - C14892 * C1893 +
             C48601 * C9885 - C14893 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
            (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
            (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
               C1066 +
           (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
            (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
               C1067 +
           (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
            (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C1069 + C1737 * C48633 + (C1739 - C1738) * C1070 +
            (C1741 - C1740) * C48621 + (C48321 * C1726 - C113 * C1723) * C1071 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C1066 +
           (C1272 * C1069 + C1273 * C48633 + (C1279 - C1278) * C1070 +
            (C1281 - C1280) * C48621 + (C48321 * C1728 - C113 * C1724) * C1071 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C1067 +
           (C1092 * C1069 + C1093 * C48633 + (C1287 - C1286) * C1070 +
            (C1289 - C1288) * C48621 + (C48321 * C1730 - C113 * C1725) * C1071 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C576 +
          (((C113 * C264 - C48321 * C270) * C114 +
            (C113 * C271 - C48321 * C282) * C48304) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
              C48293 * C577 +
          (((C48321 * C585 - C113 * C580) * C114 +
            (C48321 * C595 - C113 * C586) * C48304) *
               C103 +
           ((C48321 * C587 - C113 * C581) * C114 +
            (C48321 * C596 - C113 * C588) * C48304) *
               C104 +
           ((C48321 * C589 - C113 * C582) * C114 +
            (C48321 * C597 - C113 * C590) * C48304) *
               C105 +
           ((C48321 * C591 - C113 * C583) * C114 +
            (C48321 * C598 - C113 * C592) * C48304) *
               C106 +
           ((C48321 * C593 - C113 * C584) * C114 +
            (C48321 * C599 - C113 * C594) * C48304) *
               C107) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
            (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
            (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
               C48630 +
           (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
            (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
               C48617 +
           (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
            (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C7771 + C1737 * C7765 + (C1739 - C1738) * C7772 +
            (C1741 - C1740) * C7766 + (C48321 * C1726 - C113 * C1723) * C7773 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C48630 +
           (C1272 * C7771 + C1273 * C7765 + (C1279 - C1278) * C7772 +
            (C1281 - C1280) * C7766 + (C48321 * C1728 - C113 * C1724) * C7773 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C48617 +
           (C1092 * C7771 + C1093 * C7765 + (C1287 - C1286) * C7772 +
            (C1289 - C1288) * C7766 + (C48321 * C1730 - C113 * C1725) * C7773 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C48293 * C576 +
          ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
           (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
           (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
           (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
           (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
              C48209 * C48293 * C577 +
          (C1736 * C8949 + C1737 * C8943 + C9291 * C8950 + C9292 * C8944 +
           C9293 * C8951 + C9294 * C8945 + (C9296 - C9295) * C8952 +
           (C9298 - C9297) * C8946 + (C48321 * C9287 - C113 * C9286) * C8953 +
           (C48321 * C9289 - C113 * C9288) * C8947) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C48293 * C576 +
          (((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
             C14893 * C2309 - C48601 * C2315) *
                C114 +
            (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
             C14893 * C2316 - C48601 * C2327) *
                C48304) *
               C48630 +
           ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
               C48617 +
           ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
            (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
               C48585) *
              C48293 * C577 +
          (((C14888 * C585 - C14891 * C580 + C14889 * C1439 - C14892 * C1435 +
             C48601 * C2317 - C14893 * C2310) *
                C114 +
            (C14888 * C595 - C14891 * C586 + C14889 * C1447 - C14892 * C1440 +
             C48601 * C2328 - C14893 * C2318) *
                C48304) *
               C48630 +
           ((C14888 * C587 - C14891 * C581 + C14889 * C1441 - C14892 * C1436 +
             C48601 * C2321 - C14893 * C2312) *
                C114 +
            (C14888 * C596 - C14891 * C588 + C14889 * C1448 - C14892 * C1442 +
             C48601 * C2330 - C14893 * C2322) *
                C48304) *
               C48617 +
           ((C14888 * C589 - C14891 * C582 + C14889 * C1443 - C14892 * C1437 +
             C48601 * C2325 - C14893 * C2314) *
                C114 +
            (C14888 * C597 - C14891 * C590 + C14889 * C1449 - C14892 * C1444 +
             C48601 * C2332 - C14893 * C2326) *
                C48304) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
           (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
           C16802 * C1071 + C16803 * C48598) *
              C48209 * C48293 * C576 +
          ((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
           (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
           (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
           (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
           (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
           (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
              C48209 * C48293 * C577 +
          (C16802 * C1069 + C16803 * C48633 +
           (C16789 - C16788 + C16791 - C16790 + C16793 - C16792) * C1070 +
           (C16795 - C16794 + C16797 - C16796 + C16799 - C16798) * C48621 +
           (C14888 * C1726 - C14891 * C1723 + C14889 * C9136 - C14892 * C9134 +
            C48601 * C9622 - C14893 * C9619) *
               C1071 +
           (C14888 * C1732 - C14891 * C1727 + C14889 * C9140 - C14892 * C9137 +
            C48601 * C9625 - C14893 * C9623) *
               C48598) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C510 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C386 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C510 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C386 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C386 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C510 +
          ((((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C386 +
           (((C14888 * C687 - C14891 * C682 + C14889 * C2315 - C14892 * C2309 +
              C48601 * C3263 - C14893 * C3260) *
                 C114 +
             (C14888 * C697 - C14891 * C688 + C14889 * C2327 - C14892 * C2316 +
              C48601 * C3269 - C14893 * C3264) *
                 C48304) *
                C48630 +
            ((C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
              C48601 * C3265 - C14893 * C3261) *
                 C114 +
             (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
              C48601 * C3270 - C14893 * C3266) *
                 C48304) *
                C48617 +
            ((C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C114 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C386 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C510 +
          (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
            (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
               C48209 * C386 +
           ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C1069 +
            (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48633 +
            (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C1070 +
            (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48621 +
            (C14888 * C1890 - C14891 * C1887 + C14889 * C9620 - C14892 * C9618 +
             C48601 * C10501 - C14893 * C10500) *
                C1071 +
            (C14888 * C1896 - C14891 * C1891 + C14889 * C9624 - C14892 * C9621 +
             C48601 * C10503 - C14893 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C784 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C114 +
             (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48304) *
                C48630 +
            ((C14908 - C14907 + C14910 - C14909 + C14912 - C14911) * C114 +
             (C14914 - C14913 + C14916 - C14915 + C14918 - C14917) * C48304) *
                C48617 +
            ((C14919 - C14920 + C14921 - C14922 + C14923 - C14924) * C114 +
             (C14925 - C14926 + C14927 - C14928 + C14929 - C14930) * C48304) *
                C48585) *
               C784 +
           (((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C114 +
             (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48304) *
                C48630 +
            ((C15273 - C15272 + C15275 - C15274 + C15277 - C15276) * C114 +
             (C15279 - C15278 + C15281 - C15280 + C15283 - C15282) * C48304) *
                C48617 +
            ((C14888 * C400 - C14891 * C391 + C14889 * C944 - C14892 * C936 +
              C48601 * C2828 - C14893 * C2821) *
                 C114 +
             (C14888 * C409 - C14891 * C401 + C14889 * C951 - C14892 * C945 +
              C48601 * C2833 - C14893 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C784 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C14896 - C14895 + C14898 - C14897 + C14900 - C14899) * C1069 +
            (C14902 - C14901 + C14904 - C14903 + C14906 - C14905) * C48633 +
            (C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C1070 +
            (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48621 +
            (C16368 - C16369 + C16370 - C16371 + C16372 - C16373) * C1071 +
            (C16374 - C16375 + C16376 - C16377 + C16378 - C16379) * C48598) *
               C48209 * C784 +
           ((C15261 - C15260 + C15263 - C15262 + C15265 - C15264) * C1069 +
            (C15267 - C15266 + C15269 - C15268 + C15271 - C15270) * C48633 +
            (C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
             C48601 * C3265 - C14893 * C3261) *
                C1070 +
            (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
             C48601 * C3270 - C14893 * C3266) *
                C48621 +
            (C14888 * C1441 - C14891 * C1436 + C14889 * C2321 - C14892 * C2312 +
             C48601 * C10072 - C14893 * C10069) *
                C1071 +
            (C14888 * C1448 - C14891 * C1442 + C14889 * C2330 - C14892 * C2322 +
             C48601 * C10075 - C14893 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C260 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C784 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C260 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C784 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
              C48601 * C938 - C14893 * C933) *
                 C114 +
             (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
              C48601 * C948 - C14893 * C939) *
                 C48304) *
                C48630 +
            ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
             (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
                C48617 +
            C14943 * C48585) *
               C784 +
           (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
              C14893 * C2818 - C48601 * C2822) *
                 C114 +
             (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
              C14893 * C2823 - C48601 * C2830) *
                 C48304) *
                C48630 +
            ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
             (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
                C48617 +
            ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
             (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
                C48585) *
               C48595) *
              C260 +
          ((((C14891 * C264 - C14888 * C270 + C14892 * C682 - C14889 * C687 +
              C14893 * C2309 - C48601 * C2315) *
                 C114 +
             (C14891 * C271 - C14888 * C282 + C14892 * C688 - C14889 * C697 +
              C14893 * C2316 - C48601 * C2327) *
                 C48304) *
                C48630 +
            ((C15090 - C15091 + C15092 - C15093 + C15094 - C15095) * C114 +
             (C15096 - C15097 + C15098 - C15099 + C15100 - C15101) * C48304) *
                C48617 +
            ((C15102 - C15103 + C15104 - C15105 + C15106 - C15107) * C114 +
             (C15108 - C15109 + C15110 - C15111 + C15112 - C15113) * C48304) *
                C48585) *
               C784 +
           (((C14888 * C687 - C14891 * C682 + C14889 * C2315 - C14892 * C2309 +
              C48601 * C3263 - C14893 * C3260) *
                 C114 +
             (C14888 * C697 - C14891 * C688 + C14889 * C2327 - C14892 * C2316 +
              C48601 * C3269 - C14893 * C3264) *
                 C48304) *
                C48630 +
            ((C14888 * C689 - C14891 * C683 + C14889 * C2319 - C14892 * C2311 +
              C48601 * C3265 - C14893 * C3261) *
                 C114 +
             (C14888 * C698 - C14891 * C690 + C14889 * C2329 - C14892 * C2320 +
              C48601 * C3270 - C14893 * C3266) *
                 C48304) *
                C48617 +
            ((C14888 * C691 - C14891 * C684 + C14889 * C2323 - C14892 * C2313 +
              C48601 * C3267 - C14893 * C3262) *
                 C114 +
             (C14888 * C699 - C14891 * C692 + C14889 * C2331 - C14892 * C2324 +
              C48601 * C3271 - C14893 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C1069 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48633 +
            (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
            (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
            C16802 * C1071 + C16803 * C48598) *
               C48209 * C784 +
           ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C1069 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48633 +
            (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
            (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
            (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
            (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
               C48209 * C48595) *
              C260 +
          (((C16345 - C16344 + C16347 - C16346 + C16349 - C16348) * C1069 +
            (C16351 - C16350 + C16353 - C16352 + C16355 - C16354) * C48633 +
            (C16357 - C16356 + C16359 - C16358 + C16361 - C16360) * C1070 +
            (C16363 - C16362 + C16365 - C16364 + C16367 - C16366) * C48621 +
            (C16788 - C16789 + C16790 - C16791 + C16792 - C16793) * C1071 +
            (C16794 - C16795 + C16796 - C16797 + C16798 - C16799) * C48598) *
               C48209 * C784 +
           ((C16951 - C16950 + C16953 - C16952 + C16955 - C16954) * C1069 +
            (C16957 - C16956 + C16959 - C16958 + C16961 - C16960) * C48633 +
            (C16963 - C16962 + C16965 - C16964 + C16967 - C16966) * C1070 +
            (C16969 - C16968 + C16971 - C16970 + C16973 - C16972) * C48621 +
            (C14888 * C1890 - C14891 * C1887 + C14889 * C9620 - C14892 * C9618 +
             C48601 * C10501 - C14893 * C10500) *
                C1071 +
            (C14888 * C1896 - C14891 * C1891 + C14889 * C9624 - C14892 * C9621 +
             C48601 * C10503 - C14893 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C1069 +
            (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
            (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
            (C1906 - C1907) * C48598) *
               C1066 +
           ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
            (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
            (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
               C1067 +
           ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
            (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
            (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C1069 +
            (C48321 * C948 - C113 * C939) * C48633 +
            (C48321 * C2315 - C113 * C2309) * C1070 +
            (C48321 * C2327 - C113 * C2316) * C48621 +
            (C48321 * C2317 - C113 * C2310) * C1071 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C1066 +
           ((C48321 * C940 - C113 * C934) * C1069 +
            (C48321 * C949 - C113 * C941) * C48633 +
            (C48321 * C2319 - C113 * C2311) * C1070 +
            (C48321 * C2329 - C113 * C2320) * C48621 +
            (C48321 * C2321 - C113 * C2312) * C1071 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C1067 +
           ((C48321 * C942 - C113 * C935) * C1069 +
            (C48321 * C950 - C113 * C943) * C48633 +
            (C48321 * C2323 - C113 * C2313) * C1070 +
            (C48321 * C2331 - C113 * C2324) * C48621 +
            (C48321 * C2325 - C113 * C2314) * C1071 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C114 +
            (C113 * C395 - C48321 * C406) * C48304) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C114 +
            (C48321 * C948 - C113 * C939) * C48304) *
               C103 +
           ((C48321 * C940 - C113 * C934) * C114 +
            (C48321 * C949 - C113 * C941) * C48304) *
               C104 +
           ((C48321 * C942 - C113 * C935) * C114 +
            (C48321 * C950 - C113 * C943) * C48304) *
               C105 +
           ((C48321 * C944 - C113 * C936) * C114 +
            (C48321 * C951 - C113 * C945) * C48304) *
               C106 +
           ((C48321 * C946 - C113 * C937) * C114 +
            (C48321 * C952 - C113 * C947) * C48304) *
               C107) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C7771 +
            (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
            (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
            (C1906 - C1907) * C48598) *
               C48630 +
           ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
            (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
            (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
               C48617 +
           ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
            (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
            (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C7771 +
            (C48321 * C948 - C113 * C939) * C7765 +
            (C48321 * C2315 - C113 * C2309) * C7772 +
            (C48321 * C2327 - C113 * C2316) * C7766 +
            (C48321 * C2317 - C113 * C2310) * C7773 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C48630 +
           ((C48321 * C940 - C113 * C934) * C7771 +
            (C48321 * C949 - C113 * C941) * C7765 +
            (C48321 * C2319 - C113 * C2311) * C7772 +
            (C48321 * C2329 - C113 * C2320) * C7766 +
            (C48321 * C2321 - C113 * C2312) * C7773 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C48617 +
           ((C48321 * C942 - C113 * C935) * C7771 +
            (C48321 * C950 - C113 * C943) * C7765 +
            (C48321 * C2323 - C113 * C2313) * C7772 +
            (C48321 * C2331 - C113 * C2324) * C7766 +
            (C48321 * C2325 - C113 * C2314) * C7773 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C930 +
          ((C113 * C388 - C48321 * C394) * C8949 +
           (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
           (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
           (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
           (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
           (C9391 - C9392) * C8947) *
              C48209 * C931 +
          ((C48321 * C938 - C113 * C933) * C8949 +
           (C48321 * C948 - C113 * C939) * C8943 +
           (C48321 * C2315 - C113 * C2309) * C8950 +
           (C48321 * C2327 - C113 * C2316) * C8944 +
           (C48321 * C2317 - C113 * C2310) * C8951 +
           (C48321 * C2328 - C113 * C2318) * C8945 +
           (C48321 * C9620 - C113 * C9618) * C8952 +
           (C48321 * C9624 - C113 * C9621) * C8946 +
           (C48321 * C9622 - C113 * C9619) * C8953 +
           (C48321 * C9625 - C113 * C9623) * C8947) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
             C48601 * C938 - C14893 * C933) *
                C114 +
            (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
             C48601 * C948 - C14893 * C939) *
                C48304) *
               C48630 +
           ((C14895 - C14896 + C14897 - C14898 + C14899 - C14900) * C114 +
            (C14901 - C14902 + C14903 - C14904 + C14905 - C14906) * C48304) *
               C48617 +
           C14943 * C48585) *
              C930 +
          (((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
             C14893 * C2818 - C48601 * C2822) *
                C114 +
            (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
             C14893 * C2823 - C48601 * C2830) *
                C48304) *
               C48630 +
           ((C15260 - C15261 + C15262 - C15263 + C15264 - C15265) * C114 +
            (C15266 - C15267 + C15268 - C15269 + C15270 - C15271) * C48304) *
               C48617 +
           ((C15272 - C15273 + C15274 - C15275 + C15276 - C15277) * C114 +
            (C15278 - C15279 + C15280 - C15281 + C15282 - C15283) * C48304) *
               C48585) *
              C931 +
          (((C14888 * C938 - C14891 * C933 + C14889 * C2822 - C14892 * C2818 +
             C48601 * C3677 - C14893 * C3674) *
                C114 +
            (C14888 * C948 - C14891 * C939 + C14889 * C2830 - C14892 * C2823 +
             C48601 * C3683 - C14893 * C3678) *
                C48304) *
               C48630 +
           ((C14888 * C940 - C14891 * C934 + C14889 * C2824 - C14892 * C2819 +
             C48601 * C3679 - C14893 * C3675) *
                C114 +
            (C14888 * C949 - C14891 * C941 + C14889 * C2831 - C14892 * C2825 +
             C48601 * C3684 - C14893 * C3680) *
                C48304) *
               C48617 +
           ((C14888 * C942 - C14891 * C935 + C14889 * C2826 - C14892 * C2820 +
             C48601 * C3681 - C14893 * C3676) *
                C114 +
            (C14888 * C950 - C14891 * C943 + C14889 * C2832 - C14892 * C2827 +
             C48601 * C3685 - C14893 * C3682) *
                C48304) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C14888 * C122 - C14891 * C115 + C14889 * C394 - C14892 * C388 +
            C48601 * C938 - C14893 * C933) *
               C1069 +
           (C14888 * C136 - C14891 * C123 + C14889 * C406 - C14892 * C395 +
            C48601 * C948 - C14893 * C939) *
               C48633 +
           (C16344 - C16345 + C16346 - C16347 + C16348 - C16349) * C1070 +
           (C16350 - C16351 + C16352 - C16353 + C16354 - C16355) * C48621 +
           C16802 * C1071 + C16803 * C48598) *
              C48209 * C930 +
          ((C14891 * C388 - C14888 * C394 + C14892 * C933 - C14889 * C938 +
            C14893 * C2818 - C48601 * C2822) *
               C1069 +
           (C14891 * C395 - C14888 * C406 + C14892 * C939 - C14889 * C948 +
            C14893 * C2823 - C48601 * C2830) *
               C48633 +
           (C16950 - C16951 + C16952 - C16953 + C16954 - C16955) * C1070 +
           (C16956 - C16957 + C16958 - C16959 + C16960 - C16961) * C48621 +
           (C16962 - C16963 + C16964 - C16965 + C16966 - C16967) * C1071 +
           (C16968 - C16969 + C16970 - C16971 + C16972 - C16973) * C48598) *
              C48209 * C931 +
          ((C14888 * C938 - C14891 * C933 + C14889 * C2822 - C14892 * C2818 +
            C48601 * C3677 - C14893 * C3674) *
               C1069 +
           (C14888 * C948 - C14891 * C939 + C14889 * C2830 - C14892 * C2823 +
            C48601 * C3683 - C14893 * C3678) *
               C48633 +
           (C14888 * C2315 - C14891 * C2309 + C14889 * C3263 - C14892 * C3260 +
            C48601 * C10932 - C14893 * C10930) *
               C1070 +
           (C14888 * C2327 - C14891 * C2316 + C14889 * C3269 - C14892 * C3264 +
            C48601 * C10936 - C14893 * C10933) *
               C48621 +
           (C14888 * C2317 - C14891 * C2310 + C14889 * C10070 -
            C14892 * C10068 + C48601 * C10934 - C14893 * C10931) *
               C1071 +
           (C14888 * C2328 - C14891 * C2318 + C14889 * C10074 -
            C14892 * C10071 + C48601 * C10937 - C14893 * C10935) *
               C48598) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C3790 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48565 +
            (C31769 - C31770 + C31771 - C31772) * C3791 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48214 +
           ((C30339 - C30340 + C30341 - C30342) * C3790 +
            (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
            C31810 * C48366) *
               C48222 +
           C34429 * C25914) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C3790 +
            (C30344 - C30343 + C30346 - C30345) * C48565 + C31813 * C3791 +
            C31814 * C48366) *
               C48214 +
           ((C30348 - C30347 + C30350 - C30349) * C3790 +
            (C30352 - C30351 + C30354 - C30353) * C48565 +
            (C30527 - C30528 + C30529 - C30530) * C3791 +
            (C30531 - C30532 + C30533 - C30534) * C48366) *
               C48222 +
           ((C30356 - C30355 + C30358 - C30357) * C3790 +
            (C30360 - C30359 + C30362 - C30361) * C48565 +
            (C30535 - C30536 + C30537 - C30538) * C3791 +
            (C30539 - C30540 + C30541 - C30542) * C48366) *
               C25914) *
              C48293 * C48276 * C111 +
          (C34429 * C48214 +
           (C30381 * C3790 + C30382 * C48565 +
            (C30536 - C30535 + C30538 - C30537) * C3791 +
            (C30540 - C30539 + C30542 - C30541) * C48366) *
               C48222 +
           ((C30364 - C30363 + C30366 - C30365) * C3790 +
            (C30368 - C30367 + C30370 - C30369) * C48565 +
            (C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                C3791 +
            (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                C48366) *
               C25914) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C3790 +
             (C31774 - C31773 + C31776 - C31775) * C48565 +
             (C31778 - C31777 + C31780 - C31779) * C3791 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48214 +
            (C31813 * C3790 + C31814 * C48565 + C31815 * C3791 +
             C31816 * C48366) *
                C48222 +
            (C34628 * C3790 + C34629 * C48565 +
             (C31567 - C31568 + C31569 - C31570) * C3791 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C25914) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C3790 +
             (C30344 - C30343 + C30346 - C30345) * C48565 + C31813 * C3791 +
             C31814 * C48366) *
                C48214 +
            ((C30348 - C30347 + C30350 - C30349) * C3790 +
             (C30352 - C30351 + C30354 - C30353) * C48565 + C34628 * C3791 +
             C34629 * C48366) *
                C48222 +
            ((C30356 - C30355 + C30358 - C30357) * C3790 +
             (C30360 - C30359 + C30362 - C30361) * C48565 +
             (C30535 - C30536 + C30537 - C30538) * C3791 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C25914) *
               C48293 * C260 +
           ((C31809 * C3790 + C31810 * C48565 + C31811 * C3791 +
             C31812 * C48366) *
                C48214 +
            (C34424 * C3790 + C34425 * C48565 +
             (C31568 - C31567 + C31570 - C31569) * C3791 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48222 +
            ((C30536 - C30535 + C30538 - C30537) * C3790 +
             (C30540 - C30539 + C30542 - C30541) * C48565 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C3791 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C3790 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48565 +
             (C32575 - C32576 + C32577 - C32578) * C3791 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48214 +
            ((C30673 - C30674 + C30675 - C30676) * C3790 +
             (C30677 - C30678 + C30679 - C30680) * C48565 +
             (C32011 - C32012 + C32013 - C32014) * C3791 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48222 +
            ((C30681 - C30682 + C30683 - C30684) * C3790 +
             (C30685 - C30686 + C30687 - C30688) * C48565 +
             (C34824 - C34825 + C34826 - C34827) * C3791 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C25914) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C3790 +
             (C30344 - C30343 + C30346 - C30345) * C48565 + C31813 * C3791 +
             C31814 * C48366) *
                C48214 +
            ((C30348 - C30347 + C30350 - C30349) * C3790 +
             (C30352 - C30351 + C30354 - C30353) * C48565 + C34628 * C3791 +
             C34629 * C48366) *
                C48222 +
            ((C30356 - C30355 + C30358 - C30357) * C3790 +
             (C30360 - C30359 + C30362 - C30361) * C48565 +
             (C30535 - C30536 + C30537 - C30538) * C3791 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C25914) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C3790 +
             (C30678 - C30677 + C30680 - C30679) * C48565 +
             (C32012 - C32011 + C32014 - C32013) * C3791 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48214 +
            ((C30682 - C30681 + C30684 - C30683) * C3790 +
             (C30686 - C30685 + C30688 - C30687) * C48565 +
             (C34825 - C34824 + C34827 - C34826) * C3791 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48222 +
            ((C30690 - C30689 + C30692 - C30691) * C3790 +
             (C30694 - C30693 + C30696 - C30695) * C48565 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C3791 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C3790 +
             (C31774 - C31773 + C31776 - C31775) * C48565 +
             (C31778 - C31777 + C31780 - C31779) * C3791 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48214 +
            (C31813 * C3790 + C31814 * C48565 + C31815 * C3791 +
             C31816 * C48366) *
                C48222 +
            (C34628 * C3790 + C34629 * C48565 +
             (C31567 - C31568 + C31569 - C31570) * C3791 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C25914) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C3790 +
             (C30344 - C30343 + C30346 - C30345) * C48565 + C31813 * C3791 +
             C31814 * C48366) *
                C48214 +
            ((C30348 - C30347 + C30350 - C30349) * C3790 +
             (C30352 - C30351 + C30354 - C30353) * C48565 + C34628 * C3791 +
             C34629 * C48366) *
                C48222 +
            ((C30356 - C30355 + C30358 - C30357) * C3790 +
             (C30360 - C30359 + C30362 - C30361) * C48565 +
             (C30535 - C30536 + C30537 - C30538) * C3791 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C25914) *
               C48293 * C510 +
           ((C31809 * C3790 + C31810 * C48565 + C31811 * C3791 +
             C31812 * C48366) *
                C48214 +
            (C34424 * C3790 + C34425 * C48565 +
             (C31568 - C31567 + C31570 - C31569) * C3791 +
             (C31572 - C31571 + C31574 - C31573) * C48366) *
                C48222 +
            ((C30536 - C30535 + C30538 - C30537) * C3790 +
             (C30540 - C30539 + C30542 - C30541) * C48565 +
             (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                 C3791 +
             (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                 C48366) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C3790 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48565 +
            (C31769 - C31770 + C31771 - C31772) * C3791 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48214 +
           ((C30339 - C30340 + C30341 - C30342) * C3790 +
            (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
            C31810 * C48366) *
               C48222 +
           C34429 * C25914) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C3790 +
            (C31774 - C31773 + C31776 - C31775) * C48565 +
            (C31778 - C31777 + C31780 - C31779) * C3791 +
            (C31782 - C31781 + C31784 - C31783) * C48366) *
               C48214 +
           (C31813 * C3790 + C31814 * C48565 + C31815 * C3791 +
            C31816 * C48366) *
               C48222 +
           (C34628 * C3790 + C34629 * C48565 +
            (C31567 - C31568 + C31569 - C31570) * C3791 +
            (C31571 - C31572 + C31573 - C31574) * C48366) *
               C25914) *
              C48293 * C577 +
          ((C32379 * C3790 + C32380 * C48565 +
            (C32372 - C32371 + C32374 - C32373) * C3791 +
            (C32376 - C32375 + C32378 - C32377) * C48366) *
               C48214 +
           (C31811 * C3790 + C31812 * C48565 +
            (C31802 - C31801 + C31804 - C31803) * C3791 +
            (C31806 - C31805 + C31808 - C31807) * C48366) *
               C48222 +
           ((C31568 - C31567 + C31570 - C31569) * C3790 +
            (C31572 - C31571 + C31574 - C31573) * C48565 +
            (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
             C30337 * C1889) *
                C3791 +
            (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
             C30337 * C1895) *
                C48366) *
               C25914) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C3790 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48565 +
             (C32575 - C32576 + C32577 - C32578) * C3791 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48214 +
            ((C30673 - C30674 + C30675 - C30676) * C3790 +
             (C30677 - C30678 + C30679 - C30680) * C48565 +
             (C32011 - C32012 + C32013 - C32014) * C3791 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48222 +
            ((C30681 - C30682 + C30683 - C30684) * C3790 +
             (C30685 - C30686 + C30687 - C30688) * C48565 +
             (C34824 - C34825 + C34826 - C34827) * C3791 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C25914) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C3790 +
             (C31774 - C31773 + C31776 - C31775) * C48565 +
             (C31778 - C31777 + C31780 - C31779) * C3791 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48214 +
            (C31813 * C3790 + C31814 * C48565 + C31815 * C3791 +
             C31816 * C48366) *
                C48222 +
            (C34628 * C3790 + C34629 * C48565 +
             (C31567 - C31568 + C31569 - C31570) * C3791 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C25914) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C3790 +
             (C32580 - C32579 + C32582 - C32581) * C48565 +
             (C32584 - C32583 + C32586 - C32585) * C3791 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48214 +
            ((C32012 - C32011 + C32014 - C32013) * C3790 +
             (C32016 - C32015 + C32018 - C32017) * C48565 +
             (C32020 - C32019 + C32022 - C32021) * C3791 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48222 +
            ((C34825 - C34824 + C34827 - C34826) * C3790 +
             (C34829 - C34828 + C34831 - C34830) * C48565 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C3791 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C3790 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48565 +
             (C32575 - C32576 + C32577 - C32578) * C3791 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48214 +
            ((C30673 - C30674 + C30675 - C30676) * C3790 +
             (C30677 - C30678 + C30679 - C30680) * C48565 +
             (C32011 - C32012 + C32013 - C32014) * C3791 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48222 +
            ((C30681 - C30682 + C30683 - C30684) * C3790 +
             (C30685 - C30686 + C30687 - C30688) * C48565 +
             (C34824 - C34825 + C34826 - C34827) * C3791 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C25914) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C3790 +
             (C30344 - C30343 + C30346 - C30345) * C48565 + C31813 * C3791 +
             C31814 * C48366) *
                C48214 +
            ((C30348 - C30347 + C30350 - C30349) * C3790 +
             (C30352 - C30351 + C30354 - C30353) * C48565 + C34628 * C3791 +
             C34629 * C48366) *
                C48222 +
            ((C30356 - C30355 + C30358 - C30357) * C3790 +
             (C30360 - C30359 + C30362 - C30361) * C48565 +
             (C30535 - C30536 + C30537 - C30538) * C3791 +
             (C30539 - C30540 + C30541 - C30542) * C48366) *
                C25914) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C3790 +
             (C30678 - C30677 + C30680 - C30679) * C48565 +
             (C32012 - C32011 + C32014 - C32013) * C3791 +
             (C32016 - C32015 + C32018 - C32017) * C48366) *
                C48214 +
            ((C30682 - C30681 + C30684 - C30683) * C3790 +
             (C30686 - C30685 + C30688 - C30687) * C48565 +
             (C34825 - C34824 + C34827 - C34826) * C3791 +
             (C34829 - C34828 + C34831 - C34830) * C48366) *
                C48222 +
            ((C30690 - C30689 + C30692 - C30691) * C3790 +
             (C30694 - C30693 + C30696 - C30695) * C48565 +
             (C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C3791 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48366) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C3790 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48565 +
             (C31769 - C31770 + C31771 - C31772) * C3791 +
             (C31773 - C31774 + C31775 - C31776) * C48366) *
                C48214 +
            ((C30339 - C30340 + C30341 - C30342) * C3790 +
             (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
             C31810 * C48366) *
                C48222 +
            C34429 * C25914) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C3790 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48565 +
             (C32575 - C32576 + C32577 - C32578) * C3791 +
             (C32579 - C32580 + C32581 - C32582) * C48366) *
                C48214 +
            ((C30673 - C30674 + C30675 - C30676) * C3790 +
             (C30677 - C30678 + C30679 - C30680) * C48565 +
             (C32011 - C32012 + C32013 - C32014) * C3791 +
             (C32015 - C32016 + C32017 - C32018) * C48366) *
                C48222 +
            ((C30681 - C30682 + C30683 - C30684) * C3790 +
             (C30685 - C30686 + C30687 - C30688) * C48565 +
             (C34824 - C34825 + C34826 - C34827) * C3791 +
             (C34828 - C34829 + C34830 - C34831) * C48366) *
                C25914) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C3790 +
             (C31774 - C31773 + C31776 - C31775) * C48565 +
             (C31778 - C31777 + C31780 - C31779) * C3791 +
             (C31782 - C31781 + C31784 - C31783) * C48366) *
                C48214 +
            (C31813 * C3790 + C31814 * C48565 + C31815 * C3791 +
             C31816 * C48366) *
                C48222 +
            (C34628 * C3790 + C34629 * C48565 +
             (C31567 - C31568 + C31569 - C31570) * C3791 +
             (C31571 - C31572 + C31573 - C31574) * C48366) *
                C25914) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C3790 +
             (C32580 - C32579 + C32582 - C32581) * C48565 +
             (C32584 - C32583 + C32586 - C32585) * C3791 +
             (C32588 - C32587 + C32590 - C32589) * C48366) *
                C48214 +
            ((C32012 - C32011 + C32014 - C32013) * C3790 +
             (C32016 - C32015 + C32018 - C32017) * C48565 +
             (C32020 - C32019 + C32022 - C32021) * C3791 +
             (C32024 - C32023 + C32026 - C32025) * C48366) *
                C48222 +
            ((C34825 - C34824 + C34827 - C34826) * C3790 +
             (C34829 - C34828 + C34831 - C34830) * C48565 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C3791 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48366) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C3790 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48565 +
            (C31769 - C31770 + C31771 - C31772) * C3791 +
            (C31773 - C31774 + C31775 - C31776) * C48366) *
               C48214 +
           ((C30339 - C30340 + C30341 - C30342) * C3790 +
            (C30343 - C30344 + C30345 - C30346) * C48565 + C31809 * C3791 +
            C31810 * C48366) *
               C48222 +
           C34429 * C25914) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C3790 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48565 +
            (C32575 - C32576 + C32577 - C32578) * C3791 +
            (C32579 - C32580 + C32581 - C32582) * C48366) *
               C48214 +
           ((C30673 - C30674 + C30675 - C30676) * C3790 +
            (C30677 - C30678 + C30679 - C30680) * C48565 +
            (C32011 - C32012 + C32013 - C32014) * C3791 +
            (C32015 - C32016 + C32017 - C32018) * C48366) *
               C48222 +
           ((C30681 - C30682 + C30683 - C30684) * C3790 +
            (C30685 - C30686 + C30687 - C30688) * C48565 +
            (C34824 - C34825 + C34826 - C34827) * C3791 +
            (C34828 - C34829 + C34830 - C34831) * C48366) *
               C25914) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C3790 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48565 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C3791 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48366) *
               C48214 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C3790 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48565 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C3791 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48366) *
               C48222 +
           ((C30334 * C942 - C30336 * C935 + C48408 * C2826 - C30337 * C2820) *
                C3790 +
            (C30334 * C950 - C30336 * C943 + C48408 * C2832 - C30337 * C2827) *
                C48565 +
            (C30334 * C2323 - C30336 * C2313 + C48408 * C3267 -
             C30337 * C3262) *
                C3791 +
            (C30334 * C2331 - C30336 * C2324 + C48408 * C3271 -
             C30337 * C3268) *
                C48366) *
               C25914) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C3790 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48565 +
            (C48404 * C270 - C47360 * C264 + C48411 * C687 - C47352 * C682 +
             C36011 * C2315 - C47366 * C2309) *
                C3791 +
            (C48404 * C282 - C47360 * C271 + C48411 * C697 - C47352 * C688 +
             C36011 * C2327 - C47366 * C2316) *
                C48366) *
               C23183 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
            (C36212 - C36211 + C36214 - C36213 + C36216 - C36215) * C3791 +
            (C36218 - C36217 + C36220 - C36219 + C36222 - C36221) * C48366) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C3790 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48565 +
            (C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C3791 +
            (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48366) *
               C23183 +
           ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C3790 +
            (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48565 +
            (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C3791 +
            (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C36060 * C3790 + C36061 * C48565 +
            (C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C3791 +
            (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48366) *
               C23183 +
           ((C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C3790 +
            (C36047 - C36046 + C36049 - C36048 + C36051 - C36050) * C48565 +
            (C48404 * C276 - C47360 * C267 + C48411 * C693 - C47352 * C685 +
             C36011 * C2645 - C47366 * C2644) *
                C3791 +
            (C48404 * C285 - C47360 * C277 + C48411 * C700 - C47352 * C694 +
             C36011 * C2647 - C47366 * C2646) *
                C48366) *
               C48219) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C48293 * C260 +
           (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C3790 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48565 +
             (C47360 * C580 - C48404 * C585 + C47352 * C1435 - C48411 * C1439 +
              C47366 * C2310 - C36011 * C2317) *
                 C3791 +
             (C47360 * C586 - C48404 * C595 + C47352 * C1440 - C48411 * C1447 +
              C47366 * C2318 - C36011 * C2328) *
                 C48366) *
                C23183 +
            (C37591 * C3790 + C37592 * C48565 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C3791 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C3790 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48565 +
             C37591 * C3791 + C37592 * C48366) *
                C23183 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C3790 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48565 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C3791 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C48293 * C260 +
           ((C37589 * C3790 + C37590 * C48565 +
             (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C3791 +
             (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48366) *
                C23183 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C3790 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48565 +
             (C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
              C36011 * C2325 - C47366 * C2314) *
                 C3791 +
             (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
              C36011 * C2332 - C47366 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C3790 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48565 +
             (C47360 * C682 - C48404 * C687 + C47352 * C2309 - C48411 * C2315 +
              C47366 * C3260 - C36011 * C3263) *
                 C3791 +
             (C47360 * C688 - C48404 * C697 + C47352 * C2316 - C48411 * C2327 +
              C47366 * C3264 - C36011 * C3269) *
                 C48366) *
                C23183 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C3790 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48565 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C3791 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C3790 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48565 +
             C37591 * C3791 + C37592 * C48366) *
                C23183 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C3790 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48565 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C3791 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C386 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C3790 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48565 +
             (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C3791 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48366) *
                C23183 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C3790 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C48565 +
             (C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C3791 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C48293 * C510 +
           (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C3790 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48565 +
             (C47360 * C580 - C48404 * C585 + C47352 * C1435 - C48411 * C1439 +
              C47366 * C2310 - C36011 * C2317) *
                 C3791 +
             (C47360 * C586 - C48404 * C595 + C47352 * C1440 - C48411 * C1447 +
              C47366 * C2318 - C36011 * C2328) *
                 C48366) *
                C23183 +
            (C37591 * C3790 + C37592 * C48565 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C3791 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C3790 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48565 +
             C37591 * C3791 + C37592 * C48366) *
                C23183 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C3790 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48565 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C3791 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C48293 * C510 +
           ((C37589 * C3790 + C37590 * C48565 +
             (C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C3791 +
             (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48366) *
                C23183 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C3790 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48565 +
             (C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
              C36011 * C2325 - C47366 * C2314) *
                 C3791 +
             (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
              C36011 * C2332 - C47366 * C2326) *
                 C48366) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C3790 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48565 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
               C23183 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
            C37589 * C3791 + C37590 * C48366) *
               C48219) *
              C48293 * C576 +
          (((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C3790 +
            (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48565 +
            (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C3791 +
            (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
               C23183 +
           (C37591 * C3790 + C37592 * C48565 +
            (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C3791 +
            (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
               C48219) *
              C48293 * C577 +
          (((C38140 - C38139 + C38142 - C38141 + C38144 - C38143) * C3790 +
            (C38146 - C38145 + C38148 - C38147 + C38150 - C38149) * C48565 +
            (C48404 * C1249 - C47360 * C1245 + C48411 * C1890 - C47352 * C1887 +
             C36011 * C9620 - C47366 * C9618) *
                C3791 +
            (C48404 * C1257 - C47360 * C1250 + C48411 * C1896 - C47352 * C1891 +
             C36011 * C9624 - C47366 * C9621) *
                C48366) *
               C23183 +
           ((C37574 - C37573 + C37576 - C37575 + C37578 - C37577) * C3790 +
            (C37580 - C37579 + C37582 - C37581 + C37584 - C37583) * C48565 +
            (C48404 * C1251 - C47360 * C1246 + C48411 * C1892 - C47352 * C1888 +
             C36011 * C9883 - C47366 * C9882) *
                C3791 +
            (C48404 * C1258 - C47360 * C1252 + C48411 * C1897 - C47352 * C1893 +
             C36011 * C9885 - C47366 * C9884) *
                C48366) *
               C48219) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C3790 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48565 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C3791 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C23183 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C3790 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48565 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C3791 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C510 +
          ((((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C3790 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48565 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C3791 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C23183 +
            (C37591 * C3790 + C37592 * C48565 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C3791 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C386 +
           (((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C3790 +
             (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C48565 +
             (C48404 * C1439 - C47360 * C1435 + C48411 * C2317 -
              C47352 * C2310 + C36011 * C10070 - C47366 * C10068) *
                 C3791 +
             (C48404 * C1447 - C47360 * C1440 + C48411 * C2328 -
              C47352 * C2318 + C36011 * C10074 - C47366 * C10071) *
                 C48366) *
                C23183 +
            ((C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C3790 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48565 +
             (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 -
              C47352 * C2312 + C36011 * C10072 - C47366 * C10069) *
                 C3791 +
             (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 -
              C47352 * C2322 + C36011 * C10075 - C47366 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C3790 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48565 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C3791 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C23183 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C3790 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48565 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C3791 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C3790 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48565 +
             C37591 * C3791 + C37592 * C48366) *
                C23183 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C3790 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48565 +
             (C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C3791 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48366) *
                C48219) *
               C784 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C3790 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48565 +
             (C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C3791 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48366) *
                C23183 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C3790 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C48565 +
             (C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C3791 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48366) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C3790 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48565 +
             (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
             (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
                C23183 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
             C37589 * C3791 + C37590 * C48366) *
                C48219) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C3790 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48565 +
             (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C3791 +
             (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
                C23183 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C3790 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48565 +
             (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C3791 +
             (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
                C48219) *
               C48595) *
              C260 +
          ((((C37550 - C37549 + C37552 - C37551 + C37554 - C37553) * C3790 +
             (C37556 - C37555 + C37558 - C37557 + C37560 - C37559) * C48565 +
             (C38139 - C38140 + C38141 - C38142 + C38143 - C38144) * C3791 +
             (C38145 - C38146 + C38147 - C38148 + C38149 - C38150) * C48366) *
                C23183 +
            (C37591 * C3790 + C37592 * C48565 +
             (C37573 - C37574 + C37575 - C37576 + C37577 - C37578) * C3791 +
             (C37579 - C37580 + C37581 - C37582 + C37583 - C37584) * C48366) *
                C48219) *
               C784 +
           (((C38346 - C38345 + C38348 - C38347 + C38350 - C38349) * C3790 +
             (C38352 - C38351 + C38354 - C38353 + C38356 - C38355) * C48565 +
             (C48404 * C1439 - C47360 * C1435 + C48411 * C2317 -
              C47352 * C2310 + C36011 * C10070 - C47366 * C10068) *
                 C3791 +
             (C48404 * C1447 - C47360 * C1440 + C48411 * C2328 -
              C47352 * C2318 + C36011 * C10074 - C47366 * C10071) *
                 C48366) *
                C23183 +
            ((C37788 - C37787 + C37790 - C37789 + C37792 - C37791) * C3790 +
             (C37794 - C37793 + C37796 - C37795 + C37798 - C37797) * C48565 +
             (C48404 * C1441 - C47360 * C1436 + C48411 * C2321 -
              C47352 * C2312 + C36011 * C10072 - C47366 * C10069) *
                 C3791 +
             (C48404 * C1448 - C47360 * C1442 + C48411 * C2330 -
              C47352 * C2322 + C36011 * C10075 - C47366 * C10073) *
                 C48366) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C3790 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48565 +
            (C37549 - C37550 + C37551 - C37552 + C37553 - C37554) * C3791 +
            (C37555 - C37556 + C37557 - C37558 + C37559 - C37560) * C48366) *
               C23183 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C3790 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48565 +
            C37589 * C3791 + C37590 * C48366) *
               C48219) *
              C930 +
          (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C3790 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48565 +
            (C38345 - C38346 + C38347 - C38348 + C38349 - C38350) * C3791 +
            (C38351 - C38352 + C38353 - C38354 + C38355 - C38356) * C48366) *
               C23183 +
           ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C3790 +
            (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48565 +
            (C37787 - C37788 + C37789 - C37790 + C37791 - C37792) * C3791 +
            (C37793 - C37794 + C37795 - C37796 + C37797 - C37798) * C48366) *
               C48219) *
              C931 +
          (((C48404 * C938 - C47360 * C933 + C48411 * C2822 - C47352 * C2818 +
             C36011 * C3677 - C47366 * C3674) *
                C3790 +
            (C48404 * C948 - C47360 * C939 + C48411 * C2830 - C47352 * C2823 +
             C36011 * C3683 - C47366 * C3678) *
                C48565 +
            (C48404 * C2315 - C47360 * C2309 + C48411 * C3263 - C47352 * C3260 +
             C36011 * C10932 - C47366 * C10930) *
                C3791 +
            (C48404 * C2327 - C47360 * C2316 + C48411 * C3269 - C47352 * C3264 +
             C36011 * C10936 - C47366 * C10933) *
                C48366) *
               C23183 +
           ((C48404 * C940 - C47360 * C934 + C48411 * C2824 - C47352 * C2819 +
             C36011 * C3679 - C47366 * C3675) *
                C3790 +
            (C48404 * C949 - C47360 * C941 + C48411 * C2831 - C47352 * C2825 +
             C36011 * C3684 - C47366 * C3680) *
                C48565 +
            (C48404 * C2319 - C47360 * C2311 + C48411 * C3265 - C47352 * C3261 +
             C36011 * C17530 - C47366 * C17529) *
                C3791 +
            (C48404 * C2329 - C47360 * C2320 + C48411 * C3270 - C47352 * C3266 +
             C36011 * C17532 - C47366 * C17531) *
                C48366) *
               C48219) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C30334 * C270 - C30336 * C264 + C48408 * C687 - C30337 * C682) *
                C1070 +
            (C30334 * C282 - C30336 * C271 + C48408 * C697 - C30337 * C688) *
                C48621 +
            (C30334 * C585 - C30336 * C580 + C48408 * C1439 - C30337 * C1435) *
                C1071 +
            (C30334 * C595 - C30336 * C586 + C48408 * C1447 - C30337 * C1440) *
                C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 +
            (C30520 - C30519 + C30522 - C30521) * C1070 +
            (C30524 - C30523 + C30526 - C30525) * C48621 +
            (C31559 - C31560 + C31561 - C31562) * C1071 +
            (C31563 - C31564 + C31565 - C31566) * C48598) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C1069 +
            (C30344 - C30343 + C30346 - C30345) * C48633 +
            (C30519 - C30520 + C30521 - C30522) * C1070 +
            (C30523 - C30524 + C30525 - C30526) * C48621 +
            (C31560 - C31559 + C31562 - C31561) * C1071 +
            (C31564 - C31563 + C31566 - C31565) * C48598) *
               C23183 +
           ((C30348 - C30347 + C30350 - C30349) * C1069 +
            (C30352 - C30351 + C30354 - C30353) * C48633 +
            (C30527 - C30528 + C30529 - C30530) * C1070 +
            (C30531 - C30532 + C30533 - C30534) * C48621 +
            (C31567 - C31568 + C31569 - C31570) * C1071 +
            (C31571 - C31572 + C31573 - C31574) * C48598) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C30379 * C1069 + C30380 * C48633 +
            (C30528 - C30527 + C30530 - C30529) * C1070 +
            (C30532 - C30531 + C30534 - C30533) * C48621 +
            (C31568 - C31567 + C31570 - C31569) * C1071 +
            (C31572 - C31571 + C31574 - C31573) * C48598) *
               C23183 +
           (C30381 * C1069 + C30382 * C48633 +
            (C30536 - C30535 + C30538 - C30537) * C1070 +
            (C30540 - C30539 + C30542 - C30541) * C48621 +
            (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                C1071 +
            (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                C48598) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C114 +
            (C30344 - C30343 + C30346 - C30345) * C48304) *
               C48639 +
           ((C30348 - C30347 + C30350 - C30349) * C114 +
            (C30352 - C30351 + C30354 - C30353) * C48304) *
               C48632 +
           ((C30356 - C30355 + C30358 - C30357) * C114 +
            (C30360 - C30359 + C30362 - C30361) * C48304) *
               C48619 +
           ((C30363 - C30364 + C30365 - C30366) * C114 +
            (C30367 - C30368 + C30369 - C30370) * C48304) *
               C48602) *
              C48293 * C48276 * C111 +
          (C30387 * C48639 + C30388 * C48632 +
           ((C30364 - C30363 + C30366 - C30365) * C114 +
            (C30368 - C30367 + C30370 - C30369) * C48304) *
               C48619 +
           ((C30334 * C132 - C30336 * C120 + C48408 * C404 - C30337 * C393) *
                C114 +
            (C30334 * C141 - C30336 * C133 + C48408 * C411 - C30337 * C405) *
                C48304) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C114 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C48304) *
               C23183 +
           ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
             C33238) *
                C114 +
            (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
             C33246) *
                C48304) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
             C33237) *
                C114 +
            (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
             C33245) *
                C48304) *
               C23183 +
           ((C33247 - C33248 + C33249 - C33250 + C33251 - C33252 + C33253 -
             C33254) *
                C114 +
            (C33255 - C33256 + C33257 - C33258 + C33259 - C33260 + C33261 -
             C33262) *
                C48304) *
               C48219) *
              C48293 * C48276 * C111 +
          (((C33248 - C33247 + C33250 - C33249 + C33252 - C33251 + C33254 -
             C33253) *
                C114 +
            (C33256 - C33255 + C33258 - C33257 + C33260 - C33259 + C33262 -
             C33261) *
                C48304) *
               C23183 +
           ((C48641 * C128 - C33226 * C118 + C48638 * C400 - C33227 * C391 +
             C48629 * C944 - C33228 * C936 + C48614 * C2828 - C33229 * C2821) *
                C114 +
            (C48641 * C139 - C33226 * C129 + C48638 * C409 - C33227 * C401 +
             C48629 * C951 - C33228 * C945 + C48614 * C2833 - C33229 * C2829) *
                C48304) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C30336 * C1245 - C30334 * C1249 + C30337 * C1887 -
              C48408 * C1890) *
                 C1071 +
             (C30336 * C1250 - C30334 * C1257 + C30337 * C1891 -
              C48408 * C1896) *
                 C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C48293 * C260 +
           ((C31809 * C1069 + C31810 * C48633 + C31811 * C1070 +
             C31812 * C48621 + (C31802 - C31801 + C31804 - C31803) * C1071 +
             (C31806 - C31805 + C31808 - C31807) * C48598) *
                C23183 +
            ((C30528 - C30527 + C30530 - C30529) * C1069 +
             (C30532 - C30531 + C30534 - C30533) * C48633 +
             (C31568 - C31567 + C31570 - C31569) * C1070 +
             (C31572 - C31571 + C31574 - C31573) * C48621 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C1071 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C48293 * C260 +
           (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C48293 * C260 +
           (((C30520 - C30519 + C30522 - C30521) * C114 +
             (C30524 - C30523 + C30526 - C30525) * C48304) *
                C48639 +
            ((C30528 - C30527 + C30530 - C30529) * C114 +
             (C30532 - C30531 + C30534 - C30533) * C48304) *
                C48632 +
            ((C30536 - C30535 + C30538 - C30537) * C114 +
             (C30540 - C30539 + C30542 - C30541) * C48304) *
                C48619 +
            ((C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                 C114 +
             (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C48293 * C260 +
           (((C33226 * C264 - C48641 * C270 + C33227 * C682 - C48638 * C687 +
              C33228 * C2309 - C48629 * C2315 + C33229 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C33226 * C271 - C48641 * C282 + C33227 * C688 - C48638 * C697 +
              C33228 * C2316 - C48629 * C2327 + C33229 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C23183 +
            ((C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
              C33400) *
                 C114 +
             (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
              C33408) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
              C33237) *
                 C114 +
             (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
              C33245) *
                 C48304) *
                C23183 +
            ((C33247 - C33248 + C33249 - C33250 + C33251 - C33252 + C33253 -
              C33254) *
                 C114 +
             (C33255 - C33256 + C33257 - C33258 + C33259 - C33260 + C33261 -
              C33262) *
                 C48304) *
                C48219) *
               C48293 * C260 +
           (((C33394 - C33393 + C33396 - C33395 + C33398 - C33397 + C33400 -
              C33399) *
                 C114 +
             (C33402 - C33401 + C33404 - C33403 + C33406 - C33405 + C33408 -
              C33407) *
                 C48304) *
                C23183 +
            ((C48641 * C274 - C33226 * C266 + C48638 * C691 - C33227 * C684 +
              C48629 * C2323 - C33228 * C2313 + C48614 * C3267 -
              C33229 * C3262) *
                 C114 +
             (C48641 * C284 - C33226 * C275 + C48638 * C699 - C33227 * C692 +
              C48629 * C2331 - C33228 * C2324 + C48614 * C3271 -
              C33229 * C3268) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C30336 * C682 - C30334 * C687 + C30337 * C2309 - C48408 * C2315) *
                 C1070 +
             (C30336 * C688 - C30334 * C697 + C30337 * C2316 - C48408 * C2327) *
                 C48621 +
             (C30336 * C1435 - C30334 * C1439 + C30337 * C2310 -
              C48408 * C2317) *
                 C1071 +
             (C30336 * C1440 - C30334 * C1447 + C30337 * C2318 -
              C48408 * C2328) *
                 C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C1069 +
             (C30678 - C30677 + C30680 - C30679) * C48633 +
             (C32012 - C32011 + C32014 - C32013) * C1070 +
             (C32016 - C32015 + C32018 - C32017) * C48621 +
             (C32020 - C32019 + C32022 - C32021) * C1071 +
             (C32024 - C32023 + C32026 - C32025) * C48598) *
                C23183 +
            ((C30682 - C30681 + C30684 - C30683) * C1069 +
             (C30686 - C30685 + C30688 - C30687) * C48633 +
             (C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C1070 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48621 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C1071 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C114 +
             (C30678 - C30677 + C30680 - C30679) * C48304) *
                C48639 +
            ((C30682 - C30681 + C30684 - C30683) * C114 +
             (C30686 - C30685 + C30688 - C30687) * C48304) *
                C48632 +
            ((C30690 - C30689 + C30692 - C30691) * C114 +
             (C30694 - C30693 + C30696 - C30695) * C48304) *
                C48619 +
            ((C30334 * C402 - C30336 * C392 + C48408 * C946 - C30337 * C937) *
                 C114 +
             (C30334 * C410 - C30336 * C403 + C48408 * C952 - C30337 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C386 +
           (((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
              C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
              C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C23183 +
            ((C33539 - C33540 + C33541 - C33542 + C33543 - C33544 + C33545 -
              C33546) *
                 C114 +
             (C33547 - C33548 + C33549 - C33550 + C33551 - C33552 + C33553 -
              C33554) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
              C33237) *
                 C114 +
             (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
              C33245) *
                 C48304) *
                C23183 +
            ((C33247 - C33248 + C33249 - C33250 + C33251 - C33252 + C33253 -
              C33254) *
                 C114 +
             (C33255 - C33256 + C33257 - C33258 + C33259 - C33260 + C33261 -
              C33262) *
                 C48304) *
                C48219) *
               C386 +
           (((C33540 - C33539 + C33542 - C33541 + C33544 - C33543 + C33546 -
              C33545) *
                 C114 +
             (C33548 - C33547 + C33550 - C33549 + C33552 - C33551 + C33554 -
              C33553) *
                 C48304) *
                C23183 +
            ((C48641 * C398 - C33226 * C390 + C48638 * C942 - C33227 * C935 +
              C48629 * C2826 - C33228 * C2820 + C48614 * C3681 -
              C33229 * C3676) *
                 C114 +
             (C48641 * C408 - C33226 * C399 + C48638 * C950 - C33227 * C943 +
              C48629 * C2832 - C33228 * C2827 + C48614 * C3685 -
              C33229 * C3682) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C30336 * C1245 - C30334 * C1249 + C30337 * C1887 -
              C48408 * C1890) *
                 C1071 +
             (C30336 * C1250 - C30334 * C1257 + C30337 * C1891 -
              C48408 * C1896) *
                 C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C48293 * C510 +
           ((C31809 * C1069 + C31810 * C48633 + C31811 * C1070 +
             C31812 * C48621 + (C31802 - C31801 + C31804 - C31803) * C1071 +
             (C31806 - C31805 + C31808 - C31807) * C48598) *
                C23183 +
            ((C30528 - C30527 + C30530 - C30529) * C1069 +
             (C30532 - C30531 + C30534 - C30533) * C48633 +
             (C31568 - C31567 + C31570 - C31569) * C1070 +
             (C31572 - C31571 + C31574 - C31573) * C48621 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C1071 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C48293 * C510 +
           (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C48293 * C510 +
           (((C30520 - C30519 + C30522 - C30521) * C114 +
             (C30524 - C30523 + C30526 - C30525) * C48304) *
                C48639 +
            ((C30528 - C30527 + C30530 - C30529) * C114 +
             (C30532 - C30531 + C30534 - C30533) * C48304) *
                C48632 +
            ((C30536 - C30535 + C30538 - C30537) * C114 +
             (C30540 - C30539 + C30542 - C30541) * C48304) *
                C48619 +
            ((C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                 C114 +
             (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C48293 * C510 +
           (((C33226 * C264 - C48641 * C270 + C33227 * C682 - C48638 * C687 +
              C33228 * C2309 - C48629 * C2315 + C33229 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C33226 * C271 - C48641 * C282 + C33227 * C688 - C48638 * C697 +
              C33228 * C2316 - C48629 * C2327 + C33229 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C23183 +
            ((C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
              C33400) *
                 C114 +
             (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
              C33408) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
              C33237) *
                 C114 +
             (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
              C33245) *
                 C48304) *
                C23183 +
            ((C33247 - C33248 + C33249 - C33250 + C33251 - C33252 + C33253 -
              C33254) *
                 C114 +
             (C33255 - C33256 + C33257 - C33258 + C33259 - C33260 + C33261 -
              C33262) *
                 C48304) *
                C48219) *
               C48293 * C510 +
           (((C33394 - C33393 + C33396 - C33395 + C33398 - C33397 + C33400 -
              C33399) *
                 C114 +
             (C33402 - C33401 + C33404 - C33403 + C33406 - C33405 + C33408 -
              C33407) *
                 C48304) *
                C23183 +
            ((C48641 * C274 - C33226 * C266 + C48638 * C691 - C33227 * C684 +
              C48629 * C2323 - C33228 * C2313 + C48614 * C3267 -
              C33229 * C3262) *
                 C114 +
             (C48641 * C284 - C33226 * C275 + C48638 * C699 - C33227 * C692 +
              C48629 * C2331 - C33228 * C2324 + C48614 * C3271 -
              C33229 * C3268) *
                 C48304) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C31769 - C31770 + C31771 - C31772) * C1070 +
            (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
            C32380 * C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
            C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
               C48219) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C1069 +
            (C31774 - C31773 + C31776 - C31775) * C48633 +
            (C31778 - C31777 + C31780 - C31779) * C1070 +
            (C31782 - C31781 + C31784 - C31783) * C48621 +
            (C32371 - C32372 + C32373 - C32374) * C1071 +
            (C32375 - C32376 + C32377 - C32378) * C48598) *
               C23183 +
           (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
            C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
            (C31805 - C31806 + C31807 - C31808) * C48598) *
               C48219) *
              C48293 * C577 +
          ((C32379 * C1069 + C32380 * C48633 +
            (C32372 - C32371 + C32374 - C32373) * C1070 +
            (C32376 - C32375 + C32378 - C32377) * C48621 +
            (C30334 * C1726 - C30336 * C1723 + C48408 * C9136 -
             C30337 * C9134) *
                C1071 +
            (C30334 * C1732 - C30336 * C1727 + C48408 * C9140 -
             C30337 * C9137) *
                C48598) *
               C23183 +
           (C31811 * C1069 + C31812 * C48633 +
            (C31802 - C31801 + C31804 - C31803) * C1070 +
            (C31806 - C31805 + C31808 - C31807) * C48621 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C1071 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48598) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C48293 * C576 +
          (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                C114 +
            (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                C48304) *
               C48639 +
           ((C30519 - C30520 + C30521 - C30522) * C114 +
            (C30523 - C30524 + C30525 - C30526) * C48304) *
               C48632 +
           ((C30527 - C30528 + C30529 - C30530) * C114 +
            (C30531 - C30532 + C30533 - C30534) * C48304) *
               C48619 +
           ((C30535 - C30536 + C30537 - C30538) * C114 +
            (C30539 - C30540 + C30541 - C30542) * C48304) *
               C48602) *
              C48293 * C577 +
          (((C30334 * C585 - C30336 * C580 + C48408 * C1439 - C30337 * C1435) *
                C114 +
            (C30334 * C595 - C30336 * C586 + C48408 * C1447 - C30337 * C1440) *
                C48304) *
               C48639 +
           ((C30334 * C587 - C30336 * C581 + C48408 * C1441 - C30337 * C1436) *
                C114 +
            (C30334 * C596 - C30336 * C588 + C48408 * C1448 - C30337 * C1442) *
                C48304) *
               C48632 +
           ((C30334 * C589 - C30336 * C582 + C48408 * C1443 - C30337 * C1437) *
                C114 +
            (C30334 * C597 - C30336 * C590 + C48408 * C1449 - C30337 * C1444) *
                C48304) *
               C48619 +
           ((C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                C114 +
            (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                C48304) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C114 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C48304) *
               C23183 +
           ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
             C33238) *
                C114 +
            (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
             C33246) *
                C48304) *
               C48219) *
              C48293 * C576 +
          (((C33226 * C264 - C48641 * C270 + C33227 * C682 - C48638 * C687 +
             C33228 * C2309 - C48629 * C2315 + C33229 * C3260 -
             C48614 * C3263) *
                C114 +
            (C33226 * C271 - C48641 * C282 + C33227 * C688 - C48638 * C697 +
             C33228 * C2316 - C48629 * C2327 + C33229 * C3264 -
             C48614 * C3269) *
                C48304) *
               C23183 +
           ((C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
             C33400) *
                C114 +
            (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
             C33408) *
                C48304) *
               C48219) *
              C48293 * C577 +
          (((C48641 * C585 - C33226 * C580 + C48638 * C1439 - C33227 * C1435 +
             C48629 * C2317 - C33228 * C2310 + C48614 * C10070 -
             C33229 * C10068) *
                C114 +
            (C48641 * C595 - C33226 * C586 + C48638 * C1447 - C33227 * C1440 +
             C48629 * C2328 - C33228 * C2318 + C48614 * C10074 -
             C33229 * C10071) *
                C48304) *
               C23183 +
           ((C48641 * C587 - C33226 * C581 + C48638 * C1441 - C33227 * C1436 +
             C48629 * C2321 - C33228 * C2312 + C48614 * C10072 -
             C33229 * C10069) *
                C114 +
            (C48641 * C596 - C33226 * C588 + C48638 * C1448 - C33227 * C1442 +
             C48629 * C2330 - C33228 * C2322 + C48614 * C10075 -
             C33229 * C10073) *
                C48304) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C32371 - C32372 + C32373 - C32374) * C1071 +
             (C32375 - C32376 + C32377 - C32378) * C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C1069 +
             (C32580 - C32579 + C32582 - C32581) * C48633 +
             (C32584 - C32583 + C32586 - C32585) * C1070 +
             (C32588 - C32587 + C32590 - C32589) * C48621 +
             (C30334 * C1890 - C30336 * C1887 + C48408 * C9620 -
              C30337 * C9618) *
                 C1071 +
             (C30334 * C1896 - C30336 * C1891 + C48408 * C9624 -
              C30337 * C9621) *
                 C48598) *
                C23183 +
            ((C32012 - C32011 + C32014 - C32013) * C1069 +
             (C32016 - C32015 + C32018 - C32017) * C48633 +
             (C32020 - C32019 + C32022 - C32021) * C1070 +
             (C32024 - C32023 + C32026 - C32025) * C48621 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C1071 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C510 +
          ((((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C386 +
           (((C30334 * C687 - C30336 * C682 + C48408 * C2315 - C30337 * C2309) *
                 C114 +
             (C30334 * C697 - C30336 * C688 + C48408 * C2327 - C30337 * C2316) *
                 C48304) *
                C48639 +
            ((C30334 * C689 - C30336 * C683 + C48408 * C2319 - C30337 * C2311) *
                 C114 +
             (C30334 * C698 - C30336 * C690 + C48408 * C2329 - C30337 * C2320) *
                 C48304) *
                C48632 +
            ((C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C114 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48304) *
                C48619 +
            ((C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C114 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C386 +
           (((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
              C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
              C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C23183 +
            ((C33539 - C33540 + C33541 - C33542 + C33543 - C33544 + C33545 -
              C33546) *
                 C114 +
             (C33547 - C33548 + C33549 - C33550 + C33551 - C33552 + C33553 -
              C33554) *
                 C48304) *
                C48219) *
               C48595) *
              C510 +
          ((((C33226 * C264 - C48641 * C270 + C33227 * C682 - C48638 * C687 +
              C33228 * C2309 - C48629 * C2315 + C33229 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C33226 * C271 - C48641 * C282 + C33227 * C688 - C48638 * C697 +
              C33228 * C2316 - C48629 * C2327 + C33229 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C23183 +
            ((C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
              C33400) *
                 C114 +
             (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
              C33408) *
                 C48304) *
                C48219) *
               C386 +
           (((C48641 * C687 - C33226 * C682 + C48638 * C2315 - C33227 * C2309 +
              C48629 * C3263 - C33228 * C3260 + C48614 * C10932 -
              C33229 * C10930) *
                 C114 +
             (C48641 * C697 - C33226 * C688 + C48638 * C2327 - C33227 * C2316 +
              C48629 * C3269 - C33228 * C3264 + C48614 * C10936 -
              C33229 * C10933) *
                 C48304) *
                C23183 +
            ((C48641 * C689 - C33226 * C683 + C48638 * C2319 - C33227 * C2311 +
              C48629 * C3265 - C33228 * C3261 + C48614 * C17530 -
              C33229 * C17529) *
                 C114 +
             (C48641 * C698 - C33226 * C690 + C48638 * C2329 - C33227 * C2320 +
              C48629 * C3270 - C33228 * C3266 + C48614 * C17532 -
              C33229 * C17531) *
                 C48304) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C1069 +
             (C30678 - C30677 + C30680 - C30679) * C48633 +
             (C32012 - C32011 + C32014 - C32013) * C1070 +
             (C32016 - C32015 + C32018 - C32017) * C48621 +
             (C32020 - C32019 + C32022 - C32021) * C1071 +
             (C32024 - C32023 + C32026 - C32025) * C48598) *
                C23183 +
            ((C30682 - C30681 + C30684 - C30683) * C1069 +
             (C30686 - C30685 + C30688 - C30687) * C48633 +
             (C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C1070 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48621 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C1071 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C114 +
             (C30678 - C30677 + C30680 - C30679) * C48304) *
                C48639 +
            ((C30682 - C30681 + C30684 - C30683) * C114 +
             (C30686 - C30685 + C30688 - C30687) * C48304) *
                C48632 +
            ((C30690 - C30689 + C30692 - C30691) * C114 +
             (C30694 - C30693 + C30696 - C30695) * C48304) *
                C48619 +
            ((C30334 * C402 - C30336 * C392 + C48408 * C946 - C30337 * C937) *
                 C114 +
             (C30334 * C410 - C30336 * C403 + C48408 * C952 - C30337 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C784 +
           (((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
              C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
              C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C23183 +
            ((C33539 - C33540 + C33541 - C33542 + C33543 - C33544 + C33545 -
              C33546) *
                 C114 +
             (C33547 - C33548 + C33549 - C33550 + C33551 - C33552 + C33553 -
              C33554) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C33232 - C33231 + C33234 - C33233 + C33236 - C33235 + C33238 -
              C33237) *
                 C114 +
             (C33240 - C33239 + C33242 - C33241 + C33244 - C33243 + C33246 -
              C33245) *
                 C48304) *
                C23183 +
            ((C33247 - C33248 + C33249 - C33250 + C33251 - C33252 + C33253 -
              C33254) *
                 C114 +
             (C33255 - C33256 + C33257 - C33258 + C33259 - C33260 + C33261 -
              C33262) *
                 C48304) *
                C48219) *
               C784 +
           (((C33540 - C33539 + C33542 - C33541 + C33544 - C33543 + C33546 -
              C33545) *
                 C114 +
             (C33548 - C33547 + C33550 - C33549 + C33552 - C33551 + C33554 -
              C33553) *
                 C48304) *
                C23183 +
            ((C48641 * C398 - C33226 * C390 + C48638 * C942 - C33227 * C935 +
              C48629 * C2826 - C33228 * C2820 + C48614 * C3681 -
              C33229 * C3676) *
                 C114 +
             (C48641 * C408 - C33226 * C399 + C48638 * C950 - C33227 * C943 +
              C48629 * C2832 - C33228 * C2827 + C48614 * C3685 -
              C33229 * C3682) *
                 C48304) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C32371 - C32372 + C32373 - C32374) * C1071 +
             (C32375 - C32376 + C32377 - C32378) * C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C1069 +
             (C32580 - C32579 + C32582 - C32581) * C48633 +
             (C32584 - C32583 + C32586 - C32585) * C1070 +
             (C32588 - C32587 + C32590 - C32589) * C48621 +
             (C30334 * C1890 - C30336 * C1887 + C48408 * C9620 -
              C30337 * C9618) *
                 C1071 +
             (C30334 * C1896 - C30336 * C1891 + C48408 * C9624 -
              C30337 * C9621) *
                 C48598) *
                C23183 +
            ((C32012 - C32011 + C32014 - C32013) * C1069 +
             (C32016 - C32015 + C32018 - C32017) * C48633 +
             (C32020 - C32019 + C32022 - C32021) * C1070 +
             (C32024 - C32023 + C32026 - C32025) * C48621 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C1071 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C260 +
          ((((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C784 +
           (((C30334 * C687 - C30336 * C682 + C48408 * C2315 - C30337 * C2309) *
                 C114 +
             (C30334 * C697 - C30336 * C688 + C48408 * C2327 - C30337 * C2316) *
                 C48304) *
                C48639 +
            ((C30334 * C689 - C30336 * C683 + C48408 * C2319 - C30337 * C2311) *
                 C114 +
             (C30334 * C698 - C30336 * C690 + C48408 * C2329 - C30337 * C2320) *
                 C48304) *
                C48632 +
            ((C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C114 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48304) *
                C48619 +
            ((C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C114 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
              C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                 C114 +
             (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
              C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                 C48304) *
                C23183 +
            ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
              C33238) *
                 C114 +
             (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
              C33246) *
                 C48304) *
                C48219) *
               C784 +
           (((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
              C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
              C48614 * C3677) *
                 C114 +
             (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
              C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
              C48614 * C3683) *
                 C48304) *
                C23183 +
            ((C33539 - C33540 + C33541 - C33542 + C33543 - C33544 + C33545 -
              C33546) *
                 C114 +
             (C33547 - C33548 + C33549 - C33550 + C33551 - C33552 + C33553 -
              C33554) *
                 C48304) *
                C48219) *
               C48595) *
              C260 +
          ((((C33226 * C264 - C48641 * C270 + C33227 * C682 - C48638 * C687 +
              C33228 * C2309 - C48629 * C2315 + C33229 * C3260 -
              C48614 * C3263) *
                 C114 +
             (C33226 * C271 - C48641 * C282 + C33227 * C688 - C48638 * C697 +
              C33228 * C2316 - C48629 * C2327 + C33229 * C3264 -
              C48614 * C3269) *
                 C48304) *
                C23183 +
            ((C33393 - C33394 + C33395 - C33396 + C33397 - C33398 + C33399 -
              C33400) *
                 C114 +
             (C33401 - C33402 + C33403 - C33404 + C33405 - C33406 + C33407 -
              C33408) *
                 C48304) *
                C48219) *
               C784 +
           (((C48641 * C687 - C33226 * C682 + C48638 * C2315 - C33227 * C2309 +
              C48629 * C3263 - C33228 * C3260 + C48614 * C10932 -
              C33229 * C10930) *
                 C114 +
             (C48641 * C697 - C33226 * C688 + C48638 * C2327 - C33227 * C2316 +
              C48629 * C3269 - C33228 * C3264 + C48614 * C10936 -
              C33229 * C10933) *
                 C48304) *
                C23183 +
            ((C48641 * C689 - C33226 * C683 + C48638 * C2319 - C33227 * C2311 +
              C48629 * C3265 - C33228 * C3261 + C48614 * C17530 -
              C33229 * C17529) *
                 C114 +
             (C48641 * C698 - C33226 * C690 + C48638 * C2329 - C33227 * C2320 +
              C48629 * C3270 - C33228 * C3266 + C48614 * C17532 -
              C33229 * C17531) *
                 C48304) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C31769 - C31770 + C31771 - C31772) * C1070 +
            (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
            C32380 * C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
            C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
               C48219) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C1069 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48633 +
            (C32575 - C32576 + C32577 - C32578) * C1070 +
            (C32579 - C32580 + C32581 - C32582) * C48621 +
            (C32583 - C32584 + C32585 - C32586) * C1071 +
            (C32587 - C32588 + C32589 - C32590) * C48598) *
               C23183 +
           ((C30673 - C30674 + C30675 - C30676) * C1069 +
            (C30677 - C30678 + C30679 - C30680) * C48633 +
            (C32011 - C32012 + C32013 - C32014) * C1070 +
            (C32015 - C32016 + C32017 - C32018) * C48621 +
            (C32019 - C32020 + C32021 - C32022) * C1071 +
            (C32023 - C32024 + C32025 - C32026) * C48598) *
               C48219) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C1069 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48633 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C1070 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48621 +
            (C30334 * C2317 - C30336 * C2310 + C48408 * C10070 -
             C30337 * C10068) *
                C1071 +
            (C30334 * C2328 - C30336 * C2318 + C48408 * C10074 -
             C30337 * C10071) *
                C48598) *
               C23183 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C1069 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48633 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C1070 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48621 +
            (C30334 * C2321 - C30336 * C2312 + C48408 * C10072 -
             C30337 * C10069) *
                C1071 +
            (C30334 * C2330 - C30336 * C2322 + C48408 * C10075 -
             C30337 * C10073) *
                C48598) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C114 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48304) *
               C48639 +
           ((C30673 - C30674 + C30675 - C30676) * C114 +
            (C30677 - C30678 + C30679 - C30680) * C48304) *
               C48632 +
           ((C30681 - C30682 + C30683 - C30684) * C114 +
            (C30685 - C30686 + C30687 - C30688) * C48304) *
               C48619 +
           ((C30689 - C30690 + C30691 - C30692) * C114 +
            (C30693 - C30694 + C30695 - C30696) * C48304) *
               C48602) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C114 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48304) *
               C48639 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C114 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48304) *
               C48632 +
           ((C30334 * C942 - C30336 * C935 + C48408 * C2826 - C30337 * C2820) *
                C114 +
            (C30334 * C950 - C30336 * C943 + C48408 * C2832 - C30337 * C2827) *
                C48304) *
               C48619 +
           ((C30334 * C944 - C30336 * C936 + C48408 * C2828 - C30337 * C2821) *
                C114 +
            (C30334 * C951 - C30336 * C945 + C48408 * C2833 - C30337 * C2829) *
                C48304) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C48641 * C122 - C33226 * C115 + C48638 * C394 - C33227 * C388 +
             C48629 * C938 - C33228 * C933 + C48614 * C2822 - C33229 * C2818) *
                C114 +
            (C48641 * C136 - C33226 * C123 + C48638 * C406 - C33227 * C395 +
             C48629 * C948 - C33228 * C939 + C48614 * C2830 - C33229 * C2823) *
                C48304) *
               C23183 +
           ((C33231 - C33232 + C33233 - C33234 + C33235 - C33236 + C33237 -
             C33238) *
                C114 +
            (C33239 - C33240 + C33241 - C33242 + C33243 - C33244 + C33245 -
             C33246) *
                C48304) *
               C48219) *
              C930 +
          (((C33226 * C388 - C48641 * C394 + C33227 * C933 - C48638 * C938 +
             C33228 * C2818 - C48629 * C2822 + C33229 * C3674 -
             C48614 * C3677) *
                C114 +
            (C33226 * C395 - C48641 * C406 + C33227 * C939 - C48638 * C948 +
             C33228 * C2823 - C48629 * C2830 + C33229 * C3678 -
             C48614 * C3683) *
                C48304) *
               C23183 +
           ((C33539 - C33540 + C33541 - C33542 + C33543 - C33544 + C33545 -
             C33546) *
                C114 +
            (C33547 - C33548 + C33549 - C33550 + C33551 - C33552 + C33553 -
             C33554) *
                C48304) *
               C48219) *
              C931 +
          (((C48641 * C938 - C33226 * C933 + C48638 * C2822 - C33227 * C2818 +
             C48629 * C3677 - C33228 * C3674 + C48614 * C17617 -
             C33229 * C17615) *
                C114 +
            (C48641 * C948 - C33226 * C939 + C48638 * C2830 - C33227 * C2823 +
             C48629 * C3683 - C33228 * C3678 + C48614 * C17621 -
             C33229 * C17618) *
                C48304) *
               C23183 +
           ((C48641 * C940 - C33226 * C934 + C48638 * C2824 - C33227 * C2819 +
             C48629 * C3679 - C33228 * C3675 + C48614 * C17619 -
             C33229 * C17616) *
                C114 +
            (C48641 * C949 - C33226 * C941 + C48638 * C2831 - C33227 * C2825 +
             C48629 * C3684 - C33228 * C3680 + C48614 * C17622 -
             C33229 * C17620) *
                C48304) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C114 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48304) *
               C48214 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
               C48222 +
           C36064 * C25914) *
              C48293 * C48276 * C110 +
          (((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C114 +
            (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48304) *
               C48214 +
           ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C114 +
            (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48304) *
               C48222 +
           ((C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C114 +
            (C36046 - C36047 + C36048 - C36049 + C36050 - C36051) * C48304) *
               C25914) *
              C48293 * C48276 * C111 +
          (C36064 * C48214 +
           ((C36041 - C36040 + C36043 - C36042 + C36045 - C36044) * C114 +
            (C36047 - C36046 + C36049 - C36048 + C36051 - C36050) * C48304) *
               C48222 +
           ((C48404 * C130 - C47360 * C119 + C48411 * C402 - C47352 * C392 +
             C36011 * C946 - C47366 * C937) *
                C114 +
            (C48404 * C140 - C47360 * C131 + C48411 * C410 - C47352 * C403 +
             C36011 * C952 - C47366 * C947) *
                C48304) *
               C25914) *
              C48293 * C48276 * C112)) /
        (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C48293 * C260 +
           (((C47360 * C264 - C48404 * C270 + C47352 * C682 - C48411 * C687 +
              C47366 * C2309 - C36011 * C2315) *
                 C114 +
             (C47360 * C271 - C48404 * C282 + C47352 * C688 - C48411 * C697 +
              C47366 * C2316 - C36011 * C2327) *
                 C48304) *
                C48214 +
            ((C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C114 +
             (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48304) *
                C48222 +
            ((C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C114 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48304) *
                C25914) *
               C48293 * C48593) *
              C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C114 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48304) *
                C48214 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C114 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48304) *
                C48222 +
            ((C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C114 +
             (C36046 - C36047 + C36048 - C36049 + C36050 - C36051) * C48304) *
                C25914) *
               C48293 * C260 +
           (((C36212 - C36211 + C36214 - C36213 + C36216 - C36215) * C114 +
             (C36218 - C36217 + C36220 - C36219 + C36222 - C36221) * C48304) *
                C48214 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C114 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48304) *
                C48222 +
            ((C48404 * C276 - C47360 * C267 + C48411 * C693 - C47352 * C685 +
              C36011 * C2645 - C47366 * C2644) *
                 C114 +
             (C48404 * C285 - C47360 * C277 + C48411 * C700 - C47352 * C694 +
              C36011 * C2647 - C47366 * C2646) *
                 C48304) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C114 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48304) *
                C48214 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C114 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48304) *
                C48222 +
            ((C36393 - C36394 + C36395 - C36396 + C36397 - C36398) * C114 +
             (C36399 - C36400 + C36401 - C36402 + C36403 - C36404) * C48304) *
                C25914) *
               C48595) *
              C48276 * C262 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C114 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48304) *
                C48214 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C114 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48304) *
                C48222 +
            ((C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C114 +
             (C36046 - C36047 + C36048 - C36049 + C36050 - C36051) * C48304) *
                C25914) *
               C386 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C114 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48304) *
                C48214 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C114 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C48304) *
                C48222 +
            ((C48404 * C400 - C47360 * C391 + C48411 * C944 - C47352 * C936 +
              C36011 * C2828 - C47366 * C2821) *
                 C114 +
             (C48404 * C409 - C47360 * C401 + C48411 * C951 - C47352 * C945 +
              C36011 * C2833 - C47366 * C2829) *
                 C48304) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C48293 * C510 +
           (((C47360 * C264 - C48404 * C270 + C47352 * C682 - C48411 * C687 +
              C47366 * C2309 - C36011 * C2315) *
                 C114 +
             (C47360 * C271 - C48404 * C282 + C47352 * C688 - C48411 * C697 +
              C47366 * C2316 - C36011 * C2327) *
                 C48304) *
                C48214 +
            ((C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C114 +
             (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48304) *
                C48222 +
            ((C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C114 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48304) *
                C25914) *
               C48293 * C48593) *
              C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C114 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48304) *
                C48214 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C114 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48304) *
                C48222 +
            ((C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C114 +
             (C36046 - C36047 + C36048 - C36049 + C36050 - C36051) * C48304) *
                C25914) *
               C48293 * C510 +
           (((C36212 - C36211 + C36214 - C36213 + C36216 - C36215) * C114 +
             (C36218 - C36217 + C36220 - C36219 + C36222 - C36221) * C48304) *
                C48214 +
            ((C36224 - C36223 + C36226 - C36225 + C36228 - C36227) * C114 +
             (C36230 - C36229 + C36232 - C36231 + C36234 - C36233) * C48304) *
                C48222 +
            ((C48404 * C276 - C47360 * C267 + C48411 * C693 - C47352 * C685 +
              C36011 * C2645 - C47366 * C2644) *
                 C114 +
             (C48404 * C285 - C47360 * C277 + C48411 * C700 - C47352 * C694 +
              C36011 * C2647 - C47366 * C2646) *
                 C48304) *
                C25914) *
               C48293 * C48593) *
              C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C114 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48304) *
               C48214 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
               C48222 +
           C36064 * C25914) *
              C48293 * C576 +
          (((C47360 * C264 - C48404 * C270 + C47352 * C682 - C48411 * C687 +
             C47366 * C2309 - C36011 * C2315) *
                C114 +
            (C47360 * C271 - C48404 * C282 + C47352 * C688 - C48411 * C697 +
             C47366 * C2316 - C36011 * C2327) *
                C48304) *
               C48214 +
           ((C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C114 +
            (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48304) *
               C48222 +
           ((C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C114 +
            (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48304) *
               C25914) *
              C48293 * C577 +
          (((C48404 * C585 - C47360 * C580 + C48411 * C1439 - C47352 * C1435 +
             C36011 * C2317 - C47366 * C2310) *
                C114 +
            (C48404 * C595 - C47360 * C586 + C48411 * C1447 - C47352 * C1440 +
             C36011 * C2328 - C47366 * C2318) *
                C48304) *
               C48214 +
           ((C48404 * C587 - C47360 * C581 + C48411 * C1441 - C47352 * C1436 +
             C36011 * C2321 - C47366 * C2312) *
                C114 +
            (C48404 * C596 - C47360 * C588 + C48411 * C1448 - C47352 * C1442 +
             C36011 * C2330 - C47366 * C2322) *
                C48304) *
               C48222 +
           ((C48404 * C589 - C47360 * C582 + C48411 * C1443 - C47352 * C1437 +
             C36011 * C2325 - C47366 * C2314) *
                C114 +
            (C48404 * C597 - C47360 * C590 + C48411 * C1449 - C47352 * C1444 +
             C36011 * C2332 - C47366 * C2326) *
                C48304) *
               C25914) *
              C48293 * C578) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C386 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C114 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48304) *
                C48214 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C114 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48304) *
                C48222 +
            ((C36393 - C36394 + C36395 - C36396 + C36397 - C36398) * C114 +
             (C36399 - C36400 + C36401 - C36402 + C36403 - C36404) * C48304) *
                C25914) *
               C48595) *
              C510 +
          ((((C47360 * C264 - C48404 * C270 + C47352 * C682 - C48411 * C687 +
              C47366 * C2309 - C36011 * C2315) *
                 C114 +
             (C47360 * C271 - C48404 * C282 + C47352 * C688 - C48411 * C697 +
              C47366 * C2316 - C36011 * C2327) *
                 C48304) *
                C48214 +
            ((C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C114 +
             (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48304) *
                C48222 +
            ((C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C114 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48304) *
                C25914) *
               C386 +
           (((C48404 * C687 - C47360 * C682 + C48411 * C2315 - C47352 * C2309 +
              C36011 * C3263 - C47366 * C3260) *
                 C114 +
             (C48404 * C697 - C47360 * C688 + C48411 * C2327 - C47352 * C2316 +
              C36011 * C3269 - C47366 * C3264) *
                 C48304) *
                C48214 +
            ((C48404 * C689 - C47360 * C683 + C48411 * C2319 - C47352 * C2311 +
              C36011 * C3265 - C47366 * C3261) *
                 C114 +
             (C48404 * C698 - C47360 * C690 + C48411 * C2329 - C47352 * C2320 +
              C36011 * C3270 - C47366 * C3266) *
                 C48304) *
                C48222 +
            ((C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C114 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48304) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C114 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48304) *
                C48214 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C114 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48304) *
                C48222 +
            ((C36393 - C36394 + C36395 - C36396 + C36397 - C36398) * C114 +
             (C36399 - C36400 + C36401 - C36402 + C36403 - C36404) * C48304) *
                C25914) *
               C48595) *
              C48276 * C512 +
          ((((C36017 - C36016 + C36019 - C36018 + C36021 - C36020) * C114 +
             (C36023 - C36022 + C36025 - C36024 + C36027 - C36026) * C48304) *
                C48214 +
            ((C36029 - C36028 + C36031 - C36030 + C36033 - C36032) * C114 +
             (C36035 - C36034 + C36037 - C36036 + C36039 - C36038) * C48304) *
                C48222 +
            ((C36040 - C36041 + C36042 - C36043 + C36044 - C36045) * C114 +
             (C36046 - C36047 + C36048 - C36049 + C36050 - C36051) * C48304) *
                C25914) *
               C784 +
           (((C36382 - C36381 + C36384 - C36383 + C36386 - C36385) * C114 +
             (C36388 - C36387 + C36390 - C36389 + C36392 - C36391) * C48304) *
                C48214 +
            ((C36394 - C36393 + C36396 - C36395 + C36398 - C36397) * C114 +
             (C36400 - C36399 + C36402 - C36401 + C36404 - C36403) * C48304) *
                C48222 +
            ((C48404 * C400 - C47360 * C391 + C48411 * C944 - C47352 * C936 +
              C36011 * C2828 - C47366 * C2821) *
                 C114 +
             (C48404 * C409 - C47360 * C401 + C48411 * C951 - C47352 * C945 +
              C36011 * C2833 - C47366 * C2829) *
                 C48304) *
                C25914) *
               C48595) *
              C48276 * C48591)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
              C36011 * C938 - C47366 * C933) *
                 C114 +
             (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
              C36011 * C948 - C47366 * C939) *
                 C48304) *
                C48214 +
            ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
             (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
                C48222 +
            C36064 * C25914) *
               C784 +
           (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
              C47366 * C2818 - C36011 * C2822) *
                 C114 +
             (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
              C47366 * C2823 - C36011 * C2830) *
                 C48304) *
                C48214 +
            ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C114 +
             (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48304) *
                C48222 +
            ((C36393 - C36394 + C36395 - C36396 + C36397 - C36398) * C114 +
             (C36399 - C36400 + C36401 - C36402 + C36403 - C36404) * C48304) *
                C25914) *
               C48595) *
              C260 +
          ((((C47360 * C264 - C48404 * C270 + C47352 * C682 - C48411 * C687 +
              C47366 * C2309 - C36011 * C2315) *
                 C114 +
             (C47360 * C271 - C48404 * C282 + C47352 * C688 - C48411 * C697 +
              C47366 * C2316 - C36011 * C2327) *
                 C48304) *
                C48214 +
            ((C36211 - C36212 + C36213 - C36214 + C36215 - C36216) * C114 +
             (C36217 - C36218 + C36219 - C36220 + C36221 - C36222) * C48304) *
                C48222 +
            ((C36223 - C36224 + C36225 - C36226 + C36227 - C36228) * C114 +
             (C36229 - C36230 + C36231 - C36232 + C36233 - C36234) * C48304) *
                C25914) *
               C784 +
           (((C48404 * C687 - C47360 * C682 + C48411 * C2315 - C47352 * C2309 +
              C36011 * C3263 - C47366 * C3260) *
                 C114 +
             (C48404 * C697 - C47360 * C688 + C48411 * C2327 - C47352 * C2316 +
              C36011 * C3269 - C47366 * C3264) *
                 C48304) *
                C48214 +
            ((C48404 * C689 - C47360 * C683 + C48411 * C2319 - C47352 * C2311 +
              C36011 * C3265 - C47366 * C3261) *
                 C114 +
             (C48404 * C698 - C47360 * C690 + C48411 * C2329 - C47352 * C2320 +
              C36011 * C3270 - C47366 * C3266) *
                 C48304) *
                C48222 +
            ((C48404 * C691 - C47360 * C684 + C48411 * C2323 - C47352 * C2313 +
              C36011 * C3267 - C47366 * C3262) *
                 C114 +
             (C48404 * C699 - C47360 * C692 + C48411 * C2331 - C47352 * C2324 +
              C36011 * C3271 - C47366 * C3268) *
                 C48304) *
                C25914) *
               C48595) *
              C48593) *
         C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C48404 * C122 - C47360 * C115 + C48411 * C394 - C47352 * C388 +
             C36011 * C938 - C47366 * C933) *
                C114 +
            (C48404 * C136 - C47360 * C123 + C48411 * C406 - C47352 * C395 +
             C36011 * C948 - C47366 * C939) *
                C48304) *
               C48214 +
           ((C36016 - C36017 + C36018 - C36019 + C36020 - C36021) * C114 +
            (C36022 - C36023 + C36024 - C36025 + C36026 - C36027) * C48304) *
               C48222 +
           C36064 * C25914) *
              C930 +
          (((C47360 * C388 - C48404 * C394 + C47352 * C933 - C48411 * C938 +
             C47366 * C2818 - C36011 * C2822) *
                C114 +
            (C47360 * C395 - C48404 * C406 + C47352 * C939 - C48411 * C948 +
             C47366 * C2823 - C36011 * C2830) *
                C48304) *
               C48214 +
           ((C36381 - C36382 + C36383 - C36384 + C36385 - C36386) * C114 +
            (C36387 - C36388 + C36389 - C36390 + C36391 - C36392) * C48304) *
               C48222 +
           ((C36393 - C36394 + C36395 - C36396 + C36397 - C36398) * C114 +
            (C36399 - C36400 + C36401 - C36402 + C36403 - C36404) * C48304) *
               C25914) *
              C931 +
          (((C48404 * C938 - C47360 * C933 + C48411 * C2822 - C47352 * C2818 +
             C36011 * C3677 - C47366 * C3674) *
                C114 +
            (C48404 * C948 - C47360 * C939 + C48411 * C2830 - C47352 * C2823 +
             C36011 * C3683 - C47366 * C3678) *
                C48304) *
               C48214 +
           ((C48404 * C940 - C47360 * C934 + C48411 * C2824 - C47352 * C2819 +
             C36011 * C3679 - C47366 * C3675) *
                C114 +
            (C48404 * C949 - C47360 * C941 + C48411 * C2831 - C47352 * C2825 +
             C36011 * C3684 - C47366 * C3680) *
                C48304) *
               C48222 +
           ((C48404 * C942 - C47360 * C935 + C48411 * C2826 - C47352 * C2820 +
             C36011 * C3681 - C47366 * C3676) *
                C114 +
            (C48404 * C950 - C47360 * C943 + C48411 * C2832 - C47352 * C2827 +
             C36011 * C3685 - C47366 * C3682) *
                C48304) *
               C25914) *
              C932) *
         C48276 * C48242) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C114 +
            (C30344 - C30343 + C30346 - C30345) * C48304) *
               C48639 +
           ((C30348 - C30347 + C30350 - C30349) * C114 +
            (C30352 - C30351 + C30354 - C30353) * C48304) *
               C48632 +
           ((C30356 - C30355 + C30358 - C30357) * C114 +
            (C30360 - C30359 + C30362 - C30361) * C48304) *
               C48619 +
           ((C30363 - C30364 + C30365 - C30366) * C114 +
            (C30367 - C30368 + C30369 - C30370) * C48304) *
               C48602) *
              C48293 * C48276 * C111 +
          (C30387 * C48639 + C30388 * C48632 +
           ((C30364 - C30363 + C30366 - C30365) * C114 +
            (C30368 - C30367 + C30370 - C30369) * C48304) *
               C48619 +
           ((C30334 * C132 - C30336 * C120 + C48408 * C404 - C30337 * C393) *
                C114 +
            (C30334 * C141 - C30336 * C133 + C48408 * C411 - C30337 * C405) *
                C48304) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C30334 * C270 - C30336 * C264 + C48408 * C687 - C30337 * C682) *
                C1070 +
            (C30334 * C282 - C30336 * C271 + C48408 * C697 - C30337 * C688) *
                C48621 +
            (C30334 * C585 - C30336 * C580 + C48408 * C1439 - C30337 * C1435) *
                C1071 +
            (C30334 * C595 - C30336 * C586 + C48408 * C1447 - C30337 * C1440) *
                C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 +
            (C30520 - C30519 + C30522 - C30521) * C1070 +
            (C30524 - C30523 + C30526 - C30525) * C48621 +
            (C31559 - C31560 + C31561 - C31562) * C1071 +
            (C31563 - C31564 + C31565 - C31566) * C48598) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C30340 - C30339 + C30342 - C30341) * C1069 +
            (C30344 - C30343 + C30346 - C30345) * C48633 +
            (C30519 - C30520 + C30521 - C30522) * C1070 +
            (C30523 - C30524 + C30525 - C30526) * C48621 +
            (C31560 - C31559 + C31562 - C31561) * C1071 +
            (C31564 - C31563 + C31566 - C31565) * C48598) *
               C23183 +
           ((C30348 - C30347 + C30350 - C30349) * C1069 +
            (C30352 - C30351 + C30354 - C30353) * C48633 +
            (C30527 - C30528 + C30529 - C30530) * C1070 +
            (C30531 - C30532 + C30533 - C30534) * C48621 +
            (C31567 - C31568 + C31569 - C31570) * C1071 +
            (C31571 - C31572 + C31573 - C31574) * C48598) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C30379 * C1069 + C30380 * C48633 +
            (C30528 - C30527 + C30530 - C30529) * C1070 +
            (C30532 - C30531 + C30534 - C30533) * C48621 +
            (C31568 - C31567 + C31570 - C31569) * C1071 +
            (C31572 - C31571 + C31574 - C31573) * C48598) *
               C23183 +
           (C30381 * C1069 + C30382 * C48633 +
            (C30536 - C30535 + C30538 - C30537) * C1070 +
            (C30540 - C30539 + C30542 - C30541) * C48621 +
            (C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                C1071 +
            (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                C48598) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C48293 * C260 +
           (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C48293 * C260 +
           (((C30520 - C30519 + C30522 - C30521) * C114 +
             (C30524 - C30523 + C30526 - C30525) * C48304) *
                C48639 +
            ((C30528 - C30527 + C30530 - C30529) * C114 +
             (C30532 - C30531 + C30534 - C30533) * C48304) *
                C48632 +
            ((C30536 - C30535 + C30538 - C30537) * C114 +
             (C30540 - C30539 + C30542 - C30541) * C48304) *
                C48619 +
            ((C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                 C114 +
             (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C48293 * C260 +
           (((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C30336 * C1245 - C30334 * C1249 + C30337 * C1887 -
              C48408 * C1890) *
                 C1071 +
             (C30336 * C1250 - C30334 * C1257 + C30337 * C1891 -
              C48408 * C1896) *
                 C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C48293 * C260 +
           ((C31809 * C1069 + C31810 * C48633 + C31811 * C1070 +
             C31812 * C48621 + (C31802 - C31801 + C31804 - C31803) * C1071 +
             (C31806 - C31805 + C31808 - C31807) * C48598) *
                C23183 +
            ((C30528 - C30527 + C30530 - C30529) * C1069 +
             (C30532 - C30531 + C30534 - C30533) * C48633 +
             (C31568 - C31567 + C31570 - C31569) * C1070 +
             (C31572 - C31571 + C31574 - C31573) * C48621 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C1071 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C114 +
             (C30678 - C30677 + C30680 - C30679) * C48304) *
                C48639 +
            ((C30682 - C30681 + C30684 - C30683) * C114 +
             (C30686 - C30685 + C30688 - C30687) * C48304) *
                C48632 +
            ((C30690 - C30689 + C30692 - C30691) * C114 +
             (C30694 - C30693 + C30696 - C30695) * C48304) *
                C48619 +
            ((C30334 * C402 - C30336 * C392 + C48408 * C946 - C30337 * C937) *
                 C114 +
             (C30334 * C410 - C30336 * C403 + C48408 * C952 - C30337 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C30336 * C682 - C30334 * C687 + C30337 * C2309 - C48408 * C2315) *
                 C1070 +
             (C30336 * C688 - C30334 * C697 + C30337 * C2316 - C48408 * C2327) *
                 C48621 +
             (C30336 * C1435 - C30334 * C1439 + C30337 * C2310 -
              C48408 * C2317) *
                 C1071 +
             (C30336 * C1440 - C30334 * C1447 + C30337 * C2318 -
              C48408 * C2328) *
                 C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C386 +
           (((C30674 - C30673 + C30676 - C30675) * C1069 +
             (C30678 - C30677 + C30680 - C30679) * C48633 +
             (C32012 - C32011 + C32014 - C32013) * C1070 +
             (C32016 - C32015 + C32018 - C32017) * C48621 +
             (C32020 - C32019 + C32022 - C32021) * C1071 +
             (C32024 - C32023 + C32026 - C32025) * C48598) *
                C23183 +
            ((C30682 - C30681 + C30684 - C30683) * C1069 +
             (C30686 - C30685 + C30688 - C30687) * C48633 +
             (C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C1070 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48621 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C1071 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C48293 * C510 +
           (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C48293 * C510 +
           (((C30520 - C30519 + C30522 - C30521) * C114 +
             (C30524 - C30523 + C30526 - C30525) * C48304) *
                C48639 +
            ((C30528 - C30527 + C30530 - C30529) * C114 +
             (C30532 - C30531 + C30534 - C30533) * C48304) *
                C48632 +
            ((C30536 - C30535 + C30538 - C30537) * C114 +
             (C30540 - C30539 + C30542 - C30541) * C48304) *
                C48619 +
            ((C30334 * C278 - C30336 * C268 + C48408 * C695 - C30337 * C686) *
                 C114 +
             (C30334 * C286 - C30336 * C279 + C48408 * C701 - C30337 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 +
             (C31777 - C31778 + C31779 - C31780) * C1071 +
             (C31781 - C31782 + C31783 - C31784) * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C48293 * C510 +
           (((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C30336 * C1245 - C30334 * C1249 + C30337 * C1887 -
              C48408 * C1890) *
                 C1071 +
             (C30336 * C1250 - C30334 * C1257 + C30337 * C1891 -
              C48408 * C1896) *
                 C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C48293 * C510 +
           ((C31809 * C1069 + C31810 * C48633 + C31811 * C1070 +
             C31812 * C48621 + (C31802 - C31801 + C31804 - C31803) * C1071 +
             (C31806 - C31805 + C31808 - C31807) * C48598) *
                C23183 +
            ((C30528 - C30527 + C30530 - C30529) * C1069 +
             (C30532 - C30531 + C30534 - C30533) * C48633 +
             (C31568 - C31567 + C31570 - C31569) * C1070 +
             (C31572 - C31571 + C31574 - C31573) * C48621 +
             (C30334 * C1253 - C30336 * C1247 + C48408 * C1894 -
              C30337 * C1889) *
                 C1071 +
             (C30334 * C1259 - C30336 * C1254 + C48408 * C1898 -
              C30337 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C48293 * C576 +
          (((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                C114 +
            (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                C48304) *
               C48639 +
           ((C30519 - C30520 + C30521 - C30522) * C114 +
            (C30523 - C30524 + C30525 - C30526) * C48304) *
               C48632 +
           ((C30527 - C30528 + C30529 - C30530) * C114 +
            (C30531 - C30532 + C30533 - C30534) * C48304) *
               C48619 +
           ((C30535 - C30536 + C30537 - C30538) * C114 +
            (C30539 - C30540 + C30541 - C30542) * C48304) *
               C48602) *
              C48293 * C577 +
          (((C30334 * C585 - C30336 * C580 + C48408 * C1439 - C30337 * C1435) *
                C114 +
            (C30334 * C595 - C30336 * C586 + C48408 * C1447 - C30337 * C1440) *
                C48304) *
               C48639 +
           ((C30334 * C587 - C30336 * C581 + C48408 * C1441 - C30337 * C1436) *
                C114 +
            (C30334 * C596 - C30336 * C588 + C48408 * C1448 - C30337 * C1442) *
                C48304) *
               C48632 +
           ((C30334 * C589 - C30336 * C582 + C48408 * C1443 - C30337 * C1437) *
                C114 +
            (C30334 * C597 - C30336 * C590 + C48408 * C1449 - C30337 * C1444) *
                C48304) *
               C48619 +
           ((C30334 * C591 - C30336 * C583 + C48408 * C1445 - C30337 * C1438) *
                C114 +
            (C30334 * C598 - C30336 * C592 + C48408 * C1450 - C30337 * C1446) *
                C48304) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C31769 - C31770 + C31771 - C31772) * C1070 +
            (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
            C32380 * C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
            C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
               C48219) *
              C48293 * C576 +
          (((C31770 - C31769 + C31772 - C31771) * C1069 +
            (C31774 - C31773 + C31776 - C31775) * C48633 +
            (C31778 - C31777 + C31780 - C31779) * C1070 +
            (C31782 - C31781 + C31784 - C31783) * C48621 +
            (C32371 - C32372 + C32373 - C32374) * C1071 +
            (C32375 - C32376 + C32377 - C32378) * C48598) *
               C23183 +
           (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
            C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
            (C31805 - C31806 + C31807 - C31808) * C48598) *
               C48219) *
              C48293 * C577 +
          ((C32379 * C1069 + C32380 * C48633 +
            (C32372 - C32371 + C32374 - C32373) * C1070 +
            (C32376 - C32375 + C32378 - C32377) * C48621 +
            (C30334 * C1726 - C30336 * C1723 + C48408 * C9136 -
             C30337 * C9134) *
                C1071 +
            (C30334 * C1732 - C30336 * C1727 + C48408 * C9140 -
             C30337 * C9137) *
                C48598) *
               C23183 +
           (C31811 * C1069 + C31812 * C48633 +
            (C31802 - C31801 + C31804 - C31803) * C1070 +
            (C31806 - C31805 + C31808 - C31807) * C48621 +
            (C30334 * C1728 - C30336 * C1724 + C48408 * C9138 -
             C30337 * C9135) *
                C1071 +
            (C30334 * C1733 - C30336 * C1729 + C48408 * C9141 -
             C30337 * C9139) *
                C48598) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C510 +
          ((((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C386 +
           (((C30334 * C687 - C30336 * C682 + C48408 * C2315 - C30337 * C2309) *
                 C114 +
             (C30334 * C697 - C30336 * C688 + C48408 * C2327 - C30337 * C2316) *
                 C48304) *
                C48639 +
            ((C30334 * C689 - C30336 * C683 + C48408 * C2319 - C30337 * C2311) *
                 C114 +
             (C30334 * C698 - C30336 * C690 + C48408 * C2329 - C30337 * C2320) *
                 C48304) *
                C48632 +
            ((C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C114 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48304) *
                C48619 +
            ((C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C114 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C386 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C510 +
          ((((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C32371 - C32372 + C32373 - C32374) * C1071 +
             (C32375 - C32376 + C32377 - C32378) * C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C386 +
           (((C32576 - C32575 + C32578 - C32577) * C1069 +
             (C32580 - C32579 + C32582 - C32581) * C48633 +
             (C32584 - C32583 + C32586 - C32585) * C1070 +
             (C32588 - C32587 + C32590 - C32589) * C48621 +
             (C30334 * C1890 - C30336 * C1887 + C48408 * C9620 -
              C30337 * C9618) *
                 C1071 +
             (C30334 * C1896 - C30336 * C1891 + C48408 * C9624 -
              C30337 * C9621) *
                 C48598) *
                C23183 +
            ((C32012 - C32011 + C32014 - C32013) * C1069 +
             (C32016 - C32015 + C32018 - C32017) * C48633 +
             (C32020 - C32019 + C32022 - C32021) * C1070 +
             (C32024 - C32023 + C32026 - C32025) * C48621 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C1071 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C114 +
             (C30344 - C30343 + C30346 - C30345) * C48304) *
                C48639 +
            ((C30348 - C30347 + C30350 - C30349) * C114 +
             (C30352 - C30351 + C30354 - C30353) * C48304) *
                C48632 +
            ((C30356 - C30355 + C30358 - C30357) * C114 +
             (C30360 - C30359 + C30362 - C30361) * C48304) *
                C48619 +
            ((C30363 - C30364 + C30365 - C30366) * C114 +
             (C30367 - C30368 + C30369 - C30370) * C48304) *
                C48602) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C114 +
             (C30678 - C30677 + C30680 - C30679) * C48304) *
                C48639 +
            ((C30682 - C30681 + C30684 - C30683) * C114 +
             (C30686 - C30685 + C30688 - C30687) * C48304) *
                C48632 +
            ((C30690 - C30689 + C30692 - C30691) * C114 +
             (C30694 - C30693 + C30696 - C30695) * C48304) *
                C48619 +
            ((C30334 * C402 - C30336 * C392 + C48408 * C946 - C30337 * C937) *
                 C114 +
             (C30334 * C410 - C30336 * C403 + C48408 * C952 - C30337 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C30340 - C30339 + C30342 - C30341) * C1069 +
             (C30344 - C30343 + C30346 - C30345) * C48633 + C31813 * C1070 +
             C31814 * C48621 + C31815 * C1071 + C31816 * C48598) *
                C23183 +
            ((C30348 - C30347 + C30350 - C30349) * C1069 +
             (C30352 - C30351 + C30354 - C30353) * C48633 +
             (C30527 - C30528 + C30529 - C30530) * C1070 +
             (C30531 - C30532 + C30533 - C30534) * C48621 +
             (C31567 - C31568 + C31569 - C31570) * C1071 +
             (C31571 - C31572 + C31573 - C31574) * C48598) *
                C48219) *
               C784 +
           (((C30674 - C30673 + C30676 - C30675) * C1069 +
             (C30678 - C30677 + C30680 - C30679) * C48633 +
             (C32012 - C32011 + C32014 - C32013) * C1070 +
             (C32016 - C32015 + C32018 - C32017) * C48621 +
             (C32020 - C32019 + C32022 - C32021) * C1071 +
             (C32024 - C32023 + C32026 - C32025) * C48598) *
                C23183 +
            ((C30682 - C30681 + C30684 - C30683) * C1069 +
             (C30686 - C30685 + C30688 - C30687) * C48633 +
             (C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C1070 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48621 +
             (C30334 * C1443 - C30336 * C1437 + C48408 * C2325 -
              C30337 * C2314) *
                 C1071 +
             (C30334 * C1449 - C30336 * C1444 + C48408 * C2332 -
              C30337 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C114 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48304) *
                C48639 +
            ((C30339 - C30340 + C30341 - C30342) * C114 +
             (C30343 - C30344 + C30345 - C30346) * C48304) *
                C48632 +
            C30387 * C48619 + C30388 * C48602) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C114 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48304) *
                C48639 +
            ((C30673 - C30674 + C30675 - C30676) * C114 +
             (C30677 - C30678 + C30679 - C30680) * C48304) *
                C48632 +
            ((C30681 - C30682 + C30683 - C30684) * C114 +
             (C30685 - C30686 + C30687 - C30688) * C48304) *
                C48619 +
            ((C30689 - C30690 + C30691 - C30692) * C114 +
             (C30693 - C30694 + C30695 - C30696) * C48304) *
                C48602) *
               C48595) *
              C260 +
          ((((C30336 * C264 - C30334 * C270 + C30337 * C682 - C48408 * C687) *
                 C114 +
             (C30336 * C271 - C30334 * C282 + C30337 * C688 - C48408 * C697) *
                 C48304) *
                C48639 +
            ((C30519 - C30520 + C30521 - C30522) * C114 +
             (C30523 - C30524 + C30525 - C30526) * C48304) *
                C48632 +
            ((C30527 - C30528 + C30529 - C30530) * C114 +
             (C30531 - C30532 + C30533 - C30534) * C48304) *
                C48619 +
            ((C30535 - C30536 + C30537 - C30538) * C114 +
             (C30539 - C30540 + C30541 - C30542) * C48304) *
                C48602) *
               C784 +
           (((C30334 * C687 - C30336 * C682 + C48408 * C2315 - C30337 * C2309) *
                 C114 +
             (C30334 * C697 - C30336 * C688 + C48408 * C2327 - C30337 * C2316) *
                 C48304) *
                C48639 +
            ((C30334 * C689 - C30336 * C683 + C48408 * C2319 - C30337 * C2311) *
                 C114 +
             (C30334 * C698 - C30336 * C690 + C48408 * C2329 - C30337 * C2320) *
                 C48304) *
                C48632 +
            ((C30334 * C691 - C30336 * C684 + C48408 * C2323 - C30337 * C2313) *
                 C114 +
             (C30334 * C699 - C30336 * C692 + C48408 * C2331 - C30337 * C2324) *
                 C48304) *
                C48619 +
            ((C30334 * C693 - C30336 * C685 + C48408 * C2645 - C30337 * C2644) *
                 C114 +
             (C30334 * C700 - C30336 * C694 + C48408 * C2647 - C30337 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                 C1069 +
             (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                 C48633 +
             (C31769 - C31770 + C31771 - C31772) * C1070 +
             (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
             C32380 * C48598) *
                C23183 +
            ((C30339 - C30340 + C30341 - C30342) * C1069 +
             (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
             C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
                C48219) *
               C784 +
           (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                 C1069 +
             (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                 C48633 +
             (C32575 - C32576 + C32577 - C32578) * C1070 +
             (C32579 - C32580 + C32581 - C32582) * C48621 +
             (C32583 - C32584 + C32585 - C32586) * C1071 +
             (C32587 - C32588 + C32589 - C32590) * C48598) *
                C23183 +
            ((C30673 - C30674 + C30675 - C30676) * C1069 +
             (C30677 - C30678 + C30679 - C30680) * C48633 +
             (C32011 - C32012 + C32013 - C32014) * C1070 +
             (C32015 - C32016 + C32017 - C32018) * C48621 +
             (C32019 - C32020 + C32021 - C32022) * C1071 +
             (C32023 - C32024 + C32025 - C32026) * C48598) *
                C48219) *
               C48595) *
              C260 +
          ((((C31770 - C31769 + C31772 - C31771) * C1069 +
             (C31774 - C31773 + C31776 - C31775) * C48633 +
             (C31778 - C31777 + C31780 - C31779) * C1070 +
             (C31782 - C31781 + C31784 - C31783) * C48621 +
             (C32371 - C32372 + C32373 - C32374) * C1071 +
             (C32375 - C32376 + C32377 - C32378) * C48598) *
                C23183 +
            (C31813 * C1069 + C31814 * C48633 + C31815 * C1070 +
             C31816 * C48621 + (C31801 - C31802 + C31803 - C31804) * C1071 +
             (C31805 - C31806 + C31807 - C31808) * C48598) *
                C48219) *
               C784 +
           (((C32576 - C32575 + C32578 - C32577) * C1069 +
             (C32580 - C32579 + C32582 - C32581) * C48633 +
             (C32584 - C32583 + C32586 - C32585) * C1070 +
             (C32588 - C32587 + C32590 - C32589) * C48621 +
             (C30334 * C1890 - C30336 * C1887 + C48408 * C9620 -
              C30337 * C9618) *
                 C1071 +
             (C30334 * C1896 - C30336 * C1891 + C48408 * C9624 -
              C30337 * C9621) *
                 C48598) *
                C23183 +
            ((C32012 - C32011 + C32014 - C32013) * C1069 +
             (C32016 - C32015 + C32018 - C32017) * C48633 +
             (C32020 - C32019 + C32022 - C32021) * C1070 +
             (C32024 - C32023 + C32026 - C32025) * C48621 +
             (C30334 * C1892 - C30336 * C1888 + C48408 * C9883 -
              C30337 * C9882) *
                 C1071 +
             (C30334 * C1897 - C30336 * C1893 + C48408 * C9885 -
              C30337 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C114 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48304) *
               C48639 +
           ((C30339 - C30340 + C30341 - C30342) * C114 +
            (C30343 - C30344 + C30345 - C30346) * C48304) *
               C48632 +
           C30387 * C48619 + C30388 * C48602) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C114 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48304) *
               C48639 +
           ((C30673 - C30674 + C30675 - C30676) * C114 +
            (C30677 - C30678 + C30679 - C30680) * C48304) *
               C48632 +
           ((C30681 - C30682 + C30683 - C30684) * C114 +
            (C30685 - C30686 + C30687 - C30688) * C48304) *
               C48619 +
           ((C30689 - C30690 + C30691 - C30692) * C114 +
            (C30693 - C30694 + C30695 - C30696) * C48304) *
               C48602) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C114 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48304) *
               C48639 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C114 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48304) *
               C48632 +
           ((C30334 * C942 - C30336 * C935 + C48408 * C2826 - C30337 * C2820) *
                C114 +
            (C30334 * C950 - C30336 * C943 + C48408 * C2832 - C30337 * C2827) *
                C48304) *
               C48619 +
           ((C30334 * C944 - C30336 * C936 + C48408 * C2828 - C30337 * C2821) *
                C114 +
            (C30334 * C951 - C30336 * C945 + C48408 * C2833 - C30337 * C2829) *
                C48304) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C30334 * C122 - C30336 * C115 + C48408 * C394 - C30337 * C388) *
                C1069 +
            (C30334 * C136 - C30336 * C123 + C48408 * C406 - C30337 * C395) *
                C48633 +
            (C31769 - C31770 + C31771 - C31772) * C1070 +
            (C31773 - C31774 + C31775 - C31776) * C48621 + C32379 * C1071 +
            C32380 * C48598) *
               C23183 +
           ((C30339 - C30340 + C30341 - C30342) * C1069 +
            (C30343 - C30344 + C30345 - C30346) * C48633 + C31809 * C1070 +
            C31810 * C48621 + C31811 * C1071 + C31812 * C48598) *
               C48219) *
              C930 +
          (((C30336 * C388 - C30334 * C394 + C30337 * C933 - C48408 * C938) *
                C1069 +
            (C30336 * C395 - C30334 * C406 + C30337 * C939 - C48408 * C948) *
                C48633 +
            (C32575 - C32576 + C32577 - C32578) * C1070 +
            (C32579 - C32580 + C32581 - C32582) * C48621 +
            (C32583 - C32584 + C32585 - C32586) * C1071 +
            (C32587 - C32588 + C32589 - C32590) * C48598) *
               C23183 +
           ((C30673 - C30674 + C30675 - C30676) * C1069 +
            (C30677 - C30678 + C30679 - C30680) * C48633 +
            (C32011 - C32012 + C32013 - C32014) * C1070 +
            (C32015 - C32016 + C32017 - C32018) * C48621 +
            (C32019 - C32020 + C32021 - C32022) * C1071 +
            (C32023 - C32024 + C32025 - C32026) * C48598) *
               C48219) *
              C931 +
          (((C30334 * C938 - C30336 * C933 + C48408 * C2822 - C30337 * C2818) *
                C1069 +
            (C30334 * C948 - C30336 * C939 + C48408 * C2830 - C30337 * C2823) *
                C48633 +
            (C30334 * C2315 - C30336 * C2309 + C48408 * C3263 -
             C30337 * C3260) *
                C1070 +
            (C30334 * C2327 - C30336 * C2316 + C48408 * C3269 -
             C30337 * C3264) *
                C48621 +
            (C30334 * C2317 - C30336 * C2310 + C48408 * C10070 -
             C30337 * C10068) *
                C1071 +
            (C30334 * C2328 - C30336 * C2318 + C48408 * C10074 -
             C30337 * C10071) *
                C48598) *
               C23183 +
           ((C30334 * C940 - C30336 * C934 + C48408 * C2824 - C30337 * C2819) *
                C1069 +
            (C30334 * C949 - C30336 * C941 + C48408 * C2831 - C30337 * C2825) *
                C48633 +
            (C30334 * C2319 - C30336 * C2311 + C48408 * C3265 -
             C30337 * C3261) *
                C1070 +
            (C30334 * C2329 - C30336 * C2320 + C48408 * C3270 -
             C30337 * C3266) *
                C48621 +
            (C30334 * C2321 - C30336 * C2312 + C48408 * C10072 -
             C30337 * C10069) *
                C1071 +
            (C30334 * C2330 - C30336 * C2322 + C48408 * C10075 -
             C30337 * C10073) *
                C48598) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
            C1275 * C48366) *
               C3786 +
           ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
            C1283 * C48366) *
               C3787 +
           ((C153 - C152) * C3790 + (C155 - C154) * C48565 +
            (C297 - C298) * C3791 + (C299 - C300) * C48366) *
               C3788 +
           ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
            (C301 - C302) * C3791 + (C303 - C304) * C48366) *
               C48602) *
              C48293 * C48276 * C111 +
          (C3807 * C3786 + C3808 * C3787 +
           (C168 * C3790 + C169 * C48565 + (C302 - C301) * C3791 +
            (C304 - C303) * C48366) *
               C3788 +
           ((C161 - C160) * C3790 + (C163 - C162) * C48565 +
            (C48321 * C280 - C113 * C269) * C3791 +
            (C48321 * C287 - C113 * C281) * C48366) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
            (C1279 - C1278) * C11045 + (C1281 - C1280) * C48608) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
            C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
            (C1278 - C1279) * C11045 + (C1280 - C1281) * C48608) *
               C48543 +
           ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
            C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
            (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C164 * C11042 + C165 * C11036 + C1079 * C11043 + C1080 * C11037 +
            C1092 * C11044 + C1093 * C11038 + (C1287 - C1286) * C11045 +
            (C1289 - C1288) * C48608) *
               C48543 +
           (C166 * C11042 + C167 * C11036 + C3799 * C11043 + C3800 * C11037 +
            (C1086 - C1085) * C11044 + (C1088 - C1087) * C11038 +
            (C48321 * C1255 - C113 * C1248) * C11045 +
            (C48321 * C1260 - C113 * C1256) * C48608) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C48293 * C260 +
           (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C260 +
           ((C1270 * C3790 + C1271 * C48565 + C1272 * C3791 + C1273 * C48366) *
                C3786 +
            (C1079 * C3790 + C1080 * C48565 + C1092 * C3791 + C1093 * C48366) *
                C3787 +
            (C3799 * C3790 + C3800 * C48565 + (C1086 - C1085) * C3791 +
             (C1088 - C1087) * C48366) *
                C3788 +
            ((C302 - C301) * C3790 + (C304 - C303) * C48565 +
             (C48321 * C593 - C113 * C584) * C3791 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C48293 * C260 +
           (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C260 +
           ((C1270 * C11042 + C1271 * C11036 + C1272 * C11043 + C1273 * C11037 +
             C11177 * C11044 + C11178 * C11038 + (C9050 - C9049) * C11045 +
             (C9052 - C9051) * C48608) *
                C48543 +
            (C1079 * C11042 + C1080 * C11036 + C1092 * C11043 + C1093 * C11037 +
             (C1287 - C1286) * C11044 + (C1289 - C1288) * C11038 +
             (C48321 * C1730 - C113 * C1725) * C11045 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C386 +
           (((C414 - C413) * C3790 + (C416 - C415) * C48565 +
             (C1453 - C1452) * C3791 + (C1455 - C1454) * C48366) *
                C3786 +
            ((C418 - C417) * C3790 + (C420 - C419) * C48565 +
             (C1461 - C1460) * C3791 + (C1463 - C1462) * C48366) *
                C3787 +
            ((C422 - C421) * C3790 + (C424 - C423) * C48565 +
             (C4072 - C4071) * C3791 + (C4074 - C4073) * C48366) *
                C3788 +
            ((C426 - C425) * C3790 + (C428 - C427) * C48565 +
             (C48321 * C695 - C113 * C686) * C3791 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C386 +
           (((C414 - C413) * C11042 + (C416 - C415) * C11036 +
             (C1453 - C1452) * C11043 + (C1455 - C1454) * C11037 +
             (C1457 - C1456) * C11044 + (C1459 - C1458) * C11038 +
             (C11312 - C11311) * C11045 + (C11314 - C11313) * C48608) *
                C48543 +
            ((C418 - C417) * C11042 + (C420 - C419) * C11036 +
             (C1461 - C1460) * C11043 + (C1463 - C1462) * C11037 +
             (C1465 - C1464) * C11044 + (C1467 - C1466) * C11038 +
             (C48321 * C1894 - C113 * C1889) * C11045 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C48293 * C510 +
           (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C48293 * C510 +
           ((C1270 * C3790 + C1271 * C48565 + C1272 * C3791 + C1273 * C48366) *
                C3786 +
            (C1079 * C3790 + C1080 * C48565 + C1092 * C3791 + C1093 * C48366) *
                C3787 +
            (C3799 * C3790 + C3800 * C48565 + (C1086 - C1085) * C3791 +
             (C1088 - C1087) * C48366) *
                C3788 +
            ((C302 - C301) * C3790 + (C304 - C303) * C48565 +
             (C48321 * C593 - C113 * C584) * C3791 +
             (C48321 * C599 - C113 * C594) * C48366) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C48293 * C510 +
           (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C48293 * C510 +
           ((C1270 * C11042 + C1271 * C11036 + C1272 * C11043 + C1273 * C11037 +
             C11177 * C11044 + C11178 * C11038 + (C9050 - C9049) * C11045 +
             (C9052 - C9051) * C48608) *
                C48543 +
            (C1079 * C11042 + C1080 * C11036 + C1092 * C11043 + C1093 * C11037 +
             (C1287 - C1286) * C11044 + (C1289 - C1288) * C11038 +
             (C48321 * C1730 - C113 * C1725) * C11045 +
             (C48321 * C1734 - C113 * C1731) * C48608) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C48293 * C576 +
          (((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
            (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
               C3786 +
           (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
               C3787 +
           (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
               C3788 +
           (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
            (C1087 - C1088) * C48366) *
               C48602) *
              C48293 * C577 +
          ((C1736 * C3790 + C1737 * C48565 + (C1739 - C1738) * C3791 +
            (C1741 - C1740) * C48366) *
               C3786 +
           (C1272 * C3790 + C1273 * C48565 + (C1279 - C1278) * C3791 +
            (C1281 - C1280) * C48366) *
               C3787 +
           (C1092 * C3790 + C1093 * C48565 + (C1287 - C1286) * C3791 +
            (C1289 - C1288) * C48366) *
               C3788 +
           ((C1086 - C1085) * C3790 + (C1088 - C1087) * C48565 +
            (C48321 * C1255 - C113 * C1248) * C3791 +
            (C48321 * C1260 - C113 * C1256) * C48366) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 + C11177 * C11045 +
            C11178 * C48608) *
               C48219) *
              C48293 * C576 +
          (((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
            (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
            (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
            (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
               C48543 +
           (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
            C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
            (C9051 - C9052) * C48608) *
               C48219) *
              C48293 * C577 +
          ((C1736 * C11042 + C1737 * C11036 + C9291 * C11043 + C9292 * C11037 +
            C9293 * C11044 + C9294 * C11038 + (C9296 - C9295) * C11045 +
            (C9298 - C9297) * C48608) *
               C48543 +
           (C1272 * C11042 + C1273 * C11036 + C11177 * C11043 +
            C11178 * C11037 + (C9050 - C9049) * C11044 +
            (C9052 - C9051) * C11038 +
            (C48321 * C9040 - C113 * C9037) * C11045 +
            (C48321 * C9043 - C113 * C9041) * C48608) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C386 +
           (((C1901 - C1900) * C3790 + (C1903 - C1902) * C48565 +
             (C1905 - C1904) * C3791 + (C1907 - C1906) * C48366) *
                C3786 +
            ((C1453 - C1452) * C3790 + (C1455 - C1454) * C48565 +
             (C1457 - C1456) * C3791 + (C1459 - C1458) * C48366) *
                C3787 +
            ((C1461 - C1460) * C3790 + (C1463 - C1462) * C48565 +
             (C1465 - C1464) * C3791 + (C1467 - C1466) * C48366) *
                C3788 +
            ((C4072 - C4071) * C3790 + (C4074 - C4073) * C48565 +
             (C48321 * C1445 - C113 * C1438) * C3791 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C386 +
           (((C1901 - C1900) * C11042 + (C1903 - C1902) * C11036 +
             (C1905 - C1904) * C11043 + (C1907 - C1906) * C11037 +
             (C9386 - C9385) * C11044 + (C9388 - C9387) * C11038 +
             (C9390 - C9389) * C11045 + (C9392 - C9391) * C48608) *
                C48543 +
            ((C1453 - C1452) * C11042 + (C1455 - C1454) * C11036 +
             (C1457 - C1456) * C11043 + (C1459 - C1458) * C11037 +
             (C11312 - C11311) * C11044 + (C11314 - C11313) * C11038 +
             (C48321 * C9138 - C113 * C9135) * C11045 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C3790 + (C147 - C146) * C48565 + C1274 * C3791 +
             C1275 * C48366) *
                C3786 +
            ((C149 - C148) * C3790 + (C151 - C150) * C48565 + C1282 * C3791 +
             C1283 * C48366) *
                C3787 +
            ((C153 - C152) * C3790 + (C155 - C154) * C48565 + C3939 * C3791 +
             C3940 * C48366) *
                C3788 +
            ((C157 - C156) * C3790 + (C159 - C158) * C48565 +
             (C301 - C302) * C3791 + (C303 - C304) * C48366) *
                C48602) *
               C784 +
           (((C414 - C413) * C3790 + (C416 - C415) * C48565 +
             (C1453 - C1452) * C3791 + (C1455 - C1454) * C48366) *
                C3786 +
            ((C418 - C417) * C3790 + (C420 - C419) * C48565 +
             (C1461 - C1460) * C3791 + (C1463 - C1462) * C48366) *
                C3787 +
            ((C422 - C421) * C3790 + (C424 - C423) * C48565 +
             (C4072 - C4071) * C3791 + (C4074 - C4073) * C48366) *
                C3788 +
            ((C426 - C425) * C3790 + (C428 - C427) * C48565 +
             (C48321 * C695 - C113 * C686) * C3791 +
             (C48321 * C701 - C113 * C696) * C48366) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C11042 + (C147 - C146) * C11036 + C1274 * C11043 +
             C1275 * C11037 + C1276 * C11044 + C1277 * C11038 +
             C11179 * C11045 + C11180 * C48608) *
                C48543 +
            ((C149 - C148) * C11042 + (C151 - C150) * C11036 + C1282 * C11043 +
             C1283 * C11037 + C1284 * C11044 + C1285 * C11038 +
             (C1286 - C1287) * C11045 + (C1288 - C1289) * C48608) *
                C48219) *
               C784 +
           (((C414 - C413) * C11042 + (C416 - C415) * C11036 +
             (C1453 - C1452) * C11043 + (C1455 - C1454) * C11037 +
             (C1457 - C1456) * C11044 + (C1459 - C1458) * C11038 +
             (C11312 - C11311) * C11045 + (C11314 - C11313) * C48608) *
                C48543 +
            ((C418 - C417) * C11042 + (C420 - C419) * C11036 +
             (C1461 - C1460) * C11043 + (C1463 - C1462) * C11037 +
             (C1465 - C1464) * C11044 + (C1467 - C1466) * C11038 +
             (C48321 * C1894 - C113 * C1889) * C11045 +
             (C48321 * C1898 - C113 * C1895) * C48608) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C3790 +
             (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
             (C1264 - C1265) * C48366) *
                C3786 +
            ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
             C1271 * C48366) *
                C3787 +
            C3807 * C3788 + C3808 * C48602) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C3790 +
             (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
             (C1902 - C1903) * C48366) *
                C3786 +
            ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
             (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
                C3787 +
            ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
             (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
                C3788 +
            ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
             (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
                C48602) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C3790 + (C1265 - C1264) * C48565 +
             (C1267 - C1266) * C3791 + (C1269 - C1268) * C48366) *
                C3786 +
            (C1274 * C3790 + C1275 * C48565 + C1276 * C3791 + C1277 * C48366) *
                C3787 +
            (C1282 * C3790 + C1283 * C48565 + C1284 * C3791 + C1285 * C48366) *
                C3788 +
            (C3939 * C3790 + C3940 * C48565 + (C1085 - C1086) * C3791 +
             (C1087 - C1088) * C48366) *
                C48602) *
               C784 +
           (((C1901 - C1900) * C3790 + (C1903 - C1902) * C48565 +
             (C1905 - C1904) * C3791 + (C1907 - C1906) * C48366) *
                C3786 +
            ((C1453 - C1452) * C3790 + (C1455 - C1454) * C48565 +
             (C1457 - C1456) * C3791 + (C1459 - C1458) * C48366) *
                C3787 +
            ((C1461 - C1460) * C3790 + (C1463 - C1462) * C48565 +
             (C1465 - C1464) * C3791 + (C1467 - C1466) * C48366) *
                C3788 +
            ((C4072 - C4071) * C3790 + (C4074 - C4073) * C48565 +
             (C48321 * C1445 - C113 * C1438) * C3791 +
             (C48321 * C1450 - C113 * C1446) * C48366) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C11042 +
             (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
             (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
             C9291 * C11045 + C9292 * C48608) *
                C48543 +
            ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
             C1271 * C11037 + C1272 * C11044 + C1273 * C11038 +
             C11177 * C11045 + C11178 * C48608) *
                C48219) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C11042 +
             (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
             (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
             (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
             (C9387 - C9388) * C48608) *
                C48543 +
            ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
             (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
             (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
             (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
                C48219) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C11042 + (C1265 - C1264) * C11036 +
             (C1267 - C1266) * C11043 + (C1269 - C1268) * C11037 +
             (C1738 - C1739) * C11044 + (C1740 - C1741) * C11038 +
             (C9046 - C9045) * C11045 + (C9048 - C9047) * C48608) *
                C48543 +
            (C1274 * C11042 + C1275 * C11036 + C1276 * C11043 + C1277 * C11037 +
             C11179 * C11044 + C11180 * C11038 + (C9049 - C9050) * C11045 +
             (C9051 - C9052) * C48608) *
                C48219) *
               C784 +
           (((C1901 - C1900) * C11042 + (C1903 - C1902) * C11036 +
             (C1905 - C1904) * C11043 + (C1907 - C1906) * C11037 +
             (C9386 - C9385) * C11044 + (C9388 - C9387) * C11038 +
             (C9390 - C9389) * C11045 + (C9392 - C9391) * C48608) *
                C48543 +
            ((C1453 - C1452) * C11042 + (C1455 - C1454) * C11036 +
             (C1457 - C1456) * C11043 + (C1459 - C1458) * C11037 +
             (C11312 - C11311) * C11044 + (C11314 - C11313) * C11038 +
             (C48321 * C9138 - C113 * C9135) * C11045 +
             (C48321 * C9141 - C113 * C9139) * C48608) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C3790 +
            (C48321 * C136 - C113 * C123) * C48565 + (C1262 - C1263) * C3791 +
            (C1264 - C1265) * C48366) *
               C3786 +
           ((C144 - C145) * C3790 + (C146 - C147) * C48565 + C1270 * C3791 +
            C1271 * C48366) *
               C3787 +
           C3807 * C3788 + C3808 * C48602) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C3790 +
            (C113 * C395 - C48321 * C406) * C48565 + (C1900 - C1901) * C3791 +
            (C1902 - C1903) * C48366) *
               C3786 +
           ((C413 - C414) * C3790 + (C415 - C416) * C48565 +
            (C1452 - C1453) * C3791 + (C1454 - C1455) * C48366) *
               C3787 +
           ((C417 - C418) * C3790 + (C419 - C420) * C48565 +
            (C1460 - C1461) * C3791 + (C1462 - C1463) * C48366) *
               C3788 +
           ((C421 - C422) * C3790 + (C423 - C424) * C48565 +
            (C4071 - C4072) * C3791 + (C4073 - C4074) * C48366) *
               C48602) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C3790 +
            (C48321 * C948 - C113 * C939) * C48565 +
            (C48321 * C2315 - C113 * C2309) * C3791 +
            (C48321 * C2327 - C113 * C2316) * C48366) *
               C3786 +
           ((C48321 * C940 - C113 * C934) * C3790 +
            (C48321 * C949 - C113 * C941) * C48565 +
            (C48321 * C2319 - C113 * C2311) * C3791 +
            (C48321 * C2329 - C113 * C2320) * C48366) *
               C3787 +
           ((C48321 * C942 - C113 * C935) * C3790 +
            (C48321 * C950 - C113 * C943) * C48565 +
            (C48321 * C2323 - C113 * C2313) * C3791 +
            (C48321 * C2331 - C113 * C2324) * C48366) *
               C3788 +
           ((C48321 * C944 - C113 * C936) * C3790 +
            (C48321 * C951 - C113 * C945) * C48565 +
            (C48321 * C2645 - C113 * C2644) * C3791 +
            (C48321 * C2647 - C113 * C2646) * C48366) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C11042 +
            (C48321 * C136 - C113 * C123) * C11036 + (C1262 - C1263) * C11043 +
            (C1264 - C1265) * C11037 + C1736 * C11044 + C1737 * C11038 +
            C9291 * C11045 + C9292 * C48608) *
               C48543 +
           ((C144 - C145) * C11042 + (C146 - C147) * C11036 + C1270 * C11043 +
            C1271 * C11037 + C1272 * C11044 + C1273 * C11038 + C11177 * C11045 +
            C11178 * C48608) *
               C48219) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C11042 +
            (C113 * C395 - C48321 * C406) * C11036 + (C1900 - C1901) * C11043 +
            (C1902 - C1903) * C11037 + (C1904 - C1905) * C11044 +
            (C1906 - C1907) * C11038 + (C9385 - C9386) * C11045 +
            (C9387 - C9388) * C48608) *
               C48543 +
           ((C413 - C414) * C11042 + (C415 - C416) * C11036 +
            (C1452 - C1453) * C11043 + (C1454 - C1455) * C11037 +
            (C1456 - C1457) * C11044 + (C1458 - C1459) * C11038 +
            (C11311 - C11312) * C11045 + (C11313 - C11314) * C48608) *
               C48219) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C11042 +
            (C48321 * C948 - C113 * C939) * C11036 +
            (C48321 * C2315 - C113 * C2309) * C11043 +
            (C48321 * C2327 - C113 * C2316) * C11037 +
            (C48321 * C2317 - C113 * C2310) * C11044 +
            (C48321 * C2328 - C113 * C2318) * C11038 +
            (C48321 * C9620 - C113 * C9618) * C11045 +
            (C48321 * C9624 - C113 * C9621) * C48608) *
               C48543 +
           ((C48321 * C940 - C113 * C934) * C11042 +
            (C48321 * C949 - C113 * C941) * C11036 +
            (C48321 * C2319 - C113 * C2311) * C11043 +
            (C48321 * C2329 - C113 * C2320) * C11037 +
            (C48321 * C2321 - C113 * C2312) * C11044 +
            (C48321 * C2330 - C113 * C2322) * C11038 +
            (C48321 * C9883 - C113 * C9882) * C11045 +
            (C48321 * C9885 - C113 * C9884) * C48608) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C48566 * C270 - C4890 * C264 + C48408 * C687 - C4891 * C682) *
                C3791 +
            (C48566 * C282 - C4890 * C271 + C48408 * C697 - C4891 * C688) *
                C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 +
            (C5074 - C5073 + C5076 - C5075) * C3791 +
            (C5078 - C5077 + C5080 - C5079) * C48366) *
               C1067 +
           C6125 * C48585) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C3790 +
            (C4898 - C4897 + C4900 - C4899) * C48565 +
            (C5073 - C5074 + C5075 - C5076) * C3791 +
            (C5077 - C5078 + C5079 - C5080) * C48366) *
               C1066 +
           ((C4902 - C4901 + C4904 - C4903) * C3790 +
            (C4906 - C4905 + C4908 - C4907) * C48565 +
            (C5081 - C5082 + C5083 - C5084) * C3791 +
            (C5085 - C5086 + C5087 - C5088) * C48366) *
               C1067 +
           ((C4910 - C4909 + C4912 - C4911) * C3790 +
            (C4914 - C4913 + C4916 - C4915) * C48565 +
            (C5089 - C5090 + C5091 - C5092) * C3791 +
            (C5093 - C5094 + C5095 - C5096) * C48366) *
               C48585) *
              C48293 * C48276 * C111 +
          (C6125 * C1066 +
           (C4935 * C3790 + C4936 * C48565 +
            (C5090 - C5089 + C5092 - C5091) * C3791 +
            (C5094 - C5093 + C5096 - C5095) * C48366) *
               C1067 +
           ((C4918 - C4917 + C4920 - C4919) * C3790 +
            (C4922 - C4921 + C4924 - C4923) * C48565 +
            (C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                C3791 +
            (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                C48366) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
           (C12942 - C12941 + C12944 - C12943) * C48608) *
              C48209 * C48293 * C48276 * C110 +
          ((C4894 - C4893 + C4896 - C4895) * C11042 +
           (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
           C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
           (C12379 - C12380 + C12381 - C12382) * C11045 +
           (C12383 - C12384 + C12385 - C12386) * C48608) *
              C48209 * C48293 * C48276 * C111 +
          (C4933 * C11042 + C4934 * C11036 + C6120 * C11043 + C6121 * C11037 +
           (C6349 - C6348 + C6351 - C6350) * C11044 +
           (C6353 - C6352 + C6355 - C6354) * C11038 +
           (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
               C11045 +
           (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
               C48608) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C4890 * C580 - C48566 * C585 + C4891 * C1435 - C48408 * C1439) *
                 C3791 +
             (C4890 * C586 - C48566 * C595 + C4891 * C1440 - C48408 * C1447) *
                 C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C48293 * C260 +
           ((C6356 * C3790 + C6357 * C48565 +
             (C6337 - C6336 + C6339 - C6338) * C3791 +
             (C6341 - C6340 + C6343 - C6342) * C48366) *
                C1066 +
            (C6120 * C3790 + C6121 * C48565 +
             (C6349 - C6348 + C6351 - C6350) * C3791 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C1067 +
            ((C5090 - C5089 + C5092 - C5091) * C3790 +
             (C5094 - C5093 + C5096 - C5095) * C48565 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C3791 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C48293 * C260 +
           ((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C4890 * C1723 - C48566 * C1726 + C4891 * C9134 - C48408 * C9136) *
                C11045 +
            (C4890 * C1727 - C48566 * C1732 + C4891 * C9137 - C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C48293 * C260 +
           (C6356 * C11042 + C6357 * C11036 + C12387 * C11043 +
            C12388 * C11037 + (C12380 - C12379 + C12382 - C12381) * C11044 +
            (C12384 - C12383 + C12386 - C12385) * C11038 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C11045 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C4890 * C682 - C48566 * C687 + C4891 * C2309 - C48408 * C2315) *
                 C3791 +
             (C4890 * C688 - C48566 * C697 + C4891 * C2316 - C48408 * C2327) *
                 C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C3790 +
             (C5232 - C5231 + C5234 - C5233) * C48565 +
             (C6557 - C6556 + C6559 - C6558) * C3791 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C1066 +
            ((C5236 - C5235 + C5238 - C5237) * C3790 +
             (C5240 - C5239 + C5242 - C5241) * C48565 +
             (C6565 - C6564 + C6567 - C6566) * C3791 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C1067 +
            ((C5244 - C5243 + C5246 - C5245) * C3790 +
             (C5248 - C5247 + C5250 - C5249) * C48565 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C3791 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C386 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C4890 * C1887 - C48566 * C1890 + C4891 * C9618 - C48408 * C9620) *
                C11045 +
            (C4890 * C1891 - C48566 * C1896 + C4891 * C9621 - C48408 * C9624) *
                C48608) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C386 +
           ((C5228 - C5227 + C5230 - C5229) * C11042 +
            (C5232 - C5231 + C5234 - C5233) * C11036 +
            (C6557 - C6556 + C6559 - C6558) * C11043 +
            (C6561 - C6560 + C6563 - C6562) * C11037 +
            (C12586 - C12585 + C12588 - C12587) * C11044 +
            (C12590 - C12589 + C12592 - C12591) * C11038 +
            (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                C11045 +
            (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C4890 * C580 - C48566 * C585 + C4891 * C1435 - C48408 * C1439) *
                 C3791 +
             (C4890 * C586 - C48566 * C595 + C4891 * C1440 - C48408 * C1447) *
                 C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C48293 * C510 +
           ((C6356 * C3790 + C6357 * C48565 +
             (C6337 - C6336 + C6339 - C6338) * C3791 +
             (C6341 - C6340 + C6343 - C6342) * C48366) *
                C1066 +
            (C6120 * C3790 + C6121 * C48565 +
             (C6349 - C6348 + C6351 - C6350) * C3791 +
             (C6353 - C6352 + C6355 - C6354) * C48366) *
                C1067 +
            ((C5090 - C5089 + C5092 - C5091) * C3790 +
             (C5094 - C5093 + C5096 - C5095) * C48565 +
             (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                 C3791 +
             (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                 C48366) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + (C12938 - C12937 + C12940 - C12939) * C11045 +
            (C12942 - C12941 + C12944 - C12943) * C48608) *
               C48209 * C48293 * C510 +
           ((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C4890 * C1723 - C48566 * C1726 + C4891 * C9134 - C48408 * C9136) *
                C11045 +
            (C4890 * C1727 - C48566 * C1732 + C4891 * C9137 - C48408 * C9140) *
                C48608) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C48293 * C510 +
           (C6356 * C11042 + C6357 * C11036 + C12387 * C11043 +
            C12388 * C11037 + (C12380 - C12379 + C12382 - C12381) * C11044 +
            (C12384 - C12383 + C12386 - C12385) * C11038 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C11045 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48608) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C6320 - C6321 + C6322 - C6323) * C3791 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
            C6357 * C48366) *
               C1067 +
           C6125 * C48585) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C3790 +
            (C6325 - C6324 + C6327 - C6326) * C48565 +
            (C6912 - C6913 + C6914 - C6915) * C3791 +
            (C6916 - C6917 + C6918 - C6919) * C48366) *
               C1066 +
           (C6358 * C3790 + C6359 * C48565 +
            (C6336 - C6337 + C6338 - C6339) * C3791 +
            (C6340 - C6341 + C6342 - C6343) * C48366) *
               C1067 +
           (C6360 * C3790 + C6361 * C48565 +
            (C6348 - C6349 + C6350 - C6351) * C3791 +
            (C6352 - C6353 + C6354 - C6355) * C48366) *
               C48585) *
              C48293 * C577 +
          (((C6913 - C6912 + C6915 - C6914) * C3790 +
            (C6917 - C6916 + C6919 - C6918) * C48565 +
            (C48566 * C1249 - C4890 * C1245 + C48408 * C1890 - C4891 * C1887) *
                C3791 +
            (C48566 * C1257 - C4890 * C1250 + C48408 * C1896 - C4891 * C1891) *
                C48366) *
               C1066 +
           ((C6337 - C6336 + C6339 - C6338) * C3790 +
            (C6341 - C6340 + C6343 - C6342) * C48565 +
            (C48566 * C1251 - C4890 * C1246 + C48408 * C1892 - C4891 * C1888) *
                C3791 +
            (C48566 * C1258 - C4890 * C1252 + C48408 * C1897 - C4891 * C1893) *
                C48366) *
               C1067 +
           ((C6349 - C6348 + C6351 - C6350) * C3790 +
            (C6353 - C6352 + C6355 - C6354) * C48565 +
            (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                C3791 +
            (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                C48366) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
              C48209 * C48293 * C576 +
          ((C6321 - C6320 + C6323 - C6322) * C11042 +
           (C6325 - C6324 + C6327 - C6326) * C11036 +
           (C6912 - C6913 + C6914 - C6915) * C11043 +
           (C6916 - C6917 + C6918 - C6919) * C11037 +
           (C12937 - C12938 + C12939 - C12940) * C11044 +
           (C12941 - C12942 + C12943 - C12944) * C11038 +
           (C14273 - C14274 + C14275 - C14276) * C11045 +
           (C14277 - C14278 + C14279 - C14280) * C48608) *
              C48209 * C48293 * C577 +
          (C12945 * C11042 + C12946 * C11036 + C14281 * C11043 +
           C14282 * C11037 + (C14274 - C14273 + C14276 - C14275) * C11044 +
           (C14278 - C14277 + C14280 - C14279) * C11038 +
           (C48566 * C9038 - C4890 * C9036 + C48408 * C9381 - C4891 * C9380) *
               C11045 +
           (C48566 * C9042 - C4890 * C9039 + C48408 * C9383 - C4891 * C9382) *
               C48608) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C6912 - C6913 + C6914 - C6915) * C3791 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C3790 +
             (C7119 - C7118 + C7121 - C7120) * C48565 +
             (C48566 * C1439 - C4890 * C1435 + C48408 * C2317 - C4891 * C2310) *
                 C3791 +
             (C48566 * C1447 - C4890 * C1440 + C48408 * C2328 - C4891 * C2318) *
                 C48366) *
                C1066 +
            ((C6557 - C6556 + C6559 - C6558) * C3790 +
             (C6561 - C6560 + C6563 - C6562) * C48565 +
             (C48566 * C1441 - C4890 * C1436 + C48408 * C2321 - C4891 * C2312) *
                 C3791 +
             (C48566 * C1448 - C4890 * C1442 + C48408 * C2330 - C4891 * C2322) *
                 C48366) *
                C1067 +
            ((C6565 - C6564 + C6567 - C6566) * C3790 +
             (C6569 - C6568 + C6571 - C6570) * C48565 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C3791 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C386 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C510 +
          (((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C14273 - C14274 + C14275 - C14276) * C11045 +
            (C14277 - C14278 + C14279 - C14280) * C48608) *
               C48209 * C386 +
           ((C7115 - C7114 + C7117 - C7116) * C11042 +
            (C7119 - C7118 + C7121 - C7120) * C11036 +
            (C13142 - C13141 + C13144 - C13143) * C11043 +
            (C13146 - C13145 + C13148 - C13147) * C11037 +
            (C14414 - C14413 + C14416 - C14415) * C11044 +
            (C14418 - C14417 + C14420 - C14419) * C11038 +
            (C48566 * C9136 - C4890 * C9134 + C48408 * C9622 - C4891 * C9619) *
                C11045 +
            (C48566 * C9140 - C4890 * C9137 + C48408 * C9625 - C4891 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C3790 +
             (C4898 - C4897 + C4900 - C4899) * C48565 + C6358 * C3791 +
             C6359 * C48366) *
                C1066 +
            ((C4902 - C4901 + C4904 - C4903) * C3790 +
             (C4906 - C4905 + C4908 - C4907) * C48565 + C6360 * C3791 +
             C6361 * C48366) *
                C1067 +
            ((C4910 - C4909 + C4912 - C4911) * C3790 +
             (C4914 - C4913 + C4916 - C4915) * C48565 +
             (C5089 - C5090 + C5091 - C5092) * C3791 +
             (C5093 - C5094 + C5095 - C5096) * C48366) *
                C48585) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C3790 +
             (C5232 - C5231 + C5234 - C5233) * C48565 +
             (C6557 - C6556 + C6559 - C6558) * C3791 +
             (C6561 - C6560 + C6563 - C6562) * C48366) *
                C1066 +
            ((C5236 - C5235 + C5238 - C5237) * C3790 +
             (C5240 - C5239 + C5242 - C5241) * C48565 +
             (C6565 - C6564 + C6567 - C6566) * C3791 +
             (C6569 - C6568 + C6571 - C6570) * C48366) *
                C1067 +
            ((C5244 - C5243 + C5246 - C5245) * C3790 +
             (C5248 - C5247 + C5250 - C5249) * C48565 +
             (C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C3791 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48366) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C784 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C4894 - C4893 + C4896 - C4895) * C11042 +
            (C4898 - C4897 + C4900 - C4899) * C11036 + C6358 * C11043 +
            C6359 * C11037 + C12389 * C11044 + C12390 * C11038 +
            (C12379 - C12380 + C12381 - C12382) * C11045 +
            (C12383 - C12384 + C12385 - C12386) * C48608) *
               C48209 * C784 +
           ((C5228 - C5227 + C5230 - C5229) * C11042 +
            (C5232 - C5231 + C5234 - C5233) * C11036 +
            (C6557 - C6556 + C6559 - C6558) * C11043 +
            (C6561 - C6560 + C6563 - C6562) * C11037 +
            (C12586 - C12585 + C12588 - C12587) * C11044 +
            (C12590 - C12589 + C12592 - C12591) * C11038 +
            (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                C11045 +
            (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                C48608) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C3790 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48565 +
             (C6320 - C6321 + C6322 - C6323) * C3791 +
             (C6324 - C6325 + C6326 - C6327) * C48366) *
                C1066 +
            ((C4893 - C4894 + C4895 - C4896) * C3790 +
             (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
             C6357 * C48366) *
                C1067 +
            C6125 * C48585) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C3790 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48565 +
             (C7114 - C7115 + C7116 - C7117) * C3791 +
             (C7118 - C7119 + C7120 - C7121) * C48366) *
                C1066 +
            ((C5227 - C5228 + C5229 - C5230) * C3790 +
             (C5231 - C5232 + C5233 - C5234) * C48565 +
             (C6556 - C6557 + C6558 - C6559) * C3791 +
             (C6560 - C6561 + C6562 - C6563) * C48366) *
                C1067 +
            ((C5235 - C5236 + C5237 - C5238) * C3790 +
             (C5239 - C5240 + C5241 - C5242) * C48565 +
             (C6564 - C6565 + C6566 - C6567) * C3791 +
             (C6568 - C6569 + C6570 - C6571) * C48366) *
                C48585) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C3790 +
             (C6325 - C6324 + C6327 - C6326) * C48565 +
             (C6912 - C6913 + C6914 - C6915) * C3791 +
             (C6916 - C6917 + C6918 - C6919) * C48366) *
                C1066 +
            (C6358 * C3790 + C6359 * C48565 +
             (C6336 - C6337 + C6338 - C6339) * C3791 +
             (C6340 - C6341 + C6342 - C6343) * C48366) *
                C1067 +
            (C6360 * C3790 + C6361 * C48565 +
             (C6348 - C6349 + C6350 - C6351) * C3791 +
             (C6352 - C6353 + C6354 - C6355) * C48366) *
                C48585) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C3790 +
             (C7119 - C7118 + C7121 - C7120) * C48565 +
             (C48566 * C1439 - C4890 * C1435 + C48408 * C2317 - C4891 * C2310) *
                 C3791 +
             (C48566 * C1447 - C4890 * C1440 + C48408 * C2328 - C4891 * C2318) *
                 C48366) *
                C1066 +
            ((C6557 - C6556 + C6559 - C6558) * C3790 +
             (C6561 - C6560 + C6563 - C6562) * C48565 +
             (C48566 * C1441 - C4890 * C1436 + C48408 * C2321 - C4891 * C2312) *
                 C3791 +
             (C48566 * C1448 - C4890 * C1442 + C48408 * C2330 - C4891 * C2322) *
                 C48366) *
                C1067 +
            ((C6565 - C6564 + C6567 - C6566) * C3790 +
             (C6569 - C6568 + C6571 - C6570) * C48565 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C3791 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48366) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C11042 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C11036 +
            (C6320 - C6321 + C6322 - C6323) * C11043 +
            (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
            C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
               C48209 * C784 +
           ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C11042 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C11036 +
            (C7114 - C7115 + C7116 - C7117) * C11043 +
            (C7118 - C7119 + C7120 - C7121) * C11037 +
            (C13141 - C13142 + C13143 - C13144) * C11044 +
            (C13145 - C13146 + C13147 - C13148) * C11038 +
            (C14413 - C14414 + C14415 - C14416) * C11045 +
            (C14417 - C14418 + C14419 - C14420) * C48608) *
               C48209 * C48595) *
              C260 +
          (((C6321 - C6320 + C6323 - C6322) * C11042 +
            (C6325 - C6324 + C6327 - C6326) * C11036 +
            (C6912 - C6913 + C6914 - C6915) * C11043 +
            (C6916 - C6917 + C6918 - C6919) * C11037 +
            (C12937 - C12938 + C12939 - C12940) * C11044 +
            (C12941 - C12942 + C12943 - C12944) * C11038 +
            (C14273 - C14274 + C14275 - C14276) * C11045 +
            (C14277 - C14278 + C14279 - C14280) * C48608) *
               C48209 * C784 +
           ((C7115 - C7114 + C7117 - C7116) * C11042 +
            (C7119 - C7118 + C7121 - C7120) * C11036 +
            (C13142 - C13141 + C13144 - C13143) * C11043 +
            (C13146 - C13145 + C13148 - C13147) * C11037 +
            (C14414 - C14413 + C14416 - C14415) * C11044 +
            (C14418 - C14417 + C14420 - C14419) * C11038 +
            (C48566 * C9136 - C4890 * C9134 + C48408 * C9622 - C4891 * C9619) *
                C11045 +
            (C48566 * C9140 - C4890 * C9137 + C48408 * C9625 - C4891 * C9623) *
                C48608) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C3790 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48565 +
            (C6320 - C6321 + C6322 - C6323) * C3791 +
            (C6324 - C6325 + C6326 - C6327) * C48366) *
               C1066 +
           ((C4893 - C4894 + C4895 - C4896) * C3790 +
            (C4897 - C4898 + C4899 - C4900) * C48565 + C6356 * C3791 +
            C6357 * C48366) *
               C1067 +
           C6125 * C48585) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C3790 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C48565 +
            (C7114 - C7115 + C7116 - C7117) * C3791 +
            (C7118 - C7119 + C7120 - C7121) * C48366) *
               C1066 +
           ((C5227 - C5228 + C5229 - C5230) * C3790 +
            (C5231 - C5232 + C5233 - C5234) * C48565 +
            (C6556 - C6557 + C6558 - C6559) * C3791 +
            (C6560 - C6561 + C6562 - C6563) * C48366) *
               C1067 +
           ((C5235 - C5236 + C5237 - C5238) * C3790 +
            (C5239 - C5240 + C5241 - C5242) * C48565 +
            (C6564 - C6565 + C6566 - C6567) * C3791 +
            (C6568 - C6569 + C6570 - C6571) * C48366) *
               C48585) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C3790 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C48565 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C3791 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C48366) *
               C1066 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C3790 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C48565 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C3791 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C48366) *
               C1067 +
           ((C48566 * C942 - C4890 * C935 + C48408 * C2826 - C4891 * C2820) *
                C3790 +
            (C48566 * C950 - C4890 * C943 + C48408 * C2832 - C4891 * C2827) *
                C48565 +
            (C48566 * C2323 - C4890 * C2313 + C48408 * C3267 - C4891 * C3262) *
                C3791 +
            (C48566 * C2331 - C4890 * C2324 + C48408 * C3271 - C4891 * C3268) *
                C48366) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
               C11042 +
           (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
               C11036 +
           (C6320 - C6321 + C6322 - C6323) * C11043 +
           (C6324 - C6325 + C6326 - C6327) * C11037 + C12945 * C11044 +
           C12946 * C11038 + C14281 * C11045 + C14282 * C48608) *
              C48209 * C930 +
          ((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
               C11042 +
           (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
               C11036 +
           (C7114 - C7115 + C7116 - C7117) * C11043 +
           (C7118 - C7119 + C7120 - C7121) * C11037 +
           (C13141 - C13142 + C13143 - C13144) * C11044 +
           (C13145 - C13146 + C13147 - C13148) * C11038 +
           (C14413 - C14414 + C14415 - C14416) * C11045 +
           (C14417 - C14418 + C14419 - C14420) * C48608) *
              C48209 * C931 +
          ((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
               C11042 +
           (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
               C11036 +
           (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
               C11043 +
           (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
               C11037 +
           (C48566 * C2317 - C4890 * C2310 + C48408 * C10070 - C4891 * C10068) *
               C11044 +
           (C48566 * C2328 - C4890 * C2318 + C48408 * C10074 - C4891 * C10071) *
               C11038 +
           (C48566 * C9620 - C4890 * C9618 + C48408 * C10501 - C4891 * C10500) *
               C11045 +
           (C48566 * C9624 - C4890 * C9621 + C48408 * C10503 - C4891 * C10502) *
               C48608) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 +
            (C48321 * C270 - C113 * C264) * C1070 +
            (C48321 * C282 - C113 * C271) * C48621 +
            (C48321 * C585 - C113 * C580) * C1071 +
            (C48321 * C595 - C113 * C586) * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
            (C290 - C289) * C1070 + (C292 - C291) * C48621 +
            (C1073 - C1074) * C1071 + (C1075 - C1076) * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C1069 + (C147 - C146) * C48633 +
            (C289 - C290) * C1070 + (C291 - C292) * C48621 +
            (C1074 - C1073) * C1071 + (C1076 - C1075) * C48598) *
               C1066 +
           ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
            (C293 - C294) * C1070 + (C295 - C296) * C48621 +
            (C1082 - C1081) * C1071 + (C1084 - C1083) * C48598) *
               C1067 +
           ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
            (C297 - C298) * C1070 + (C299 - C300) * C48621 +
            (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C1099 * C1066 +
           (C166 * C1069 + C167 * C48633 + (C298 - C297) * C1070 +
            (C300 - C299) * C48621 + (C1086 - C1085) * C1071 +
            (C1088 - C1087) * C48598) *
               C1067 +
           (C168 * C1069 + C169 * C48633 + (C302 - C301) * C1070 +
            (C304 - C303) * C48621 + (C48321 * C593 - C113 * C584) * C1071 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
              C48293 * C48276 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C48304) * C106 +
           ((C48321 * C134 - C113 * C121) * C114 +
            (C48321 * C142 - C113 * C135) * C48304) *
               C107) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C48293 * C48276 * C110 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
               C1066 +
           ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
            (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
               C1067 +
           ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
            (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
               C48585) *
              C48293 * C48276 * C111 +
          (C2498 * C1066 +
           ((C2475 - C2474 + C2477 - C2476 + C2479 - C2478) * C114 +
            (C2481 - C2480 + C2483 - C2482 + C2485 - C2484) * C48304) *
               C1067 +
           ((C48634 * C130 - C2446 * C119 + C48623 * C402 - C2447 * C392 +
             C48601 * C946 - C2448 * C937) *
                C114 +
            (C48634 * C140 - C2446 * C131 + C48623 * C410 - C2447 * C403 +
             C48601 * C952 - C2448 * C947) *
                C48304) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
            C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
               C48630 +
           ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
            C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
               C48617 +
           ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
            C3940 * C7766 + (C1085 - C1086) * C7773 +
            (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C7785 * C48630 +
           (C166 * C7771 + C167 * C7765 + C3799 * C7772 + C3800 * C7766 +
            (C1086 - C1085) * C7773 + (C1088 - C1087) * C48598) *
               C48617 +
           (C168 * C7771 + C169 * C7765 + (C302 - C301) * C7772 +
            (C304 - C303) * C7766 + (C48321 * C593 - C113 * C584) * C7773 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
           (C48321 * C1726 - C113 * C1723) * C8953 +
           (C48321 * C1732 - C113 * C1727) * C8947) *
              C48209 * C48293 * C48276 * C110 +
          ((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
           C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
           (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
           (C113 * C1724 - C48321 * C1728) * C8953 +
           (C113 * C1729 - C48321 * C1733) * C8947) *
              C48209 * C48293 * C48276 * C111 +
          (C164 * C8949 + C165 * C8943 + C1079 * C8950 + C1080 * C8944 +
           C1092 * C8951 + C1093 * C8945 + (C1287 - C1286) * C8952 +
           (C1289 - C1288) * C8946 + (C48321 * C1730 - C113 * C1725) * C8953 +
           (C48321 * C1734 - C113 * C1731) * C8947) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C48634 * C270 - C2446 * C264 + C48623 * C687 - C2447 * C682 +
            C48601 * C2315 - C2448 * C2309) *
               C7772 +
           (C48634 * C282 - C2446 * C271 + C48623 * C697 - C2447 * C688 +
            C48601 * C2327 - C2448 * C2316) *
               C7766 +
           (C48634 * C585 - C2446 * C580 + C48623 * C1439 - C2447 * C1435 +
            C48601 * C2317 - C2448 * C2310) *
               C7773 +
           (C48634 * C595 - C2446 * C586 + C48623 * C1447 - C2447 * C1440 +
            C48601 * C2328 - C2448 * C2318) *
               C48598) *
              C48209 * C48293 * C48276 * C110 +
          ((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
           (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
           (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
           (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
           (C2446 * C581 - C48634 * C587 + C2447 * C1436 - C48623 * C1441 +
            C2448 * C2312 - C48601 * C2321) *
               C7773 +
           (C2446 * C588 - C48634 * C596 + C2447 * C1442 - C48623 * C1448 +
            C2448 * C2322 - C48601 * C2330) *
               C48598) *
              C48209 * C48293 * C48276 * C111 +
          (C2494 * C7771 + C2495 * C7765 +
           (C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C7772 +
           (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C7766 +
           (C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
            C48601 * C2325 - C2448 * C2314) *
               C7773 +
           (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
            C48601 * C2332 - C2448 * C2326) *
               C48598) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C260 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C48293 * C260 +
           (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C48293 * C260 +
           (((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C114 +
             (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C48304) *
                C1066 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C114 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C48304) *
                C1067 +
            ((C48634 * C276 - C2446 * C267 + C48623 * C693 - C2447 * C685 +
              C48601 * C2645 - C2448 * C2644) *
                 C114 +
             (C48634 * C285 - C2446 * C277 + C48623 * C700 - C2447 * C694 +
              C48601 * C2647 - C2448 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C260 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C260 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C48293 * C260 +
           ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C2446 * C1245 - C48634 * C1249 + C2447 * C1887 - C48623 * C1890 +
             C2448 * C9618 - C48601 * C9620) *
                C7773 +
            (C2446 * C1250 - C48634 * C1257 + C2447 * C1891 - C48623 * C1896 +
             C2448 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C48293 * C260 +
           ((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C7771 +
            (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C7765 +
            (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C7772 +
            (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C7766 +
            (C48634 * C1251 - C2446 * C1246 + C48623 * C1892 - C2447 * C1888 +
             C48601 * C9883 - C2448 * C9882) *
                C7773 +
            (C48634 * C1258 - C2446 * C1252 + C48623 * C1897 - C2447 * C1893 +
             C48601 * C9885 - C2448 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 +
             (C113 * C682 - C48321 * C687) * C1070 +
             (C113 * C688 - C48321 * C697) * C48621 +
             (C113 * C1435 - C48321 * C1439) * C1071 +
             (C113 * C1440 - C48321 * C1447) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C386 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C114 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C48304) *
                C1066 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C114 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C48304) *
                C1067 +
            ((C48634 * C400 - C2446 * C391 + C48623 * C944 - C2447 * C936 +
              C48601 * C2828 - C2448 * C2821) *
                 C114 +
             (C48634 * C409 - C2446 * C401 + C48623 * C951 - C2447 * C945 +
              C48601 * C2833 - C2448 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C113 * C1887 - C48321 * C1890) * C8952 +
            (C113 * C1891 - C48321 * C1896) * C8946 +
            (C113 * C9134 - C48321 * C9136) * C8953 +
            (C113 * C9137 - C48321 * C9140) * C8947) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C386 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C386 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C2446 * C682 - C48634 * C687 + C2447 * C2309 - C48623 * C2315 +
             C2448 * C3260 - C48601 * C3263) *
                C7772 +
            (C2446 * C688 - C48634 * C697 + C2447 * C2316 - C48623 * C2327 +
             C2448 * C3264 - C48601 * C3269) *
                C7766 +
            (C2446 * C1435 - C48634 * C1439 + C2447 * C2310 - C48623 * C2317 +
             C2448 * C10068 - C48601 * C10070) *
                C7773 +
            (C2446 * C1440 - C48634 * C1447 + C2447 * C2318 - C48623 * C2328 +
             C2448 * C10071 - C48601 * C10074) *
                C48598) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C386 +
           ((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C7771 +
            (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C7765 +
            (C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
             C48601 * C3265 - C2448 * C3261) *
                C7772 +
            (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
             C48601 * C3270 - C2448 * C3266) *
                C7766 +
            (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
             C48601 * C10072 - C2448 * C10069) *
                C7773 +
            (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
             C48601 * C10075 - C2448 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C510 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C48293 * C510 +
           (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C48293 * C510 +
           (((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C114 +
             (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C48304) *
                C1066 +
            ((C2662 - C2661 + C2664 - C2663 + C2666 - C2665) * C114 +
             (C2668 - C2667 + C2670 - C2669 + C2672 - C2671) * C48304) *
                C1067 +
            ((C48634 * C276 - C2446 * C267 + C48623 * C693 - C2447 * C685 +
              C48601 * C2645 - C2448 * C2644) *
                 C114 +
             (C48634 * C285 - C2446 * C277 + C48623 * C700 - C2447 * C694 +
              C48601 * C2647 - C2448 * C2646) *
                 C48304) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C510 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C510 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            (C9899 - C9900 + C9901 - C9902 + C9903 - C9904) * C7773 +
            (C9905 - C9906 + C9907 - C9908 + C9909 - C9910) * C48598) *
               C48209 * C48293 * C510 +
           ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C2446 * C1245 - C48634 * C1249 + C2447 * C1887 - C48623 * C1890 +
             C2448 * C9618 - C48601 * C9620) *
                C7773 +
            (C2446 * C1250 - C48634 * C1257 + C2447 * C1891 - C48623 * C1896 +
             C2448 * C9621 - C48601 * C9624) *
                C48598) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C48293 * C510 +
           ((C2650 - C2649 + C2652 - C2651 + C2654 - C2653) * C7771 +
            (C2656 - C2655 + C2658 - C2657 + C2660 - C2659) * C7765 +
            (C9912 - C9911 + C9914 - C9913 + C9916 - C9915) * C7772 +
            (C9918 - C9917 + C9920 - C9919 + C9922 - C9921) * C7766 +
            (C48634 * C1251 - C2446 * C1246 + C48623 * C1892 - C2447 * C1888 +
             C48601 * C9883 - C2448 * C9882) *
                C7773 +
            (C48634 * C1258 - C2446 * C1252 + C48623 * C1897 - C2447 * C1893 +
             C48601 * C9885 - C2448 * C9884) *
                C48598) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
            (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
            (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
               C1066 +
           (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
            (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
               C1067 +
           (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
            (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C1069 + C1737 * C48633 + (C1739 - C1738) * C1070 +
            (C1741 - C1740) * C48621 + (C48321 * C1726 - C113 * C1723) * C1071 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C1066 +
           (C1272 * C1069 + C1273 * C48633 + (C1279 - C1278) * C1070 +
            (C1281 - C1280) * C48621 + (C48321 * C1728 - C113 * C1724) * C1071 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C1067 +
           (C1092 * C1069 + C1093 * C48633 + (C1287 - C1286) * C1070 +
            (C1289 - C1288) * C48621 + (C48321 * C1730 - C113 * C1725) * C1071 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C576 +
          (((C113 * C264 - C48321 * C270) * C114 +
            (C113 * C271 - C48321 * C282) * C48304) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
              C48293 * C577 +
          (((C48321 * C585 - C113 * C580) * C114 +
            (C48321 * C595 - C113 * C586) * C48304) *
               C103 +
           ((C48321 * C587 - C113 * C581) * C114 +
            (C48321 * C596 - C113 * C588) * C48304) *
               C104 +
           ((C48321 * C589 - C113 * C582) * C114 +
            (C48321 * C597 - C113 * C590) * C48304) *
               C105 +
           ((C48321 * C591 - C113 * C583) * C114 +
            (C48321 * C598 - C113 * C592) * C48304) *
               C106 +
           ((C48321 * C593 - C113 * C584) * C114 +
            (C48321 * C599 - C113 * C594) * C48304) *
               C107) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C48293 * C576 +
          (((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
             C2448 * C2309 - C48601 * C2315) *
                C114 +
            (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
             C2448 * C2316 - C48601 * C2327) *
                C48304) *
               C1066 +
           ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
               C1067 +
           ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
            (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
               C48585) *
              C48293 * C577 +
          (((C48634 * C585 - C2446 * C580 + C48623 * C1439 - C2447 * C1435 +
             C48601 * C2317 - C2448 * C2310) *
                C114 +
            (C48634 * C595 - C2446 * C586 + C48623 * C1447 - C2447 * C1440 +
             C48601 * C2328 - C2448 * C2318) *
                C48304) *
               C1066 +
           ((C48634 * C587 - C2446 * C581 + C48623 * C1441 - C2447 * C1436 +
             C48601 * C2321 - C2448 * C2312) *
                C114 +
            (C48634 * C596 - C2446 * C588 + C48623 * C1448 - C2447 * C1442 +
             C48601 * C2330 - C2448 * C2322) *
                C48304) *
               C1067 +
           ((C48634 * C589 - C2446 * C582 + C48623 * C1443 - C2447 * C1437 +
             C48601 * C2325 - C2448 * C2314) *
                C114 +
            (C48634 * C597 - C2446 * C590 + C48623 * C1449 - C2447 * C1444 +
             C48601 * C2332 - C2448 * C2326) *
                C48304) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
            (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
            (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
               C48630 +
           (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
            (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
               C48617 +
           (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
            (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C7771 + C1737 * C7765 + (C1739 - C1738) * C7772 +
            (C1741 - C1740) * C7766 + (C48321 * C1726 - C113 * C1723) * C7773 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C48630 +
           (C1272 * C7771 + C1273 * C7765 + (C1279 - C1278) * C7772 +
            (C1281 - C1280) * C7766 + (C48321 * C1728 - C113 * C1724) * C7773 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C48617 +
           (C1092 * C7771 + C1093 * C7765 + (C1287 - C1286) * C7772 +
            (C1289 - C1288) * C7766 + (C48321 * C1730 - C113 * C1725) * C7773 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C48293 * C576 +
          ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
           (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
           (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
           (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
           (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
              C48209 * C48293 * C577 +
          (C1736 * C8949 + C1737 * C8943 + C9291 * C8950 + C9292 * C8944 +
           C9293 * C8951 + C9294 * C8945 + (C9296 - C9295) * C8952 +
           (C9298 - C9297) * C8946 + (C48321 * C9287 - C113 * C9286) * C8953 +
           (C48321 * C9289 - C113 * C9288) * C8947) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
           (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
           C10353 * C7773 + C10354 * C48598) *
              C48209 * C48293 * C576 +
          ((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
           (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
           (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
           (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
           (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
           (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
              C48209 * C48293 * C577 +
          (C10353 * C7771 + C10354 * C7765 +
           (C10340 - C10339 + C10342 - C10341 + C10344 - C10343) * C7772 +
           (C10346 - C10345 + C10348 - C10347 + C10350 - C10349) * C7766 +
           (C48634 * C1726 - C2446 * C1723 + C48623 * C9136 - C2447 * C9134 +
            C48601 * C9622 - C2448 * C9619) *
               C7773 +
           (C48634 * C1732 - C2446 * C1727 + C48623 * C9140 - C2447 * C9137 +
            C48601 * C9625 - C2448 * C9623) *
               C48598) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C510 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C386 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C386 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C510 +
          ((((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C386 +
           (((C48634 * C687 - C2446 * C682 + C48623 * C2315 - C2447 * C2309 +
              C48601 * C3263 - C2448 * C3260) *
                 C114 +
             (C48634 * C697 - C2446 * C688 + C48623 * C2327 - C2447 * C2316 +
              C48601 * C3269 - C2448 * C3264) *
                 C48304) *
                C1066 +
            ((C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
              C48601 * C3265 - C2448 * C3261) *
                 C114 +
             (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
              C48601 * C3270 - C2448 * C3266) *
                 C48304) *
                C1067 +
            ((C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C114 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C510 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C386 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C386 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C510 +
          (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
            (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
               C48209 * C386 +
           ((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C7771 +
            (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C7765 +
            (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C7772 +
            (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C7766 +
            (C48634 * C1890 - C2446 * C1887 + C48623 * C9620 - C2447 * C9618 +
             C48601 * C10501 - C2448 * C10500) *
                C7773 +
            (C48634 * C1896 - C2446 * C1891 + C48623 * C9624 - C2447 * C9621 +
             C48601 * C10503 - C2448 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C114 +
             (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C48304) *
                C1066 +
            ((C2463 - C2462 + C2465 - C2464 + C2467 - C2466) * C114 +
             (C2469 - C2468 + C2471 - C2470 + C2473 - C2472) * C48304) *
                C1067 +
            ((C2474 - C2475 + C2476 - C2477 + C2478 - C2479) * C114 +
             (C2480 - C2481 + C2482 - C2483 + C2484 - C2485) * C48304) *
                C48585) *
               C784 +
           (((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C114 +
             (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C48304) *
                C1066 +
            ((C2848 - C2847 + C2850 - C2849 + C2852 - C2851) * C114 +
             (C2854 - C2853 + C2856 - C2855 + C2858 - C2857) * C48304) *
                C1067 +
            ((C48634 * C400 - C2446 * C391 + C48623 * C944 - C2447 * C936 +
              C48601 * C2828 - C2448 * C2821) *
                 C114 +
             (C48634 * C409 - C2446 * C401 + C48623 * C951 - C2447 * C945 +
              C48601 * C2833 - C2448 * C2829) *
                 C48304) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C784 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C784 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C2451 - C2450 + C2453 - C2452 + C2455 - C2454) * C7771 +
            (C2457 - C2456 + C2459 - C2458 + C2461 - C2460) * C7765 +
            (C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C7772 +
            (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C7766 +
            (C9911 - C9912 + C9913 - C9914 + C9915 - C9916) * C7773 +
            (C9917 - C9918 + C9919 - C9920 + C9921 - C9922) * C48598) *
               C48209 * C784 +
           ((C2836 - C2835 + C2838 - C2837 + C2840 - C2839) * C7771 +
            (C2842 - C2841 + C2844 - C2843 + C2846 - C2845) * C7765 +
            (C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
             C48601 * C3265 - C2448 * C3261) *
                C7772 +
            (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
             C48601 * C3270 - C2448 * C3266) *
                C7766 +
            (C48634 * C1441 - C2446 * C1436 + C48623 * C2321 - C2447 * C2312 +
             C48601 * C10072 - C2448 * C10069) *
                C7773 +
            (C48634 * C1448 - C2446 * C1442 + C48623 * C2330 - C2447 * C2322 +
             C48601 * C10075 - C2448 * C10073) *
                C48598) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C260 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C784 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
              C48601 * C938 - C2448 * C933) *
                 C114 +
             (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
              C48601 * C948 - C2448 * C939) *
                 C48304) *
                C1066 +
            ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
             (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
                C1067 +
            C2498 * C48585) *
               C784 +
           (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
              C2448 * C2818 - C48601 * C2822) *
                 C114 +
             (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
              C2448 * C2823 - C48601 * C2830) *
                 C48304) *
                C1066 +
            ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
             (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
                C1067 +
            ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
             (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
                C48585) *
               C48595) *
              C260 +
          ((((C2446 * C264 - C48634 * C270 + C2447 * C682 - C48623 * C687 +
              C2448 * C2309 - C48601 * C2315) *
                 C114 +
             (C2446 * C271 - C48634 * C282 + C2447 * C688 - C48623 * C697 +
              C2448 * C2316 - C48601 * C2327) *
                 C48304) *
                C1066 +
            ((C2649 - C2650 + C2651 - C2652 + C2653 - C2654) * C114 +
             (C2655 - C2656 + C2657 - C2658 + C2659 - C2660) * C48304) *
                C1067 +
            ((C2661 - C2662 + C2663 - C2664 + C2665 - C2666) * C114 +
             (C2667 - C2668 + C2669 - C2670 + C2671 - C2672) * C48304) *
                C48585) *
               C784 +
           (((C48634 * C687 - C2446 * C682 + C48623 * C2315 - C2447 * C2309 +
              C48601 * C3263 - C2448 * C3260) *
                 C114 +
             (C48634 * C697 - C2446 * C688 + C48623 * C2327 - C2447 * C2316 +
              C48601 * C3269 - C2448 * C3264) *
                 C48304) *
                C1066 +
            ((C48634 * C689 - C2446 * C683 + C48623 * C2319 - C2447 * C2311 +
              C48601 * C3265 - C2448 * C3261) *
                 C114 +
             (C48634 * C698 - C2446 * C690 + C48623 * C2329 - C2447 * C2320 +
              C48601 * C3270 - C2448 * C3266) *
                 C48304) *
                C1067 +
            ((C48634 * C691 - C2446 * C684 + C48623 * C2323 - C2447 * C2313 +
              C48601 * C3267 - C2448 * C3262) *
                 C114 +
             (C48634 * C699 - C2446 * C692 + C48623 * C2331 - C2447 * C2324 +
              C48601 * C3271 - C2448 * C3268) *
                 C48304) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C260 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C784 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C7771 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C7765 +
            (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
            (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
            C10353 * C7773 + C10354 * C48598) *
               C48209 * C784 +
           ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C7771 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C7765 +
            (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
            (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
            (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
            (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
               C48209 * C48595) *
              C260 +
          (((C9888 - C9887 + C9890 - C9889 + C9892 - C9891) * C7771 +
            (C9894 - C9893 + C9896 - C9895 + C9898 - C9897) * C7765 +
            (C9900 - C9899 + C9902 - C9901 + C9904 - C9903) * C7772 +
            (C9906 - C9905 + C9908 - C9907 + C9910 - C9909) * C7766 +
            (C10339 - C10340 + C10341 - C10342 + C10343 - C10344) * C7773 +
            (C10345 - C10346 + C10347 - C10348 + C10349 - C10350) * C48598) *
               C48209 * C784 +
           ((C10506 - C10505 + C10508 - C10507 + C10510 - C10509) * C7771 +
            (C10512 - C10511 + C10514 - C10513 + C10516 - C10515) * C7765 +
            (C10518 - C10517 + C10520 - C10519 + C10522 - C10521) * C7772 +
            (C10524 - C10523 + C10526 - C10525 + C10528 - C10527) * C7766 +
            (C48634 * C1890 - C2446 * C1887 + C48623 * C9620 - C2447 * C9618 +
             C48601 * C10501 - C2448 * C10500) *
                C7773 +
            (C48634 * C1896 - C2446 * C1891 + C48623 * C9624 - C2447 * C9621 +
             C48601 * C10503 - C2448 * C10502) *
                C48598) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C1069 +
            (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
            (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
            (C1906 - C1907) * C48598) *
               C1066 +
           ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
            (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
            (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
               C1067 +
           ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
            (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
            (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C1069 +
            (C48321 * C948 - C113 * C939) * C48633 +
            (C48321 * C2315 - C113 * C2309) * C1070 +
            (C48321 * C2327 - C113 * C2316) * C48621 +
            (C48321 * C2317 - C113 * C2310) * C1071 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C1066 +
           ((C48321 * C940 - C113 * C934) * C1069 +
            (C48321 * C949 - C113 * C941) * C48633 +
            (C48321 * C2319 - C113 * C2311) * C1070 +
            (C48321 * C2329 - C113 * C2320) * C48621 +
            (C48321 * C2321 - C113 * C2312) * C1071 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C1067 +
           ((C48321 * C942 - C113 * C935) * C1069 +
            (C48321 * C950 - C113 * C943) * C48633 +
            (C48321 * C2323 - C113 * C2313) * C1070 +
            (C48321 * C2331 - C113 * C2324) * C48621 +
            (C48321 * C2325 - C113 * C2314) * C1071 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C114 +
            (C113 * C395 - C48321 * C406) * C48304) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C114 +
            (C48321 * C948 - C113 * C939) * C48304) *
               C103 +
           ((C48321 * C940 - C113 * C934) * C114 +
            (C48321 * C949 - C113 * C941) * C48304) *
               C104 +
           ((C48321 * C942 - C113 * C935) * C114 +
            (C48321 * C950 - C113 * C943) * C48304) *
               C105 +
           ((C48321 * C944 - C113 * C936) * C114 +
            (C48321 * C951 - C113 * C945) * C48304) *
               C106 +
           ((C48321 * C946 - C113 * C937) * C114 +
            (C48321 * C952 - C113 * C947) * C48304) *
               C107) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
             C48601 * C938 - C2448 * C933) *
                C114 +
            (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
             C48601 * C948 - C2448 * C939) *
                C48304) *
               C1066 +
           ((C2450 - C2451 + C2452 - C2453 + C2454 - C2455) * C114 +
            (C2456 - C2457 + C2458 - C2459 + C2460 - C2461) * C48304) *
               C1067 +
           C2498 * C48585) *
              C930 +
          (((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
             C2448 * C2818 - C48601 * C2822) *
                C114 +
            (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
             C2448 * C2823 - C48601 * C2830) *
                C48304) *
               C1066 +
           ((C2835 - C2836 + C2837 - C2838 + C2839 - C2840) * C114 +
            (C2841 - C2842 + C2843 - C2844 + C2845 - C2846) * C48304) *
               C1067 +
           ((C2847 - C2848 + C2849 - C2850 + C2851 - C2852) * C114 +
            (C2853 - C2854 + C2855 - C2856 + C2857 - C2858) * C48304) *
               C48585) *
              C931 +
          (((C48634 * C938 - C2446 * C933 + C48623 * C2822 - C2447 * C2818 +
             C48601 * C3677 - C2448 * C3674) *
                C114 +
            (C48634 * C948 - C2446 * C939 + C48623 * C2830 - C2447 * C2823 +
             C48601 * C3683 - C2448 * C3678) *
                C48304) *
               C1066 +
           ((C48634 * C940 - C2446 * C934 + C48623 * C2824 - C2447 * C2819 +
             C48601 * C3679 - C2448 * C3675) *
                C114 +
            (C48634 * C949 - C2446 * C941 + C48623 * C2831 - C2447 * C2825 +
             C48601 * C3684 - C2448 * C3680) *
                C48304) *
               C1067 +
           ((C48634 * C942 - C2446 * C935 + C48623 * C2826 - C2447 * C2820 +
             C48601 * C3681 - C2448 * C3676) *
                C114 +
            (C48634 * C950 - C2446 * C943 + C48623 * C2832 - C2447 * C2827 +
             C48601 * C3685 - C2448 * C3682) *
                C48304) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C7771 +
            (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
            (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
            (C1906 - C1907) * C48598) *
               C48630 +
           ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
            (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
            (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
               C48617 +
           ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
            (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
            (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C7771 +
            (C48321 * C948 - C113 * C939) * C7765 +
            (C48321 * C2315 - C113 * C2309) * C7772 +
            (C48321 * C2327 - C113 * C2316) * C7766 +
            (C48321 * C2317 - C113 * C2310) * C7773 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C48630 +
           ((C48321 * C940 - C113 * C934) * C7771 +
            (C48321 * C949 - C113 * C941) * C7765 +
            (C48321 * C2319 - C113 * C2311) * C7772 +
            (C48321 * C2329 - C113 * C2320) * C7766 +
            (C48321 * C2321 - C113 * C2312) * C7773 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C48617 +
           ((C48321 * C942 - C113 * C935) * C7771 +
            (C48321 * C950 - C113 * C943) * C7765 +
            (C48321 * C2323 - C113 * C2313) * C7772 +
            (C48321 * C2331 - C113 * C2324) * C7766 +
            (C48321 * C2325 - C113 * C2314) * C7773 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C930 +
          ((C113 * C388 - C48321 * C394) * C8949 +
           (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
           (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
           (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
           (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
           (C9391 - C9392) * C8947) *
              C48209 * C931 +
          ((C48321 * C938 - C113 * C933) * C8949 +
           (C48321 * C948 - C113 * C939) * C8943 +
           (C48321 * C2315 - C113 * C2309) * C8950 +
           (C48321 * C2327 - C113 * C2316) * C8944 +
           (C48321 * C2317 - C113 * C2310) * C8951 +
           (C48321 * C2328 - C113 * C2318) * C8945 +
           (C48321 * C9620 - C113 * C9618) * C8952 +
           (C48321 * C9624 - C113 * C9621) * C8946 +
           (C48321 * C9622 - C113 * C9619) * C8953 +
           (C48321 * C9625 - C113 * C9623) * C8947) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C48634 * C122 - C2446 * C115 + C48623 * C394 - C2447 * C388 +
            C48601 * C938 - C2448 * C933) *
               C7771 +
           (C48634 * C136 - C2446 * C123 + C48623 * C406 - C2447 * C395 +
            C48601 * C948 - C2448 * C939) *
               C7765 +
           (C9887 - C9888 + C9889 - C9890 + C9891 - C9892) * C7772 +
           (C9893 - C9894 + C9895 - C9896 + C9897 - C9898) * C7766 +
           C10353 * C7773 + C10354 * C48598) *
              C48209 * C930 +
          ((C2446 * C388 - C48634 * C394 + C2447 * C933 - C48623 * C938 +
            C2448 * C2818 - C48601 * C2822) *
               C7771 +
           (C2446 * C395 - C48634 * C406 + C2447 * C939 - C48623 * C948 +
            C2448 * C2823 - C48601 * C2830) *
               C7765 +
           (C10505 - C10506 + C10507 - C10508 + C10509 - C10510) * C7772 +
           (C10511 - C10512 + C10513 - C10514 + C10515 - C10516) * C7766 +
           (C10517 - C10518 + C10519 - C10520 + C10521 - C10522) * C7773 +
           (C10523 - C10524 + C10525 - C10526 + C10527 - C10528) * C48598) *
              C48209 * C931 +
          ((C48634 * C938 - C2446 * C933 + C48623 * C2822 - C2447 * C2818 +
            C48601 * C3677 - C2448 * C3674) *
               C7771 +
           (C48634 * C948 - C2446 * C939 + C48623 * C2830 - C2447 * C2823 +
            C48601 * C3683 - C2448 * C3678) *
               C7765 +
           (C48634 * C2315 - C2446 * C2309 + C48623 * C3263 - C2447 * C3260 +
            C48601 * C10932 - C2448 * C10930) *
               C7772 +
           (C48634 * C2327 - C2446 * C2316 + C48623 * C3269 - C2447 * C3264 +
            C48601 * C10936 - C2448 * C10933) *
               C7766 +
           (C48634 * C2317 - C2446 * C2310 + C48623 * C10070 - C2447 * C10068 +
            C48601 * C10934 - C2448 * C10931) *
               C7773 +
           (C48634 * C2328 - C2446 * C2318 + C48623 * C10074 - C2447 * C10071 +
            C48601 * C10937 - C2448 * C10935) *
               C48598) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C114 +
            (C4898 - C4897 + C4900 - C4899) * C48304) *
               C3786 +
           ((C4902 - C4901 + C4904 - C4903) * C114 +
            (C4906 - C4905 + C4908 - C4907) * C48304) *
               C3787 +
           ((C4910 - C4909 + C4912 - C4911) * C114 +
            (C4914 - C4913 + C4916 - C4915) * C48304) *
               C3788 +
           ((C4917 - C4918 + C4919 - C4920) * C114 +
            (C4921 - C4922 + C4923 - C4924) * C48304) *
               C48602) *
              C48293 * C48276 * C111 +
          (C4941 * C3786 + C4942 * C3787 +
           ((C4918 - C4917 + C4920 - C4919) * C114 +
            (C4922 - C4921 + C4924 - C4923) * C48304) *
               C3788 +
           ((C48566 * C132 - C4890 * C120 + C48408 * C404 - C4891 * C393) *
                C114 +
            (C48566 * C141 - C4890 * C133 + C48408 * C411 - C4891 * C405) *
                C48304) *
               C48602) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 +
            (C6913 - C6912 + C6915 - C6914) * C7773 +
            (C6917 - C6916 + C6919 - C6918) * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + (C6337 - C6336 + C6339 - C6338) * C7773 +
            (C6341 - C6340 + C6343 - C6342) * C48598) *
               C48219) *
              C48293 * C48276 * C110 +
          (((C4894 - C4893 + C4896 - C4895) * C7771 +
            (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
            C6359 * C7766 + (C6336 - C6337 + C6338 - C6339) * C7773 +
            (C6340 - C6341 + C6342 - C6343) * C48598) *
               C48543 +
           ((C4902 - C4901 + C4904 - C4903) * C7771 +
            (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
            C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
            (C6352 - C6353 + C6354 - C6355) * C48598) *
               C48219) *
              C48293 * C48276 * C111 +
          ((C4933 * C7771 + C4934 * C7765 + C6120 * C7772 + C6121 * C7766 +
            (C6349 - C6348 + C6351 - C6350) * C7773 +
            (C6353 - C6352 + C6355 - C6354) * C48598) *
               C48543 +
           (C4935 * C7771 + C4936 * C7765 +
            (C5090 - C5089 + C5092 - C5091) * C7772 +
            (C5094 - C5093 + C5096 - C5095) * C7766 +
            (C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                C7773 +
            (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                C48598) *
               C48219) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C48293 * C260 +
           (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C48293 * C260 +
           (((C5074 - C5073 + C5076 - C5075) * C114 +
             (C5078 - C5077 + C5080 - C5079) * C48304) *
                C3786 +
            ((C5082 - C5081 + C5084 - C5083) * C114 +
             (C5086 - C5085 + C5088 - C5087) * C48304) *
                C3787 +
            ((C5090 - C5089 + C5092 - C5091) * C114 +
             (C5094 - C5093 + C5096 - C5095) * C48304) *
                C3788 +
            ((C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                 C114 +
             (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C48293 * C260 +
           (((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C4890 * C1245 - C48566 * C1249 + C4891 * C1887 - C48408 * C1890) *
                 C7773 +
             (C4890 * C1250 - C48566 * C1257 + C4891 * C1891 - C48408 * C1896) *
                 C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C48293 * C48593) *
              C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C48293 * C260 +
           ((C6356 * C7771 + C6357 * C7765 + C12387 * C7772 + C12388 * C7766 +
             (C12380 - C12379 + C12382 - C12381) * C7773 +
             (C12384 - C12383 + C12386 - C12385) * C48598) *
                C48543 +
            (C6120 * C7771 + C6121 * C7765 +
             (C6349 - C6348 + C6351 - C6350) * C7772 +
             (C6353 - C6352 + C6355 - C6354) * C7766 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C7773 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C114 +
             (C5232 - C5231 + C5234 - C5233) * C48304) *
                C3786 +
            ((C5236 - C5235 + C5238 - C5237) * C114 +
             (C5240 - C5239 + C5242 - C5241) * C48304) *
                C3787 +
            ((C5244 - C5243 + C5246 - C5245) * C114 +
             (C5248 - C5247 + C5250 - C5249) * C48304) *
                C3788 +
            ((C48566 * C402 - C4890 * C392 + C48408 * C946 - C4891 * C937) *
                 C114 +
             (C48566 * C410 - C4890 * C403 + C48408 * C952 - C4891 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C4890 * C1435 - C48566 * C1439 + C4891 * C2310 - C48408 * C2317) *
                 C7773 +
             (C4890 * C1440 - C48566 * C1447 + C4891 * C2318 - C48408 * C2328) *
                 C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C48276 * C262 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C386 +
           (((C5228 - C5227 + C5230 - C5229) * C7771 +
             (C5232 - C5231 + C5234 - C5233) * C7765 +
             (C6557 - C6556 + C6559 - C6558) * C7772 +
             (C6561 - C6560 + C6563 - C6562) * C7766 +
             (C12586 - C12585 + C12588 - C12587) * C7773 +
             (C12590 - C12589 + C12592 - C12591) * C48598) *
                C48543 +
            ((C5236 - C5235 + C5238 - C5237) * C7771 +
             (C5240 - C5239 + C5242 - C5241) * C7765 +
             (C6565 - C6564 + C6567 - C6566) * C7772 +
             (C6569 - C6568 + C6571 - C6570) * C7766 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C7773 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C48293 * C510 +
           (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C48293 * C510 +
           (((C5074 - C5073 + C5076 - C5075) * C114 +
             (C5078 - C5077 + C5080 - C5079) * C48304) *
                C3786 +
            ((C5082 - C5081 + C5084 - C5083) * C114 +
             (C5086 - C5085 + C5088 - C5087) * C48304) *
                C3787 +
            ((C5090 - C5089 + C5092 - C5091) * C114 +
             (C5094 - C5093 + C5096 - C5095) * C48304) *
                C3788 +
            ((C48566 * C278 - C4890 * C268 + C48408 * C695 - C4891 * C686) *
                 C114 +
             (C48566 * C286 - C4890 * C279 + C48408 * C701 - C4891 * C696) *
                 C48304) *
                C48602) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 +
             (C6913 - C6912 + C6915 - C6914) * C7773 +
             (C6917 - C6916 + C6919 - C6918) * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C48293 * C510 +
           (((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C4890 * C1245 - C48566 * C1249 + C4891 * C1887 - C48408 * C1890) *
                 C7773 +
             (C4890 * C1250 - C48566 * C1257 + C4891 * C1891 - C48408 * C1896) *
                 C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C48293 * C48593) *
              C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C48293 * C510 +
           ((C6356 * C7771 + C6357 * C7765 + C12387 * C7772 + C12388 * C7766 +
             (C12380 - C12379 + C12382 - C12381) * C7773 +
             (C12384 - C12383 + C12386 - C12385) * C48598) *
                C48543 +
            (C6120 * C7771 + C6121 * C7765 +
             (C6349 - C6348 + C6351 - C6350) * C7772 +
             (C6353 - C6352 + C6355 - C6354) * C7766 +
             (C48566 * C1253 - C4890 * C1247 + C48408 * C1894 - C4891 * C1889) *
                 C7773 +
             (C48566 * C1259 - C4890 * C1254 + C48408 * C1898 - C4891 * C1895) *
                 C48598) *
                C48219) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C48293 * C576 +
          (((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                C114 +
            (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                C48304) *
               C3786 +
           ((C5073 - C5074 + C5075 - C5076) * C114 +
            (C5077 - C5078 + C5079 - C5080) * C48304) *
               C3787 +
           ((C5081 - C5082 + C5083 - C5084) * C114 +
            (C5085 - C5086 + C5087 - C5088) * C48304) *
               C3788 +
           ((C5089 - C5090 + C5091 - C5092) * C114 +
            (C5093 - C5094 + C5095 - C5096) * C48304) *
               C48602) *
              C48293 * C577 +
          (((C48566 * C585 - C4890 * C580 + C48408 * C1439 - C4891 * C1435) *
                C114 +
            (C48566 * C595 - C4890 * C586 + C48408 * C1447 - C4891 * C1440) *
                C48304) *
               C3786 +
           ((C48566 * C587 - C4890 * C581 + C48408 * C1441 - C4891 * C1436) *
                C114 +
            (C48566 * C596 - C4890 * C588 + C48408 * C1448 - C4891 * C1442) *
                C48304) *
               C3787 +
           ((C48566 * C589 - C4890 * C582 + C48408 * C1443 - C4891 * C1437) *
                C114 +
            (C48566 * C597 - C4890 * C590 + C48408 * C1449 - C4891 * C1444) *
                C48304) *
               C3788 +
           ((C48566 * C591 - C4890 * C583 + C48408 * C1445 - C4891 * C1438) *
                C114 +
            (C48566 * C598 - C4890 * C592 + C48408 * C1450 - C4891 * C1446) *
                C48304) *
               C48602) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
            C12946 * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
               C48219) *
              C48293 * C576 +
          (((C6321 - C6320 + C6323 - C6322) * C7771 +
            (C6325 - C6324 + C6327 - C6326) * C7765 +
            (C6912 - C6913 + C6914 - C6915) * C7772 +
            (C6916 - C6917 + C6918 - C6919) * C7766 +
            (C12937 - C12938 + C12939 - C12940) * C7773 +
            (C12941 - C12942 + C12943 - C12944) * C48598) *
               C48543 +
           (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
            (C12379 - C12380 + C12381 - C12382) * C7773 +
            (C12383 - C12384 + C12385 - C12386) * C48598) *
               C48219) *
              C48293 * C577 +
          ((C12945 * C7771 + C12946 * C7765 +
            (C12938 - C12937 + C12940 - C12939) * C7772 +
            (C12942 - C12941 + C12944 - C12943) * C7766 +
            (C48566 * C1726 - C4890 * C1723 + C48408 * C9136 - C4891 * C9134) *
                C7773 +
            (C48566 * C1732 - C4890 * C1727 + C48408 * C9140 - C4891 * C9137) *
                C48598) *
               C48543 +
           (C12387 * C7771 + C12388 * C7765 +
            (C12380 - C12379 + C12382 - C12381) * C7772 +
            (C12384 - C12383 + C12386 - C12385) * C7766 +
            (C48566 * C1728 - C4890 * C1724 + C48408 * C9138 - C4891 * C9135) *
                C7773 +
            (C48566 * C1733 - C4890 * C1729 + C48408 * C9141 - C4891 * C9139) *
                C48598) *
               C48219) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C510 +
          ((((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C386 +
           (((C48566 * C687 - C4890 * C682 + C48408 * C2315 - C4891 * C2309) *
                 C114 +
             (C48566 * C697 - C4890 * C688 + C48408 * C2327 - C4891 * C2316) *
                 C48304) *
                C3786 +
            ((C48566 * C689 - C4890 * C683 + C48408 * C2319 - C4891 * C2311) *
                 C114 +
             (C48566 * C698 - C4890 * C690 + C48408 * C2329 - C4891 * C2320) *
                 C48304) *
                C3787 +
            ((C48566 * C691 - C4890 * C684 + C48408 * C2323 - C4891 * C2313) *
                 C114 +
             (C48566 * C699 - C4890 * C692 + C48408 * C2331 - C4891 * C2324) *
                 C48304) *
                C3788 +
            ((C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C114 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C386 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C510 +
          ((((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C12937 - C12938 + C12939 - C12940) * C7773 +
             (C12941 - C12942 + C12943 - C12944) * C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C386 +
           (((C7115 - C7114 + C7117 - C7116) * C7771 +
             (C7119 - C7118 + C7121 - C7120) * C7765 +
             (C13142 - C13141 + C13144 - C13143) * C7772 +
             (C13146 - C13145 + C13148 - C13147) * C7766 +
             (C48566 * C1890 - C4890 * C1887 + C48408 * C9620 - C4891 * C9618) *
                 C7773 +
             (C48566 * C1896 - C4890 * C1891 + C48408 * C9624 - C4891 * C9621) *
                 C48598) *
                C48543 +
            ((C6557 - C6556 + C6559 - C6558) * C7771 +
             (C6561 - C6560 + C6563 - C6562) * C7765 +
             (C12586 - C12585 + C12588 - C12587) * C7772 +
             (C12590 - C12589 + C12592 - C12591) * C7766 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C7773 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C114 +
             (C4898 - C4897 + C4900 - C4899) * C48304) *
                C3786 +
            ((C4902 - C4901 + C4904 - C4903) * C114 +
             (C4906 - C4905 + C4908 - C4907) * C48304) *
                C3787 +
            ((C4910 - C4909 + C4912 - C4911) * C114 +
             (C4914 - C4913 + C4916 - C4915) * C48304) *
                C3788 +
            ((C4917 - C4918 + C4919 - C4920) * C114 +
             (C4921 - C4922 + C4923 - C4924) * C48304) *
                C48602) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C114 +
             (C5232 - C5231 + C5234 - C5233) * C48304) *
                C3786 +
            ((C5236 - C5235 + C5238 - C5237) * C114 +
             (C5240 - C5239 + C5242 - C5241) * C48304) *
                C3787 +
            ((C5244 - C5243 + C5246 - C5245) * C114 +
             (C5248 - C5247 + C5250 - C5249) * C48304) *
                C3788 +
            ((C48566 * C402 - C4890 * C392 + C48408 * C946 - C4891 * C937) *
                 C114 +
             (C48566 * C410 - C4890 * C403 + C48408 * C952 - C4891 * C947) *
                 C48304) *
                C48602) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C48276 * C512 +
          ((((C4894 - C4893 + C4896 - C4895) * C7771 +
             (C4898 - C4897 + C4900 - C4899) * C7765 + C6358 * C7772 +
             C6359 * C7766 + C12389 * C7773 + C12390 * C48598) *
                C48543 +
            ((C4902 - C4901 + C4904 - C4903) * C7771 +
             (C4906 - C4905 + C4908 - C4907) * C7765 + C6360 * C7772 +
             C6361 * C7766 + (C6348 - C6349 + C6350 - C6351) * C7773 +
             (C6352 - C6353 + C6354 - C6355) * C48598) *
                C48219) *
               C784 +
           (((C5228 - C5227 + C5230 - C5229) * C7771 +
             (C5232 - C5231 + C5234 - C5233) * C7765 +
             (C6557 - C6556 + C6559 - C6558) * C7772 +
             (C6561 - C6560 + C6563 - C6562) * C7766 +
             (C12586 - C12585 + C12588 - C12587) * C7773 +
             (C12590 - C12589 + C12592 - C12591) * C48598) *
                C48543 +
            ((C5236 - C5235 + C5238 - C5237) * C7771 +
             (C5240 - C5239 + C5242 - C5241) * C7765 +
             (C6565 - C6564 + C6567 - C6566) * C7772 +
             (C6569 - C6568 + C6571 - C6570) * C7766 +
             (C48566 * C1443 - C4890 * C1437 + C48408 * C2325 - C4891 * C2314) *
                 C7773 +
             (C48566 * C1449 - C4890 * C1444 + C48408 * C2332 - C4891 * C2326) *
                 C48598) *
                C48219) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C114 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C48304) *
                C3786 +
            ((C4893 - C4894 + C4895 - C4896) * C114 +
             (C4897 - C4898 + C4899 - C4900) * C48304) *
                C3787 +
            C4941 * C3788 + C4942 * C48602) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C114 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C48304) *
                C3786 +
            ((C5227 - C5228 + C5229 - C5230) * C114 +
             (C5231 - C5232 + C5233 - C5234) * C48304) *
                C3787 +
            ((C5235 - C5236 + C5237 - C5238) * C114 +
             (C5239 - C5240 + C5241 - C5242) * C48304) *
                C3788 +
            ((C5243 - C5244 + C5245 - C5246) * C114 +
             (C5247 - C5248 + C5249 - C5250) * C48304) *
                C48602) *
               C48595) *
              C260 +
          ((((C4890 * C264 - C48566 * C270 + C4891 * C682 - C48408 * C687) *
                 C114 +
             (C4890 * C271 - C48566 * C282 + C4891 * C688 - C48408 * C697) *
                 C48304) *
                C3786 +
            ((C5073 - C5074 + C5075 - C5076) * C114 +
             (C5077 - C5078 + C5079 - C5080) * C48304) *
                C3787 +
            ((C5081 - C5082 + C5083 - C5084) * C114 +
             (C5085 - C5086 + C5087 - C5088) * C48304) *
                C3788 +
            ((C5089 - C5090 + C5091 - C5092) * C114 +
             (C5093 - C5094 + C5095 - C5096) * C48304) *
                C48602) *
               C784 +
           (((C48566 * C687 - C4890 * C682 + C48408 * C2315 - C4891 * C2309) *
                 C114 +
             (C48566 * C697 - C4890 * C688 + C48408 * C2327 - C4891 * C2316) *
                 C48304) *
                C3786 +
            ((C48566 * C689 - C4890 * C683 + C48408 * C2319 - C4891 * C2311) *
                 C114 +
             (C48566 * C698 - C4890 * C690 + C48408 * C2329 - C4891 * C2320) *
                 C48304) *
                C3787 +
            ((C48566 * C691 - C4890 * C684 + C48408 * C2323 - C4891 * C2313) *
                 C114 +
             (C48566 * C699 - C4890 * C692 + C48408 * C2331 - C4891 * C2324) *
                 C48304) *
                C3788 +
            ((C48566 * C693 - C4890 * C685 + C48408 * C2645 - C4891 * C2644) *
                 C114 +
             (C48566 * C700 - C4890 * C694 + C48408 * C2647 - C4891 * C2646) *
                 C48304) *
                C48602) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                 C7771 +
             (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                 C7765 +
             (C6320 - C6321 + C6322 - C6323) * C7772 +
             (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
             C12946 * C48598) *
                C48543 +
            ((C4893 - C4894 + C4895 - C4896) * C7771 +
             (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
             C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
                C48219) *
               C784 +
           (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                 C7771 +
             (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                 C7765 +
             (C7114 - C7115 + C7116 - C7117) * C7772 +
             (C7118 - C7119 + C7120 - C7121) * C7766 +
             (C13141 - C13142 + C13143 - C13144) * C7773 +
             (C13145 - C13146 + C13147 - C13148) * C48598) *
                C48543 +
            ((C5227 - C5228 + C5229 - C5230) * C7771 +
             (C5231 - C5232 + C5233 - C5234) * C7765 +
             (C6556 - C6557 + C6558 - C6559) * C7772 +
             (C6560 - C6561 + C6562 - C6563) * C7766 +
             (C12585 - C12586 + C12587 - C12588) * C7773 +
             (C12589 - C12590 + C12591 - C12592) * C48598) *
                C48219) *
               C48595) *
              C260 +
          ((((C6321 - C6320 + C6323 - C6322) * C7771 +
             (C6325 - C6324 + C6327 - C6326) * C7765 +
             (C6912 - C6913 + C6914 - C6915) * C7772 +
             (C6916 - C6917 + C6918 - C6919) * C7766 +
             (C12937 - C12938 + C12939 - C12940) * C7773 +
             (C12941 - C12942 + C12943 - C12944) * C48598) *
                C48543 +
            (C6358 * C7771 + C6359 * C7765 + C12389 * C7772 + C12390 * C7766 +
             (C12379 - C12380 + C12381 - C12382) * C7773 +
             (C12383 - C12384 + C12385 - C12386) * C48598) *
                C48219) *
               C784 +
           (((C7115 - C7114 + C7117 - C7116) * C7771 +
             (C7119 - C7118 + C7121 - C7120) * C7765 +
             (C13142 - C13141 + C13144 - C13143) * C7772 +
             (C13146 - C13145 + C13148 - C13147) * C7766 +
             (C48566 * C1890 - C4890 * C1887 + C48408 * C9620 - C4891 * C9618) *
                 C7773 +
             (C48566 * C1896 - C4890 * C1891 + C48408 * C9624 - C4891 * C9621) *
                 C48598) *
                C48543 +
            ((C6557 - C6556 + C6559 - C6558) * C7771 +
             (C6561 - C6560 + C6563 - C6562) * C7765 +
             (C12586 - C12585 + C12588 - C12587) * C7772 +
             (C12590 - C12589 + C12592 - C12591) * C7766 +
             (C48566 * C1892 - C4890 * C1888 + C48408 * C9883 - C4891 * C9882) *
                 C7773 +
             (C48566 * C1897 - C4890 * C1893 + C48408 * C9885 - C4891 * C9884) *
                 C48598) *
                C48219) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C114 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C48304) *
               C3786 +
           ((C4893 - C4894 + C4895 - C4896) * C114 +
            (C4897 - C4898 + C4899 - C4900) * C48304) *
               C3787 +
           C4941 * C3788 + C4942 * C48602) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C114 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C48304) *
               C3786 +
           ((C5227 - C5228 + C5229 - C5230) * C114 +
            (C5231 - C5232 + C5233 - C5234) * C48304) *
               C3787 +
           ((C5235 - C5236 + C5237 - C5238) * C114 +
            (C5239 - C5240 + C5241 - C5242) * C48304) *
               C3788 +
           ((C5243 - C5244 + C5245 - C5246) * C114 +
            (C5247 - C5248 + C5249 - C5250) * C48304) *
               C48602) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C114 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C48304) *
               C3786 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C114 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C48304) *
               C3787 +
           ((C48566 * C942 - C4890 * C935 + C48408 * C2826 - C4891 * C2820) *
                C114 +
            (C48566 * C950 - C4890 * C943 + C48408 * C2832 - C4891 * C2827) *
                C48304) *
               C3788 +
           ((C48566 * C944 - C4890 * C936 + C48408 * C2828 - C4891 * C2821) *
                C114 +
            (C48566 * C951 - C4890 * C945 + C48408 * C2833 - C4891 * C2829) *
                C48304) *
               C48602) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C48566 * C122 - C4890 * C115 + C48408 * C394 - C4891 * C388) *
                C7771 +
            (C48566 * C136 - C4890 * C123 + C48408 * C406 - C4891 * C395) *
                C7765 +
            (C6320 - C6321 + C6322 - C6323) * C7772 +
            (C6324 - C6325 + C6326 - C6327) * C7766 + C12945 * C7773 +
            C12946 * C48598) *
               C48543 +
           ((C4893 - C4894 + C4895 - C4896) * C7771 +
            (C4897 - C4898 + C4899 - C4900) * C7765 + C6356 * C7772 +
            C6357 * C7766 + C12387 * C7773 + C12388 * C48598) *
               C48219) *
              C930 +
          (((C4890 * C388 - C48566 * C394 + C4891 * C933 - C48408 * C938) *
                C7771 +
            (C4890 * C395 - C48566 * C406 + C4891 * C939 - C48408 * C948) *
                C7765 +
            (C7114 - C7115 + C7116 - C7117) * C7772 +
            (C7118 - C7119 + C7120 - C7121) * C7766 +
            (C13141 - C13142 + C13143 - C13144) * C7773 +
            (C13145 - C13146 + C13147 - C13148) * C48598) *
               C48543 +
           ((C5227 - C5228 + C5229 - C5230) * C7771 +
            (C5231 - C5232 + C5233 - C5234) * C7765 +
            (C6556 - C6557 + C6558 - C6559) * C7772 +
            (C6560 - C6561 + C6562 - C6563) * C7766 +
            (C12585 - C12586 + C12587 - C12588) * C7773 +
            (C12589 - C12590 + C12591 - C12592) * C48598) *
               C48219) *
              C931 +
          (((C48566 * C938 - C4890 * C933 + C48408 * C2822 - C4891 * C2818) *
                C7771 +
            (C48566 * C948 - C4890 * C939 + C48408 * C2830 - C4891 * C2823) *
                C7765 +
            (C48566 * C2315 - C4890 * C2309 + C48408 * C3263 - C4891 * C3260) *
                C7772 +
            (C48566 * C2327 - C4890 * C2316 + C48408 * C3269 - C4891 * C3264) *
                C7766 +
            (C48566 * C2317 - C4890 * C2310 + C48408 * C10070 -
             C4891 * C10068) *
                C7773 +
            (C48566 * C2328 - C4890 * C2318 + C48408 * C10074 -
             C4891 * C10071) *
                C48598) *
               C48543 +
           ((C48566 * C940 - C4890 * C934 + C48408 * C2824 - C4891 * C2819) *
                C7771 +
            (C48566 * C949 - C4890 * C941 + C48408 * C2831 - C4891 * C2825) *
                C7765 +
            (C48566 * C2319 - C4890 * C2311 + C48408 * C3265 - C4891 * C3261) *
                C7772 +
            (C48566 * C2329 - C4890 * C2320 + C48408 * C3270 - C4891 * C3266) *
                C7766 +
            (C48566 * C2321 - C4890 * C2312 + C48408 * C10072 -
             C4891 * C10069) *
                C7773 +
            (C48566 * C2330 - C4890 * C2322 + C48408 * C10075 -
             C4891 * C10073) *
                C48598) *
               C48219) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
           ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
           ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
           ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
           ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
              C48293 * C48276 * C111 +
          (C176 * C103 + C177 * C104 + C178 * C105 +
           ((C161 - C160) * C114 + (C163 - C162) * C48304) * C106 +
           ((C48321 * C134 - C113 * C121) * C114 +
            (C48321 * C142 - C113 * C135) * C48304) *
               C107) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 +
            (C48321 * C270 - C113 * C264) * C1070 +
            (C48321 * C282 - C113 * C271) * C48621 +
            (C48321 * C585 - C113 * C580) * C1071 +
            (C48321 * C595 - C113 * C586) * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 +
            (C290 - C289) * C1070 + (C292 - C291) * C48621 +
            (C1073 - C1074) * C1071 + (C1075 - C1076) * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C1069 + (C147 - C146) * C48633 +
            (C289 - C290) * C1070 + (C291 - C292) * C48621 +
            (C1074 - C1073) * C1071 + (C1076 - C1075) * C48598) *
               C1066 +
           ((C149 - C148) * C1069 + (C151 - C150) * C48633 +
            (C293 - C294) * C1070 + (C295 - C296) * C48621 +
            (C1082 - C1081) * C1071 + (C1084 - C1083) * C48598) *
               C1067 +
           ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
            (C297 - C298) * C1070 + (C299 - C300) * C48621 +
            (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C1099 * C1066 +
           (C166 * C1069 + C167 * C48633 + (C298 - C297) * C1070 +
            (C300 - C299) * C48621 + (C1086 - C1085) * C1071 +
            (C1088 - C1087) * C48598) *
               C1067 +
           (C168 * C1069 + C169 * C48633 + (C302 - C301) * C1070 +
            (C304 - C303) * C48621 + (C48321 * C593 - C113 * C584) * C1071 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C48276 * C110 +
          (((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
            C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
               C48630 +
           ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
            C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
               C48617 +
           ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
            C3940 * C7766 + (C1085 - C1086) * C7773 +
            (C1087 - C1088) * C48598) *
               C48585) *
              C48293 * C48276 * C111 +
          (C7785 * C48630 +
           (C166 * C7771 + C167 * C7765 + C3799 * C7772 + C3800 * C7766 +
            (C1086 - C1085) * C7773 + (C1088 - C1087) * C48598) *
               C48617 +
           (C168 * C7771 + C169 * C7765 + (C302 - C301) * C7772 +
            (C304 - C303) * C7766 + (C48321 * C593 - C113 * C584) * C7773 +
            (C48321 * C599 - C113 * C594) * C48598) *
               C48585) *
              C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
           (C48321 * C1726 - C113 * C1723) * C8953 +
           (C48321 * C1732 - C113 * C1727) * C8947) *
              C48209 * C48293 * C48276 * C110 +
          ((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
           C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
           (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
           (C113 * C1724 - C48321 * C1728) * C8953 +
           (C113 * C1729 - C48321 * C1733) * C8947) *
              C48209 * C48293 * C48276 * C111 +
          (C164 * C8949 + C165 * C8943 + C1079 * C8950 + C1080 * C8944 +
           C1092 * C8951 + C1093 * C8945 + (C1287 - C1286) * C8952 +
           (C1289 - C1288) * C8946 + (C48321 * C1730 - C113 * C1725) * C8953 +
           (C48321 * C1734 - C113 * C1731) * C8947) *
              C48209 * C48293 * C48276 * C112)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C260 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C260 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C260 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C260 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C260 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C260 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C386 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 +
             (C113 * C682 - C48321 * C687) * C1070 +
             (C113 * C688 - C48321 * C697) * C48621 +
             (C113 * C1435 - C48321 * C1439) * C1071 +
             (C113 * C1440 - C48321 * C1447) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C262 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C386 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C113 * C1887 - C48321 * C1890) * C8952 +
            (C113 * C1891 - C48321 * C1896) * C8946 +
            (C113 * C9134 - C48321 * C9136) * C8953 +
            (C113 * C9137 - C48321 * C9140) * C8947) *
               C48209 * C48595) *
              C48276 * C262 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C386 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C48293 * C510 +
           (((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C48293 * C510 +
           (((C290 - C289) * C114 + (C292 - C291) * C48304) * C103 +
            ((C294 - C293) * C114 + (C296 - C295) * C48304) * C104 +
            ((C298 - C297) * C114 + (C300 - C299) * C48304) * C105 +
            ((C302 - C301) * C114 + (C304 - C303) * C48304) * C106 +
            ((C48321 * C280 - C113 * C269) * C114 +
             (C48321 * C287 - C113 * C281) * C48304) *
                C107) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + (C1266 - C1267) * C1071 +
             (C1268 - C1269) * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C113 * C1245 - C48321 * C1249) * C1071 +
             (C113 * C1250 - C48321 * C1257) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C1069 + C1271 * C48633 + C1272 * C1070 + C1273 * C48621 +
             (C1279 - C1278) * C1071 + (C1281 - C1280) * C48598) *
                C1066 +
            (C1079 * C1069 + C1080 * C48633 + C1092 * C1070 + C1093 * C48621 +
             (C1287 - C1286) * C1071 + (C1289 - C1288) * C48598) *
                C1067 +
            ((C298 - C297) * C1069 + (C300 - C299) * C48633 +
             (C1086 - C1085) * C1070 + (C1088 - C1087) * C48621 +
             (C48321 * C1255 - C113 * C1248) * C1071 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C48293 * C510 +
           (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C48293 * C48593) *
              C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C48293 * C510 +
           ((C1270 * C7771 + C1271 * C7765 + C1272 * C7772 + C1273 * C7766 +
             (C1279 - C1278) * C7773 + (C1281 - C1280) * C48598) *
                C48630 +
            (C1079 * C7771 + C1080 * C7765 + C1092 * C7772 + C1093 * C7766 +
             (C1287 - C1286) * C7773 + (C1289 - C1288) * C48598) *
                C48617 +
            (C3799 * C7771 + C3800 * C7765 + (C1086 - C1085) * C7772 +
             (C1088 - C1087) * C7766 + (C48321 * C1255 - C113 * C1248) * C7773 +
             (C48321 * C1260 - C113 * C1256) * C48598) *
                C48585) *
               C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            (C1739 - C1738) * C8952 + (C1741 - C1740) * C8946 +
            (C9045 - C9046) * C8953 + (C9047 - C9048) * C8947) *
               C48209 * C48293 * C510 +
           ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C113 * C9036 - C48321 * C9038) * C8953 +
            (C113 * C9039 - C48321 * C9042) * C8947) *
               C48209 * C48293 * C48593) *
              C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C48293 * C510 +
           (C1270 * C8949 + C1271 * C8943 + C1272 * C8950 + C1273 * C8944 +
            (C1279 - C1278) * C8951 + (C1281 - C1280) * C8945 +
            (C9050 - C9049) * C8952 + (C9052 - C9051) * C8946 +
            (C48321 * C9040 - C113 * C9037) * C8953 +
            (C48321 * C9043 - C113 * C9041) * C8947) *
               C48209 * C48293 * C48593) *
              C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C48293 * C576 +
          (((C113 * C264 - C48321 * C270) * C114 +
            (C113 * C271 - C48321 * C282) * C48304) *
               C103 +
           ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
           ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
           ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
           ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
              C48293 * C577 +
          (((C48321 * C585 - C113 * C580) * C114 +
            (C48321 * C595 - C113 * C586) * C48304) *
               C103 +
           ((C48321 * C587 - C113 * C581) * C114 +
            (C48321 * C596 - C113 * C588) * C48304) *
               C104 +
           ((C48321 * C589 - C113 * C582) * C114 +
            (C48321 * C597 - C113 * C590) * C48304) *
               C105 +
           ((C48321 * C591 - C113 * C583) * C114 +
            (C48321 * C598 - C113 * C592) * C48304) *
               C106 +
           ((C48321 * C593 - C113 * C584) * C114 +
            (C48321 * C599 - C113 * C594) * C48304) *
               C107) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
            (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
            (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
               C1066 +
           (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
            (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
               C1067 +
           (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
            (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C1069 + C1737 * C48633 + (C1739 - C1738) * C1070 +
            (C1741 - C1740) * C48621 + (C48321 * C1726 - C113 * C1723) * C1071 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C1066 +
           (C1272 * C1069 + C1273 * C48633 + (C1279 - C1278) * C1070 +
            (C1281 - C1280) * C48621 + (C48321 * C1728 - C113 * C1724) * C1071 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C1067 +
           (C1092 * C1069 + C1093 * C48633 + (C1287 - C1286) * C1070 +
            (C1289 - C1288) * C48621 + (C48321 * C1730 - C113 * C1725) * C1071 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C48293 * C576 +
          (((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
            (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
            (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
               C48630 +
           (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
            (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
               C48617 +
           (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
            (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
               C48585) *
              C48293 * C577 +
          ((C1736 * C7771 + C1737 * C7765 + (C1739 - C1738) * C7772 +
            (C1741 - C1740) * C7766 + (C48321 * C1726 - C113 * C1723) * C7773 +
            (C48321 * C1732 - C113 * C1727) * C48598) *
               C48630 +
           (C1272 * C7771 + C1273 * C7765 + (C1279 - C1278) * C7772 +
            (C1281 - C1280) * C7766 + (C48321 * C1728 - C113 * C1724) * C7773 +
            (C48321 * C1733 - C113 * C1729) * C48598) *
               C48617 +
           (C1092 * C7771 + C1093 * C7765 + (C1287 - C1286) * C7772 +
            (C1289 - C1288) * C7766 + (C48321 * C1730 - C113 * C1725) * C7773 +
            (C48321 * C1734 - C113 * C1731) * C48598) *
               C48585) *
              C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C48293 * C576 +
          ((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
           (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
           (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
           (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
           (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
              C48209 * C48293 * C577 +
          (C1736 * C8949 + C1737 * C8943 + C9291 * C8950 + C9292 * C8944 +
           C9293 * C8951 + C9294 * C8945 + (C9296 - C9295) * C8952 +
           (C9298 - C9297) * C8946 + (C48321 * C9287 - C113 * C9286) * C8953 +
           (C48321 * C9289 - C113 * C9288) * C8947) *
              C48209 * C48293 * C578) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C510 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C386 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C386 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C510 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C386 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C386 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C510 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C386 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C114 + (C147 - C146) * C48304) * C103 +
            ((C149 - C148) * C114 + (C151 - C150) * C48304) * C104 +
            ((C153 - C152) * C114 + (C155 - C154) * C48304) * C105 +
            ((C157 - C156) * C114 + (C159 - C158) * C48304) * C106 +
            ((C160 - C161) * C114 + (C162 - C163) * C48304) * C107) *
               C784 +
           (((C414 - C413) * C114 + (C416 - C415) * C48304) * C103 +
            ((C418 - C417) * C114 + (C420 - C419) * C48304) * C104 +
            ((C422 - C421) * C114 + (C424 - C423) * C48304) * C105 +
            ((C426 - C425) * C114 + (C428 - C427) * C48304) * C106 +
            ((C48321 * C404 - C113 * C393) * C114 +
             (C48321 * C411 - C113 * C405) * C48304) *
                C107) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C1069 + (C147 - C146) * C48633 + C1274 * C1070 +
             C1275 * C48621 + C1276 * C1071 + C1277 * C48598) *
                C1066 +
            ((C149 - C148) * C1069 + (C151 - C150) * C48633 + C1282 * C1070 +
             C1283 * C48621 + C1284 * C1071 + C1285 * C48598) *
                C1067 +
            ((C153 - C152) * C1069 + (C155 - C154) * C48633 +
             (C297 - C298) * C1070 + (C299 - C300) * C48621 +
             (C1085 - C1086) * C1071 + (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C1069 + (C416 - C415) * C48633 +
             (C1453 - C1452) * C1070 + (C1455 - C1454) * C48621 +
             (C1457 - C1456) * C1071 + (C1459 - C1458) * C48598) *
                C1066 +
            ((C418 - C417) * C1069 + (C420 - C419) * C48633 +
             (C1461 - C1460) * C1070 + (C1463 - C1462) * C48621 +
             (C1465 - C1464) * C1071 + (C1467 - C1466) * C48598) *
                C1067 +
            ((C422 - C421) * C1069 + (C424 - C423) * C48633 +
             (C48321 * C693 - C113 * C685) * C1070 +
             (C48321 * C700 - C113 * C694) * C48621 +
             (C48321 * C1445 - C113 * C1438) * C1071 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C48276 * C512 +
          ((((C145 - C144) * C7771 + (C147 - C146) * C7765 + C1274 * C7772 +
             C1275 * C7766 + C1276 * C7773 + C1277 * C48598) *
                C48630 +
            ((C149 - C148) * C7771 + (C151 - C150) * C7765 + C1282 * C7772 +
             C1283 * C7766 + C1284 * C7773 + C1285 * C48598) *
                C48617 +
            ((C153 - C152) * C7771 + (C155 - C154) * C7765 + C3939 * C7772 +
             C3940 * C7766 + (C1085 - C1086) * C7773 +
             (C1087 - C1088) * C48598) *
                C48585) *
               C784 +
           (((C414 - C413) * C7771 + (C416 - C415) * C7765 +
             (C1453 - C1452) * C7772 + (C1455 - C1454) * C7766 +
             (C1457 - C1456) * C7773 + (C1459 - C1458) * C48598) *
                C48630 +
            ((C418 - C417) * C7771 + (C420 - C419) * C7765 +
             (C1461 - C1460) * C7772 + (C1463 - C1462) * C7766 +
             (C1465 - C1464) * C7773 + (C1467 - C1466) * C48598) *
                C48617 +
            ((C422 - C421) * C7771 + (C424 - C423) * C7765 +
             (C4072 - C4071) * C7772 + (C4074 - C4073) * C7766 +
             (C48321 * C1445 - C113 * C1438) * C7773 +
             (C48321 * C1450 - C113 * C1446) * C48598) *
                C48585) *
               C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C48276 * C512 +
          (((C145 - C144) * C8949 + (C147 - C146) * C8943 + C1274 * C8950 +
            C1275 * C8944 + C1276 * C8951 + C1277 * C8945 +
            (C1278 - C1279) * C8952 + (C1280 - C1281) * C8946 +
            (C9049 - C9050) * C8953 + (C9051 - C9052) * C8947) *
               C48209 * C784 +
           ((C414 - C413) * C8949 + (C416 - C415) * C8943 +
            (C1453 - C1452) * C8950 + (C1455 - C1454) * C8944 +
            (C1457 - C1456) * C8951 + (C1459 - C1458) * C8945 +
            (C48321 * C1892 - C113 * C1888) * C8952 +
            (C48321 * C1897 - C113 * C1893) * C8946 +
            (C48321 * C9138 - C113 * C9135) * C8953 +
            (C48321 * C9141 - C113 * C9139) * C8947) *
               C48209 * C48595) *
              C48276 * C48591)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C114 +
             (C48321 * C136 - C113 * C123) * C48304) *
                C103 +
            ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
            C176 * C105 + C177 * C106 + C178 * C107) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C114 +
             (C113 * C395 - C48321 * C406) * C48304) *
                C103 +
            ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
            ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
            ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
            ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
               C48595) *
              C260 +
          ((((C113 * C264 - C48321 * C270) * C114 +
             (C113 * C271 - C48321 * C282) * C48304) *
                C103 +
            ((C289 - C290) * C114 + (C291 - C292) * C48304) * C104 +
            ((C293 - C294) * C114 + (C295 - C296) * C48304) * C105 +
            ((C297 - C298) * C114 + (C299 - C300) * C48304) * C106 +
            ((C301 - C302) * C114 + (C303 - C304) * C48304) * C107) *
               C784 +
           (((C48321 * C687 - C113 * C682) * C114 +
             (C48321 * C697 - C113 * C688) * C48304) *
                C103 +
            ((C48321 * C689 - C113 * C683) * C114 +
             (C48321 * C698 - C113 * C690) * C48304) *
                C104 +
            ((C48321 * C691 - C113 * C684) * C114 +
             (C48321 * C699 - C113 * C692) * C48304) *
                C105 +
            ((C48321 * C693 - C113 * C685) * C114 +
             (C48321 * C700 - C113 * C694) * C48304) *
                C106 +
            ((C48321 * C695 - C113 * C686) * C114 +
             (C48321 * C701 - C113 * C696) * C48304) *
                C107) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C1069 +
             (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
             (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
                C1066 +
            ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
             C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
                C1067 +
            C1099 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C1069 +
             (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
             (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
             (C1906 - C1907) * C48598) *
                C1066 +
            ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
             (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
             (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
                C1067 +
            ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
             (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
             (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C1069 + (C1265 - C1264) * C48633 +
             (C1267 - C1266) * C1070 + (C1269 - C1268) * C48621 +
             (C1738 - C1739) * C1071 + (C1740 - C1741) * C48598) *
                C1066 +
            (C1274 * C1069 + C1275 * C48633 + C1276 * C1070 + C1277 * C48621 +
             (C1278 - C1279) * C1071 + (C1280 - C1281) * C48598) *
                C1067 +
            (C1282 * C1069 + C1283 * C48633 + C1284 * C1070 + C1285 * C48621 +
             (C1286 - C1287) * C1071 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C1069 + (C1903 - C1902) * C48633 +
             (C1905 - C1904) * C1070 + (C1907 - C1906) * C48621 +
             (C48321 * C1890 - C113 * C1887) * C1071 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C1066 +
            ((C1453 - C1452) * C1069 + (C1455 - C1454) * C48633 +
             (C1457 - C1456) * C1070 + (C1459 - C1458) * C48621 +
             (C48321 * C1892 - C113 * C1888) * C1071 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C1067 +
            ((C1461 - C1460) * C1069 + (C1463 - C1462) * C48633 +
             (C1465 - C1464) * C1070 + (C1467 - C1466) * C48621 +
             (C48321 * C1894 - C113 * C1889) * C1071 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C48321 * C122 - C113 * C115) * C7771 +
             (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
             (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
                C48630 +
            ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
             C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
                C48617 +
            C7785 * C48585) *
               C784 +
           (((C113 * C388 - C48321 * C394) * C7771 +
             (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
             (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
             (C1906 - C1907) * C48598) *
                C48630 +
            ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
             (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
             (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
                C48617 +
            ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
             (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
             (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
                C48585) *
               C48595) *
              C260 +
          ((((C1263 - C1262) * C7771 + (C1265 - C1264) * C7765 +
             (C1267 - C1266) * C7772 + (C1269 - C1268) * C7766 +
             (C1738 - C1739) * C7773 + (C1740 - C1741) * C48598) *
                C48630 +
            (C1274 * C7771 + C1275 * C7765 + C1276 * C7772 + C1277 * C7766 +
             (C1278 - C1279) * C7773 + (C1280 - C1281) * C48598) *
                C48617 +
            (C1282 * C7771 + C1283 * C7765 + C1284 * C7772 + C1285 * C7766 +
             (C1286 - C1287) * C7773 + (C1288 - C1289) * C48598) *
                C48585) *
               C784 +
           (((C1901 - C1900) * C7771 + (C1903 - C1902) * C7765 +
             (C1905 - C1904) * C7772 + (C1907 - C1906) * C7766 +
             (C48321 * C1890 - C113 * C1887) * C7773 +
             (C48321 * C1896 - C113 * C1891) * C48598) *
                C48630 +
            ((C1453 - C1452) * C7771 + (C1455 - C1454) * C7765 +
             (C1457 - C1456) * C7772 + (C1459 - C1458) * C7766 +
             (C48321 * C1892 - C113 * C1888) * C7773 +
             (C48321 * C1897 - C113 * C1893) * C48598) *
                C48617 +
            ((C1461 - C1460) * C7771 + (C1463 - C1462) * C7765 +
             (C1465 - C1464) * C7772 + (C1467 - C1466) * C7766 +
             (C48321 * C1894 - C113 * C1889) * C7773 +
             (C48321 * C1898 - C113 * C1895) * C48598) *
                C48585) *
               C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C8949 +
            (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
            (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
            C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
               C48209 * C784 +
           ((C113 * C388 - C48321 * C394) * C8949 +
            (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
            (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
            (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
            (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
            (C9391 - C9392) * C8947) *
               C48209 * C48595) *
              C260 +
          (((C1263 - C1262) * C8949 + (C1265 - C1264) * C8943 +
            (C1267 - C1266) * C8950 + (C1269 - C1268) * C8944 +
            (C1738 - C1739) * C8951 + (C1740 - C1741) * C8945 +
            (C9046 - C9045) * C8952 + (C9048 - C9047) * C8946 +
            (C9295 - C9296) * C8953 + (C9297 - C9298) * C8947) *
               C48209 * C784 +
           ((C1901 - C1900) * C8949 + (C1903 - C1902) * C8943 +
            (C1905 - C1904) * C8950 + (C1907 - C1906) * C8944 +
            (C9386 - C9385) * C8951 + (C9388 - C9387) * C8945 +
            (C9390 - C9389) * C8952 + (C9392 - C9391) * C8946 +
            (C48321 * C9381 - C113 * C9380) * C8953 +
            (C48321 * C9383 - C113 * C9382) * C8947) *
               C48209 * C48595) *
              C48593) *
         C48242) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C114 +
            (C48321 * C136 - C113 * C123) * C48304) *
               C103 +
           ((C144 - C145) * C114 + (C146 - C147) * C48304) * C104 +
           C176 * C105 + C177 * C106 + C178 * C107) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C114 +
            (C113 * C395 - C48321 * C406) * C48304) *
               C103 +
           ((C413 - C414) * C114 + (C415 - C416) * C48304) * C104 +
           ((C417 - C418) * C114 + (C419 - C420) * C48304) * C105 +
           ((C421 - C422) * C114 + (C423 - C424) * C48304) * C106 +
           ((C425 - C426) * C114 + (C427 - C428) * C48304) * C107) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C114 +
            (C48321 * C948 - C113 * C939) * C48304) *
               C103 +
           ((C48321 * C940 - C113 * C934) * C114 +
            (C48321 * C949 - C113 * C941) * C48304) *
               C104 +
           ((C48321 * C942 - C113 * C935) * C114 +
            (C48321 * C950 - C113 * C943) * C48304) *
               C105 +
           ((C48321 * C944 - C113 * C936) * C114 +
            (C48321 * C951 - C113 * C945) * C48304) *
               C106 +
           ((C48321 * C946 - C113 * C937) * C114 +
            (C48321 * C952 - C113 * C947) * C48304) *
               C107) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C1069 +
            (C48321 * C136 - C113 * C123) * C48633 + (C1262 - C1263) * C1070 +
            (C1264 - C1265) * C48621 + C1736 * C1071 + C1737 * C48598) *
               C1066 +
           ((C144 - C145) * C1069 + (C146 - C147) * C48633 + C1270 * C1070 +
            C1271 * C48621 + C1272 * C1071 + C1273 * C48598) *
               C1067 +
           C1099 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C1069 +
            (C113 * C395 - C48321 * C406) * C48633 + (C1900 - C1901) * C1070 +
            (C1902 - C1903) * C48621 + (C1904 - C1905) * C1071 +
            (C1906 - C1907) * C48598) *
               C1066 +
           ((C413 - C414) * C1069 + (C415 - C416) * C48633 +
            (C1452 - C1453) * C1070 + (C1454 - C1455) * C48621 +
            (C1456 - C1457) * C1071 + (C1458 - C1459) * C48598) *
               C1067 +
           ((C417 - C418) * C1069 + (C419 - C420) * C48633 +
            (C1460 - C1461) * C1070 + (C1462 - C1463) * C48621 +
            (C1464 - C1465) * C1071 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C1069 +
            (C48321 * C948 - C113 * C939) * C48633 +
            (C48321 * C2315 - C113 * C2309) * C1070 +
            (C48321 * C2327 - C113 * C2316) * C48621 +
            (C48321 * C2317 - C113 * C2310) * C1071 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C1066 +
           ((C48321 * C940 - C113 * C934) * C1069 +
            (C48321 * C949 - C113 * C941) * C48633 +
            (C48321 * C2319 - C113 * C2311) * C1070 +
            (C48321 * C2329 - C113 * C2320) * C48621 +
            (C48321 * C2321 - C113 * C2312) * C1071 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C1067 +
           ((C48321 * C942 - C113 * C935) * C1069 +
            (C48321 * C950 - C113 * C943) * C48633 +
            (C48321 * C2323 - C113 * C2313) * C1070 +
            (C48321 * C2331 - C113 * C2324) * C48621 +
            (C48321 * C2325 - C113 * C2314) * C1071 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C48321 * C122 - C113 * C115) * C7771 +
            (C48321 * C136 - C113 * C123) * C7765 + (C1262 - C1263) * C7772 +
            (C1264 - C1265) * C7766 + C1736 * C7773 + C1737 * C48598) *
               C48630 +
           ((C144 - C145) * C7771 + (C146 - C147) * C7765 + C1270 * C7772 +
            C1271 * C7766 + C1272 * C7773 + C1273 * C48598) *
               C48617 +
           C7785 * C48585) *
              C930 +
          (((C113 * C388 - C48321 * C394) * C7771 +
            (C113 * C395 - C48321 * C406) * C7765 + (C1900 - C1901) * C7772 +
            (C1902 - C1903) * C7766 + (C1904 - C1905) * C7773 +
            (C1906 - C1907) * C48598) *
               C48630 +
           ((C413 - C414) * C7771 + (C415 - C416) * C7765 +
            (C1452 - C1453) * C7772 + (C1454 - C1455) * C7766 +
            (C1456 - C1457) * C7773 + (C1458 - C1459) * C48598) *
               C48617 +
           ((C417 - C418) * C7771 + (C419 - C420) * C7765 +
            (C1460 - C1461) * C7772 + (C1462 - C1463) * C7766 +
            (C1464 - C1465) * C7773 + (C1466 - C1467) * C48598) *
               C48585) *
              C931 +
          (((C48321 * C938 - C113 * C933) * C7771 +
            (C48321 * C948 - C113 * C939) * C7765 +
            (C48321 * C2315 - C113 * C2309) * C7772 +
            (C48321 * C2327 - C113 * C2316) * C7766 +
            (C48321 * C2317 - C113 * C2310) * C7773 +
            (C48321 * C2328 - C113 * C2318) * C48598) *
               C48630 +
           ((C48321 * C940 - C113 * C934) * C7771 +
            (C48321 * C949 - C113 * C941) * C7765 +
            (C48321 * C2319 - C113 * C2311) * C7772 +
            (C48321 * C2329 - C113 * C2320) * C7766 +
            (C48321 * C2321 - C113 * C2312) * C7773 +
            (C48321 * C2330 - C113 * C2322) * C48598) *
               C48617 +
           ((C48321 * C942 - C113 * C935) * C7771 +
            (C48321 * C950 - C113 * C943) * C7765 +
            (C48321 * C2323 - C113 * C2313) * C7772 +
            (C48321 * C2331 - C113 * C2324) * C7766 +
            (C48321 * C2325 - C113 * C2314) * C7773 +
            (C48321 * C2332 - C113 * C2326) * C48598) *
               C48585) *
              C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C48321 * C122 - C113 * C115) * C8949 +
           (C48321 * C136 - C113 * C123) * C8943 + (C1262 - C1263) * C8950 +
           (C1264 - C1265) * C8944 + C1736 * C8951 + C1737 * C8945 +
           C9291 * C8952 + C9292 * C8946 + C9293 * C8953 + C9294 * C8947) *
              C48209 * C930 +
          ((C113 * C388 - C48321 * C394) * C8949 +
           (C113 * C395 - C48321 * C406) * C8943 + (C1900 - C1901) * C8950 +
           (C1902 - C1903) * C8944 + (C1904 - C1905) * C8951 +
           (C1906 - C1907) * C8945 + (C9385 - C9386) * C8952 +
           (C9387 - C9388) * C8946 + (C9389 - C9390) * C8953 +
           (C9391 - C9392) * C8947) *
              C48209 * C931 +
          ((C48321 * C938 - C113 * C933) * C8949 +
           (C48321 * C948 - C113 * C939) * C8943 +
           (C48321 * C2315 - C113 * C2309) * C8950 +
           (C48321 * C2327 - C113 * C2316) * C8944 +
           (C48321 * C2317 - C113 * C2310) * C8951 +
           (C48321 * C2328 - C113 * C2318) * C8945 +
           (C48321 * C9620 - C113 * C9618) * C8952 +
           (C48321 * C9624 - C113 * C9621) * C8946 +
           (C48321 * C9622 - C113 * C9619) * C8953 +
           (C48321 * C9625 - C113 * C9623) * C8947) *
              C48209 * C932) *
         C48276 * C48242) /
            (p * q * std::sqrt(p + q));
}
